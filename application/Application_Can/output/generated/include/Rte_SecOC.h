#ifndef RTE_SECOC_H
#define RTE_SECOC_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.8.4
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2022 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type SecOC
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.8.4
 * on Tue Aug 29 10:19:28 CST 2023. !!!IGNORE-LINE!!!
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <TSMem.h>
#include <Rte_SecOC_Type.h>
#include <Rte_SecOC_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_RE_VerifyStatusOverride)) && (!defined(RTE_RUNNABLEAPI_RE_MainFunctionRx)) && (!defined(RTE_RUNNABLEAPI_RE_MainFunctionTx))
#define RTE_RUNNABLEAPI_RE_VerifyStatusOverride
#define RTE_RUNNABLEAPI_RE_MainFunctionRx
#define RTE_RUNNABLEAPI_RE_MainFunctionTx
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_RE_MainFunctionRx)
#define Rte_Call_PS_RxFreshnessManagement_GetRxFreshness Rte_Call_SecOC_PS_RxFreshnessManagement_GetRxFreshness
#endif
#if defined(RTE_RUNNABLEAPI_RE_MainFunctionTx)
#define Rte_Call_PS_TxFreshnessManagement_GetTxFreshness Rte_Call_SecOC_PS_TxFreshnessManagement_GetTxFreshness
#define Rte_Call_PS_TxFreshnessManagement_SPduTxConfirmation Rte_Call_SecOC_PS_TxFreshnessManagement_SPduTxConfirmation
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#define RTE_E_VerifyStatusConfiguration_E_OK 0U
#define RTE_E_VerifyStatusConfiguration_E_NOT_OK 1U
#define RTE_E_RxFreshnessManagement_E_OK 0U
#define RTE_E_RxFreshnessManagement_E_NOT_OK 1U
#define RTE_E_RxFreshnessManagement_E_BUSY 2U
#define RTE_E_TxFreshnessManagement_E_OK 0U
#define RTE_E_TxFreshnessManagement_E_NOT_OK 1U
#define RTE_E_TxFreshnessManagement_E_BUSY 2U
#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_SecOC, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_SecOC, RTE_CONST) Rte_Instance_SecOC;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_SecOC, RTE_CONST, RTE_CONST) Rte_Inst_SecOC;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define SecOC_START_SEC_CODE
#include <SecOC_MemMap.h>
extern FUNC(Std_ReturnType, RTE_CODE) SecOC_VerifyStatusOverride (uint16 freshnessValueId, uint8 overrideStatus, uint8 numberOfMessagesToOverride);

#define SecOC_STOP_SEC_CODE
#include <SecOC_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_RE_MainFunctionRx))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_SecOC_PS_RxFreshnessManagement_GetRxFreshness (uint16 freshnessValueId, P2CONST(SecOC_FreshnessArrayType, AUTOMATIC, RTE_APPL_DATA) truncatedFreshnessValue, uint32 truncatedFreshnessLength, uint16 authVerifyAttempts, P2VAR(SecOC_FreshnessArrayType, AUTOMATIC, RTE_APPL_DATA) freshnessValue, P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) freshnessValueLength);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_SecOC_PS_RxFreshnessManagement_GetRxFreshness (uint16 freshnessValueId, P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) truncatedFreshnessValue, uint32 truncatedFreshnessLength, uint16 authVerifyAttempts, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) freshnessValue, P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) freshnessValueLength);
#endif
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_RE_MainFunctionTx))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_SecOC_PS_TxFreshnessManagement_GetTxFreshness (uint16 freshnessValueId, P2VAR(SecOC_FreshnessArrayType, AUTOMATIC, RTE_APPL_DATA) freshnessValue, P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) freshnessValueLength);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_SecOC_PS_TxFreshnessManagement_GetTxFreshness (uint16 freshnessValueId, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) freshnessValue, P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) freshnessValueLength);
#endif
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_SecOC_PS_TxFreshnessManagement_SPduTxConfirmation (uint16 freshnessValueId);
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
