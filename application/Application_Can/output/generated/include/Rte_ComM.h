#ifndef RTE_COMM_H
#define RTE_COMM_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.8.4
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2022 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type ComM
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.8.4
 * on Mon Sep 04 11:37:05 CST 2023. !!!IGNORE-LINE!!!
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <TSMem.h>
#include <Rte_ComM_Type.h>
#include <Rte_ComM_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_RE_RequestComMode)) && (!defined(RTE_RUNNABLEAPI_RE_GetCurrentComMode)) && (!defined(RTE_RUNNABLEAPI_RE_GetCurrentPNCComMode)) && (!defined(RTE_RUNNABLEAPI_RE_GetMaxComMode)) && (!defined(RTE_RUNNABLEAPI_RE_GetRequestedComMode)) && (!defined(RTE_RUNNABLEAPI_RE_Main_0))
#define RTE_RUNNABLEAPI_RE_RequestComMode
#define RTE_RUNNABLEAPI_RE_GetCurrentComMode
#define RTE_RUNNABLEAPI_RE_GetCurrentPNCComMode
#define RTE_RUNNABLEAPI_RE_GetMaxComMode
#define RTE_RUNNABLEAPI_RE_GetRequestedComMode
#define RTE_RUNNABLEAPI_RE_Main_0
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_RE_Main_0)
#define Rte_Switch_UM_ComMUser_0_currentMode Rte_Switch_ComM_UM_ComMUser_0_currentMode
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#define RTE_E_ComM_UserRequest_E_NOT_OK 1U
#define RTE_E_ComM_UserRequest_E_MODE_LIMITATION 2U
#define RTE_E_ComM_UserRequest_E_MULTIPLE_PNC_ASSIGNED 3U
#define RTE_E_ComM_UserRequest_E_NO_PNC_ASSIGNED 4U
#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_ComM, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_ComM, RTE_CONST) Rte_Instance_ComM;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_ComM, RTE_CONST, RTE_CONST) Rte_Inst_ComM;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define ComM_START_SEC_CODE
#include <ComM_MemMap.h>
extern FUNC(Std_ReturnType, RTE_CODE) ComM_Rte_RequestComMode (ComM_UserHandleType pdav0, ComM_ModeType ComMode);

extern FUNC(Std_ReturnType, RTE_CODE) ComM_Rte_GetCurrentComMode (ComM_UserHandleType pdav0, P2VAR(ComM_ModeType, AUTOMATIC, RTE_APPL_DATA) ComMode);

extern FUNC(Std_ReturnType, RTE_CODE) ComM_Rte_GetCurrentPNCComMode (ComM_UserHandleType pdav0, P2VAR(ComM_ModeType, AUTOMATIC, RTE_APPL_DATA) ComMode);

extern FUNC(Std_ReturnType, RTE_CODE) ComM_Rte_GetMaxComMode (ComM_UserHandleType pdav0, P2VAR(ComM_ModeType, AUTOMATIC, RTE_APPL_DATA) ComMode);

extern FUNC(Std_ReturnType, RTE_CODE) ComM_Rte_GetRequestedComMode (ComM_UserHandleType pdav0, P2VAR(ComM_ModeType, AUTOMATIC, RTE_APPL_DATA) ComMode);

#define ComM_STOP_SEC_CODE
#include <ComM_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_RE_Main_0))
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Switch_ComM_UM_ComMUser_0_currentMode (uint8 mode);
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
