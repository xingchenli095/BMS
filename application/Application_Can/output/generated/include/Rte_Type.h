#ifndef RTE_TYPE_H
#define RTE_TYPE_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.8.4
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2022 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte type definitions
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.8.4
 * on Mon Oct 09 13:37:53 CST 2023. !!!IGNORE-LINE!!!
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte.h>
#include <Platform_Types.h>
#include <ComStack_Types.h>
#include <Std_Types.h>
#include <Can_GeneralTypes.h>

/* ==================[Types]================================================== */
#ifndef RTE_TYPE_ComM_ModeType
#define RTE_TYPE_ComM_ModeType
typedef VAR(uint8, TYPEDEF) ComM_ModeType;
#endif
#ifndef RTE_TYPE_ComM_UserHandleType
#define RTE_TYPE_ComM_UserHandleType
typedef VAR(uint8, TYPEDEF) ComM_UserHandleType;
#endif
#ifndef RTE_TYPE_ComM_InhibitionStatusType
#define RTE_TYPE_ComM_InhibitionStatusType
typedef VAR(uint8, TYPEDEF) ComM_InhibitionStatusType;
#endif
#ifndef RTE_TYPE_ComM_InternalHandleArrayType
#define RTE_TYPE_ComM_InternalHandleArrayType
typedef VAR(ComM_UserHandleType, TYPEDEF) ComM_InternalHandleArrayType[1];
#endif
#ifndef RTE_TYPE_ComM_UserHandleArrayType
#define RTE_TYPE_ComM_UserHandleArrayType
typedef struct
{
  VAR(uint8, TYPEDEF) numberOfRequesters;
  VAR(ComM_InternalHandleArrayType, TYPEDEF) handleArray;
} ComM_UserHandleArrayType;
#endif
#ifndef RTE_TYPE_Dem_OperationCycleIdType
#define RTE_TYPE_Dem_OperationCycleIdType
typedef VAR(uint8, TYPEDEF) Dem_OperationCycleIdType;
#endif
#ifndef RTE_TYPE_Dem_IndicatorIdType
#define RTE_TYPE_Dem_IndicatorIdType
typedef VAR(uint8, TYPEDEF) Dem_IndicatorIdType;
#endif
#ifndef RTE_TYPE_Dem_RatioIdType
#define RTE_TYPE_Dem_RatioIdType
typedef VAR(uint8, TYPEDEF) Dem_RatioIdType;
#endif
#ifndef RTE_TYPE_Dem_EnableConditionType
#define RTE_TYPE_Dem_EnableConditionType
typedef VAR(uint8, TYPEDEF) Dem_EnableConditionType;
#endif
#ifndef RTE_TYPE_Dem_EventIdType
#define RTE_TYPE_Dem_EventIdType
typedef VAR(uint16, TYPEDEF) Dem_EventIdType;
#endif
#ifndef RTE_TYPE_Dem_EventStatusType
#define RTE_TYPE_Dem_EventStatusType
typedef VAR(uint8, TYPEDEF) Dem_EventStatusType;
#endif
#ifndef RTE_TYPE_Dem_DebounceResetStatusType
#define RTE_TYPE_Dem_DebounceResetStatusType
typedef VAR(uint8, TYPEDEF) Dem_DebounceResetStatusType;
#endif
#ifndef RTE_TYPE_Dem_EventStatusExtendedType
#define RTE_TYPE_Dem_EventStatusExtendedType
typedef VAR(uint8, TYPEDEF) Dem_EventStatusExtendedType;
#endif
#ifndef RTE_TYPE_Dem_UdsStatusByteType
#define RTE_TYPE_Dem_UdsStatusByteType
typedef VAR(uint8, TYPEDEF) Dem_UdsStatusByteType;
#endif
#ifndef RTE_TYPE_Dem_DebouncingStateType
#define RTE_TYPE_Dem_DebouncingStateType
typedef VAR(uint8, TYPEDEF) Dem_DebouncingStateType;
#endif
#ifndef RTE_TYPE_Dem_DTCOriginType
#define RTE_TYPE_Dem_DTCOriginType
typedef VAR(uint16, TYPEDEF) Dem_DTCOriginType;
#endif
#ifndef RTE_TYPE_Dem_DTCFormatType
#define RTE_TYPE_Dem_DTCFormatType
typedef VAR(uint8, TYPEDEF) Dem_DTCFormatType;
#endif
#ifndef RTE_TYPE_Dem_InitMonitorReasonType
#define RTE_TYPE_Dem_InitMonitorReasonType
typedef VAR(uint8, TYPEDEF) Dem_InitMonitorReasonType;
#endif
#ifndef RTE_TYPE_Dem_OperationCycleStateType
#define RTE_TYPE_Dem_OperationCycleStateType
typedef VAR(uint8, TYPEDEF) Dem_OperationCycleStateType;
#endif
#ifndef RTE_TYPE_Dem_DTCStatusMaskType
#define RTE_TYPE_Dem_DTCStatusMaskType
typedef VAR(uint8, TYPEDEF) Dem_DTCStatusMaskType;
#endif
#ifndef RTE_TYPE_Dem_IndicatorStatusType
#define RTE_TYPE_Dem_IndicatorStatusType
typedef VAR(uint8, TYPEDEF) Dem_IndicatorStatusType;
#endif
#ifndef RTE_TYPE_Dem_MaxDataValueType
#define RTE_TYPE_Dem_MaxDataValueType
typedef VAR(uint8, TYPEDEF) Dem_MaxDataValueType[7];
#endif
#ifndef RTE_TYPE_DataArrayType_DemExternalCSDataElementClass_Session
#define RTE_TYPE_DataArrayType_DemExternalCSDataElementClass_Session
typedef VAR(uint8, TYPEDEF) DataArrayType_DemExternalCSDataElementClass_Session[1];
#endif
#ifndef RTE_TYPE_DataArrayType_DemExternalCSDataElementClass_ExtDataRec_0x01
#define RTE_TYPE_DataArrayType_DemExternalCSDataElementClass_ExtDataRec_0x01
typedef VAR(uint8, TYPEDEF) DataArrayType_DemExternalCSDataElementClass_ExtDataRec_0x01[7];
#endif
#ifndef RTE_TYPE_EcuM_StateType
#define RTE_TYPE_EcuM_StateType
typedef VAR(uint8, TYPEDEF) EcuM_StateType;
#endif
#ifndef RTE_TYPE_AppStateModeRequestType
#define RTE_TYPE_AppStateModeRequestType
typedef VAR(uint8, TYPEDEF) AppStateModeRequestType;
#endif
#ifndef RTE_TYPE_NvM_BlockIdType
#define RTE_TYPE_NvM_BlockIdType
typedef VAR(uint16, TYPEDEF) NvM_BlockIdType;
#endif
#ifndef RTE_TYPE_NvM_DstPtrType
#define RTE_TYPE_NvM_DstPtrType
typedef P2VAR(void, TYPEDEF, RTE_APPL_DATA) NvM_DstPtrType;
#endif
#ifndef RTE_TYPE_NvM_RequestResultType
#define RTE_TYPE_NvM_RequestResultType
typedef VAR(uint8, TYPEDEF) NvM_RequestResultType;
#endif
#ifndef RTE_TYPE_NvM_SrcPtrType
#define RTE_TYPE_NvM_SrcPtrType
typedef P2CONST(void, TYPEDEF, RTE_APPL_DATA) NvM_SrcPtrType;
#endif
#ifndef RTE_TYPE_Boolean
#define RTE_TYPE_Boolean
typedef VAR(boolean, TYPEDEF) Boolean;
#endif
#ifndef RTE_TYPE_CarMode_datatype
#define RTE_TYPE_CarMode_datatype
typedef VAR(uint8, TYPEDEF) CarMode_datatype;
#endif
#ifndef RTE_TYPE_CcfDD00GlobalRealTime_datatype
#define RTE_TYPE_CcfDD00GlobalRealTime_datatype
typedef VAR(uint32, TYPEDEF) CcfDD00GlobalRealTime_datatype;
#endif
#ifndef RTE_TYPE_CcfDD01TotalDistance_datatype
#define RTE_TYPE_CcfDD01TotalDistance_datatype
typedef VAR(uint32, TYPEDEF) CcfDD01TotalDistance_datatype;
#endif
#ifndef RTE_TYPE_CcfDD02MainECUSupVolts_datatype
#define RTE_TYPE_CcfDD02MainECUSupVolts_datatype
typedef VAR(uint8, TYPEDEF) CcfDD02MainECUSupVolts_datatype;
#endif
#ifndef RTE_TYPE_CcfDD04InCarTemp_datatype
#define RTE_TYPE_CcfDD04InCarTemp_datatype
typedef VAR(uint8, TYPEDEF) CcfDD04InCarTemp_datatype;
#endif
#ifndef RTE_TYPE_CcfDD05OutdoorTemp_datatype
#define RTE_TYPE_CcfDD05OutdoorTemp_datatype
typedef VAR(uint8, TYPEDEF) CcfDD05OutdoorTemp_datatype;
#endif
#ifndef RTE_TYPE_CcfDD06PowerModePKT_datatype
#define RTE_TYPE_CcfDD06PowerModePKT_datatype
typedef VAR(uint8, TYPEDEF) CcfDD06PowerModePKT_datatype;
#endif
#ifndef RTE_TYPE_Char16
#define RTE_TYPE_Char16
typedef VAR(uint8, TYPEDEF) Char16;
#endif
#ifndef RTE_TYPE_Char8
#define RTE_TYPE_Char8
typedef VAR(uint8, TYPEDEF) Char8;
#endif
#ifndef RTE_TYPE_Double
#define RTE_TYPE_Double
typedef VAR(float64, TYPEDEF) Double;
#endif
#ifndef RTE_TYPE_Double_with_NaN
#define RTE_TYPE_Double_with_NaN
typedef VAR(float64, TYPEDEF) Double_with_NaN;
#endif
#ifndef RTE_TYPE_Float
#define RTE_TYPE_Float
typedef VAR(float32, TYPEDEF) Float;
#endif
#ifndef RTE_TYPE_Float_with_NaN
#define RTE_TYPE_Float_with_NaN
typedef VAR(float32, TYPEDEF) Float_with_NaN;
#endif
#ifndef RTE_TYPE_GWMEL2Threshold_datatype
#define RTE_TYPE_GWMEL2Threshold_datatype
typedef VAR(uint8, TYPEDEF) GWMEL2Threshold_datatype;
#endif
#ifndef RTE_TYPE_GWMEL3Threshold_datatype
#define RTE_TYPE_GWMEL3Threshold_datatype
typedef VAR(uint8, TYPEDEF) GWMEL3Threshold_datatype;
#endif
#ifndef RTE_TYPE_GWMWakeUpToChargeThr_datatype
#define RTE_TYPE_GWMWakeUpToChargeThr_datatype
typedef VAR(uint8, TYPEDEF) GWMWakeUpToChargeThr_datatype;
#endif
#ifndef RTE_TYPE_OdometerMasterValue_UB_datatype
#define RTE_TYPE_OdometerMasterValue_UB_datatype
typedef VAR(boolean, TYPEDEF) OdometerMasterValue_UB_datatype;
#endif
#ifndef RTE_TYPE_OdometerMasterValue_datatype
#define RTE_TYPE_OdometerMasterValue_datatype
typedef VAR(uint32, TYPEDEF) OdometerMasterValue_datatype;
#endif
#ifndef RTE_TYPE_PB1FETStatus_datatype
#define RTE_TYPE_PB1FETStatus_datatype
typedef VAR(uint8, TYPEDEF) PB1FETStatus_datatype;
#endif
#ifndef RTE_TYPE_PB2Degradation_datatype
#define RTE_TYPE_PB2Degradation_datatype
typedef VAR(uint8, TYPEDEF) PB2Degradation_datatype;
#endif
#ifndef RTE_TYPE_PB2FETStatus_datatype
#define RTE_TYPE_PB2FETStatus_datatype
typedef VAR(uint8, TYPEDEF) PB2FETStatus_datatype;
#endif
#ifndef RTE_TYPE_PBAgeing_datatype
#define RTE_TYPE_PBAgeing_datatype
typedef VAR(boolean, TYPEDEF) PBAgeing_datatype;
#endif
#ifndef RTE_TYPE_PBAhChange_datatype
#define RTE_TYPE_PBAhChange_datatype
typedef VAR(uint16, TYPEDEF) PBAhChange_datatype;
#endif
#ifndef RTE_TYPE_PBAliveCounter_datatype
#define RTE_TYPE_PBAliveCounter_datatype
typedef VAR(uint8, TYPEDEF) PBAliveCounter_datatype;
#endif
#ifndef RTE_TYPE_PBBalActvCell1_datatype
#define RTE_TYPE_PBBalActvCell1_datatype
typedef VAR(boolean, TYPEDEF) PBBalActvCell1_datatype;
#endif
#ifndef RTE_TYPE_PBBalActvCell2_datatype
#define RTE_TYPE_PBBalActvCell2_datatype
typedef VAR(boolean, TYPEDEF) PBBalActvCell2_datatype;
#endif
#ifndef RTE_TYPE_PBBalActvCell3_datatype
#define RTE_TYPE_PBBalActvCell3_datatype
typedef VAR(boolean, TYPEDEF) PBBalActvCell3_datatype;
#endif
#ifndef RTE_TYPE_PBBalActvCell4_datatype
#define RTE_TYPE_PBBalActvCell4_datatype
typedef VAR(boolean, TYPEDEF) PBBalActvCell4_datatype;
#endif
#ifndef RTE_TYPE_PBBatCurrFlt_datatype
#define RTE_TYPE_PBBatCurrFlt_datatype
typedef VAR(boolean, TYPEDEF) PBBatCurrFlt_datatype;
#endif
#ifndef RTE_TYPE_PBBatCurr_datatype
#define RTE_TYPE_PBBatCurr_datatype
typedef VAR(uint16, TYPEDEF) PBBatCurr_datatype;
#endif
#ifndef RTE_TYPE_PBBatVoltFlt_datatype
#define RTE_TYPE_PBBatVoltFlt_datatype
typedef VAR(boolean, TYPEDEF) PBBatVoltFlt_datatype;
#endif
#ifndef RTE_TYPE_PBBatVolt_datatype
#define RTE_TYPE_PBBatVolt_datatype
typedef VAR(uint8, TYPEDEF) PBBatVolt_datatype;
#endif
#ifndef RTE_TYPE_PBBattQd_datatype
#define RTE_TYPE_PBBattQd_datatype
typedef VAR(uint8, TYPEDEF) PBBattQd_datatype;
#endif
#ifndef RTE_TYPE_PBCell1VoltFlt_datatype
#define RTE_TYPE_PBCell1VoltFlt_datatype
typedef VAR(boolean, TYPEDEF) PBCell1VoltFlt_datatype;
#endif
#ifndef RTE_TYPE_PBCell1Volt_datatype
#define RTE_TYPE_PBCell1Volt_datatype
typedef VAR(uint8, TYPEDEF) PBCell1Volt_datatype;
#endif
#ifndef RTE_TYPE_PBCell2VoltFlt_datatype
#define RTE_TYPE_PBCell2VoltFlt_datatype
typedef VAR(boolean, TYPEDEF) PBCell2VoltFlt_datatype;
#endif
#ifndef RTE_TYPE_PBCell2Volt_datatype
#define RTE_TYPE_PBCell2Volt_datatype
typedef VAR(uint8, TYPEDEF) PBCell2Volt_datatype;
#endif
#ifndef RTE_TYPE_PBCell3VoltFlt_datatype
#define RTE_TYPE_PBCell3VoltFlt_datatype
typedef VAR(boolean, TYPEDEF) PBCell3VoltFlt_datatype;
#endif
#ifndef RTE_TYPE_PBCell3Volt_datatype
#define RTE_TYPE_PBCell3Volt_datatype
typedef VAR(uint8, TYPEDEF) PBCell3Volt_datatype;
#endif
#ifndef RTE_TYPE_PBCell4VoltFlt_datatype
#define RTE_TYPE_PBCell4VoltFlt_datatype
typedef VAR(boolean, TYPEDEF) PBCell4VoltFlt_datatype;
#endif
#ifndef RTE_TYPE_PBCell4Volt_datatype
#define RTE_TYPE_PBCell4Volt_datatype
typedef VAR(uint8, TYPEDEF) PBCell4Volt_datatype;
#endif
#ifndef RTE_TYPE_PBCpctyAbsolute_datatype
#define RTE_TYPE_PBCpctyAbsolute_datatype
typedef VAR(uint8, TYPEDEF) PBCpctyAbsolute_datatype;
#endif
#ifndef RTE_TYPE_PBCpctyRelative_datatype
#define RTE_TYPE_PBCpctyRelative_datatype
typedef VAR(uint8, TYPEDEF) PBCpctyRelative_datatype;
#endif
#ifndef RTE_TYPE_PBCriticErrGpAC_datatype
#define RTE_TYPE_PBCriticErrGpAC_datatype
typedef VAR(uint8, TYPEDEF) PBCriticErrGpAC_datatype;
#endif
#ifndef RTE_TYPE_PBCriticErrGpCS_datatype
#define RTE_TYPE_PBCriticErrGpCS_datatype
typedef VAR(uint8, TYPEDEF) PBCriticErrGpCS_datatype;
#endif
#ifndef RTE_TYPE_PBCriticErrProtd_datatype
#define RTE_TYPE_PBCriticErrProtd_datatype
typedef VAR(uint8, TYPEDEF) PBCriticErrProtd_datatype;
#endif
#ifndef RTE_TYPE_PBCriticErr_datatype
#define RTE_TYPE_PBCriticErr_datatype
typedef VAR(uint8, TYPEDEF) PBCriticErr_datatype;
#endif
#ifndef RTE_TYPE_PBDegradationGpAC_datatype
#define RTE_TYPE_PBDegradationGpAC_datatype
typedef VAR(uint8, TYPEDEF) PBDegradationGpAC_datatype;
#endif
#ifndef RTE_TYPE_PBDegradationGpCS_datatype
#define RTE_TYPE_PBDegradationGpCS_datatype
typedef VAR(uint8, TYPEDEF) PBDegradationGpCS_datatype;
#endif
#ifndef RTE_TYPE_PBDegradation_datatype
#define RTE_TYPE_PBDegradation_datatype
typedef VAR(uint8, TYPEDEF) PBDegradation_datatype;
#endif
#ifndef RTE_TYPE_PBECUFlt_datatype
#define RTE_TYPE_PBECUFlt_datatype
typedef VAR(boolean, TYPEDEF) PBECUFlt_datatype;
#endif
#ifndef RTE_TYPE_PBECUSerial_datatype
#define RTE_TYPE_PBECUSerial_datatype
typedef VAR(uint8, TYPEDEF) PBECUSerial_datatype[8];
#endif
#ifndef RTE_TYPE_PBErsoStatus_datatype
#define RTE_TYPE_PBErsoStatus_datatype
typedef VAR(boolean, TYPEDEF) PBErsoStatus_datatype;
#endif
#ifndef RTE_TYPE_PBMaxChrgCurrLmt_datatype
#define RTE_TYPE_PBMaxChrgCurrLmt_datatype
typedef VAR(uint16, TYPEDEF) PBMaxChrgCurrLmt_datatype;
#endif
#ifndef RTE_TYPE_PBMaxChrgVoltLmt_datatype
#define RTE_TYPE_PBMaxChrgVoltLmt_datatype
typedef VAR(uint8, TYPEDEF) PBMaxChrgVoltLmt_datatype;
#endif
#ifndef RTE_TYPE_PBMaxDchgCurrLmt_datatype
#define RTE_TYPE_PBMaxDchgCurrLmt_datatype
typedef VAR(uint16, TYPEDEF) PBMaxDchgCurrLmt_datatype;
#endif
#ifndef RTE_TYPE_PBMinBatCurr_datatype
#define RTE_TYPE_PBMinBatCurr_datatype
typedef VAR(uint8, TYPEDEF) PBMinBatCurr_datatype;
#endif
#ifndef RTE_TYPE_PBMinBatVolt_datatype
#define RTE_TYPE_PBMinBatVolt_datatype
typedef VAR(uint8, TYPEDEF) PBMinBatVolt_datatype;
#endif
#ifndef RTE_TYPE_PBMinCrnkSOCLmt_datatype
#define RTE_TYPE_PBMinCrnkSOCLmt_datatype
typedef VAR(uint8, TYPEDEF) PBMinCrnkSOCLmt_datatype;
#endif
#ifndef RTE_TYPE_PBPackVoltFlt_datatype
#define RTE_TYPE_PBPackVoltFlt_datatype
typedef VAR(boolean, TYPEDEF) PBPackVoltFlt_datatype;
#endif
#ifndef RTE_TYPE_PBPackVolt_datatype
#define RTE_TYPE_PBPackVolt_datatype
typedef VAR(uint8, TYPEDEF) PBPackVolt_datatype;
#endif
#ifndef RTE_TYPE_PBParkingTime_datatype
#define RTE_TYPE_PBParkingTime_datatype
typedef VAR(uint8, TYPEDEF) PBParkingTime_datatype;
#endif
#ifndef RTE_TYPE_PBPos1TempFlt_datatype
#define RTE_TYPE_PBPos1TempFlt_datatype
typedef VAR(boolean, TYPEDEF) PBPos1TempFlt_datatype;
#endif
#ifndef RTE_TYPE_PBPos1Temp_datatype
#define RTE_TYPE_PBPos1Temp_datatype
typedef VAR(uint8, TYPEDEF) PBPos1Temp_datatype;
#endif
#ifndef RTE_TYPE_PBPos2TempFlt_datatype
#define RTE_TYPE_PBPos2TempFlt_datatype
typedef VAR(boolean, TYPEDEF) PBPos2TempFlt_datatype;
#endif
#ifndef RTE_TYPE_PBPos2Temp_datatype
#define RTE_TYPE_PBPos2Temp_datatype
typedef VAR(uint8, TYPEDEF) PBPos2Temp_datatype;
#endif
#ifndef RTE_TYPE_PBQChaRideCn_datatype
#define RTE_TYPE_PBQChaRideCn_datatype
typedef VAR(uint16, TYPEDEF) PBQChaRideCn_datatype;
#endif
#ifndef RTE_TYPE_PBQChaRunCn_datatype
#define RTE_TYPE_PBQChaRunCn_datatype
typedef VAR(uint16, TYPEDEF) PBQChaRunCn_datatype;
#endif
#ifndef RTE_TYPE_PBQDchActCn_datatype
#define RTE_TYPE_PBQDchActCn_datatype
typedef VAR(uint16, TYPEDEF) PBQDchActCn_datatype;
#endif
#ifndef RTE_TYPE_PBQDchActHiCn_datatype
#define RTE_TYPE_PBQDchActHiCn_datatype
typedef VAR(uint16, TYPEDEF) PBQDchActHiCn_datatype;
#endif
#ifndef RTE_TYPE_PBQDchEcoStpCn_datatype
#define RTE_TYPE_PBQDchEcoStpCn_datatype
typedef VAR(uint16, TYPEDEF) PBQDchEcoStpCn_datatype;
#endif
#ifndef RTE_TYPE_PBQDchQdCn_datatype
#define RTE_TYPE_PBQDchQdCn_datatype
typedef VAR(uint16, TYPEDEF) PBQDchQdCn_datatype;
#endif
#ifndef RTE_TYPE_PBQDchaRideCn_datatype
#define RTE_TYPE_PBQDchaRideCn_datatype
typedef VAR(uint16, TYPEDEF) PBQDchaRideCn_datatype;
#endif
#ifndef RTE_TYPE_PBQDchaRunCn_datatype
#define RTE_TYPE_PBQDchaRunCn_datatype
typedef VAR(uint16, TYPEDEF) PBQDchaRunCn_datatype;
#endif
#ifndef RTE_TYPE_PBRelayClsFlt_datatype
#define RTE_TYPE_PBRelayClsFlt_datatype
typedef VAR(boolean, TYPEDEF) PBRelayClsFlt_datatype;
#endif
#ifndef RTE_TYPE_PBRelayOpenFlt_datatype
#define RTE_TYPE_PBRelayOpenFlt_datatype
typedef VAR(boolean, TYPEDEF) PBRelayOpenFlt_datatype;
#endif
#ifndef RTE_TYPE_PBRelayStatus_datatype
#define RTE_TYPE_PBRelayStatus_datatype
typedef VAR(uint8, TYPEDEF) PBRelayStatus_datatype;
#endif
#ifndef RTE_TYPE_PBSOHCapFade_datatype
#define RTE_TYPE_PBSOHCapFade_datatype
typedef VAR(uint8, TYPEDEF) PBSOHCapFade_datatype;
#endif
#ifndef RTE_TYPE_PBSOHImpGrowth_datatype
#define RTE_TYPE_PBSOHImpGrowth_datatype
typedef VAR(uint8, TYPEDEF) PBSOHImpGrowth_datatype;
#endif
#ifndef RTE_TYPE_PBSOHImpedanceAbs_datatype
#define RTE_TYPE_PBSOHImpedanceAbs_datatype
typedef VAR(uint8, TYPEDEF) PBSOHImpedanceAbs_datatype;
#endif
#ifndef RTE_TYPE_PBSWVer_datatype
#define RTE_TYPE_PBSWVer_datatype
typedef VAR(uint8, TYPEDEF) PBSWVer_datatype;
#endif
#ifndef RTE_TYPE_PBSoCAbsolute_datatype
#define RTE_TYPE_PBSoCAbsolute_datatype
typedef VAR(uint8, TYPEDEF) PBSoCAbsolute_datatype;
#endif
#ifndef RTE_TYPE_PBSoCRelative_datatype
#define RTE_TYPE_PBSoCRelative_datatype
typedef VAR(uint8, TYPEDEF) PBSoCRelative_datatype;
#endif
#ifndef RTE_TYPE_PBTIS_datatype
#define RTE_TYPE_PBTIS_datatype
typedef VAR(uint16, TYPEDEF) PBTIS_datatype;
#endif
#ifndef RTE_TYPE_PBTOCReq_datatype
#define RTE_TYPE_PBTOCReq_datatype
typedef VAR(boolean, TYPEDEF) PBTOCReq_datatype;
#endif
#ifndef RTE_TYPE_PBVehCount_datatype
#define RTE_TYPE_PBVehCount_datatype
typedef VAR(uint8, TYPEDEF) PBVehCount_datatype;
#endif
#ifndef RTE_TYPE_PBVehQd_datatype
#define RTE_TYPE_PBVehQd_datatype
typedef VAR(uint8, TYPEDEF) PBVehQd_datatype;
#endif
#ifndef RTE_TYPE_PBWURLowChargeLmt_datatype
#define RTE_TYPE_PBWURLowChargeLmt_datatype
typedef VAR(boolean, TYPEDEF) PBWURLowChargeLmt_datatype;
#endif
#ifndef RTE_TYPE_PBWURMinChargeLmt_datatype
#define RTE_TYPE_PBWURMinChargeLmt_datatype
typedef VAR(boolean, TYPEDEF) PBWURMinChargeLmt_datatype;
#endif
#ifndef RTE_TYPE_PBWakeUpToChgReq_datatype
#define RTE_TYPE_PBWakeUpToChgReq_datatype
typedef VAR(boolean, TYPEDEF) PBWakeUpToChgReq_datatype;
#endif
#ifndef RTE_TYPE_PBWakeupStat_datatype
#define RTE_TYPE_PBWakeupStat_datatype
typedef VAR(boolean, TYPEDEF) PBWakeupStat_datatype;
#endif
#ifndef RTE_TYPE_PowerMode_datatype
#define RTE_TYPE_PowerMode_datatype
typedef VAR(uint8, TYPEDEF) PowerMode_datatype;
#endif
#ifndef RTE_TYPE_PowerPackStatus_UB_datatype
#define RTE_TYPE_PowerPackStatus_UB_datatype
typedef VAR(boolean, TYPEDEF) PowerPackStatus_UB_datatype;
#endif
#ifndef RTE_TYPE_PowerPackStatus_datatype
#define RTE_TYPE_PowerPackStatus_datatype
typedef VAR(uint8, TYPEDEF) PowerPackStatus_datatype;
#endif
#ifndef RTE_TYPE_SBShortVehID_datatype
#define RTE_TYPE_SBShortVehID_datatype
typedef VAR(uint8, TYPEDEF) SBShortVehID_datatype[8];
#endif
#ifndef RTE_TYPE_SF_VEHCONFIG_400RIO_MUX_PDU_176_datatype
#define RTE_TYPE_SF_VEHCONFIG_400RIO_MUX_PDU_176_datatype
typedef VAR(uint8, TYPEDEF) SF_VEHCONFIG_400RIO_MUX_PDU_176_datatype;
#endif
#ifndef RTE_TYPE_SF_VEHCONFIG_400RIO_MUX_PDU_177_datatype
#define RTE_TYPE_SF_VEHCONFIG_400RIO_MUX_PDU_177_datatype
typedef VAR(uint8, TYPEDEF) SF_VEHCONFIG_400RIO_MUX_PDU_177_datatype;
#endif
#ifndef RTE_TYPE_SInt16
#define RTE_TYPE_SInt16
typedef VAR(sint16, TYPEDEF) SInt16;
#endif
#ifndef RTE_TYPE_SInt32
#define RTE_TYPE_SInt32
typedef VAR(sint32, TYPEDEF) SInt32;
#endif
#ifndef RTE_TYPE_SInt4
#define RTE_TYPE_SInt4
typedef VAR(sint8, TYPEDEF) SInt4;
#endif
#ifndef RTE_TYPE_SInt8
#define RTE_TYPE_SInt8
typedef VAR(sint8, TYPEDEF) SInt8;
#endif
#ifndef RTE_TYPE_SOTAPrepRequest_datatype
#define RTE_TYPE_SOTAPrepRequest_datatype
typedef VAR(uint8, TYPEDEF) SOTAPrepRequest_datatype;
#endif
#ifndef RTE_TYPE_TST_FunctionalReq_RIO_PDU_datatype
#define RTE_TYPE_TST_FunctionalReq_RIO_PDU_datatype
typedef VAR(uint8, TYPEDEF) TST_FunctionalReq_RIO_PDU_datatype[8];
#endif
#ifndef RTE_TYPE_TST_PhysicalReqPBU_RIO_PDU_datatype
#define RTE_TYPE_TST_PhysicalReqPBU_RIO_PDU_datatype
typedef VAR(uint8, TYPEDEF) TST_PhysicalReqPBU_RIO_PDU_datatype[8];
#endif
#ifndef RTE_TYPE_TST_PhysicalRespPBU_RIO_PDU_datatype
#define RTE_TYPE_TST_PhysicalRespPBU_RIO_PDU_datatype
typedef VAR(uint8, TYPEDEF) TST_PhysicalRespPBU_RIO_PDU_datatype[8];
#endif
#ifndef RTE_TYPE_UInt16
#define RTE_TYPE_UInt16
typedef VAR(uint16, TYPEDEF) UInt16;
#endif
#ifndef RTE_TYPE_UInt32
#define RTE_TYPE_UInt32
typedef VAR(uint32, TYPEDEF) UInt32;
#endif
#ifndef RTE_TYPE_UInt4
#define RTE_TYPE_UInt4
typedef VAR(uint8, TYPEDEF) UInt4;
#endif
#ifndef RTE_TYPE_UInt8
#define RTE_TYPE_UInt8
typedef VAR(uint8, TYPEDEF) UInt8;
#endif
#ifndef RTE_TYPE_UInt8_n
#define RTE_TYPE_UInt8_n
typedef VAR(uint8, TYPEDEF) UInt8_n[8];
#endif
#ifndef RTE_TYPE_VehMovementChecksum_datatype
#define RTE_TYPE_VehMovementChecksum_datatype
typedef VAR(uint8, TYPEDEF) VehMovementChecksum_datatype;
#endif
#ifndef RTE_TYPE_VehMovementCounter_datatype
#define RTE_TYPE_VehMovementCounter_datatype
typedef VAR(uint8, TYPEDEF) VehMovementCounter_datatype;
#endif
#ifndef RTE_TYPE_VehMovementDirection_datatype
#define RTE_TYPE_VehMovementDirection_datatype
typedef VAR(uint8, TYPEDEF) VehMovementDirection_datatype;
#endif
#ifndef RTE_TYPE_VehMovementStatus_datatype
#define RTE_TYPE_VehMovementStatus_datatype
typedef VAR(boolean, TYPEDEF) VehMovementStatus_datatype;
#endif
#ifndef RTE_TYPE_WheelDirectionFL_datatype
#define RTE_TYPE_WheelDirectionFL_datatype
typedef VAR(uint8, TYPEDEF) WheelDirectionFL_datatype;
#endif
#ifndef RTE_TYPE_WheelDirectionFR_datatype
#define RTE_TYPE_WheelDirectionFR_datatype
typedef VAR(uint8, TYPEDEF) WheelDirectionFR_datatype;
#endif
#ifndef RTE_TYPE_WheelDirectionRL_datatype
#define RTE_TYPE_WheelDirectionRL_datatype
typedef VAR(uint8, TYPEDEF) WheelDirectionRL_datatype;
#endif
#ifndef RTE_TYPE_WheelDirectionRR_datatype
#define RTE_TYPE_WheelDirectionRR_datatype
typedef VAR(uint8, TYPEDEF) WheelDirectionRR_datatype;
#endif
#ifndef RTE_TYPE_uint16
#define RTE_TYPE_uint16
typedef VAR(unsigned short, TYPEDEF) uint16;
#endif
#ifndef RTE_TYPE_uint8
#define RTE_TYPE_uint8
typedef VAR(unsigned char, TYPEDEF) uint8;
#endif
typedef struct
{
  VAR(uint8, TYPEDEF) currentMode;
  VAR(uint8, TYPEDEF) previousMode;
  VAR(uint8, TYPEDEF) nextMode;
} Rte_Intern_Rte_ModeVariable_0Type;
typedef struct
{
  VAR(AppStateModeRequestType, TYPEDEF) value;
} Rte_DE_AppStateModeRequestType;
typedef struct
{
  VAR(uint8, TYPEDEF) _dummy;
} Rte_CDS_BswM;
typedef struct
{
  VAR(uint8, TYPEDEF) _dummy;
} Rte_CDS_ComM;
typedef struct
{
  VAR(uint8, TYPEDEF) _dummy;
} Rte_CDS_Dem;
typedef struct
{
  VAR(uint8, TYPEDEF) _dummy;
} Rte_CDS_DevelopmentErrorTracer;
typedef struct
{
  VAR(uint8, TYPEDEF) _dummy;
} Rte_CDS_NvM;
typedef struct
{
  /* Data Handles section */
  P2VAR(Rte_DE_AppStateModeRequestType, TYPEDEF, RTE_APPL_DATA) Runable_StateHandler_AppStateRequest_If_AppStateRequestMode;
} Rte_CDS_SWC_AppStateHandler;
typedef struct
{
  VAR(uint8, TYPEDEF) _dummy;
} Rte_CDS_SWC_IoHwAbs;
typedef struct
{
  VAR(uint8, TYPEDEF) _dummy;
} Rte_CDS_SWC_SPI;
typedef struct
{
  VAR(uint8, TYPEDEF) _dummy;
} Rte_CDS_ServiceSwComponentDem;

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
