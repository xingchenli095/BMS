#ifndef RTE_SWC_SPI_H
#define RTE_SWC_SPI_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.8.4
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2022 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type SWC_SPI
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.8.4
 * on Wed Sep 20 11:12:18 CST 2023. !!!IGNORE-LINE!!!
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <TSMem.h>
#include <Rte_SWC_SPI_Type.h>
#include <Rte_SWC_SPI_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_NvM_Cyclic)) && (!defined(RTE_RUNNABLEAPI_SPI_cyclic))
#define RTE_RUNNABLEAPI_NvM_Cyclic
#define RTE_RUNNABLEAPI_SPI_cyclic
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_NvM_Cyclic)
#define Rte_Read_Rp_AdcValue_ArgData Rte_Read_SWC_SPI_Rp_AdcValue_ArgData
#define Rte_Call_PS_NvM_Block_voltage_ReadBlock Rte_Call_SWC_SPI_PS_NvM_Block_voltage_ReadBlock
#define Rte_Call_PS_NvM_Block_voltage_WriteBlock Rte_Call_SWC_SPI_PS_NvM_Block_voltage_WriteBlock
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#define RTE_E_NvMService_E_NOT_OK 1U
#ifndef RTE_CORE /* if included by software component */
#define Rte_InitValue_Rp_AdcValue_ArgData 0U
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_SWC_SPI, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_SWC_SPI, RTE_CONST) Rte_Instance_SWC_SPI;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_SWC_SPI, RTE_CONST, RTE_CONST) Rte_Inst_SWC_SPI;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define SWC_SPI_START_SEC_CODE
#include <SWC_SPI_MemMap.h>
extern FUNC(void, RTE_CODE) NvM_Cyclic (void);

extern FUNC(void, RTE_CODE) SPI_cyclic (void);

#define SWC_SPI_STOP_SEC_CODE
#include <SWC_SPI_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_NvM_Cyclic))
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SWC_SPI_Rp_AdcValue_ArgData (P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_SWC_SPI_PS_NvM_Block_voltage_ReadBlock (NvM_DstPtrType DstPtr);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_SWC_SPI_PS_NvM_Block_voltage_WriteBlock (NvM_SrcPtrType SrcPtr);
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
