/**
 * \file
 *
 * \brief AUTOSAR Crypto
 *
 * This file contains the implementation of the AUTOSAR
 * module Crypto.
 *
 * \version 1.7.51
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2022 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */


/*==================[misra deviations]============================================================*/

/*==================[inclusions]==================================================================*/

#include <Crypto.h>
#include <Crypto_Int.h>
#include <Crypto_AL.h>
#include <Crypto_Cfg.h>
#include <TSAutosar.h>
#include <SchM_Crypto.h>

/*==================[macros]======================================================================*/

/*==================[declaration of types]========================================================*/

/*==================[declaration of internal functions]===========================================*/

/*==================[definition of internal constants]============================================*/

#define CRYPTO_START_SEC_CONST_UNSPECIFIED
#include <Crypto_MemMap.h>

/**
 * \brief Key Type for crypto key CryptoKeyTypeRef.
 * Contains references to the key elements used by the key
 */
static CONSTP2VAR(Crypto_KeyElement, AUTOMATIC, AUTOMATIC) Crypto_KeyType0[2] =
{
    &Crypto_KeyElements
     [CRYPTO_KE_CRYPTOKEYELEMENT_SECOC_KEY_INDEX],
    &Crypto_KeyElements
     [CRYPTO_KE_CRYPTOKEYELEMENT_KEY_CHECKSUM_INDEX],
};
/**
 * \brief Key Type for crypto key CryptoKeyTypeRef.
 * Contains references to the key elements used by the key
 */
static CONSTP2VAR(Crypto_KeyElement, AUTOMATIC, AUTOMATIC) Crypto_KeyType1[2] =
{
    &Crypto_KeyElements
     [CRYPTO_KE_CRYPTOKEYELEMENT_SECOC_KEY_INDEX],
    &Crypto_KeyElements
     [CRYPTO_KE_CRYPTOKEYELEMENT_KEY_CHECKSUM_INDEX],
};

#define CRYPTO_STOP_SEC_CONST_UNSPECIFIED
#include <Crypto_MemMap.h>

/*==================[definition of internal variables]============================================*/

/*==================[definition of external constants]============================================*/

/*==================[definition of external variables]============================================*/

#define CRYPTO_START_SEC_VAR_CLEARED_UNSPECIFIED
#include <Crypto_MemMap.h>


#define CRYPTO_STOP_SEC_VAR_CLEARED_UNSPECIFIED
#include <Crypto_MemMap.h>

/**
 * \brief Data structure to store the queue information for each crypto driver object
 */

#define CRYPTO_START_SEC_VAR_INIT_UNSPECIFIED
#include <Crypto_MemMap.h>

#if (CRYPTO_QUEUE == STD_ON)
VAR(Crypto_QueueType, AUTOMATIC)
    Crypto_Queues[CRYPTO_DRIVER_OBJECT_COUNT] =
{
  {
    0U,
    CRYPTO_DO_CRYPTODRIVEROBJECT_SOFTWARE_QUEUE_SIZE,
    NULL_PTR,
    NULL_PTR
  },
};
#endif /* #if (CRYPTO_QUEUE == STD_ON) */

/**
 * \brief Data structure to store the configured crypto key elements
 */
VAR(Crypto_KeyElement, CRYPTO_VAR) Crypto_KeyElements[CRYPTO_KEY_ELEMENT_COUNT] =
{
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CIPHER_IV,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_IV_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_IV_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_IV_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_IV_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_IV_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_IV_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CIPHER_KEY,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_KEY_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_KEY_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_KEY_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_KEY_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_KEY_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_KEY_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CMAC_KEY,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CMAC_KEY_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CMAC_KEY_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CMAC_KEY_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CMAC_KEY_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CMAC_KEY_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CMAC_KEY_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_HMAC_KEY,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_HMAC_KEY_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_HMAC_KEY_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_HMAC_KEY_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_HMAC_KEY_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_HMAC_KEY_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_HMAC_KEY_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_SIPHASH_KEY,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIPHASH_KEY_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_SIPHASH_KEY_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIPHASH_KEY_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIPHASH_KEY_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIPHASH_KEY_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIPHASH_KEY_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP256R1,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP256R1_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP256R1_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP256R1_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP256R1_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP256R1_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP256R1_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP384R1,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP384R1_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP384R1_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP384R1_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP384R1_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP384R1_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP384R1_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_X25519,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_X25519_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_X25519_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_X25519_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_X25519_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_X25519_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_X25519_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP256R1,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP256R1_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP256R1_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP256R1_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP256R1_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP256R1_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP256R1_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP384R1,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP384R1_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP384R1_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP384R1_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP384R1_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP384R1_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP384R1_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_X25519,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_X25519_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_X25519_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_X25519_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_X25519_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_X25519_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_X25519_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP256R1,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP256R1_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP256R1_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP256R1_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP256R1_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP256R1_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP256R1_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP384R1,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP384R1_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP384R1_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP384R1_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP384R1_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP384R1_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP384R1_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_X25519,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_X25519_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_X25519_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_X25519_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_X25519_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_X25519_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_X25519_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_ECCNIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_ECCNIST_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_ECCNIST_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_ECCNIST_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_ECCNIST_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_ECCNIST_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_ECCNIST_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_X25519,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_X25519_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_X25519_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_X25519_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_X25519_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_X25519_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_X25519_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP256R1,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP256R1_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP256R1_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP256R1_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP256R1_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP256R1_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP256R1_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP384R1,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP384R1_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP384R1_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP384R1_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP384R1_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP384R1_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP384R1_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_CURVE_X25519,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_X25519_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_X25519_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_X25519_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_X25519_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_X25519_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_X25519_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_SIGNATURE_KEY,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIGNATURE_KEY_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_SIGNATURE_KEY_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIGNATURE_KEY_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIGNATURE_KEY_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIGNATURE_KEY_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIGNATURE_KEY_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_CURRENT_TIME,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_CURRENT_TIME_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_CURRENT_TIME_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_CURRENT_TIME_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_CURRENT_TIME_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_CURRENT_TIME_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_CURRENT_TIME_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_DATA,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_DATA_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_DATA_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_DATA_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_DATA_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_DATA_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_DATA_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_EXTENSIONS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_EXTENSIONS_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_EXTENSIONS_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_EXTENSIONS_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_EXTENSIONS_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_EXTENSIONS_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_EXTENSIONS_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_ISSUER,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_ISSUER_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_ISSUER_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_ISSUER_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_ISSUER_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_ISSUER_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_ISSUER_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_PARSING_FORMAT,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_PARSING_FORMAT_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_PARSING_FORMAT_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_PARSING_FORMAT_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_PARSING_FORMAT_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_PARSING_FORMAT_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_PARSING_FORMAT_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_SERIALNUMBER,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SERIALNUMBER_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SERIALNUMBER_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SERIALNUMBER_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SERIALNUMBER_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SERIALNUMBER_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SERIALNUMBER_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_SIGNATURE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_SIGNATURE_ALGORITHM,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_ALGORITHM_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_ALGORITHM_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_ALGORITHM_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_ALGORITHM_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_ALGORITHM_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_ALGORITHM_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_SUBJECT,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_SUBJECT_PUBLIC_KEY,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_PUBLIC_KEY_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_PUBLIC_KEY_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_PUBLIC_KEY_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_PUBLIC_KEY_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_PUBLIC_KEY_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_PUBLIC_KEY_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_AFTER,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_AFTER_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_AFTER_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_AFTER_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_AFTER_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_AFTER_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_AFTER_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_BEFORE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_BEFORE_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_BEFORE_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_BEFORE_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_BEFORE_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_BEFORE_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_BEFORE_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CERTIFICATE_VERSION,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VERSION_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VERSION_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VERSION_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VERSION_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VERSION_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VERSION_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_RANDOM_SEED_STATE_CTRDRBG,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_CTRDRBG_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_CTRDRBG_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_CTRDRBG_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_CTRDRBG_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_CTRDRBG_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_CTRDRBG_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_RANDOM_SEED_COUNT_CTRDRBG,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_COUNT_CTRDRBG_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_COUNT_CTRDRBG_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_COUNT_CTRDRBG_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_COUNT_CTRDRBG_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_COUNT_CTRDRBG_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_COUNT_CTRDRBG_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_RANDOM_SEED_STATE_SSG,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_SSG_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_SSG_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_SSG_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_SSG_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_SSG_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_SSG_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_RANDOM_ALGORITHM_CTRDRBG,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_CTRDRBG_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_CTRDRBG_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_CTRDRBG_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_CTRDRBG_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_CTRDRBG_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_CTRDRBG_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_RANDOM_ALGORITHM_SSG,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_SSG_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_SSG_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_SSG_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_SSG_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_SSG_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_SSG_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYDERIVATION_PASSWORD,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_PASSWORD_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_PASSWORD_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_PASSWORD_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_PASSWORD_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_PASSWORD_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_PASSWORD_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYDERIVATION_SALT,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_SALT_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_SALT_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_SALT_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_SALT_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_SALT_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_SALT_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYDERIVATION_ALGORITHM_HMAC_SHA2256,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_HMAC_SHA2256_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_HMAC_SHA2256_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_HMAC_SHA2256_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_HMAC_SHA2256_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_HMAC_SHA2256_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_HMAC_SHA2256_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYDERIVATION_ALGORITHM_SHA_SHA2256,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_SHA_SHA2256_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_SHA_SHA2256_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_SHA_SHA2256_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_SHA_SHA2256_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_SHA_SHA2256_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_SHA_SHA2256_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_AES_EXPANDEDKEY,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_AES_EXPANDEDKEY_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_AES_EXPANDEDKEY_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_AES_EXPANDEDKEY_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_AES_EXPANDEDKEY_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_AES_EXPANDEDKEY_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_AES_EXPANDEDKEY_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_MAC_AESCMAC_SUBKEY1,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY1_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY1_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY1_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY1_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY1_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY1_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_MAC_AESCMAC_SUBKEY2,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY2_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY2_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY2_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY2_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY2_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY2_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_RSA_BARRETT,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_BARRETT_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_BARRETT_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_BARRETT_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_BARRETT_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_BARRETT_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_BARRETT_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_RSA_ADDITIONAL_INPUT,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_ADDITIONAL_INPUT_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_ADDITIONAL_INPUT_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_ADDITIONAL_INPUT_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_ADDITIONAL_INPUT_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_ADDITIONAL_INPUT_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_ADDITIONAL_INPUT_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CIPHER_2NDKEY,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_2NDKEY_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_2NDKEY_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_2NDKEY_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_2NDKEY_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_2NDKEY_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_2NDKEY_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_CIPHER_PROOF,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_PROOF_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_PROOF_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_PROOF_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_PROOF_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_PROOF_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_PROOF_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYDERIVATION_ITERATIONS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ITERATIONS_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ITERATIONS_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ITERATIONS_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ITERATIONS_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ITERATIONS_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ITERATIONS_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_ALGORITHM,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_CURVE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYEXCHANGE_BASE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_BASE_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_BASE_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_BASE_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_BASE_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_BASE_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_BASE_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYGENERATE_ALGORITHM,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_ALGORITHM_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_ALGORITHM_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_ALGORITHM_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_ALGORITHM_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_ALGORITHM_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_ALGORITHM_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYGENERATE_KEY,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_KEY_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_KEY_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_KEY_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_KEY_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_KEY_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_KEY_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_KEYGENERATE_SEED,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_SEED_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_SEED_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_SEED_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_SEED_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_SEED_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_SEED_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_CRYPTO_KE_MAC_PROOF,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_PROOF_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_PROOF_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_PROOF_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_PROOF_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_PROOF_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_PROOF_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_Key_Checksum,
    CRYPTO_KE_CRYPTOKEYELEMENT_KEY_CHECKSUM_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_KEY_CHECKSUM_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_KEY_CHECKSUM_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_KEY_CHECKSUM_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_KEY_CHECKSUM_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_KEY_CHECKSUM_WRITE_ACCESS
  },
  {
    CryptoConf_CryptoKeyElement_CryptoKeyElement_SecOC_Key,
    CRYPTO_KE_CRYPTOKEYELEMENT_SECOC_KEY_ALLOW_PARTIAL_ACCESS,
    Crypto_CRYPTOKEYELEMENT_SECOC_KEY_INIT_VALUE,
    CRYPTO_KE_CRYPTOKEYELEMENT_SECOC_KEY_PERSIST,
    CRYPTO_KE_CRYPTOKEYELEMENT_SECOC_KEY_READ_ACCESS,
    CRYPTO_KE_CRYPTOKEYELEMENT_SECOC_KEY_SIZE,
    CRYPTO_KE_CRYPTOKEYELEMENT_SECOC_KEY_WRITE_ACCESS
  },
};

/* !LINKSTO EB_Crypto_01018,1 */
#if (CRYPTO_API_ENABLED_KEYMNGMNT == STD_ON)
/**
 * \brief Data structure to store the configured crypto keys
 */
VAR(Crypto_Key, CRYPTO_VAR) Crypto_Keys[CRYPTO_KEY_COUNT] =
{
       {
    CRYPTO_KEY_CRYPTOKEY_PDU_SECUREDOUT_T_DERIVE_ITERATIONS,
    2,
    Crypto_KeyType0,
    CRYPTO_KEY_STATE_INVALID   },
       {
    CRYPTO_KEY_CRYPTOKEY_PDU_SECUREDIN_R_DERIVE_ITERATIONS,
    2,
    Crypto_KeyType1,
    CRYPTO_KEY_STATE_INVALID   },
};
#endif /* #if (CRYPTO_API_ENABLED_KEYMNGMNT == STD_ON) */

/* !LINKSTO SWS_Crypto_00019, 1 */
/**
 * \brief Data structure to store the configured crypto driver objects
 */
VAR(Crypto_DriverObject, CRYPTO_VAR)
    Crypto_DriverObjects[CRYPTO_DRIVER_OBJECT_COUNT] =
{
  {

    TRUE,
    CRYPTO_DRIVER_OBJECT_STATE_IDLE,
    NULL_PTR,
#if (CRYPTO_QUEUE == STD_ON)
    &Crypto_Queues[0]
#endif /* #if (CRYPTO_QUEUE == STD_ON) */
  },
};

#define CRYPTO_STOP_SEC_VAR_INIT_UNSPECIFIED
#include <Crypto_MemMap.h>

/*==================[definition of external constants]============================================*/

#define CRYPTO_START_SEC_CONST_8
#include <Crypto_MemMap.h>

CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_IV_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_IV_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_IV_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_KEY_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_KEY_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_KEY_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CMAC_KEY_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CMAC_KEY_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CMAC_KEY_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_HMAC_KEY_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_HMAC_KEY_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_HMAC_KEY_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_SIPHASH_KEY_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIPHASH_KEY_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIPHASH_KEY_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP256R1_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP256R1_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP256R1_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP384R1_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP384R1_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_SECP384R1_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_X25519_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_X25519_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_OWNPUBKEY_X25519_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP256R1_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP256R1_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP256R1_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP384R1_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP384R1_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_SECP384R1_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_X25519_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_X25519_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_PRIVKEY_X25519_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP256R1_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP256R1_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP256R1_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP384R1_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP384R1_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_SECP384R1_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_X25519_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_X25519_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_SHAREDVALUE_X25519_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_ECCNIST_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_ECCNIST_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_ECCNIST_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_X25519_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_X25519_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_X25519_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP256R1_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP256R1_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP256R1_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP384R1_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP384R1_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SECP384R1_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_X25519_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_X25519_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_X25519_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_SIGNATURE_KEY_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIGNATURE_KEY_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_SIGNATURE_KEY_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_CURRENT_TIME_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_CURRENT_TIME_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_CURRENT_TIME_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_DATA_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_DATA_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_DATA_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_EXTENSIONS_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_EXTENSIONS_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_EXTENSIONS_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_ISSUER_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_ISSUER_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_ISSUER_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_PARSING_FORMAT_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_PARSING_FORMAT_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_PARSING_FORMAT_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SERIALNUMBER_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SERIALNUMBER_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SERIALNUMBER_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_ALGORITHM_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_ALGORITHM_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SIGNATURE_ALGORITHM_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_PUBLIC_KEY_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_PUBLIC_KEY_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_SUBJECT_PUBLIC_KEY_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_AFTER_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_AFTER_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_AFTER_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_BEFORE_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_BEFORE_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VALIDITY_NOT_BEFORE_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VERSION_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VERSION_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CERTIFICATE_VERSION_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_CTRDRBG_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_CTRDRBG_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_CTRDRBG_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_COUNT_CTRDRBG_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_COUNT_CTRDRBG_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_COUNT_CTRDRBG_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_SSG_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_SSG_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_SEED_STATE_SSG_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_CTRDRBG_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_CTRDRBG_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_CTRDRBG_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_SSG_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_SSG_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RANDOM_ALGORITHM_SSG_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_PASSWORD_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_PASSWORD_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_PASSWORD_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_SALT_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_SALT_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_SALT_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_HMAC_SHA2256_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_HMAC_SHA2256_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_HMAC_SHA2256_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_SHA_SHA2256_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_SHA_SHA2256_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ALGORITHM_SHA_SHA2256_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_AES_EXPANDEDKEY_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_AES_EXPANDEDKEY_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_AES_EXPANDEDKEY_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY1_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY1_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY1_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY2_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY2_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_AESCMAC_SUBKEY2_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_BARRETT_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_BARRETT_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_BARRETT_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_ADDITIONAL_INPUT_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_ADDITIONAL_INPUT_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_RSA_ADDITIONAL_INPUT_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_2NDKEY_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_2NDKEY_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_2NDKEY_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_PROOF_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_PROOF_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_CIPHER_PROOF_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ITERATIONS_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ITERATIONS_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYDERIVATION_ITERATIONS_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_ALGORITHM_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_CURVE_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_BASE_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_BASE_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYEXCHANGE_BASE_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_ALGORITHM_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_ALGORITHM_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_ALGORITHM_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_KEY_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_KEY_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_KEY_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_SEED_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_SEED_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_KEYGENERATE_SEED_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_PROOF_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_PROOF_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_CRYPTO_KE_MAC_PROOF_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_KEY_CHECKSUM_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_KEY_CHECKSUM_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_KEY_CHECKSUM_INIT_VALUE;
CONST(uint8, CRYPTO_CONST)
      Crypto_CRYPTOKEYELEMENT_SECOC_KEY_INIT_VALUE
      [CRYPTO_KE_CRYPTOKEYELEMENT_SECOC_KEY_SIZE]
      = CRYPTO_KE_CRYPTOKEYELEMENT_SECOC_KEY_INIT_VALUE;

#define CRYPTO_STOP_SEC_CONST_8
#include <Crypto_MemMap.h>

/*==================[definition of external variables]============================================*/

/*==================[definition of external functions]============================================*/

#define CRYPTO_START_SEC_CODE
#include <Crypto_MemMap.h>

      /* !LINKSTO EB_Crypto_00024, 1 */
FUNC(Std_ReturnType, CRYPTO_CODE) Crypto_PL_MACGENERATE_AES_CMAC_Process
(
  uint32 ObjectId,
  P2VAR(Crypto_JobType, AUTOMATIC, CRYPTO_APPL_DATA) Job
)
{
#if (CRYPTO_API_ENABLED_KEYMNGMNT == STD_ON)
  /* RetVal is intentional initialized with E_OK it has to be ensured that the Operation mode is
     always valid */
  Std_ReturnType RetVal = E_OK;

  boolean Busy = TRUE;

  Crypto_DriverObject* DriverObj = &Crypto_DriverObjects[ObjectId];

  /* !LINKSTO EB_Crypto_00027, 1 */

  if (

      (CRYPTO_PROCESSING_SYNC == Job->jobPrimitiveInfo->processingType) &&

      (
       ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL) ==
       (((uint8) Job->jobPrimitiveInputOutput.mode) & ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL))
      )
     )
  {
    /* !LINKSTO EB_Crypto_00028, 1 */
    /* Perform synchronous singlecall operation and reset the driver object and Job afterwards */
    RetVal = Crypto_AL_MACGENERATE_AES_CMAC_SyncSingleCall(ObjectId, Job);

      if ((RetVal == CRYPTO_E_KEY_NOT_AVAILABLE) || (RetVal == CRYPTO_E_KEY_READ_FAIL))
      {
        RetVal = E_NOT_OK;
      }

    {
      /* !LINKSTO EB_Crypto_01050, 1 */
      SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
      DriverObj->DriverObjectState = CRYPTO_DRIVER_OBJECT_STATE_IDLE;
      DriverObj->CurrentJob = NULL_PTR;

      DriverObj->SkipPeriodicMainFunction = TRUE;
      SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
      /* !LINKSTO Crypto.Dsn.JobTransition.Finish2Idle, 1 */
      /* !LINKSTO Crypto.Dsn.JobTransition.ActiveError2Idle, 1 */
      Job->jobState = CRYPTO_JOBSTATE_IDLE;
    }
  }
  else

  {

    if (
         /* !LINKSTO SWS_Crypto_00020, 1 */
         ((uint8) CRYPTO_OPERATIONMODE_START) ==
         (((uint8) Job->jobPrimitiveInputOutput.mode) & ((uint8) CRYPTO_OPERATIONMODE_START))
       )
    {
      /* !LINKSTO EB_Crypto_00029, 1 */
      /* !LINKSTO Crypto.Dsn.JobTransition.InitialActive2Start, 1 */
      /* Perform start operation */
      RetVal = Crypto_AL_MACGENERATE_AES_CMAC_Start(ObjectId, Job);

      if ((RetVal == CRYPTO_E_KEY_NOT_AVAILABLE) || (RetVal == CRYPTO_E_KEY_READ_FAIL))
      {
        RetVal = E_NOT_OK;
      }
      /* !LINKSTO SWS_Crypto_00027, 1 */
      if ((CRYPTO_PROCESSING_SYNC == Job->jobPrimitiveInfo->processingType) &&
        /* !LINKSTO SWS_Crypto_00026, 1,
                    EB_Crypto_00032, 1,
                    EB_Crypto_00033, 1
        */
          (E_OK == RetVal))
      {
        /* Wait for result if request is synchronous */
        do
        {
          Crypto_AL_MACGENERATE_AES_CMAC_MainFunction(&RetVal, &Busy);
        }
        while (CRYPTO_DRIVER_OBJECT_ACTIVE == Busy);
      }
    }
    if (
        (E_OK == RetVal) &&
        (
         ((uint8) CRYPTO_OPERATIONMODE_UPDATE) ==
         (((uint8) Job->jobPrimitiveInputOutput.mode) & ((uint8) CRYPTO_OPERATIONMODE_UPDATE))
        )
       )
    {

      /* !LINKSTO EB_Crypto_00030, 1 */
      /* !LINKSTO Crypto.Dsn.JobTransition.Start2Update, 1 */
      /* !LINKSTO Crypto.Dsn.JobTransition.Update2Update, 1 */
      /* Perform update operation. Keep check on Async Single call and Async StreamStart. */
      if (
          (CRYPTO_PROCESSING_ASYNC == Job->jobPrimitiveInfo->processingType)
 &&
          (
           ((uint8) CRYPTO_OPERATIONMODE_STREAMSTART) !=
           (
            ((uint8) Job->jobPrimitiveInputOutput.mode) &
            ((uint8) CRYPTO_OPERATIONMODE_STREAMSTART)
           )
          ) &&
          (
           ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL) !=
           (((uint8) Job->jobPrimitiveInputOutput.mode) & ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL))
          )
         )
      {
        RetVal = Crypto_AL_MACGENERATE_AES_CMAC_Update(ObjectId, Job);
      }
      /* !LINKSTO SWS_Crypto_00027, 1 */
      if (CRYPTO_PROCESSING_SYNC == Job->jobPrimitiveInfo->processingType)
      {
        /* Perform update operation in case of Sync Processing type*/
        RetVal = Crypto_AL_MACGENERATE_AES_CMAC_Update(ObjectId, Job);
        /* !LINKSTO SWS_Crypto_00026, 1,
                    EB_Crypto_00032, 1,
                    EB_Crypto_00033, 1
        */
        if (E_OK == RetVal)
        {
          /* Wait for result if request is synchronous */
          do
          {
            Crypto_AL_MACGENERATE_AES_CMAC_MainFunction(&RetVal, &Busy);
          }
          while (CRYPTO_DRIVER_OBJECT_ACTIVE == Busy);
        }
      }
    }
    if (
        (E_OK == RetVal) &&
        (
         ((uint8) CRYPTO_OPERATIONMODE_FINISH) ==
         (((uint8) Job->jobPrimitiveInputOutput.mode) & ((uint8) CRYPTO_OPERATIONMODE_FINISH))
        )
       )
    {

      /* !LINKSTO EB_Crypto_00031, 1 */
      /* !LINKSTO Crypto.Dsn.JobTransition.Update2Finish, 1 */
      /* Perform finish operation */
      if (
          (CRYPTO_PROCESSING_ASYNC == Job->jobPrimitiveInfo->processingType)
 &&
          (
           ((uint8) CRYPTO_OPERATIONMODE_STREAMSTART) !=
           (
            ((uint8) Job->jobPrimitiveInputOutput.mode) &
            ((uint8) CRYPTO_OPERATIONMODE_STREAMSTART)
           )
          ) &&
          (
           ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL) !=
           (
            ((uint8) Job->jobPrimitiveInputOutput.mode) &
            ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL )
           )
          )
         )
      {
        RetVal = Crypto_AL_MACGENERATE_AES_CMAC_Finish(ObjectId, Job);
      }
      /* !LINKSTO SWS_Crypto_00027, 1 */
      if (CRYPTO_PROCESSING_SYNC == Job->jobPrimitiveInfo->processingType)
      {
        {
          RetVal = Crypto_PL_MACGENERATE_AES_CMAC_Process_SyncUpdate(ObjectId, Busy, RetVal, Job);
        }
        /* Reset driver object and job after finish operation was completed */
        /* !LINKSTO EB_Crypto_01050, 1 */
        SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
        DriverObj->DriverObjectState = CRYPTO_DRIVER_OBJECT_STATE_IDLE;

        DriverObj->SkipPeriodicMainFunction = TRUE;
        DriverObj->CurrentJob = NULL_PTR;
        SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
        /* !LINKSTO Crypto.Dsn.JobTransition.Finish2Idle, 1 */
        Job->jobState = CRYPTO_JOBSTATE_IDLE;
      }
    }

  }

  if (E_OK != RetVal)
  {
    /* If an error occured, reset the driver object and the Job */
    /* !LINKSTO EB_Crypto_01050, 1 */
    SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
    DriverObj->DriverObjectState = CRYPTO_DRIVER_OBJECT_STATE_IDLE;
    DriverObj->CurrentJob = NULL_PTR;

    DriverObj->SkipPeriodicMainFunction = TRUE;
    SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
    /* !LINKSTO SWS_Crypto_00025, 1 */
    /* !LINKSTO Crypto.Dsn.JobTransition.ActiveError2Idle, 1 */
    Job->jobState = CRYPTO_JOBSTATE_IDLE;
  }

  /* !LINKSTO EB_Crypto_00034, 1 */
  return RetVal;
#else /* #if (CRYPTO_API_ENABLED_KEYMNGMNT == STD_ON) */
  TS_PARAM_UNUSED(ObjectId);
  TS_PARAM_UNUSED(Job);
  return E_NOT_OK;
#endif /* #if (CRYPTO_API_ENABLED_KEYMNGMNT == STD_OFF) */
}


FUNC(Std_ReturnType, CRYPTO_CODE) Crypto_PL_MACGENERATE_AES_CMAC_Process_SyncUpdate
(
  uint32 ObjectId,
  boolean Busy,
  Std_ReturnType RetVal,
  P2VAR(Crypto_JobType, AUTOMATIC, CRYPTO_APPL_DATA) Job
)
{

  /* Perform finish operation in case of Sync Processing type*/
  RetVal = Crypto_AL_MACGENERATE_AES_CMAC_Finish(ObjectId, Job);
  /* !LINKSTO SWS_Crypto_00026, 1,
              EB_Crypto_00032, 1,
              EB_Crypto_00033, 1
  */
  if (E_OK == RetVal)
  {
    /* Wait for result if request is synchronous */
    do
    {
      Crypto_AL_MACGENERATE_AES_CMAC_MainFunction(&RetVal, &Busy);
    }
    while (CRYPTO_DRIVER_OBJECT_ACTIVE == Busy);
  }
  return RetVal;
}


/* !LINKSTO EB_Crypto_00035, 1 */
FUNC(Std_ReturnType, CRYPTO_CODE) Crypto_PL_MACGENERATE_AES_CMAC_Cancel
(
  uint32 ObjectId,
  P2VAR(Crypto_JobType, AUTOMATIC, CRYPTO_APPL_DATA) Job
)
{
  Std_ReturnType RetVal = E_NOT_OK;
  /* !LINKSTO EB_Crypto_00036, 1 */
  RetVal = Crypto_AL_MACGENERATE_AES_CMAC_Cancel(ObjectId, Job);
  return RetVal;
}

      /* !LINKSTO EB_Crypto_00024, 1 */
FUNC(Std_ReturnType, CRYPTO_CODE) Crypto_PL_MACVERIFY_AES_CMAC_Process
(
  uint32 ObjectId,
  P2VAR(Crypto_JobType, AUTOMATIC, CRYPTO_APPL_DATA) Job
)
{
#if (CRYPTO_API_ENABLED_KEYMNGMNT == STD_ON)
  /* RetVal is intentional initialized with E_OK it has to be ensured that the Operation mode is
     always valid */
  Std_ReturnType RetVal = E_OK;

  boolean Busy = TRUE;

  Crypto_DriverObject* DriverObj = &Crypto_DriverObjects[ObjectId];

  /* !LINKSTO EB_Crypto_00027, 1 */

  if (

      (CRYPTO_PROCESSING_SYNC == Job->jobPrimitiveInfo->processingType) &&

      (
       ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL) ==
       (((uint8) Job->jobPrimitiveInputOutput.mode) & ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL))
      )
     )
  {
    /* !LINKSTO EB_Crypto_00028, 1 */
    /* Perform synchronous singlecall operation and reset the driver object and Job afterwards */
    RetVal = Crypto_AL_MACVERIFY_AES_CMAC_SyncSingleCall(ObjectId, Job);

      if ((RetVal == CRYPTO_E_KEY_NOT_AVAILABLE) || (RetVal == CRYPTO_E_KEY_READ_FAIL))
      {
        RetVal = E_NOT_OK;
      }

    {
      /* !LINKSTO EB_Crypto_01050, 1 */
      SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
      DriverObj->DriverObjectState = CRYPTO_DRIVER_OBJECT_STATE_IDLE;
      DriverObj->CurrentJob = NULL_PTR;

      DriverObj->SkipPeriodicMainFunction = TRUE;
      SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
      /* !LINKSTO Crypto.Dsn.JobTransition.Finish2Idle, 1 */
      /* !LINKSTO Crypto.Dsn.JobTransition.ActiveError2Idle, 1 */
      Job->jobState = CRYPTO_JOBSTATE_IDLE;
    }
  }
  else

  {

    if (
         /* !LINKSTO SWS_Crypto_00020, 1 */
         ((uint8) CRYPTO_OPERATIONMODE_START) ==
         (((uint8) Job->jobPrimitiveInputOutput.mode) & ((uint8) CRYPTO_OPERATIONMODE_START))
       )
    {
      /* !LINKSTO EB_Crypto_00029, 1 */
      /* !LINKSTO Crypto.Dsn.JobTransition.InitialActive2Start, 1 */
      /* Perform start operation */
      RetVal = Crypto_AL_MACVERIFY_AES_CMAC_Start(ObjectId, Job);

      if ((RetVal == CRYPTO_E_KEY_NOT_AVAILABLE) || (RetVal == CRYPTO_E_KEY_READ_FAIL))
      {
        RetVal = E_NOT_OK;
      }
      /* !LINKSTO SWS_Crypto_00027, 1 */
      if ((CRYPTO_PROCESSING_SYNC == Job->jobPrimitiveInfo->processingType) &&
        /* !LINKSTO SWS_Crypto_00026, 1,
                    EB_Crypto_00032, 1,
                    EB_Crypto_00033, 1
        */
          (E_OK == RetVal))
      {
        /* Wait for result if request is synchronous */
        do
        {
          Crypto_AL_MACVERIFY_AES_CMAC_MainFunction(&RetVal, &Busy);
        }
        while (CRYPTO_DRIVER_OBJECT_ACTIVE == Busy);
      }
    }
    if (
        (E_OK == RetVal) &&
        (
         ((uint8) CRYPTO_OPERATIONMODE_UPDATE) ==
         (((uint8) Job->jobPrimitiveInputOutput.mode) & ((uint8) CRYPTO_OPERATIONMODE_UPDATE))
        )
       )
    {

      /* !LINKSTO EB_Crypto_00030, 1 */
      /* !LINKSTO Crypto.Dsn.JobTransition.Start2Update, 1 */
      /* !LINKSTO Crypto.Dsn.JobTransition.Update2Update, 1 */
      /* Perform update operation. Keep check on Async Single call and Async StreamStart. */
      if (
          (CRYPTO_PROCESSING_ASYNC == Job->jobPrimitiveInfo->processingType)
 &&
          (
           ((uint8) CRYPTO_OPERATIONMODE_STREAMSTART) !=
           (
            ((uint8) Job->jobPrimitiveInputOutput.mode) &
            ((uint8) CRYPTO_OPERATIONMODE_STREAMSTART)
           )
          ) &&
          (
           ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL) !=
           (((uint8) Job->jobPrimitiveInputOutput.mode) & ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL))
          )
         )
      {
        RetVal = Crypto_AL_MACVERIFY_AES_CMAC_Update(ObjectId, Job);
      }
      /* !LINKSTO SWS_Crypto_00027, 1 */
      if (CRYPTO_PROCESSING_SYNC == Job->jobPrimitiveInfo->processingType)
      {
        /* Perform update operation in case of Sync Processing type*/
        RetVal = Crypto_AL_MACVERIFY_AES_CMAC_Update(ObjectId, Job);
        /* !LINKSTO SWS_Crypto_00026, 1,
                    EB_Crypto_00032, 1,
                    EB_Crypto_00033, 1
        */
        if (E_OK == RetVal)
        {
          /* Wait for result if request is synchronous */
          do
          {
            Crypto_AL_MACVERIFY_AES_CMAC_MainFunction(&RetVal, &Busy);
          }
          while (CRYPTO_DRIVER_OBJECT_ACTIVE == Busy);
        }
      }
    }
    if (
        (E_OK == RetVal) &&
        (
         ((uint8) CRYPTO_OPERATIONMODE_FINISH) ==
         (((uint8) Job->jobPrimitiveInputOutput.mode) & ((uint8) CRYPTO_OPERATIONMODE_FINISH))
        )
       )
    {

      /* !LINKSTO EB_Crypto_00031, 1 */
      /* !LINKSTO Crypto.Dsn.JobTransition.Update2Finish, 1 */
      /* Perform finish operation */
      if (
          (CRYPTO_PROCESSING_ASYNC == Job->jobPrimitiveInfo->processingType)
 &&
          (
           ((uint8) CRYPTO_OPERATIONMODE_STREAMSTART) !=
           (
            ((uint8) Job->jobPrimitiveInputOutput.mode) &
            ((uint8) CRYPTO_OPERATIONMODE_STREAMSTART)
           )
          ) &&
          (
           ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL) !=
           (
            ((uint8) Job->jobPrimitiveInputOutput.mode) &
            ((uint8) CRYPTO_OPERATIONMODE_SINGLECALL )
           )
          )
         )
      {
        RetVal = Crypto_AL_MACVERIFY_AES_CMAC_Finish(ObjectId, Job);
      }
      /* !LINKSTO SWS_Crypto_00027, 1 */
      if (CRYPTO_PROCESSING_SYNC == Job->jobPrimitiveInfo->processingType)
      {
        {
          RetVal = Crypto_PL_MACVERIFY_AES_CMAC_Process_SyncUpdate(ObjectId, Busy, RetVal, Job);
        }
        /* Reset driver object and job after finish operation was completed */
        /* !LINKSTO EB_Crypto_01050, 1 */
        SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
        DriverObj->DriverObjectState = CRYPTO_DRIVER_OBJECT_STATE_IDLE;

        DriverObj->SkipPeriodicMainFunction = TRUE;
        DriverObj->CurrentJob = NULL_PTR;
        SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
        /* !LINKSTO Crypto.Dsn.JobTransition.Finish2Idle, 1 */
        Job->jobState = CRYPTO_JOBSTATE_IDLE;
      }
    }

  }

  if (E_OK != RetVal)
  {
    /* If an error occured, reset the driver object and the Job */
    /* !LINKSTO EB_Crypto_01050, 1 */
    SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
    DriverObj->DriverObjectState = CRYPTO_DRIVER_OBJECT_STATE_IDLE;
    DriverObj->CurrentJob = NULL_PTR;

    DriverObj->SkipPeriodicMainFunction = TRUE;
    SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT();
    /* !LINKSTO SWS_Crypto_00025, 1 */
    /* !LINKSTO Crypto.Dsn.JobTransition.ActiveError2Idle, 1 */
    Job->jobState = CRYPTO_JOBSTATE_IDLE;
  }

  /* !LINKSTO EB_Crypto_00034, 1 */
  return RetVal;
#else /* #if (CRYPTO_API_ENABLED_KEYMNGMNT == STD_ON) */
  TS_PARAM_UNUSED(ObjectId);
  TS_PARAM_UNUSED(Job);
  return E_NOT_OK;
#endif /* #if (CRYPTO_API_ENABLED_KEYMNGMNT == STD_OFF) */
}


FUNC(Std_ReturnType, CRYPTO_CODE) Crypto_PL_MACVERIFY_AES_CMAC_Process_SyncUpdate
(
  uint32 ObjectId,
  boolean Busy,
  Std_ReturnType RetVal,
  P2VAR(Crypto_JobType, AUTOMATIC, CRYPTO_APPL_DATA) Job
)
{

  /* Perform finish operation in case of Sync Processing type*/
  RetVal = Crypto_AL_MACVERIFY_AES_CMAC_Finish(ObjectId, Job);
  /* !LINKSTO SWS_Crypto_00026, 1,
              EB_Crypto_00032, 1,
              EB_Crypto_00033, 1
  */
  if (E_OK == RetVal)
  {
    /* Wait for result if request is synchronous */
    do
    {
      Crypto_AL_MACVERIFY_AES_CMAC_MainFunction(&RetVal, &Busy);
    }
    while (CRYPTO_DRIVER_OBJECT_ACTIVE == Busy);
  }
  return RetVal;
}


/* !LINKSTO EB_Crypto_00035, 1 */
FUNC(Std_ReturnType, CRYPTO_CODE) Crypto_PL_MACVERIFY_AES_CMAC_Cancel
(
  uint32 ObjectId,
  P2VAR(Crypto_JobType, AUTOMATIC, CRYPTO_APPL_DATA) Job
)
{
  Std_ReturnType RetVal = E_NOT_OK;
  /* !LINKSTO EB_Crypto_00036, 1 */
  RetVal = Crypto_AL_MACVERIFY_AES_CMAC_Cancel(ObjectId, Job);
  return RetVal;
}

#if CRYPTO_CRYPTO_MAIN_FUNCTION_EXISTS == STD_ON
/* !LINKSTO EB_Crypto_00056, 1 */
FUNC(void, CRYPTO_CODE) Crypto_PL_MainFunction
(
  void
)
{

        Crypto_AL_MACGENERATE_AES_CMAC_MainFunction(NULL_PTR, NULL_PTR);

        Crypto_AL_MACVERIFY_AES_CMAC_MainFunction(NULL_PTR, NULL_PTR);
}
#endif /* CRYPTO_CRYPTO_MAIN_FUNCTION_EXISTS == STD_ON */

#define CRYPTO_STOP_SEC_CODE
#include <Crypto_MemMap.h>

/*==================[definition of internal functions]============================================*/

/*==================[end of file]=================================================================*/
