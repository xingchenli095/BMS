#ifndef RTE_DCM_H
#define RTE_DCM_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.8.4
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2022 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type Dcm
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.8.4
 * on Tue Aug 29 10:19:28 CST 2023. !!!IGNORE-LINE!!!
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <TSMem.h>
#include <Rte_Dcm_Type.h>
#include <Rte_Dcm_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_RE_GetSecurityLevel)) && (!defined(RTE_RUNNABLEAPI_RE_GetSesCtrlType)) && (!defined(RTE_RUNNABLEAPI_RE_GetActiveProtocol)) && (!defined(RTE_RUNNABLEAPI_RE_ResetToDefaultSession)) && (!defined(RTE_RUNNABLEAPI_RE_TriggerOnEvent)) && (!defined(RTE_RUNNABLEAPI_RE_MainFunction))
#define RTE_RUNNABLEAPI_RE_GetSecurityLevel
#define RTE_RUNNABLEAPI_RE_GetSesCtrlType
#define RTE_RUNNABLEAPI_RE_GetActiveProtocol
#define RTE_RUNNABLEAPI_RE_ResetToDefaultSession
#define RTE_RUNNABLEAPI_RE_TriggerOnEvent
#define RTE_RUNNABLEAPI_RE_MainFunction
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_RE_MainFunction)
#define Rte_Call_SecurityAccess_Level_1_GetSeed Rte_Call_Dcm_SecurityAccess_Level_1_GetSeed
#define Rte_Call_SecurityAccess_Level_1_CompareKey Rte_Call_Dcm_SecurityAccess_Level_1_CompareKey
#define Rte_Call_SecurityAccess_Level_3_GetSeed Rte_Call_Dcm_SecurityAccess_Level_3_GetSeed
#define Rte_Call_SecurityAccess_Level_3_CompareKey Rte_Call_Dcm_SecurityAccess_Level_3_CompareKey
#define Rte_Call_InfotypeServices_Service09_VinMessageCount_GetInfotypeValueData Rte_Call_Dcm_InfotypeServices_Service09_VinMessageCount_GetInfotypeValueData
#define Rte_Call_InfotypeServices_Service09_VehicleIdentificationNumber_GetInfotypeValueData Rte_Call_Dcm_InfotypeServices_Service09_VehicleIdentificationNumber_GetInfotypeValueData
#define Rte_Call_ServiceRequestManufacturerNotification_DcmDslServiceRequestManufacturerNotification_0_Indication Rte_Call_Dcm_ServiceRequestManufacturerNotification_DcmDslServiceRequestManufacturerNotification_0_Indication
#define Rte_Call_ServiceRequestManufacturerNotification_DcmDslServiceRequestManufacturerNotification_0_Confirmation Rte_Call_Dcm_ServiceRequestManufacturerNotification_DcmDslServiceRequestManufacturerNotification_0_Confirmation
#define Rte_Call_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification_0_Indication Rte_Call_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification_0_Indication
#define Rte_Call_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification_0_Confirmation Rte_Call_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification_0_Confirmation
#define Rte_Call_RoutineServices_DIAGNOSTIC_LOOPBACK_Start Rte_Call_Dcm_RoutineServices_DIAGNOSTIC_LOOPBACK_Start
#define Rte_Call_RoutineServices_DIAGNOSTIC_TRIGGER_DTC_Start Rte_Call_Dcm_RoutineServices_DIAGNOSTIC_TRIGGER_DTC_Start
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#define RTE_E_DCMServices_E_NOT_OK 1U
#define RTE_E_DCM_Roe_E_NOT_OK 1U
#define RTE_E_SecurityAccess_Level_1_E_NOT_OK 1U
#define RTE_E_SecurityAccess_Level_1_DCM_E_PENDING 10U
#define RTE_E_SecurityAccess_Level_1_DCM_E_COMPARE_KEY_FAILED 11U
#define RTE_E_SecurityAccess_Level_3_E_NOT_OK 1U
#define RTE_E_SecurityAccess_Level_3_DCM_E_PENDING 10U
#define RTE_E_SecurityAccess_Level_3_DCM_E_COMPARE_KEY_FAILED 11U
#define RTE_E_ServiceRequestNotification_E_NOT_OK 1U
#define RTE_E_ServiceRequestNotification_E_REQUEST_NOT_ACCEPTED 8U
#define RTE_E_RoutineServices_DIAGNOSTIC_LOOPBACK_E_NOT_OK 1U
#define RTE_E_RoutineServices_DIAGNOSTIC_LOOPBACK_DCM_E_PENDING 10U
#define RTE_E_RoutineServices_DIAGNOSTIC_LOOPBACK_DCM_E_FORCE_RCRRP 12U
#define RTE_E_RoutineServices_DIAGNOSTIC_TRIGGER_DTC_E_NOT_OK 1U
#define RTE_E_RoutineServices_DIAGNOSTIC_TRIGGER_DTC_DCM_E_PENDING 10U
#define RTE_E_RoutineServices_DIAGNOSTIC_TRIGGER_DTC_DCM_E_FORCE_RCRRP 12U
#define RTE_E_InfotypeServices_Service09_VinMessageCount_E_NOT_OK 1U
#define RTE_E_InfotypeServices_Service09_VinMessageCount_DCM_E_PENDING 10U
#define RTE_E_InfotypeServices_Service09_VehicleIdentificationNumber_E_NOT_OK 1U
#define RTE_E_InfotypeServices_Service09_VehicleIdentificationNumber_DCM_E_PENDING 10U
#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_Dcm, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_Dcm, RTE_CONST) Rte_Instance_Dcm;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_Dcm, RTE_CONST, RTE_CONST) Rte_Inst_Dcm;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define Dcm_START_SEC_CODE
#include <Dcm_MemMap.h>
extern FUNC(Std_ReturnType, RTE_CODE) Dcm_GetSecurityLevel (P2VAR(Dcm_SecLevelType, AUTOMATIC, RTE_APPL_DATA) SecLevel);

extern FUNC(Std_ReturnType, RTE_CODE) Dcm_GetSesCtrlType (P2VAR(Dcm_SesCtrlType, AUTOMATIC, RTE_APPL_DATA) SesCtrlType);

extern FUNC(Std_ReturnType, RTE_CODE) Dcm_GetActiveProtocol (P2VAR(Dcm_ProtocolType, AUTOMATIC, RTE_APPL_DATA) ActiveProtocol);

extern FUNC(Std_ReturnType, RTE_CODE) Dcm_ResetToDefaultSession (void);

extern FUNC(Std_ReturnType, RTE_CODE) Dcm_TriggerOnEvent (uint8 RoeEventId);

#define Dcm_STOP_SEC_CODE
#include <Dcm_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_RE_MainFunction))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_SecurityAccess_Level_1_GetSeed (P2CONST(Dcm_SecAccDataRecLevel_1_ArrayType, AUTOMATIC, RTE_APPL_DATA) SecurityAccessDataRecord, Dcm_OpStatusType OpStatus, P2VAR(Dcm_SecSeedLevel_1_ArrayType, AUTOMATIC, RTE_APPL_DATA) Seed, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_SecurityAccess_Level_1_GetSeed (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) SecurityAccessDataRecord, Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Seed, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_SecurityAccess_Level_1_CompareKey (P2CONST(Dcm_SecKeyLevel_1_ArrayType, AUTOMATIC, RTE_APPL_DATA) Key, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_SecurityAccess_Level_1_CompareKey (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Key, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_SecurityAccess_Level_3_GetSeed (P2CONST(Dcm_SecAccDataRecLevel_3_ArrayType, AUTOMATIC, RTE_APPL_DATA) SecurityAccessDataRecord, Dcm_OpStatusType OpStatus, P2VAR(Dcm_SecSeedLevel_3_ArrayType, AUTOMATIC, RTE_APPL_DATA) Seed, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_SecurityAccess_Level_3_GetSeed (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) SecurityAccessDataRecord, Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Seed, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_SecurityAccess_Level_3_CompareKey (P2CONST(Dcm_SecKeyLevel_3_ArrayType, AUTOMATIC, RTE_APPL_DATA) Key, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_SecurityAccess_Level_3_CompareKey (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Key, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_InfotypeServices_Service09_VinMessageCount_GetInfotypeValueData (Dcm_OpStatusType OpStatus, P2VAR(InfoTypeServicesArrayType_Service09_VinMessageCount, AUTOMATIC, RTE_APPL_DATA) DataValueBuffer);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_InfotypeServices_Service09_VinMessageCount_GetInfotypeValueData (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) DataValueBuffer);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_InfotypeServices_Service09_VehicleIdentificationNumber_GetInfotypeValueData (Dcm_OpStatusType OpStatus, P2VAR(InfoTypeServicesArrayType_Service09_VehicleIdentificationNumber, AUTOMATIC, RTE_APPL_DATA) DataValueBuffer);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_InfotypeServices_Service09_VehicleIdentificationNumber_GetInfotypeValueData (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) DataValueBuffer);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_ServiceRequestManufacturerNotification_DcmDslServiceRequestManufacturerNotification_0_Indication (uint8 SID, P2CONST(Dcm_RequestData_ArrayType, AUTOMATIC, RTE_APPL_DATA) RequestData, uint16 DataSize, uint8 ReqType, uint16 SourceAddress, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_ServiceRequestManufacturerNotification_DcmDslServiceRequestManufacturerNotification_0_Indication (uint8 SID, P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) RequestData, uint16 DataSize, uint8 ReqType, uint16 SourceAddress, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_ServiceRequestManufacturerNotification_DcmDslServiceRequestManufacturerNotification_0_Confirmation (uint8 SID, uint8 ReqType, uint16 SourceAddress, Dcm_ConfirmationStatusType ConfirmationStatus);
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification_0_Indication (uint8 SID, P2CONST(Dcm_RequestData_ArrayType, AUTOMATIC, RTE_APPL_DATA) RequestData, uint16 DataSize, uint8 ReqType, uint16 SourceAddress, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification_0_Indication (uint8 SID, P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) RequestData, uint16 DataSize, uint8 ReqType, uint16 SourceAddress, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_ServiceRequestSupplierNotification_DcmDslServiceRequestSupplierNotification_0_Confirmation (uint8 SID, uint8 ReqType, uint16 SourceAddress, Dcm_ConfirmationStatusType ConfirmationStatus);
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_RoutineServices_DIAGNOSTIC_LOOPBACK_Start (P2CONST(Dcm_StartFlexibleInArrayData_DIAGNOSTIC_LOOPBACK_DcmDspStartRoutineInSignal_dataInType, AUTOMATIC, RTE_APPL_DATA) dataIn0, Dcm_OpStatusType OpStatus, P2VAR(Dcm_StartFlexibleOutArrayData_DIAGNOSTIC_LOOPBACK_DcmDspStartRoutineOutSignal_dataOutType, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) currentDataLength, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_RoutineServices_DIAGNOSTIC_LOOPBACK_Start (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) dataIn0, Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) currentDataLength, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Dcm_RoutineServices_DIAGNOSTIC_TRIGGER_DTC_Start (Dcm_StartDataIn_DIAGNOSTIC_TRIGGER_DTC_routineInfo_InType dataIn0, Dcm_OpStatusType OpStatus, P2VAR(Dcm_StartDataOut_DIAGNOSTIC_TRIGGER_DTC_routineInfo_OutType, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
