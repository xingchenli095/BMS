__attribute__((target ("general-regs-only")))
OS_SetScheduleAlarm (const struct os_schedule_t * ss, struct os_scheduledynamic_t * sd, os_tick_t val, os_boolean_t rel)
{
  os_intstatus_t is;
  struct os_counterdynamic_t * cd;
  const struct os_counter_t * cs;
  struct os_alarmdynamic_t * ad;
  const struct os_alarm_t * as;
  const struct os_alarm_t * OS_alarmTableBase.0_1;
  short unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  const struct os_counter_t * OS_counterTableBase.1_5;
  unsigned char _6;
  unsigned int _7;
  unsigned int _8;
  const struct os_hwt_t * _9;
  unsigned char _10;
  void (*<T540>) (const struct os_counter_t *) _11;
  short unsigned int OS_kernDisableLevel.2_12;
  unsigned int _13;
  unsigned int _14;
  unsigned int _15;
  unsigned int _16;
  unsigned int _17;
  unsigned int _18;
  unsigned int _19;
  unsigned int _20;
  unsigned int _21;
  unsigned int _22;
  unsigned int _23;
  unsigned int _24;
  unsigned int _25;
  unsigned int _26;
  unsigned int _27;
  unsigned int _28;
  unsigned int _29;
  short unsigned int _30;
  const struct os_hwt_t * _31;
  unsigned char _32;
  short unsigned int _33;
  short unsigned int _34;
  void (*<T540>) (const struct os_counter_t *) _35;
  os_tick_t iftmp.3_36;
  os_tick_t iftmp.4_37;
  os_tick_t iftmp.3_54;
  os_tick_t iftmp.3_55;
  os_tick_t iftmp.4_58;
  os_tick_t iftmp.4_59;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_alarmTableBase.0_1 = OS_alarmTableBase;
  _2 = ss_42(D)->alarm;
  _3 = (unsigned int) _2;
  _4 = _3 * 28;
  as_43 = OS_alarmTableBase.0_1 + _4;
  # DEBUG as => as_43
  # DEBUG BEGIN_STMT
  ad_44 = as_43->dynamic;
  # DEBUG ad => ad_44
  # DEBUG BEGIN_STMT
  OS_counterTableBase.1_5 = OS_counterTableBase;
  _6 = as_43->counter;
  _7 = (unsigned int) _6;
  _8 = _7 * 32;
  cs_45 = OS_counterTableBase.1_5 + _8;
  # DEBUG cs => cs_45
  # DEBUG BEGIN_STMT
  cd_46 = cs_45->dynamic;
  # DEBUG cd => cd_46
  # DEBUG BEGIN_STMT
  if (rel_47(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _9 = cs_45->hwt;
  if (_9 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _10 = cd_46->lock;
  if (_10 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _11 = cs_45->updFunc;
  _11 (cs_45);

  <bb 6> :
  # DEBUG BEGIN_STMT
  OS_kernDisableLevel.2_12 = OS_kernDisableLevel;
  is_50 = OS_CORTEXM_IntSetDisablingLevel (OS_kernDisableLevel.2_12);
  # DEBUG is => is_50
  # DEBUG BEGIN_STMT
  ad_44->inUse = 1;
  # DEBUG BEGIN_STMT
  ad_44->period = 0;
  # DEBUG BEGIN_STMT
  if (rel_47(D) != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ad_44->delta = val_53(D);
  goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _13 = cd_46->current;
  if (val_53(D) < _13)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _14 = cd_46->current;
  _15 = val_53(D) - _14;
  _16 = cs_45->maxallowedvalue;
  _17 = _15 + _16;
  iftmp.3_55 = _17 + 1;
  goto <bb 11>; [INV]

  <bb 10> :
  _18 = cd_46->current;
  iftmp.3_54 = val_53(D) - _18;

  <bb 11> :
  # iftmp.3_36 = PHI <iftmp.3_55(9), iftmp.3_54(10)>
  ad_44->delta = iftmp.3_36;

  <bb 12> :
  # DEBUG BEGIN_STMT
  _19 = cs_45->maxallowedvalue;
  _20 = cd_46->current;
  _21 = _19 - _20;
  _22 = ad_44->delta;
  if (_21 < _22)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _23 = cd_46->current;
  _24 = ad_44->delta;
  _25 = _23 + _24;
  _26 = cs_45->maxallowedvalue;
  _27 = _25 - _26;
  iftmp.4_59 = _27 + 4294967295;
  goto <bb 15>; [INV]

  <bb 14> :
  _28 = cd_46->current;
  _29 = ad_44->delta;
  iftmp.4_58 = _28 + _29;

  <bb 15> :
  # iftmp.4_37 = PHI <iftmp.4_59(13), iftmp.4_58(14)>
  sd_60(D)->ctrAbs = iftmp.4_37;
  # DEBUG BEGIN_STMT
  _30 = ss_42(D)->alarm;
  OS_EnqueueAlarm (cs_45, cd_46, _30, ad_44);
  # DEBUG BEGIN_STMT
  OS_CORTEXM_IntSetDisablingLevel (is_50);
  # DEBUG BEGIN_STMT
  _31 = cs_45->hwt;
  if (_31 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _32 = cd_46->lock;
  if (_32 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  _33 = cd_46->head;
  _34 = ss_42(D)->alarm;
  if (_33 == _34)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _35 = cs_45->updFunc;
  _35 (cs_45);

  <bb 19> :
  return;

}


