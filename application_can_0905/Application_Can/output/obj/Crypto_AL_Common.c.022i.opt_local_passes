Crypto_LNSModuloCarry (Crypto_LNWordType * Number, struct Crypto_LNCtxType * CtxPtr)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  Crypto_LNWordType * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  Crypto_LNWordType * _11;
  long unsigned int _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = CtxPtr_14(D)->Carry;
  _2 = CtxPtr_14(D)->WordOfShiftedMod;
  _3 = _1 + _2;
  CtxPtr_14(D)->Carry = _3;
  # DEBUG BEGIN_STMT
  _4 = CtxPtr_14(D)->PosInNum;
  _5 = _4 * 4;
  _6 = Number_16(D) + _5;
  _7 = *_6;
  _8 = CtxPtr_14(D)->Carry;
  _9 = CtxPtr_14(D)->PosInNum;
  _10 = _9 * 4;
  _11 = Number_16(D) + _10;
  _12 = _7 - _8;
  *_11 = _12;
  # DEBUG BEGIN_STMT
  CtxPtr_14(D)->Carry = 0;
  return;

}


Crypto_LNSModuloSubtract2 (Crypto_LNWordType * Number, const Crypto_LNWordType * Modulus, struct Crypto_LNCtxType * CtxPtr)
{
  uint8 TempCarry;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  const Crypto_LNWordType * _4;
  long unsigned int _5;
  unsigned char _6;
  int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  Crypto_LNWordType * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  Crypto_LNWordType * _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  Crypto_LNWordType * _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  Crypto_LNWordType * _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  Crypto_LNWordType * _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  Crypto_LNWordType * _37;
  long unsigned int _38;
  long unsigned int _39;
  unsigned char _40;
  long unsigned int _41;
  long unsigned int _42;
  const Crypto_LNWordType * _43;
  long unsigned int _44;
  unsigned char _45;
  unsigned char _46;
  int _47;
  long unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;
  long unsigned int _52;
  long unsigned int _53;
  long unsigned int _54;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  TempCarry_61 = 0;
  # DEBUG TempCarry => TempCarry_61
  # DEBUG BEGIN_STMT
  _1 = CtxPtr_59(D)->WordOfShiftedMod;
  _2 = CtxPtr_59(D)->PosInMod;
  _3 = _2 * 4;
  _4 = Modulus_60(D) + _3;
  _5 = *_4;
  _6 = CtxPtr_59(D)->ShiftBits;
  _7 = (int) _6;
  _8 = _5 << _7;
  _9 = _1 | _8;
  CtxPtr_59(D)->WordOfShiftedMod = _9;
  # DEBUG BEGIN_STMT
  _10 = CtxPtr_59(D)->WordOfShiftedMod;
  _11 = CtxPtr_59(D)->PosInNum;
  _12 = _11 * 4;
  _13 = Number_63(D) + _12;
  _14 = *_13;
  if (_10 >= _14)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _15 = CtxPtr_59(D)->WordOfShiftedMod;
  _16 = CtxPtr_59(D)->PosInNum;
  _17 = _16 * 4;
  _18 = Number_63(D) + _17;
  _19 = *_18;
  if (_15 > _19)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _20 = CtxPtr_59(D)->Carry;
  if (_20 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  TempCarry_64 = 1;
  # DEBUG TempCarry => TempCarry_64

  <bb 7> :
  # TempCarry_55 = PHI <TempCarry_61(3), TempCarry_61(5), TempCarry_64(6)>
  # DEBUG TempCarry => TempCarry_55
  # DEBUG BEGIN_STMT
  _21 = CtxPtr_59(D)->PosInNum;
  _22 = _21 * 4;
  _23 = Number_63(D) + _22;
  _24 = *_23;
  _25 = CtxPtr_59(D)->WordOfShiftedMod;
  _26 = CtxPtr_59(D)->PosInNum;
  _27 = _26 * 4;
  _28 = Number_63(D) + _27;
  _29 = _24 - _25;
  *_28 = _29;
  # DEBUG BEGIN_STMT
  _30 = CtxPtr_59(D)->PosInNum;
  _31 = _30 * 4;
  _32 = Number_63(D) + _31;
  _33 = *_32;
  _34 = CtxPtr_59(D)->Carry;
  _35 = CtxPtr_59(D)->PosInNum;
  _36 = _35 * 4;
  _37 = Number_63(D) + _36;
  _38 = _33 - _34;
  *_37 = _38;
  # DEBUG BEGIN_STMT
  _39 = (long unsigned int) TempCarry_55;
  CtxPtr_59(D)->Carry = _39;
  # DEBUG BEGIN_STMT
  _40 = CtxPtr_59(D)->ShiftBits;
  if (_40 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  CtxPtr_59(D)->WordOfShiftedMod = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _41 = CtxPtr_59(D)->PosInMod;
  _42 = _41 * 4;
  _43 = Modulus_60(D) + _42;
  _44 = *_43;
  _45 = CtxPtr_59(D)->ShiftBits;
  _46 = 32 - _45;
  _47 = (int) _46;
  _48 = _44 >> _47;
  CtxPtr_59(D)->WordOfShiftedMod = _48;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _49 = CtxPtr_59(D)->PosInNum;
  _50 = _49 + 1;
  CtxPtr_59(D)->PosInNum = _50;
  # DEBUG BEGIN_STMT
  _51 = CtxPtr_59(D)->PosInMod;
  _52 = _51 + 1;
  CtxPtr_59(D)->PosInMod = _52;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _53 = CtxPtr_59(D)->PosInMod;
  _54 = *Modulus_60(D);
  if (_53 <= _54)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  return;

}


Crypto_LNSModuloSubtract (Crypto_LNWordType * Number, const Crypto_LNWordType * Modulus, struct Crypto_LNCtxType * CtxPtr)
{
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = CtxPtr_6(D)->CmpNumMod;
  if (_1 != 4)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CtxPtr_6(D)->WordOfShiftedMod = 0;
  # DEBUG BEGIN_STMT
  CtxPtr_6(D)->Carry = 0;
  # DEBUG BEGIN_STMT
  _2 = CtxPtr_6(D)->ShiftWords;
  _3 = _2 + 1;
  CtxPtr_6(D)->PosInNum = _3;
  # DEBUG BEGIN_STMT
  CtxPtr_6(D)->PosInMod = 1;
  # DEBUG BEGIN_STMT
  Crypto_LNSModuloSubtract2 (Number_11(D), Modulus_12(D), CtxPtr_6(D));
  # DEBUG BEGIN_STMT
  Crypto_LNSModuloCarry (Number_11(D), CtxPtr_6(D));

  <bb 4> :
  return;

}


Crypto_LNSModuloShift2 (Crypto_LNWordType * Number, const Crypto_LNWordType * Modulus, struct Crypto_LNCtxType * CtxPtr)
{
  Crypto_LNWordType WordOfNumber;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  const Crypto_LNWordType * _5;
  long unsigned int _6;
  unsigned char _7;
  int _8;
  long unsigned int _9;
  unsigned char _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  sizetype _14;
  sizetype _15;
  const Crypto_LNWordType * _16;
  long unsigned int _17;
  unsigned char _18;
  unsigned char _19;
  int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  Crypto_LNWordType * _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  unsigned char _34;
  long unsigned int _35;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CtxPtr_42(D)->PosInMod;
  _2 = *Modulus_43(D);
  if (_1 <= _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = CtxPtr_42(D)->PosInMod;
  _4 = _3 * 4;
  _5 = Modulus_43(D) + _4;
  _6 = *_5;
  _7 = CtxPtr_42(D)->ShiftBits;
  _8 = (int) _7;
  _9 = _6 << _8;
  CtxPtr_42(D)->WordOfShiftedMod = _9;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CtxPtr_42(D)->WordOfShiftedMod = 0;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = CtxPtr_42(D)->ShiftBits;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _11 = CtxPtr_42(D)->PosInMod;
  if (_11 > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _12 = CtxPtr_42(D)->WordOfShiftedMod;
  _13 = CtxPtr_42(D)->PosInMod;
  _14 = _13 + 1073741823;
  _15 = _14 * 4;
  _16 = Modulus_43(D) + _15;
  _17 = *_16;
  _18 = CtxPtr_42(D)->ShiftBits;
  _19 = 32 - _18;
  _20 = (int) _19;
  _21 = _17 >> _20;
  _22 = _12 | _21;
  CtxPtr_42(D)->WordOfShiftedMod = _22;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _23 = CtxPtr_42(D)->PosInNum;
  _24 = *Number_47(D);
  if (_23 > _24)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  WordOfNumber_49 = 0;
  # DEBUG WordOfNumber => WordOfNumber_49
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _25 = CtxPtr_42(D)->PosInNum;
  _26 = _25 * 4;
  _27 = Number_47(D) + _26;
  WordOfNumber_48 = *_27;
  # DEBUG WordOfNumber => WordOfNumber_48

  <bb 11> :
  # WordOfNumber_36 = PHI <WordOfNumber_49(9), WordOfNumber_48(10)>
  # DEBUG WordOfNumber => WordOfNumber_36
  # DEBUG BEGIN_STMT
  _28 = CtxPtr_42(D)->WordOfShiftedMod;
  if (WordOfNumber_36 == _28)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  CtxPtr_42(D)->CmpNumMod = 2;
  goto <bb 16>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _29 = CtxPtr_42(D)->WordOfShiftedMod;
  if (WordOfNumber_36 < _29)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  CtxPtr_42(D)->CmpNumMod = 4;
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  CtxPtr_42(D)->CmpNumMod = 5;

  <bb 16> :
  # DEBUG BEGIN_STMT
  _30 = CtxPtr_42(D)->PosInMod;
  _31 = _30 + 4294967295;
  CtxPtr_42(D)->PosInMod = _31;
  # DEBUG BEGIN_STMT
  _32 = CtxPtr_42(D)->PosInNum;
  _33 = _32 + 4294967295;
  CtxPtr_42(D)->PosInNum = _33;
  # DEBUG BEGIN_STMT
  _34 = CtxPtr_42(D)->CmpNumMod;
  if (_34 == 2)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _35 = CtxPtr_42(D)->PosInMod;
  if (_35 != 0)
    goto <bb 2>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  return;

}


Crypto_LNSModuloShift (Crypto_LNWordType * Number, const Crypto_LNWordType * Modulus, struct Crypto_LNCtxType * CtxPtr)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  unsigned char _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = CtxPtr_14(D)->LengthDifference;
  _2 = _1 + 4294967295;
  CtxPtr_14(D)->LengthDifference = _2;
  # DEBUG BEGIN_STMT
  _3 = CtxPtr_14(D)->LengthDifference;
  _4 = _3 >> 5;
  CtxPtr_14(D)->ShiftWords = _4;
  # DEBUG BEGIN_STMT
  _5 = CtxPtr_14(D)->LengthDifference;
  _6 = (unsigned char) _5;
  _7 = _6 & 31;
  CtxPtr_14(D)->ShiftBits = _7;
  # DEBUG BEGIN_STMT
  _8 = *Modulus_18(D);
  _9 = _8 + 1;
  CtxPtr_14(D)->PosInMod = _9;
  # DEBUG BEGIN_STMT
  _10 = CtxPtr_14(D)->PosInMod;
  _11 = CtxPtr_14(D)->ShiftWords;
  _12 = _10 + _11;
  CtxPtr_14(D)->PosInNum = _12;
  # DEBUG BEGIN_STMT
  Crypto_LNSModuloShift2 (Number_21(D), Modulus_18(D), CtxPtr_14(D));
  # DEBUG BEGIN_STMT
  Crypto_LNSModuloSubtract (Number_21(D), Modulus_18(D), CtxPtr_14(D));
  return;

}


Crypto_LNBarretSubtractNumbers (Crypto_LNWordType * Result, const Crypto_LNWordType * Minuend, const Crypto_LNWordType * Subtrahend, Crypto_LNWordType CutOff)
{
  Crypto_LNWordType UpperDifference;
  Crypto_LNWordType LowerDifference;
  Crypto_LNWordType UpperDifference;
  Crypto_LNWordType LowerDifference;
  Crypto_LNWordType Borrow;
  Crypto_LNWordType LoopCount;
  long unsigned int _1;
  const Crypto_LNWordType * _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  const Crypto_LNWordType * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  const Crypto_LNWordType * _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  const Crypto_LNWordType * _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  Crypto_LNWordType * _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  const Crypto_LNWordType * _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  const Crypto_LNWordType * _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  Crypto_LNWordType * _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Borrow_48 = 0;
  # DEBUG Borrow => Borrow_48
  # DEBUG BEGIN_STMT
  LoopCount_49 = 1;
  # DEBUG LoopCount => LoopCount_49
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = LoopCount_42 * 4;
  _2 = Minuend_53(D) + _1;
  _3 = *_2;
  _4 = _3 & 65535;
  _5 = LoopCount_42 * 4;
  _6 = Subtrahend_51(D) + _5;
  _7 = *_6;
  _8 = _7 & 65535;
  _9 = _4 - _8;
  LowerDifference_54 = _9 - Borrow_44;
  # DEBUG LowerDifference => LowerDifference_54
  # DEBUG BEGIN_STMT
  _10 = LowerDifference_54 >> 16;
  Borrow_55 = _10 & 1;
  # DEBUG Borrow => Borrow_55
  # DEBUG BEGIN_STMT
  LowerDifference_56 = LowerDifference_54 & 65535;
  # DEBUG LowerDifference => LowerDifference_56
  # DEBUG BEGIN_STMT
  _11 = LoopCount_42 * 4;
  _12 = Minuend_53(D) + _11;
  _13 = *_12;
  _14 = _13 >> 16;
  _15 = LoopCount_42 * 4;
  _16 = Subtrahend_51(D) + _15;
  _17 = *_16;
  _18 = _17 >> 16;
  _19 = _14 - _18;
  UpperDifference_57 = _19 - Borrow_55;
  # DEBUG UpperDifference => UpperDifference_57
  # DEBUG BEGIN_STMT
  _20 = UpperDifference_57 >> 16;
  Borrow_58 = _20 & 1;
  # DEBUG Borrow => Borrow_58
  # DEBUG BEGIN_STMT
  UpperDifference_59 = UpperDifference_57 & 65535;
  # DEBUG UpperDifference => UpperDifference_59
  # DEBUG BEGIN_STMT
  _21 = UpperDifference_59 << 16;
  _22 = LoopCount_42 * 4;
  _23 = Result_60(D) + _22;
  _24 = LowerDifference_56 | _21;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  LoopCount_62 = LoopCount_42 + 1;
  # DEBUG LoopCount => LoopCount_62

  <bb 4> :
  # LoopCount_42 = PHI <LoopCount_49(2), LoopCount_62(3)>
  # Borrow_44 = PHI <Borrow_48(2), Borrow_58(3)>
  # DEBUG Borrow => Borrow_44
  # DEBUG LoopCount => LoopCount_42
  # DEBUG BEGIN_STMT
  _25 = *Subtrahend_51(D);
  if (LoopCount_42 <= _25)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (LoopCount_42 <= CutOff_52(D))
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = LoopCount_43 * 4;
  _27 = Minuend_53(D) + _26;
  _28 = *_27;
  _29 = _28 & 65535;
  LowerDifference_65 = _29 - Borrow_45;
  # DEBUG LowerDifference => LowerDifference_65
  # DEBUG BEGIN_STMT
  _30 = LowerDifference_65 >> 16;
  Borrow_66 = _30 & 1;
  # DEBUG Borrow => Borrow_66
  # DEBUG BEGIN_STMT
  LowerDifference_67 = LowerDifference_65 & 65535;
  # DEBUG LowerDifference => LowerDifference_67
  # DEBUG BEGIN_STMT
  _31 = LoopCount_43 * 4;
  _32 = Minuend_53(D) + _31;
  _33 = *_32;
  _34 = _33 >> 16;
  UpperDifference_68 = _34 - Borrow_66;
  # DEBUG UpperDifference => UpperDifference_68
  # DEBUG BEGIN_STMT
  _35 = UpperDifference_68 >> 16;
  Borrow_69 = _35 & 1;
  # DEBUG Borrow => Borrow_69
  # DEBUG BEGIN_STMT
  UpperDifference_70 = UpperDifference_68 & 65535;
  # DEBUG UpperDifference => UpperDifference_70
  # DEBUG BEGIN_STMT
  _36 = UpperDifference_70 << 16;
  _37 = LoopCount_43 * 4;
  _38 = Result_60(D) + _37;
  _39 = LowerDifference_67 | _36;
  *_38 = _39;
  # DEBUG BEGIN_STMT
  LoopCount_72 = LoopCount_43 + 1;
  # DEBUG LoopCount => LoopCount_72

  <bb 7> :
  # LoopCount_43 = PHI <LoopCount_42(5), LoopCount_72(6), LoopCount_42(4)>
  # Borrow_45 = PHI <Borrow_44(5), Borrow_69(6), Borrow_44(4)>
  # DEBUG Borrow => Borrow_45
  # DEBUG LoopCount => LoopCount_43
  # DEBUG BEGIN_STMT
  _40 = *Minuend_53(D);
  if (LoopCount_43 <= _40)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _41 = LoopCount_43 + 4294967295;
  *Result_60(D) = _41;
  # DEBUG BEGIN_STMT
  Crypto_LNNormalizeNumber (Result_60(D));
  return;

}


Crypto_AL_Init ()
{
  uint32 KeyElementId;
  uint32 KeyElementIndex;
  uint32 CryptoKeyId;
  struct Crypto_KeyElement * const * _1;
  long unsigned int _2;
  struct Crypto_KeyElement * const * _3;
  struct Crypto_KeyElement * _4;
  struct Crypto_AL_KeyDataType * _5;
  long unsigned int _6;
  struct Crypto_AL_KeyDataType * _7;
  const uint8 * _8;
  struct Crypto_AL_KeyDataType * _9;
  long unsigned int _10;
  struct Crypto_AL_KeyDataType * _11;
  long unsigned int _12;
  long unsigned int _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CryptoKeyId_18 = 0;
  # DEBUG CryptoKeyId => CryptoKeyId_18
  # DEBUG BEGIN_STMT
  KeyElementIndex_19 = 0;
  # DEBUG KeyElementIndex => KeyElementIndex_19
  # DEBUG BEGIN_STMT
  KeyElementId_20 = 0;
  # DEBUG KeyElementId => KeyElementId_20
  # DEBUG BEGIN_STMT
  CryptoKeyId_21 = 0;
  # DEBUG CryptoKeyId => CryptoKeyId_21
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  KeyElementIndex_23 = 0;
  # DEBUG KeyElementIndex => KeyElementIndex_23
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_Keys[CryptoKeyId_14].KeyType;
  _2 = KeyElementIndex_15 * 4;
  _3 = _1 + _2;
  _4 = *_3;
  KeyElementId_27 = _4->Id;
  # DEBUG KeyElementId => KeyElementId_27
  # DEBUG BEGIN_STMT
  _5 = Crypto_AL_Keys_Data[CryptoKeyId_14].KeyData;
  _6 = KeyElementIndex_15 * 12;
  _7 = _5 + _6;
  _8 = _7->RfKeyElemDataInit;
  _9 = Crypto_AL_Keys_Data[CryptoKeyId_14].KeyData;
  _10 = KeyElementIndex_15 * 12;
  _11 = _9 + _10;
  _12 = _11->RfKeyElemDataSize;
  Crypto_AL_KeyElementSet (CryptoKeyId_14, KeyElementId_27, _8, _12);
  # DEBUG BEGIN_STMT
  KeyElementIndex_29 = KeyElementIndex_15 + 1;
  # DEBUG KeyElementIndex => KeyElementIndex_29

  <bb 5> :
  # KeyElementIndex_15 = PHI <KeyElementIndex_23(3), KeyElementIndex_29(4)>
  # DEBUG KeyElementIndex => KeyElementIndex_15
  # DEBUG BEGIN_STMT
  _13 = Crypto_AL_Keys_Data[CryptoKeyId_14].NumKeyData;
  if (KeyElementIndex_15 < _13)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Crypto_AL_AESCMAC_PrecalculateKeys (CryptoKeyId_14);
  # DEBUG BEGIN_STMT
  Crypto_Keys[CryptoKeyId_14].KeyState = 1;
  # DEBUG BEGIN_STMT
  CryptoKeyId_26 = CryptoKeyId_14 + 1;
  # DEBUG CryptoKeyId => CryptoKeyId_26

  <bb 7> :
  # CryptoKeyId_14 = PHI <CryptoKeyId_21(2), CryptoKeyId_26(6)>
  # DEBUG CryptoKeyId => CryptoKeyId_14
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_14 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Crypto_LNInversion (Crypto_LNWordType * InvValue, const Crypto_LNWordType * Value, Crypto_LNWordType * Tmp1Value, Crypto_LNWordType * Tmp2Value, Crypto_LNWordType * Tmp3Value, const Crypto_LNWordType * Modulus, struct Crypto_LNCtxType * CtxPtr)
{
  Crypto_ReturnType CompNumRes;
  Crypto_LNWordType i;
  Crypto_LNWordType AddResult;
  long unsigned int _1;
  const Crypto_LNWordType * _2;
  long unsigned int _3;
  Crypto_LNWordType * _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  const Crypto_LNWordType * _8;
  long unsigned int _9;
  Crypto_LNWordType * _10;
  long unsigned int _11;
  long unsigned int _12;
  Crypto_LNWordType * _13;
  Crypto_LNWordType * _14;
  Crypto_LNWordType * _15;
  long unsigned int _16;
  long unsigned int _17;
  unsigned char _18;
  Crypto_LNWordType * _19;
  long unsigned int _20;
  long unsigned int _21;
  Crypto_LNWordType * _22;
  long unsigned int _23;
  long unsigned int _24;
  unsigned char _25;
  Crypto_LNWordType * _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  Crypto_LNWordType * _30;
  long unsigned int _31;
  long unsigned int _32;
  Crypto_LNWordType * _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  Crypto_LNWordType * _37;
  long unsigned int _38;
  long unsigned int _39;
  Crypto_LNWordType * _40;
  long unsigned int _41;
  Crypto_LNWordType * _42;
  long unsigned int _43;
  long unsigned int _44;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i_55 = 0;
  # DEBUG i => i_55
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = i_45 * 4;
  _2 = Value_57(D) + _1;
  _3 = i_45 * 4;
  _4 = Tmp1Value_66(D) + _3;
  _5 = *_2;
  *_4 = _5;
  # DEBUG BEGIN_STMT
  i_92 = i_45 + 1;
  # DEBUG i => i_92

  <bb 4> :
  # i_45 = PHI <i_55(2), i_92(3)>
  # DEBUG i => i_45
  # DEBUG BEGIN_STMT
  _6 = *Value_57(D);
  if (i_45 <= _6)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  i_58 = 0;
  # DEBUG i => i_58
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _7 = i_46 * 4;
  _8 = Modulus_59(D) + _7;
  _9 = i_46 * 4;
  _10 = Tmp2Value_67(D) + _9;
  _11 = *_8;
  *_10 = _11;
  # DEBUG BEGIN_STMT
  i_90 = i_46 + 1;
  # DEBUG i => i_90

  <bb 7> :
  # i_46 = PHI <i_58(5), i_90(6)>
  # DEBUG i => i_46
  # DEBUG BEGIN_STMT
  _12 = *Modulus_59(D);
  if (i_46 <= _12)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  *Tmp3Value_60(D) = 1;
  # DEBUG BEGIN_STMT
  _13 = Tmp3Value_60(D) + 4;
  *_13 = 1;
  # DEBUG BEGIN_STMT
  *InvValue_63(D) = 0;
  # DEBUG BEGIN_STMT
  _14 = InvValue_63(D) + 4;
  *_14 = 0;
  # DEBUG BEGIN_STMT
  goto <bb 21>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Crypto_LNDivByTwo (Tmp1Value_66(D), 0);
  # DEBUG BEGIN_STMT
  _15 = Tmp3Value_60(D) + 4;
  _16 = *_15;
  _17 = _16 & 1;
  if (_17 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Crypto_LNDivByTwo (Tmp3Value_60(D), 0);
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _18 = Crypto_LNAddition (Tmp3Value_60(D), Tmp3Value_60(D), Modulus_59(D));
  AddResult_81 = (Crypto_LNWordType) _18;
  # DEBUG AddResult => AddResult_81
  # DEBUG BEGIN_STMT
  Crypto_LNDivByTwo (Tmp3Value_60(D), AddResult_81);

  <bb 12> :
  # DEBUG BEGIN_STMT
  _19 = Tmp1Value_66(D) + 4;
  _20 = *_19;
  _21 = _20 & 1;
  if (_21 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Crypto_LNDivByTwo (Tmp2Value_67(D), 0);
  # DEBUG BEGIN_STMT
  _22 = InvValue_63(D) + 4;
  _23 = *_22;
  _24 = _23 & 1;
  if (_24 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Crypto_LNDivByTwo (InvValue_63(D), 0);
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _25 = Crypto_LNAddition (InvValue_63(D), InvValue_63(D), Modulus_59(D));
  AddResult_76 = (Crypto_LNWordType) _25;
  # DEBUG AddResult => AddResult_76
  # DEBUG BEGIN_STMT
  Crypto_LNDivByTwo (InvValue_63(D), AddResult_76);

  <bb 16> :
  # DEBUG BEGIN_STMT
  _26 = Tmp2Value_67(D) + 4;
  _27 = *_26;
  _28 = _27 & 1;
  if (_28 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  CompNumRes_69 = Crypto_LNCompareNumbers (Tmp1Value_66(D), Tmp2Value_67(D));
  # DEBUG CompNumRes => CompNumRes_69
  # DEBUG BEGIN_STMT
  if (CompNumRes_69 == 5)
    goto <bb 19>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  if (CompNumRes_69 == 2)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  Crypto_LNSubtractionModular (Tmp1Value_66(D), Tmp1Value_66(D), Tmp2Value_67(D), Modulus_59(D));
  # DEBUG BEGIN_STMT
  Crypto_LNSubtractionModular (Tmp3Value_60(D), Tmp3Value_60(D), InvValue_63(D), Modulus_59(D));
  goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  Crypto_LNSubtractionModular (Tmp2Value_67(D), Tmp2Value_67(D), Tmp1Value_66(D), Modulus_59(D));
  # DEBUG BEGIN_STMT
  Crypto_LNSubtractionModular (InvValue_63(D), InvValue_63(D), Tmp3Value_60(D), Modulus_59(D));

  <bb 21> :
  # DEBUG BEGIN_STMT
  _29 = *Tmp1Value_66(D);
  if (_29 != 1)
    goto <bb 23>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  _30 = Tmp1Value_66(D) + 4;
  _31 = *_30;
  if (_31 != 1)
    goto <bb 23>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 23> :
  _32 = *Tmp2Value_67(D);
  if (_32 != 1)
    goto <bb 25>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  _33 = Tmp2Value_67(D) + 4;
  _34 = *_33;
  if (_34 != 1)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  _35 = *Tmp1Value_66(D);
  if (_35 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  _36 = *Tmp1Value_66(D);
  if (_36 == 1)
    goto <bb 27>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 27> :
  _37 = Tmp1Value_66(D) + 4;
  _38 = *_37;
  if (_38 == 1)
    goto <bb 28>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  i_84 = 0;
  # DEBUG i => i_84
  goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  _39 = i_47 * 4;
  _40 = Tmp3Value_60(D) + _39;
  _41 = i_47 * 4;
  _42 = InvValue_63(D) + _41;
  _43 = *_40;
  *_42 = _43;
  # DEBUG BEGIN_STMT
  i_86 = i_47 + 1;
  # DEBUG i => i_86

  <bb 30> :
  # i_47 = PHI <i_84(28), i_86(29)>
  # DEBUG i => i_47
  # DEBUG BEGIN_STMT
  _44 = *Tmp3Value_60(D);
  if (i_47 <= _44)
    goto <bb 29>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 31> :
  # DEBUG BEGIN_STMT
  Crypto_LNModulo (InvValue_63(D), Modulus_59(D), CtxPtr_87(D));
  return;

}


Crypto_LNSubtractionModular (Crypto_LNWordType * Difference, const Crypto_LNWordType * Minuend, const Crypto_LNWordType * Subtrahend, const Crypto_LNWordType * Modulus)
{
  Crypto_LNWordType Tmp2;
  Crypto_LNWordType Tmp;
  uint8 Borrow;
  Crypto_LNWordType i;
  long unsigned int _1;
  long unsigned int _2;
  const Crypto_LNWordType * _3;
  long unsigned int _4;
  long unsigned int _5;
  const Crypto_LNWordType * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  Crypto_LNWordType * _10;
  long unsigned int _11;
  long unsigned int _12;
  Crypto_LNWordType * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Borrow_25 = 0;
  # DEBUG Borrow => Borrow_25
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i_26 = 1;
  # DEBUG i => i_26
  goto <bb 15>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = *Minuend_34(D);
  if (i_17 > _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Tmp_36 = 0;
  # DEBUG Tmp => Tmp_36
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = i_17 * 4;
  _3 = Minuend_34(D) + _2;
  Tmp_35 = *_3;
  # DEBUG Tmp => Tmp_35

  <bb 6> :
  # Tmp_20 = PHI <Tmp_36(4), Tmp_35(5)>
  # DEBUG Tmp => Tmp_20
  # DEBUG BEGIN_STMT
  _4 = *Subtrahend_37(D);
  if (i_17 > _4)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Tmp2_39 = 0;
  # DEBUG Tmp2 => Tmp2_39
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _5 = i_17 * 4;
  _6 = Subtrahend_37(D) + _5;
  Tmp2_38 = *_6;
  # DEBUG Tmp2 => Tmp2_38

  <bb 9> :
  # Tmp2_21 = PHI <Tmp2_39(7), Tmp2_38(8)>
  # DEBUG Tmp2 => Tmp2_21
  # DEBUG BEGIN_STMT
  _7 = Tmp_20 - Tmp2_21;
  _8 = (long unsigned int) Borrow_19;
  _9 = i_17 * 4;
  _10 = Difference_29(D) + _9;
  _11 = _7 - _8;
  *_10 = _11;
  # DEBUG BEGIN_STMT
  _12 = i_17 * 4;
  _13 = Difference_29(D) + _12;
  _14 = *_13;
  if (Tmp_20 <= _14)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (Tmp2_21 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (Borrow_19 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Borrow_42 = 1;
  # DEBUG Borrow => Borrow_42
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Borrow_41 = 0;
  # DEBUG Borrow => Borrow_41

  <bb 14> :
  # Borrow_18 = PHI <Borrow_42(12), Borrow_41(13), Borrow_19(11)>
  # DEBUG Borrow => Borrow_18
  # DEBUG BEGIN_STMT
  i_43 = i_17 + 1;
  # DEBUG i => i_43

  <bb 15> :
  # i_17 = PHI <i_26(2), i_43(14)>
  # Borrow_19 = PHI <Borrow_25(2), Borrow_18(14)>
  # DEBUG Borrow => Borrow_19
  # DEBUG i => i_17
  # DEBUG BEGIN_STMT
  _15 = *Modulus_28(D);
  if (i_17 <= _15)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _16 = *Modulus_28(D);
  *Difference_29(D) = _16;
  # DEBUG BEGIN_STMT
  if (Borrow_19 == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Borrow_32 = Crypto_LNAddition (Difference_29(D), Difference_29(D), Modulus_28(D));
  # DEBUG Borrow => Borrow_32
  # DEBUG BEGIN_STMT
  if (Borrow_32 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Crypto_LNNormalizeNumber (Difference_29(D));
  return;

}


Crypto_LNAdditionModular (Crypto_LNWordType * Sum, const Crypto_LNWordType * Addend1, const Crypto_LNWordType * Addend2, const Crypto_LNWordType * Modulus)
{
  uint8 Borrow;
  uint8 Carry;
  Crypto_LNWordType Tmp;
  Crypto_LNWordType i;
  long unsigned int _1;
  long unsigned int _2;
  Crypto_LNWordType * _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  Crypto_LNWordType * _11;
  unsigned char _12;
  long unsigned int _13;
  Crypto_LNWordType * _14;
  long unsigned int _15;
  Crypto_LNWordType * _16;
  long unsigned int _17;
  long unsigned int _18;
  const Crypto_LNWordType * _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  Crypto_LNWordType * _24;
  long unsigned int _25;
  long unsigned int _26;
  Crypto_LNWordType * _27;
  long unsigned int _28;
  long unsigned int _29;
  const Crypto_LNWordType * _30;
  long unsigned int _31;
  long unsigned int _32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Carry_40 = 0;
  # DEBUG Carry => Carry_40
  # DEBUG BEGIN_STMT
  Borrow_41 = 0;
  # DEBUG Borrow => Borrow_41
  # DEBUG BEGIN_STMT
  Carry_47 = Crypto_LNAddition (Sum_43(D), Addend1_44(D), Addend2_45(D));
  # DEBUG Carry => Carry_47
  # DEBUG BEGIN_STMT
  _1 = *Sum_43(D);
  i_48 = _1 + 1;
  # DEBUG i => i_48
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = i_33 * 4;
  _3 = Sum_43(D) + _2;
  *_3 = 0;
  # DEBUG BEGIN_STMT
  i_61 = i_33 + 1;
  # DEBUG i => i_61

  <bb 4> :
  # i_33 = PHI <i_48(2), i_61(3)>
  # DEBUG i => i_33
  # DEBUG BEGIN_STMT
  _4 = *Modulus_49(D);
  if (i_33 <= _4)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = *Sum_43(D);
  _6 = *Modulus_49(D);
  if (_5 < _6)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (Carry_47 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 = *Sum_43(D);
  _8 = _7 + 1;
  *Sum_43(D) = _8;
  # DEBUG BEGIN_STMT
  _9 = *Sum_43(D);
  _10 = _9 * 4;
  _11 = Sum_43(D) + _10;
  *_11 = 1;
  goto <bb 18>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _12 = Crypto_LNCompareNumbers (Sum_43(D), Modulus_49(D));
  if (_12 != 4)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (Carry_47 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  i_53 = 1;
  # DEBUG i => i_53
  goto <bb 17>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _13 = i_34 * 4;
  _14 = Sum_43(D) + _13;
  Tmp_54 = *_14;
  # DEBUG Tmp => Tmp_54
  # DEBUG BEGIN_STMT
  _15 = i_34 * 4;
  _16 = Sum_43(D) + _15;
  _17 = *_16;
  _18 = i_34 * 4;
  _19 = Modulus_49(D) + _18;
  _20 = *_19;
  _21 = _17 - _20;
  _22 = (long unsigned int) Borrow_36;
  _23 = i_34 * 4;
  _24 = Sum_43(D) + _23;
  _25 = _21 - _22;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  _26 = i_34 * 4;
  _27 = Sum_43(D) + _26;
  _28 = *_27;
  if (Tmp_54 <= _28)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _29 = i_34 * 4;
  _30 = Modulus_49(D) + _29;
  _31 = *_30;
  if (_31 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  if (Borrow_36 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Borrow_57 = 1;
  # DEBUG Borrow => Borrow_57
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Borrow_56 = 0;
  # DEBUG Borrow => Borrow_56

  <bb 16> :
  # Borrow_35 = PHI <Borrow_57(14), Borrow_56(15), Borrow_36(13)>
  # DEBUG Borrow => Borrow_35
  # DEBUG BEGIN_STMT
  i_58 = i_34 + 1;
  # DEBUG i => i_58

  <bb 17> :
  # i_34 = PHI <i_53(10), i_58(16)>
  # Borrow_36 = PHI <Borrow_41(10), Borrow_35(16)>
  # DEBUG Borrow => Borrow_36
  # DEBUG i => i_34
  # DEBUG BEGIN_STMT
  _32 = *Modulus_49(D);
  if (i_34 <= _32)
    goto <bb 11>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Crypto_LNNormalizeNumber (Sum_43(D));
  return;

}


Crypto_LNAddition (Crypto_LNWordType * Sum, const Crypto_LNWordType * Addend1, const Crypto_LNWordType * Addend2)
{
  Crypto_LNWordType Carry;
  Crypto_LNWordType MaxLength;
  Crypto_LNWordType MinLength;
  Crypto_LNWordType LoopCount;
  Crypto_LNDoubleWordType TempSum;
  const Crypto_LNWordType * LargestOperand;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  const Crypto_LNWordType * _4;
  long unsigned int _5;
  long long unsigned int _6;
  long unsigned int _7;
  const Crypto_LNWordType * _8;
  long unsigned int _9;
  long long unsigned int _10;
  long long unsigned int _11;
  long long unsigned int _12;
  long unsigned int _13;
  Crypto_LNWordType * _14;
  long unsigned int _15;
  long long unsigned int _16;
  long unsigned int _17;
  const Crypto_LNWordType * _18;
  long unsigned int _19;
  long long unsigned int _20;
  long long unsigned int _21;
  long unsigned int _22;
  Crypto_LNWordType * _23;
  long unsigned int _24;
  long long unsigned int _25;
  uint8 _48;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Carry_35 = 0;
  # DEBUG Carry => Carry_35
  # DEBUG BEGIN_STMT
  _1 = *Addend1_37(D);
  _2 = *Addend2_38(D);
  if (_1 > _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  MinLength_42 = *Addend2_38(D);
  # DEBUG MinLength => MinLength_42
  # DEBUG BEGIN_STMT
  MaxLength_43 = *Addend1_37(D);
  # DEBUG MaxLength => MaxLength_43
  # DEBUG BEGIN_STMT
  LargestOperand_44 = Addend1_37(D);
  # DEBUG LargestOperand => LargestOperand_44
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  MinLength_39 = *Addend1_37(D);
  # DEBUG MinLength => MinLength_39
  # DEBUG BEGIN_STMT
  MaxLength_40 = *Addend2_38(D);
  # DEBUG MaxLength => MaxLength_40
  # DEBUG BEGIN_STMT
  LargestOperand_41 = Addend2_38(D);
  # DEBUG LargestOperand => LargestOperand_41

  <bb 5> :
  # LargestOperand_26 = PHI <LargestOperand_44(3), LargestOperand_41(4)>
  # MinLength_29 = PHI <MinLength_42(3), MinLength_39(4)>
  # MaxLength_30 = PHI <MaxLength_43(3), MaxLength_40(4)>
  # DEBUG MaxLength => MaxLength_30
  # DEBUG MinLength => MinLength_29
  # DEBUG LargestOperand => LargestOperand_26
  # DEBUG BEGIN_STMT
  LoopCount_45 = 1;
  # DEBUG LoopCount => LoopCount_45
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _3 = LoopCount_27 * 4;
  _4 = Addend1_37(D) + _3;
  _5 = *_4;
  _6 = (long long unsigned int) _5;
  _7 = LoopCount_27 * 4;
  _8 = Addend2_38(D) + _7;
  _9 = *_8;
  _10 = (long long unsigned int) _9;
  _11 = _6 + _10;
  _12 = (long long unsigned int) Carry_31;
  TempSum_53 = _11 + _12;
  # DEBUG TempSum => TempSum_53
  # DEBUG BEGIN_STMT
  _13 = LoopCount_27 * 4;
  _14 = Sum_46(D) + _13;
  _15 = (long unsigned int) TempSum_53;
  *_14 = _15;
  # DEBUG BEGIN_STMT
  _16 = TempSum_53 >> 32;
  Carry_55 = (Crypto_LNWordType) _16;
  # DEBUG Carry => Carry_55
  # DEBUG BEGIN_STMT
  LoopCount_56 = LoopCount_27 + 1;
  # DEBUG LoopCount => LoopCount_56

  <bb 7> :
  # LoopCount_27 = PHI <LoopCount_45(5), LoopCount_56(6)>
  # Carry_31 = PHI <Carry_35(5), Carry_55(6)>
  # DEBUG Carry => Carry_31
  # DEBUG LoopCount => LoopCount_27
  # DEBUG BEGIN_STMT
  if (LoopCount_27 <= MinLength_29)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _17 = LoopCount_28 * 4;
  _18 = LargestOperand_26 + _17;
  _19 = *_18;
  _20 = (long long unsigned int) _19;
  _21 = (long long unsigned int) Carry_32;
  TempSum_49 = _20 + _21;
  # DEBUG TempSum => TempSum_49
  # DEBUG BEGIN_STMT
  _22 = LoopCount_28 * 4;
  _23 = Sum_46(D) + _22;
  _24 = (long unsigned int) TempSum_49;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  _25 = TempSum_49 >> 32;
  Carry_51 = (Crypto_LNWordType) _25;
  # DEBUG Carry => Carry_51
  # DEBUG BEGIN_STMT
  LoopCount_52 = LoopCount_28 + 1;
  # DEBUG LoopCount => LoopCount_52

  <bb 9> :
  # LoopCount_28 = PHI <LoopCount_27(7), LoopCount_52(8)>
  # Carry_32 = PHI <Carry_31(7), Carry_51(8)>
  # DEBUG Carry => Carry_32
  # DEBUG LoopCount => LoopCount_28
  # DEBUG BEGIN_STMT
  if (LoopCount_28 <= MaxLength_30)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  *Sum_46(D) = MaxLength_30;
  # DEBUG BEGIN_STMT
  _48 = (uint8) Carry_32;
  return _48;

}


Crypto_LNDivByTwo (Crypto_LNWordType * Value, Crypto_LNWordType Overflow)
{
  Crypto_LNWordType DiffTmpVal2;
  Crypto_LNWordType DiffTmpVal1;
  Crypto_LNWordType i;
  long unsigned int _1;
  Crypto_LNWordType * _2;
  long unsigned int _3;
  long unsigned int _4;
  Crypto_LNWordType * _5;
  long unsigned int _6;
  long unsigned int _7;
  Crypto_LNWordType * _8;
  long unsigned int _9;
  long unsigned int _10;
  Crypto_LNWordType * _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  Crypto_LNWordType * _15;
  long unsigned int _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DiffTmpVal2_21 = Overflow_20(D);
  # DEBUG DiffTmpVal2 => DiffTmpVal2_21
  # DEBUG BEGIN_STMT
  i_24 = *Value_23(D);
  # DEBUG i => i_24
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = i_17 * 4;
  _2 = Value_23(D) + _1;
  _3 = *_2;
  DiffTmpVal1_26 = _3 & 1;
  # DEBUG DiffTmpVal1 => DiffTmpVal1_26
  # DEBUG BEGIN_STMT
  _4 = i_17 * 4;
  _5 = Value_23(D) + _4;
  _6 = *_5;
  _7 = i_17 * 4;
  _8 = Value_23(D) + _7;
  _9 = _6 >> 1;
  *_8 = _9;
  # DEBUG BEGIN_STMT
  _10 = i_17 * 4;
  _11 = Value_23(D) + _10;
  _12 = *_11;
  _13 = DiffTmpVal2_18 << 31;
  _14 = i_17 * 4;
  _15 = Value_23(D) + _14;
  _16 = _12 | _13;
  *_15 = _16;
  # DEBUG BEGIN_STMT
  DiffTmpVal2_29 = DiffTmpVal1_26;
  # DEBUG DiffTmpVal2 => DiffTmpVal2_29
  # DEBUG BEGIN_STMT
  i_30 = i_17 + 4294967295;
  # DEBUG i => i_30

  <bb 4> :
  # i_17 = PHI <i_24(2), i_30(3)>
  # DiffTmpVal2_18 = PHI <DiffTmpVal2_21(2), DiffTmpVal2_29(3)>
  # DEBUG DiffTmpVal2 => DiffTmpVal2_18
  # DEBUG i => i_17
  # DEBUG BEGIN_STMT
  if (i_17 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Crypto_LNNormalizeNumber (Value_23(D));
  return;

}


Crypto_LNNumberToLEByteArray (const Crypto_LNWordType * Number, uint8 * Array, uint32 * ArrayLengthPtr)
{
  Std_ReturnType RetVal;
  Crypto_LNWordType ArrayPos;
  Crypto_LNWordType WordPos;
  Crypto_LNWordType NumberPos;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  const Crypto_LNWordType * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  uint8 * _9;
  unsigned char _10;
  long unsigned int _11;
  long unsigned int _12;
  short unsigned int _13;
  short unsigned int _14;
  long unsigned int _15;
  Std_ReturnType _39;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal_23 = 0;
  # DEBUG RetVal => RetVal_23
  # DEBUG BEGIN_STMT
  _1 = *ArrayLengthPtr_25(D);
  _2 = _1 / 4;
  _3 = *Number_26(D);
  if (_2 < _3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal_38 = 1;
  # DEBUG RetVal => RetVal_38
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  NumberPos_27 = 1;
  # DEBUG NumberPos => NumberPos_27
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ArrayPos_29 = NumberPos_16;
  # DEBUG ArrayPos => ArrayPos_29
  # DEBUG BEGIN_STMT
  ArrayPos_30 = ArrayPos_29 + 4294967295;
  # DEBUG ArrayPos => ArrayPos_30
  # DEBUG BEGIN_STMT
  ArrayPos_31 = ArrayPos_30 * 4;
  # DEBUG ArrayPos => ArrayPos_31
  # DEBUG BEGIN_STMT
  WordPos_32 = 0;
  # DEBUG WordPos => WordPos_32
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _4 = NumberPos_16 * 4;
  _5 = Number_26(D) + _4;
  _6 = *_5;
  _7 = WordPos_17 << 3;
  _8 = _6 >> _7;
  _9 = Array_34(D) + ArrayPos_18;
  _10 = (unsigned char) _8;
  *_9 = _10;
  # DEBUG BEGIN_STMT
  ArrayPos_36 = ArrayPos_18 + 1;
  # DEBUG ArrayPos => ArrayPos_36
  # DEBUG BEGIN_STMT
  WordPos_37 = WordPos_17 + 1;
  # DEBUG WordPos => WordPos_37

  <bb 7> :
  # WordPos_17 = PHI <WordPos_32(5), WordPos_37(6)>
  # ArrayPos_18 = PHI <ArrayPos_31(5), ArrayPos_36(6)>
  # DEBUG ArrayPos => ArrayPos_18
  # DEBUG WordPos => WordPos_17
  # DEBUG BEGIN_STMT
  if (WordPos_17 <= 3)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  NumberPos_33 = NumberPos_16 + 1;
  # DEBUG NumberPos => NumberPos_33

  <bb 9> :
  # NumberPos_16 = PHI <NumberPos_27(4), NumberPos_33(8)>
  # DEBUG NumberPos => NumberPos_16
  # DEBUG BEGIN_STMT
  _11 = *Number_26(D);
  if (NumberPos_16 <= _11)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _12 = *Number_26(D);
  _13 = (short unsigned int) _12;
  _14 = _13 * 4;
  _15 = (long unsigned int) _14;
  *ArrayLengthPtr_25(D) = _15;

  <bb 11> :
  # RetVal_19 = PHI <RetVal_38(3), RetVal_23(10)>
  # DEBUG RetVal => RetVal_19
  # DEBUG BEGIN_STMT
  _39 = RetVal_19;
  return _39;

}


Crypto_LNLEByteArrayToNumber (const uint8 * Array, uint32 ArrayLength, Crypto_LNWordType * Number, Crypto_LNWordType NumberLength)
{
  Std_ReturnType RetVal;
  uint16 ArrayPos;
  Crypto_LNWordType WordPos;
  Crypto_LNWordType NumberPos;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  Crypto_LNWordType * _5;
  short unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  Crypto_LNWordType * _11;
  long unsigned int _12;
  sizetype _13;
  const uint8 * _14;
  unsigned char _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  Crypto_LNWordType * _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  Std_ReturnType _55;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal_35 = 0;
  # DEBUG RetVal => RetVal_35
  # DEBUG BEGIN_STMT
  if (ArrayLength_36(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = ArrayLength_36(D) + 4294967295;
  _2 = _1 / 4;
  _3 = _2 + 2;
  if (NumberLength_37(D) < _3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetVal_54 = 1;
  # DEBUG RetVal => RetVal_54
  goto <bb 17>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  NumberPos_42 = 1;
  # DEBUG NumberPos => NumberPos_42
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _4 = NumberPos_28 * 4;
  _5 = Number_39(D) + _4;
  *_5 = 0;
  # DEBUG BEGIN_STMT
  WordPos_46 = 0;
  # DEBUG WordPos => WordPos_46
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ArrayPos_48 = 4;
  # DEBUG ArrayPos => ArrayPos_48
  # DEBUG BEGIN_STMT
  _6 = (short unsigned int) NumberPos_28;
  _7 = _6 + 65535;
  ArrayPos_49 = ArrayPos_48 * _7;
  # DEBUG ArrayPos => ArrayPos_49
  # DEBUG BEGIN_STMT
  _8 = (short unsigned int) WordPos_29;
  ArrayPos_50 = ArrayPos_49 + _8;
  # DEBUG ArrayPos => ArrayPos_50
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) ArrayPos_50;
  if (ArrayLength_36(D) > _9)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _10 = NumberPos_28 * 4;
  _11 = Number_39(D) + _10;
  _12 = *_11;
  _13 = (sizetype) ArrayPos_50;
  _14 = Array_51(D) + _13;
  _15 = *_14;
  _16 = (long unsigned int) _15;
  _17 = WordPos_29 << 3;
  _18 = _16 << _17;
  _19 = NumberPos_28 * 4;
  _20 = Number_39(D) + _19;
  _21 = _12 | _18;
  *_20 = _21;

  <bb 9> :
  # DEBUG BEGIN_STMT
  WordPos_53 = WordPos_29 + 1;
  # DEBUG WordPos => WordPos_53

  <bb 10> :
  # WordPos_29 = PHI <WordPos_46(6), WordPos_53(9)>
  # DEBUG WordPos => WordPos_29
  # DEBUG BEGIN_STMT
  if (WordPos_29 <= 3)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  NumberPos_47 = NumberPos_28 + 1;
  # DEBUG NumberPos => NumberPos_47

  <bb 12> :
  # NumberPos_28 = PHI <NumberPos_42(5), NumberPos_47(11)>
  # DEBUG NumberPos => NumberPos_28
  # DEBUG BEGIN_STMT
  _22 = ArrayLength_36(D) + 4294967295;
  _23 = _22 / 4;
  _24 = _23 + 1;
  if (NumberPos_28 <= _24)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _25 = ArrayLength_36(D) + 4294967295;
  _26 = _25 / 4;
  _27 = _26 + 1;
  *Number_39(D) = _27;
  # DEBUG BEGIN_STMT
  Crypto_LNNormalizeNumber (Number_39(D));
  goto <bb 17>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (NumberLength_37(D) == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  RetVal_41 = 1;
  # DEBUG RetVal => RetVal_41
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  *Number_39(D) = 0;

  <bb 17> :
  # RetVal_30 = PHI <RetVal_35(13), RetVal_41(15), RetVal_35(16), RetVal_54(4)>
  # DEBUG RetVal => RetVal_30
  # DEBUG BEGIN_STMT
  _55 = RetVal_30;
  return _55;

}


Crypto_LNNumberToBEByteArray (const Crypto_LNWordType * Number, uint8 * Array, uint32 * ArrayLengthPtr)
{
  Std_ReturnType RetVal;
  Crypto_LNWordType ArrayPos;
  Crypto_LNWordType WordPos;
  Crypto_LNWordType NumberPos;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  const Crypto_LNWordType * _5;
  long unsigned int _6;
  unsigned char _7;
  unsigned char _8;
  int _9;
  long unsigned int _10;
  uint8 * _11;
  unsigned char _12;
  long unsigned int _13;
  long unsigned int _14;
  short unsigned int _15;
  short unsigned int _16;
  long unsigned int _17;
  Std_ReturnType _42;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal_25 = 0;
  # DEBUG RetVal => RetVal_25
  # DEBUG BEGIN_STMT
  _1 = *ArrayLengthPtr_27(D);
  _2 = _1 / 4;
  _3 = *Number_28(D);
  if (_2 < _3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal_41 = 1;
  # DEBUG RetVal => RetVal_41
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  NumberPos_29 = 1;
  # DEBUG NumberPos => NumberPos_29
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ArrayPos_31 = *Number_28(D);
  # DEBUG ArrayPos => ArrayPos_31
  # DEBUG BEGIN_STMT
  ArrayPos_32 = ArrayPos_31 - NumberPos_18;
  # DEBUG ArrayPos => ArrayPos_32
  # DEBUG BEGIN_STMT
  ArrayPos_33 = ArrayPos_32 + 1;
  # DEBUG ArrayPos => ArrayPos_33
  # DEBUG BEGIN_STMT
  ArrayPos_34 = ArrayPos_33 * 4;
  # DEBUG ArrayPos => ArrayPos_34
  # DEBUG BEGIN_STMT
  WordPos_35 = 0;
  # DEBUG WordPos => WordPos_35
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ArrayPos_37 = ArrayPos_20 + 4294967295;
  # DEBUG ArrayPos => ArrayPos_37
  # DEBUG BEGIN_STMT
  _4 = NumberPos_18 * 4;
  _5 = Number_28(D) + _4;
  _6 = *_5;
  _7 = (unsigned char) WordPos_19;
  _8 = _7 << 3;
  _9 = (int) _8;
  _10 = _6 >> _9;
  _11 = Array_38(D) + ArrayPos_37;
  _12 = (unsigned char) _10;
  *_11 = _12;
  # DEBUG BEGIN_STMT
  WordPos_40 = WordPos_19 + 1;
  # DEBUG WordPos => WordPos_40

  <bb 7> :
  # WordPos_19 = PHI <WordPos_35(5), WordPos_40(6)>
  # ArrayPos_20 = PHI <ArrayPos_34(5), ArrayPos_37(6)>
  # DEBUG ArrayPos => ArrayPos_20
  # DEBUG WordPos => WordPos_19
  # DEBUG BEGIN_STMT
  if (WordPos_19 <= 3)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  NumberPos_36 = NumberPos_18 + 1;
  # DEBUG NumberPos => NumberPos_36

  <bb 9> :
  # NumberPos_18 = PHI <NumberPos_29(4), NumberPos_36(8)>
  # DEBUG NumberPos => NumberPos_18
  # DEBUG BEGIN_STMT
  _13 = *Number_28(D);
  if (NumberPos_18 <= _13)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _14 = *Number_28(D);
  _15 = (short unsigned int) _14;
  _16 = _15 * 4;
  _17 = (long unsigned int) _16;
  *ArrayLengthPtr_27(D) = _17;

  <bb 11> :
  # RetVal_21 = PHI <RetVal_41(3), RetVal_25(10)>
  # DEBUG RetVal => RetVal_21
  # DEBUG BEGIN_STMT
  _42 = RetVal_21;
  return _42;

}


Crypto_LNBEByteArrayToNumber (const uint8 * Array, uint32 ArrayLength, Crypto_LNWordType * Number, Crypto_LNWordType NumberLength)
{
  Std_ReturnType RetVal;
  uint32 ArrayPos;
  Crypto_LNWordType WordPos;
  Crypto_LNWordType NumberPos;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  Crypto_LNWordType * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  Crypto_LNWordType * _9;
  long unsigned int _10;
  const uint8 * _11;
  unsigned char _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  Crypto_LNWordType * _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  Std_ReturnType _55;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal_32 = 1;
  # DEBUG RetVal => RetVal_32
  # DEBUG BEGIN_STMT
  if (ArrayLength_33(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = ArrayLength_33(D) + 4294967295;
  _2 = _1 / 4;
  _3 = _2 + 2;
  if (NumberLength_34(D) < _3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetVal_54 = 1;
  # DEBUG RetVal => RetVal_54
  goto <bb 17>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  NumberPos_40 = 1;
  # DEBUG NumberPos => NumberPos_40
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _4 = NumberPos_25 * 4;
  _5 = Number_36(D) + _4;
  *_5 = 0;
  # DEBUG BEGIN_STMT
  WordPos_45 = 0;
  # DEBUG WordPos => WordPos_45
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ArrayPos_47 = 4;
  # DEBUG ArrayPos => ArrayPos_47
  # DEBUG BEGIN_STMT
  _6 = NumberPos_25 + 4294967295;
  ArrayPos_48 = ArrayPos_47 * _6;
  # DEBUG ArrayPos => ArrayPos_48
  # DEBUG BEGIN_STMT
  ArrayPos_49 = ArrayPos_48 + WordPos_26;
  # DEBUG ArrayPos => ArrayPos_49
  # DEBUG BEGIN_STMT
  _7 = ArrayLength_33(D) - ArrayPos_49;
  ArrayPos_50 = _7 + 4294967295;
  # DEBUG ArrayPos => ArrayPos_50
  # DEBUG BEGIN_STMT
  if (ArrayPos_50 < ArrayLength_33(D))
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _8 = NumberPos_25 * 4;
  _9 = Number_36(D) + _8;
  _10 = *_9;
  _11 = Array_51(D) + ArrayPos_50;
  _12 = *_11;
  _13 = (long unsigned int) _12;
  _14 = WordPos_26 << 3;
  _15 = _13 << _14;
  _16 = NumberPos_25 * 4;
  _17 = Number_36(D) + _16;
  _18 = _10 | _15;
  *_17 = _18;

  <bb 9> :
  # DEBUG BEGIN_STMT
  WordPos_53 = WordPos_26 + 1;
  # DEBUG WordPos => WordPos_53

  <bb 10> :
  # WordPos_26 = PHI <WordPos_45(6), WordPos_53(9)>
  # DEBUG WordPos => WordPos_26
  # DEBUG BEGIN_STMT
  if (WordPos_26 <= 3)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  NumberPos_46 = NumberPos_25 + 1;
  # DEBUG NumberPos => NumberPos_46

  <bb 12> :
  # NumberPos_25 = PHI <NumberPos_40(5), NumberPos_46(11)>
  # DEBUG NumberPos => NumberPos_25
  # DEBUG BEGIN_STMT
  _19 = ArrayLength_33(D) + 4294967295;
  _20 = _19 / 4;
  _21 = _20 + 1;
  if (NumberPos_25 <= _21)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _22 = ArrayLength_33(D) + 4294967295;
  _23 = _22 / 4;
  _24 = _23 + 1;
  *Number_36(D) = _24;
  # DEBUG BEGIN_STMT
  Crypto_LNNormalizeNumber (Number_36(D));
  # DEBUG BEGIN_STMT
  RetVal_43 = 0;
  # DEBUG RetVal => RetVal_43
  goto <bb 17>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (NumberLength_34(D) == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  RetVal_39 = 1;
  # DEBUG RetVal => RetVal_39
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  *Number_36(D) = 0;
  # DEBUG BEGIN_STMT
  RetVal_38 = 0;
  # DEBUG RetVal => RetVal_38

  <bb 17> :
  # RetVal_27 = PHI <RetVal_43(13), RetVal_39(15), RetVal_38(16), RetVal_54(4)>
  # DEBUG RetVal => RetVal_27
  # DEBUG BEGIN_STMT
  _55 = RetVal_27;
  return _55;

}


Crypto_LNModulo (Crypto_LNWordType * Number, const Crypto_LNWordType * Modulus, struct Crypto_LNCtxType * CtxPtr)
{
  uint32 LengthOfMod;
  uint32 LengthOfNum;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  LengthOfNum_9 = Crypto_LNBitLengthOfNumber (Number_7(D));
  # DEBUG LengthOfNum => LengthOfNum_9
  # DEBUG BEGIN_STMT
  LengthOfMod_12 = Crypto_LNBitLengthOfNumber (Modulus_10(D));
  # DEBUG LengthOfMod => LengthOfMod_12
  # DEBUG BEGIN_STMT
  if (LengthOfMod_12 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  *Number_7(D) = LengthOfMod_12;
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (LengthOfMod_12 <= LengthOfNum_9)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _1 = LengthOfNum_9 - LengthOfMod_12;
  _2 = _1 + 1;
  CtxPtr_14(D)->LengthDifference = _2;

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Crypto_LNSModuloShift (Number_7(D), Modulus_10(D), CtxPtr_14(D));
  # DEBUG BEGIN_STMT
  _3 = CtxPtr_14(D)->LengthDifference;
  if (_3 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Crypto_LNNormalizeNumber (Number_7(D));
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Crypto_LNNormalizeNumber (Number_7(D));

  <bb 9> :
  return;

}


Crypto_LNCompareNumbers (const Crypto_LNWordType * Number1, const Crypto_LNWordType * Number2)
{
  Crypto_ReturnType Compare;
  Crypto_LNWordType NumberPos;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  const Crypto_LNWordType * _6;
  long unsigned int _7;
  long unsigned int _8;
  const Crypto_LNWordType * _9;
  long unsigned int _10;
  long unsigned int _11;
  const Crypto_LNWordType * _12;
  long unsigned int _13;
  long unsigned int _14;
  const Crypto_LNWordType * _15;
  long unsigned int _16;
  Crypto_ReturnType _31;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = *Number1_22(D);
  _2 = *Number2_23(D);
  if (_1 > _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Compare_30 = 5;
  # DEBUG Compare => Compare_30
  goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = *Number1_22(D);
  _4 = *Number2_23(D);
  if (_3 < _4)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Compare_29 = 4;
  # DEBUG Compare => Compare_29
  goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Compare_24 = 2;
  # DEBUG Compare => Compare_24
  # DEBUG BEGIN_STMT
  NumberPos_25 = *Number1_22(D);
  # DEBUG NumberPos => NumberPos_25
  goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _5 = NumberPos_17 * 4;
  _6 = Number1_22(D) + _5;
  _7 = *_6;
  _8 = NumberPos_17 * 4;
  _9 = Number2_23(D) + _8;
  _10 = *_9;
  if (_7 > _10)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Compare_27 = 5;
  # DEBUG Compare => Compare_27
  goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _11 = NumberPos_17 * 4;
  _12 = Number1_22(D) + _11;
  _13 = *_12;
  _14 = NumberPos_17 * 4;
  _15 = Number2_23(D) + _14;
  _16 = *_15;
  if (_13 < _16)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Compare_26 = 4;
  # DEBUG Compare => Compare_26

  <bb 11> :
  # Compare_18 = PHI <Compare_27(8), Compare_19(9), Compare_26(10)>
  # DEBUG Compare => Compare_18
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NumberPos_28 = NumberPos_17 + 4294967295;
  # DEBUG NumberPos => NumberPos_28

  <bb 12> :
  # NumberPos_17 = PHI <NumberPos_25(6), NumberPos_28(11)>
  # Compare_19 = PHI <Compare_24(6), Compare_18(11)>
  # DEBUG Compare => Compare_19
  # DEBUG NumberPos => NumberPos_17
  # DEBUG BEGIN_STMT
  if (NumberPos_17 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  if (Compare_19 == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # Compare_20 = PHI <Compare_30(3), Compare_29(5), Compare_19(12), Compare_19(13)>
  # DEBUG Compare => Compare_20
  # DEBUG BEGIN_STMT
  _31 = Compare_20;
  return _31;

}


Crypto_LNSubtraction (Crypto_LNWordType * Result, const Crypto_LNWordType * Minuend, const Crypto_LNWordType * Subtrahend)
{
  Crypto_LNWordType Borrow;
  Crypto_LNWordType LoopCount;
  Crypto_LNDoubleWordType TempDifference;
  long unsigned int _1;
  const Crypto_LNWordType * _2;
  long unsigned int _3;
  long long unsigned int _4;
  long unsigned int _5;
  const Crypto_LNWordType * _6;
  long unsigned int _7;
  long long unsigned int _8;
  long long unsigned int _9;
  long long unsigned int _10;
  long long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  Crypto_LNWordType * _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  const Crypto_LNWordType * _18;
  long unsigned int _19;
  long long unsigned int _20;
  long long unsigned int _21;
  long long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  Crypto_LNWordType * _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Borrow_35 = 0;
  # DEBUG Borrow => Borrow_35
  # DEBUG BEGIN_STMT
  LoopCount_36 = 1;
  # DEBUG LoopCount => LoopCount_36
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = LoopCount_29 * 4;
  _2 = Minuend_39(D) + _1;
  _3 = *_2;
  _4 = (long long unsigned int) _3;
  _5 = LoopCount_29 * 4;
  _6 = Subtrahend_38(D) + _5;
  _7 = *_6;
  _8 = (long long unsigned int) _7;
  _9 = _4 - _8;
  _10 = (long long unsigned int) Borrow_31;
  TempDifference_47 = _9 - _10;
  # DEBUG TempDifference => TempDifference_47
  # DEBUG BEGIN_STMT
  _11 = TempDifference_47 >> 32;
  _12 = (long unsigned int) _11;
  Borrow_48 = _12 & 1;
  # DEBUG Borrow => Borrow_48
  # DEBUG BEGIN_STMT
  _13 = LoopCount_29 * 4;
  _14 = Result_40(D) + _13;
  _15 = (long unsigned int) TempDifference_47;
  *_14 = _15;
  # DEBUG BEGIN_STMT
  LoopCount_50 = LoopCount_29 + 1;
  # DEBUG LoopCount => LoopCount_50

  <bb 4> :
  # LoopCount_29 = PHI <LoopCount_36(2), LoopCount_50(3)>
  # Borrow_31 = PHI <Borrow_35(2), Borrow_48(3)>
  # DEBUG Borrow => Borrow_31
  # DEBUG LoopCount => LoopCount_29
  # DEBUG BEGIN_STMT
  _16 = *Subtrahend_38(D);
  if (LoopCount_29 <= _16)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _17 = LoopCount_30 * 4;
  _18 = Minuend_39(D) + _17;
  _19 = *_18;
  _20 = (long long unsigned int) _19;
  _21 = (long long unsigned int) Borrow_32;
  TempDifference_43 = _20 - _21;
  # DEBUG TempDifference => TempDifference_43
  # DEBUG BEGIN_STMT
  _22 = TempDifference_43 >> 32;
  _23 = (long unsigned int) _22;
  Borrow_44 = _23 & 1;
  # DEBUG Borrow => Borrow_44
  # DEBUG BEGIN_STMT
  _24 = LoopCount_30 * 4;
  _25 = Result_40(D) + _24;
  _26 = (long unsigned int) TempDifference_43;
  *_25 = _26;
  # DEBUG BEGIN_STMT
  LoopCount_46 = LoopCount_30 + 1;
  # DEBUG LoopCount => LoopCount_46

  <bb 6> :
  # LoopCount_30 = PHI <LoopCount_29(4), LoopCount_46(5)>
  # Borrow_32 = PHI <Borrow_31(4), Borrow_44(5)>
  # DEBUG Borrow => Borrow_32
  # DEBUG LoopCount => LoopCount_30
  # DEBUG BEGIN_STMT
  _27 = *Minuend_39(D);
  if (LoopCount_30 <= _27)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _28 = LoopCount_30 + 4294967295;
  *Result_40(D) = _28;
  # DEBUG BEGIN_STMT
  Crypto_LNNormalizeNumber (Result_40(D));
  return;

}


Crypto_LNMontgomeryReduction (Crypto_LNWordType * Remainder, const Crypto_LNWordType * Number, const Crypto_LNWordType * Modulo, Crypto_LNWordType Rho)
{
  Crypto_LNWordType Temp;
  Crypto_LNDoubleWordType Temp;
  Crypto_LNWordType Pa;
  Crypto_LNWordType * DestPtr;
  Crypto_LNWordType * CPtr;
  Crypto_LNWordType Carry;
  Crypto_LNWordType OldUsed;
  Crypto_LNWordType y;
  Crypto_LNWordType x;
  Crypto_LNWordType Mu;
  long unsigned int _1;
  const Crypto_LNWordType * _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long long unsigned int _7;
  long long unsigned int _8;
  long long unsigned int _9;
  long long unsigned int _10;
  sizetype _11;
  sizetype _12;
  const Crypto_LNWordType * _13;
  long unsigned int _14;
  long long unsigned int _15;
  long long unsigned int _16;
  long unsigned int _17;
  long long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  _Bool _21;
  long unsigned int _22;
  Crypto_LNWordType * _23;
  long unsigned int _24;
  Crypto_LNWordType * _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  Crypto_LNWordType * _29;
  long unsigned int _30;
  unsigned char _31;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Pa_50 = *Modulo_49(D);
  # DEBUG Pa => Pa_50
  # DEBUG BEGIN_STMT
  TS_MemBZero32 (&Crypto_MontgomeryReductionC, 36);
  # DEBUG BEGIN_STMT
  OldUsed_53 = *Number_52(D);
  # DEBUG OldUsed => OldUsed_53
  # DEBUG BEGIN_STMT
  x_54 = 1;
  # DEBUG x => x_54
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = x_32 * 4;
  _2 = Number_52(D) + _1;
  _3 = x_32 + 4294967295;
  _4 = *_2;
  Crypto_MontgomeryReductionC[_3] = _4;
  # DEBUG BEGIN_STMT
  x_84 = x_32 + 1;
  # DEBUG x => x_84

  <bb 4> :
  # x_32 = PHI <x_54(2), x_84(3)>
  # DEBUG x => x_32
  # DEBUG BEGIN_STMT
  if (x_32 <= OldUsed_53)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  x_55 = 0;
  # DEBUG x => x_55
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Carry_68 = 0;
  # DEBUG Carry => Carry_68
  # DEBUG BEGIN_STMT
  _5 = Crypto_MontgomeryReductionC[x_33];
  Mu_70 = Rho_69(D) * _5;
  # DEBUG Mu => Mu_70
  # DEBUG BEGIN_STMT
  CPtr_71 = &Crypto_MontgomeryReductionC[x_33];
  # DEBUG CPtr => CPtr_71
  # DEBUG BEGIN_STMT
  y_72 = 0;
  # DEBUG y => y_72
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _6 = *CPtr_39;
  _7 = (long long unsigned int) _6;
  _8 = (long long unsigned int) Carry_37;
  _9 = _7 + _8;
  _10 = (long long unsigned int) Mu_70;
  _11 = y_36 + 1;
  _12 = _11 * 4;
  _13 = Modulo_49(D) + _12;
  _14 = *_13;
  _15 = (long long unsigned int) _14;
  _16 = _10 * _15;
  Temp_78 = _9 + _16;
  # DEBUG Temp => Temp_78
  # DEBUG BEGIN_STMT
  _17 = (long unsigned int) Temp_78;
  *CPtr_39 = _17;
  # DEBUG BEGIN_STMT
  _18 = Temp_78 >> 32;
  Carry_80 = (Crypto_LNWordType) _18;
  # DEBUG Carry => Carry_80
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CPtr_81 = CPtr_39 + 4;
  # DEBUG CPtr => CPtr_81
  # DEBUG BEGIN_STMT
  y_82 = y_36 + 1;
  # DEBUG y => y_82

  <bb 8> :
  # y_36 = PHI <y_72(6), y_82(7)>
  # Carry_37 = PHI <Carry_68(6), Carry_80(7)>
  # CPtr_39 = PHI <CPtr_71(6), CPtr_81(7)>
  # DEBUG CPtr => CPtr_39
  # DEBUG Carry => Carry_37
  # DEBUG y => y_36
  # DEBUG BEGIN_STMT
  if (y_36 < Pa_50)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _19 = *CPtr_40;
  _20 = Carry_38 + _19;
  *CPtr_40 = _20;
  # DEBUG BEGIN_STMT
  Temp_75 = *CPtr_40;
  # DEBUG Temp => Temp_75
  # DEBUG BEGIN_STMT
  _21 = Temp_75 < Carry_38;
  Carry_76 = (Crypto_LNWordType) _21;
  # DEBUG Carry => Carry_76
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CPtr_77 = CPtr_40 + 4;
  # DEBUG CPtr => CPtr_77

  <bb 10> :
  # Carry_38 = PHI <Carry_37(8), Carry_76(9)>
  # CPtr_40 = PHI <CPtr_39(8), CPtr_77(9)>
  # DEBUG CPtr => CPtr_40
  # DEBUG Carry => Carry_38
  # DEBUG BEGIN_STMT
  if (Carry_38 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  x_73 = x_33 + 1;
  # DEBUG x => x_73

  <bb 12> :
  # x_33 = PHI <x_55(5), x_73(11)>
  # DEBUG x => x_33
  # DEBUG BEGIN_STMT
  if (x_33 < Pa_50)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  CPtr_56 = &Crypto_MontgomeryReductionC[Pa_50];
  # DEBUG CPtr => CPtr_56
  # DEBUG BEGIN_STMT
  DestPtr_58 = Remainder_57(D) + 4;
  # DEBUG DestPtr => DestPtr_58
  # DEBUG BEGIN_STMT
  x_59 = 0;
  # DEBUG x => x_59
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _22 = x_34 * 4;
  _23 = CPtr_56 + _22;
  _24 = x_34 * 4;
  _25 = DestPtr_58 + _24;
  _26 = *_23;
  *_25 = _26;
  # DEBUG BEGIN_STMT
  x_67 = x_34 + 1;
  # DEBUG x => x_67

  <bb 15> :
  # x_34 = PHI <x_59(13), x_67(14)>
  # DEBUG x => x_34
  # DEBUG BEGIN_STMT
  _27 = Pa_50 + 1;
  if (x_34 < _27)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _28 = x_35 * 4;
  _29 = DestPtr_58 + _28;
  *_29 = 0;
  # DEBUG BEGIN_STMT
  x_65 = x_35 + 1;
  # DEBUG x => x_65

  <bb 17> :
  # x_35 = PHI <x_34(15), x_65(16)>
  # DEBUG x => x_35
  # DEBUG BEGIN_STMT
  if (x_35 < OldUsed_53)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _30 = Pa_50 + 1;
  *Remainder_57(D) = _30;
  # DEBUG BEGIN_STMT
  Crypto_LNNormalizeNumber (Remainder_57(D));
  # DEBUG BEGIN_STMT
  _31 = Crypto_LNCompareNumbers (Remainder_57(D), Modulo_49(D));
  if (_31 != 4)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  Crypto_LNSubtraction (Remainder_57(D), Remainder_57(D), Modulo_49(D));

  <bb 20> :
  return;

}


Crypto_LNMontgomeryNormalization (Crypto_LNWordType * Result, const Crypto_LNWordType * Modulo)
{
  Crypto_LNWordType WordOffset;
  uint8 Carry;
  uint32 Exponent;
  Crypto_LNWordType x;
  uint32 Bits;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  Crypto_LNWordType * _8;
  long unsigned int _9;
  long unsigned int _10;
  _Bool _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  Crypto_LNWordType * _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  Crypto_LNWordType * _20;
  unsigned char _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Crypto_LNBitLengthOfNumber (Modulo_31(D));
  Bits_33 = _1 & 31;
  # DEBUG Bits => Bits_33
  # DEBUG BEGIN_STMT
  if (Bits_33 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Bits_34 = 32;
  # DEBUG Bits => Bits_34

  <bb 4> :
  # Bits_22 = PHI <Bits_33(2), Bits_34(3)>
  # DEBUG Bits => Bits_22
  # DEBUG BEGIN_STMT
  _2 = *Modulo_31(D);
  if (_2 > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _3 = *Modulo_31(D);
  _4 = _3 + 4294967295;
  _5 = _4 * 32;
  _6 = Bits_22 + _5;
  Exponent_39 = _6 + 4294967295;
  # DEBUG Exponent => Exponent_39
  # DEBUG BEGIN_STMT
  x_40 = 1;
  # DEBUG x => x_40
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _7 = x_24 * 4;
  _8 = Result_35(D) + _7;
  *_8 = 0;
  # DEBUG BEGIN_STMT
  x_46 = x_24 + 1;
  # DEBUG x => x_46

  <bb 7> :
  # x_24 = PHI <x_40(5), x_46(6)>
  # DEBUG x => x_24
  # DEBUG BEGIN_STMT
  _9 = *Result_35(D);
  if (x_24 <= _9)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = Exponent_39 & 31;
  _11 = _10 != 0;
  Carry_41 = (uint8) _11;
  # DEBUG Carry => Carry_41
  # DEBUG BEGIN_STMT
  WordOffset_42 = Exponent_39 / 32;
  # DEBUG WordOffset => WordOffset_42
  # DEBUG BEGIN_STMT
  _12 = Exponent_39 & 31;
  _13 = (long unsigned int) Carry_41;
  _14 = WordOffset_42 + _13;
  _15 = _14 * 4;
  _16 = Result_35(D) + _15;
  _17 = 1 << _12;
  *_16 = _17;
  # DEBUG BEGIN_STMT
  _18 = (long unsigned int) Carry_41;
  _19 = WordOffset_42 + _18;
  *Result_35(D) = _19;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  *Result_35(D) = 1;
  # DEBUG BEGIN_STMT
  _20 = Result_35(D) + 4;
  *_20 = 1;
  # DEBUG BEGIN_STMT
  Bits_38 = 1;
  # DEBUG Bits => Bits_38

  <bb 10> :
  # Bits_23 = PHI <Bits_22(8), Bits_38(9)>
  # DEBUG Bits => Bits_23
  # DEBUG BEGIN_STMT
  x_47 = Bits_23 + 4294967295;
  # DEBUG x => x_47
  goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Crypto_LNMultByTwo (Result_35(D), Result_35(D));
  # DEBUG BEGIN_STMT
  _21 = Crypto_LNCompareNumbers (Result_35(D), Modulo_31(D));
  if (_21 != 4)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Crypto_LNSubtraction (Result_35(D), Result_35(D), Modulo_31(D));

  <bb 13> :
  # DEBUG BEGIN_STMT
  x_51 = x_25 + 1;
  # DEBUG x => x_51

  <bb 14> :
  # x_25 = PHI <x_47(10), x_51(13)>
  # DEBUG x => x_25
  # DEBUG BEGIN_STMT
  if (x_25 <= 31)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  return;

}


Crypto_LNMontgomerySetup (const Crypto_LNWordType * Modulo, Crypto_LNWordType * Rho)
{
  Crypto_LNWordType B;
  Crypto_LNWordType X;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  B_13 = MEM[(const Crypto_LNWordType *)Modulo_12(D) + 4B];
  # DEBUG B => B_13
  # DEBUG BEGIN_STMT
  _1 = B_13 + 2;
  _2 = _1 << 1;
  _3 = _2 & 8;
  X_14 = B_13 + _3;
  # DEBUG X => X_14
  # DEBUG BEGIN_STMT
  _4 = B_13 * X_14;
  _5 = 2 - _4;
  X_15 = X_14 * _5;
  # DEBUG X => X_15
  # DEBUG BEGIN_STMT
  _6 = B_13 * X_15;
  _7 = 2 - _6;
  X_16 = X_15 * _7;
  # DEBUG X => X_16
  # DEBUG BEGIN_STMT
  _8 = B_13 * X_16;
  _9 = 2 - _8;
  X_17 = X_16 * _9;
  # DEBUG X => X_17
  # DEBUG BEGIN_STMT
  _10 = -X_17;
  *Rho_18(D) = _10;
  return;

}


Crypto_LNMultByTwo (Crypto_LNWordType * Result, Crypto_LNWordType * Number)
{
  Crypto_LNWordType * DestPtr;
  Crypto_LNWordType * SrcPtr;
  Crypto_LNWordType NextCarry;
  Crypto_LNWordType Carry;
  Crypto_LNWordType OldUsed;
  Crypto_LNWordType x;
  long unsigned int _1;
  long unsigned int _2;
  Crypto_LNWordType * _3;
  long unsigned int _4;
  long unsigned int _5;
  Crypto_LNWordType * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  Crypto_LNWordType * _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  Crypto_LNWordType * _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  sizetype _18;
  sizetype _19;
  long unsigned int _20;
  Crypto_LNWordType * _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OldUsed_30 = *Result_29(D);
  # DEBUG OldUsed => OldUsed_30
  # DEBUG BEGIN_STMT
  _1 = *Number_31(D);
  *Result_29(D) = _1;
  # DEBUG BEGIN_STMT
  SrcPtr_33 = Number_31(D) + 4;
  # DEBUG SrcPtr => SrcPtr_33
  # DEBUG BEGIN_STMT
  DestPtr_34 = Result_29(D) + 4;
  # DEBUG DestPtr => DestPtr_34
  # DEBUG BEGIN_STMT
  Carry_35 = 0;
  # DEBUG Carry => Carry_35
  # DEBUG BEGIN_STMT
  x_36 = 0;
  # DEBUG x => x_36
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = x_22 * 4;
  _3 = SrcPtr_33 + _2;
  _4 = *_3;
  NextCarry_43 = _4 >> 31;
  # DEBUG NextCarry => NextCarry_43
  # DEBUG BEGIN_STMT
  _5 = x_22 * 4;
  _6 = SrcPtr_33 + _5;
  _7 = *_6;
  _8 = _7 << 1;
  _9 = x_22 * 4;
  _10 = DestPtr_34 + _9;
  _11 = Carry_24 | _8;
  *_10 = _11;
  # DEBUG BEGIN_STMT
  Carry_45 = NextCarry_43;
  # DEBUG Carry => Carry_45
  # DEBUG BEGIN_STMT
  x_46 = x_22 + 1;
  # DEBUG x => x_46

  <bb 4> :
  # x_22 = PHI <x_36(2), x_46(3)>
  # Carry_24 = PHI <Carry_35(2), Carry_45(3)>
  # DEBUG Carry => Carry_24
  # DEBUG x => x_22
  # DEBUG BEGIN_STMT
  _12 = *Number_31(D);
  if (x_22 < _12)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (Carry_24 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _13 = x_22 * 4;
  _14 = DestPtr_34 + _13;
  *_14 = 1;
  # DEBUG BEGIN_STMT
  _15 = *Result_29(D);
  _16 = _15 + 1;
  *Result_29(D) = _16;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _17 = *Result_29(D);
  _18 = _17 + 1;
  _19 = _18 * 4;
  DestPtr_39 = Result_29(D) + _19;
  # DEBUG DestPtr => DestPtr_39
  # DEBUG BEGIN_STMT
  x_40 = *Result_29(D);
  # DEBUG x => x_40
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _20 = x_23 * 4;
  _21 = DestPtr_39 + _20;
  *_21 = 0;
  # DEBUG BEGIN_STMT
  x_42 = x_23 + 1;
  # DEBUG x => x_42

  <bb 9> :
  # x_23 = PHI <x_40(7), x_42(8)>
  # DEBUG x => x_23
  # DEBUG BEGIN_STMT
  if (x_23 < OldUsed_30)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}


Crypto_LNMultiplyNumbers (Crypto_LNWordType * Result, const Crypto_LNWordType * Multiplicand, const Crypto_LNWordType * Multiplicator, struct Crypto_LNCtxType * CtxPtr)
{
  Crypto_LNDoubleWordType Temp;
  Crypto_LNWordType C2;
  Crypto_LNWordType C1;
  Crypto_LNWordType C0;
  Crypto_LNWordType ProdLen;
  Crypto_LNWordType MultiplicatorLength;
  Crypto_LNWordType MultiplicandLength;
  Crypto_LNWordType Ty;
  Crypto_LNWordType Tx;
  Crypto_LNWordType NumMultiplications;
  Crypto_LNWordType j;
  Crypto_LNWordType i;
  Crypto_LNWordType[47] * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long long unsigned int _5;
  long unsigned int _6;
  sizetype _7;
  sizetype _8;
  const Crypto_LNWordType * _9;
  long unsigned int _10;
  long long unsigned int _11;
  long unsigned int _12;
  sizetype _13;
  sizetype _14;
  const Crypto_LNWordType * _15;
  long unsigned int _16;
  long long unsigned int _17;
  long long unsigned int _18;
  long long unsigned int _19;
  long long unsigned int _20;
  long long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  Crypto_LNWordType[47] * _25;
  Crypto_LNWordType[47] * _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  MultiplicandLength_40 = *Multiplicand_39(D);
  # DEBUG MultiplicandLength => MultiplicandLength_40
  # DEBUG BEGIN_STMT
  MultiplicatorLength_42 = *Multiplicator_41(D);
  # DEBUG MultiplicatorLength => MultiplicatorLength_42
  # DEBUG BEGIN_STMT
  ProdLen_43 = MultiplicandLength_40 + MultiplicatorLength_42;
  # DEBUG ProdLen => ProdLen_43
  # DEBUG BEGIN_STMT
  C0_44 = 0;
  # DEBUG C0 => C0_44
  # DEBUG BEGIN_STMT
  C1_45 = 0;
  # DEBUG C1 => C1_45
  # DEBUG BEGIN_STMT
  C2_46 = 0;
  # DEBUG C2 => C2_46
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = &CtxPtr_47(D)->LocalResultMultiply;
  TS_MemBZero32 (_1, 47);
  # DEBUG BEGIN_STMT
  i_49 = 0;
  # DEBUG i => i_49
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = MultiplicatorLength_42 + 4294967295;
  Ty_54 = MIN_EXPR <i_30, _2>;
  # DEBUG Ty => Ty_54
  # DEBUG BEGIN_STMT
  Tx_55 = i_30 - Ty_54;
  # DEBUG Tx => Tx_55
  # DEBUG BEGIN_STMT
  _3 = Ty_54 + 1;
  _4 = MultiplicandLength_40 - Tx_55;
  NumMultiplications_56 = MIN_EXPR <_3, _4>;
  # DEBUG NumMultiplications => NumMultiplications_56
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C0_57 = C1_34;
  # DEBUG C0 => C0_57
  # DEBUG BEGIN_STMT
  C1_58 = C2_36;
  # DEBUG C1 => C1_58
  # DEBUG BEGIN_STMT
  C2_59 = 0;
  # DEBUG C2 => C2_59
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  j_60 = 0;
  # DEBUG j => j_60
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (long long unsigned int) C0_32;
  _6 = Tx_55 + j_31;
  _7 = _6 + 1;
  _8 = _7 * 4;
  _9 = Multiplicand_39(D) + _8;
  _10 = *_9;
  _11 = (long long unsigned int) _10;
  _12 = Ty_54 - j_31;
  _13 = _12 + 1;
  _14 = _13 * 4;
  _15 = Multiplicator_41(D) + _14;
  _16 = *_15;
  _17 = (long long unsigned int) _16;
  _18 = _11 * _17;
  Temp_63 = _5 + _18;
  # DEBUG Temp => Temp_63
  # DEBUG BEGIN_STMT
  C0_64 = (Crypto_LNWordType) Temp_63;
  # DEBUG C0 => C0_64
  # DEBUG BEGIN_STMT
  _19 = (long long unsigned int) C1_33;
  _20 = Temp_63 >> 32;
  Temp_65 = _19 + _20;
  # DEBUG Temp => Temp_65
  # DEBUG BEGIN_STMT
  C1_66 = (Crypto_LNWordType) Temp_65;
  # DEBUG C1 => C1_66
  # DEBUG BEGIN_STMT
  _21 = Temp_65 >> 32;
  _22 = (long unsigned int) _21;
  C2_67 = C2_35 + _22;
  # DEBUG C2 => C2_67
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  j_68 = j_31 + 1;
  # DEBUG j => j_68

  <bb 5> :
  # j_31 = PHI <j_60(3), j_68(4)>
  # C0_32 = PHI <C0_57(3), C0_64(4)>
  # C1_33 = PHI <C1_58(3), C1_66(4)>
  # C2_35 = PHI <C2_59(3), C2_67(4)>
  # DEBUG C2 => C2_35
  # DEBUG C1 => C1_33
  # DEBUG C0 => C0_32
  # DEBUG j => j_31
  # DEBUG BEGIN_STMT
  if (j_31 < NumMultiplications_56)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _23 = i_30 + 1;
  CtxPtr_47(D)->LocalResultMultiply[_23] = C0_32;
  # DEBUG BEGIN_STMT
  i_62 = i_30 + 1;
  # DEBUG i => i_62

  <bb 7> :
  # i_30 = PHI <i_49(2), i_62(6)>
  # C1_34 = PHI <C1_45(2), C1_33(6)>
  # C2_36 = PHI <C2_46(2), C2_35(6)>
  # DEBUG C2 => C2_36
  # DEBUG C1 => C1_34
  # DEBUG i => i_30
  # DEBUG BEGIN_STMT
  if (i_30 < ProdLen_43)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _24 = MultiplicandLength_40 + MultiplicatorLength_42;
  CtxPtr_47(D)->LocalResultMultiply[0] = _24;
  # DEBUG BEGIN_STMT
  _25 = &CtxPtr_47(D)->LocalResultMultiply;
  Crypto_LNNormalizeNumber (_25);
  # DEBUG BEGIN_STMT
  _26 = &CtxPtr_47(D)->LocalResultMultiply;
  _27 = CtxPtr_47(D)->LocalResultMultiply[0];
  _28 = _27 + 1;
  _29 = _28 * 4;
  TS_MemCpy32 (Result_52(D), _26, _29);
  return;

}


Crypto_LNNormalizeNumber (Crypto_LNWordType * Number)
{
  Crypto_LNWordType i;
  long unsigned int _1;
  Crypto_LNWordType * _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i_7 = *Number_6(D);
  # DEBUG i => i_7
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  i_8 = i_4 + 4294967295;
  # DEBUG i => i_8

  <bb 4> :
  # i_4 = PHI <i_7(2), i_8(3)>
  # DEBUG i => i_4
  # DEBUG BEGIN_STMT
  _1 = i_4 * 4;
  _2 = Number_6(D) + _1;
  _3 = *_2;
  if (_3 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (i_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  *Number_6(D) = i_4;
  return;

}


Crypto_LNBitLengthOfNumber (const Crypto_LNWordType * Number)
{
  Crypto_LNWordType Length;
  Crypto_LNWordType TempWord;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  const Crypto_LNWordType * _6;
  uint32 _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = *Number_11(D);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Length_16 = 0;
  # DEBUG Length => Length_16
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = *Number_11(D);
  _3 = _2 + 4294967295;
  Length_12 = _3 * 32;
  # DEBUG Length => Length_12
  # DEBUG BEGIN_STMT
  _4 = *Number_11(D);
  _5 = _4 * 4;
  _6 = Number_11(D) + _5;
  TempWord_13 = *_6;
  # DEBUG TempWord => TempWord_13
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Length_14 = Length_8 + 1;
  # DEBUG Length => Length_14
  # DEBUG BEGIN_STMT
  TempWord_15 = TempWord_7 >> 1;
  # DEBUG TempWord => TempWord_15

  <bb 6> :
  # TempWord_7 = PHI <TempWord_13(4), TempWord_15(5)>
  # Length_8 = PHI <Length_12(4), Length_14(5)>
  # DEBUG Length => Length_8
  # DEBUG TempWord => TempWord_7
  # DEBUG BEGIN_STMT
  if (TempWord_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # Length_9 = PHI <Length_16(3), Length_8(6)>
  # DEBUG Length => Length_9
  # DEBUG BEGIN_STMT
  _17 = Length_9;
  return _17;

}


Crypto_LNIsValid (const Crypto_LNWordType * LongNumber, uint32 PermittedMaxLength)
{
  boolean Status;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  const Crypto_LNWordType * _5;
  long unsigned int _6;
  boolean _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Status_8 = 0;
  # DEBUG Status => Status_8
  # DEBUG BEGIN_STMT
  _1 = *LongNumber_10(D);
  if (PermittedMaxLength_11(D) > _1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = *LongNumber_10(D);
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = *LongNumber_10(D);
  _4 = _3 * 4;
  _5 = LongNumber_10(D) + _4;
  _6 = *_5;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Status_12 = 1;
  # DEBUG Status => Status_12

  <bb 6> :
  # Status_7 = PHI <Status_8(2), Status_8(3), Status_8(4), Status_12(5)>
  # DEBUG Status => Status_7
  # DEBUG BEGIN_STMT
  _13 = Status_7;
  return _13;

}


Crypto_CommonXOR (void * Destination, const void * Source, uint32 ByteLength)
{
  uint32_least Len;
  uint8 * _1;
  unsigned char _2;
  const uint8 * _3;
  unsigned char _4;
  uint8 * _5;
  unsigned char _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Len_9 = 0;
  # DEBUG Len => Len_9
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Destination_12(D) + Len_7;
  _2 = *_1;
  _3 = Source_13(D) + Len_7;
  _4 = *_3;
  _5 = Destination_12(D) + Len_7;
  _6 = _2 ^ _4;
  *_5 = _6;
  # DEBUG BEGIN_STMT
  Len_15 = Len_7 + 1;
  # DEBUG Len => Len_15

  <bb 4> :
  # Len_7 = PHI <Len_9(2), Len_15(3)>
  # DEBUG Len => Len_7
  # DEBUG BEGIN_STMT
  if (Len_7 < ByteLength_11(D))
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Crypto_LNModuloBarrett (Crypto_LNWordType * Number, const Crypto_LNWordType * Modulus, const Crypto_LNWordType * Barrett, struct Crypto_LNCtxType * CtxPtr)
{
  Crypto_LNWordType * TempNumber;
  Crypto_LNWordType LoopCount;
  long unsigned int _1;
  Crypto_LNWordType * _2;
  sizetype _3;
  sizetype _4;
  Crypto_LNWordType * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  sizetype _11;
  sizetype _12;
  Crypto_LNWordType * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  sizetype _18;
  sizetype _19;
  Crypto_LNWordType * _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  sizetype _25;
  sizetype _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  Crypto_LNWordType * _31;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  Crypto_LNWordType * _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  long unsigned int _49;
  unsigned char _50;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  LoopCount_63 = *Number_62(D);
  # DEBUG LoopCount => LoopCount_63
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = LoopCount_51 * 4;
  _2 = Number_62(D) + _1;
  _3 = LoopCount_51 + 3;
  _4 = _3 * 4;
  _5 = Number_62(D) + _4;
  _6 = *_2;
  *_5 = _6;
  # DEBUG BEGIN_STMT
  LoopCount_86 = LoopCount_51 + 4294967295;
  # DEBUG LoopCount => LoopCount_86

  <bb 4> :
  # LoopCount_51 = PHI <LoopCount_63(2), LoopCount_86(3)>
  # DEBUG LoopCount => LoopCount_51
  # DEBUG BEGIN_STMT
  _7 = *Modulus_64(D);
  if (LoopCount_51 >= _7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = *Modulus_64(D);
  _9 = *Number_62(D);
  if (_8 > _9)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = *Modulus_64(D);
  _11 = _10 + 2;
  _12 = _11 * 4;
  _13 = Number_62(D) + _12;
  *_13 = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _14 = *Number_62(D);
  _15 = *Modulus_64(D);
  _16 = _14 - _15;
  _17 = *Modulus_64(D);
  _18 = _17 + 2;
  _19 = _18 * 4;
  _20 = Number_62(D) + _19;
  _21 = _16 + 1;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  _22 = *Modulus_64(D);
  _23 = _22 + 1;
  *Number_62(D) = _23;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _24 = *Modulus_64(D);
  _25 = _24 + 2;
  _26 = _25 * 4;
  TempNumber_68 = Number_62(D) + _26;
  # DEBUG TempNumber => TempNumber_68
  # DEBUG BEGIN_STMT
  Crypto_LNMultiplyNumbers (TempNumber_68, TempNumber_68, Barrett_69(D), CtxPtr_70(D));
  # DEBUG BEGIN_STMT
  _27 = *Modulus_64(D);
  _28 = *TempNumber_68;
  if (_27 >= _28)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  *TempNumber_68 = 0;
  goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _29 = *Modulus_64(D);
  LoopCount_72 = _29 + 2;
  # DEBUG LoopCount => LoopCount_72
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _30 = LoopCount_52 * 4;
  _31 = TempNumber_68 + _30;
  _32 = *Modulus_64(D);
  _33 = LoopCount_52 - _32;
  _34 = _33 + 4294967295;
  _35 = _34 * 4;
  _36 = TempNumber_68 + _35;
  _37 = *_31;
  *_36 = _37;
  # DEBUG BEGIN_STMT
  LoopCount_75 = LoopCount_52 + 1;
  # DEBUG LoopCount => LoopCount_75

  <bb 12> :
  # LoopCount_52 = PHI <LoopCount_72(10), LoopCount_75(11)>
  # DEBUG LoopCount => LoopCount_52
  # DEBUG BEGIN_STMT
  _38 = *TempNumber_68;
  if (LoopCount_52 <= _38)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _39 = *TempNumber_68;
  _40 = *Modulus_64(D);
  _41 = _39 - _40;
  _42 = _41 + 4294967295;
  *TempNumber_68 = _42;

  <bb 14> :
  # DEBUG BEGIN_STMT
  Crypto_LNMultiplyNumbers (TempNumber_68, TempNumber_68, Modulus_64(D), CtxPtr_70(D));
  # DEBUG BEGIN_STMT
  _43 = *Modulus_64(D);
  _44 = _43 + 1;
  _45 = *TempNumber_68;
  if (_44 < _45)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _46 = *Modulus_64(D);
  _47 = _46 + 1;
  *TempNumber_68 = _47;

  <bb 16> :
  # DEBUG BEGIN_STMT
  _48 = *Modulus_64(D);
  _49 = _48 + 1;
  Crypto_LNBarretSubtractNumbers (Number_62(D), Number_62(D), TempNumber_68, _49);
  # DEBUG BEGIN_STMT
  LoopCount_80 = 0;
  # DEBUG LoopCount => LoopCount_80
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Crypto_LNBarretSubtractNumbers (Number_62(D), Number_62(D), Modulus_64(D), 4294967295);
  # DEBUG BEGIN_STMT
  LoopCount_83 = LoopCount_53 + 1;
  # DEBUG LoopCount => LoopCount_83

  <bb 18> :
  # LoopCount_53 = PHI <LoopCount_80(16), LoopCount_83(17)>
  # DEBUG LoopCount => LoopCount_53
  # DEBUG BEGIN_STMT
  _50 = Crypto_LNCompareNumbers (Number_62(D), Modulus_64(D));
  if (_50 != 4)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  if (LoopCount_53 <= 3)
    goto <bb 17>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  if (LoopCount_53 == 4)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  *Number_62(D) = 0;

  <bb 22> :
  return;

}


Crypto_CheckSkipMain (Std_ReturnType * Result, boolean * Busy, const uint32 ObjId)
{
  boolean SkipMain;
  unsigned char _1;
  boolean _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SkipMain_3 = 0;
  # DEBUG SkipMain => SkipMain_3
  # DEBUG BEGIN_STMT
  if (Result_4(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (Busy_5(D) == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _1 = Crypto_DriverObjects[ObjId_7(D)].SkipPeriodicMainFunction;
  if (_1 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SkipMain_8 = 1;
  # DEBUG SkipMain => SkipMain_8

  <bb 6> :
  # SkipMain_2 = PHI <SkipMain_3(2), SkipMain_3(3), SkipMain_3(4), SkipMain_8(5)>
  # DEBUG SkipMain => SkipMain_2
  # DEBUG BEGIN_STMT
  _9 = SkipMain_2;
  return _9;

}


Crypto_StateMachineIdle ()
{
  Std_ReturnType _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = 0;
  return _1;

}


Crypto_MemCmp_Sec (const uint8 * const A, const uint8 * const B, uint32 Length)
{
  uint32 Counter;
  uint8 Result;
  Std_ReturnType RetVal;
  const uint8 * _1;
  unsigned char _2;
  const uint8 * _3;
  unsigned char _4;
  unsigned char _5;
  Std_ReturnType _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result_9 = 0;
  # DEBUG Result => Result_9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Counter_10 = 0;
  # DEBUG Counter => Counter_10
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = A_16(D) + Counter_8;
  _2 = *_1;
  _3 = B_17(D) + Counter_8;
  _4 = *_3;
  _5 = _2 ^ _4;
  Result_18 = Result_7 | _5;
  # DEBUG Result => Result_18
  # DEBUG BEGIN_STMT
  Counter_19 = Counter_8 + 1;
  # DEBUG Counter => Counter_19

  <bb 4> :
  # Result_7 = PHI <Result_9(2), Result_18(3)>
  # Counter_8 = PHI <Counter_10(2), Counter_19(3)>
  # DEBUG Counter => Counter_8
  # DEBUG Result => Result_7
  # DEBUG BEGIN_STMT
  if (Counter_8 < Length_11(D))
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (Result_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal_13 = 0;
  # DEBUG RetVal => RetVal_13
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal_12 = 1;
  # DEBUG RetVal => RetVal_12

  <bb 8> :
  # RetVal_6 = PHI <RetVal_13(6), RetVal_12(7)>
  # DEBUG RetVal => RetVal_6
  # DEBUG BEGIN_STMT
  _14 = RetVal_6;
  return _14;

}


Crypto_MemCmp (const uint8 * const A, const uint8 * const B, uint32 Length)
{
  Std_ReturnType _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _6 = TS_MemCmp32 (A_2(D), B_3(D), Length_4(D));
  return _6;

}


