Parsed function:OS_CatKEntry
Dump after hash based groups
Congruence classes: 1 (unique hash values: 1), with total: 1 items
Class size histogram [num of members]: number of classe number of classess
[1]: 1 classes


Dump after WPA based types groups
Congruence classes: 1 (unique hash values: 1), with total: 1 items
Class size histogram [num of members]: number of classe number of classess
[1]: 1 classes


Worklist has been filled with: 0
Address reference subdivision created: 0 new classes.
Dump after callgraph-based congruence reduction
Congruence classes: 1 (unique hash values: 1), with total: 1 items
Class size histogram [num of members]: number of classe number of classess
[1]: 1 classes


Init called for 0 items (0.00%).
Dump after full equality comparison of groups
Congruence classes: 1 (unique hash values: 1), with total: 1 items
Class size histogram [num of members]: number of classe number of classess
[1]: 1 classes


Worklist has been filled with: 0
Address reference subdivision created: 0 new classes.
Congruence classes: 1 (unique hash values: 1), with total: 1 items
Class size histogram [num of members]: number of classe number of classess
[1]: 1 classes



Item count: 1
Congruent classes before: 1, after: 1
Average class size before: 1.00, after: 1.00
Average non-singular class size: 0.00, count: 0
Equal symbols: 0
Fraction of visited symbols: 0.00%

__attribute__((target ("general-regs-only")))
OS_CatKEntry (os_isrid_t iid)
{
  os_uint8_t inKernel;
  void (*os_isrfunc_t) (void) f;
  const struct os_isr_t * isr;
  const struct os_isr_t * OS_isrTableBase.0_1;
  unsigned int _2;
  unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_isrTableBase.0_1 = OS_isrTableBase;
  _2 = (unsigned int) iid_5(D);
  _3 = _2 * 68;
  isr_6 = OS_isrTableBase.0_1 + _3;
  # DEBUG isr => isr_6
  # DEBUG BEGIN_STMT
  f_7 = isr_6->func;
  # DEBUG f => f_7
  # DEBUG BEGIN_STMT
  inKernel_8 = OS_kernelData.inKernel;
  # DEBUG inKernel => inKernel_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  f_7 ();
  # DEBUG BEGIN_STMT
  return inKernel_8;

}


