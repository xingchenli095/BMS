Crypto_AES_Helper_Encrypt_CallbackNotification (struct Crypto_JobType * Job, Std_ReturnType Result)
{
  void (*<T542>) (struct Crypto_JobType *, uint8) Crypto_ModeEncryptCallBack.0_1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_HelperEncryptFlgCallbackNotification ={v} 1;
  # DEBUG BEGIN_STMT
  Crypto_ModeEncryptCallBack.0_1 = Crypto_ModeEncryptCallBack;
  Crypto_ModeEncryptCallBack.0_1 (Job_4(D), Result_5(D));
  return;

}


Crypto_AESHelperEncryptSynchronousMainCall ()
{
  unsigned char Crypto_HelperEncryptFlgCallbackNotification.1_1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_HelperEncryptFlgCallbackNotification ={v} 0;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptMainFunction (&Crypto_HelperEncryptResult, &Crypto_HelperEncryptBusy);

  <bb 4> :
  # DEBUG BEGIN_STMT
  Crypto_HelperEncryptFlgCallbackNotification.1_1 ={v} Crypto_HelperEncryptFlgCallbackNotification;
  if (Crypto_HelperEncryptFlgCallbackNotification.1_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Crypto_AESCommonUnmapState (const uint32 * FirstCol, const uint32 * SecondCol, const uint32 * ThirdCol, const uint32 * FourthCol, struct Crypto_AES_ContextType * Context)
{
  long unsigned int _1;
  long unsigned int _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  uint8 * _6;
  uint8 * _7;
  unsigned char _8;
  long unsigned int _9;
  long unsigned int _10;
  uint8 * _11;
  uint8 * _12;
  unsigned char _13;
  long unsigned int _14;
  uint8 * _15;
  uint8 * _16;
  unsigned char _17;
  long unsigned int _18;
  long unsigned int _19;
  unsigned char _20;
  long unsigned int _21;
  long unsigned int _22;
  uint8 * _23;
  uint8 * _24;
  unsigned char _25;
  long unsigned int _26;
  long unsigned int _27;
  uint8 * _28;
  uint8 * _29;
  unsigned char _30;
  long unsigned int _31;
  uint8 * _32;
  uint8 * _33;
  unsigned char _34;
  long unsigned int _35;
  long unsigned int _36;
  unsigned char _37;
  long unsigned int _38;
  long unsigned int _39;
  uint8 * _40;
  uint8 * _41;
  unsigned char _42;
  long unsigned int _43;
  long unsigned int _44;
  uint8 * _45;
  uint8 * _46;
  unsigned char _47;
  long unsigned int _48;
  uint8 * _49;
  uint8 * _50;
  unsigned char _51;
  long unsigned int _52;
  long unsigned int _53;
  unsigned char _54;
  long unsigned int _55;
  long unsigned int _56;
  uint8 * _57;
  uint8 * _58;
  unsigned char _59;
  long unsigned int _60;
  long unsigned int _61;
  uint8 * _62;
  uint8 * _63;
  unsigned char _64;
  long unsigned int _65;
  uint8 * _66;
  uint8 * _67;
  unsigned char _68;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = *FirstCol_70(D);
  _2 = _1 >> 24;
  _3 = (unsigned char) _2;
  Context_71(D)->AesState[0] = _3;
  # DEBUG BEGIN_STMT
  _4 = *FirstCol_70(D);
  _5 = _4 >> 16;
  _6 = &Context_71(D)->AesState[0];
  _7 = _6 + 1;
  _8 = (unsigned char) _5;
  *_7 = _8;
  # DEBUG BEGIN_STMT
  _9 = *FirstCol_70(D);
  _10 = _9 >> 8;
  _11 = &Context_71(D)->AesState[0];
  _12 = _11 + 2;
  _13 = (unsigned char) _10;
  *_12 = _13;
  # DEBUG BEGIN_STMT
  _14 = *FirstCol_70(D);
  _15 = &Context_71(D)->AesState[0];
  _16 = _15 + 3;
  _17 = (unsigned char) _14;
  *_16 = _17;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _18 = *SecondCol_76(D);
  _19 = _18 >> 24;
  _20 = (unsigned char) _19;
  Context_71(D)->AesState[4] = _20;
  # DEBUG BEGIN_STMT
  _21 = *SecondCol_76(D);
  _22 = _21 >> 16;
  _23 = &Context_71(D)->AesState[4];
  _24 = _23 + 1;
  _25 = (unsigned char) _22;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  _26 = *SecondCol_76(D);
  _27 = _26 >> 8;
  _28 = &Context_71(D)->AesState[4];
  _29 = _28 + 2;
  _30 = (unsigned char) _27;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  _31 = *SecondCol_76(D);
  _32 = &Context_71(D)->AesState[4];
  _33 = _32 + 3;
  _34 = (unsigned char) _31;
  *_33 = _34;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _35 = *ThirdCol_81(D);
  _36 = _35 >> 24;
  _37 = (unsigned char) _36;
  Context_71(D)->AesState[8] = _37;
  # DEBUG BEGIN_STMT
  _38 = *ThirdCol_81(D);
  _39 = _38 >> 16;
  _40 = &Context_71(D)->AesState[8];
  _41 = _40 + 1;
  _42 = (unsigned char) _39;
  *_41 = _42;
  # DEBUG BEGIN_STMT
  _43 = *ThirdCol_81(D);
  _44 = _43 >> 8;
  _45 = &Context_71(D)->AesState[8];
  _46 = _45 + 2;
  _47 = (unsigned char) _44;
  *_46 = _47;
  # DEBUG BEGIN_STMT
  _48 = *ThirdCol_81(D);
  _49 = &Context_71(D)->AesState[8];
  _50 = _49 + 3;
  _51 = (unsigned char) _48;
  *_50 = _51;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _52 = *FourthCol_86(D);
  _53 = _52 >> 24;
  _54 = (unsigned char) _53;
  Context_71(D)->AesState[12] = _54;
  # DEBUG BEGIN_STMT
  _55 = *FourthCol_86(D);
  _56 = _55 >> 16;
  _57 = &Context_71(D)->AesState[12];
  _58 = _57 + 1;
  _59 = (unsigned char) _56;
  *_58 = _59;
  # DEBUG BEGIN_STMT
  _60 = *FourthCol_86(D);
  _61 = _60 >> 8;
  _62 = &Context_71(D)->AesState[12];
  _63 = _62 + 2;
  _64 = (unsigned char) _61;
  *_63 = _64;
  # DEBUG BEGIN_STMT
  _65 = *FourthCol_86(D);
  _66 = &Context_71(D)->AesState[12];
  _67 = _66 + 3;
  _68 = (unsigned char) _65;
  *_67 = _68;
  # DEBUG BEGIN_STMT
  return;

}


Crypto_AESCommonMapState (uint32 * FirstCol, uint32 * SecondCol, uint32 * ThirdCol, uint32 * FourthCol, const struct Crypto_AES_ContextType * Context)
{
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  const uint8 * _4;
  const uint8 * _5;
  unsigned char _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  const uint8 * _10;
  const uint8 * _11;
  unsigned char _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  const uint8 * _16;
  const uint8 * _17;
  unsigned char _18;
  long unsigned int _19;
  long unsigned int _20;
  unsigned char _21;
  long unsigned int _22;
  long unsigned int _23;
  const uint8 * _24;
  const uint8 * _25;
  unsigned char _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  const uint8 * _30;
  const uint8 * _31;
  unsigned char _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  const uint8 * _36;
  const uint8 * _37;
  unsigned char _38;
  long unsigned int _39;
  long unsigned int _40;
  unsigned char _41;
  long unsigned int _42;
  long unsigned int _43;
  const uint8 * _44;
  const uint8 * _45;
  unsigned char _46;
  long unsigned int _47;
  long unsigned int _48;
  long unsigned int _49;
  const uint8 * _50;
  const uint8 * _51;
  unsigned char _52;
  long unsigned int _53;
  long unsigned int _54;
  long unsigned int _55;
  const uint8 * _56;
  const uint8 * _57;
  unsigned char _58;
  long unsigned int _59;
  long unsigned int _60;
  unsigned char _61;
  long unsigned int _62;
  long unsigned int _63;
  const uint8 * _64;
  const uint8 * _65;
  unsigned char _66;
  long unsigned int _67;
  long unsigned int _68;
  long unsigned int _69;
  const uint8 * _70;
  const uint8 * _71;
  unsigned char _72;
  long unsigned int _73;
  long unsigned int _74;
  long unsigned int _75;
  const uint8 * _76;
  const uint8 * _77;
  unsigned char _78;
  long unsigned int _79;
  long unsigned int _80;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Context_82(D)->AesState[0];
  _2 = (long unsigned int) _1;
  _3 = _2 << 24;
  _4 = &Context_82(D)->AesState[0];
  _5 = _4 + 1;
  _6 = *_5;
  _7 = (long unsigned int) _6;
  _8 = _7 << 16;
  _9 = _3 | _8;
  _10 = &Context_82(D)->AesState[0];
  _11 = _10 + 2;
  _12 = *_11;
  _13 = (long unsigned int) _12;
  _14 = _13 << 8;
  _15 = _9 | _14;
  _16 = &Context_82(D)->AesState[0];
  _17 = _16 + 3;
  _18 = *_17;
  _19 = (long unsigned int) _18;
  _20 = _15 | _19;
  *FirstCol_83(D) = _20;
  # DEBUG BEGIN_STMT
  _21 = Context_82(D)->AesState[4];
  _22 = (long unsigned int) _21;
  _23 = _22 << 24;
  _24 = &Context_82(D)->AesState[4];
  _25 = _24 + 1;
  _26 = *_25;
  _27 = (long unsigned int) _26;
  _28 = _27 << 16;
  _29 = _23 | _28;
  _30 = &Context_82(D)->AesState[4];
  _31 = _30 + 2;
  _32 = *_31;
  _33 = (long unsigned int) _32;
  _34 = _33 << 8;
  _35 = _29 | _34;
  _36 = &Context_82(D)->AesState[4];
  _37 = _36 + 3;
  _38 = *_37;
  _39 = (long unsigned int) _38;
  _40 = _35 | _39;
  *SecondCol_85(D) = _40;
  # DEBUG BEGIN_STMT
  _41 = Context_82(D)->AesState[8];
  _42 = (long unsigned int) _41;
  _43 = _42 << 24;
  _44 = &Context_82(D)->AesState[8];
  _45 = _44 + 1;
  _46 = *_45;
  _47 = (long unsigned int) _46;
  _48 = _47 << 16;
  _49 = _43 | _48;
  _50 = &Context_82(D)->AesState[8];
  _51 = _50 + 2;
  _52 = *_51;
  _53 = (long unsigned int) _52;
  _54 = _53 << 8;
  _55 = _49 | _54;
  _56 = &Context_82(D)->AesState[8];
  _57 = _56 + 3;
  _58 = *_57;
  _59 = (long unsigned int) _58;
  _60 = _55 | _59;
  *ThirdCol_87(D) = _60;
  # DEBUG BEGIN_STMT
  _61 = Context_82(D)->AesState[12];
  _62 = (long unsigned int) _61;
  _63 = _62 << 24;
  _64 = &Context_82(D)->AesState[12];
  _65 = _64 + 1;
  _66 = *_65;
  _67 = (long unsigned int) _66;
  _68 = _67 << 16;
  _69 = _63 | _68;
  _70 = &Context_82(D)->AesState[12];
  _71 = _70 + 2;
  _72 = *_71;
  _73 = (long unsigned int) _72;
  _74 = _73 << 8;
  _75 = _69 | _74;
  _76 = &Context_82(D)->AesState[12];
  _77 = _76 + 3;
  _78 = *_77;
  _79 = (long unsigned int) _78;
  _80 = _75 | _79;
  *FourthCol_89(D) = _80;
  return;

}


Crypto_AESCommonCalculateKeySchedule (struct Crypto_AES_ContextType * Context)
{
  const uint32 Crypto_AES_Rcon_Fast[10];
  uint32 temp;
  uint8 Index;
  unsigned int _1;
  unsigned int _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned int _6;
  unsigned int _7;
  uint8 * _8;
  uint8 * _9;
  unsigned char _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  unsigned int _14;
  unsigned int _15;
  uint8 * _16;
  uint8 * _17;
  unsigned char _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  unsigned int _22;
  unsigned int _23;
  uint8 * _24;
  uint8 * _25;
  unsigned char _26;
  long unsigned int _27;
  uint32 * _28;
  unsigned int _29;
  unsigned int _30;
  uint32 * _31;
  long unsigned int _32;
  unsigned char Index.2_33;
  unsigned char _34;
  uint32 * _35;
  sizetype _36;
  sizetype _37;
  sizetype _38;
  uint32 * _39;
  unsigned char _40;
  unsigned char _41;
  long unsigned int _42;
  long unsigned int _43;
  unsigned char _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  unsigned char _49;
  long unsigned int _50;
  long unsigned int _51;
  long unsigned int _52;
  long unsigned int _53;
  unsigned char _54;
  long unsigned int _55;
  long unsigned int _56;
  long unsigned int _57;
  long unsigned int _58;
  unsigned char _59;
  long unsigned int _60;
  long unsigned int _61;
  unsigned char _62;
  unsigned char _63;
  unsigned int _64;
  unsigned int _65;
  long unsigned int _66;
  unsigned char _67;
  unsigned char _68;
  unsigned char _69;
  long unsigned int _70;
  unsigned char _71;
  long unsigned int _72;
  long unsigned int _73;
  long unsigned int _74;
  long unsigned int _75;
  unsigned char _76;
  long unsigned int _77;
  long unsigned int _78;
  long unsigned int _79;
  long unsigned int _80;
  long unsigned int _81;
  unsigned char _82;
  long unsigned int _83;
  long unsigned int _84;
  long unsigned int _85;
  long unsigned int _86;
  unsigned char _87;
  long unsigned int _88;
  uint32 * _89;
  int _90;
  unsigned char _91;
  int _92;
  int _93;
  unsigned int _94;
  unsigned int _95;
  uint32 * _96;
  long unsigned int _97;
  uint32 * _98;
  unsigned int _99;
  unsigned int _100;
  uint32 * _101;
  long unsigned int _102;
  unsigned char Index.3_103;
  long unsigned int _104;
  long unsigned int _105;
  long unsigned int _106;
  long unsigned int _107;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Crypto_AES_Rcon_Fast = *.LC0;
  # DEBUG BEGIN_STMT
  Index_115 = 0;
  # DEBUG Index => Index_115
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (unsigned int) Index_108;
  _2 = _1 * 4;
  _3 = Context_116(D)->KeySeed[_2];
  _4 = (long unsigned int) _3;
  _5 = _4 << 24;
  _6 = (unsigned int) Index_108;
  _7 = _6 * 4;
  _8 = &Context_116(D)->KeySeed[_7];
  _9 = _8 + 1;
  _10 = *_9;
  _11 = (long unsigned int) _10;
  _12 = _11 << 16;
  _13 = _5 | _12;
  _14 = (unsigned int) Index_108;
  _15 = _14 * 4;
  _16 = &Context_116(D)->KeySeed[_15];
  _17 = _16 + 2;
  _18 = *_17;
  _19 = (long unsigned int) _18;
  _20 = _19 << 8;
  _21 = _13 | _20;
  _22 = (unsigned int) Index_108;
  _23 = _22 * 4;
  _24 = &Context_116(D)->KeySeed[_23];
  _25 = _24 + 3;
  _26 = *_25;
  _27 = (long unsigned int) _26;
  _28 = Context_116(D)->KeyExpdFast;
  _29 = (unsigned int) Index_108;
  _30 = _29 * 4;
  _31 = _28 + _30;
  _32 = _21 | _27;
  *_31 = _32;
  # DEBUG BEGIN_STMT
  Index.2_33 = Index_108;
  Index_125 = Index.2_33 + 1;
  # DEBUG Index => Index_125

  <bb 4> :
  # Index_108 = PHI <Index_115(2), Index_125(3)>
  # DEBUG Index => Index_108
  # DEBUG BEGIN_STMT
  _34 = Context_116(D)->SzeKey;
  if (Index_108 < _34)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Index_117 = Context_116(D)->SzeKey;
  # DEBUG Index => Index_117
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _35 = Context_116(D)->KeyExpdFast;
  _36 = (sizetype) Index_109;
  _37 = _36 + 1073741823;
  _38 = _37 * 4;
  _39 = _35 + _38;
  temp_119 = *_39;
  # DEBUG temp => temp_119
  # DEBUG BEGIN_STMT
  _40 = Context_116(D)->SzeKey;
  _41 = Index_109 % _40;
  if (_41 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _42 = temp_119 >> 16;
  _43 = _42 & 255;
  _44 = Crypto_AES_SboxNrm[_43];
  _45 = (long unsigned int) _44;
  _46 = _45 << 24;
  _47 = temp_119 >> 8;
  _48 = _47 & 255;
  _49 = Crypto_AES_SboxNrm[_48];
  _50 = (long unsigned int) _49;
  _51 = _50 << 16;
  _52 = _46 ^ _51;
  _53 = temp_119 & 255;
  _54 = Crypto_AES_SboxNrm[_53];
  _55 = (long unsigned int) _54;
  _56 = _55 << 8;
  _57 = _52 ^ _56;
  _58 = temp_119 >> 24;
  _59 = Crypto_AES_SboxNrm[_58];
  _60 = (long unsigned int) _59;
  _61 = _57 ^ _60;
  _62 = Context_116(D)->SzeKey;
  _63 = Index_109 / _62;
  _64 = (unsigned int) _63;
  _65 = _64 + 4294967295;
  _66 = Crypto_AES_Rcon_Fast[_65];
  temp_121 = _61 ^ _66;
  # DEBUG temp => temp_121
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _67 = Context_116(D)->SzeKey;
  if (_67 > 6)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _68 = Context_116(D)->SzeKey;
  _69 = Index_109 % _68;
  if (_69 == 4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _70 = temp_119 >> 24;
  _71 = Crypto_AES_SboxNrm[_70];
  _72 = (long unsigned int) _71;
  _73 = _72 << 24;
  _74 = temp_119 >> 16;
  _75 = _74 & 255;
  _76 = Crypto_AES_SboxNrm[_75];
  _77 = (long unsigned int) _76;
  _78 = _77 << 16;
  _79 = _73 ^ _78;
  _80 = temp_119 >> 8;
  _81 = _80 & 255;
  _82 = Crypto_AES_SboxNrm[_81];
  _83 = (long unsigned int) _82;
  _84 = _83 << 8;
  _85 = _79 ^ _84;
  _86 = temp_119 & 255;
  _87 = Crypto_AES_SboxNrm[_86];
  _88 = (long unsigned int) _87;
  temp_120 = _85 ^ _88;
  # DEBUG temp => temp_120

  <bb 11> :
  # temp_110 = PHI <temp_121(7), temp_119(8), temp_119(9), temp_120(10)>
  # DEBUG temp => temp_110
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _89 = Context_116(D)->KeyExpdFast;
  _90 = (int) Index_109;
  _91 = Context_116(D)->SzeKey;
  _92 = (int) _91;
  _93 = _90 - _92;
  _94 = (unsigned int) _93;
  _95 = _94 * 4;
  _96 = _89 + _95;
  _97 = *_96;
  _98 = Context_116(D)->KeyExpdFast;
  _99 = (unsigned int) Index_109;
  _100 = _99 * 4;
  _101 = _98 + _100;
  _102 = temp_110 ^ _97;
  *_101 = _102;
  # DEBUG BEGIN_STMT
  Index.3_103 = Index_109;
  Index_123 = Index.3_103 + 1;
  # DEBUG Index => Index_123

  <bb 12> :
  # Index_109 = PHI <Index_117(5), Index_123(11)>
  # DEBUG Index => Index_109
  # DEBUG BEGIN_STMT
  _104 = (long unsigned int) Index_109;
  _105 = Context_116(D)->SzeTurn;
  _106 = _105 + 1;
  _107 = _106 * 4;
  if (_104 < _107)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  Crypto_AES_Rcon_Fast ={v} {CLOBBER};
  return;

}


Crypto_AESEncryptCalculateRounds (struct Crypto_AES_ContextType * Context)
{
  const uint8 keyExpdFastLoopOffset;
  const uint8 keyExpdFastOffset;
  const uint8 numberOfLoops;
  uint8 Index;
  uint32 S3;
  uint32 S2;
  uint32 S1;
  uint32 S0;
  uint32 T3;
  uint32 T2;
  uint32 T1;
  uint32 T0;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  uint32 * _5;
  long unsigned int _6;
  long unsigned int S0.4_7;
  long unsigned int _8;
  uint32 * _9;
  uint32 * _10;
  long unsigned int _11;
  long unsigned int S1.5_12;
  long unsigned int _13;
  uint32 * _14;
  uint32 * _15;
  long unsigned int _16;
  long unsigned int S2.6_17;
  long unsigned int _18;
  uint32 * _19;
  uint32 * _20;
  long unsigned int _21;
  long unsigned int S3.7_22;
  long unsigned int _23;
  long unsigned int S0.8_24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int S1.9_27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int S2.10_33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int S3.11_39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;
  uint32 * _44;
  sizetype _45;
  sizetype _46;
  sizetype _47;
  uint32 * _48;
  long unsigned int _49;
  long unsigned int S1.12_50;
  long unsigned int _51;
  long unsigned int _52;
  long unsigned int S2.13_53;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _56;
  long unsigned int _57;
  long unsigned int _58;
  long unsigned int S3.14_59;
  long unsigned int _60;
  long unsigned int _61;
  long unsigned int _62;
  long unsigned int _63;
  long unsigned int _64;
  long unsigned int S0.15_65;
  long unsigned int _66;
  long unsigned int _67;
  long unsigned int _68;
  long unsigned int _69;
  uint32 * _70;
  sizetype _71;
  sizetype _72;
  sizetype _73;
  uint32 * _74;
  long unsigned int _75;
  long unsigned int S2.16_76;
  long unsigned int _77;
  long unsigned int _78;
  long unsigned int S3.17_79;
  long unsigned int _80;
  long unsigned int _81;
  long unsigned int _82;
  long unsigned int _83;
  long unsigned int _84;
  long unsigned int S0.18_85;
  long unsigned int _86;
  long unsigned int _87;
  long unsigned int _88;
  long unsigned int _89;
  long unsigned int _90;
  long unsigned int S1.19_91;
  long unsigned int _92;
  long unsigned int _93;
  long unsigned int _94;
  long unsigned int _95;
  uint32 * _96;
  sizetype _97;
  sizetype _98;
  sizetype _99;
  uint32 * _100;
  long unsigned int _101;
  long unsigned int S3.20_102;
  long unsigned int _103;
  long unsigned int _104;
  long unsigned int S0.21_105;
  long unsigned int _106;
  long unsigned int _107;
  long unsigned int _108;
  long unsigned int _109;
  long unsigned int _110;
  long unsigned int S1.22_111;
  long unsigned int _112;
  long unsigned int _113;
  long unsigned int _114;
  long unsigned int _115;
  long unsigned int _116;
  long unsigned int S2.23_117;
  long unsigned int _118;
  long unsigned int _119;
  long unsigned int _120;
  long unsigned int _121;
  uint32 * _122;
  sizetype _123;
  sizetype _124;
  sizetype _125;
  uint32 * _126;
  long unsigned int _127;
  unsigned int _128;
  unsigned int _129;
  unsigned int _130;
  long unsigned int _131;
  long unsigned int _132;
  long unsigned int _133;
  long unsigned int _134;
  long unsigned int _135;
  long unsigned int _136;
  long unsigned int _137;
  long unsigned int _138;
  long unsigned int _139;
  long unsigned int _140;
  long unsigned int _141;
  long unsigned int _142;
  long unsigned int _143;
  long unsigned int _144;
  long unsigned int _145;
  long unsigned int _146;
  uint32 * _147;
  sizetype _148;
  sizetype _149;
  sizetype _150;
  uint32 * _151;
  long unsigned int _152;
  long unsigned int _153;
  long unsigned int _154;
  long unsigned int _155;
  long unsigned int _156;
  long unsigned int _157;
  long unsigned int _158;
  long unsigned int _159;
  long unsigned int _160;
  long unsigned int _161;
  long unsigned int _162;
  long unsigned int _163;
  long unsigned int _164;
  long unsigned int _165;
  long unsigned int _166;
  long unsigned int _167;
  long unsigned int _168;
  long unsigned int _169;
  uint32 * _170;
  sizetype _171;
  sizetype _172;
  sizetype _173;
  uint32 * _174;
  long unsigned int _175;
  long unsigned int _176;
  long unsigned int _177;
  long unsigned int _178;
  long unsigned int _179;
  long unsigned int _180;
  long unsigned int _181;
  long unsigned int _182;
  long unsigned int _183;
  long unsigned int _184;
  long unsigned int _185;
  long unsigned int _186;
  long unsigned int _187;
  long unsigned int _188;
  long unsigned int _189;
  long unsigned int _190;
  long unsigned int _191;
  long unsigned int _192;
  uint32 * _193;
  sizetype _194;
  sizetype _195;
  sizetype _196;
  uint32 * _197;
  long unsigned int _198;
  long unsigned int _199;
  long unsigned int _200;
  long unsigned int _201;
  long unsigned int _202;
  long unsigned int _203;
  long unsigned int _204;
  long unsigned int _205;
  long unsigned int _206;
  long unsigned int _207;
  long unsigned int _208;
  long unsigned int _209;
  long unsigned int _210;
  long unsigned int _211;
  long unsigned int _212;
  long unsigned int _213;
  long unsigned int _214;
  long unsigned int _215;
  uint32 * _216;
  sizetype _217;
  sizetype _218;
  sizetype _219;
  uint32 * _220;
  long unsigned int _221;
  long unsigned int _222;
  unsigned char Index.24_223;
  long unsigned int _224;
  unsigned char _225;
  long unsigned int _226;
  long unsigned int _227;
  long unsigned int _228;
  long unsigned int _229;
  unsigned char _230;
  long unsigned int _231;
  long unsigned int _232;
  long unsigned int _233;
  long unsigned int _234;
  long unsigned int _235;
  unsigned char _236;
  long unsigned int _237;
  long unsigned int _238;
  long unsigned int _239;
  long unsigned int _240;
  unsigned char _241;
  long unsigned int _242;
  long unsigned int _243;
  uint32 * _244;
  unsigned int _245;
  unsigned int _246;
  uint32 * _247;
  long unsigned int _248;
  long unsigned int _249;
  long unsigned int _250;
  unsigned char _251;
  long unsigned int _252;
  long unsigned int _253;
  long unsigned int _254;
  long unsigned int _255;
  unsigned char _256;
  long unsigned int _257;
  long unsigned int _258;
  long unsigned int _259;
  long unsigned int _260;
  long unsigned int _261;
  unsigned char _262;
  long unsigned int _263;
  long unsigned int _264;
  long unsigned int _265;
  long unsigned int _266;
  unsigned char _267;
  long unsigned int _268;
  long unsigned int _269;
  uint32 * _270;
  sizetype _271;
  sizetype _272;
  sizetype _273;
  uint32 * _274;
  long unsigned int _275;
  long unsigned int _276;
  long unsigned int _277;
  unsigned char _278;
  long unsigned int _279;
  long unsigned int _280;
  long unsigned int _281;
  long unsigned int _282;
  unsigned char _283;
  long unsigned int _284;
  long unsigned int _285;
  long unsigned int _286;
  long unsigned int _287;
  long unsigned int _288;
  unsigned char _289;
  long unsigned int _290;
  long unsigned int _291;
  long unsigned int _292;
  long unsigned int _293;
  unsigned char _294;
  long unsigned int _295;
  long unsigned int _296;
  uint32 * _297;
  sizetype _298;
  sizetype _299;
  sizetype _300;
  uint32 * _301;
  long unsigned int _302;
  long unsigned int _303;
  long unsigned int _304;
  unsigned char _305;
  long unsigned int _306;
  long unsigned int _307;
  long unsigned int _308;
  long unsigned int _309;
  unsigned char _310;
  long unsigned int _311;
  long unsigned int _312;
  long unsigned int _313;
  long unsigned int _314;
  long unsigned int _315;
  unsigned char _316;
  long unsigned int _317;
  long unsigned int _318;
  long unsigned int _319;
  long unsigned int _320;
  unsigned char _321;
  long unsigned int _322;
  long unsigned int _323;
  uint32 * _324;
  sizetype _325;
  sizetype _326;
  sizetype _327;
  uint32 * _328;
  long unsigned int _329;
  long unsigned int _330;

  <bb 2> :
  # DEBUG BEGIN_STMT
  T0_338 = 0;
  # DEBUG T0 => T0_338
  # DEBUG BEGIN_STMT
  T1_339 = 0;
  # DEBUG T1 => T1_339
  # DEBUG BEGIN_STMT
  T2_340 = 0;
  # DEBUG T2 => T2_340
  # DEBUG BEGIN_STMT
  T3_341 = 0;
  # DEBUG T3 => T3_341
  # DEBUG BEGIN_STMT
  S0 = 0;
  # DEBUG BEGIN_STMT
  S1 = 0;
  # DEBUG BEGIN_STMT
  S2 = 0;
  # DEBUG BEGIN_STMT
  S3 = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Context_347(D)->SzeTurn;
  _2 = _1 / 2;
  numberOfLoops_348 = (const uint8) _2;
  # DEBUG numberOfLoops => numberOfLoops_348
  # DEBUG BEGIN_STMT
  _3 = Context_347(D)->SzeTurn;
  _4 = (unsigned char) _3;
  keyExpdFastOffset_349 = _4 * 4;
  # DEBUG keyExpdFastOffset => keyExpdFastOffset_349
  # DEBUG BEGIN_STMT
  Crypto_AESCommonMapState (&S0, &S1, &S2, &S3, Context_347(D));
  # DEBUG BEGIN_STMT
  _5 = Context_347(D)->KeyExpdFast;
  _6 = *_5;
  S0.4_7 = S0;
  _8 = _6 ^ S0.4_7;
  S0 = _8;
  # DEBUG BEGIN_STMT
  _9 = Context_347(D)->KeyExpdFast;
  _10 = _9 + 4;
  _11 = *_10;
  S1.5_12 = S1;
  _13 = _11 ^ S1.5_12;
  S1 = _13;
  # DEBUG BEGIN_STMT
  _14 = Context_347(D)->KeyExpdFast;
  _15 = _14 + 8;
  _16 = *_15;
  S2.6_17 = S2;
  _18 = _16 ^ S2.6_17;
  S2 = _18;
  # DEBUG BEGIN_STMT
  _19 = Context_347(D)->KeyExpdFast;
  _20 = _19 + 12;
  _21 = *_20;
  S3.7_22 = S3;
  _23 = _21 ^ S3.7_22;
  S3 = _23;
  # DEBUG BEGIN_STMT
  Index_355 = 0;
  # DEBUG Index => Index_355
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  keyExpdFastLoopOffset_365 = Index_335 * 8;
  # DEBUG keyExpdFastLoopOffset => keyExpdFastLoopOffset_365
  # DEBUG BEGIN_STMT
  S0.8_24 = S0;
  _25 = S0.8_24 >> 24;
  _26 = Crypto_AES_Te0[_25];
  S1.9_27 = S1;
  _28 = S1.9_27 >> 16;
  _29 = _28 & 255;
  _30 = Crypto_AES_Te0[_29];
  _31 = _30 r>> 8;
  _32 = _26 ^ _31;
  S2.10_33 = S2;
  _34 = S2.10_33 >> 8;
  _35 = _34 & 255;
  _36 = Crypto_AES_Te0[_35];
  _37 = _36 r>> 16;
  _38 = _32 ^ _37;
  S3.11_39 = S3;
  _40 = S3.11_39 & 255;
  _41 = Crypto_AES_Te0[_40];
  _42 = _41 r>> 24;
  _43 = _38 ^ _42;
  _44 = Context_347(D)->KeyExpdFast;
  _45 = (sizetype) keyExpdFastLoopOffset_365;
  _46 = _45 + 4;
  _47 = _46 * 4;
  _48 = _44 + _47;
  _49 = *_48;
  T0_366 = _43 ^ _49;
  # DEBUG T0 => T0_366
  # DEBUG BEGIN_STMT
  S1.12_50 = S1;
  _51 = S1.12_50 >> 24;
  _52 = Crypto_AES_Te0[_51];
  S2.13_53 = S2;
  _54 = S2.13_53 >> 16;
  _55 = _54 & 255;
  _56 = Crypto_AES_Te0[_55];
  _57 = _56 r>> 8;
  _58 = _52 ^ _57;
  S3.14_59 = S3;
  _60 = S3.14_59 >> 8;
  _61 = _60 & 255;
  _62 = Crypto_AES_Te0[_61];
  _63 = _62 r>> 16;
  _64 = _58 ^ _63;
  S0.15_65 = S0;
  _66 = S0.15_65 & 255;
  _67 = Crypto_AES_Te0[_66];
  _68 = _67 r>> 24;
  _69 = _64 ^ _68;
  _70 = Context_347(D)->KeyExpdFast;
  _71 = (sizetype) keyExpdFastLoopOffset_365;
  _72 = _71 + 5;
  _73 = _72 * 4;
  _74 = _70 + _73;
  _75 = *_74;
  T1_367 = _69 ^ _75;
  # DEBUG T1 => T1_367
  # DEBUG BEGIN_STMT
  S2.16_76 = S2;
  _77 = S2.16_76 >> 24;
  _78 = Crypto_AES_Te0[_77];
  S3.17_79 = S3;
  _80 = S3.17_79 >> 16;
  _81 = _80 & 255;
  _82 = Crypto_AES_Te0[_81];
  _83 = _82 r>> 8;
  _84 = _78 ^ _83;
  S0.18_85 = S0;
  _86 = S0.18_85 >> 8;
  _87 = _86 & 255;
  _88 = Crypto_AES_Te0[_87];
  _89 = _88 r>> 16;
  _90 = _84 ^ _89;
  S1.19_91 = S1;
  _92 = S1.19_91 & 255;
  _93 = Crypto_AES_Te0[_92];
  _94 = _93 r>> 24;
  _95 = _90 ^ _94;
  _96 = Context_347(D)->KeyExpdFast;
  _97 = (sizetype) keyExpdFastLoopOffset_365;
  _98 = _97 + 6;
  _99 = _98 * 4;
  _100 = _96 + _99;
  _101 = *_100;
  T2_368 = _95 ^ _101;
  # DEBUG T2 => T2_368
  # DEBUG BEGIN_STMT
  S3.20_102 = S3;
  _103 = S3.20_102 >> 24;
  _104 = Crypto_AES_Te0[_103];
  S0.21_105 = S0;
  _106 = S0.21_105 >> 16;
  _107 = _106 & 255;
  _108 = Crypto_AES_Te0[_107];
  _109 = _108 r>> 8;
  _110 = _104 ^ _109;
  S1.22_111 = S1;
  _112 = S1.22_111 >> 8;
  _113 = _112 & 255;
  _114 = Crypto_AES_Te0[_113];
  _115 = _114 r>> 16;
  _116 = _110 ^ _115;
  S2.23_117 = S2;
  _118 = S2.23_117 & 255;
  _119 = Crypto_AES_Te0[_118];
  _120 = _119 r>> 24;
  _121 = _116 ^ _120;
  _122 = Context_347(D)->KeyExpdFast;
  _123 = (sizetype) keyExpdFastLoopOffset_365;
  _124 = _123 + 7;
  _125 = _124 * 4;
  _126 = _122 + _125;
  _127 = *_126;
  T3_369 = _121 ^ _127;
  # DEBUG T3 => T3_369
  # DEBUG BEGIN_STMT
  _128 = (unsigned int) Index_335;
  _129 = (unsigned int) numberOfLoops_348;
  _130 = _129 + 4294967295;
  if (_128 < _130)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _131 = T0_366 >> 24;
  _132 = Crypto_AES_Te0[_131];
  _133 = T1_367 >> 16;
  _134 = _133 & 255;
  _135 = Crypto_AES_Te0[_134];
  _136 = _135 r>> 8;
  _137 = _132 ^ _136;
  _138 = T2_368 >> 8;
  _139 = _138 & 255;
  _140 = Crypto_AES_Te0[_139];
  _141 = _140 r>> 16;
  _142 = _137 ^ _141;
  _143 = T3_369 & 255;
  _144 = Crypto_AES_Te0[_143];
  _145 = _144 r>> 24;
  _146 = _142 ^ _145;
  _147 = Context_347(D)->KeyExpdFast;
  _148 = (sizetype) keyExpdFastLoopOffset_365;
  _149 = _148 + 8;
  _150 = _149 * 4;
  _151 = _147 + _150;
  _152 = *_151;
  _153 = _146 ^ _152;
  S0 = _153;
  # DEBUG BEGIN_STMT
  _154 = T1_367 >> 24;
  _155 = Crypto_AES_Te0[_154];
  _156 = T2_368 >> 16;
  _157 = _156 & 255;
  _158 = Crypto_AES_Te0[_157];
  _159 = _158 r>> 8;
  _160 = _155 ^ _159;
  _161 = T3_369 >> 8;
  _162 = _161 & 255;
  _163 = Crypto_AES_Te0[_162];
  _164 = _163 r>> 16;
  _165 = _160 ^ _164;
  _166 = T0_366 & 255;
  _167 = Crypto_AES_Te0[_166];
  _168 = _167 r>> 24;
  _169 = _165 ^ _168;
  _170 = Context_347(D)->KeyExpdFast;
  _171 = (sizetype) keyExpdFastLoopOffset_365;
  _172 = _171 + 9;
  _173 = _172 * 4;
  _174 = _170 + _173;
  _175 = *_174;
  _176 = _169 ^ _175;
  S1 = _176;
  # DEBUG BEGIN_STMT
  _177 = T2_368 >> 24;
  _178 = Crypto_AES_Te0[_177];
  _179 = T3_369 >> 16;
  _180 = _179 & 255;
  _181 = Crypto_AES_Te0[_180];
  _182 = _181 r>> 8;
  _183 = _178 ^ _182;
  _184 = T0_366 >> 8;
  _185 = _184 & 255;
  _186 = Crypto_AES_Te0[_185];
  _187 = _186 r>> 16;
  _188 = _183 ^ _187;
  _189 = T1_367 & 255;
  _190 = Crypto_AES_Te0[_189];
  _191 = _190 r>> 24;
  _192 = _188 ^ _191;
  _193 = Context_347(D)->KeyExpdFast;
  _194 = (sizetype) keyExpdFastLoopOffset_365;
  _195 = _194 + 10;
  _196 = _195 * 4;
  _197 = _193 + _196;
  _198 = *_197;
  _199 = _192 ^ _198;
  S2 = _199;
  # DEBUG BEGIN_STMT
  _200 = T3_369 >> 24;
  _201 = Crypto_AES_Te0[_200];
  _202 = T0_366 >> 16;
  _203 = _202 & 255;
  _204 = Crypto_AES_Te0[_203];
  _205 = _204 r>> 8;
  _206 = _201 ^ _205;
  _207 = T1_367 >> 8;
  _208 = _207 & 255;
  _209 = Crypto_AES_Te0[_208];
  _210 = _209 r>> 16;
  _211 = _206 ^ _210;
  _212 = T2_368 & 255;
  _213 = Crypto_AES_Te0[_212];
  _214 = _213 r>> 24;
  _215 = _211 ^ _214;
  _216 = Context_347(D)->KeyExpdFast;
  _217 = (sizetype) keyExpdFastLoopOffset_365;
  _218 = _217 + 11;
  _219 = _218 * 4;
  _220 = _216 + _219;
  _221 = *_220;
  _222 = _215 ^ _221;
  S3 = _222;

  <bb 5> :
  # DEBUG BEGIN_STMT
  Index.24_223 = Index_335;
  Index_374 = Index.24_223 + 1;
  # DEBUG Index => Index_374

  <bb 6> :
  # T0_331 = PHI <T0_338(2), T0_366(5)>
  # T1_332 = PHI <T1_339(2), T1_367(5)>
  # T2_333 = PHI <T2_340(2), T2_368(5)>
  # T3_334 = PHI <T3_341(2), T3_369(5)>
  # Index_335 = PHI <Index_355(2), Index_374(5)>
  # DEBUG Index => Index_335
  # DEBUG T3 => T3_334
  # DEBUG T2 => T2_333
  # DEBUG T1 => T1_332
  # DEBUG T0 => T0_331
  # DEBUG BEGIN_STMT
  if (Index_335 < numberOfLoops_348)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _224 = T0_331 >> 24;
  _225 = Crypto_AES_SboxNrm[_224];
  _226 = (long unsigned int) _225;
  _227 = _226 << 24;
  _228 = T1_332 >> 16;
  _229 = _228 & 255;
  _230 = Crypto_AES_SboxNrm[_229];
  _231 = (long unsigned int) _230;
  _232 = _231 << 16;
  _233 = _227 ^ _232;
  _234 = T2_333 >> 8;
  _235 = _234 & 255;
  _236 = Crypto_AES_SboxNrm[_235];
  _237 = (long unsigned int) _236;
  _238 = _237 << 8;
  _239 = _233 ^ _238;
  _240 = T3_334 & 255;
  _241 = Crypto_AES_SboxNrm[_240];
  _242 = (long unsigned int) _241;
  _243 = _239 ^ _242;
  _244 = Context_347(D)->KeyExpdFast;
  _245 = (unsigned int) keyExpdFastOffset_349;
  _246 = _245 * 4;
  _247 = _244 + _246;
  _248 = *_247;
  _249 = _243 ^ _248;
  S0 = _249;
  # DEBUG BEGIN_STMT
  _250 = T1_332 >> 24;
  _251 = Crypto_AES_SboxNrm[_250];
  _252 = (long unsigned int) _251;
  _253 = _252 << 24;
  _254 = T2_333 >> 16;
  _255 = _254 & 255;
  _256 = Crypto_AES_SboxNrm[_255];
  _257 = (long unsigned int) _256;
  _258 = _257 << 16;
  _259 = _253 ^ _258;
  _260 = T3_334 >> 8;
  _261 = _260 & 255;
  _262 = Crypto_AES_SboxNrm[_261];
  _263 = (long unsigned int) _262;
  _264 = _263 << 8;
  _265 = _259 ^ _264;
  _266 = T0_331 & 255;
  _267 = Crypto_AES_SboxNrm[_266];
  _268 = (long unsigned int) _267;
  _269 = _265 ^ _268;
  _270 = Context_347(D)->KeyExpdFast;
  _271 = (sizetype) keyExpdFastOffset_349;
  _272 = _271 + 1;
  _273 = _272 * 4;
  _274 = _270 + _273;
  _275 = *_274;
  _276 = _269 ^ _275;
  S1 = _276;
  # DEBUG BEGIN_STMT
  _277 = T2_333 >> 24;
  _278 = Crypto_AES_SboxNrm[_277];
  _279 = (long unsigned int) _278;
  _280 = _279 << 24;
  _281 = T3_334 >> 16;
  _282 = _281 & 255;
  _283 = Crypto_AES_SboxNrm[_282];
  _284 = (long unsigned int) _283;
  _285 = _284 << 16;
  _286 = _280 ^ _285;
  _287 = T0_331 >> 8;
  _288 = _287 & 255;
  _289 = Crypto_AES_SboxNrm[_288];
  _290 = (long unsigned int) _289;
  _291 = _290 << 8;
  _292 = _286 ^ _291;
  _293 = T1_332 & 255;
  _294 = Crypto_AES_SboxNrm[_293];
  _295 = (long unsigned int) _294;
  _296 = _292 ^ _295;
  _297 = Context_347(D)->KeyExpdFast;
  _298 = (sizetype) keyExpdFastOffset_349;
  _299 = _298 + 2;
  _300 = _299 * 4;
  _301 = _297 + _300;
  _302 = *_301;
  _303 = _296 ^ _302;
  S2 = _303;
  # DEBUG BEGIN_STMT
  _304 = T3_334 >> 24;
  _305 = Crypto_AES_SboxNrm[_304];
  _306 = (long unsigned int) _305;
  _307 = _306 << 24;
  _308 = T0_331 >> 16;
  _309 = _308 & 255;
  _310 = Crypto_AES_SboxNrm[_309];
  _311 = (long unsigned int) _310;
  _312 = _311 << 16;
  _313 = _307 ^ _312;
  _314 = T1_332 >> 8;
  _315 = _314 & 255;
  _316 = Crypto_AES_SboxNrm[_315];
  _317 = (long unsigned int) _316;
  _318 = _317 << 8;
  _319 = _313 ^ _318;
  _320 = T2_333 & 255;
  _321 = Crypto_AES_SboxNrm[_320];
  _322 = (long unsigned int) _321;
  _323 = _319 ^ _322;
  _324 = Context_347(D)->KeyExpdFast;
  _325 = (sizetype) keyExpdFastOffset_349;
  _326 = _325 + 3;
  _327 = _326 * 4;
  _328 = _324 + _327;
  _329 = *_328;
  _330 = _323 ^ _329;
  S3 = _330;
  # DEBUG BEGIN_STMT
  Crypto_AESCommonUnmapState (&S0, &S1, &S2, &S3, Context_347(D));
  S0 ={v} {CLOBBER};
  S1 ={v} {CLOBBER};
  S2 ={v} {CLOBBER};
  S3 ={v} {CLOBBER};
  return;

}


Crypto_AES_EncryptCalculateKeySchedule ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESCommonCalculateKeySchedule (&Crypto_AESEncryptContext);
  return;

}


Crypto_AESEncryptMainFunction (Std_ReturnType * Result, boolean * Busy)
{
  long unsigned int _1;
  unsigned char _2;
  boolean * _3;
  Std_ReturnType * _4;
  unsigned char _5;
  int _6;
  boolean * _7;
  uint8 * _8;
  unsigned char _9;
  void (*<T542>) (struct Crypto_JobType *, uint8) _10;
  struct Crypto_JobType * _11;
  Std_ReturnType * _12;
  boolean * _13;
  boolean * _14;
  Std_ReturnType * _15;
  void (*<T542>) (struct Crypto_JobType *, uint8) _16;
  struct Crypto_JobType * _17;
  unsigned char _18;
  Std_ReturnType * _19;
  boolean * _20;
  boolean * _21;
  Std_ReturnType * _22;
  unsigned char _23;
  boolean * _24;
  boolean * _25;
  struct Crypto_JobType * _26;
  unsigned char _27;
  int _28;
  int _29;
  struct Crypto_JobType * _30;
  const struct Crypto_JobPrimitiveInfoType * _31;
  unsigned char _32;
  struct Crypto_JobType * _33;
  uint32 * _34;
  struct Crypto_JobType * _35;
  uint32 * _36;
  uint32 * _37;
  struct Crypto_JobType * _38;
  uint32 * _39;
  unsigned char _40;
  void (*<T542>) (struct Crypto_JobType *, uint8) _41;
  struct Crypto_JobType * _42;
  Std_ReturnType * _43;
  boolean * _44;
  boolean * _45;
  Std_ReturnType * _46;
  void (*<T542>) (struct Crypto_JobType *, uint8) _47;
  struct Crypto_JobType * _48;
  unsigned char _49;
  Std_ReturnType * _50;
  boolean * _51;
  boolean * _52;
  Std_ReturnType * _53;
  unsigned char _54;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_AESEncryptContext.ObjId;
  _2 = Crypto_CheckSkipMain (Result_61(D), Busy_62(D), _1);
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.IsBusy = Busy_62(D);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.Result = Result_61(D);
  # DEBUG BEGIN_STMT
  if (Result_61(D) != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  if (Busy_62(D) != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _3 = Crypto_AESEncryptContext.IsBusy;
  *_3 = 1;
  # DEBUG BEGIN_STMT
  _4 = Crypto_AESEncryptContext.Result;
  *_4 = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _5 = Crypto_AESEncryptContext.CtxState;
  _6 = (int) _5;
  switch (_6) <default: <L41> [INV], case 0: <L44> [INV], case 2: <L6> [INV], case 4: <L9> [INV], case 5: <L21> [INV]>

  <bb 7> :
<L6>:
  # DEBUG BEGIN_STMT
  if (Busy_62(D) != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _7 = Crypto_AESEncryptContext.IsBusy;
  *_7 = 0;
  goto <bb 32>; [INV]

  <bb 9> :
<L9>:
  # DEBUG BEGIN_STMT
  Crypto_AES_EncryptCalculateKeySchedule ();
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptCalculateRounds (&Crypto_AESEncryptContext);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 2;
  # DEBUG BEGIN_STMT
  _8 = Crypto_AESEncryptContext.TxtOput;
  TS_MemCpy32 (_8, &Crypto_AESEncryptContext.AesState, 16);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.TxtOputLen = 16;
  # DEBUG BEGIN_STMT
  _9 = Crypto_AESEncryptContext.CancelFlag;
  if (_9 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _10 = Crypto_AESEncryptContext.Crypto_Generic_Callback;
  _11 = Crypto_AESEncryptContext.Job;
  _10 (_11, 12);
  # DEBUG BEGIN_STMT
  _12 = Crypto_AESEncryptContext.Result;
  if (_12 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 11> :
  _13 = Crypto_AESEncryptContext.IsBusy;
  if (_13 != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _14 = Crypto_AESEncryptContext.IsBusy;
  *_14 = 0;
  # DEBUG BEGIN_STMT
  _15 = Crypto_AESEncryptContext.Result;
  *_15 = 12;
  goto <bb 32>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _16 = Crypto_AESEncryptContext.Crypto_Generic_Callback;
  _17 = Crypto_AESEncryptContext.Job;
  _18 = Crypto_AESEncryptContext.CtxError;
  _16 (_17, _18);
  # DEBUG BEGIN_STMT
  _19 = Crypto_AESEncryptContext.Result;
  if (_19 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 14> :
  _20 = Crypto_AESEncryptContext.IsBusy;
  if (_20 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _21 = Crypto_AESEncryptContext.IsBusy;
  *_21 = 0;
  # DEBUG BEGIN_STMT
  _22 = Crypto_AESEncryptContext.Result;
  _23 = Crypto_AESEncryptContext.CtxError;
  *_22 = _23;
  goto <bb 32>; [INV]

  <bb 16> :
<L21>:
  # DEBUG BEGIN_STMT
  _24 = Crypto_AESEncryptContext.IsBusy;
  if (_24 != 0B)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _25 = Crypto_AESEncryptContext.IsBusy;
  *_25 = 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  _26 = Crypto_AESEncryptContext.Job;
  _27 = _26->jobPrimitiveInputOutput.mode;
  _28 = (int) _27;
  _29 = _28 & 7;
  if (_29 == 7)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _30 = Crypto_AESEncryptContext.Job;
  _31 = _30->jobPrimitiveInfo;
  _32 = _31->processingType;
  if (_32 == 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _33 = Crypto_AESEncryptContext.Job;
  _34 = _33->jobPrimitiveInputOutput.outputLengthPtr;
  *_34 = 16;
  goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _35 = Crypto_AESEncryptContext.Job;
  _36 = _35->jobPrimitiveInputOutput.outputLengthPtr;
  *_36 = 0;

  <bb 22> :
  # DEBUG BEGIN_STMT
  _37 = Crypto_AESEncryptContext.TmpOutputLengthPtr;
  if (_37 != 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  _38 = Crypto_AESEncryptContext.Job;
  _39 = Crypto_AESEncryptContext.TmpOutputLengthPtr;
  _38->jobPrimitiveInputOutput.outputLengthPtr = _39;

  <bb 24> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 0;
  # DEBUG BEGIN_STMT
  _40 = Crypto_AESEncryptContext.CancelFlag;
  if (_40 == 1)
    goto <bb 25>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _41 = Crypto_AESEncryptContext.Crypto_Generic_Callback;
  _42 = Crypto_AESEncryptContext.Job;
  _41 (_42, 12);
  # DEBUG BEGIN_STMT
  _43 = Crypto_AESEncryptContext.Result;
  if (_43 != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 26> :
  _44 = Crypto_AESEncryptContext.IsBusy;
  if (_44 != 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  _45 = Crypto_AESEncryptContext.IsBusy;
  *_45 = 0;
  # DEBUG BEGIN_STMT
  _46 = Crypto_AESEncryptContext.Result;
  *_46 = 12;
  goto <bb 32>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  _47 = Crypto_AESEncryptContext.Crypto_Generic_Callback;
  _48 = Crypto_AESEncryptContext.Job;
  _49 = Crypto_AESEncryptContext.CtxError;
  _47 (_48, _49);
  # DEBUG BEGIN_STMT
  _50 = Crypto_AESEncryptContext.Result;
  if (_50 != 0B)
    goto <bb 29>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 29> :
  _51 = Crypto_AESEncryptContext.IsBusy;
  if (_51 != 0B)
    goto <bb 30>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  _52 = Crypto_AESEncryptContext.IsBusy;
  *_52 = 0;
  # DEBUG BEGIN_STMT
  _53 = Crypto_AESEncryptContext.Result;
  _54 = Crypto_AESEncryptContext.CtxError;
  *_53 = _54;
  goto <bb 32>; [INV]

  <bb 31> :
<L41>:
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 6;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxError = 1;
  # DEBUG BEGIN_STMT

  <bb 32> :
<L44>:
  return;

}


Crypto_AESEncryptFinish ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 5;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CurrentMode = 4;
  return;

}


Crypto_AESEncryptUpdate (const uint8 * IputTextPtr, uint32 IputTextLength, uint8 * OputTextPtr, uint32 * OputTextLengthPtr)
{
  long unsigned int _1;
  const uint8 * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CurrentMode = 2;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.TxtIput = IputTextPtr_5(D);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.TxtIputLen = IputTextLength_7(D);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.TxtOput = OputTextPtr_9(D);
  # DEBUG BEGIN_STMT
  _1 = *OputTextLengthPtr_11(D);
  Crypto_AESEncryptContext.TxtOputLen = _1;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 4;
  # DEBUG BEGIN_STMT
  _2 = Crypto_AESEncryptContext.TxtIput;
  TS_MemCpy32 (&Crypto_AESEncryptContext.AesState, _2, 16);
  return;

}


Crypto_AESEncryptStart (const void * CfgPtr, const struct Crypto_SymKeyType * KeyPtr)
{
  const struct Crypto_AES_ConfigType * LocCfgPtr;
  void (*<T542>) (struct Crypto_JobType *, uint8) _1;
  struct Crypto_JobType * _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  const uint8[16] * _6;
  long unsigned int _7;
  void (*<T542>) (struct Crypto_JobType *, uint8) _8;
  struct Crypto_JobType * _9;
  unsigned char _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  LocCfgPtr_13 = CfgPtr_12(D);
  # DEBUG LocCfgPtr => LocCfgPtr_13
  # DEBUG BEGIN_STMT
  _1 = LocCfgPtr_13->Crypto_Generic_Callback;
  Crypto_AESEncryptContext.Crypto_Generic_Callback = _1;
  # DEBUG BEGIN_STMT
  _2 = LocCfgPtr_13->Job;
  Crypto_AESEncryptContext.Job = _2;
  # DEBUG BEGIN_STMT
  _3 = LocCfgPtr_13->ObjId;
  Crypto_AESEncryptContext.ObjId = _3;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CurrentMode = 1;
  # DEBUG BEGIN_STMT
  _4 = LocCfgPtr_13->TypeKey;
  switch (_4) <default: <L5> [INV], case 16: <L0> [INV], case 24: <L1> [INV], case 32: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeKey = 4;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeTurn = 10;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeKey = 6;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeTurn = 12;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeKey = 8;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeTurn = 14;
  # DEBUG BEGIN_STMT

  <bb 6> :
<L5>:
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.KeyExpdFast = &Crypto_AesEncryptExpKey;
  # DEBUG BEGIN_STMT
  _5 = KeyPtr_26(D)->length;
  Crypto_AESEncryptContext.KeySeedLen = _5;
  # DEBUG BEGIN_STMT
  _6 = &KeyPtr_26(D)->data;
  _7 = KeyPtr_26(D)->length;
  TS_MemCpy32 (&Crypto_AESEncryptContext.KeySeed, _6, _7);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxError = 0;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 2;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CntTurn = 0;
  # DEBUG BEGIN_STMT
  _8 = Crypto_AESEncryptContext.Crypto_Generic_Callback;
  _9 = Crypto_AESEncryptContext.Job;
  _10 = Crypto_AESEncryptContext.CtxError;
  _8 (_9, _10);
  return;

}


Crypto_AL_ENCRYPT_AES_ECB_CallBack (struct Crypto_JobType * Job, uint8 Result)
{
  Std_ReturnType RetVal;
  const struct Crypto_JobPrimitiveInfoType * _1;
  unsigned char _2;
  unsigned char _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char _8;
  unsigned char _9;
  struct Crypto_JobType * _10;
  unsigned char _11;
  int _12;
  int _13;
  struct Crypto_JobType * _14;
  unsigned char _15;
  int _16;
  int _17;
  struct Crypto_JobType * _18;
  unsigned char _19;
  int _20;
  int _21;
  unsigned char _22;
  unsigned char _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  struct Crypto_JobType * _28;
  unsigned char _29;
  int _30;
  int _31;
  unsigned char _32;
  unsigned char _33;
  long unsigned int _34;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_36 = 1;
  # DEBUG RetVal => RetVal_36
  # DEBUG BEGIN_STMT
  _1 = Job_38(D)->jobPrimitiveInfo;
  _2 = _1->processingType;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = Crypto_AESEncryptContext.CurrentMode;
  _4 = _3 & 4;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (Result_39(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CurrentMode = 0;
  # DEBUG BEGIN_STMT
  _5 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_5].DriverObjectState = 0;
  # DEBUG BEGIN_STMT
  _6 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_6].CurrentJob = 0B;
  # DEBUG BEGIN_STMT
  _7 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_7].SkipPeriodicMainFunction = 1;
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Job_38(D)->jobState = 0;
  # DEBUG BEGIN_STMT
  CryIf_CallbackNotification (Job_38(D), Result_39(D));
  # DEBUG BEGIN_STMT
  Crypto_AL_ENCRYPT_AES_ECB_Reset ();
  goto <bb 17>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = Crypto_AESEncryptContext.CurrentMode;
  _9 = _8 & 2;
  if (_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _10 = Crypto_AESEncryptContext.Job;
  _11 = _10->jobPrimitiveInputOutput.mode;
  _12 = (int) _11;
  _13 = _12 & 7;
  if (_13 != 7)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  CryIf_CallbackNotification (Job_38(D), Result_39(D));
  goto <bb 17>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _14 = Crypto_AESEncryptContext.Job;
  _15 = _14->jobPrimitiveInputOutput.mode;
  _16 = (int) _15;
  _17 = _16 & 7;
  if (_17 == 3)
    goto <bb 11>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _18 = Crypto_AESEncryptContext.Job;
  _19 = _18->jobPrimitiveInputOutput.mode;
  _20 = (int) _19;
  _21 = _20 & 7;
  if (_21 == 7)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  _22 = Crypto_AESEncryptContext.CurrentMode;
  _23 = _22 & 1;
  if (_23 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _24 = Crypto_AESEncryptContext.ObjId;
  RetVal_42 = Crypto_AL_ENCRYPT_AES_ECB_Update (_24, Job_38(D));
  # DEBUG RetVal => RetVal_42
  # DEBUG BEGIN_STMT
  if (RetVal_42 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CurrentMode = 0;
  # DEBUG BEGIN_STMT
  _25 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_25].DriverObjectState = 0;
  # DEBUG BEGIN_STMT
  _26 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_26].CurrentJob = 0B;
  # DEBUG BEGIN_STMT
  _27 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_27].SkipPeriodicMainFunction = 1;
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Job_38(D)->jobState = 0;
  # DEBUG BEGIN_STMT
  CryIf_CallbackNotification (Job_38(D), RetVal_42);
  # DEBUG BEGIN_STMT
  Crypto_AL_ENCRYPT_AES_ECB_Reset ();
  goto <bb 17>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _28 = Crypto_AESEncryptContext.Job;
  _29 = _28->jobPrimitiveInputOutput.mode;
  _30 = (int) _29;
  _31 = _30 & 7;
  if (_31 == 7)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  _32 = Crypto_AESEncryptContext.CurrentMode;
  _33 = _32 & 2;
  if (_33 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _34 = Crypto_AESEncryptContext.ObjId;
  Crypto_AL_ENCRYPT_AES_ECB_Finish (_34, Job_38(D));

  <bb 17> :
  return;

}


Crypto_AL_AESPreCalculateKeySchedule (uint8 SzeKey, uint32 SzeTurn, uint8 * KeySeed, void * KeyExpdFastPtr)
{
  uint32 temp;
  uint32 ExpandedKey[60];
  const uint32 Crypto_AES_Rcon_Fast[10];
  uint8 Index;
  unsigned int _1;
  unsigned int _2;
  uint8 * _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned int _7;
  unsigned int _8;
  sizetype _9;
  uint8 * _10;
  unsigned char _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  unsigned int _15;
  unsigned int _16;
  sizetype _17;
  uint8 * _18;
  unsigned char _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  unsigned int _23;
  unsigned int _24;
  sizetype _25;
  uint8 * _26;
  unsigned char _27;
  long unsigned int _28;
  int _29;
  long unsigned int _30;
  unsigned char Index.25_31;
  unsigned int _32;
  unsigned int _33;
  unsigned char _34;
  long unsigned int _35;
  long unsigned int _36;
  unsigned char _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  unsigned char _42;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  unsigned char _47;
  long unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;
  unsigned char _52;
  long unsigned int _53;
  long unsigned int _54;
  unsigned char _55;
  unsigned int _56;
  unsigned int _57;
  long unsigned int _58;
  unsigned char _59;
  long unsigned int _60;
  unsigned char _61;
  long unsigned int _62;
  long unsigned int _63;
  long unsigned int _64;
  long unsigned int _65;
  unsigned char _66;
  long unsigned int _67;
  long unsigned int _68;
  long unsigned int _69;
  long unsigned int _70;
  long unsigned int _71;
  unsigned char _72;
  long unsigned int _73;
  long unsigned int _74;
  long unsigned int _75;
  long unsigned int _76;
  unsigned char _77;
  long unsigned int _78;
  int _79;
  int _80;
  int _81;
  long unsigned int _82;
  int _83;
  long unsigned int _84;
  unsigned char Index.26_85;
  long unsigned int _86;
  long unsigned int _87;
  long unsigned int _88;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Crypto_AES_Rcon_Fast = *.LC0;
  # DEBUG BEGIN_STMT
  ExpandedKey = {};
  # DEBUG BEGIN_STMT
  Index_97 = 0;
  # DEBUG Index => Index_97
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (unsigned int) Index_89;
  _2 = _1 * 4;
  _3 = KeySeed_110(D) + _2;
  _4 = *_3;
  _5 = (long unsigned int) _4;
  _6 = _5 << 24;
  _7 = (unsigned int) Index_89;
  _8 = _7 * 4;
  _9 = _8 + 1;
  _10 = KeySeed_110(D) + _9;
  _11 = *_10;
  _12 = (long unsigned int) _11;
  _13 = _12 << 16;
  _14 = _6 | _13;
  _15 = (unsigned int) Index_89;
  _16 = _15 * 4;
  _17 = _16 + 2;
  _18 = KeySeed_110(D) + _17;
  _19 = *_18;
  _20 = (long unsigned int) _19;
  _21 = _20 << 8;
  _22 = _14 | _21;
  _23 = (unsigned int) Index_89;
  _24 = _23 * 4;
  _25 = _24 + 3;
  _26 = KeySeed_110(D) + _25;
  _27 = *_26;
  _28 = (long unsigned int) _27;
  _29 = (int) Index_89;
  _30 = _22 | _28;
  ExpandedKey[_29] = _30;
  # DEBUG BEGIN_STMT
  Index.25_31 = Index_89;
  Index_112 = Index.25_31 + 1;
  # DEBUG Index => Index_112

  <bb 4> :
  # Index_89 = PHI <Index_97(2), Index_112(3)>
  # DEBUG Index => Index_89
  # DEBUG BEGIN_STMT
  if (Index_89 < SzeKey_98(D))
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Index_99 = SzeKey_98(D);
  # DEBUG Index => Index_99
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _32 = (unsigned int) Index_90;
  _33 = _32 + 4294967295;
  temp_105 = ExpandedKey[_33];
  # DEBUG temp => temp_105
  # DEBUG BEGIN_STMT
  _34 = Index_90 % SzeKey_98(D);
  if (_34 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _35 = temp_105 >> 16;
  _36 = _35 & 255;
  _37 = Crypto_AES_SboxNrm[_36];
  _38 = (long unsigned int) _37;
  _39 = _38 << 24;
  _40 = temp_105 >> 8;
  _41 = _40 & 255;
  _42 = Crypto_AES_SboxNrm[_41];
  _43 = (long unsigned int) _42;
  _44 = _43 << 16;
  _45 = _39 ^ _44;
  _46 = temp_105 & 255;
  _47 = Crypto_AES_SboxNrm[_46];
  _48 = (long unsigned int) _47;
  _49 = _48 << 8;
  _50 = _45 ^ _49;
  _51 = temp_105 >> 24;
  _52 = Crypto_AES_SboxNrm[_51];
  _53 = (long unsigned int) _52;
  _54 = _50 ^ _53;
  _55 = Index_90 / SzeKey_98(D);
  _56 = (unsigned int) _55;
  _57 = _56 + 4294967295;
  _58 = Crypto_AES_Rcon_Fast[_57];
  temp_107 = _54 ^ _58;
  # DEBUG temp => temp_107
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (SzeKey_98(D) > 6)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _59 = Index_90 % SzeKey_98(D);
  if (_59 == 4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _60 = temp_105 >> 24;
  _61 = Crypto_AES_SboxNrm[_60];
  _62 = (long unsigned int) _61;
  _63 = _62 << 24;
  _64 = temp_105 >> 16;
  _65 = _64 & 255;
  _66 = Crypto_AES_SboxNrm[_65];
  _67 = (long unsigned int) _66;
  _68 = _67 << 16;
  _69 = _63 ^ _68;
  _70 = temp_105 >> 8;
  _71 = _70 & 255;
  _72 = Crypto_AES_SboxNrm[_71];
  _73 = (long unsigned int) _72;
  _74 = _73 << 8;
  _75 = _69 ^ _74;
  _76 = temp_105 & 255;
  _77 = Crypto_AES_SboxNrm[_76];
  _78 = (long unsigned int) _77;
  temp_106 = _75 ^ _78;
  # DEBUG temp => temp_106

  <bb 11> :
  # temp_91 = PHI <temp_107(7), temp_105(8), temp_105(9), temp_106(10)>
  # DEBUG temp => temp_91
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _79 = (int) Index_90;
  _80 = (int) SzeKey_98(D);
  _81 = _79 - _80;
  _82 = ExpandedKey[_81];
  _83 = (int) Index_90;
  _84 = temp_91 ^ _82;
  ExpandedKey[_83] = _84;
  # DEBUG BEGIN_STMT
  Index.26_85 = Index_90;
  Index_109 = Index.26_85 + 1;
  # DEBUG Index => Index_109

  <bb 12> :
  # Index_90 = PHI <Index_99(5), Index_109(11)>
  # DEBUG Index => Index_90
  # DEBUG BEGIN_STMT
  _86 = (long unsigned int) Index_90;
  _87 = SzeTurn_100(D) + 1;
  _88 = _87 * 4;
  if (_86 < _88)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  TS_MemCpy32 (KeyExpdFastPtr_101(D), &ExpandedKey, 240);
  Crypto_AES_Rcon_Fast ={v} {CLOBBER};
  ExpandedKey ={v} {CLOBBER};
  return;

}


Crypto_AL_ENCRYPT_AES_ECB_MainFunction (Std_ReturnType * Result, boolean * Busy)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptMainFunction (Result_2(D), Busy_3(D));
  return;

}


Crypto_AL_ENCRYPT_AES_ECB_Cancel (uint32 ObjectId, const struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  unsigned char _1;
  Std_ReturnType _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_4 = 1;
  # DEBUG RetVal => RetVal_4
  # DEBUG BEGIN_STMT
  _1 = Crypto_AESEncryptContext.CtxState;
  if (_1 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AL_ENCRYPT_AES_ECB_Reset ();
  # DEBUG BEGIN_STMT
  RetVal_9 = 0;
  # DEBUG RetVal => RetVal_9
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CancelFlag = 1;
  # DEBUG BEGIN_STMT
  RetVal_7 = 12;
  # DEBUG RetVal => RetVal_7

  <bb 5> :
  # RetVal_2 = PHI <RetVal_9(3), RetVal_7(4)>
  # DEBUG RetVal => RetVal_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = RetVal_2;
  return _10;

}


Crypto_AL_ENCRYPT_AES_ECB_Finish (uint32 ObjectId, const struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  unsigned char _1;
  Std_ReturnType _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_4 = 1;
  # DEBUG RetVal => RetVal_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Crypto_AESEncryptContext.CtxState;
  if (_1 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptFinish ();
  # DEBUG BEGIN_STMT
  RetVal_8 = 0;
  # DEBUG RetVal => RetVal_8
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetVal_6 = 2;
  # DEBUG RetVal => RetVal_6

  <bb 5> :
  # RetVal_2 = PHI <RetVal_8(3), RetVal_6(4)>
  # DEBUG RetVal => RetVal_2
  # DEBUG BEGIN_STMT
  _9 = RetVal_2;
  return _9;

}


Crypto_AL_ENCRYPT_AES_ECB_Update (uint32 ObjectId, const struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  unsigned char _1;
  long unsigned int _2;
  uint32 * _3;
  long unsigned int _4;
  const uint8 * _5;
  long unsigned int _6;
  uint8 * _7;
  uint32 * _8;
  Std_ReturnType _18;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_11 = 1;
  # DEBUG RetVal => RetVal_11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Crypto_AESEncryptContext.CtxState;
  if (_1 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Job_14(D)->jobPrimitiveInputOutput.inputLength;
  if (_2 == 16)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = Job_14(D)->jobPrimitiveInputOutput.outputLengthPtr;
  _4 = *_3;
  if (_4 == 16)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = Job_14(D)->jobPrimitiveInputOutput.inputPtr;
  _6 = Job_14(D)->jobPrimitiveInputOutput.inputLength;
  _7 = Job_14(D)->jobPrimitiveInputOutput.outputPtr;
  _8 = Job_14(D)->jobPrimitiveInputOutput.outputLengthPtr;
  Crypto_AESEncryptUpdate (_5, _6, _7, _8);
  # DEBUG BEGIN_STMT
  RetVal_16 = 0;
  # DEBUG RetVal => RetVal_16
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal_17 = 1;
  # DEBUG RetVal => RetVal_17
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal_13 = 2;
  # DEBUG RetVal => RetVal_13

  <bb 8> :
  # RetVal_9 = PHI <RetVal_17(6), RetVal_13(7), RetVal_16(5)>
  # DEBUG RetVal => RetVal_9
  # DEBUG BEGIN_STMT
  _18 = RetVal_9;
  return _18;

}


Crypto_AL_ENCRYPT_AES_ECB_Start (uint32 ObjectId, struct Crypto_JobType * Job)
{
  struct Crypto_AES_ConfigType Crypto_AES_ECB_ENCRYPT_Cfg;
  Std_ReturnType RetVal;
  const struct Crypto_JobPrimitiveInfoType * _1;
  const struct Crypto_PrimitiveInfoType * _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  Std_ReturnType _32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_12 = 1;
  # DEBUG RetVal => RetVal_12
  # DEBUG BEGIN_STMT
  Crypto_AES_ECB_ENCRYPT_Cfg.Crypto_Generic_Callback = 0B;
  Crypto_AES_ECB_ENCRYPT_Cfg.TypeKey = 16;
  Crypto_AES_ECB_ENCRYPT_Cfg.ValuPrio = 0;
  Crypto_AES_ECB_ENCRYPT_Cfg.ObjId = 0;
  Crypto_AES_ECB_ENCRYPT_Cfg.Job = 0B;
  # DEBUG BEGIN_STMT
  Crypto_AL_ENCRYPT_AES_ECB_Reset ();
  # DEBUG BEGIN_STMT
  RetVal_20 = 1;
  # DEBUG RetVal => RetVal_20
  # DEBUG BEGIN_STMT
  _1 = Job_21(D)->jobPrimitiveInfo;
  _2 = _1->primitiveInfo;
  _3 = _2->algorithm.keyLength;
  Crypto_AesKey.length = _3;
  # DEBUG BEGIN_STMT
  _4 = Crypto_AesKey.length;
  Crypto_AES_ECB_ENCRYPT_Cfg.TypeKey = _4;
  # DEBUG BEGIN_STMT
  _5 = Crypto_AesKey.length;
  if (_5 == 16)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _6 = Crypto_AesKey.length;
  if (_6 == 24)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _7 = Crypto_AesKey.length;
  if (_7 == 32)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal_24 = 0;
  # DEBUG RetVal => RetVal_24

  <bb 6> :
  # RetVal_9 = PHI <RetVal_20(4), RetVal_24(5)>
  # DEBUG RetVal => RetVal_9
  # DEBUG BEGIN_STMT
  if (RetVal_9 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Crypto_AES_ECB_ENCRYPT_Cfg.Crypto_Generic_Callback = Crypto_AL_ENCRYPT_AES_ECB_CallBack;
  # DEBUG BEGIN_STMT
  Crypto_AES_ECB_ENCRYPT_Cfg.Job = Job_21(D);
  # DEBUG BEGIN_STMT
  Crypto_AES_ECB_ENCRYPT_Cfg.ObjId = ObjectId_27(D);
  # DEBUG BEGIN_STMT
  _8 = Job_21(D)->cryptoKeyId;
  RetVal_30 = Crypto_AL_KeyElementGet (_8, 1, &Crypto_AesKey.data, &Crypto_AesKey.length);
  # DEBUG RetVal => RetVal_30
  # DEBUG BEGIN_STMT
  if (RetVal_30 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptStart (&Crypto_AES_ECB_ENCRYPT_Cfg, &Crypto_AesKey);

  <bb 9> :
  # RetVal_10 = PHI <RetVal_9(6), RetVal_30(7), RetVal_30(8)>
  # DEBUG RetVal => RetVal_10
  # DEBUG BEGIN_STMT
  _32 = RetVal_10;
  Crypto_AES_ECB_ENCRYPT_Cfg ={v} {CLOBBER};
  return _32;

}


Crypto_AL_ENCRYPT_AES_ECB_Reset ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  TS_MemBZero32 (&Crypto_AESEncryptContext, 120);
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  return;

}


Crypto_AES_Helper_Encrypt_MainFunction ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptMainFunction (&Crypto_HelperEncryptResult, &Crypto_HelperEncryptBusy);
  return;

}


Crypto_AL_AES_EncryptPreCalc (const uint8 * InputPtr, uint8 * OutputPtr, uint32 * OutputLengthPtr, uint32 KeyLength, uint32 * expKey)
{
  struct Crypto_AES_ContextType Context;
  Std_ReturnType RetVal;
  long unsigned int _1;
  long unsigned int _2;
  Std_ReturnType _28;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_6 = 0;
  # DEBUG RetVal => RetVal_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Context.KeyExpdLen = 60;
  # DEBUG BEGIN_STMT
  Context.KeyExpdFast = expKey_9(D);
  # DEBUG BEGIN_STMT
  if (KeyLength_11(D) == 16)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 4;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 10;
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (KeyLength_11(D) == 24)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 6;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 12;
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (KeyLength_11(D) == 32)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 8;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 14;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal_12 = 1;
  # DEBUG RetVal => RetVal_12

  <bb 9> :
  # RetVal_3 = PHI <RetVal_6(3), RetVal_6(5), RetVal_6(7), RetVal_12(8)>
  # DEBUG RetVal => RetVal_3
  # DEBUG BEGIN_STMT
  if (RetVal_3 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Context.KeySeedLen = KeyLength_11(D);
  # DEBUG BEGIN_STMT
  TS_MemCpy32 (&Context.AesState, InputPtr_20(D), 16);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptCalculateRounds (&Context);
  # DEBUG BEGIN_STMT
  _1 = *OutputLengthPtr_23(D);
  if (_1 <= 16)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _2 = *OutputLengthPtr_23(D);
  TS_MemCpy32 (OutputPtr_24(D), &Context.AesState, _2);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  TS_MemCpy32 (OutputPtr_24(D), &Context.AesState, 16);
  # DEBUG BEGIN_STMT
  *OutputLengthPtr_23(D) = 16;

  <bb 13> :
  # DEBUG BEGIN_STMT
  _28 = RetVal_3;
  Context ={v} {CLOBBER};
  return _28;

}


Crypto_AES_Helper_Encrypt_SyncSingleCall (const uint8 * InputPtr, uint32 InputLength, uint8 * OutputPtr, uint32 * OutputLengthPtr, const struct Crypto_SymKeyType * KeyPtr)
{
  struct Crypto_AES_ContextType Context;
  Std_ReturnType RetVal;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  const uint8[16] * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  Std_ReturnType _34;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_12 = 0;
  # DEBUG RetVal => RetVal_12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Context.KeyExpdFast = &Crypto_AesEncryptExpKey;
  # DEBUG BEGIN_STMT
  _1 = KeyPtr_15(D)->length;
  if (_1 == 16)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 4;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 10;
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = KeyPtr_15(D)->length;
  if (_2 == 24)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 6;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 12;
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _3 = KeyPtr_15(D)->length;
  if (_3 == 32)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 8;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 14;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal_16 = 1;
  # DEBUG RetVal => RetVal_16

  <bb 9> :
  # RetVal_9 = PHI <RetVal_12(3), RetVal_12(5), RetVal_12(7), RetVal_16(8)>
  # DEBUG RetVal => RetVal_9
  # DEBUG BEGIN_STMT
  if (RetVal_9 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _4 = KeyPtr_15(D)->length;
  Context.KeySeedLen = _4;
  # DEBUG BEGIN_STMT
  _5 = &KeyPtr_15(D)->data;
  _6 = KeyPtr_15(D)->length;
  TS_MemCpy32 (&Context.KeySeed, _5, _6);
  # DEBUG BEGIN_STMT
  TS_MemCpy32 (&Context.AesState, InputPtr_25(D), 16);
  # DEBUG BEGIN_STMT
  Crypto_AESCommonCalculateKeySchedule (&Context);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptCalculateRounds (&Context);
  # DEBUG BEGIN_STMT
  _7 = *OutputLengthPtr_29(D);
  if (_7 <= 16)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _8 = *OutputLengthPtr_29(D);
  TS_MemCpy32 (OutputPtr_30(D), &Context.AesState, _8);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  TS_MemCpy32 (OutputPtr_30(D), &Context.AesState, 16);
  # DEBUG BEGIN_STMT
  *OutputLengthPtr_29(D) = 16;

  <bb 13> :
  # DEBUG BEGIN_STMT
  _34 = RetVal_9;
  Context ={v} {CLOBBER};
  return _34;

}


Crypto_AES_Helper_Encrypt_Finish (Crypto_ProcessingType IsSync)
{
  struct Crypto_JobType * _1;
  uint32 * _2;
  struct Crypto_JobType * _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_AESEncryptContext.Job;
  _2 = _1->jobPrimitiveInputOutput.outputLengthPtr;
  Crypto_AESEncryptContext.TmpOutputLengthPtr = _2;
  # DEBUG BEGIN_STMT
  _3 = Crypto_AESEncryptContext.Job;
  _3->jobPrimitiveInputOutput.outputLengthPtr = &Crypto_AESEncryptContext.KeySeedLen;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptFinish ();
  # DEBUG BEGIN_STMT
  if (IsSync_9(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AESHelperEncryptSynchronousMainCall ();

  <bb 4> :
  return;

}


Crypto_AES_Helper_Encrypt_Update (Crypto_ProcessingType IsSync, const uint8 * CipherTextPtr, uint32 CipherTextLength, uint8 * PlainTextPtr, uint32 * PlainTextLengthPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptUpdate (CipherTextPtr_3(D), CipherTextLength_4(D), PlainTextPtr_5(D), PlainTextLengthPtr_6(D));
  # DEBUG BEGIN_STMT
  if (IsSync_8(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AESHelperEncryptSynchronousMainCall ();

  <bb 4> :
  return;

}


Crypto_AES_Helper_Encrypt_Start (const uint32 ObjId, void (*<T542>) (struct Crypto_JobType *, uint8) Crypto_Generic_Callback, struct Crypto_JobType * Job, Crypto_ProcessingType IsSync, const struct Crypto_SymKeyType * KeyPtr)
{
  struct Crypto_AES_ConfigType Temp;
  Std_ReturnType RetVal;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  Std_ReturnType _27;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_8 = 1;
  # DEBUG RetVal => RetVal_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = KeyPtr_10(D)->length;
  if (_1 == 16)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Temp.TypeKey = 16;
  # DEBUG BEGIN_STMT
  RetVal_16 = 0;
  # DEBUG RetVal => RetVal_16
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = KeyPtr_10(D)->length;
  if (_2 == 24)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Temp.TypeKey = 24;
  # DEBUG BEGIN_STMT
  RetVal_14 = 0;
  # DEBUG RetVal => RetVal_14
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _3 = KeyPtr_10(D)->length;
  if (_3 == 32)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Temp.TypeKey = 32;
  # DEBUG BEGIN_STMT
  RetVal_12 = 0;
  # DEBUG RetVal => RetVal_12

  <bb 8> :
  # RetVal_4 = PHI <RetVal_16(3), RetVal_14(5), RetVal_8(6), RetVal_12(7)>
  # DEBUG RetVal => RetVal_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (RetVal_4 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Temp.Job = Job_17(D);
  # DEBUG BEGIN_STMT
  Temp.ObjId = ObjId_19(D);
  # DEBUG BEGIN_STMT
  Crypto_ModeEncryptCallBack = Crypto_Generic_Callback_21(D);
  # DEBUG BEGIN_STMT
  if (IsSync_23(D) == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Temp.Crypto_Generic_Callback = Crypto_Generic_Callback_21(D);
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Temp.Crypto_Generic_Callback = Crypto_AES_Helper_Encrypt_CallbackNotification;

  <bb 12> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptStart (&Temp, KeyPtr_10(D));

  <bb 13> :
  # DEBUG BEGIN_STMT
  _27 = RetVal_4;
  Temp ={v} {CLOBBER};
  return _27;

}


