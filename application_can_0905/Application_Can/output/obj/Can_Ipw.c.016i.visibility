
Marking local functions: Can_Ipw_InitRx Can_Ipw_SetControlerErrorInit Can_Ipw_InitBaudrate Can_Ipw_InitLegacyFifoFilter Can_Ipw_ParseData


Marking externally visible functions: Can_Ipw_ProcessRxMesgBuffer Can_Ipw_ProcessTxMesgBuffer Can_Ipw_MainFunction_Mode Can_Ipw_Write Can_Ipw_GetControllerRxErrorCounter Can_Ipw_GetControllerTxErrorCounter Can_Ipw_GetControllerErrorState Can_Ipw_EnableControllerInterrupts Can_Ipw_DisableControllerInterrupts Can_Ipw_SetControllerToStopMode Can_Ipw_SetControllerToStartMode Can_Ipw_DeInit Can_Ipw_Init


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

CanIf_RxIndication/52 (CanIf_RxIndication) @07f4ed20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_ParseData/5 
  Calls: 
Det_ASR43_ReportRuntimeError/51 (Det_ASR43_ReportRuntimeError) @07f4ea80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_ParseData/5 Can_Ipw_ProcessRxMesgBuffer/22 
  Calls: 
CanIf_PduInfo.12280/50 (CanIf_PduInfo) @07f56828
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Can_Ipw_ProcessRxMesgBuffer/22 (addr)Can_Ipw_ProcessRxMesgBuffer/22 (addr)
  Availability: available
  Varpool flags:
CanIf_Mailbox.12279/49 (CanIf_Mailbox) @07f567e0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Can_Ipw_ProcessRxMesgBuffer/22 (addr)Can_Ipw_ProcessRxMesgBuffer/22 (addr)
  Availability: available
  Varpool flags:
CanIf_TxConfirmation/48 (CanIf_TxConfirmation) @07f4e8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_ProcessTxMesgBuffer/21 
  Calls: 
CanIf_ControllerModeIndication/47 (CanIf_ControllerModeIndication) @07f4e700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_MainFunction_Mode/20 Can_Ipw_MainFunction_Mode/20 
  Calls: 
FlexCAN_Ip_GetStartMode_Privileged/46 (FlexCAN_Ip_GetStartMode_Privileged) @07f4e620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_MainFunction_Mode/20 Can_Ipw_MainFunction_Mode/20 
  Calls: 
FlexCAN_Ip_Send/45 (FlexCAN_Ip_Send) @07f4e460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_Write/18 
  Calls: 
FlexCAN_Ip_GetTransferStatus/44 (FlexCAN_Ip_GetTransferStatus) @07f4e380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_Write/18 
  Calls: 
FlexCAN_Ip_GetControllerRxErrorCounter/43 (FlexCAN_Ip_GetControllerRxErrorCounter) @07f4e1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_GetControllerRxErrorCounter/17 
  Calls: 
FlexCAN_Ip_GetControllerTxErrorCounter/42 (FlexCAN_Ip_GetControllerTxErrorCounter) @07f4e000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_GetControllerTxErrorCounter/16 
  Calls: 
FlexCAN_Ip_GetErrorStatus/41 (FlexCAN_Ip_GetErrorStatus) @07f41e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_GetControllerErrorState/15 
  Calls: 
FlexCAN_Ip_AbortTransfer/40 (FlexCAN_Ip_AbortTransfer) @07f41a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_SetControllerToStopMode/12 Can_Ipw_SetControllerToStopMode/12 
  Calls: 
FlexCAN_Ip_EnterFreezeMode_Privileged/39 (FlexCAN_Ip_EnterFreezeMode_Privileged) @07f419a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_SetControllerToStopMode/12 
  Calls: 
FlexCAN_Ip_SetStartMode_Privileged/38 (FlexCAN_Ip_SetStartMode_Privileged) @07f417e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_SetControlerErrorInit/10 
  Calls: 
FlexCAN_Ip_EnableInterrupts_Privileged/37 (FlexCAN_Ip_EnableInterrupts_Privileged) @07f41700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_EnableControllerInterrupts/14 Can_Ipw_SetControlerErrorInit/10 
  Calls: 
FlexCAN_Ip_SetErrorInt_Privileged/36 (FlexCAN_Ip_SetErrorInt_Privileged) @07f41620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_EnableControllerInterrupts/14 Can_Ipw_DisableControllerInterrupts/13 Can_Ipw_SetControllerToStopMode/12 Can_Ipw_SetControlerErrorInit/10 
  Calls: 
FlexCAN_Ip_RxFifo/35 (FlexCAN_Ip_RxFifo) @07f41380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_ProcessRxMesgBuffer/22 Can_Ipw_SetControllerToStartMode/11 
  Calls: 
FlexCAN_Ip_Receive/34 (FlexCAN_Ip_Receive) @07f412a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_ProcessRxMesgBuffer/22 Can_Ipw_SetControllerToStartMode/11 
  Calls: 
FlexCAN_Ip_Deinit_Privileged/33 (FlexCAN_Ip_Deinit_Privileged) @07f410e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_DeInit/9 
  Calls: 
FlexCAN_Ip_ConfigRxFifo_Privileged/32 (FlexCAN_Ip_ConfigRxFifo_Privileged) @07eb8d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_InitLegacyFifoFilter/6 
  Calls: 
FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/31 (FlexCAN_Ip_SetRxFifoGlobalMask_Privileged) @07eb8380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_InitLegacyFifoFilter/6 
  Calls: 
FlexCAN_Ip_SetRxIndividualMask_Privileged/30 (FlexCAN_Ip_SetRxIndividualMask_Privileged) @07eb8c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_InitLegacyFifoFilter/6 Can_Ipw_InitRx/19 
  Calls: 
FlexCAN_Ip_ConfigRxMb/29 (FlexCAN_Ip_ConfigRxMb) @07eb8b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_InitRx/19 
  Calls: 
FlexCAN_Ip_SetRxMaskType_Privileged/28 (FlexCAN_Ip_SetRxMaskType_Privileged) @07eb8a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_InitRx/19 
  Calls: 
FlexCAN_Ip_SetStopMode_Privileged/27 (FlexCAN_Ip_SetStopMode_Privileged) @07eb88c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_SetControllerToStopMode/12 Can_Ipw_Init/8 
  Calls: 
FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/26 (FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged) @07eb8700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_InitBaudrate/7 Can_Ipw_Init/8 
  Calls: 
FlexCAN_Ip_SetTDCOffset_Privileged/25 (FlexCAN_Ip_SetTDCOffset_Privileged) @07eb8620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_InitBaudrate/7 Can_Ipw_Init/8 
  Calls: 
FlexCAN_Ip_DisableInterrupts_Privileged/24 (FlexCAN_Ip_DisableInterrupts_Privileged) @07eb8540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_DisableControllerInterrupts/13 Can_Ipw_SetControllerToStopMode/12 Can_Ipw_SetControllerToStartMode/11 Can_Ipw_Init/8 
  Calls: 
FlexCAN_Ip_Init_Privileged/23 (FlexCAN_Ip_Init_Privileged) @07eb8460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Ipw_SetControllerToStartMode/11 Can_Ipw_Init/8 
  Calls: 
Can_Ipw_ProcessRxMesgBuffer/22 (Can_Ipw_ProcessRxMesgBuffer) @07eb82a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_Ipw_au16MbIdxToObjIDMap/3 (read)Can_Ipw_xStatus0/0 (addr)CanIf_Mailbox.12279/49 (addr)CanIf_PduInfo.12280/50 (addr)Can_Ipw_xStatus0/0 (addr)CanIf_Mailbox.12279/49 (addr)CanIf_PduInfo.12280/50 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_Ip_RxFifo/35 Can_Ipw_ParseData/5 Det_ASR43_ReportRuntimeError/51 FlexCAN_Ip_Receive/34 Can_Ipw_ParseData/5 
   Indirect call
   Indirect call
Can_Ipw_ProcessTxMesgBuffer/21 (Can_Ipw_ProcessTxMesgBuffer) @07eb80e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_Ipw_au16MbIdxToObjIDMap/3 (read)Can_Ipw_au16TxPduId/2 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanIf_TxConfirmation/48 
Can_Ipw_MainFunction_Mode/20 (Can_Ipw_MainFunction_Mode) @07eadee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanIf_ControllerModeIndication/47 FlexCAN_Ip_GetStartMode_Privileged/46 CanIf_ControllerModeIndication/47 FlexCAN_Ip_GetStartMode_Privileged/46 
Can_Ipw_InitRx/19 (Can_Ipw_InitRx) @07eadd20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Can_Ipw_SetControllerToStartMode/11 Can_Ipw_Init/8 
  Calls: Can_Ipw_InitLegacyFifoFilter/6 FlexCAN_Ip_SetRxIndividualMask_Privileged/30 FlexCAN_Ip_ConfigRxMb/29 FlexCAN_Ip_SetRxMaskType_Privileged/28 
Can_Ipw_Write/18 (Can_Ipw_Write) @07ead9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_Ipw_au16TxPduId/2 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_Ip_Send/45 FlexCAN_Ip_GetTransferStatus/44 
Can_Ipw_GetControllerRxErrorCounter/17 (Can_Ipw_GetControllerRxErrorCounter) @07ead7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_Ip_GetControllerRxErrorCounter/43 
Can_Ipw_GetControllerTxErrorCounter/16 (Can_Ipw_GetControllerTxErrorCounter) @07ead620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_Ip_GetControllerTxErrorCounter/42 
Can_Ipw_GetControllerErrorState/15 (Can_Ipw_GetControllerErrorState) @07ead460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_Ip_GetErrorStatus/41 
Can_Ipw_EnableControllerInterrupts/14 (Can_Ipw_EnableControllerInterrupts) @07ead2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_Ipw_abIsInterruptEnabled/4 (read)Can_Ipw_abIsInterruptEnabled/4 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_Ip_SetErrorInt_Privileged/36 FlexCAN_Ip_EnableInterrupts_Privileged/37 
Can_Ipw_DisableControllerInterrupts/13 (Can_Ipw_DisableControllerInterrupts) @07ead000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_Ipw_abIsInterruptEnabled/4 (read)Can_Ipw_abIsInterruptEnabled/4 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_Ip_SetErrorInt_Privileged/36 FlexCAN_Ip_DisableInterrupts_Privileged/24 
Can_Ipw_SetControllerToStopMode/12 (Can_Ipw_SetControllerToStopMode) @07ea3d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_Ipw_abIsInterruptEnabled/4 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_Ip_SetStopMode_Privileged/27 FlexCAN_Ip_AbortTransfer/40 FlexCAN_Ip_AbortTransfer/40 FlexCAN_Ip_SetErrorInt_Privileged/36 FlexCAN_Ip_DisableInterrupts_Privileged/24 FlexCAN_Ip_EnterFreezeMode_Privileged/39 
Can_Ipw_SetControllerToStartMode/11 (Can_Ipw_SetControllerToStartMode) @07ea3a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_Ipw_xStatus0/0 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Can_Ipw_SetControlerErrorInit/10 FlexCAN_Ip_RxFifo/35 FlexCAN_Ip_Receive/34 Can_Ipw_InitRx/19 Can_Ipw_InitBaudrate/7 FlexCAN_Ip_DisableInterrupts_Privileged/24 FlexCAN_Ip_Init_Privileged/23 
Can_Ipw_SetControlerErrorInit/10 (Can_Ipw_SetControlerErrorInit) @07ea3700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Can_Ipw_abIsInterruptEnabled/4 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Can_Ipw_SetControllerToStartMode/11 
  Calls: FlexCAN_Ip_SetStartMode_Privileged/38 FlexCAN_Ip_EnableInterrupts_Privileged/37 FlexCAN_Ip_SetErrorInt_Privileged/36 
Can_Ipw_DeInit/9 (Can_Ipw_DeInit) @07ea3460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_Ip_Deinit_Privileged/33 
Can_Ipw_Init/8 (Can_Ipw_Init) @07ea32a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_Ipw_xStatus0/0 (addr)Can_Ipw_abIsInterruptEnabled/4 (write)Can_Ipw_au16MbIdxToObjIDMap/3 (write)Can_Ipw_au16MbIdxToObjIDMap/3 (write)Can_Ipw_au16MbIdxToObjIDMap/3 (write)Can_Ipw_au16MbIdxToObjIDMap/3 (write)Can_Ipw_au16MbIdxToObjIDMap/3 (write)Can_Ipw_au16MbIdxToObjIDMap/3 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_Ip_SetStopMode_Privileged/27 Can_Ipw_InitRx/19 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/26 FlexCAN_Ip_SetTDCOffset_Privileged/25 FlexCAN_Ip_DisableInterrupts_Privileged/24 FlexCAN_Ip_Init_Privileged/23 
Can_Ipw_InitBaudrate/7 (Can_Ipw_InitBaudrate) @07e95c40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Can_Ipw_SetControllerToStartMode/11 
  Calls: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/26 FlexCAN_Ip_SetTDCOffset_Privileged/25 
Can_Ipw_InitLegacyFifoFilter/6 (Can_Ipw_InitLegacyFifoFilter) @07e958c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Can_Ipw_InitRx/19 
  Calls: FlexCAN_Ip_ConfigRxFifo_Privileged/32 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/31 FlexCAN_Ip_SetRxIndividualMask_Privileged/30 
Can_Ipw_ParseData/5 (Can_Ipw_ParseData) @07e95540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Can_Ipw_ProcessRxMesgBuffer/22 Can_Ipw_ProcessRxMesgBuffer/22 
  Calls: CanIf_RxIndication/52 Det_ASR43_ReportRuntimeError/51 
Can_Ipw_abIsInterruptEnabled/4 (Can_Ipw_abIsInterruptEnabled) @07e62d38
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Can_Ipw_Init/8 (write)Can_Ipw_SetControlerErrorInit/10 (read)Can_Ipw_SetControllerToStopMode/12 (read)Can_Ipw_DisableControllerInterrupts/13 (read)Can_Ipw_DisableControllerInterrupts/13 (write)Can_Ipw_EnableControllerInterrupts/14 (read)Can_Ipw_EnableControllerInterrupts/14 (write)
  Availability: available
  Varpool flags:
Can_Ipw_au16MbIdxToObjIDMap/3 (Can_Ipw_au16MbIdxToObjIDMap) @07e62cf0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Can_Ipw_Init/8 (write)Can_Ipw_Init/8 (write)Can_Ipw_Init/8 (write)Can_Ipw_Init/8 (write)Can_Ipw_Init/8 (write)Can_Ipw_Init/8 (write)Can_Ipw_ProcessTxMesgBuffer/21 (read)Can_Ipw_ProcessRxMesgBuffer/22 (read)
  Availability: available
  Varpool flags:
Can_Ipw_au16TxPduId/2 (Can_Ipw_au16TxPduId) @07e62ca8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Can_Ipw_Write/18 (write)Can_Ipw_ProcessTxMesgBuffer/21 (read)
  Availability: available
  Varpool flags:
Can_Ipw_xStatus0/0 (Can_Ipw_xStatus0) @07e62c18
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Can_Ipw_Init/8 (addr)Can_Ipw_SetControllerToStartMode/11 (addr)Can_Ipw_ProcessRxMesgBuffer/22 (addr)Can_Ipw_ProcessRxMesgBuffer/22 (addr)
  Availability: available
  Varpool flags:
Can_Ipw_ProcessRxMesgBuffer (const struct Can_ControllerConfigType * Can_pControllerConfig, const struct Can_HwObjectConfigType * Can_pHwObjectConfig, uint8 u8MbIdx)
{
  struct Flexcan_Ip_MsgBuffType * pReceivedDataBuffer;
  const struct Can_HwObjectConfigType * Can_pHwObject;
  static struct PduInfoType CanIf_PduInfo;
  static struct Can_HwType CanIf_Mailbox;
  Can_HwHandleType u8HwObjectID;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8HwObjectID = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Can_pHwObject = 0B;
  # DEBUG BEGIN_STMT
  pReceivedDataBuffer = 0B;
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = (int) u8MbIdx;
  u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[_2][_3];
  # DEBUG BEGIN_STMT
  if (u8HwObjectID != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  _4 = (unsigned int) u8HwObjectID;
  _5 = _4 * 36;
  _6 = Can_pHwObjectConfig + _5;
  _7 = _6->Can_bHwObjectUsesPolling;
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = (unsigned int) u8HwObjectID;
  _9 = _8 * 36;
  Can_pHwObject = Can_pHwObjectConfig + _9;
  # DEBUG BEGIN_STMT
  _10 = Can_pHwObject->Can_eReceiveType;
  if (_10 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _11 = Can_pControllerConfig->Can_u8ControllerID;
  _12 = (int) _11;
  _13 = &Can_Ipw_xStatus0;
  _14 = Can_pHwObject->Can_u8HwBufferIndex;
  _15 = (int) _14;
  pReceivedDataBuffer = _13->mbs[_15].pMBmessage;
  # DEBUG BEGIN_STMT
  Can_Ipw_ParseData (&CanIf_Mailbox, &CanIf_PduInfo, pReceivedDataBuffer, Can_pControllerConfig, Can_pHwObject);
  # DEBUG BEGIN_STMT
  _16 = Can_pControllerConfig->Can_u8ControllerOffset;
  _17 = Can_pHwObject->Can_u8HwBufferIndex;
  _18 = Can_pHwObject->Can_bHwObjectUsesPolling;
  FlexCAN_Ip_Receive (_16, _17, 0B, _18);
  goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _19 = Can_pHwObject->Can_eReceiveType;
  if (_19 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (u8MbIdx == 7)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR43_ReportRuntimeError (80, 0, 8, 1);
  # DEBUG BEGIN_STMT
  _20 = Can_pControllerConfig->Can_pLegacyFiFoOvfNotif;
  if (_20 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _21 = Can_pControllerConfig->Can_pLegacyFiFoOvfNotif;
  _21 ();
  goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (u8MbIdx == 6)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _22 = Can_pControllerConfig->Can_pLegacyFiFoWarnNotif;
  if (_22 != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _23 = Can_pControllerConfig->Can_pLegacyFiFoWarnNotif;
  _23 ();
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _24 = Can_pControllerConfig->Can_u8ControllerID;
  _25 = (int) _24;
  _26 = &Can_Ipw_xStatus0;
  _27 = Can_pHwObject->Can_u8HwBufferIndex;
  _28 = (int) _27;
  pReceivedDataBuffer = _26->mbs[_28].pMBmessage;
  # DEBUG BEGIN_STMT
  Can_Ipw_ParseData (&CanIf_Mailbox, &CanIf_PduInfo, pReceivedDataBuffer, Can_pControllerConfig, Can_pHwObject);
  # DEBUG BEGIN_STMT
  _29 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_RxFifo (_29, 0B);

  <bb 14> :
  # DEBUG BEGIN_STMT
  return;

}


Can_Ipw_ProcessTxMesgBuffer (const struct Can_ControllerConfigType * Can_pControllerConfig, const struct Can_HwObjectConfigType * Can_pHwObjectConfig, uint8 u8MbIdx)
{
  Can_HwHandleType u8HwObjectID;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8HwObjectID = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = (int) u8MbIdx;
  u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[_2][_3];
  # DEBUG BEGIN_STMT
  if (u8HwObjectID != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _4 = (unsigned int) u8HwObjectID;
  _5 = _4 * 36;
  _6 = Can_pHwObjectConfig + _5;
  _7 = _6->Can_bHwObjectUsesPolling;
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = (unsigned int) u8HwObjectID;
  _9 = _8 * 36;
  _10 = Can_pHwObjectConfig + _9;
  _11 = _10->Can_eReceiveType;
  if (_11 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _12 = Can_pControllerConfig->Can_u8ControllerID;
  _13 = (int) _12;
  _14 = (int) u8MbIdx;
  _15 = Can_Ipw_au16TxPduId[_13][_14];
  CanIf_TxConfirmation (_15);

  <bb 6> :
  return;

}


Can_Ipw_MainFunction_Mode (const struct Can_ControllerConfigType * Can_pControllerConfig, Can_ControllerStateType * Can_pControllerState)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = *Can_pControllerState;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Can_pControllerConfig->Can_u8ControllerOffset;
  _3 = FlexCAN_Ip_GetStartMode_Privileged (_2);
  if (_3 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  *Can_pControllerState = 2;
  # DEBUG BEGIN_STMT
  _4 = Can_pControllerConfig->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_4, 2);
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = *Can_pControllerState;
  if (_5 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = Can_pControllerConfig->Can_u8ControllerOffset;
  _7 = FlexCAN_Ip_GetStartMode_Privileged (_6);
  if (_7 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  *Can_pControllerState = 1;
  # DEBUG BEGIN_STMT
  _8 = Can_pControllerConfig->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_8, 1);

  <bb 8> :
  # DEBUG BEGIN_STMT
  return;

}


Can_Ipw_InitRx (const struct Can_ControllerConfigType * Can_pController)
{
  struct Flexcan_Ip_DataInfoType DataInfo;
  const struct Can_HwObjectConfigType * Can_pHwObject;
  uint8 u8HwObjRefIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Can_pController->Can_u8ControllerOffset;
  FlexCAN_Ip_SetRxMaskType_Privileged (_1, 1);
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx = 0;
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Can_pController->Can_ppHwObject;
  _3 = (unsigned int) u8HwObjRefIdx;
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pHwObject = *_5;
  # DEBUG BEGIN_STMT
  _6 = Can_pHwObject->Can_eReceiveType;
  if (_6 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  DataInfo.fd_enable = 0;
  # DEBUG BEGIN_STMT
  DataInfo.data_length = 0;
  # DEBUG BEGIN_STMT
  _7 = Can_pHwObject->Can_IdMessage;
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  DataInfo.msg_id_type = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  DataInfo.msg_id_type = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _8 = Can_pController->Can_u8ControllerOffset;
  _9 = Can_pHwObject->Can_u8HwBufferIndex;
  _10 = Can_pHwObject->Can_pHwFilterConfig;
  _11 = _10->Can_u32HwFilterCode;
  FlexCAN_Ip_ConfigRxMb (_8, _9, &DataInfo, _11);
  # DEBUG BEGIN_STMT
  _12 = Can_pController->Can_u8ControllerOffset;
  _13 = Can_pHwObject->Can_u8HwBufferIndex;
  _14 = Can_pHwObject->Can_pHwFilterConfig;
  _15 = _14->Can_u32HwFilterMask;
  FlexCAN_Ip_SetRxIndividualMask_Privileged (_12, _13, _15);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _16 = Can_pHwObject->Can_eReceiveType;
  if (_16 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Can_Ipw_InitLegacyFifoFilter (Can_pController, Can_pHwObject);

  <bb 10> :
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx.3_17 = u8HwObjRefIdx;
  u8HwObjRefIdx = u8HwObjRefIdx.3_17 + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _18 = Can_pController->Can_u8HwObjectRefCount;
  if (u8HwObjRefIdx < _18)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  DataInfo = {CLOBBER};
  return;

}


Can_Ipw_Write (const struct Can_ControllerConfigType * Can_pControllerConfig, const struct Can_HwObjectConfigType * Can_pHwObjectConfig, const struct Can_PduType * PduInfo)
{
  uint8 u8ObjIdx;
  struct Flexcan_Ip_DataInfoType DataInfo;
  Flexcan_Ip_StatusType eRetVal;
  Std_ReturnType iftmp.10;
  Std_ReturnType D.12373;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  u8ObjIdx = 0;
  # DEBUG BEGIN_STMT
  DataInfo.msg_id_type = 0;
  # DEBUG BEGIN_STMT
  DataInfo.data_length = 0;
  # DEBUG BEGIN_STMT
  DataInfo.fd_padding = 0;
  # DEBUG BEGIN_STMT
  DataInfo.fd_enable = 0;
  # DEBUG BEGIN_STMT
  DataInfo.enable_brs = 0;
  # DEBUG BEGIN_STMT
  DataInfo.is_remote = 0;
  # DEBUG BEGIN_STMT
  DataInfo.is_polling = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_pHwObjectConfig->Can_eReceiveType;
  if (_1 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = PduInfo->id;
  _3 = _2 >> 31;
  DataInfo.msg_id_type = _3;
  # DEBUG BEGIN_STMT
  _4 = PduInfo->length;
  _5 = (long unsigned int) _4;
  DataInfo.data_length = _5;
  # DEBUG BEGIN_STMT
  _6 = Can_pHwObjectConfig->Can_u8PaddingValue;
  DataInfo.fd_padding = _6;
  # DEBUG BEGIN_STMT
  _7 = PduInfo->id;
  _8 = _7 >> 30;
  _9 = (unsigned char) _8;
  _10 = _9 & 1;
  DataInfo.fd_enable = _10;
  # DEBUG BEGIN_STMT
  _11 = Can_pControllerConfig->Can_pBaudrateConfig;
  _12 = Can_pControllerConfig->Can_u16DefaultBaudrateID;
  _13 = (unsigned int) _12;
  _14 = _13 * 24;
  _15 = _11 + _14;
  _16 = _15->Can_bBitRateSwitch;
  DataInfo.enable_brs = _16;
  # DEBUG BEGIN_STMT
  DataInfo.is_remote = 0;
  # DEBUG BEGIN_STMT
  _17 = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
  DataInfo.is_polling = _17;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _18 = Can_pControllerConfig->Can_u8ControllerOffset;
  _19 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _20 = u8ObjIdx + _19;
  eRetVal = FlexCAN_Ip_GetTransferStatus (_18, _20);
  # DEBUG BEGIN_STMT
  if (eRetVal == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _21 = Can_pControllerConfig->Can_u8ControllerID;
  _22 = (int) _21;
  _23 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _24 = (int) _23;
  _25 = (int) u8ObjIdx;
  _26 = _24 + _25;
  _27 = PduInfo->swPduHandle;
  Can_Ipw_au16TxPduId[_22][_26] = _27;
  # DEBUG BEGIN_STMT
  _28 = Can_pControllerConfig->Can_u8ControllerOffset;
  _29 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _30 = u8ObjIdx + _29;
  _31 = PduInfo->id;
  _32 = PduInfo->sdu;
  eRetVal = FlexCAN_Ip_Send (_28, _30, &DataInfo, _31, _32);

  <bb 6> :
  # DEBUG BEGIN_STMT
  u8ObjIdx.9_33 = u8ObjIdx;
  u8ObjIdx = u8ObjIdx.9_33 + 1;
  # DEBUG BEGIN_STMT
  _34 = Can_pHwObjectConfig->Can_u8ObjectCount;
  if (u8ObjIdx < _34)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  if (eRetVal == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (eRetVal != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (eRetVal != 2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  eRetVal = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (eRetVal != 2)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  iftmp.10 = (Std_ReturnType) eRetVal;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.10 = 2;

  <bb 14> :
  D.12373 = iftmp.10;
  DataInfo = {CLOBBER};
  return D.12373;

}


Can_Ipw_GetControllerRxErrorCounter (const struct Can_ControllerConfigType * Can_pControllerConfig)
{
  uint8 D.12362;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  D.12362 = FlexCAN_Ip_GetControllerRxErrorCounter (_1);
  return D.12362;

}


Can_Ipw_GetControllerTxErrorCounter (const struct Can_ControllerConfigType * Can_pControllerConfig)
{
  uint8 D.12360;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  D.12360 = FlexCAN_Ip_GetControllerTxErrorCounter (_1);
  return D.12360;

}


Can_Ipw_GetControllerErrorState (const struct Can_ControllerConfigType * Can_pControllerConfig)
{
  uint32 Error;
  uint8 D.12358;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Error = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  Error = FlexCAN_Ip_GetErrorStatus (_1);
  # DEBUG BEGIN_STMT
  _2 = Error >> 4;
  _3 = (unsigned char) _2;
  D.12358 = _3 & 3;
  return D.12358;

}


Can_Ipw_EnableControllerInterrupts (const struct Can_ControllerConfigType * Can_pControllerConfig)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = Can_Ipw_abIsInterruptEnabled[_2];
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_EnableInterrupts_Privileged (_4);
  # DEBUG BEGIN_STMT
  _5 = Can_pControllerConfig->Can_bBusOffUsesPolling;
  if (_5 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_SetErrorInt_Privileged (_6, 4, 1);

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = Can_pControllerConfig->Can_u8ControllerID;
  _8 = (int) _7;
  Can_Ipw_abIsInterruptEnabled[_8] = 1;

  <bb 6> :
  return;

}


Can_Ipw_DisableControllerInterrupts (const struct Can_ControllerConfigType * Can_pControllerConfig)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = Can_Ipw_abIsInterruptEnabled[_2];
  if (_3 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_4);
  # DEBUG BEGIN_STMT
  _5 = Can_pControllerConfig->Can_u8ControllerID;
  _6 = (int) _5;
  Can_Ipw_abIsInterruptEnabled[_6] = 0;
  # DEBUG BEGIN_STMT
  _7 = Can_pControllerConfig->Can_bBusOffUsesPolling;
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_SetErrorInt_Privileged (_8, 4, 0);

  <bb 5> :
  return;

}


Can_Ipw_SetControllerToStopMode (const struct Can_ControllerConfigType * Can_pControllerConfig)
{
  uint8 u8Idx;
  const struct Can_HwObjectConfigType * Can_pHwObject;
  uint8 u8HwObjRefIdx;
  Std_ReturnType eReturnValue;
  Std_ReturnType D.12348;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  u8Idx = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  _2 = FlexCAN_Ip_EnterFreezeMode_Privileged (_1);
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = Can_pControllerConfig->Can_u8ControllerID;
  _4 = (int) _3;
  _5 = Can_Ipw_abIsInterruptEnabled[_4];
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_6);
  # DEBUG BEGIN_STMT
  _7 = Can_pControllerConfig->Can_bBusOffUsesPolling;
  if (_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_SetErrorInt_Privileged (_8, 4, 0);

  <bb 6> :
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx = 0;
  goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _9 = Can_pControllerConfig->Can_ppHwObject;
  _10 = (unsigned int) u8HwObjRefIdx;
  _11 = _10 * 4;
  _12 = _9 + _11;
  Can_pHwObject = *_12;
  # DEBUG BEGIN_STMT
  _13 = Can_pHwObject->Can_eReceiveType;
  if (_13 == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  u8Idx = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = Can_pControllerConfig->Can_u8ControllerOffset;
  _15 = Can_pHwObject->Can_u8HwBufferIndex;
  _16 = u8Idx + _15;
  FlexCAN_Ip_AbortTransfer (_14, _16);
  # DEBUG BEGIN_STMT
  u8Idx.7_17 = u8Idx;
  u8Idx = u8Idx.7_17 + 1;
  # DEBUG BEGIN_STMT
  _18 = Can_pHwObject->Can_u8ObjectCount;
  if (u8Idx < _18)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _19 = Can_pControllerConfig->Can_u8ControllerOffset;
  _20 = Can_pHwObject->Can_u8HwBufferIndex;
  FlexCAN_Ip_AbortTransfer (_19, _20);

  <bb 11> :
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx.8_21 = u8HwObjRefIdx;
  u8HwObjRefIdx = u8HwObjRefIdx.8_21 + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  _22 = Can_pControllerConfig->Can_u8HwObjectRefCount;
  if (u8HwObjRefIdx < _22)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _23 = Can_pControllerConfig->Can_u8ControllerOffset;
  _24 = FlexCAN_Ip_SetStopMode_Privileged (_23);
  eReturnValue = (Std_ReturnType) _24;
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  eReturnValue = 1;

  <bb 15> :
  # DEBUG BEGIN_STMT
  D.12348 = eReturnValue;
  return D.12348;

}


Can_Ipw_SetControllerToStartMode (const struct Can_ControllerConfigType * Can_pControllerConfig)
{
  Flexcan_Ip_StatusType eRetVal;
  const struct Can_HwObjectConfigType * Can_pHwObject;
  uint8 u8HwObjRefIdx;
  Std_ReturnType D.12327;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx = 0;
  # DEBUG BEGIN_STMT
  Can_pHwObject = 0B;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  _2 = Can_pControllerConfig->Can_u8ControllerID;
  _3 = (int) _2;
  _4 = &Can_Ipw_xStatus0;
  _5 = Can_pControllerConfig->HwChannelIpConfig;
  _6 = _5->pFlexcanIpHwConfig;
  eRetVal = FlexCAN_Ip_Init_Privileged (_1, _4, _6);
  # DEBUG BEGIN_STMT
  if (eRetVal == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _7 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_7);
  # DEBUG BEGIN_STMT
  Can_Ipw_InitBaudrate (Can_pControllerConfig);
  # DEBUG BEGIN_STMT
  Can_Ipw_InitRx (Can_pControllerConfig);
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx = 0;
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = Can_pControllerConfig->Can_ppHwObject;
  _9 = (unsigned int) u8HwObjRefIdx;
  _10 = _9 * 4;
  _11 = _8 + _10;
  Can_pHwObject = *_11;
  # DEBUG BEGIN_STMT
  _12 = Can_pHwObject->Can_bHwObjectUsesPolling;
  if (_12 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _13 = Can_pHwObject->Can_eReceiveType;
  switch (_13) <default: <L13> [INV], case 0: <L3> [INV], case 1 ... 2: <L4> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _14 = Can_pControllerConfig->Can_u8ControllerOffset;
  _15 = Can_pHwObject->Can_u8HwBufferIndex;
  _16 = Can_pHwObject->Can_bHwObjectUsesPolling;
  FlexCAN_Ip_Receive (_14, _15, 0B, _16);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _17 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_RxFifo (_17, 0B);
  # DEBUG BEGIN_STMT

  <bb 8> :
<L13>:
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx.6_18 = u8HwObjRefIdx;
  u8HwObjRefIdx = u8HwObjRefIdx.6_18 + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _19 = Can_pControllerConfig->Can_u8HwObjectRefCount;
  if (u8HwObjRefIdx < _19)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _20 = Can_Ipw_SetControlerErrorInit (Can_pControllerConfig);
  _21 = _20 != 0;
  eRetVal = (Flexcan_Ip_StatusType) _21;

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.12327 = (Std_ReturnType) eRetVal;
  return D.12327;

}


Can_Ipw_SetControlerErrorInit (const struct Can_ControllerConfigType * Can_pControllerConfig)
{
  Flexcan_Ip_StatusType eRetVal;
  Std_ReturnType D.12336;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = Can_Ipw_abIsInterruptEnabled[_2];
  if (_3 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = Can_pControllerConfig->Can_bBusOffUsesPolling;
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_SetErrorInt_Privileged (_5, 4, 1);

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_EnableInterrupts_Privileged (_6);

  <bb 6> :
  # DEBUG BEGIN_STMT
  _7 = Can_pControllerConfig->Can_u8ControllerOffset;
  eRetVal = FlexCAN_Ip_SetStartMode_Privileged (_7);
  # DEBUG BEGIN_STMT
  D.12336 = (Std_ReturnType) eRetVal;
  return D.12336;

}


Can_Ipw_DeInit (const struct Can_ControllerConfigType * Can_pControllerConfig)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_Deinit_Privileged (_1);
  return;

}


Can_Ipw_Init (const struct Can_ControllerConfigType * Can_pControllerConfig)
{
  uint8 u8HwBufferCount;
  const struct Can_HwObjectConfigType * Can_pHwObject;
  uint8 u8ObjIdx;
  uint8 u8HwObjRefIdx;
  Std_ReturnType eRetVal;
  Std_ReturnType D.12291;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal = 1;
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx = 0;
  # DEBUG BEGIN_STMT
  u8ObjIdx = 0;
  # DEBUG BEGIN_STMT
  Can_pHwObject = 0B;
  # DEBUG BEGIN_STMT
  u8HwBufferCount = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  _2 = Can_pControllerConfig->Can_u8ControllerID;
  _3 = (int) _2;
  _4 = &Can_Ipw_xStatus0;
  _5 = Can_pControllerConfig->HwChannelIpConfig;
  _6 = _5->pFlexcanIpHwConfig;
  _7 = FlexCAN_Ip_Init_Privileged (_1, _4, _6);
  eRetVal = (Std_ReturnType) _7;
  # DEBUG BEGIN_STMT
  _8 = Can_pControllerConfig->Can_u8ControllerID;
  _9 = (int) _8;
  Can_Ipw_abIsInterruptEnabled[_9] = 1;
  # DEBUG BEGIN_STMT
  if (eRetVal == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _10 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_10);
  # DEBUG BEGIN_STMT
  _11 = Can_pControllerConfig->Can_pBaudrateConfig;
  _12 = Can_pControllerConfig->Can_u16DefaultBaudrateID;
  _13 = (unsigned int) _12;
  _14 = _13 * 24;
  _15 = _11 + _14;
  _16 = _15->Can_bFDFrame;
  if (_16 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _17 = Can_pControllerConfig->Can_u8ControllerOffset;
  _18 = Can_pControllerConfig->Can_pBaudrateConfig;
  _19 = Can_pControllerConfig->Can_u16DefaultBaudrateID;
  _20 = (unsigned int) _19;
  _21 = _20 * 24;
  _22 = _18 + _21;
  _23 = _22->Can_bTrcvDelayEnable;
  _24 = Can_pControllerConfig->Can_pBaudrateConfig;
  _25 = Can_pControllerConfig->Can_u16DefaultBaudrateID;
  _26 = (unsigned int) _25;
  _27 = _26 * 24;
  _28 = _24 + _27;
  _29 = _28->Can_u8TrcvDelayCompOffset;
  FlexCAN_Ip_SetTDCOffset_Privileged (_17, _23, _29);

  <bb 5> :
  # DEBUG BEGIN_STMT
  _30 = Can_pControllerConfig->Can_u8ControllerOffset;
  _31 = Can_pControllerConfig->Can_pBaudrateConfig;
  _32 = Can_pControllerConfig->Can_u16DefaultBaudrateID;
  _33 = (unsigned int) _32;
  _34 = _33 * 24;
  _35 = _31 + _34;
  _36 = _35->Can_u8TxArbitrationStartDelay;
  FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (_30, _36);
  # DEBUG BEGIN_STMT
  Can_Ipw_InitRx (Can_pControllerConfig);

  <bb 6> :
  # DEBUG BEGIN_STMT
  u8HwBufferCount = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _37 = Can_pControllerConfig->Can_u8ControllerID;
  _38 = (int) _37;
  _39 = (int) u8HwBufferCount;
  Can_Ipw_au16MbIdxToObjIDMap[_38][_39] = 255;
  # DEBUG BEGIN_STMT
  u8HwBufferCount.0_40 = u8HwBufferCount;
  u8HwBufferCount = u8HwBufferCount.0_40 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (u8HwBufferCount <= 63)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx = 0;
  goto <bb 17>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _41 = Can_pControllerConfig->Can_ppHwObject;
  _42 = (unsigned int) u8HwObjRefIdx;
  _43 = _42 * 4;
  _44 = _41 + _43;
  Can_pHwObject = *_44;
  # DEBUG BEGIN_STMT
  _45 = Can_pHwObject->Can_eReceiveType;
  switch (_45) <default: <L19> [INV], case 0: <L12> [INV], case 1: <L13> [INV], case 3: <L8> [INV]>

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  u8ObjIdx = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _46 = Can_pControllerConfig->Can_u8ControllerID;
  _47 = (int) _46;
  _48 = Can_pHwObject->Can_u8HwBufferIndex;
  _49 = (int) _48;
  _50 = (int) u8ObjIdx;
  _51 = _49 + _50;
  _52 = Can_pHwObject->Can_HwObjectID;
  Can_Ipw_au16MbIdxToObjIDMap[_47][_51] = _52;
  # DEBUG BEGIN_STMT
  u8ObjIdx.1_53 = u8ObjIdx;
  u8ObjIdx = u8ObjIdx.1_53 + 1;

  <bb 13> :
  # DEBUG BEGIN_STMT
  _54 = Can_pHwObject->Can_u8ObjectCount;
  if (u8ObjIdx < _54)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
<L12>:
  # DEBUG BEGIN_STMT
  _55 = Can_pControllerConfig->Can_u8ControllerID;
  _56 = (int) _55;
  _57 = Can_pHwObject->Can_u8HwBufferIndex;
  _58 = (int) _57;
  _59 = Can_pHwObject->Can_HwObjectID;
  Can_Ipw_au16MbIdxToObjIDMap[_56][_58] = _59;
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 15> :
<L13>:
  # DEBUG BEGIN_STMT
  _60 = Can_pControllerConfig->Can_u8ControllerID;
  _61 = (int) _60;
  _62 = Can_pHwObject->Can_u8HwBufferIndex;
  _63 = (int) _62;
  _64 = Can_pHwObject->Can_HwObjectID;
  Can_Ipw_au16MbIdxToObjIDMap[_61][_63] = _64;
  # DEBUG BEGIN_STMT
  _65 = Can_pControllerConfig->Can_u8ControllerID;
  _66 = (int) _65;
  _67 = Can_pHwObject->Can_HwObjectID;
  Can_Ipw_au16MbIdxToObjIDMap[_66][6] = _67;
  # DEBUG BEGIN_STMT
  _68 = Can_pControllerConfig->Can_u8ControllerID;
  _69 = (int) _68;
  _70 = Can_pHwObject->Can_HwObjectID;
  Can_Ipw_au16MbIdxToObjIDMap[_69][7] = _70;
  # DEBUG BEGIN_STMT

  <bb 16> :
<L19>:
  # DEBUG BEGIN_STMT
  u8HwObjRefIdx.2_71 = u8HwObjRefIdx;
  u8HwObjRefIdx = u8HwObjRefIdx.2_71 + 1;

  <bb 17> :
  # DEBUG BEGIN_STMT
  _72 = Can_pControllerConfig->Can_u8HwObjectRefCount;
  if (u8HwObjRefIdx < _72)
    goto <bb 10>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _73 = Can_pControllerConfig->Can_u8ControllerOffset;
  _74 = FlexCAN_Ip_SetStopMode_Privileged (_73);
  eRetVal = (Std_ReturnType) _74;
  # DEBUG BEGIN_STMT
  D.12291 = eRetVal;
  return D.12291;

}


Can_Ipw_InitBaudrate (const struct Can_ControllerConfigType * ControllerConfig)
{
  uint16 BaudRateConfigID;

  <bb 2> :
  # DEBUG BEGIN_STMT
  BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
  # DEBUG BEGIN_STMT
  _1 = ControllerConfig->Can_pBaudrateConfig;
  _2 = (unsigned int) BaudRateConfigID;
  _3 = _2 * 24;
  _4 = _1 + _3;
  _5 = _4->Can_bFDFrame;
  if (_5 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = ControllerConfig->Can_u8ControllerOffset;
  _7 = ControllerConfig->Can_pBaudrateConfig;
  _8 = (unsigned int) BaudRateConfigID;
  _9 = _8 * 24;
  _10 = _7 + _9;
  _11 = _10->Can_bTrcvDelayEnable;
  _12 = ControllerConfig->Can_pBaudrateConfig;
  _13 = (unsigned int) BaudRateConfigID;
  _14 = _13 * 24;
  _15 = _12 + _14;
  _16 = _15->Can_u8TrcvDelayCompOffset;
  FlexCAN_Ip_SetTDCOffset_Privileged (_6, _11, _16);

  <bb 4> :
  # DEBUG BEGIN_STMT
  _17 = ControllerConfig->Can_u8ControllerOffset;
  _18 = ControllerConfig->Can_pBaudrateConfig;
  _19 = (unsigned int) BaudRateConfigID;
  _20 = _19 * 24;
  _21 = _18 + _20;
  _22 = _21->Can_u8TxArbitrationStartDelay;
  FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (_17, _22);
  return;

}


Can_Ipw_InitLegacyFifoFilter (const struct Can_ControllerConfigType * Can_pController, const struct Can_HwObjectConfigType * Can_pHwObject)
{
  struct Flexcan_Ip_IdTableType RxFifoFilters[128];
  Flexcan_Ip_RxFifoIdElementFormatType eElementFormat;
  uint8 u8FiFoFilterIndvCount;
  uint32 u32HwFilterMask;
  uint8 u8HwFilterCount;
  uint8 u8FilterIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8FilterIdx = 0;
  # DEBUG BEGIN_STMT
  u8HwFilterCount = 0;
  # DEBUG BEGIN_STMT
  u32HwFilterMask = 0;
  # DEBUG BEGIN_STMT
  u8FiFoFilterIndvCount = 0;
  # DEBUG BEGIN_STMT
  eElementFormat = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Can_pHwObject->Can_u8HwFilterCount;
  _2 = _1 / 4;
  _3 = (unsigned int) _2;
  _4 = _3 + 6;
  if (_4 <= 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = Can_pHwObject->Can_u8HwFilterCount;
  _6 = _5 / 4;
  u8FiFoFilterIndvCount = _6 + 6;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  u8FiFoFilterIndvCount = 32;

  <bb 5> :
  # DEBUG BEGIN_STMT
  u8FilterIdx = 0;
  goto <bb 18>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _7 = Can_pController->Can_eLegacyAcceptanceMode;
  if (_7 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount;
  # DEBUG BEGIN_STMT
  u32HwFilterMask = 3221225472;
  # DEBUG BEGIN_STMT
  eElementFormat = 0;
  # DEBUG BEGIN_STMT
  _8 = Can_pHwObject->Can_IdMessage;
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _9 = Can_pHwObject->Can_pHwFilterConfig;
  _10 = (unsigned int) u8FilterIdx;
  _11 = _10 * 8;
  _12 = _9 + _11;
  _13 = _12->Can_u32HwFilterMask;
  _14 = _13 << 1;
  u32HwFilterMask = u32HwFilterMask | _14;
  goto <bb 17>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _15 = Can_pHwObject->Can_pHwFilterConfig;
  _16 = (unsigned int) u8FilterIdx;
  _17 = _16 * 8;
  _18 = _15 + _17;
  _19 = _18->Can_u32HwFilterMask;
  _20 = _19 << 19;
  u32HwFilterMask = u32HwFilterMask | _20;
  goto <bb 17>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _21 = Can_pController->Can_eLegacyAcceptanceMode;
  if (_21 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _22 = Can_pHwObject->Can_u8HwFilterCount;
  u8HwFilterCount = _22 * 2;
  # DEBUG BEGIN_STMT
  u32HwFilterMask = 3221274624;
  # DEBUG BEGIN_STMT
  eElementFormat = 1;
  # DEBUG BEGIN_STMT
  _23 = Can_pHwObject->Can_IdMessage;
  if (_23 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _24 = Can_pHwObject->Can_pHwFilterConfig;
  _25 = (unsigned int) u8FilterIdx;
  _26 = _25 * 16;
  _27 = _24 + _26;
  _28 = _27->Can_u32HwFilterMask;
  _29 = _28 >> 15;
  _30 = _29 << 16;
  u32HwFilterMask = u32HwFilterMask | _30;
  # DEBUG BEGIN_STMT
  _31 = Can_pHwObject->Can_pHwFilterConfig;
  _32 = (unsigned int) u8FilterIdx;
  _33 = _32 * 16;
  _34 = _33 + 8;
  _35 = _31 + _34;
  _36 = _35->Can_u32HwFilterMask;
  _37 = _36 >> 15;
  u32HwFilterMask = u32HwFilterMask | _37;
  goto <bb 17>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _38 = Can_pHwObject->Can_pHwFilterConfig;
  _39 = (unsigned int) u8FilterIdx;
  _40 = _39 * 16;
  _41 = _38 + _40;
  _42 = _41->Can_u32HwFilterMask;
  _43 = _42 << 19;
  u32HwFilterMask = u32HwFilterMask | _43;
  # DEBUG BEGIN_STMT
  _44 = Can_pHwObject->Can_pHwFilterConfig;
  _45 = (unsigned int) u8FilterIdx;
  _46 = _45 * 16;
  _47 = _46 + 8;
  _48 = _44 + _47;
  _49 = _48->Can_u32HwFilterMask;
  _50 = _49 << 3;
  u32HwFilterMask = u32HwFilterMask | _50;
  goto <bb 17>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _51 = Can_pHwObject->Can_u8HwFilterCount;
  u8HwFilterCount = _51 * 4;
  # DEBUG BEGIN_STMT
  u32HwFilterMask = 0;
  # DEBUG BEGIN_STMT
  eElementFormat = 2;
  # DEBUG BEGIN_STMT
  _52 = Can_pHwObject->Can_IdMessage;
  if (_52 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _53 = Can_pHwObject->Can_pHwFilterConfig;
  _54 = (unsigned int) u8FilterIdx;
  _55 = _54 * 32;
  _56 = _53 + _55;
  _57 = _56->Can_u32HwFilterMask;
  _58 = _57 >> 21;
  _59 = _58 << 24;
  u32HwFilterMask = u32HwFilterMask | _59;
  # DEBUG BEGIN_STMT
  _60 = Can_pHwObject->Can_pHwFilterConfig;
  _61 = (unsigned int) u8FilterIdx;
  _62 = _61 * 32;
  _63 = _62 + 8;
  _64 = _60 + _63;
  _65 = _64->Can_u32HwFilterMask;
  _66 = _65 >> 21;
  _67 = _66 << 16;
  u32HwFilterMask = u32HwFilterMask | _67;
  # DEBUG BEGIN_STMT
  _68 = Can_pHwObject->Can_pHwFilterConfig;
  _69 = (unsigned int) u8FilterIdx;
  _70 = _69 * 32;
  _71 = _70 + 16;
  _72 = _68 + _71;
  _73 = _72->Can_u32HwFilterMask;
  _74 = _73 >> 21;
  _75 = _74 << 8;
  u32HwFilterMask = u32HwFilterMask | _75;
  # DEBUG BEGIN_STMT
  _76 = Can_pHwObject->Can_pHwFilterConfig;
  _77 = (unsigned int) u8FilterIdx;
  _78 = _77 * 32;
  _79 = _78 + 24;
  _80 = _76 + _79;
  _81 = _80->Can_u32HwFilterMask;
  _82 = _81 >> 21;
  u32HwFilterMask = u32HwFilterMask | _82;
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _83 = Can_pHwObject->Can_pHwFilterConfig;
  _84 = (unsigned int) u8FilterIdx;
  _85 = _84 * 32;
  _86 = _83 + _85;
  _87 = _86->Can_u32HwFilterMask;
  _88 = _87 >> 3;
  _89 = _88 << 24;
  u32HwFilterMask = u32HwFilterMask | _89;
  # DEBUG BEGIN_STMT
  _90 = Can_pHwObject->Can_pHwFilterConfig;
  _91 = (unsigned int) u8FilterIdx;
  _92 = _91 * 32;
  _93 = _92 + 8;
  _94 = _90 + _93;
  _95 = _94->Can_u32HwFilterMask;
  _96 = _95 >> 3;
  _97 = _96 << 16;
  u32HwFilterMask = u32HwFilterMask | _97;
  # DEBUG BEGIN_STMT
  _98 = Can_pHwObject->Can_pHwFilterConfig;
  _99 = (unsigned int) u8FilterIdx;
  _100 = _99 * 32;
  _101 = _100 + 16;
  _102 = _98 + _101;
  _103 = _102->Can_u32HwFilterMask;
  _104 = _103 >> 3;
  _105 = _104 << 8;
  u32HwFilterMask = u32HwFilterMask | _105;
  # DEBUG BEGIN_STMT
  _106 = Can_pHwObject->Can_pHwFilterConfig;
  _107 = (unsigned int) u8FilterIdx;
  _108 = _107 * 32;
  _109 = _108 + 24;
  _110 = _106 + _109;
  _111 = _110->Can_u32HwFilterMask;
  _112 = _111 >> 3;
  u32HwFilterMask = u32HwFilterMask | _112;

  <bb 17> :
  # DEBUG BEGIN_STMT
  _113 = Can_pController->Can_u8ControllerOffset;
  FlexCAN_Ip_SetRxIndividualMask_Privileged (_113, u8FilterIdx, u32HwFilterMask);
  # DEBUG BEGIN_STMT
  u8FilterIdx.4_114 = u8FilterIdx;
  u8FilterIdx = u8FilterIdx.4_114 + 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  if (u8FilterIdx < u8FiFoFilterIndvCount)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _115 = Can_pHwObject->Can_u8HwFilterCount;
  if (u8FilterIdx < _115)
    goto <bb 6>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _116 = Can_pController->Can_u8ControllerOffset;
  _117 = Can_pController->Can_u32LegacyGlobalMask;
  FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (_116, _117);
  # DEBUG BEGIN_STMT
  u8FilterIdx = 0;
  goto <bb 25>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _118 = Can_pHwObject->Can_pHwFilterConfig;
  _119 = (unsigned int) u8FilterIdx;
  _120 = _119 * 8;
  _121 = _118 + _120;
  _122 = (int) u8FilterIdx;
  _123 = _121->Can_u32HwFilterCode;
  RxFifoFilters[_122].id = _123;
  # DEBUG BEGIN_STMT
  _124 = Can_pHwObject->Can_IdMessage;
  if (_124 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _125 = (int) u8FilterIdx;
  RxFifoFilters[_125].isExtendedFrame = 1;
  goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  _126 = (int) u8FilterIdx;
  RxFifoFilters[_126].isExtendedFrame = 0;

  <bb 24> :
  # DEBUG BEGIN_STMT
  _127 = (int) u8FilterIdx;
  RxFifoFilters[_127].isRemoteFrame = 0;
  # DEBUG BEGIN_STMT
  u8FilterIdx.5_128 = u8FilterIdx;
  u8FilterIdx = u8FilterIdx.5_128 + 1;

  <bb 25> :
  # DEBUG BEGIN_STMT
  if (u8FilterIdx < u8HwFilterCount)
    goto <bb 21>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  _129 = Can_pController->Can_u8ControllerOffset;
  FlexCAN_Ip_ConfigRxFifo_Privileged (_129, eElementFormat, &RxFifoFilters[0]);
  RxFifoFilters = {CLOBBER};
  return;

}


Can_Ipw_ParseData (struct Can_HwType * CanIf_Mailbox, struct PduInfoType * CanIf_PduInfo, struct Flexcan_Ip_MsgBuffType * pReceivedDataBuffer, const struct Can_ControllerConfigType * Can_pControllerConfig, const struct Can_HwObjectConfigType * Can_pHwObjectConfig)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = pReceivedDataBuffer->msgId;
  CanIf_Mailbox->CanId = _1;
  # DEBUG BEGIN_STMT
  _2 = pReceivedDataBuffer->cs;
  _3 = _2 & 2097152;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = CanIf_Mailbox->CanId;
  _5 = _4 | 2147483648;
  CanIf_Mailbox->CanId = _5;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = Can_pHwObjectConfig->Can_eReceiveType;
  if (_6 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = pReceivedDataBuffer->cs;
  _8 = _7 & 251658240;
  if (_8 == 100663296)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR43_ReportRuntimeError (80, 0, 8, 1);

  <bb 7> :
  # DEBUG BEGIN_STMT
  _9 = Can_pHwObjectConfig->Can_eReceiveType;
  if (_9 != 1)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _10 = pReceivedDataBuffer->cs;
  _11 = (signed int) _10;
  if (_11 < 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _12 = CanIf_Mailbox->CanId;
  _13 = _12 | 1073741824;
  CanIf_Mailbox->CanId = _13;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _14 = Can_pHwObjectConfig->Can_HwObjectID;
  CanIf_Mailbox->Hoh = _14;
  # DEBUG BEGIN_STMT
  _15 = Can_pControllerConfig->Can_u8AbstControllerID;
  CanIf_Mailbox->ControllerId = _15;
  # DEBUG BEGIN_STMT
  _16 = pReceivedDataBuffer->dataLen;
  _17 = (short unsigned int) _16;
  CanIf_PduInfo->SduLength = _17;
  # DEBUG BEGIN_STMT
  _18 = &pReceivedDataBuffer->data[0];
  CanIf_PduInfo->SduDataPtr = _18;
  # DEBUG BEGIN_STMT
  CanIf_RxIndication (CanIf_Mailbox, CanIf_PduInfo);
  return;

}


