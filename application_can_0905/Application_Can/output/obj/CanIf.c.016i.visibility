
Marking local functions: CanIf_ProcessTxLength CanIf_ProcessRxPdu CanIf_SendTxConfirmation CanIf_SendRxIndication CanIf_RxIndication_DetChecks CanIf_BinarySwFiltering CanIf_PerformSwFiltering CanIf_SoftwareFiltering CanIf_SetOffline CanIf_SetPduModeInternal CanIf_SetControllerModeInternal


Marking externally visible functions: CanIf_CheckTrcvWakeFlagIndication CanIf_ClearTrcvWufFlagIndication CanIf_ConfirmPnAvailability CanIf_TrcvModeIndication CanIf_ControllerModeIndication CanIf_ControllerBusOff CanIf_RxIndication CanIf_TxConfirmation CanIf_CheckTrcvWakeFlag CanIf_ClearTrcvWufFlag CanIf_CheckWakeup CanIf_SetTrcvWakeupMode CanIf_GetTrcvWakeupReason CanIf_GetTrcvMode CanIf_SetTrcvMode CanIf_GetPduMode CanIf_SetPduMode CanIf_Transmit CanIf_GetControllerMode CanIf_SetControllerMode CanIf_Init CanIf_IsValidConfig CanIf_CheckWakeFlag_HlpNoPn CanIf_ClearTrcvWufFlag_HlpNoPn


Marking externally visible variables: CanIf_ConfigPtr CanIf_TxPduConfigPtr


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

CanSM_CheckTransceiverWakeFlagIndication/57 (CanSM_CheckTransceiverWakeFlagIndication) @071efe00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanIf_CheckTrcvWakeFlagIndication/28 
  Calls: 
CanSM_ClearTrcvWufFlagIndication/56 (CanSM_ClearTrcvWufFlagIndication) @071efc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanIf_ClearTrcvWufFlagIndication/27 
  Calls: 
CanSM_ConfirmPnAvailability/55 (CanSM_ConfirmPnAvailability) @071efa80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanIf_ConfirmPnAvailability/26 
  Calls: 
CanSM_TransceiverModeIndication/54 (CanSM_TransceiverModeIndication) @071ef8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanIf_TrcvModeIndication/25 
  Calls: 
CanSM_ControllerModeIndication/53 (CanSM_ControllerModeIndication) @071ef700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanIf_ControllerModeIndication/24 
  Calls: 
CanSM_ControllerBusOff/52 (CanSM_ControllerBusOff) @071ef540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanIf_ControllerBusOff/23 
  Calls: 
CanIf_CanTrcvConfig/51 (CanIf_CanTrcvConfig) @0718e4c8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanIf_SetTrcvMode/14 (read)CanIf_GetTrcvMode/15 (read)CanIf_GetTrcvWakeupReason/16 (read)CanIf_SetTrcvWakeupMode/17 (read)CanIf_CheckWakeup/18 (read)CanIf_ClearTrcvWufFlag/19 (read)CanIf_CheckTrcvWakeFlag/20 (read)
  Availability: not_available
  Varpool flags: read-only
CanIf_CbkFctPtrTbl/50 (CanIf_CbkFctPtrTbl) @07184240
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanIf_SendTxConfirmation/37 (read)CanIf_SendTxConfirmation/37 (read)CanIf_SendRxIndication/36 (read)CanIf_SendRxIndication/36 (read)
  Availability: not_available
  Varpool flags: read-only
Det_ASR43_ReportRuntimeError/49 (Det_ASR43_ReportRuntimeError) @0717d620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanIf_ProcessTxLength/39 
  Calls: 
SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/48 (SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0) @0717d0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanIf_ControllerBusOff/23 CanIf_ProcessRxPdu/38 CanIf_ProcessRxPdu/38 CanIf_TxConfirmation/21 CanIf_SetPduModeInternal/30 CanIf_Transmit/11 CanIf_Transmit/11 CanIf_GetControllerMode/10 
  Calls: 
SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/47 (SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0) @0717d000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanIf_ControllerBusOff/23 CanIf_ProcessRxPdu/38 CanIf_ProcessRxPdu/38 CanIf_TxConfirmation/21 CanIf_SetPduModeInternal/30 CanIf_Transmit/11 CanIf_Transmit/11 CanIf_GetControllerMode/10 
  Calls: 
CanIf_CanDrvFctConfig/46 (CanIf_CanDrvFctConfig) @07177678
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanIf_SetControllerModeInternal/29 (read)CanIf_SetControllerModeInternal/29 (read)CanIf_SetControllerModeInternal/29 (read)CanIf_Transmit/11 (read)CanIf_RxIndication/22 (read)
  Availability: not_available
  Varpool flags: read-only
CanIf_PduMode/45 (CanIf_PduMode) @07163c60
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanIf_Init/8 (write)CanIf_SetControllerModeInternal/29 (write)CanIf_SetControllerModeInternal/29 (write)CanIf_Transmit/11 (read)CanIf_SetPduModeInternal/30 (read)CanIf_SetPduModeInternal/30 (write)CanIf_SetPduModeInternal/30 (write)CanIf_SetOffline/31 (write)CanIf_GetPduMode/13 (read)CanIf_TxConfirmation/21 (read)CanIf_ProcessRxPdu/38 (read)CanIf_ProcessRxPdu/38 (read)CanIf_ControllerBusOff/23 (write)
  Availability: not_available
  Varpool flags:
CanIf_CanControllerFlags/44 (CanIf_CanControllerFlags) @07163c18
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanIf_Init/8 (write)CanIf_SetControllerModeInternal/29 (read)CanIf_SetControllerModeInternal/29 (write)CanIf_Transmit/11 (read)CanIf_SetPduModeInternal/30 (read)CanIf_SetPduModeInternal/30 (write)CanIf_TxConfirmation/21 (read)CanIf_TxConfirmation/21 (write)CanIf_ProcessRxPdu/38 (read)CanIf_ProcessRxPdu/38 (read)CanIf_ProcessRxPdu/38 (write)
  Availability: not_available
  Varpool flags:
CanIf_CanControllerMode/43 (CanIf_CanControllerMode) @07163bd0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanIf_Init/8 (write)CanIf_GetControllerMode/10 (read)CanIf_Transmit/11 (read)CanIf_SetPduMode/12 (read)CanIf_TxConfirmation/21 (read)CanIf_ProcessRxPdu/38 (read)CanIf_ControllerBusOff/23 (write)CanIf_ControllerModeIndication/24 (write)
  Availability: not_available
  Varpool flags:
CanIf_LcfgSignature/42 (CanIf_LcfgSignature) @07163798
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanIf_IsValidConfig/7 (read)
  Availability: not_available
  Varpool flags: read-only
TS_PlatformSigIsValid/41 (TS_PlatformSigIsValid) @07168b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanIf_IsValidConfig/7 
  Calls: 
Det_ASR40_ReportError/40 (Det_ASR40_ReportError) @071688c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanIf_CheckTrcvWakeFlagIndication/28 CanIf_CheckTrcvWakeFlagIndication/28 CanIf_ClearTrcvWufFlagIndication/27 CanIf_ClearTrcvWufFlagIndication/27 CanIf_ConfirmPnAvailability/26 CanIf_ConfirmPnAvailability/26 CanIf_TrcvModeIndication/25 CanIf_TrcvModeIndication/25 CanIf_ControllerModeIndication/24 CanIf_ControllerModeIndication/24 CanIf_ControllerModeIndication/24 CanIf_ControllerBusOff/23 CanIf_ControllerBusOff/23 CanIf_RxIndication_DetChecks/35 CanIf_RxIndication_DetChecks/35 CanIf_RxIndication_DetChecks/35 CanIf_RxIndication_DetChecks/35 CanIf_RxIndication_DetChecks/35 CanIf_RxIndication/22 CanIf_RxIndication/22 CanIf_TxConfirmation/21 CanIf_TxConfirmation/21 CanIf_CheckTrcvWakeFlag/20 CanIf_CheckTrcvWakeFlag/20 CanIf_ClearTrcvWufFlag/19 CanIf_ClearTrcvWufFlag/19 CanIf_CheckWakeup/18 CanIf_CheckWakeup/18 CanIf_SetTrcvWakeupMode/17 CanIf_SetTrcvWakeupMode/17 CanIf_SetTrcvWakeupMode/17 CanIf_GetTrcvWakeupReason/16 CanIf_GetTrcvWakeupReason/16 CanIf_GetTrcvWakeupReason/16 CanIf_GetTrcvMode/15 CanIf_GetTrcvMode/15 CanIf_GetTrcvMode/15 CanIf_SetTrcvMode/14 CanIf_SetTrcvMode/14 CanIf_SetTrcvMode/14 CanIf_GetPduMode/13 CanIf_GetPduMode/13 CanIf_GetPduMode/13 CanIf_SetPduMode/12 CanIf_SetPduMode/12 CanIf_SetPduMode/12 CanIf_ProcessTxLength/39 CanIf_Transmit/11 CanIf_Transmit/11 CanIf_Transmit/11 CanIf_Transmit/11 CanIf_GetControllerMode/10 CanIf_GetControllerMode/10 CanIf_GetControllerMode/10 CanIf_SetControllerMode/9 CanIf_SetControllerMode/9 CanIf_SetControllerMode/9 CanIf_Init/8 CanIf_Init/8 CanIf_CheckWakeFlag_HlpNoPn/6 CanIf_ClearTrcvWufFlag_HlpNoPn/5 
  Calls: 
CanIf_ProcessTxLength/39 (CanIf_ProcessTxLength) @07168700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanIf_TxPduConfigPtr/0 (read)CanIf_TxPduConfigPtr/0 (read)CanIf_TxPduConfigPtr/0 (read)CanIf_TxPduConfigPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanIf_Transmit/11 
  Calls: Det_ASR43_ReportRuntimeError/49 Det_ASR40_ReportError/40 
CanIf_ProcessRxPdu/38 (CanIf_ProcessRxPdu) @07168380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanIf_RxPduConfigPtr/3 (read)CanIf_CanControllerMode/43 (read)CanIf_PduMode/45 (read)CanIf_PduMode/45 (read)CanIf_CanControllerFlags/44 (read)CanIf_CanControllerFlags/44 (read)CanIf_CanControllerFlags/44 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanIf_RxIndication/22 
  Calls: CanIf_SendRxIndication/36 SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/48 SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/47 SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/48 SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/47 
CanIf_SendTxConfirmation/37 (CanIf_SendTxConfirmation) @071681c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanIf_TxPduConfigPtr/0 (read)CanIf_TxPduConfigPtr/0 (read)CanIf_CbkFctPtrTbl/50 (read)CanIf_CbkFctPtrTbl/50 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanIf_TxConfirmation/21 CanIf_Transmit/11 
  Calls: 
   Indirect call
CanIf_SendRxIndication/36 (CanIf_SendRxIndication) @07168000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanIf_CbkFctPtrTbl/50 (read)CanIf_CbkFctPtrTbl/50 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanIf_ProcessRxPdu/38 
  Calls: 
   Indirect call
CanIf_RxIndication_DetChecks/35 (CanIf_RxIndication_DetChecks) @0710be00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanIf_DriverConfigPtr/4 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanIf_RxIndication/22 
  Calls: Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_BinarySwFiltering/34 (CanIf_BinarySwFiltering) @0710ba80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanIf_PerformSwFiltering/33 
  Calls: 
CanIf_PerformSwFiltering/33 (CanIf_PerformSwFiltering) @0710b620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanIf_SoftwareFiltering/32 
  Calls: CanIf_BinarySwFiltering/34 
CanIf_SoftwareFiltering/32 (CanIf_SoftwareFiltering) @07101ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanIf_RxIndication/22 
  Calls: CanIf_PerformSwFiltering/33 
CanIf_SetOffline/31 (CanIf_SetOffline) @071017e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanIf_PduMode/45 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanIf_SetPduModeInternal/30 
  Calls: 
CanIf_SetPduModeInternal/30 (CanIf_SetPduModeInternal) @07101620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanIf_PduMode/45 (read)CanIf_PduMode/45 (write)CanIf_PduMode/45 (write)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_CanControllerFlags/44 (read)CanIf_CanControllerFlags/44 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanIf_SetPduMode/12 
  Calls: SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/48 SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/47 CanIf_SetOffline/31 
CanIf_SetControllerModeInternal/29 (CanIf_SetControllerModeInternal) @071012a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_PduMode/45 (write)CanIf_CanDrvFctConfig/46 (read)CanIf_CanDrvFctConfig/46 (read)CanIf_CanDrvFctConfig/46 (read)CanIf_PduMode/45 (write)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_CanControllerFlags/44 (read)CanIf_CanControllerFlags/44 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanIf_SetControllerMode/9 
  Calls: 
   Indirect call
   Indirect call
   Indirect call
CanIf_CheckTrcvWakeFlagIndication/28 (CanIf_CheckTrcvWakeFlagIndication) @06fb8c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanSM_CheckTransceiverWakeFlagIndication/57 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_ClearTrcvWufFlagIndication/27 (CanIf_ClearTrcvWufFlagIndication) @06fb8a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanSM_ClearTrcvWufFlagIndication/56 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_ConfirmPnAvailability/26 (CanIf_ConfirmPnAvailability) @06fb88c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanSM_ConfirmPnAvailability/55 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_TrcvModeIndication/25 (CanIf_TrcvModeIndication) @06fb8700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanSM_TransceiverModeIndication/54 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_ControllerModeIndication/24 (CanIf_ControllerModeIndication) @06fb8540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_DriverConfigPtr/4 (read)CanIf_CanControllerMode/43 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanSM_ControllerModeIndication/53 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_ControllerBusOff/23 (CanIf_ControllerBusOff) @06fb81c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_DriverConfigPtr/4 (read)CanIf_CanControllerMode/43 (write)CanIf_PduMode/45 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanSM_ControllerBusOff/52 SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/48 SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/47 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_RxIndication/22 (CanIf_RxIndication) @06fb8000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_CanDrvFctConfig/46 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanIf_ProcessRxPdu/38 CanIf_SoftwareFiltering/32 CanIf_RxIndication_DetChecks/35 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_TxConfirmation/21 (CanIf_TxConfirmation) @06fac8c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)CanIf_TxPduConfigPtr/0 (read)CanIf_CanControllerFlags/44 (read)CanIf_CanControllerFlags/44 (write)CanIf_CanControllerMode/43 (read)CanIf_PduMode/45 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanIf_SendTxConfirmation/37 SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/48 SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/47 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_CheckTrcvWakeFlag/20 (CanIf_CheckTrcvWakeFlag) @06fac700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_CanTrcvConfig/51 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
   Indirect call
CanIf_ClearTrcvWufFlag/19 (CanIf_ClearTrcvWufFlag) @06fac380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_CanTrcvConfig/51 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
   Indirect call
CanIf_CheckWakeup/18 (CanIf_CheckWakeup) @06fac000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_CanTrcvConfig/51 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
   Indirect call
CanIf_SetTrcvWakeupMode/17 (CanIf_SetTrcvWakeupMode) @070e4d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_CanTrcvConfig/51 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
   Indirect call
CanIf_GetTrcvWakeupReason/16 (CanIf_GetTrcvWakeupReason) @070e49a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_CanTrcvConfig/51 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
   Indirect call
CanIf_GetTrcvMode/15 (CanIf_GetTrcvMode) @070e4620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_CanTrcvConfig/51 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
   Indirect call
CanIf_SetTrcvMode/14 (CanIf_SetTrcvMode) @070e42a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_CanTrcvConfig/51 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
   Indirect call
CanIf_GetPduMode/13 (CanIf_GetPduMode) @0700cee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_DriverConfigPtr/4 (read)CanIf_PduMode/45 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_SetPduMode/12 (CanIf_SetPduMode) @0700cc40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_DriverConfigPtr/4 (read)CanIf_CanControllerMode/43 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanIf_SetPduModeInternal/30 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_Transmit/11 (CanIf_Transmit) @0700ca80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_ConfigPtr/1 (read)CanIf_TxPduConfigPtr/0 (read)CanIf_TxPduConfigPtr/0 (read)CanIf_CanControllerMode/43 (read)CanIf_PduMode/45 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_CanControllerFlags/44 (read)CanIf_TxPduConfigPtr/0 (read)CanIf_TxPduConfigPtr/0 (read)CanIf_CanDrvFctConfig/46 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanIf_SendTxConfirmation/37 SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/48 SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/47 SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/48 SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/47 CanIf_ProcessTxLength/39 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
   Indirect call
CanIf_GetControllerMode/10 (CanIf_GetControllerMode) @0700c700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_DriverConfigPtr/4 (read)CanIf_CanControllerMode/43 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/48 SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0/47 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_SetControllerMode/9 (CanIf_SetControllerMode) @0700c540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_State/2 (read)CanIf_DriverConfigPtr/4 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanIf_SetControllerModeInternal/29 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 Det_ASR40_ReportError/40 
CanIf_Init/8 (CanIf_Init) @0700c380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_ConfigPtr/1 (write)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_TxPduConfigPtr/0 (write)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_RxPduConfigPtr/3 (write)CanIf_ConfigPtr/1 (read)CanIf_ConfigPtr/1 (read)CanIf_DriverConfigPtr/4 (write)CanIf_CanControllerMode/43 (write)CanIf_CanControllerFlags/44 (write)CanIf_PduMode/45 (write)CanIf_DriverConfigPtr/4 (read)CanIf_State/2 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/40 CanIf_IsValidConfig/7 Det_ASR40_ReportError/40 
CanIf_IsValidConfig/7 (CanIf_IsValidConfig) @070caee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanIf_LcfgSignature/42 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanIf_Init/8 
  Calls: TS_PlatformSigIsValid/41 
CanIf_CheckWakeFlag_HlpNoPn/6 (CanIf_CheckWakeFlag_HlpNoPn) @070cad20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/40 
CanIf_ClearTrcvWufFlag_HlpNoPn/5 (CanIf_ClearTrcvWufFlag_HlpNoPn) @070cab60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/40 
CanIf_DriverConfigPtr/4 (CanIf_DriverConfigPtr) @06efd6c0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: CanIf_Init/8 (write)CanIf_Init/8 (read)CanIf_SetControllerMode/9 (read)CanIf_GetControllerMode/10 (read)CanIf_SetPduMode/12 (read)CanIf_GetPduMode/13 (read)CanIf_RxIndication_DetChecks/35 (read)CanIf_ControllerBusOff/23 (read)CanIf_ControllerModeIndication/24 (read)
  Availability: available
  Varpool flags:
CanIf_RxPduConfigPtr/3 (CanIf_RxPduConfigPtr) @06efd678
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: CanIf_Init/8 (write)CanIf_ProcessRxPdu/38 (read)
  Availability: available
  Varpool flags:
CanIf_State/2 (CanIf_State) @06efd630
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: CanIf_Init/8 (write)CanIf_SetControllerMode/9 (read)CanIf_GetControllerMode/10 (read)CanIf_Transmit/11 (read)CanIf_SetPduMode/12 (read)CanIf_GetPduMode/13 (read)CanIf_SetTrcvMode/14 (read)CanIf_GetTrcvMode/15 (read)CanIf_GetTrcvWakeupReason/16 (read)CanIf_SetTrcvWakeupMode/17 (read)CanIf_CheckWakeup/18 (read)CanIf_ClearTrcvWufFlag/19 (read)CanIf_CheckTrcvWakeFlag/20 (read)CanIf_TxConfirmation/21 (read)CanIf_RxIndication/22 (read)CanIf_ControllerBusOff/23 (read)CanIf_ControllerModeIndication/24 (read)CanIf_TrcvModeIndication/25 (read)CanIf_ConfirmPnAvailability/26 (read)CanIf_ClearTrcvWufFlagIndication/27 (read)CanIf_CheckTrcvWakeFlagIndication/28 (read)
  Availability: available
  Varpool flags: initialized
CanIf_ConfigPtr/1 (CanIf_ConfigPtr) @06efd5e8
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: CanIf_Init/8 (write)CanIf_Init/8 (read)CanIf_Init/8 (read)CanIf_Init/8 (read)CanIf_Init/8 (read)CanIf_Init/8 (read)CanIf_Init/8 (read)CanIf_SetControllerModeInternal/29 (read)CanIf_SetControllerModeInternal/29 (read)CanIf_SetControllerModeInternal/29 (read)CanIf_SetControllerModeInternal/29 (read)CanIf_SetControllerModeInternal/29 (read)CanIf_SetControllerModeInternal/29 (read)CanIf_Transmit/11 (read)CanIf_Transmit/11 (read)CanIf_Transmit/11 (read)CanIf_Transmit/11 (read)CanIf_SetPduModeInternal/30 (read)CanIf_SetPduModeInternal/30 (read)CanIf_SetPduModeInternal/30 (read)CanIf_SetTrcvMode/14 (read)CanIf_SetTrcvMode/14 (read)CanIf_SetTrcvMode/14 (read)CanIf_SetTrcvMode/14 (read)CanIf_SetTrcvMode/14 (read)CanIf_GetTrcvMode/15 (read)CanIf_GetTrcvMode/15 (read)CanIf_GetTrcvMode/15 (read)CanIf_GetTrcvMode/15 (read)CanIf_GetTrcvMode/15 (read)CanIf_GetTrcvWakeupReason/16 (read)CanIf_GetTrcvWakeupReason/16 (read)CanIf_GetTrcvWakeupReason/16 (read)CanIf_GetTrcvWakeupReason/16 (read)CanIf_GetTrcvWakeupReason/16 (read)CanIf_SetTrcvWakeupMode/17 (read)CanIf_SetTrcvWakeupMode/17 (read)CanIf_SetTrcvWakeupMode/17 (read)CanIf_SetTrcvWakeupMode/17 (read)CanIf_SetTrcvWakeupMode/17 (read)CanIf_CheckWakeup/18 (read)CanIf_CheckWakeup/18 (read)CanIf_CheckWakeup/18 (read)CanIf_ClearTrcvWufFlag/19 (read)CanIf_ClearTrcvWufFlag/19 (read)CanIf_ClearTrcvWufFlag/19 (read)CanIf_ClearTrcvWufFlag/19 (read)CanIf_ClearTrcvWufFlag/19 (read)CanIf_CheckTrcvWakeFlag/20 (read)CanIf_CheckTrcvWakeFlag/20 (read)CanIf_CheckTrcvWakeFlag/20 (read)CanIf_CheckTrcvWakeFlag/20 (read)CanIf_CheckTrcvWakeFlag/20 (read)CanIf_TxConfirmation/21 (read)CanIf_RxIndication/22 (read)CanIf_RxIndication/22 (read)CanIf_RxIndication/22 (read)CanIf_RxIndication/22 (read)CanIf_RxIndication/22 (read)CanIf_RxIndication_DetChecks/35 (read)CanIf_RxIndication_DetChecks/35 (read)CanIf_RxIndication_DetChecks/35 (read)CanIf_SoftwareFiltering/32 (read)CanIf_SoftwareFiltering/32 (read)CanIf_SoftwareFiltering/32 (read)CanIf_SoftwareFiltering/32 (read)CanIf_SoftwareFiltering/32 (read)CanIf_SoftwareFiltering/32 (read)CanIf_SoftwareFiltering/32 (read)CanIf_SoftwareFiltering/32 (read)CanIf_SoftwareFiltering/32 (read)CanIf_PerformSwFiltering/33 (read)CanIf_PerformSwFiltering/33 (read)CanIf_PerformSwFiltering/33 (read)CanIf_PerformSwFiltering/33 (read)CanIf_PerformSwFiltering/33 (read)CanIf_PerformSwFiltering/33 (read)CanIf_PerformSwFiltering/33 (read)CanIf_PerformSwFiltering/33 (read)CanIf_BinarySwFiltering/34 (read)CanIf_BinarySwFiltering/34 (read)CanIf_BinarySwFiltering/34 (read)CanIf_BinarySwFiltering/34 (read)CanIf_BinarySwFiltering/34 (read)CanIf_BinarySwFiltering/34 (read)CanIf_TrcvModeIndication/25 (read)CanIf_ConfirmPnAvailability/26 (read)CanIf_ClearTrcvWufFlagIndication/27 (read)CanIf_CheckTrcvWakeFlagIndication/28 (read)
  Availability: available
  Varpool flags:
CanIf_TxPduConfigPtr/0 (CanIf_TxPduConfigPtr) @06efd5a0
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: CanIf_Init/8 (write)CanIf_Transmit/11 (read)CanIf_Transmit/11 (read)CanIf_Transmit/11 (read)CanIf_Transmit/11 (read)CanIf_ProcessTxLength/39 (read)CanIf_ProcessTxLength/39 (read)CanIf_ProcessTxLength/39 (read)CanIf_ProcessTxLength/39 (read)CanIf_SendTxConfirmation/37 (read)CanIf_SendTxConfirmation/37 (read)CanIf_TxConfirmation/21 (read)
  Availability: available
  Varpool flags:
CanIf_ProcessTxLength (PduIdType CanIfTxPduId, PduLengthType RequestedTxLength)
{
  PduLengthType TransmitLength;
  PduLengthType MaxFrameLength;
  uint8 truncOpt;
  PduLengthType D.9930;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CanIf_TxPduConfigPtr.28_1 = CanIf_TxPduConfigPtr;
  _2 = (unsigned int) CanIfTxPduId;
  _3 = _2 * 16;
  _4 = CanIf_TxPduConfigPtr.28_1 + _3;
  truncOpt = _4->truncateOptions;
  # DEBUG BEGIN_STMT
  MaxFrameLength = 8;
  # DEBUG BEGIN_STMT
  TransmitLength = 255;
  # DEBUG BEGIN_STMT
  CanIf_TxPduConfigPtr.29_5 = CanIf_TxPduConfigPtr;
  _6 = (unsigned int) CanIfTxPduId;
  _7 = _6 * 16;
  _8 = CanIf_TxPduConfigPtr.29_5 + _7;
  _9 = _8->canId;
  _10 = _9 & 1073741824;
  if (_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  MaxFrameLength = 64;

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_TxPduConfigPtr.30_11 = CanIf_TxPduConfigPtr;
  _12 = (unsigned int) CanIfTxPduId;
  _13 = _12 * 16;
  _14 = CanIf_TxPduConfigPtr.30_11 + _13;
  _15 = _14->PduLength;
  if (RequestedTxLength > _15)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _16 = (unsigned int) truncOpt;
  _17 = _16 & 1;
  if (_17 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _18 = (unsigned int) truncOpt;
  _19 = _18 & 2;
  if (_19 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (RequestedTxLength > MaxFrameLength)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  TransmitLength = MaxFrameLength;
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 5, 11);
  goto <bb 13>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  TransmitLength = RequestedTxLength;
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  CanIf_TxPduConfigPtr.31_20 = CanIf_TxPduConfigPtr;
  _21 = (unsigned int) CanIfTxPduId;
  _22 = _21 * 16;
  _23 = CanIf_TxPduConfigPtr.31_20 + _22;
  TransmitLength = _23->PduLength;
  goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR43_ReportRuntimeError (60, 0, 5, 90);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  TransmitLength = RequestedTxLength;

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.9930 = TransmitLength;
  return D.9930;

}


CanIf_ProcessRxPdu (struct PduInfoType * PduInfoPtr, Can_IdType CanId, CanIf_LPduIndexType RxPduId, uint8 ControllerId)
{
  const uint8 cfgPduLength;
  struct PduInfoType PduInfo;
  boolean Rx_Condition_not_allowed;
  const struct CanIf_RxLPduConfigType * const RxLPduConfig;
  int iftmp.125;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CanIf_RxPduConfigPtr.124_1 = CanIf_RxPduConfigPtr;
  _2 = (unsigned int) RxPduId;
  _3 = _2 * 4;
  RxLPduConfig = CanIf_RxPduConfigPtr.124_1 + _3;
  # DEBUG BEGIN_STMT
  Rx_Condition_not_allowed = 0;
  # DEBUG BEGIN_STMT
  SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _4 = (int) ControllerId;
  _5 = CanIf_CanControllerMode[_4];
  if (_5 != 1)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _6 = (int) ControllerId;
  _7 = CanIf_PduMode[_6];
  if (_7 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _8 = (int) ControllerId;
  _9 = CanIf_PduMode[_8];
  if (_9 != 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.125 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.125 = 0;

  <bb 7> :
  Rx_Condition_not_allowed = (boolean) iftmp.125;
  # DEBUG BEGIN_STMT
  SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (Rx_Condition_not_allowed == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = PduInfoPtr->SduLength;
  _11 = (unsigned char) _10;
  _12 = (short unsigned int) _11;
  PduInfo.SduLength = _12;
  # DEBUG BEGIN_STMT
  cfgPduLength = RxLPduConfig->limitedPduLength;
  # DEBUG BEGIN_STMT
  _13 = PduInfo.SduLength;
  _14 = (short unsigned int) cfgPduLength;
  if (_13 > _14)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _15 = (short unsigned int) cfgPduLength;
  PduInfo.SduLength = _15;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _16 = PduInfoPtr->SduDataPtr;
  PduInfo.SduDataPtr = _16;
  # DEBUG BEGIN_STMT
  SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _17 = (int) ControllerId;
  _18 = CanIf_CanControllerFlags[_17];
  _19 = (int) _18;
  _20 = _19 & 8;
  if (_20 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _21 = (int) ControllerId;
  _22 = CanIf_CanControllerFlags[_21];
  _23 = (int) ControllerId;
  _24 = _22 & 247;
  CanIf_CanControllerFlags[_23] = _24;

  <bb 12> :
  # DEBUG BEGIN_STMT
  SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _25 = RxLPduConfig->userType;
  _26 = RxLPduConfig->targetPduId;
  CanIf_SendRxIndication (_25, _26, &PduInfo, CanId);
  PduInfo = {CLOBBER};

  <bb 13> :
  return;

}


CanIf_SendTxConfirmation (PduIdType CanTxPduId)
{
  PduIdType sourcePduId;
  uint8 userType;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CanIf_TxPduConfigPtr.32_1 = CanIf_TxPduConfigPtr;
  _2 = (unsigned int) CanTxPduId;
  _3 = _2 * 16;
  _4 = CanIf_TxPduConfigPtr.32_1 + _3;
  userType = _4->userType;
  # DEBUG BEGIN_STMT
  CanIf_TxPduConfigPtr.33_5 = CanIf_TxPduConfigPtr;
  _6 = (unsigned int) CanTxPduId;
  _7 = _6 * 16;
  _8 = CanIf_TxPduConfigPtr.33_5 + _7;
  sourcePduId = _8->sourcePduId_UL;
  # DEBUG BEGIN_STMT
  if (userType != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _9 = (int) userType;
  _10 = CanIf_CbkFctPtrTbl[_9].TxConfFctPtr;
  if (_10 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _11 = (int) userType;
  _12 = CanIf_CbkFctPtrTbl[_11].TxConfFctPtr;
  _12 (sourcePduId);

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


CanIf_SendRxIndication (uint8 userType, PduIdType RxLPduId, struct PduInfoType * PduInfoPtr, Can_IdType CanId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (userType != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) userType;
  _2 = CanIf_CbkFctPtrTbl[_1].UlRxIndFctPtr;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = (int) userType;
  _4 = CanIf_CbkFctPtrTbl[_3].UlRxIndFctPtr;
  _4 (RxLPduId, PduInfoPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


CanIf_RxIndication_DetChecks (Can_HwHandleType Hrh, Can_IdType CanId, PduLengthType CanDlc, const uint8 * CanSduPtr)
{
  const uint16 CanIfHrhIdx;
  Std_ReturnType RetCode;
  Std_ReturnType D.10073;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetCode = 1;
  # DEBUG BEGIN_STMT
  CanIf_DriverConfigPtr.91_1 = CanIf_DriverConfigPtr;
  _2 = CanIf_DriverConfigPtr.91_1->upperHohIdLimit;
  if (Hrh >= _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 20, 12);
  goto <bb 15>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = CanId & 536870912;
  if (_3 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  CanId.92_4 = (signed int) CanId;
  if (CanId.92_4 >= 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _5 = CanId & 1073739776;
  if (_5 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 20, 10);
  goto <bb 15>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (CanDlc > 64)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 20, 11);
  goto <bb 15>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (CanSduPtr == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 20, 20);
  goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.93_6 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.94_7 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.95_8 = CanIf_ConfigPtr;
  _9 = CanIf_ConfigPtr.95_8->driverConfigPtr;
  _10 = CanIf_ConfigPtr.94_7 + _9;
  _11 = _10->hohIdToCanIfIdxPtr;
  _12 = (unsigned int) Hrh;
  _13 = _12 * 2;
  _14 = _11 + _13;
  _15 = CanIf_ConfigPtr.93_6 + _14;
  CanIfHrhIdx = *_15;
  # DEBUG BEGIN_STMT
  CanIfHrhIdx.96_16 = (signed short) CanIfHrhIdx;
  if (CanIfHrhIdx.96_16 < 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 20, 12);
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  RetCode = 0;

  <bb 15> :
  # DEBUG BEGIN_STMT
  D.10073 = RetCode;
  return D.10073;

}


CanIf_BinarySwFiltering (const CanIf_LPduIndexType FirstIdx, const CanIf_LPduIndexType LastIdx, const Can_IdType CanId, CanIf_LPduIndexType * const Index)
{
  uint32 cfgCanId;
  sint32 middle;
  sint32 right;
  sint32 left;
  Std_ReturnType RetVal;
  Std_ReturnType D.10116;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  left = (sint32) FirstIdx;
  # DEBUG BEGIN_STMT
  right = (sint32) LastIdx;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (left > right)
    goto <bb 16>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = left + right;
  middle = _1 / 2;
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.115_2 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.116_3 = CanIf_ConfigPtr;
  _4 = CanIf_ConfigPtr.116_3->sortedRxLPduConfigPtr;
  middle.117_5 = (unsigned int) middle;
  _6 = middle.117_5 * 12;
  _7 = _4 + _6;
  _8 = CanIf_ConfigPtr.115_2 + _7;
  cfgCanId = _8->canId;
  # DEBUG BEGIN_STMT
  if (cfgCanId == CanId)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _9 = (short unsigned int) middle;
  *Index = _9;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (CanId < cfgCanId)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  right = middle + -1;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  left = middle + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (left <= right)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (RetVal == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (cfgCanId > CanId)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  middle = middle + -1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  _10 = (long int) FirstIdx;
  if (middle >= _10)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  CanIf_ConfigPtr.118_11 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.119_12 = CanIf_ConfigPtr;
  _13 = CanIf_ConfigPtr.119_12->sortedRxLPduConfigPtr;
  middle.120_14 = (unsigned int) middle;
  _15 = middle.120_14 * 12;
  _16 = _13 + _15;
  _17 = CanIf_ConfigPtr.118_11 + _16;
  _18 = _17->upperRangeCanId;
  if (_18 != 4294967295)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  CanIf_ConfigPtr.121_19 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.122_20 = CanIf_ConfigPtr;
  _21 = CanIf_ConfigPtr.122_20->sortedRxLPduConfigPtr;
  middle.123_22 = (unsigned int) middle;
  _23 = middle.123_22 * 12;
  _24 = _21 + _23;
  _25 = CanIf_ConfigPtr.121_19 + _24;
  _26 = _25->upperRangeCanId;
  if (CanId <= _26)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _27 = (short unsigned int) middle;
  *Index = _27;
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 16> :
  # DEBUG BEGIN_STMT
  D.10116 = RetVal;
  return D.10116;

}


CanIf_PerformSwFiltering (const CanIf_LPduIndexType FirstIdx, CanIf_LPduIndexType LastIdx, const Can_IdType CanId, CanIf_LPduIndexType * const Index)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.10096;
  int iftmp.106;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  if (FirstIdx == LastIdx)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.107_1 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.108_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.108_2->sortedRxLPduConfigPtr;
  _4 = (unsigned int) FirstIdx;
  _5 = _4 * 12;
  _6 = _3 + _5;
  _7 = CanIf_ConfigPtr.107_1 + _6;
  _8 = _7->canId;
  if (CanId != _8)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  CanIf_ConfigPtr.109_9 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.110_10 = CanIf_ConfigPtr;
  _11 = CanIf_ConfigPtr.110_10->sortedRxLPduConfigPtr;
  _12 = (unsigned int) FirstIdx;
  _13 = _12 * 12;
  _14 = _11 + _13;
  _15 = CanIf_ConfigPtr.109_9 + _14;
  _16 = _15->upperRangeCanId;
  if (_16 == 4294967295)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  CanIf_ConfigPtr.111_17 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.112_18 = CanIf_ConfigPtr;
  _19 = CanIf_ConfigPtr.112_18->sortedRxLPduConfigPtr;
  _20 = (unsigned int) FirstIdx;
  _21 = _20 * 12;
  _22 = _19 + _21;
  _23 = CanIf_ConfigPtr.111_17 + _22;
  _24 = _23->canId;
  if (CanId < _24)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  CanIf_ConfigPtr.113_25 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.114_26 = CanIf_ConfigPtr;
  _27 = CanIf_ConfigPtr.114_26->sortedRxLPduConfigPtr;
  _28 = (unsigned int) FirstIdx;
  _29 = _28 * 12;
  _30 = _27 + _29;
  _31 = CanIf_ConfigPtr.113_25 + _30;
  _32 = _31->upperRangeCanId;
  if (CanId > _32)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.106 = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.106 = 0;

  <bb 9> :
  RetVal = (Std_ReturnType) iftmp.106;
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  *Index = FirstIdx;
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  RetVal = CanIf_BinarySwFiltering (FirstIdx, LastIdx, CanId, Index);

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.10096 = RetVal;
  return D.10096;

}


CanIf_SoftwareFiltering (const uint16 CanIfHrhIdx, const Can_IdType CanId, CanIf_LPduIndexType * const Index)
{
  CanIf_LPduIndexType LastIdx;
  CanIf_LPduIndexType FirstIdx;
  Std_ReturnType RetVal;
  Std_ReturnType D.10082;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.97_1 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.98_2 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.99_3 = CanIf_ConfigPtr;
  _4 = CanIf_ConfigPtr.99_3->driverConfigPtr;
  _5 = CanIf_ConfigPtr.98_2 + _4;
  _6 = _5->hrhConfigPtr;
  _7 = (unsigned int) CanIfHrhIdx;
  _8 = _7 * 6;
  _9 = _6 + _8;
  _10 = CanIf_ConfigPtr.97_1 + _9;
  FirstIdx = _10->firstIndex;
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.100_11 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.101_12 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.102_13 = CanIf_ConfigPtr;
  _14 = CanIf_ConfigPtr.102_13->driverConfigPtr;
  _15 = CanIf_ConfigPtr.101_12 + _14;
  _16 = _15->hrhConfigPtr;
  _17 = (unsigned int) CanIfHrhIdx;
  _18 = _17 * 6;
  _19 = _16 + _18;
  _20 = CanIf_ConfigPtr.100_11 + _19;
  LastIdx = _20->lastIndex;
  # DEBUG BEGIN_STMT
  if (LastIdx != 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  if (FirstIdx != 65535)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.103_21 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.104_22 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.105_23 = CanIf_ConfigPtr;
  _24 = CanIf_ConfigPtr.105_23->driverConfigPtr;
  _25 = CanIf_ConfigPtr.104_22 + _24;
  _26 = _25->hrhConfigPtr;
  _27 = (unsigned int) CanIfHrhIdx;
  _28 = _27 * 6;
  _29 = _26 + _28;
  _30 = CanIf_ConfigPtr.103_21 + _29;
  _31 = _30->swFiltering;
  if (_31 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal = CanIf_PerformSwFiltering (FirstIdx, LastIdx, CanId, Index);
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  *Index = FirstIdx;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.10082 = RetVal;
  return D.10082;

}


CanIf_SetOffline (uint8 ControllerId, CanIf_PduModeType OldPduMode)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) ControllerId;
  CanIf_PduMode[_1] = 0;
  # DEBUG BEGIN_STMT
  return;

}


CanIf_SetPduModeInternal (uint8 ControllerId, CanIf_PduModeType PduModeRequest)
{
  CanIf_PduModeType OldPduMode;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) ControllerId;
  OldPduMode = CanIf_PduMode[_1];
  # DEBUG BEGIN_STMT
  switch (PduModeRequest) <default: <L2> [INV], case 0: <L0> [INV], case 3: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  CanIf_SetOffline (ControllerId, OldPduMode);
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = (int) ControllerId;
  CanIf_PduMode[_2] = 3;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = (int) ControllerId;
  CanIf_PduMode[_3] = 1;
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.36_4 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.37_5 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.38_6 = CanIf_ConfigPtr;
  _7 = CanIf_ConfigPtr.38_6->driverConfigPtr;
  _8 = CanIf_ConfigPtr.37_5 + _7;
  _9 = _8->ctrlConfigPtr;
  _10 = (unsigned int) ControllerId;
  _11 = _10 * 12;
  _12 = _9 + _11;
  _13 = CanIf_ConfigPtr.36_4 + _12;
  _14 = _13->pNFilterEnabled;
  if (_14 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = (int) ControllerId;
  _16 = CanIf_CanControllerFlags[_15];
  _17 = (int) ControllerId;
  _18 = _16 | 8;
  CanIf_CanControllerFlags[_17] = _18;
  # DEBUG BEGIN_STMT
  SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();

  <bb 7> :
  return;

}


CanIf_SetControllerModeInternal (uint8 ControllerId, CanIf_ControllerModeType ControllerMode)
{
  uint8 canCtrlId;
  uint8 canIdx;
  Std_ReturnType RetVal;
  Std_ReturnType D.9867;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  canIdx = 0;
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.11_1 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.12_2 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.13_3 = CanIf_ConfigPtr;
  _4 = CanIf_ConfigPtr.13_3->driverConfigPtr;
  _5 = CanIf_ConfigPtr.12_2 + _4;
  _6 = _5->ctrlConfigPtr;
  _7 = (unsigned int) ControllerId;
  _8 = _7 * 12;
  _9 = _6 + _8;
  _10 = CanIf_ConfigPtr.11_1 + _9;
  canCtrlId = _10->controllerId;
  # DEBUG BEGIN_STMT
  switch (ControllerMode) <default: <L14> [INV], case 1: <L3> [INV], case 2: <L0> [INV], case 3: <L6> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _11 = (int) ControllerId;
  CanIf_PduMode[_11] = 1;
  # DEBUG BEGIN_STMT
  _12 = (int) canIdx;
  _13 = CanIf_CanDrvFctConfig[_12].SetControllerMode;
  _14 = _13 (canCtrlId, 2);
  if (_14 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 11>; [INV]

  <bb 5> :
<L3>:
  # DEBUG BEGIN_STMT
  _15 = (int) canIdx;
  _16 = CanIf_CanDrvFctConfig[_15].SetControllerMode;
  _17 = _16 (canCtrlId, 1);
  if (_17 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 11>; [INV]

  <bb 7> :
<L6>:
  # DEBUG BEGIN_STMT
  _18 = (int) canIdx;
  _19 = CanIf_CanDrvFctConfig[_18].SetControllerMode;
  _20 = _19 (canCtrlId, 3);
  if (_20 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _21 = (int) ControllerId;
  CanIf_PduMode[_21] = 0;
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.14_22 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.15_23 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.16_24 = CanIf_ConfigPtr;
  _25 = CanIf_ConfigPtr.16_24->driverConfigPtr;
  _26 = CanIf_ConfigPtr.15_23 + _25;
  _27 = _26->ctrlConfigPtr;
  _28 = (unsigned int) ControllerId;
  _29 = _28 * 12;
  _30 = _27 + _29;
  _31 = CanIf_ConfigPtr.14_22 + _30;
  _32 = _31->pNFilterEnabled;
  if (_32 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _33 = (int) ControllerId;
  _34 = CanIf_CanControllerFlags[_33];
  _35 = (int) ControllerId;
  _36 = _34 | 8;
  CanIf_CanControllerFlags[_35] = _36;

  <bb 11> :
<L14>:
  # DEBUG BEGIN_STMT
  D.9867 = RetVal;
  return D.9867;

}


CanIf_CheckTrcvWakeFlagIndication (uint8 Transceiver)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.136_1 = CanIf_State;
  if (CanIf_State.136_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 33, 30);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.137_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.137_2->nrOfTransceivers;
  if (Transceiver >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 33, 17);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanSM_CheckTransceiverWakeFlagIndication (Transceiver);

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


CanIf_ClearTrcvWufFlagIndication (uint8 Transceiver)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.134_1 = CanIf_State;
  if (CanIf_State.134_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 32, 30);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.135_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.135_2->nrOfTransceivers;
  if (Transceiver >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 32, 17);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanSM_ClearTrcvWufFlagIndication (Transceiver);

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


CanIf_ConfirmPnAvailability (uint8 Transceiver)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.132_1 = CanIf_State;
  if (CanIf_State.132_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 26, 30);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.133_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.133_2->nrOfTransceivers;
  if (Transceiver >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 26, 17);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanSM_ConfirmPnAvailability (Transceiver);

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


CanIf_TrcvModeIndication (uint8 Transceiver, CanTrcv_TrcvModeType TransceiverMode)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.130_1 = CanIf_State;
  if (CanIf_State.130_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 24, 30);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.131_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.131_2->nrOfTransceivers;
  if (Transceiver >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 24, 17);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanSM_TransceiverModeIndication (Transceiver, TransceiverMode);

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


CanIf_ControllerModeIndication (uint8 ControllerId, Can_ControllerStateType ControllerMode)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.128_1 = CanIf_State;
  if (CanIf_State.128_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 23, 30);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_DriverConfigPtr.129_2 = CanIf_DriverConfigPtr;
  _3 = CanIf_DriverConfigPtr.129_2->nrOfControllers;
  if (ControllerId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 23, 14);
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ControllerMode != 3)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  if (ControllerMode != 1)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  if (ControllerMode != 2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 23, 21);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = (int) ControllerId;
  CanIf_CanControllerMode[_4] = ControllerMode;
  # DEBUG BEGIN_STMT
  CanSM_ControllerModeIndication (ControllerId, ControllerMode);

  <bb 11> :
  # DEBUG BEGIN_STMT
  return;

}


CanIf_ControllerBusOff (uint8 Controller)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.126_1 = CanIf_State;
  if (CanIf_State.126_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 22, 30);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_DriverConfigPtr.127_2 = CanIf_DriverConfigPtr;
  _3 = CanIf_DriverConfigPtr.127_2->nrOfControllers;
  if (Controller >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 22, 14);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _4 = (int) Controller;
  CanIf_CanControllerMode[_4] = 2;
  # DEBUG BEGIN_STMT
  _5 = (int) Controller;
  CanIf_PduMode[_5] = 1;
  # DEBUG BEGIN_STMT
  SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  CanSM_ControllerBusOff (Controller);

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


CanIf_RxIndication (const struct Can_HwType * Mailbox, const struct PduInfoType * PduInfoPtr)
{
  struct PduInfoType RxPduInfo;
  const CanIf_LPduIndexType PduIdx;
  const Std_ReturnType SwFilterResult;
  CanIf_LPduIndexType Index;
  const Can_IdType ConfCanId;
  const uint16 CanIfHrhIdx;
  const uint8 * CanSduPtrLcl;
  const PduLengthType LclDlc;
  const uint8 ControllerId;
  const Can_IdType CanIdLcl;
  const Can_HwHandleType HrhLcl;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.84_1 = CanIf_State;
  if (CanIf_State.84_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 20, 30);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Mailbox == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 20, 20);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  HrhLcl = Mailbox->Hoh;
  # DEBUG BEGIN_STMT
  CanIdLcl = Mailbox->CanId;
  # DEBUG BEGIN_STMT
  ControllerId = Mailbox->ControllerId;
  # DEBUG BEGIN_STMT
  LclDlc = PduInfoPtr->SduLength;
  # DEBUG BEGIN_STMT
  CanSduPtrLcl = PduInfoPtr->SduDataPtr;
  # DEBUG BEGIN_STMT
  _2 = CanIf_RxIndication_DetChecks (HrhLcl, CanIdLcl, LclDlc, CanSduPtrLcl);
  if (_2 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.85_3 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.86_4 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.87_5 = CanIf_ConfigPtr;
  _6 = CanIf_ConfigPtr.87_5->driverConfigPtr;
  _7 = CanIf_ConfigPtr.86_4 + _6;
  _8 = _7->hohIdToCanIfIdxPtr;
  _9 = (long unsigned int) HrhLcl;
  _10 = CanIf_CanDrvFctConfig[0].HohIdOffset;
  _11 = (long unsigned int) _10;
  _12 = _9 + _11;
  _13 = _12 * 2;
  _14 = _8 + _13;
  _15 = CanIf_ConfigPtr.85_3 + _14;
  CanIfHrhIdx = *_15;
  # DEBUG BEGIN_STMT
  ConfCanId = CanIdLcl;
  # DEBUG BEGIN_STMT
  Index = 65535;
  # DEBUG BEGIN_STMT
  SwFilterResult = CanIf_SoftwareFiltering (CanIfHrhIdx, ConfCanId, &Index);
  # DEBUG BEGIN_STMT
  if (SwFilterResult == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.88_16 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.89_17 = CanIf_ConfigPtr;
  _18 = CanIf_ConfigPtr.89_17->sortedRxLPduConfigPtr;
  Index.90_19 = Index;
  _20 = (unsigned int) Index.90_19;
  _21 = _20 * 12;
  _22 = _18 + _21;
  _23 = CanIf_ConfigPtr.88_16 + _22;
  PduIdx = _23->rxLPduIndex;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RxPduInfo.SduLength = LclDlc;
  # DEBUG BEGIN_STMT
  RxPduInfo.SduDataPtr = CanSduPtrLcl;
  # DEBUG BEGIN_STMT
  CanIf_ProcessRxPdu (&RxPduInfo, ConfCanId, PduIdx, ControllerId);
  RxPduInfo = {CLOBBER};

  <bb 9> :
  Index = {CLOBBER};

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


CanIf_TxConfirmation (PduIdType CanTxPduId)
{
  const uint8 ControllerId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.81_1 = CanIf_State;
  if (CanIf_State.81_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 19, 30);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.82_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.82_2->nrOfTxLPdus;
  if (CanTxPduId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 19, 13);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanIf_TxPduConfigPtr.83_4 = CanIf_TxPduConfigPtr;
  _5 = (unsigned int) CanTxPduId;
  _6 = _5 * 16;
  _7 = CanIf_TxPduConfigPtr.83_4 + _6;
  ControllerId = _7->intCtrlIdx;
  # DEBUG BEGIN_STMT
  SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _8 = (int) ControllerId;
  _9 = CanIf_CanControllerFlags[_8];
  _10 = (int) ControllerId;
  _11 = _9 & 247;
  CanIf_CanControllerFlags[_10] = _11;
  # DEBUG BEGIN_STMT
  _12 = (int) ControllerId;
  _13 = CanIf_CanControllerMode[_12];
  if (_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _14 = (int) ControllerId;
  _15 = CanIf_PduMode[_14];

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  CanIf_SendTxConfirmation (CanTxPduId);

  <bb 9> :
  # DEBUG BEGIN_STMT
  return;

}


CanIf_CheckTrcvWakeFlag (uint8 TransceiverId)
{
  uint8 TrcvDrvIdx;
  Std_ReturnType RetVal;
  Std_ReturnType D.10034;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.75_1 = CanIf_State;
  if (CanIf_State.75_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 31, 30);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.76_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.76_2->nrOfTransceivers;
  if (TransceiverId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 31, 17);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.77_4 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.78_5 = CanIf_ConfigPtr;
  _6 = CanIf_ConfigPtr.78_5->trcvChnlConfigPtr;
  _7 = (unsigned int) TransceiverId;
  _8 = _7 * 12;
  _9 = _6 + _8;
  _10 = CanIf_ConfigPtr.77_4 + _9;
  TrcvDrvIdx = _10->trcvDrvIdx;
  # DEBUG BEGIN_STMT
  _11 = (int) TrcvDrvIdx;
  _12 = CanIf_CanTrcvConfig[_11].checkWakeFlag;
  CanIf_ConfigPtr.79_13 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.80_14 = CanIf_ConfigPtr;
  _15 = CanIf_ConfigPtr.80_14->trcvChnlConfigPtr;
  _16 = (unsigned int) TransceiverId;
  _17 = _16 * 12;
  _18 = _15 + _17;
  _19 = CanIf_ConfigPtr.79_13 + _18;
  _20 = _19->trcvChnlId;
  RetVal = _12 (_20);

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.10034 = RetVal;
  return D.10034;

}


CanIf_ClearTrcvWufFlag (uint8 TransceiverId)
{
  uint8 TrcvDrvIdx;
  Std_ReturnType RetVal;
  Std_ReturnType D.10026;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.69_1 = CanIf_State;
  if (CanIf_State.69_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 30, 30);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.70_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.70_2->nrOfTransceivers;
  if (TransceiverId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 30, 17);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.71_4 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.72_5 = CanIf_ConfigPtr;
  _6 = CanIf_ConfigPtr.72_5->trcvChnlConfigPtr;
  _7 = (unsigned int) TransceiverId;
  _8 = _7 * 12;
  _9 = _6 + _8;
  _10 = CanIf_ConfigPtr.71_4 + _9;
  TrcvDrvIdx = _10->trcvDrvIdx;
  # DEBUG BEGIN_STMT
  _11 = (int) TrcvDrvIdx;
  _12 = CanIf_CanTrcvConfig[_11].clearWufFlag;
  CanIf_ConfigPtr.73_13 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.74_14 = CanIf_ConfigPtr;
  _15 = CanIf_ConfigPtr.74_14->trcvChnlConfigPtr;
  _16 = (unsigned int) TransceiverId;
  _17 = _16 * 12;
  _18 = _15 + _17;
  _19 = CanIf_ConfigPtr.73_13 + _18;
  _20 = _19->trcvChnlId;
  RetVal = _12 (_20);

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.10026 = RetVal;
  return D.10026;

}


CanIf_CheckWakeup (EcuM_WakeupSourceType WakeupSource)
{
  const struct CanIf_CanTrcvChnlConfigType * TrcvChnlConfigPtr;
  uint8_least i;
  EcuM_WakeupSourceType CheckedSources;
  Std_ReturnType Result;
  boolean WakeupSourceValid;
  Std_ReturnType D.10018;

  <bb 2> :
  # DEBUG BEGIN_STMT
  WakeupSourceValid = 0;
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  CheckedSources = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.65_1 = CanIf_State;
  if (CanIf_State.65_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 17, 30);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.66_2 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.67_3 = CanIf_ConfigPtr;
  _4 = CanIf_ConfigPtr.67_3->trcvChnlConfigPtr;
  _5 = i * 12;
  _6 = _4 + _5;
  TrcvChnlConfigPtr = CanIf_ConfigPtr.66_2 + _6;
  # DEBUG BEGIN_STMT
  _7 = TrcvChnlConfigPtr->wakeupSourceIn;
  _8 = WakeupSource & _7;
  if (_8 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = TrcvChnlConfigPtr->trcvDrvIdx;
  _10 = (int) _9;
  _11 = CanIf_CanTrcvConfig[_10].chkWakeupByBus;
  _12 = TrcvChnlConfigPtr->trcvChnlId;
  _13 = _11 (_12);
  if (_13 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  WakeupSourceValid = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.68_14 = CanIf_ConfigPtr;
  _15 = CanIf_ConfigPtr.68_14->nrOfTransceivers;
  _16 = (long unsigned int) _15;
  if (i < _16)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (WakeupSourceValid == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 17, 16);

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.10018 = Result;
  return D.10018;

}


CanIf_SetTrcvWakeupMode (uint8 TransceiverId, CanTrcv_TrcvWakeupModeType TrcvWakeupMode)
{
  uint8 TrcvDrvIdx;
  Std_ReturnType RetVal;
  Std_ReturnType D.10006;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.59_1 = CanIf_State;
  if (CanIf_State.59_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 16, 30);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.60_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.60_2->nrOfTransceivers;
  if (TransceiverId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 16, 17);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TrcvWakeupMode > 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 16, 19);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.61_4 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.62_5 = CanIf_ConfigPtr;
  _6 = CanIf_ConfigPtr.62_5->trcvChnlConfigPtr;
  _7 = (unsigned int) TransceiverId;
  _8 = _7 * 12;
  _9 = _6 + _8;
  _10 = CanIf_ConfigPtr.61_4 + _9;
  TrcvDrvIdx = _10->trcvDrvIdx;
  # DEBUG BEGIN_STMT
  _11 = (int) TrcvDrvIdx;
  _12 = CanIf_CanTrcvConfig[_11].setWakeupMode;
  CanIf_ConfigPtr.63_13 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.64_14 = CanIf_ConfigPtr;
  _15 = CanIf_ConfigPtr.64_14->trcvChnlConfigPtr;
  _16 = (unsigned int) TransceiverId;
  _17 = _16 * 12;
  _18 = _15 + _17;
  _19 = CanIf_ConfigPtr.63_13 + _18;
  _20 = _19->trcvChnlId;
  RetVal = _12 (_20, TrcvWakeupMode);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.10006 = RetVal;
  return D.10006;

}


CanIf_GetTrcvWakeupReason (uint8 TransceiverId, CanTrcv_TrcvWakeupReasonType * TrcvWuReasonPtr)
{
  uint8 TrcvDrvIdx;
  Std_ReturnType RetVal;
  Std_ReturnType D.9995;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.53_1 = CanIf_State;
  if (CanIf_State.53_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 15, 30);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (TrcvWuReasonPtr == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 15, 20);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.54_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.54_2->nrOfTransceivers;
  if (TransceiverId >= _3)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 15, 17);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.55_4 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.56_5 = CanIf_ConfigPtr;
  _6 = CanIf_ConfigPtr.56_5->trcvChnlConfigPtr;
  _7 = (unsigned int) TransceiverId;
  _8 = _7 * 12;
  _9 = _6 + _8;
  _10 = CanIf_ConfigPtr.55_4 + _9;
  TrcvDrvIdx = _10->trcvDrvIdx;
  # DEBUG BEGIN_STMT
  _11 = (int) TrcvDrvIdx;
  _12 = CanIf_CanTrcvConfig[_11].getBusWuReason;
  CanIf_ConfigPtr.57_13 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.58_14 = CanIf_ConfigPtr;
  _15 = CanIf_ConfigPtr.58_14->trcvChnlConfigPtr;
  _16 = (unsigned int) TransceiverId;
  _17 = _16 * 12;
  _18 = _15 + _17;
  _19 = CanIf_ConfigPtr.57_13 + _18;
  _20 = _19->trcvChnlId;
  RetVal = _12 (_20, TrcvWuReasonPtr);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9995 = RetVal;
  return D.9995;

}


CanIf_GetTrcvMode (CanTrcv_TrcvModeType * TransceiverModePtr, uint8 TransceiverId)
{
  Std_ReturnType RetVal;
  uint8 TrcvDrvIdx;
  Std_ReturnType D.9984;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.47_1 = CanIf_State;
  if (CanIf_State.47_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 14, 30);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (TransceiverModePtr == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 14, 20);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.48_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.48_2->nrOfTransceivers;
  if (TransceiverId >= _3)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 14, 17);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.49_4 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.50_5 = CanIf_ConfigPtr;
  _6 = CanIf_ConfigPtr.50_5->trcvChnlConfigPtr;
  _7 = (unsigned int) TransceiverId;
  _8 = _7 * 12;
  _9 = _6 + _8;
  _10 = CanIf_ConfigPtr.49_4 + _9;
  TrcvDrvIdx = _10->trcvDrvIdx;
  # DEBUG BEGIN_STMT
  _11 = (int) TrcvDrvIdx;
  _12 = CanIf_CanTrcvConfig[_11].getOpMode;
  CanIf_ConfigPtr.51_13 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.52_14 = CanIf_ConfigPtr;
  _15 = CanIf_ConfigPtr.52_14->trcvChnlConfigPtr;
  _16 = (unsigned int) TransceiverId;
  _17 = _16 * 12;
  _18 = _15 + _17;
  _19 = CanIf_ConfigPtr.51_13 + _18;
  _20 = _19->trcvChnlId;
  RetVal = _12 (_20, TransceiverModePtr);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9984 = RetVal;
  return D.9984;

}


CanIf_SetTrcvMode (uint8 TransceiverId, CanTrcv_TrcvModeType TransceiverMode)
{
  uint8 TrcvDrvIdx;
  Std_ReturnType RetVal;
  Std_ReturnType D.9973;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.41_1 = CanIf_State;
  if (CanIf_State.41_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 13, 30);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.42_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.42_2->nrOfTransceivers;
  if (TransceiverId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 13, 17);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TransceiverMode > 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 13, 18);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.43_4 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.44_5 = CanIf_ConfigPtr;
  _6 = CanIf_ConfigPtr.44_5->trcvChnlConfigPtr;
  _7 = (unsigned int) TransceiverId;
  _8 = _7 * 12;
  _9 = _6 + _8;
  _10 = CanIf_ConfigPtr.43_4 + _9;
  TrcvDrvIdx = _10->trcvDrvIdx;
  # DEBUG BEGIN_STMT
  _11 = (int) TrcvDrvIdx;
  _12 = CanIf_CanTrcvConfig[_11].setOpMode;
  CanIf_ConfigPtr.45_13 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.46_14 = CanIf_ConfigPtr;
  _15 = CanIf_ConfigPtr.46_14->trcvChnlConfigPtr;
  _16 = (unsigned int) TransceiverId;
  _17 = _16 * 12;
  _18 = _15 + _17;
  _19 = CanIf_ConfigPtr.45_13 + _18;
  _20 = _19->trcvChnlId;
  RetVal = _12 (_20, TransceiverMode);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9973 = RetVal;
  return D.9973;

}


CanIf_GetPduMode (uint8 ControllerId, CanIf_PduModeType * PduModePtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.9962;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.39_1 = CanIf_State;
  if (CanIf_State.39_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 10, 30);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_DriverConfigPtr.40_2 = CanIf_DriverConfigPtr;
  _3 = CanIf_DriverConfigPtr.40_2->nrOfControllers;
  if (ControllerId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 10, 15);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (PduModePtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 10, 20);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _4 = (int) ControllerId;
  _5 = CanIf_PduMode[_4];
  *PduModePtr = _5;
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9962 = RetVal;
  return D.9962;

}


CanIf_SetPduMode (uint8 ControllerId, CanIf_PduModeType PduModeRequest)
{
  CanIf_ControllerModeType CanControllerMode;
  Std_ReturnType RetVal;
  Std_ReturnType D.9949;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.34_1 = CanIf_State;
  if (CanIf_State.34_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 9, 30);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_DriverConfigPtr.35_2 = CanIf_DriverConfigPtr;
  _3 = CanIf_DriverConfigPtr.35_2->nrOfControllers;
  if (ControllerId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 9, 15);
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (PduModeRequest > 3)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (PduModeRequest == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 9, 22);
  goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = (int) ControllerId;
  CanControllerMode = CanIf_CanControllerMode[_4];
  # DEBUG BEGIN_STMT
  if (CanControllerMode == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  CanIf_SetPduModeInternal (ControllerId, PduModeRequest);
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9949 = RetVal;
  return D.9949;

}


CanIf_Transmit (PduIdType CanTxPduId, const struct PduInfoType * PduInfoPtr)
{
  Can_ReturnType CanRetVal;
  Can_IdType TmpCanId;
  boolean CallTxConfirmation;
  boolean send_message;
  PduLengthType sduLengthInt;
  uint8 ControllerId;
  struct Can_PduType PduInfo;
  Can_HwHandleType CanHth;
  Std_ReturnType RetVal;
  Std_ReturnType D.9913;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  send_message = 0;
  # DEBUG BEGIN_STMT
  CallTxConfirmation = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.19_1 = CanIf_State;
  if (CanIf_State.19_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 5, 30);
  goto <bb 24>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.20_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.20_2->nrOfTxLPdus;
  if (CanTxPduId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 5, 50);
  goto <bb 24>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (PduInfoPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 5, 20);
  goto <bb 24>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _4 = PduInfoPtr->SduDataPtr;
  if (_4 == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 5, 20);
  goto <bb 24>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _5 = PduInfoPtr->SduLength;
  sduLengthInt = CanIf_ProcessTxLength (CanTxPduId, _5);
  # DEBUG BEGIN_STMT
  if (sduLengthInt != 255)
    goto <bb 11>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  CanIf_TxPduConfigPtr.21_6 = CanIf_TxPduConfigPtr;
  _7 = (unsigned int) CanTxPduId;
  _8 = _7 * 16;
  _9 = CanIf_TxPduConfigPtr.21_6 + _8;
  CanHth = _9->hth;
  # DEBUG BEGIN_STMT
  CanIf_TxPduConfigPtr.22_10 = CanIf_TxPduConfigPtr;
  _11 = (unsigned int) CanTxPduId;
  _12 = _11 * 16;
  _13 = CanIf_TxPduConfigPtr.22_10 + _12;
  ControllerId = _13->intCtrlIdx;
  # DEBUG BEGIN_STMT
  SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _14 = (int) ControllerId;
  _15 = CanIf_CanControllerMode[_14];
  if (_15 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _16 = (int) ControllerId;
  _17 = CanIf_PduMode[_16];
  if (_17 == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.23_18 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.24_19 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.25_20 = CanIf_ConfigPtr;
  _21 = CanIf_ConfigPtr.25_20->driverConfigPtr;
  _22 = CanIf_ConfigPtr.24_19 + _21;
  _23 = _22->ctrlConfigPtr;
  _24 = (unsigned int) ControllerId;
  _25 = _24 * 12;
  _26 = _23 + _25;
  _27 = CanIf_ConfigPtr.23_18 + _26;
  _28 = _27->pNFilterEnabled;
  if (_28 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  _29 = (int) ControllerId;
  _30 = CanIf_CanControllerFlags[_29];
  _31 = (unsigned int) _30;
  _32 = _31 & 8;
  if (_32 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  CanIf_TxPduConfigPtr.26_33 = CanIf_TxPduConfigPtr;
  _34 = (unsigned int) CanTxPduId;
  _35 = _34 * 16;
  _36 = CanIf_TxPduConfigPtr.26_33 + _35;
  _37 = _36->pNFilterFlag;
  if (_37 == 1)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_TxPduConfigPtr.27_38 = CanIf_TxPduConfigPtr;
  _39 = (unsigned int) CanTxPduId;
  _40 = _39 * 16;
  _41 = CanIf_TxPduConfigPtr.27_38 + _40;
  TmpCanId = _41->canId;
  # DEBUG BEGIN_STMT
  PduInfo.id = TmpCanId;
  # DEBUG BEGIN_STMT
  _42 = (unsigned char) sduLengthInt;
  PduInfo.length = _42;
  # DEBUG BEGIN_STMT
  _43 = PduInfoPtr->SduDataPtr;
  PduInfo.sdu = _43;
  # DEBUG BEGIN_STMT
  PduInfo.swPduHandle = CanTxPduId;
  # DEBUG BEGIN_STMT
  send_message = 1;

  <bb 17> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (send_message == 1)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _44 = CanIf_CanDrvFctConfig[0].Write;
  _45 = _44 (CanHth, &PduInfo);
  CanRetVal = (Can_ReturnType) _45;
  # DEBUG BEGIN_STMT
  if (CanRetVal != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 20> :
  # DEBUG BEGIN_STMT
  SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();

  <bb 21> :
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  if (CallTxConfirmation == 1)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  CanIf_SendTxConfirmation (CanTxPduId);

  <bb 24> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9913 = RetVal;
  PduInfo = {CLOBBER};
  return D.9913;

}


CanIf_GetControllerMode (uint8 ControllerId, CanIf_ControllerModeType * ControllerModePtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.9879;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.17_1 = CanIf_State;
  if (CanIf_State.17_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 4, 30);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_DriverConfigPtr.18_2 = CanIf_DriverConfigPtr;
  _3 = CanIf_DriverConfigPtr.18_2->nrOfControllers;
  if (ControllerId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 4, 15);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ControllerModePtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 4, 20);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _4 = (int) ControllerId;
  _5 = CanIf_CanControllerMode[_4];
  *ControllerModePtr = _5;
  # DEBUG BEGIN_STMT
  SchM_Exit_CanIf_SCHM_CANIF_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9879 = RetVal;
  return D.9879;

}


CanIf_SetControllerMode (uint8 ControllerId, CanIf_ControllerModeType ControllerMode)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.9857;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State.9_1 = CanIf_State;
  if (CanIf_State.9_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 3, 30);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanIf_DriverConfigPtr.10_2 = CanIf_DriverConfigPtr;
  _3 = CanIf_DriverConfigPtr.10_2->nrOfControllers;
  if (ControllerId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 3, 15);
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ControllerMode != 3)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  if (ControllerMode != 1)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  if (ControllerMode != 2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 3, 21);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal = CanIf_SetControllerModeInternal (ControllerId, ControllerMode);

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9857 = RetVal;
  return D.9857;

}


CanIf_Init (const struct CanIf_ConfigType * ConfigPtr)
{
  const struct CanIf_ConfigType * LocalConfigPtr;
  uint16 i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  LocalConfigPtr = ConfigPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (LocalConfigPtr == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 1, 20);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = CanIf_IsValidConfig (LocalConfigPtr);
  if (_1 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 1, 20);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr = LocalConfigPtr;
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.1_2 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.2_3 = CanIf_ConfigPtr;
  _4 = CanIf_ConfigPtr.2_3->txLPduConfigPtr;
  _5 = CanIf_ConfigPtr.1_2 + _4;
  CanIf_TxPduConfigPtr = _5;
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.3_6 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.4_7 = CanIf_ConfigPtr;
  _8 = CanIf_ConfigPtr.4_7->rxLPduConfigPtr;
  _9 = CanIf_ConfigPtr.3_6 + _8;
  CanIf_RxPduConfigPtr = _9;
  # DEBUG BEGIN_STMT
  CanIf_ConfigPtr.5_10 = CanIf_ConfigPtr;
  CanIf_ConfigPtr.6_11 = CanIf_ConfigPtr;
  _12 = CanIf_ConfigPtr.6_11->driverConfigPtr;
  _13 = CanIf_ConfigPtr.5_10 + _12;
  CanIf_DriverConfigPtr = _13;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = (int) i;
  CanIf_CanControllerMode[_14] = 2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = (int) i;
  CanIf_CanControllerFlags[_15] = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = (int) i;
  CanIf_PduMode[_16] = 0;
  # DEBUG BEGIN_STMT
  i.7_17 = i;
  i = i.7_17 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  CanIf_DriverConfigPtr.8_18 = CanIf_DriverConfigPtr;
  _19 = CanIf_DriverConfigPtr.8_18->nrOfControllers;
  _20 = (short unsigned int) _19;
  if (i < _20)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIf_State = 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


CanIf_IsValidConfig (const void * voidConfigPtr)
{
  const struct CanIf_ConfigType * ConfigPtr;
  Std_ReturnType RetVal;
  Std_ReturnType D.9838;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  ConfigPtr = voidConfigPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (ConfigPtr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = ConfigPtr->PlatformSignature;
  _2 = TS_PlatformSigIsValid (_1);
  if (_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = ConfigPtr->CfgSignature;
  if (_3 == 4094173456)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = ConfigPtr->LcfgSignature;
  CanIf_LcfgSignature.0_5 = CanIf_LcfgSignature;
  if (_4 == CanIf_LcfgSignature.0_5)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = ConfigPtr->PublicInfoSignature;
  if (_6 == 3439471228)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9838 = RetVal;
  return D.9838;

}


CanIf_CheckWakeFlag_HlpNoPn (uint8 TransceiverId)
{
  Std_ReturnType D.9826;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 31, 17);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9826 = 1;
  return D.9826;

}


CanIf_ClearTrcvWufFlag_HlpNoPn (uint8 TransceiverId)
{
  Std_ReturnType D.9824;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (60, 0, 30, 17);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9824 = 1;
  return D.9824;

}


