Dcm_Dsd_SecurityLevelCheckOnService (const struct Dcm_SidTabEntryConfigType * SidConfig)
{
  Dcm_SecLevelType CurSecLevel;
  uint8 i;
  Dcm_NegativeResponseCodeType SecurityCheckNrc;
  Dcm_NegativeResponseCodeType D.7992;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SecurityCheckNrc = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CurSecLevel = Dcm_Dsl_SecurityLevelHandler_GetSecurityLevel ();
  # DEBUG BEGIN_STMT
  if (CurSecLevel != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = SidConfig->SecLevels;
  _2 = (sizetype) i;
  _3 = _1 + _2;
  _4 = *_3;
  if (CurSecLevel == _4)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _5 = SidConfig->NumSecLevels;
  if (i < _5)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _6 = SidConfig->NumSecLevels;
  if (i >= _6)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SecurityCheckNrc = 51;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  SecurityCheckNrc = 51;

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7992 = SecurityCheckNrc;
  return D.7992;

}


Dcm_DsdInternal_HandleReqMsgType (Dcm_RequestTypeType RequestType, struct Dcm_MsgContextType * curMsgContext, Dcm_BufferUsageType * TxBufferUse)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (RequestType == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (RequestType == 10)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (RequestType == 12)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  curMsgContext->msgAddInfo.reqType = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  curMsgContext->msgAddInfo.reqType = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _1 = RequestType + 255;
  if (_1 <= 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  *TxBufferUse = 4;
  # DEBUG BEGIN_STMT
  curMsgContext->msgAddInfo.requestOrigin = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *TxBufferUse = 5;
  # DEBUG BEGIN_STMT
  curMsgContext->msgAddInfo.requestOrigin = 2;

  <bb 10> :
  return;

}


Dcm_DsdInternal_SupplierNotification (uint8 instIdx)
{
  Std_ReturnType NotificationRetVal;
  uint8_least i;
  uint16 SourceAddress;
  Dcm_NegativeResponseCodeType aggregatedNrc;
  Dcm_NegativeResponseCodeType curNrc;
  uint8 ReqType;
  uint8 * RequestData;
  uint16 DataSize;
  struct Dcm_MsgContextType * pMsgContext;
  uint8 Sid;
  struct Dcm_HsmInfoType * CurHsmInfo;
  Std_ReturnType SupplNotifStatus;
  Std_ReturnType D.8026;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instIdx;
  CurHsmInfo = &Dcm_HsmInfo[_1];
  # DEBUG BEGIN_STMT
  Sid = CurHsmInfo->serviceId;
  # DEBUG BEGIN_STMT
  _2 = (int) instIdx;
  pMsgContext = &Dcm_HsmInfo[_2].msgContext;
  # DEBUG BEGIN_STMT
  _3 = pMsgContext->reqDataLen;
  DataSize = (uint16) _3;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReqType = 0;
  # DEBUG BEGIN_STMT
  curNrc = 0;
  # DEBUG BEGIN_STMT
  aggregatedNrc = 16;
  # DEBUG BEGIN_STMT
  SourceAddress = CurHsmInfo->TesterSourceAddress;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NotificationRetVal = 0;
  # DEBUG BEGIN_STMT
  _4 = CurHsmInfo->RequestType;
  if (_4 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _5 = CurHsmInfo->RequestType;
  if (_5 == 10)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _6 = CurHsmInfo->RequestType;
  if (_6 == 12)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ReqType = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ReqType = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (DataSize != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RequestData = pMsgContext->reqData;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RequestData = 0B;

  <bb 10> :
  # DEBUG BEGIN_STMT
  SupplNotifStatus = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 19>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _7 = Dcm_RteSupplierNotificationTable[i].Indication;
  NotificationRetVal = _7 (Sid, RequestData, DataSize, ReqType, SourceAddress, &curNrc);
  # DEBUG BEGIN_STMT
  if (NotificationRetVal == 8)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  SupplNotifStatus = 8;
  # DEBUG BEGIN_STMT
  goto <bb 20>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (NotificationRetVal == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  curNrc.10_8 = curNrc;
  if (curNrc.10_8 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 71, 2);
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  aggregatedNrc = curNrc;

  <bb 17> :
  # DEBUG BEGIN_STMT
  SupplNotifStatus = 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (i == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _9 = (int) SupplNotifStatus;
  switch (_9) <default: <L29> [INV], case 1: <L24> [INV], case 8: <L18> [INV]>

  <bb 21> :
<L18>:
  # DEBUG BEGIN_STMT
  _10 = (int) instIdx;
  _11 = Dcm_HsmInfo[_10].rpCntr;
  if (_11 == 0)
    goto <bb 24>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  _12 = CurHsmInfo->serviceId;
  if (_12 == 4)
    goto <bb 24>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  _13 = CurHsmInfo->serviceId;
  if (_13 == 9)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  Dcm_HsmEmitInst (&Dcm_HsmScDcm, instIdx, 5);
  goto <bb 27>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  CurHsmInfo->negativeResponseCode = 34;
  # DEBUG BEGIN_STMT
  Dcm_HsmEmitToSelfInst (&Dcm_HsmScDcm, instIdx, 6);
  goto <bb 27>; [INV]

  <bb 26> :
<L24>:
  # DEBUG BEGIN_STMT
  CurHsmInfo->negativeResponseCode = aggregatedNrc;
  # DEBUG BEGIN_STMT
  Dcm_HsmEmitToSelfInst (&Dcm_HsmScDcm, instIdx, 6);
  # DEBUG BEGIN_STMT

  <bb 27> :
<L29>:
  # DEBUG BEGIN_STMT
  D.8026 = SupplNotifStatus;
  curNrc = {CLOBBER};
  return D.8026;

}


Dcm_DsdInternal_ManufacturerNotification (uint8 instIdx)
{
  Std_ReturnType NotificationRetVal;
  uint8_least i;
  uint16 SourceAddress;
  Dcm_NegativeResponseCodeType aggregatedNrc;
  Dcm_NegativeResponseCodeType curNrc;
  uint8 ReqType;
  uint8 * RequestData;
  const uint16 DataSize;
  uint8 Sid;
  struct Dcm_HsmInfoType * CurHsmInfo;
  Std_ReturnType MftNotifStatus;
  Std_ReturnType D.7950;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instIdx;
  CurHsmInfo = &Dcm_HsmInfo[_1];
  # DEBUG BEGIN_STMT
  Sid = CurHsmInfo->serviceId;
  # DEBUG BEGIN_STMT
  _2 = CurHsmInfo->RxBuffer.FilledLength;
  _3 = (short unsigned int) _2;
  DataSize = _3 + 65535;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  curNrc = 0;
  # DEBUG BEGIN_STMT
  aggregatedNrc = 16;
  # DEBUG BEGIN_STMT
  SourceAddress = CurHsmInfo->TesterSourceAddress;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NotificationRetVal = 0;
  # DEBUG BEGIN_STMT
  _4 = CurHsmInfo->RequestType;
  if (_4 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _5 = CurHsmInfo->RequestType;
  if (_5 == 10)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _6 = CurHsmInfo->RequestType;
  if (_6 == 12)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ReqType = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ReqType = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (DataSize != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _7 = CurHsmInfo->RxBuffer.BufferPtr;
  RequestData = _7 + 1;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RequestData = 0B;

  <bb 10> :
  # DEBUG BEGIN_STMT
  MftNotifStatus = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 19>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _8 = Dcm_RteManufacturerNotificationTable[i].Indication;
  NotificationRetVal = _8 (Sid, RequestData, DataSize, ReqType, SourceAddress, &curNrc);
  # DEBUG BEGIN_STMT
  if (NotificationRetVal == 8)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  MftNotifStatus = 8;
  # DEBUG BEGIN_STMT
  goto <bb 20>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (NotificationRetVal == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  curNrc.8_9 = curNrc;
  if (curNrc.8_9 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 70, 2);
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  aggregatedNrc = curNrc;

  <bb 17> :
  # DEBUG BEGIN_STMT
  MftNotifStatus = 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (i == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _10 = (int) MftNotifStatus;
  switch (_10) <default: <L29> [INV], case 1: <L24> [INV], case 8: <L18> [INV]>

  <bb 21> :
<L18>:
  # DEBUG BEGIN_STMT
  _11 = (int) instIdx;
  _12 = Dcm_HsmInfo[_11].rpCntr;
  if (_12 == 0)
    goto <bb 24>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  _13 = CurHsmInfo->serviceId;
  if (_13 == 4)
    goto <bb 24>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  _14 = CurHsmInfo->serviceId;
  if (_14 == 9)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  Dcm_HsmEmitInst (&Dcm_HsmScDcm, instIdx, 5);
  goto <bb 27>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  CurHsmInfo->negativeResponseCode = 34;
  # DEBUG BEGIN_STMT
  Dcm_HsmEmitToSelfInst (&Dcm_HsmScDcm, instIdx, 6);
  goto <bb 27>; [INV]

  <bb 26> :
<L24>:
  # DEBUG BEGIN_STMT
  CurHsmInfo->negativeResponseCode = aggregatedNrc;
  # DEBUG BEGIN_STMT
  Dcm_HsmEmitToSelfInst (&Dcm_HsmScDcm, instIdx, 6);
  # DEBUG BEGIN_STMT

  <bb 27> :
<L29>:
  # DEBUG BEGIN_STMT
  D.7950 = MftNotifStatus;
  curNrc = {CLOBBER};
  return D.7950;

}


Dcm_DsdInternal_CheckSubServiceSecurity (uint8 subSidIdxExt, const struct Dcm_SidTabEntryConfigType * curSidConfig)
{
  Dcm_SecLevelType curSecLevel;
  boolean subServiceSecurity;
  uint8_least i;
  boolean D.8094;

  <bb 2> :
  # DEBUG BEGIN_STMT
  i = 0;
  # DEBUG BEGIN_STMT
  subServiceSecurity = 0;
  # DEBUG BEGIN_STMT
  _1 = curSidConfig->SubServices;
  _2 = (unsigned int) subSidIdxExt;
  _3 = _2 * 24;
  _4 = _1 + _3;
  _5 = _4->NumSubSecLevels;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  curSecLevel = Dcm_Dsl_SecurityLevelHandler_GetSecurityLevel ();
  # DEBUG BEGIN_STMT
  if (curSecLevel != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = curSidConfig->SubServices;
  _7 = (unsigned int) subSidIdxExt;
  _8 = _7 * 24;
  _9 = _6 + _8;
  _10 = _9->SubSecLevels;
  _11 = _10 + i;
  _12 = *_11;
  if (curSecLevel == _12)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  subServiceSecurity = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _13 = curSidConfig->SubServices;
  _14 = (unsigned int) subSidIdxExt;
  _15 = _14 * 24;
  _16 = _13 + _15;
  _17 = _16->NumSubSecLevels;
  _18 = (long unsigned int) _17;
  if (i < _18)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (subServiceSecurity != 1)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  subServiceSecurity = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.8094 = subServiceSecurity;
  return D.8094;

}


Dcm_DsdInternal_CheckSubServiceSession (uint8 subSidIdxExt, const struct Dcm_SidTabEntryConfigType * curSidConfig)
{
  const Dcm_SesCtrlType curSesCtrl;
  boolean subServiceSession;
  uint8_least i;
  boolean D.8084;

  <bb 2> :
  # DEBUG BEGIN_STMT
  i = 0;
  # DEBUG BEGIN_STMT
  subServiceSession = 0;
  # DEBUG BEGIN_STMT
  _1 = curSidConfig->SubServices;
  _2 = (unsigned int) subSidIdxExt;
  _3 = _2 * 24;
  _4 = _1 + _3;
  _5 = _4->NumSubSesCtrls;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  curSesCtrl = Dcm_Dsl_DiagnosticSessionHandler_GetCurrentSession ();
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = curSidConfig->SubServices;
  _7 = (unsigned int) subSidIdxExt;
  _8 = _7 * 24;
  _9 = _6 + _8;
  _10 = _9->SubSesCtrls;
  _11 = _10 + i;
  _12 = *_11;
  if (_12 == 255)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _13 = curSidConfig->SubServices;
  _14 = (unsigned int) subSidIdxExt;
  _15 = _14 * 24;
  _16 = _13 + _15;
  _17 = _16->SubSesCtrls;
  _18 = _17 + i;
  _19 = *_18;
  if (curSesCtrl == _19)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  subServiceSession = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _20 = curSidConfig->SubServices;
  _21 = (unsigned int) subSidIdxExt;
  _22 = _21 * 24;
  _23 = _20 + _22;
  _24 = _23->NumSubSesCtrls;
  _25 = (long unsigned int) _24;
  if (i < _25)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (subServiceSession != 1)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  subServiceSession = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.8084 = subServiceSession;
  return D.8084;

}


Dcm_DsdInternal_ValidateSubSvcReq (uint8 instIdx, const struct Dcm_SidTabEntryConfigType * curSidConfig)
{
  const struct Dcm_SidTabConfigType * const curSidTabConfig;
  uint8 ServiceTableIndex;
  const struct Dcm_ProtocolConfigType * const curProtocolConfig;
  struct Dcm_MsgContextType * const curMsgContext;
  struct Dcm_HsmInfoType * curHsmInfo;
  boolean subserviceEnabled;
  Dcm_NegativeResponseCodeType curNrc;
  uint8 modeRuleNrc;
  uint8 subSidIdxExt;
  Dcm_NegativeResponseCodeType D.8068;

  <bb 2> :
  # DEBUG BEGIN_STMT
  subSidIdxExt = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  curNrc = 1;
  # DEBUG BEGIN_STMT
  subserviceEnabled = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instIdx;
  curHsmInfo = &Dcm_HsmInfo[_1];
  # DEBUG BEGIN_STMT
  curMsgContext = &curHsmInfo->msgContext;
  # DEBUG BEGIN_STMT
  _2 = curMsgContext->reqDataLen;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = (int) instIdx;
  curProtocolConfig = &Dcm_ProtocolConfig[_3];
  # DEBUG BEGIN_STMT
  ServiceTableIndex = curProtocolConfig->ServiceTableIndex;
  # DEBUG BEGIN_STMT
  _4 = (int) ServiceTableIndex;
  curSidTabConfig = &Dcm_SidTabConfig[_4];
  # DEBUG BEGIN_STMT
  _5 = curSidTabConfig->Entries;
  _6 = curHsmInfo->sidTabEntryInd;
  _7 = (unsigned int) _6;
  _8 = _7 * 32;
  _9 = _5 + _8;
  _10 = _9->ServiceId;
  if (_10 == 62)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _11 = curMsgContext->reqData;
  _12 = *_11;
  if (_12 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _13 = curMsgContext->reqData;
  _14 = *_13;
  if (_14 == 128)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  subserviceEnabled = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (subserviceEnabled == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _15 = curHsmInfo->sidTabEntryInd;
  _16 = curMsgContext->reqData;
  _17 = *_16;
  subserviceEnabled = Dcm_DsdInternal_GetSubServiceUsedStatus (ServiceTableIndex, _15, curSidConfig, _17, &subSidIdxExt);

  <bb 9> :
  # DEBUG BEGIN_STMT
  _18 = curSidConfig->ServiceId;
  if (_18 != 49)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (subserviceEnabled == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  curNrc = 18;
  goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  curNrc = 0;
  goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  curNrc = 0;
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  curNrc = 19;

  <bb 15> :
  # DEBUG BEGIN_STMT
  _19 = curSidConfig->ServiceId;
  if (_19 != 49)
    goto <bb 16>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (curNrc == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  subSidIdxExt.11_20 = subSidIdxExt;
  _21 = Dcm_DsdInternal_CheckSubServiceSession (subSidIdxExt.11_20, curSidConfig);
  if (_21 == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  curNrc = 126;
  goto <bb 21>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  subSidIdxExt.12_22 = subSidIdxExt;
  _23 = Dcm_DsdInternal_CheckSubServiceSecurity (subSidIdxExt.12_22, curSidConfig);
  if (_23 == 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  curNrc = 51;

  <bb 21> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (curNrc == 0)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 22> :
  _24 = curSidConfig->SubServices;
  subSidIdxExt.13_25 = subSidIdxExt;
  _26 = (unsigned int) subSidIdxExt.13_25;
  _27 = _26 * 24;
  _28 = _24 + _27;
  _29 = _28->ModeRuleSubSrvFunction;
  if (_29 != 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  _30 = curSidConfig->SubServices;
  subSidIdxExt.14_31 = subSidIdxExt;
  _32 = (unsigned int) subSidIdxExt.14_31;
  _33 = _32 * 24;
  _34 = _30 + _33;
  _35 = _34->ModeRuleSubSrvFunction;
  _35 (&modeRuleNrc);
  # DEBUG BEGIN_STMT
  curNrc = modeRuleNrc;

  <bb 24> :
  # DEBUG BEGIN_STMT
  if (curNrc == 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  subSidIdxExt.15_36 = subSidIdxExt;
  curHsmInfo->subServiceIdIdx = subSidIdxExt.15_36;

  <bb 26> :
  # DEBUG BEGIN_STMT
  _37 = curSidConfig->ServiceId;
  if (_37 == 39)
    goto <bb 27>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 27> :
  if (curNrc != 0)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  if (curNrc != 18)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_Reset ();

  <bb 30> :
  # DEBUG BEGIN_STMT
  D.8068 = curNrc;
  subSidIdxExt = {CLOBBER};
  modeRuleNrc = {CLOBBER};
  return D.8068;

}


Dcm_DsdInternal_GetSubServiceUsedStatus (uint8 ServiceTableIndex, uint8 sidIdxExt, const struct Dcm_SidTabEntryConfigType * curSidConfig, uint8 subSidId, uint8 * subSidIdxExt)
{
  const uint8 subserviceEnabledBitMask;
  const uint8 subserviceEnabledByteIdx;
  uint8 subSidIdxExtLocal;
  boolean subserviceEnabled;
  boolean D.8075;

  <bb 2> :
  # DEBUG BEGIN_STMT
  subserviceEnabled = 0;
  # DEBUG BEGIN_STMT
  subSidIdxExtLocal = *subSidIdxExt;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = curSidConfig->SubServices;
  _2 = (unsigned int) subSidIdxExtLocal;
  _3 = _2 * 24;
  _4 = _1 + _3;
  _5 = _4->SubServiceId;
  if (subSidId == _5)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  subserviceEnabledByteIdx = subSidIdxExtLocal / 8;
  # DEBUG BEGIN_STMT
  _6 = (unsigned int) subSidIdxExtLocal;
  _7 = _6 & 7;
  _8 = 1 << _7;
  subserviceEnabledBitMask = (const uint8) _8;
  # DEBUG BEGIN_STMT
  _9 = (int) ServiceTableIndex;
  _10 = (int) sidIdxExt;
  _11 = (int) subserviceEnabledByteIdx;
  _12 = Dcm_DsdSubServiceUsed[_9][_10][_11];
  _13 = subserviceEnabledBitMask & _12;
  if (_13 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  subserviceEnabled = 1;
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  subSidIdxExtLocal.16_14 = subSidIdxExtLocal;
  subSidIdxExtLocal = subSidIdxExtLocal.16_14 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _15 = curSidConfig->NumSubServices;
  if (subSidIdxExtLocal < _15)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  *subSidIdxExt = subSidIdxExtLocal;
  # DEBUG BEGIN_STMT
  D.8075 = subserviceEnabled;
  return D.8075;

}


Dcm_DsdInternal_ValidateSvcReq (uint8 instIdx, const struct Dcm_SidTabEntryConfigType * * curSidConfig)
{
  const Dcm_SesCtrlType curSesCtrl;
  const uint8 serviceEnabledBitMask;
  const uint8 serviceEnabledByteIdx;
  const struct Dcm_SidTabEntryConfigType * sidConfig;
  const struct Dcm_SidTabConfigType * const curSidTabConfig;
  uint8 ServiceTableIndex;
  const struct Dcm_ProtocolConfigType * const curProtocolConfig;
  struct Dcm_HsmInfoType * curHsmInfo;
  boolean serviceEnabled;
  Dcm_NegativeResponseCodeType curNrc;
  uint8 modeRuleNrc;
  uint8 sidIdxExt;
  uint8_least i;
  Dcm_NegativeResponseCodeType D.7983;

  <bb 2> :
  # DEBUG BEGIN_STMT
  i = 0;
  # DEBUG BEGIN_STMT
  sidIdxExt = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  curNrc = 1;
  # DEBUG BEGIN_STMT
  serviceEnabled = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instIdx;
  curHsmInfo = &Dcm_HsmInfo[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instIdx;
  curProtocolConfig = &Dcm_ProtocolConfig[_2];
  # DEBUG BEGIN_STMT
  ServiceTableIndex = curProtocolConfig->ServiceTableIndex;
  # DEBUG BEGIN_STMT
  _3 = (int) ServiceTableIndex;
  curSidTabConfig = &Dcm_SidTabConfig[_3];
  # DEBUG BEGIN_STMT
  sidConfig = 0B;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = curSidTabConfig->Entries;
  _5 = (unsigned int) sidIdxExt;
  _6 = _5 * 32;
  _7 = _4 + _6;
  _8 = _7->ServiceId;
  _9 = curHsmInfo->serviceId;
  if (_8 == _9)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  serviceEnabledByteIdx = sidIdxExt / 8;
  # DEBUG BEGIN_STMT
  _10 = (unsigned int) sidIdxExt;
  _11 = _10 & 7;
  _12 = 1 << _11;
  serviceEnabledBitMask = (const uint8) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) ServiceTableIndex;
  _14 = (int) serviceEnabledByteIdx;
  _15 = Dcm_DsdServiceUsed[_13][_14];
  _16 = serviceEnabledBitMask & _15;
  if (_16 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  serviceEnabled = 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  curHsmInfo->sidTabEntryInd = sidIdxExt;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  sidIdxExt.9_17 = sidIdxExt;
  sidIdxExt = sidIdxExt.9_17 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _18 = curSidTabConfig->NumEntries;
  if (sidIdxExt < _18)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (serviceEnabled == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _19 = curHsmInfo->serviceId;
  if (_19 <= 15)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _20 = curProtocolConfig->SupressServiceNotSupportedNRC;
  if (_20 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  curHsmInfo->msgContext.msgAddInfo.suppressPosResponse = 1;

  <bb 13> :
  # DEBUG BEGIN_STMT
  curNrc = 17;
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  curNrc = 0;
  # DEBUG BEGIN_STMT
  _21 = curSidTabConfig->Entries;
  _22 = (unsigned int) sidIdxExt;
  _23 = _22 * 32;
  sidConfig = _21 + _23;
  # DEBUG BEGIN_STMT
  *curSidConfig = sidConfig;

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (curNrc == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _24 = curHsmInfo->serviceId;
  if (_24 > 15)
    goto <bb 17>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _25 = sidConfig->NumSesCtrls;
  if (_25 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  curSesCtrl = Dcm_Dsl_DiagnosticSessionHandler_GetCurrentSession ();
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 22>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _26 = sidConfig->SesCtrls;
  _27 = _26 + i;
  _28 = *_27;
  if (_28 == 255)
    goto <bb 23>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  _29 = sidConfig->SesCtrls;
  _30 = _29 + i;
  _31 = *_30;
  if (curSesCtrl == _31)
    goto <bb 23>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 22> :
  # DEBUG BEGIN_STMT
  _32 = sidConfig->NumSesCtrls;
  _33 = (long unsigned int) _32;
  if (i < _33)
    goto <bb 19>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  _34 = sidConfig->NumSesCtrls;
  _35 = (long unsigned int) _34;
  if (i >= _35)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  curNrc = 127;

  <bb 25> :
  # DEBUG BEGIN_STMT
  if (curNrc == 0)
    goto <bb 26>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 26> :
  _36 = sidConfig->NumSecLevels;
  if (_36 != 0)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  curNrc = Dcm_Dsd_SecurityLevelCheckOnService (sidConfig);

  <bb 28> :
  # DEBUG BEGIN_STMT
  if (curNrc == 0)
    goto <bb 29>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 29> :
  _37 = sidConfig->ModeRuleSrvFunction;
  if (_37 != 0B)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  _38 = sidConfig->ModeRuleSrvFunction;
  _38 (&modeRuleNrc);
  # DEBUG BEGIN_STMT
  curNrc = modeRuleNrc;

  <bb 31> :
  # DEBUG BEGIN_STMT
  D.7983 = curNrc;
  modeRuleNrc = {CLOBBER};
  return D.7983;

}


Dcm_DsdInternal_UpdateHsmInfoAfterValidSubSvcReq (uint8 instIdx, const struct Dcm_SidTabEntryConfigType * curSidConfig, Dcm_NegativeResponseCodeType curNrc)
{
  struct Dcm_HsmInfoType * curHsmInfo;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instIdx;
  curHsmInfo = &Dcm_HsmInfo[_1];
  # DEBUG BEGIN_STMT
  if (curNrc == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  curHsmInfo->requestValidationStatus = 1;
  # DEBUG BEGIN_STMT
  _2 = curSidConfig->ExtSrvHandler;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  curHsmInfo->dspService = 0;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _3 = curHsmInfo->serviceId;
  Dcm_Dsl_DiagnosticSessionHandler_ClearResetToDefaultSessionOccured (_3);
  # DEBUG BEGIN_STMT
  Dcm_DspInternal_SvcFunc (instIdx, 0);

  <bb 6> :
  return;

}


Dcm_DsdInternal_UpdateHsmInfoAfterValidSvcReq (uint8 instIdx, const struct Dcm_SidTabEntryConfigType * curSidConfig, Dcm_NegativeResponseCodeType curNrc)
{
  struct Dcm_HsmInfoType * curHsmInfo;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instIdx;
  curHsmInfo = &Dcm_HsmInfo[_1];
  # DEBUG BEGIN_STMT
  _2 = curHsmInfo->RxBuffer.FilledLength;
  if (_2 > 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = curHsmInfo->RxBuffer.BufferPtr;
  _4 = _3 + 1;
  curHsmInfo->msgContext.reqData = _4;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  curHsmInfo->msgContext.reqData = 0B;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = curHsmInfo->serviceId;
  curHsmInfo->msgContext.idContext = _5;
  # DEBUG BEGIN_STMT
  _6 = curHsmInfo->RxConnectionId;
  curHsmInfo->msgContext.dcmRxPduId = _6;
  # DEBUG BEGIN_STMT
  if (curNrc == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _7 = curHsmInfo->serviceId;
  _8 = curHsmInfo->TxBuffer.BufferPtr;
  _9 = _7 | 64;
  *_8 = _9;
  # DEBUG BEGIN_STMT
  SchM_Enter_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _10 = curHsmInfo->RxBuffer.FilledLength;
  _11 = _10 + 4294967295;
  curHsmInfo->msgContext.reqDataLen = _11;
  # DEBUG BEGIN_STMT
  curHsmInfo->TxBuffer.FilledLength = 1;
  # DEBUG BEGIN_STMT
  SchM_Exit_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _12 = curHsmInfo->TxBuffer.BufferPtr;
  _13 = _12 + 1;
  curHsmInfo->msgContext.resData = _13;
  # DEBUG BEGIN_STMT
  curHsmInfo->msgContext.resDataLen = 0;
  # DEBUG BEGIN_STMT
  curHsmInfo->msgContext.msgAddInfo.suppressPosResponse = 0;
  # DEBUG BEGIN_STMT
  _14 = curSidConfig->SubfuncAvail;
  if (_14 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  _15 = curHsmInfo->msgContext.reqDataLen;
  if (_15 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _16 = curHsmInfo->msgContext.reqData;
  _17 = *_16;
  _18 = (signed char) _17;
  if (_18 < 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  curHsmInfo->msgContext.msgAddInfo.suppressPosResponse = 1;
  # DEBUG BEGIN_STMT
  _19 = curHsmInfo->msgContext.reqData;
  _20 = *_19;
  _21 = curHsmInfo->msgContext.reqData;
  _22 = _20 & 127;
  *_21 = _22;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  curHsmInfo->msgContext.msgAddInfo.suppressPosResponse = 0;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _23 = curHsmInfo->msgContext.reqData;
  _24 = *_23;
  curHsmInfo->subServiceId = _24;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  curHsmInfo->msgContext.msgAddInfo.suppressPosResponse = 0;

  <bb 13> :
  # DEBUG BEGIN_STMT
  _25 = curHsmInfo->TxBuffer.Size;
  _26 = _25 + 4294967295;
  curHsmInfo->msgContext.resMaxDataLen = _26;

  <bb 14> :
  return;

}


Dcm_DsdInternal_ProcessPage (Dcm_MsgLenType FilledPageLen)
{
  const uint8 instIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dcm_Initialized.20_1 = Dcm_Initialized;
  if (Dcm_Initialized.20_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 105, 5);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = Dcm_Dsl_Supervisor_GetLatestExternalUDSProtocol ();
  _3 = (unsigned char) _2;
  instIdx = _3 + 244;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = (int) instIdx;
  _5 = Dcm_HsmInfo[_4].sentLength;
  _6 = (int) instIdx;
  _7 = FilledPageLen + _5;
  Dcm_HsmInfo[_6].sentLength = _7;
  # DEBUG BEGIN_STMT
  SchM_Enter_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _8 = (int) instIdx;
  _9 = Dcm_HsmInfo[_8].TxBuffer.FilledLength;
  _10 = (int) instIdx;
  _11 = FilledPageLen + _9;
  Dcm_HsmInfo[_10].TxBuffer.FilledLength = _11;
  # DEBUG BEGIN_STMT
  SchM_Exit_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Dcm_HsmEmitInst (&Dcm_HsmScDcm, instIdx, 10);

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Dcm_DsdInternal_StartPagedProcessing (const struct Dcm_MsgContextType * pMsgContext)
{
  uint8 instIdx;
  Dcm_MsgLenType curTxBufferLen;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dcm_Initialized.19_1 = Dcm_Initialized;
  if (Dcm_Initialized.19_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 69, 5);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (pMsgContext == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 69, 7);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = pMsgContext->dcmRxPduId;
  instIdx = Dcm_Dsl_Supervisor_GetProcessingProtocolIndex (_2, 1);
  # DEBUG BEGIN_STMT
  SchM_Enter_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _3 = (int) instIdx;
  curTxBufferLen = Dcm_HsmInfo[_3].TxBuffer.FilledLength;
  # DEBUG BEGIN_STMT
  SchM_Exit_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _4 = (int) instIdx;
  Dcm_HsmInfo[_4].sentLength = curTxBufferLen;

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Dcm_ExternalProcessingDone (struct Dcm_MsgContextType * pMsgContext)
{
  uint8 instIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dcm_Initialized.18_1 = Dcm_Initialized;
  if (Dcm_Initialized.18_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 67, 5);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (pMsgContext == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 67, 7);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = pMsgContext->dcmRxPduId;
  instIdx = Dcm_Dsl_Supervisor_GetProcessingProtocolIndex (_2, 1);
  # DEBUG BEGIN_STMT
  _3 = pMsgContext->resDataLen;
  _4 = (int) instIdx;
  _5 = _3 + 1;
  Dcm_HsmInfo[_4].TxBuffer.FilledLength = _5;

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Dcm_ExternalSetNegResponse (struct Dcm_MsgContextType * pMsgContext, Dcm_NegativeResponseCodeType errorCode)
{
  struct Dcm_HsmInfoType * const curHsmInfo;
  uint8 ProtocolIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dcm_Initialized.17_1 = Dcm_Initialized;
  if (Dcm_Initialized.17_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 68, 5);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (pMsgContext == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 68, 7);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = pMsgContext->dcmRxPduId;
  _3 = pMsgContext->msgAddInfo.requestOrigin;
  _4 = (unsigned char) _3;
  ProtocolIndex = Dcm_Dsl_Supervisor_GetProcessingProtocolIndex (_2, _4);
  # DEBUG BEGIN_STMT
  _5 = (int) ProtocolIndex;
  curHsmInfo = &Dcm_HsmInfo[_5];
  # DEBUG BEGIN_STMT
  _6 = errorCode / 32;
  _7 = (unsigned int) _6;
  _8 = Dcm_ValidNegativeResponseCodeMask[_7];
  _9 = (unsigned int) errorCode;
  _10 = _9 & 31;
  _11 = _8 >> _10;
  _12 = _11 & 1;
  if (_12 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 68, 6);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _13 = curHsmInfo->negativeResponseCode;
  if (_13 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  curHsmInfo->negativeResponseCode = errorCode;

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


Dcm_DsdInternal_DispatchSvcReq (uint8 instIdx)
{
  Dcm_NegativeResponseCodeType curNrc;
  const struct Dcm_SidTabEntryConfigType * curSidConfig;
  struct Dcm_MsgContextType * const curMsgContext;
  struct Dcm_HsmInfoType * curHsmInfo;
  BufReq_ReturnType TxBufferAllocationResult;
  Dcm_BufferUsageType TxBufferUse;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TxBufferUse = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instIdx;
  curHsmInfo = &Dcm_HsmInfo[_1];
  # DEBUG BEGIN_STMT
  curMsgContext = &curHsmInfo->msgContext;
  # DEBUG BEGIN_STMT
  curSidConfig = 0B;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = curHsmInfo->RequestType;
  Dcm_DsdInternal_HandleReqMsgType (_2, curMsgContext, &TxBufferUse);
  # DEBUG BEGIN_STMT
  curHsmInfo->negativeResponseCode = 0;
  # DEBUG BEGIN_STMT
  curHsmInfo->processPageFuncId = 255;
  # DEBUG BEGIN_STMT
  curHsmInfo->dspService = 1;
  # DEBUG BEGIN_STMT
  _3 = curHsmInfo->RxBuffer.BufferPtr;
  _4 = *_3;
  curHsmInfo->serviceId = _4;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = curHsmInfo->TxConnectionId;
  _6 = &curHsmInfo->NRCBuffer;
  Dcm_Dsl_BufferAllocate (_5, 7, 3, _6);
  # DEBUG BEGIN_STMT
  _7 = (short unsigned int) instIdx;
  _8 = _7 + 12;
  TxBufferUse.0_9 = TxBufferUse;
  _10 = &curHsmInfo->TxBuffer;
  TxBufferAllocationResult = Dcm_Dsl_BufferAllocate (_8, TxBufferUse.0_9, 0, _10);
  # DEBUG BEGIN_STMT
  if (TxBufferAllocationResult != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _11 = curHsmInfo->RxBuffer.FilledLength;
  _12 = _11 + 4294967295;
  curHsmInfo->msgContext.reqDataLen = _12;
  # DEBUG BEGIN_STMT
  _13 = curHsmInfo->RxBuffer.FilledLength;
  if (_13 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _14 = curHsmInfo->RxBuffer.BufferPtr;
  _15 = _14 + 1;
  curHsmInfo->msgContext.reqData = _15;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  curHsmInfo->msgContext.reqData = 0B;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _16 = curHsmInfo->serviceId;
  curHsmInfo->msgContext.idContext = _16;
  # DEBUG BEGIN_STMT
  _17 = curHsmInfo->RxConnectionId;
  curHsmInfo->msgContext.dcmRxPduId = _17;
  # DEBUG BEGIN_STMT
  curHsmInfo->negativeResponseCode = 33;
  # DEBUG BEGIN_STMT
  Dcm_HsmEmitToSelfInst (&Dcm_HsmScDcm, instIdx, 6);
  goto <bb 21>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _18 = Dcm_DsdInternal_ManufacturerNotification (instIdx);
  if (_18 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  curNrc = Dcm_DsdInternal_ValidateSvcReq (instIdx, &curSidConfig);
  # DEBUG BEGIN_STMT
  curSidConfig.1_19 = curSidConfig;
  Dcm_DsdInternal_UpdateHsmInfoAfterValidSvcReq (instIdx, curSidConfig.1_19, curNrc);
  # DEBUG BEGIN_STMT
  if (curNrc == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _20 = Dcm_DsdInternal_SupplierNotification (instIdx);
  if (_20 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  curSidConfig.2_21 = curSidConfig;
  _22 = curSidConfig.2_21->ExtSrvHandler;
  if (_22 == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  curSidConfig.3_23 = curSidConfig;
  _24 = curSidConfig.3_23->NumSubServices;
  if (_24 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  curSidConfig.4_25 = curSidConfig;
  _26 = curSidConfig.4_25->SubfuncAvail;
  if (_26 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  curSidConfig.5_27 = curSidConfig;
  curNrc = Dcm_DsdInternal_ValidateSubSvcReq (instIdx, curSidConfig.5_27);

  <bb 14> :
  # DEBUG BEGIN_STMT
  curSidConfig.6_28 = curSidConfig;
  _29 = curSidConfig.6_28->ExtSrvHandler;
  if (_29 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  _30 = curHsmInfo->serviceId;
  if (_30 == 16)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  _31 = curHsmInfo->RxBuffer.FilledLength;
  if (_31 <= 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  curNrc = 19;

  <bb 18> :
  # DEBUG BEGIN_STMT
  curSidConfig.7_32 = curSidConfig;
  Dcm_DsdInternal_UpdateHsmInfoAfterValidSubSvcReq (instIdx, curSidConfig.7_32, curNrc);

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (curNrc != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  curHsmInfo->negativeResponseCode = curNrc;
  # DEBUG BEGIN_STMT
  Dcm_HsmEmitToSelfInst (&Dcm_HsmScDcm, instIdx, 6);

  <bb 21> :
  # DEBUG BEGIN_STMT
  TxBufferUse = {CLOBBER};
  curSidConfig = {CLOBBER};
  return;

}


