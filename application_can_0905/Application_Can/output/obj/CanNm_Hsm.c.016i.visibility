
Marking local functions: CanNm_HsmDispatchEvent CanNm_HsmFindEvToDispatch CanNm_HsmInitSubstates CanNm_HsmTran CanNm_HsmDelFromQueue


Marking externally visible functions: CanNm_HsmMainInst CanNm_HsmEmitToSelfInst CanNm_HsmEmitInst CanNm_HsmInitInst


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

SchM_Exit_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0/10 (SchM_Exit_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0) @06bf60e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanNm_HsmFindEvToDispatch/7 CanNm_HsmMainInst/3 CanNm_HsmEmitToSelfInst/2 CanNm_HsmEmitInst/1 
  Calls: 
SchM_Enter_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0/9 (SchM_Enter_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0) @06bf6000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanNm_HsmFindEvToDispatch/7 CanNm_HsmMainInst/3 CanNm_HsmEmitToSelfInst/2 CanNm_HsmEmitInst/1 
  Calls: 
CanNm_HsmDispatchEvent/8 (CanNm_HsmDispatchEvent) @06bd3c40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanNm_HsmMainInst/3 
  Calls: CanNm_HsmTran/5 
   Indirect call
CanNm_HsmFindEvToDispatch/7 (CanNm_HsmFindEvToDispatch) @06bd3a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanNm_HsmMainInst/3 CanNm_HsmMainInst/3 
  Calls: SchM_Exit_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0/10 CanNm_HsmDelFromQueue/4 SchM_Enter_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0/9 
CanNm_HsmInitSubstates/6 (CanNm_HsmInitSubstates) @06bd37e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanNm_HsmTran/5 CanNm_HsmInitInst/0 
  Calls: 
   Indirect call
CanNm_HsmTran/5 (CanNm_HsmTran) @06bd3620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanNm_HsmDispatchEvent/8 
  Calls: CanNm_HsmInitSubstates/6 
   Indirect call
   Indirect call
   Indirect call
CanNm_HsmDelFromQueue/4 (CanNm_HsmDelFromQueue) @06bd3380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanNm_HsmFindEvToDispatch/7 CanNm_HsmMainInst/3 
  Calls: 
CanNm_HsmMainInst/3 (CanNm_HsmMainInst) @06bd30e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanNm_HsmFindEvToDispatch/7 CanNm_HsmDispatchEvent/8 SchM_Exit_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0/10 CanNm_HsmDelFromQueue/4 SchM_Enter_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0/9 CanNm_HsmFindEvToDispatch/7 
CanNm_HsmEmitToSelfInst/2 (CanNm_HsmEmitToSelfInst) @06badb60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0/10 SchM_Enter_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0/9 
CanNm_HsmEmitInst/1 (CanNm_HsmEmitInst) @06bb2c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0/10 SchM_Enter_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0/9 
CanNm_HsmInitInst/0 (CanNm_HsmInitInst) @06bb29a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanNm_HsmInitSubstates/6 
   Indirect call
CanNm_HsmDispatchEvent (const struct CanNm_HsmStatechartType * const sc, const CanNm_HsmEventType event)
{
  boolean guardCond;
  const struct CanNm_HsmStateType * const state;
  uint8_least i;
  boolean triggerFound;
  boolean transitionFired;
  const struct CanNm_HsmTranType * trans;
  struct CanNm_HsmInstType * const inst;
  boolean D.6035;

  <bb 2> :
  # DEBUG BEGIN_STMT
  inst = sc->instances;
  # DEBUG BEGIN_STMT
  trans = 0B;
  # DEBUG BEGIN_STMT
  transitionFired = 0;
  # DEBUG BEGIN_STMT
  triggerFound = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = inst->stateId;
  inst->sourceId = _1;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = sc->states;
  _3 = inst->sourceId;
  _4 = (unsigned int) _3;
  _5 = _4 * 20;
  state = _2 + _5;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = state->trans;
  _7 = i * 8;
  trans = _6 + _7;
  # DEBUG BEGIN_STMT
  _8 = trans->event;
  if (event == _8)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  guardCond = 1;
  # DEBUG BEGIN_STMT
  _9 = trans->guardFnIdx;
  if (_9 != 255)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = sc->guards;
  _11 = trans->guardFnIdx;
  _12 = (unsigned int) _11;
  _13 = _12 * 4;
  _14 = _10 + _13;
  _15 = *_14;
  guardCond = _15 ();

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (guardCond == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  triggerFound = 1;
  # DEBUG BEGIN_STMT
  transitionFired = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _16 = state->numTrans;
  _17 = (long unsigned int) _16;
  if (i < _17)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  if (triggerFound == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (triggerFound == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _18 = state->parentId;
  inst->sourceId = _18;

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (triggerFound == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _19 = inst->sourceId;
  if (_19 != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (triggerFound == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  CanNm_HsmTran (sc, trans);

  <bb 18> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6035 = transitionFired;
  return D.6035;

}


CanNm_HsmFindEvToDispatch (const struct CanNm_HsmStatechartType * const sc, CanNm_HsmEventType * const event, uint8 * const queueEntryNo)
{
  CanNm_HsmEventMaskType eventMask;
  uint8 entryNo;
  CanNm_HsmEventType ev;
  boolean foundEventToDispatch;
  const struct CanNm_HsmStateType * const state;
  struct CanNm_HsmInstType * const inst;
  boolean D.6051;

  <bb 2> :
  # DEBUG BEGIN_STMT
  inst = sc->instances;
  # DEBUG BEGIN_STMT
  _1 = sc->states;
  _2 = inst->stateId;
  _3 = (unsigned int) _2;
  _4 = _3 * 20;
  state = _1 + _4;
  # DEBUG BEGIN_STMT
  foundEventToDispatch = 0;
  # DEBUG BEGIN_STMT
  ev = 255;
  # DEBUG BEGIN_STMT
  entryNo = 0;
  # DEBUG BEGIN_STMT
  SchM_Enter_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = sc->events;
  _6 = (sizetype) entryNo;
  _7 = _5 + _6;
  ev = *_7;
  # DEBUG BEGIN_STMT
  _8 = (int) ev;
  eventMask = 1 << _8;
  # DEBUG BEGIN_STMT
  _9 = state->ignoredEventMask;
  _10 = eventMask & _9;
  if (_10 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanNm_HsmDelFromQueue (sc, entryNo);
  goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _11 = state->actionEventMask;
  _12 = eventMask & _11;
  if (_12 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _13 = inst->evQueueInsertEvNo;
  if (entryNo >= _13)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _14 = entryNo + 1;
  inst->evQueueInsertEvNo = _14;

  <bb 8> :
  # DEBUG BEGIN_STMT
  foundEventToDispatch = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  entryNo = entryNo + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _15 = inst->evQueueFill;
  if (entryNo < _15)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  if (foundEventToDispatch == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  SchM_Exit_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  *event = ev;
  # DEBUG BEGIN_STMT
  *queueEntryNo = entryNo;
  # DEBUG BEGIN_STMT
  D.6051 = foundEventToDispatch;
  return D.6051;

}


CanNm_HsmInitSubstates (const struct CanNm_HsmStatechartType * const sc)
{
  const struct CanNm_HsmStateType * state;
  CanNm_HsmStateIdxType stateIdx;
  struct CanNm_HsmInstType * const inst;

  <bb 2> :
  # DEBUG BEGIN_STMT
  inst = sc->instances;
  # DEBUG BEGIN_STMT
  _1 = sc->states;
  _2 = inst->stateId;
  _3 = (unsigned int) _2;
  _4 = _3 * 20;
  _5 = _1 + _4;
  stateIdx = _5->initId;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = sc->states;
  _7 = (unsigned int) stateIdx;
  _8 = _7 * 20;
  state = _6 + _8;
  # DEBUG BEGIN_STMT
  inst->stateId = stateIdx;
  # DEBUG BEGIN_STMT
  _9 = state->entryFnIdx;
  if (_9 != 255)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = sc->actions;
  _11 = state->entryFnIdx;
  _12 = (unsigned int) _11;
  _13 = _12 * 4;
  _14 = _10 + _13;
  _15 = *_14;
  _15 ();

  <bb 5> :
  # DEBUG BEGIN_STMT
  stateIdx = state->initId;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (stateIdx != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}


CanNm_HsmTran (const struct CanNm_HsmStatechartType * const sc, const struct CanNm_HsmTranType * const tran)
{
  uint8_least i;
  struct CanNm_HsmInstType * const inst;
  const struct CanNm_HsmStateType * state;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  inst = sc->instances;
  # DEBUG BEGIN_STMT
  _1 = tran->target;
  if (_1 == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = sc->actions;
  _3 = tran->steps;
  _4 = *_3;
  _5 = (unsigned int) _4;
  _6 = _5 * 4;
  _7 = _2 + _6;
  _8 = *_7;
  _8 ();
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _9 = sc->states;
  _10 = inst->stateId;
  _11 = (unsigned int) _10;
  _12 = _11 * 20;
  state = _9 + _12;
  # DEBUG BEGIN_STMT
  _13 = state->exitFnIdx;
  if (_13 != 255)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = sc->actions;
  _15 = state->exitFnIdx;
  _16 = (unsigned int) _15;
  _17 = _16 * 4;
  _18 = _14 + _17;
  _19 = *_18;
  _19 ();

  <bb 6> :
  # DEBUG BEGIN_STMT
  _20 = state->parentId;
  inst->stateId = _20;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _21 = inst->stateId;
  _22 = inst->sourceId;
  if (_21 != _22)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = sc->actions;
  _24 = tran->steps;
  _25 = _24 + i;
  _26 = *_25;
  _27 = (unsigned int) _26;
  _28 = _27 * 4;
  _29 = _23 + _28;
  _30 = *_29;
  _30 ();
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _31 = tran->numSteps;
  _32 = (long unsigned int) _31;
  if (i < _32)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _33 = tran->target;
  inst->stateId = _33;
  # DEBUG BEGIN_STMT
  CanNm_HsmInitSubstates (sc);

  <bb 12> :
  # DEBUG BEGIN_STMT
  return;

}


CanNm_HsmDelFromQueue (const struct CanNm_HsmStatechartType * const sc, const uint8 queueEntryNo)
{
  CanNm_HsmEventType event;
  uint8 j;
  struct CanNm_HsmInstType * const inst;

  <bb 2> :
  # DEBUG BEGIN_STMT
  inst = sc->instances;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = sc->events;
  _2 = (sizetype) queueEntryNo;
  _3 = _1 + _2;
  event = *_3;
  # DEBUG BEGIN_STMT
  _4 = sc->evCounters;
  _5 = (sizetype) event;
  _6 = _4 + _5;
  _7 = *_6;
  _8 = _7 + 255;
  *_6 = _8;
  # DEBUG BEGIN_STMT
  j = queueEntryNo;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _9 = sc->events;
  _10 = (sizetype) j;
  _11 = _10 + 1;
  _12 = _9 + _11;
  _13 = sc->events;
  _14 = (sizetype) j;
  _15 = _13 + _14;
  _16 = *_12;
  *_15 = _16;
  # DEBUG BEGIN_STMT
  j = j + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _17 = (unsigned int) j;
  _18 = _17 + 1;
  _19 = inst->evQueueFill;
  _20 = (unsigned int) _19;
  if (_18 < _20)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _21 = inst->evQueueFill;
  _22 = _21 + 255;
  inst->evQueueFill = _22;
  # DEBUG BEGIN_STMT
  _23 = inst->evQueueInsertEvNo;
  if (queueEntryNo < _23)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _24 = inst->evQueueInsertEvNo;
  _25 = _24 + 255;
  inst->evQueueInsertEvNo = _25;

  <bb 7> :
  return;

}


CanNm_HsmMainInst (const struct CanNm_HsmStatechartType * const sc)
{
  boolean retVal;
  boolean eventPending;
  uint8 queueEntryNo;
  CanNm_HsmEventType event;
  boolean transitionFired;
  struct CanNm_HsmInstType * const inst;
  boolean D.6017;
  int iftmp.2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  inst = sc->instances;
  # DEBUG BEGIN_STMT
  transitionFired = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  inst->evQueueInsertEvNo = 0;
  # DEBUG BEGIN_STMT
  eventPending = CanNm_HsmFindEvToDispatch (sc, &event, &queueEntryNo);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  queueEntryNo.0_1 = queueEntryNo;
  CanNm_HsmDelFromQueue (sc, queueEntryNo.0_1);
  # DEBUG BEGIN_STMT
  SchM_Exit_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  event.1_2 = event;
  retVal = CanNm_HsmDispatchEvent (sc, event.1_2);
  # DEBUG BEGIN_STMT
  if (retVal != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (transitionFired != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.2 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.2 = 0;

  <bb 7> :
  transitionFired = (boolean) iftmp.2;
  # DEBUG BEGIN_STMT
  eventPending = CanNm_HsmFindEvToDispatch (sc, &event, &queueEntryNo);

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (eventPending == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.6017 = transitionFired;
  event = {CLOBBER};
  queueEntryNo = {CLOBBER};
  return D.6017;

}


CanNm_HsmEmitToSelfInst (const struct CanNm_HsmStatechartType * const sc, const CanNm_HsmEventType event)
{
  uint8 j;
  struct CanNm_HsmInstType * const inst;

  <bb 2> :
  # DEBUG BEGIN_STMT
  inst = sc->instances;
  # DEBUG BEGIN_STMT
  SchM_Enter_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _1 = sc->evCounters;
  _2 = (sizetype) event;
  _3 = _1 + _2;
  _4 = *_3;
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  j = inst->evQueueFill;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = sc->events;
  _6 = (sizetype) j;
  _7 = _6 + 4294967295;
  _8 = _5 + _7;
  _9 = sc->events;
  _10 = (sizetype) j;
  _11 = _9 + _10;
  _12 = *_8;
  *_11 = _12;
  # DEBUG BEGIN_STMT
  j = j + 255;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _13 = inst->evQueueInsertEvNo;
  if (j > _13)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _14 = inst->evQueueFill;
  _15 = _14 + 1;
  inst->evQueueFill = _15;
  # DEBUG BEGIN_STMT
  _16 = sc->evCounters;
  _17 = (sizetype) event;
  _18 = _16 + _17;
  _19 = *_18;
  _20 = _19 + 1;
  *_18 = _20;
  # DEBUG BEGIN_STMT
  _21 = sc->events;
  _22 = inst->evQueueInsertEvNo;
  _23 = (sizetype) _22;
  _24 = _21 + _23;
  *_24 = event;
  # DEBUG BEGIN_STMT
  _25 = inst->evQueueInsertEvNo;
  _26 = _25;
  _27 = _26 + 1;
  inst->evQueueInsertEvNo = _27;

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


CanNm_HsmEmitInst (const struct CanNm_HsmStatechartType * const sc, const CanNm_HsmEventType event)
{
  struct CanNm_HsmInstType * const inst;

  <bb 2> :
  # DEBUG BEGIN_STMT
  inst = sc->instances;
  # DEBUG BEGIN_STMT
  SchM_Enter_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _1 = sc->evCounters;
  _2 = (sizetype) event;
  _3 = _1 + _2;
  _4 = *_3;
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = sc->events;
  _6 = inst->evQueueFill;
  _7 = (sizetype) _6;
  _8 = _5 + _7;
  *_8 = event;
  # DEBUG BEGIN_STMT
  _9 = inst->evQueueFill;
  _10 = _9;
  _11 = _10 + 1;
  inst->evQueueFill = _11;
  # DEBUG BEGIN_STMT
  _12 = sc->evCounters;
  _13 = (sizetype) event;
  _14 = _12 + _13;
  _15 = *_14;
  _16 = _15 + 1;
  *_14 = _16;

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_CanNm_SCHM_CANNM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


CanNm_HsmInitInst (const struct CanNm_HsmStatechartType * const sc)
{
  uint8 i;
  struct CanNm_HsmInstType * const inst;

  <bb 2> :
  # DEBUG BEGIN_STMT
  inst = sc->instances;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = sc->topStateId;
  inst->stateId = _1;
  # DEBUG BEGIN_STMT
  inst->sourceId = 255;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = sc->events;
  _3 = (sizetype) i;
  _4 = _2 + _3;
  *_4 = 0;
  # DEBUG BEGIN_STMT
  _5 = sc->evCounters;
  _6 = (sizetype) i;
  _7 = _5 + _6;
  *_7 = 0;
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = sc->numEvents;
  if (i < _8)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  inst->evQueueFill = 0;
  # DEBUG BEGIN_STMT
  inst->evQueueInsertEvNo = 0;
  # DEBUG BEGIN_STMT
  _9 = sc->states;
  _10 = inst->stateId;
  _11 = (unsigned int) _10;
  _12 = _11 * 20;
  _13 = _9 + _12;
  _14 = _13->entryFnIdx;
  if (_14 != 255)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = sc->actions;
  _16 = sc->states;
  _17 = inst->stateId;
  _18 = (unsigned int) _17;
  _19 = _18 * 20;
  _20 = _16 + _19;
  _21 = _20->entryFnIdx;
  _22 = (unsigned int) _21;
  _23 = _22 * 4;
  _24 = _15 + _23;
  _25 = *_24;
  _25 ();

  <bb 7> :
  # DEBUG BEGIN_STMT
  CanNm_HsmInitSubstates (sc);
  return;

}


