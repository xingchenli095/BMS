FlexCAN_Ip_ManualBusOffRecovery (uint8 Instance)
{
  Flexcan_Ip_StatusType RetVal;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * Base;
  Flexcan_Ip_StatusType D.13798;
  long unsigned int D.13795;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) Instance;
  Base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  uS2Ticks = OsIf_MicrosToTicks (1000000, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _2 = Instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = Base->CTRL1;
  _5 = _4 & 64;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  _6 = Base->ESR1;
  _7 = _6 & 32;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20 ();
  # DEBUG BEGIN_STMT
  _8 = Base->CTRL1;
  _9 = _8 & 4294967231;
  Base->CTRL1 = _9;
  # DEBUG BEGIN_STMT
  _10 = Base->CTRL1;
  _11 = _10 | 64;
  Base->CTRL1 = _11;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20 ();
  # DEBUG BEGIN_STMT
  _12 = OsIf_GetCounter (0);
  timeStart = _12;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.13795 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.13795 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= uS2Ticks)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal = 3;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _13 = Base->ESR1;
  _14 = _13 & 32;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.13798 = RetVal;
  timeStart = {CLOBBER};
  return D.13798;

}


FlexCAN_Ip_GetListenOnlyMode (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean D.13789;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  D.13789 = FlexCAN_IsListenOnlyModeEnabled (base);
  return D.13789;

}


FlexCAN_Ip_SetListenOnlyMode_Privileged (uint8 instance, const boolean enable)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13783;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = _4 == 0;
  disabled = (boolean) _5;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  freeze = FlexCAN_IsFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetListenOnlyMode (pBase, enable);
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.13783 = result;
  return D.13783;

}


FlexCAN_Ip_SetRxMb15Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13769;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  freeze = 0;
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = _4 == 0;
  disabled = (boolean) _5;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  freeze = FlexCAN_IsFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  pBase->RX15MASK = mask;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.13769 = result;
  return D.13769;

}


FlexCAN_Ip_SetRxMb14Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13755;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  freeze = 0;
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = _4 == 0;
  disabled = (boolean) _5;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  freeze = FlexCAN_IsFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  pBase->RX14MASK = mask;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.13755 = result;
  return D.13755;

}


FlexCAN_Ip_AbortTransfer (uint8 u8Instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType result;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.13720;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = u8Instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = mb_idx + 192;
  _4 = _3 > 190;
  _5 = (unsigned char) _4;
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  _6 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_6];
  # DEBUG BEGIN_STMT
  _7 = (int) u8Instance;
  state = Flexcan_Ip_apxState[_7];
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  if (mb_idx <= 63)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _8 = (int) mb_idx;
  _9 = state->mbs[_8].state;
  if (_9 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result = 5;
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = (long unsigned int) mb_idx;
  _11 = state->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase, u8Instance, _10, _11);
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx;
  _13 = state->mbs[_12].state;
  if (_13 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_AbortTxTransfer (u8Instance, mb_idx);

  <bb 7> :
  # DEBUG BEGIN_STMT
  _14 = (int) mb_idx;
  _15 = state->mbs[_14].state;
  if (_15 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_AbortRxTransfer (u8Instance, mb_idx);

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.13720 = result;
  return D.13720;

}


FlexCAN_Ip_SetErrorInt_Privileged (uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13709;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = u8Instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = _4 == 0;
  disabled = (boolean) _5;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  switch (type) <default: <L14> [INV], case 0: <L6> [INV], case 1: <L10> [INV], case 2: <L4> [INV], case 3: <L5> [INV], case 4: <L3> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase, 32768, enable);
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase, 16384, enable);
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase, 16385, enable);
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_IsFreezeMode (pBase);
  if (_6 != 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  result = 1;
  goto <bb 16>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase, 1024, enable);
  goto <bb 16>; [INV]

  <bb 12> :
<L10>:
  # DEBUG BEGIN_STMT
  _7 = FlexCAN_IsFreezeMode (pBase);
  if (_7 != 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  result = 1;
  goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase, 2048, enable);
  goto <bb 16>; [INV]

  <bb 15> :
<L14>:
  # DEBUG BEGIN_STMT
  DevAssert (0);
  # DEBUG BEGIN_STMT

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 19> :
  # DEBUG BEGIN_STMT
  D.13709 = result;
  return D.13709;

}


FlexCAN_Ip_DisableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.13693;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  result = 1;
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  _3 = u8Instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsEnabled (pBase);
  if (_5 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_DisableInterrupts (pBase);
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_IsEnhancedRxFifoAvailable (pBase);
  if (_6 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = FlexCAN_IsEnhancedRxFifoEnabled (pBase);
  if (_7 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoIntAll (pBase, 0);

  <bb 6> :
  # DEBUG BEGIN_STMT
  state->isIntActive = 0;
  # DEBUG BEGIN_STMT
  result = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.13693 = result;
  return D.13693;

}


FlexCAN_Ip_EnableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.13685;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  result = 1;
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  _3 = u8Instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsEnabled (pBase);
  if (_5 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnableInterrupts (pBase, u8Instance);
  # DEBUG BEGIN_STMT
  _6 = state->enhancedFifoOutput.isPolling;
  if (_6 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _7 = FlexCAN_IsEnhancedRxFifoAvailable (pBase);
  if (_7 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_IsEnhancedRxFifoEnabled (pBase);
  if (_8 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoIntAll (pBase, 1);

  <bb 7> :
  # DEBUG BEGIN_STMT
  state->isIntActive = 1;
  # DEBUG BEGIN_STMT
  result = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.13685 = result;
  return D.13685;

}


FlexCAN_Ip_ClearBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  struct FLEXCAN_Type * pBase;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  if (msgBuffIdx == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (pBase, 30);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _4 = (long unsigned int) msgBuffIdx;
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, _4);

  <bb 5> :
  return;

}


FlexCAN_Ip_GetBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  const struct FLEXCAN_Type * pBase;
  boolean returnResult;
  boolean D.13672;
  boolean iftmp.19;
  boolean iftmp.18;

  <bb 2> :
  # DEBUG BEGIN_STMT
  returnResult = 1;
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  if (msgBuffIdx == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_GetEnhancedRxFIFOStatusFlag (pBase, 30);
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.18 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.18 = 0;

  <bb 6> :
  returnResult = iftmp.18;
  goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) msgBuffIdx;
  _6 = FlexCAN_GetBuffStatusFlag (pBase, _5);
  if (_6 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.19 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.19 = 0;

  <bb 10> :
  returnResult = iftmp.19;

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.13672 = returnResult;
  return D.13672;

}


FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (uint8 instance, uint8 value)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13659;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = _4 == 0;
  disabled = (boolean) _5;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  freeze = FlexCAN_IsFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetTxArbitrationStartDelay (pBase, value);
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.13659 = result;
  return D.13659;

}


FlexCAN_Ip_SetTDCOffset_Privileged (uint8 instance, boolean enable, uint8 offset)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13641;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = _4 == 0;
  disabled = (boolean) _5;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  freeze = FlexCAN_IsFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16 ();
  # DEBUG BEGIN_STMT
  _6 = pBase->CTRL2;
  _7 = _6 & 8192;
  if (_7 == 8192)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedTDCOffset (pBase, enable, offset);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetTDCOffset (pBase, enable, offset);

  <bb 11> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16 ();

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 15> :
  # DEBUG BEGIN_STMT
  D.13641 = result;
  return D.13641;

}


FlexCAN_Ip_GetBitrateFD (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  boolean D.13624;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = bitrate != 0B;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_5];
  # DEBUG BEGIN_STMT
  enhCbt = 0;
  # DEBUG BEGIN_STMT
  enhCbt = FlexCAN_IsEnhCbtEnabled (pBase);
  # DEBUG BEGIN_STMT
  if (enhCbt == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetEnhancedDataTimeSegments (pBase, bitrate);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetFDTimeSegments (pBase, bitrate);

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.13624 = enhCbt;
  return D.13624;

}


FlexCAN_Ip_SetBitrateCbt_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
  boolean enhCbt;
  boolean freeze;
  boolean disabled;
  boolean fd_enable;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13617;
  boolean iftmp.17;
  boolean iftmp.16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = bitrate != 0B;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _5 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_5];
  # DEBUG BEGIN_STMT
  fd_enable = FlexCAN_IsFDEnabled (pBase);
  # DEBUG BEGIN_STMT
  _6 = pBase->MCR;
  _7 = (signed int) _6;
  if (_7 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.16 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.16 = 0;

  <bb 5> :
  disabled = iftmp.16;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 7> :
  # DEBUG BEGIN_STMT
  _8 = pBase->MCR;
  _9 = _8 & 16777216;
  if (_9 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.17 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.17 = 0;

  <bb 10> :
  freeze = iftmp.17;
  # DEBUG BEGIN_STMT
  if (fd_enable == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (freeze == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  if (result == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  enhCbt = FlexCAN_IsEnhCbtEnabled (pBase);
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetFDEnabled (pBase, fd_enable, bitRateSwitch);
  # DEBUG BEGIN_STMT
  if (enhCbt == 1)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedDataTimeSegments (pBase, bitrate);
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetFDTimeSegments (pBase, bitrate);

  <bb 18> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15 ();

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 22> :
  # DEBUG BEGIN_STMT
  D.13617 = result;
  return D.13617;

}


FlexCAN_Ip_GetTDCValue (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  uint8 value;
  uint8 D.13592;

  <bb 2> :
  # DEBUG BEGIN_STMT
  value = 0;
  # DEBUG BEGIN_STMT
  _1 = u8Instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnhCbtEnabled (pBase);
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = pBase->ETDC;
  value = (uint8) _5;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = pBase->FDCTRL;
  _7 = (unsigned char) _6;
  value = _7 & 63;

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.13592 = value;
  return D.13592;

}


FlexCAN_Ip_GetTDCFail (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  boolean value;
  boolean D.13587;
  boolean iftmp.15;
  boolean iftmp.14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  value = 0;
  # DEBUG BEGIN_STMT
  _1 = u8Instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnhCbtEnabled (pBase);
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = pBase->ETDC;
  _6 = _5 & 32768;
  if (_6 == 32768)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.14 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.14 = 0;

  <bb 6> :
  value = iftmp.14;
  goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 = pBase->FDCTRL;
  _8 = _7 & 16384;
  if (_8 == 16384)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.15 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.15 = 0;

  <bb 10> :
  value = iftmp.15;

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.13587 = value;
  return D.13587;

}


FlexCAN_Ip_ClearTDCFail (uint8 u8Instance)
{
  struct FLEXCAN_Type * pBase;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = u8Instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09 ();
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnhCbtEnabled (pBase);
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = pBase->ETDC;
  _6 = _5 | 32768;
  pBase->ETDC = _6;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = pBase->FDCTRL;
  _8 = _7 | 16384;
  pBase->FDCTRL = _8;

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09 ();
  return;

}


FlexCAN_Ip_GetBitrate (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  boolean D.13569;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = bitrate != 0B;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_5];
  # DEBUG BEGIN_STMT
  enhCbt = 0;
  # DEBUG BEGIN_STMT
  enhCbt = FlexCAN_IsEnhCbtEnabled (pBase);
  # DEBUG BEGIN_STMT
  if (enhCbt == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetEnhancedNominalTimeSegments (pBase, bitrate);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_IsExCbtEnabled (pBase);
  if (_6 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetExtendedTimeSegments (pBase, bitrate);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetTimeSegments (pBase, bitrate);

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.13569 = enhCbt;
  return D.13569;

}


FlexCAN_Ip_SetBitrate_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13555;
  boolean iftmp.12;
  boolean iftmp.11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = bitrate != 0B;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _5 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_5];
  # DEBUG BEGIN_STMT
  _6 = pBase->MCR;
  _7 = (signed int) _6;
  if (_7 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.11 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.11 = 0;

  <bb 5> :
  disabled = iftmp.11;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 7> :
  # DEBUG BEGIN_STMT
  _8 = pBase->MCR;
  _9 = _8 & 16777216;
  if (_9 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.12 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.12 = 0;

  <bb 10> :
  freeze = iftmp.12;
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  if (result == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14 ();
  # DEBUG BEGIN_STMT
  FlexCAN_EnhCbtEnable (pBase, enhExt);
  # DEBUG BEGIN_STMT
  if (enhExt == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedNominalTimeSegments (pBase, bitrate);
  goto <bb 19>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _10 = FlexCAN_IsExCbtEnabled (pBase);
  if (_10 == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetExtendedTimeSegments (pBase, bitrate);
  goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetTimeSegments (pBase, bitrate);

  <bb 19> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14 ();

  <bb 20> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 23> :
  # DEBUG BEGIN_STMT
  D.13555 = result;
  return D.13555;

}


FlexCAN_Ip_SetRxMaskType_Privileged (uint8 instance, Flexcan_Ip_RxMaskType type)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13524;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = _4 == 0;
  disabled = (boolean) _5;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  freeze = FlexCAN_IsFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxMaskType (pBase, type);
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.13524 = result;
  return D.13524;

}


FlexCAN_Ip_SetStopMode_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType status;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.13510;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  status = FlexCAN_EnterFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (status == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.13510 = status;
  return D.13510;

}


FlexCAN_Ip_SetStartMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.13506;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07 ();
  # DEBUG BEGIN_STMT
  _4 = pBase->MCR;
  _5 = _4 & 2147483647;
  pBase->MCR = _5;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07 ();
  # DEBUG BEGIN_STMT
  D.13506 = FlexCAN_ExitFreezeMode (pBase);
  return D.13506;

}


FlexCAN_Ip_GetStartMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean iftmp.10;
  boolean D.13500;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = base->MCR;
  _3 = _2 & 17825792;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.10 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.10 = 0;

  <bb 5> :
  D.13500 = iftmp.10;
  return D.13500;

}


FlexCAN_Ip_GetStopMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean iftmp.9;
  boolean D.13494;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = base->MCR;
  _3 = _2 & 1048576;
  if (_3 == 1048576)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.9 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.9 = 0;

  <bb 5> :
  D.13494 = iftmp.9;
  return D.13494;

}


FlexCAN_Ip_MainFunctionWrite (uint8 instance, uint8 mb_idx)
{
  struct Flexcan_Ip_MsgBuffType mb;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) mb_idx;
  _6 = FlexCAN_GetBuffStatusFlag (base, _5);
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _7 = (int) mb_idx;
  _8 = state->mbs[_7].state;
  if (_8 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _9 = (int) mb_idx;
  _10 = state->mbs[_9].isRemote;
  if (_10 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx;
  FlexCAN_LockRxMsgBuff (base, _11);
  # DEBUG BEGIN_STMT
  _12 = (long unsigned int) mb_idx;
  FlexCAN_GetMsgBuff (base, _12, &mb);
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (base);
  # DEBUG BEGIN_STMT
  _13 = (int) mb_idx;
  _14 = mb.time_stamp;
  state->mbs[_13].time_stamp = _14;
  # DEBUG BEGIN_STMT
  _15 = mb.cs;
  _16 = _15 >> 24;
  _17 = _16 & 15;
  if (_17 == 4)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _18 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (base, _18);

  <bb 7> :
  mb = {CLOBBER};
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _19 = (long unsigned int) mb_idx;
  _20 = (int) mb_idx;
  _21 = FlexCAN_GetMsgBuffTimestamp (base, _19);
  state->mbs[_20].time_stamp = _21;
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (base);
  # DEBUG BEGIN_STMT
  _22 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (base, _22);

  <bb 9> :
  # DEBUG BEGIN_STMT
  _23 = (int) mb_idx;
  state->mbs[_23].state = 0;
  # DEBUG BEGIN_STMT
  _24 = state->callback;
  if (_24 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _25 = state->callback;
  _26 = (long unsigned int) mb_idx;
  _25 (instance, 4, _26, state);

  <bb 11> :
  return;

}


FlexCAN_Ip_MainFunctionBusOff_Privileged (uint8 instance)
{
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType eRetVal;
  Flexcan_Ip_StatusType D.13481;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal = 1;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  u32ErrStatus = 0;
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  u32ErrStatus = base->ESR1;
  # DEBUG BEGIN_STMT
  _5 = u32ErrStatus & 4;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = state->error_callback;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = state->error_callback;
  _7 (instance, 11, u32ErrStatus, state);

  <bb 5> :
  # DEBUG BEGIN_STMT
  base->ESR1 = 4;
  # DEBUG BEGIN_STMT
  eRetVal = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  D.13481 = eRetVal;
  return D.13481;

}


FlexCAN_Ip_MainFunctionRead (uint8 instance, uint8 mb_idx)
{
  const struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = mb_idx + 192;
  _6 = _5 > 190;
  _7 = (unsigned char) _6;
  DevAssert (_7);
  # DEBUG BEGIN_STMT
  if (mb_idx == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_IsEnhancedRxFifoAvailable (base);
  if (_8 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _9 = FlexCAN_IsEnhancedRxFifoEnabled (base);
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = FlexCAN_GetEnhancedRxFIFOStatusFlag (base, 28);
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerEnhancedRxFIFO (instance, 28);
  goto <bb 15>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _11 = state->bIsLegacyFifoEn;
  if (_11 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  if (mb_idx <= 7)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (mb_idx == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _12 = FlexCAN_GetBuffStatusFlag (base, 5);
  if (_12 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (instance, 5);
  goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _13 = (long unsigned int) mb_idx;
  _14 = FlexCAN_GetBuffStatusFlag (base, _13);
  if (_14 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _15 = (int) mb_idx;
  _16 = state->mbs[_15].state;
  if (_16 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _17 = (long unsigned int) mb_idx;
  FlexCAN_IRQHandlerRxMB (instance, _17);

  <bb 15> :
  return;

}


FlexCAN_Ip_Deinit_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.13450;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  result = 1;
  # DEBUG BEGIN_STMT
  _2 = instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  result = FlexCAN_EnterFreezeMode (base);
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRegDefaultVal (base);
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (base);
  # DEBUG BEGIN_STMT
  _4 = (int) instance;
  Flexcan_Ip_apxState[_4] = 0B;

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.13450 = result;
  return D.13450;

}


FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13446;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = _4 == 0;
  disabled = (boolean) _5;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  freeze = FlexCAN_IsFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxFifoGlobalMask (pBase, mask);

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.13446 = result;
  return D.13446;

}


FlexCAN_Ip_SetRxIndividualMask_Privileged (uint8 instance, uint8 mb_idx, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13432;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  freeze = 0;
  # DEBUG BEGIN_STMT
  _2 = instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = (long unsigned int) mb_idx;
  _5 = pBase->MCR;
  _6 = _5 & 127;
  if (_4 > _6)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (mb_idx > 63)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result = 4;
  goto <bb 15>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = FlexCAN_IsEnabled (pBase);
  _8 = _7 == 0;
  disabled = (boolean) _8;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 7> :
  # DEBUG BEGIN_STMT
  freeze = FlexCAN_IsFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  if (result == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) mb_idx;
  FlexCAN_SetRxIndividualMask (pBase, _9, mask);

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 15> :
  # DEBUG BEGIN_STMT
  D.13432 = result;
  return D.13432;

}


FlexCAN_Ip_ExitFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.13414;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  D.13414 = FlexCAN_ExitFreezeMode (base);
  return D.13414;

}


FlexCAN_Ip_EnterFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.13412;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  D.13412 = FlexCAN_EnterFreezeMode (base);
  return D.13412;

}


FlexCAN_Ip_SetRxMbGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13410;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  freeze = 0;
  # DEBUG BEGIN_STMT
  _2 = instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = _4 == 0;
  disabled = (boolean) _5;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  freeze = FlexCAN_IsFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxMsgBuffGlobalMask (pBase, mask);

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.13410 = result;
  return D.13410;

}


FlexCAN_Ip_SendBlocking (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data, uint32 timeout_ms)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 uS2Ticks;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13395;
  long unsigned int D.13388;
  long unsigned int D.13381;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  _3 = timeout_ms * 1000;
  mS2Ticks = OsIf_MicrosToTicks (_3, 0);
  # DEBUG BEGIN_STMT
  uS2Ticks = 0;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = 0;
  # DEBUG BEGIN_STMT
  flexcan_mb = 0B;
  # DEBUG BEGIN_STMT
  _4 = instance <= 3;
  _5 = (unsigned char) _4;
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  _6 = tx_info != 0B;
  _7 = (unsigned char) _6;
  DevAssert (_7);
  # DEBUG BEGIN_STMT
  result = FlexCAN_StartSendData (instance, mb_idx, tx_info, msg_id, mb_data);
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _8 = OsIf_GetCounter (0);
  timeStart = _8;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.13381 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.13381 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= mS2Ticks)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  result = 3;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) mb_idx;
  _10 = FlexCAN_GetBuffStatusFlag (base, _9);
  if (_10 != 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (result == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 8> :
  _11 = (int) mb_idx;
  _12 = state->mbs[_11].state;
  if (_12 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _13 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (base, _13);
  # DEBUG BEGIN_STMT
  _14 = (long unsigned int) mb_idx;
  flexcan_mb = FlexCAN_GetMsgBuffRegion (base, _14);
  # DEBUG BEGIN_STMT
  flexcan_mb_config = *flexcan_mb;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config | 150994944;
  # DEBUG BEGIN_STMT
  *flexcan_mb = flexcan_mb_config;
  # DEBUG BEGIN_STMT
  uS2Ticks = OsIf_MicrosToTicks (1000000, 0);
  # DEBUG BEGIN_STMT
  _15 = OsIf_GetCounter (0);
  timeStart = _15;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.13388 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.13388 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= uS2Ticks)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result = 3;
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _16 = (long unsigned int) mb_idx;
  _17 = FlexCAN_GetBuffStatusFlag (base, _16);
  if (_17 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  flexcan_mb_config = *flexcan_mb;
  # DEBUG BEGIN_STMT
  _18 = flexcan_mb_config >> 24;
  _19 = _18 & 15;
  if (_19 == 8)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  result = 0;

  <bb 15> :
  # DEBUG BEGIN_STMT
  _20 = flexcan_mb_config >> 24;
  _21 = _20 & 15;
  if (_21 == 9)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  result = 3;

  <bb 17> :
  # DEBUG BEGIN_STMT
  _22 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (base, _22);
  # DEBUG BEGIN_STMT
  _23 = (int) mb_idx;
  state->mbs[_23].state = 0;

  <bb 18> :
  # DEBUG BEGIN_STMT
  D.13395 = result;
  timeStart = {CLOBBER};
  return D.13395;

}


FlexCAN_Busoff_Error_IRQHandler (uint8 instance)
{
  boolean isSpuriousInt;
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  u32ErrStatus = 0;
  # DEBUG BEGIN_STMT
  isSpuriousInt = 1;
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  if (state != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  u32ErrStatus = pBase->ESR1;
  # DEBUG BEGIN_STMT
  _5 = u32ErrStatus & 2;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _6 = pBase->CTRL1;
  _7 = _6 & 16384;
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  pBase->ESR1 = 2;
  # DEBUG BEGIN_STMT
  _8 = state->error_callback;
  if (_8 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = state->error_callback;
  _9 (instance, 9, u32ErrStatus, state);
  # DEBUG BEGIN_STMT
  u32ErrStatus = pBase->ESR1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  isSpuriousInt = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _10 = u32ErrStatus & 1048576;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  _11 = pBase->CTRL2;
  _12 = (signed int) _11;
  if (_12 < 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  pBase->ESR1 = 1048576;
  # DEBUG BEGIN_STMT
  _13 = state->error_callback;
  if (_13 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _14 = state->error_callback;
  _14 (instance, 10, u32ErrStatus, state);
  # DEBUG BEGIN_STMT
  u32ErrStatus = pBase->ESR1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  isSpuriousInt = 0;

  <bb 13> :
  # DEBUG BEGIN_STMT
  _15 = u32ErrStatus & 131072;
  if (_15 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  _16 = pBase->CTRL1;
  _17 = _16 & 2048;
  if (_17 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  pBase->ESR1 = 131072;
  # DEBUG BEGIN_STMT
  _18 = state->error_callback;
  if (_18 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _19 = state->error_callback;
  _19 (instance, 13, u32ErrStatus, state);
  # DEBUG BEGIN_STMT
  u32ErrStatus = pBase->ESR1;

  <bb 17> :
  # DEBUG BEGIN_STMT
  isSpuriousInt = 0;

  <bb 18> :
  # DEBUG BEGIN_STMT
  _20 = u32ErrStatus & 65536;
  if (_20 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 19> :
  _21 = pBase->CTRL1;
  _22 = _21 & 1024;
  if (_22 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  pBase->ESR1 = 65536;
  # DEBUG BEGIN_STMT
  _23 = state->error_callback;
  if (_23 != 0B)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _24 = state->error_callback;
  _24 (instance, 12, u32ErrStatus, state);
  # DEBUG BEGIN_STMT
  u32ErrStatus = pBase->ESR1;

  <bb 22> :
  # DEBUG BEGIN_STMT
  isSpuriousInt = 0;

  <bb 23> :
  # DEBUG BEGIN_STMT
  _25 = u32ErrStatus & 4;
  if (_25 != 0)
    goto <bb 24>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 24> :
  _26 = pBase->CTRL1;
  _27 = _26 & 32768;
  if (_27 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  pBase->ESR1 = 4;
  # DEBUG BEGIN_STMT
  _28 = state->error_callback;
  if (_28 != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  _29 = state->error_callback;
  _29 (instance, 11, u32ErrStatus, state);

  <bb 27> :
  # DEBUG BEGIN_STMT
  isSpuriousInt = 0;

  <bb 28> :
  # DEBUG BEGIN_STMT
  if (isSpuriousInt == 1)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  pBase->ESR1 = 3866630;

  <bb 30> :
  return;

}


FlexCAN_Ip_GetControllerRxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint8 D.13343;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = base->ECR;
  _5 = _4 >> 8;
  D.13343 = (uint8) _5;
  return D.13343;

}


FlexCAN_Ip_GetControllerTxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint8 D.13341;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = base->ECR;
  D.13341 = (uint8) _4;
  return D.13341;

}


FlexCAN_Ip_GetErrorStatus (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint32 D.13339;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  D.13339 = base->ESR1;
  return D.13339;

}


FlexCAN_Ip_ClearErrorStatus (uint8 instance, uint32 error)
{
  struct FLEXCAN_Type * base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  base->ESR1 = error;
  return;

}


FlexCAN_IRQHandler (uint8 instance, uint32 startMbIdx, uint32 endMbIdx, boolean bEnhancedFifoExisted)
{
  uint32 mb_idx;
  boolean bIsSpuriousInt;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  uint32 flag_reg;
  uint32 u32MbHandle;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32MbHandle = 0;
  # DEBUG BEGIN_STMT
  flag_reg = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  bIsSpuriousInt = 1;
  # DEBUG BEGIN_STMT
  mb_idx = endMbIdx;
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = endMbIdx <= 63;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  if (state != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _7 = FlexCAN_GetMsgBuffIntStatusFlag (base, mb_idx);
  flag_reg = (uint32) _7;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  mb_idx = mb_idx + 4294967295;
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_GetMsgBuffIntStatusFlag (base, mb_idx);
  flag_reg = (uint32) _8;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (flag_reg == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  if (mb_idx > startMbIdx)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (flag_reg != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  bIsSpuriousInt = 0;
  # DEBUG BEGIN_STMT
  u32MbHandle = mb_idx;
  # DEBUG BEGIN_STMT
  _9 = state->bIsLegacyFifoEn;
  if (_9 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (mb_idx <= 7)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (instance, mb_idx);
  # DEBUG BEGIN_STMT
  u32MbHandle = 0;
  goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _10 = state->mbs[u32MbHandle].state;
  if (_10 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxMB (instance, mb_idx);

  <bb 13> :
  # DEBUG BEGIN_STMT
  _11 = state->mbs[u32MbHandle].state;
  if (_11 == 2)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerTxMB (instance, mb_idx);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _12 = FlexCAN_GetMsgBuffIntStatusFlag (base, mb_idx);
  if (_12 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _13 = state->mbs[u32MbHandle].state;
  if (_13 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);

  <bb 18> :
  # DEBUG BEGIN_STMT
  if (bEnhancedFifoExisted == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _14 = FlexCAN_IsEnhancedRxFifoEnabled (base);
  if (_14 == 1)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  _15 = state->transferType;
  if (_15 == 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  bIsSpuriousInt = FlexCAN_ProcessIRQHandlerEnhancedRxFIFO (instance, bIsSpuriousInt);

  <bb 22> :
  # DEBUG BEGIN_STMT
  if (bIsSpuriousInt == 1)
    goto <bb 23>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  FlexCAN_ProcessSpuriousInterruptMB (instance, startMbIdx, endMbIdx);
  goto <bb 29>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  mb_idx = startMbIdx;
  goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  # DEBUG BEGIN_STMT
  mb_idx = mb_idx + 1;

  <bb 26> :
  # DEBUG BEGIN_STMT
  if (mb_idx <= endMbIdx)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  if (bEnhancedFifoExisted == 1)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base, 28);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base, 29);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base, 30);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base, 31);

  <bb 29> :
  return;

}


FlexCAN_CompleteRxMessageFifoData (uint8 instance)
{
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = state->transferType;
  if (_5 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 5, 0, _6);
  # DEBUG BEGIN_STMT
  _7 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 6, 0, _7);
  # DEBUG BEGIN_STMT
  _8 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 7, 0, _8);

  <bb 4> :
  # DEBUG BEGIN_STMT
  state->mbs[0].pMBmessage = 0B;
  # DEBUG BEGIN_STMT
  state->mbs[0].state = 0;
  return;

}


FlexCAN_Ip_GetTransferStatus (uint8 instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType status;
  const struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType D.13254;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  state = Flexcan_Ip_apxState[_1];
  # DEBUG BEGIN_STMT
  status = 1;
  # DEBUG BEGIN_STMT
  _2 = instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = mb_idx + 192;
  _5 = _4 > 190;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  if (mb_idx <= 63)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _7 = (int) mb_idx;
  _8 = state->mbs[_7].state;
  if (_8 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  status = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  status = 2;
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = state->enhancedFifoOutput.state;
  if (_9 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  status = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  status = 2;

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.13254 = status;
  return D.13254;

}


FlexCAN_Ip_ConfigRemoteResponseMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  const struct Flexcan_Ip_StateType * const state;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13242;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  pMbAddr = 0B;
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = tx_info != 0B;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  _7 = pBase->CTRL2;
  _8 = _7 & 131072;
  _9 = _8 == 0;
  _10 = (unsigned char) _9;
  DevAssert (_10);
  # DEBUG BEGIN_STMT
  _11 = tx_info->data_length;
  _12 = (unsigned char) _11;
  _13 = (long unsigned int) mb_idx;
  _14 = FlexCAN_GetMbPayloadSize (pBase, _13);
  _15 = _12 <= _14;
  _16 = (unsigned char) _15;
  DevAssert (_16);
  # DEBUG BEGIN_STMT
  _17 = state->bIsLegacyFifoEn;
  _18 = state->u32MaxMbNum;
  _19 = FlexCAN_IsMbOutOfRange (pBase, mb_idx, _17, _18);
  if (_19 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = 4;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _20 = tx_info->data_length;
  cs.dataLen = _20;
  # DEBUG BEGIN_STMT
  _21 = tx_info->msg_id_type;
  cs.msgIdType = _21;
  # DEBUG BEGIN_STMT
  cs.code = 10;
  # DEBUG BEGIN_STMT
  cs.fd_enable = 0;
  # DEBUG BEGIN_STMT
  cs.enable_brs = 0;
  # DEBUG BEGIN_STMT
  cs.fd_padding = 0;
  # DEBUG BEGIN_STMT
  _22 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, _22);
  # DEBUG BEGIN_STMT
  _23 = (long unsigned int) mb_idx;
  pMbAddr = FlexCAN_GetMsgBuffRegion (pBase, _23);
  # DEBUG BEGIN_STMT
  _24 = tx_info->is_remote;
  FlexCAN_SetTxMsgBuff (pMbAddr, &cs, msg_id, mb_data, _24);
  # DEBUG BEGIN_STMT
  _25 = tx_info->is_polling;
  if (_25 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _26 = (long unsigned int) mb_idx;
  _27 = state->isIntActive;
  result = FlexCAN_SetMsgBuffIntCmd (pBase, instance, _26, 1, _27);

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.13242 = result;
  cs = {CLOBBER};
  return D.13242;

}


FlexCAN_Ip_ConfigEnhancedRxFifo_Privileged (uint8 instance, const struct Flexcan_Ip_EnhancedIdTableType * id_filter_table)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13234;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = FlexCAN_IsEnabled (pBase);
  _3 = _2 == 0;
  disabled = (boolean) _3;
  # DEBUG BEGIN_STMT
  _4 = instance <= 3;
  _5 = (unsigned char) _4;
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_IsEnhancedRxFifoAvailable (pBase);
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  _7 = id_filter_table != 0B;
  _8 = (unsigned char) _7;
  DevAssert (_8);
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  freeze = FlexCAN_IsFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoFilter (pBase, id_filter_table);

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.13234 = result;
  return D.13234;

}


FlexCAN_Ip_ConfigRxFifo_Privileged (uint8 instance, Flexcan_Ip_RxFifoIdElementFormatType id_format, const struct Flexcan_Ip_IdTableType * id_filter_table)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13214;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  status = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  pBase = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase);
  _5 = _4 == 0;
  disabled = (boolean) _5;
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_Enable (pBase);

  <bb 4> :
  # DEBUG BEGIN_STMT
  freeze = FlexCAN_IsFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (freeze == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxFifoFilter (pBase, id_format, id_filter_table);

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status = FlexCAN_Disable (pBase);
  # DEBUG BEGIN_STMT
  if (status != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result = status;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.13214 = result;
  return D.13214;

}


FlexCAN_Ip_RxFifoBlocking (uint8 instance, struct Flexcan_Ip_MsgBuffType * data, uint32 timeout)
{
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13138;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnhancedRxFifoAvailable (base);
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsEnhancedRxFifoEnabled (base);
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_StartRxMessageEnhancedFifoData (instance, data);
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_ProccessEnhancedRxFifo (instance, timeout);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_StartRxMessageFifoData (instance, data);
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_ProccessLegacyRxFIFO (instance, timeout);
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_StartRxMessageFifoData (instance, data);
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_ProccessLegacyRxFIFO (instance, timeout);

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.13138 = result;
  return D.13138;

}


FlexCAN_Ip_RxFifo (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13092;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  base = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnhancedRxFifoAvailable (base);
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsEnhancedRxFifoEnabled (base);
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_StartRxMessageEnhancedFifoData (instance, data);
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_StartRxMessageFifoData (instance, data);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_StartRxMessageFifoData (instance, data);

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.13092 = result;
  return D.13092;

}


FlexCAN_Ip_ReceiveBlocking (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling, uint32 u32TimeoutMs)
{
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13061;
  long unsigned int D.13047;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  _1 = u32TimeoutMs * 1000;
  mS2Ticks = OsIf_MicrosToTicks (_1, 0);
  # DEBUG BEGIN_STMT
  _2 = instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = (int) instance;
  state = Flexcan_Ip_apxState[_4];
  # DEBUG BEGIN_STMT
  _5 = (int) instance;
  base = Flexcan_Ip_apxBase[_5];
  # DEBUG BEGIN_STMT
  result = FlexCAN_StartRxMessageBufferData (instance, mb_idx, data, isPolling);
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (isPolling == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = (long unsigned int) mb_idx;
  _7 = state->isIntActive;
  result = FlexCAN_SetMsgBuffIntCmd (base, instance, _6, 1, _7);

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = OsIf_GetCounter (0);
  timeStart = _8;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (isPolling == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) mb_idx;
  _10 = FlexCAN_GetBuffStatusFlag (base, _9);
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx;
  FlexCAN_IRQHandlerRxMB (instance, _11);

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.13047 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.13047 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= mS2Ticks)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result = 3;
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx;
  _13 = state->mbs[_12].state;
  if (_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (result == 3)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  if (isPolling == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _14 = (long unsigned int) mb_idx;
  _15 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, _14, 0, _15);

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (result != 4)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  if (result != 2)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _16 = (int) mb_idx;
  _17 = state->mbs[_16].state;
  if (_17 == 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  result = 0;
  goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _18 = (int) mb_idx;
  state->mbs[_18].state = 0;
  # DEBUG BEGIN_STMT
  result = 3;

  <bb 21> :
  # DEBUG BEGIN_STMT
  D.13061 = result;
  timeStart = {CLOBBER};
  return D.13061;

}


FlexCAN_Ip_Receive (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13027;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  result = FlexCAN_StartRxMessageBufferData (instance, mb_idx, data, isPolling);
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (isPolling == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) mb_idx;
  _6 = state->isIntActive;
  result = FlexCAN_SetMsgBuffIntCmd (base, instance, _5, 1, _6);

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.13027 = result;
  return D.13027;

}


FlexCAN_Ip_ConfigRxMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * rx_info, uint32 msg_id)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.13020;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = rx_info != 0B;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  _7 = state->bIsLegacyFifoEn;
  _8 = state->u32MaxMbNum;
  _9 = FlexCAN_IsMbOutOfRange (base, mb_idx, _7, _8);
  if (_9 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult = 4;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _10 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (base, _10);
  # DEBUG BEGIN_STMT
  _11 = rx_info->data_length;
  cs.dataLen = _11;
  # DEBUG BEGIN_STMT
  _12 = rx_info->msg_id_type;
  cs.msgIdType = _12;
  # DEBUG BEGIN_STMT
  _13 = rx_info->fd_enable;
  cs.fd_enable = _13;
  # DEBUG BEGIN_STMT
  cs.code = 15;
  # DEBUG BEGIN_STMT
  _14 = (long unsigned int) mb_idx;
  FlexCAN_SetRxMsgBuff (base, _14, &cs, msg_id);
  # DEBUG BEGIN_STMT
  cs.code = 0;
  # DEBUG BEGIN_STMT
  _15 = (long unsigned int) mb_idx;
  FlexCAN_SetRxMsgBuff (base, _15, &cs, msg_id);
  # DEBUG BEGIN_STMT
  cs.code = 4;
  # DEBUG BEGIN_STMT
  _16 = (long unsigned int) mb_idx;
  FlexCAN_SetRxMsgBuff (base, _16, &cs, msg_id);

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.13020 = eResult;
  cs = {CLOBBER};
  return D.13020;

}


FlexCAN_Ip_Send (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.12991;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result = 1;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = tx_info != 0B;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  _7 = FlexCAN_IsListenOnlyModeEnabled (base);
  if (_7 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = FlexCAN_StartSendData (instance, mb_idx, tx_info, msg_id, mb_data);
  # DEBUG BEGIN_STMT
  if (result == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _8 = tx_info->is_polling;
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) mb_idx;
  _10 = state->isIntActive;
  result = FlexCAN_SetMsgBuffIntCmd (base, instance, _9, 1, _10);

  <bb 6> :
  # DEBUG BEGIN_STMT
  D.12991 = result;
  return D.12991;

}


FlexCAN_Ip_Init_Privileged (uint8 Flexcan_Ip_u8Instance, struct Flexcan_Ip_StateType * Flexcan_Ip_pState, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  uint32 i;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.12926;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) Flexcan_Ip_u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = Flexcan_Ip_u8Instance <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = Flexcan_Ip_pData != 0B;
  _5 = (unsigned char) _4;
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  eResult = FlexCAN_InitController (Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
  # DEBUG BEGIN_STMT
  if (eResult == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_InitBaudrate (pBase, Flexcan_Ip_pData);
  # DEBUG BEGIN_STMT
  _6 = Flexcan_Ip_pData->flexcanMode;
  FlexCAN_SetOperationMode (pBase, _6);
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState->mbs[i].isPolling = 1;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState->mbs[i].pMBmessage = 0B;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState->mbs[i].state = 0;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState->mbs[i].time_stamp = 0;
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (i <= 63)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState->enhancedFifoOutput.isPolling = 1;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState->enhancedFifoOutput.state = 0;
  # DEBUG BEGIN_STMT
  _7 = Flexcan_Ip_pData->transfer_type;
  Flexcan_Ip_pState->transferType = _7;
  # DEBUG BEGIN_STMT
  _8 = Flexcan_Ip_pData->Callback;
  Flexcan_Ip_pState->callback = _8;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState->callbackParam = 0B;
  # DEBUG BEGIN_STMT
  _9 = Flexcan_Ip_pData->ErrorCallback;
  Flexcan_Ip_pState->error_callback = _9;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState->errorCallbackParam = 0B;
  # DEBUG BEGIN_STMT
  _10 = Flexcan_Ip_pData->is_rx_fifo_needed;
  Flexcan_Ip_pState->bIsLegacyFifoEn = _10;
  # DEBUG BEGIN_STMT
  _11 = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
  Flexcan_Ip_pState->bIsEnhancedFifoEn = _11;
  # DEBUG BEGIN_STMT
  _12 = Flexcan_Ip_pData->max_num_mb;
  Flexcan_Ip_pState->u32MaxMbNum = _12;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState->isIntActive = 1;
  # DEBUG BEGIN_STMT
  _13 = (int) Flexcan_Ip_u8Instance;
  Flexcan_Ip_apxState[_13] = Flexcan_Ip_pState;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.12926 = eResult;
  return D.12926;

}


FlexCAN_AbortRxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 val2;
  uint32 val1;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  val1 = 0;
  # DEBUG BEGIN_STMT
  val2 = 0;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = 0;
  # DEBUG BEGIN_STMT
  flexcan_mb = 0B;
  # DEBUG BEGIN_STMT
  _3 = (int) mb_idx;
  state->mbs[_3].state = 0;
  # DEBUG BEGIN_STMT
  _4 = state->bIsLegacyFifoEn;
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = pBase->CTRL2;
  _6 = _5 >> 24;
  val1 = _6 & 15;
  # DEBUG BEGIN_STMT
  val2 = RxFifoOcuppiedLastMsgBuff (val1);
  # DEBUG BEGIN_STMT
  _7 = (long unsigned int) mb_idx;
  if (val2 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = (long unsigned int) mb_idx;
  flexcan_mb = FlexCAN_GetMsgBuffRegion (pBase, _8);
  # DEBUG BEGIN_STMT
  flexcan_mb_config = *flexcan_mb;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config;
  # DEBUG BEGIN_STMT
  *flexcan_mb = flexcan_mb_config;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config | 67108864;
  # DEBUG BEGIN_STMT
  *flexcan_mb = flexcan_mb_config;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (mb_idx == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = state->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase, u8Instance, 5, _9);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = (long unsigned int) mb_idx;
  flexcan_mb = FlexCAN_GetMsgBuffRegion (pBase, _10);
  # DEBUG BEGIN_STMT
  flexcan_mb_config = *flexcan_mb;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config;
  # DEBUG BEGIN_STMT
  *flexcan_mb = flexcan_mb_config;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config | 67108864;
  # DEBUG BEGIN_STMT
  *flexcan_mb = flexcan_mb_config;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, _11);
  return;

}


FlexCAN_AbortTxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 uS2Ticks;
  uint32 flexcan_mb_config;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.13731;
  long unsigned int D.13722;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = 0;
  # DEBUG BEGIN_STMT
  uS2Ticks = 0;
  # DEBUG BEGIN_STMT
  flexcan_mb = 0B;
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) mb_idx;
  flexcan_mb = FlexCAN_GetMsgBuffRegion (pBase, _3);
  # DEBUG BEGIN_STMT
  flexcan_mb_config = *flexcan_mb;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config & 4043309055;
  # DEBUG BEGIN_STMT
  flexcan_mb_config = flexcan_mb_config | 150994944;
  # DEBUG BEGIN_STMT
  *flexcan_mb = flexcan_mb_config;
  # DEBUG BEGIN_STMT
  uS2Ticks = OsIf_MicrosToTicks (1000000, 0);
  # DEBUG BEGIN_STMT
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  D.13722 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.13722 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= uS2Ticks)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result = 3;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) mb_idx;
  _6 = FlexCAN_GetBuffStatusFlag (pBase, _5);
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (result != 3)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  flexcan_mb_config = *flexcan_mb;
  # DEBUG BEGIN_STMT
  _7 = flexcan_mb_config >> 24;
  _8 = _7 & 15;
  if (_8 == 8)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  result = 5;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _9 = flexcan_mb_config >> 24;
  _10 = _9 & 15;
  if (_10 == 9)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  result = 0;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, _11);
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx;
  state->mbs[_12].state = 0;
  # DEBUG BEGIN_STMT
  D.13731 = result;
  timeStart = {CLOBBER};
  return D.13731;

}


FlexCAN_IRQHandlerEnhancedRxFIFO (uint8 instance, uint32 intType)
{
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  switch (intType) <default: <L20> [INV], case 28: <L0> [INV], case 29: <L9> [INV], case 30: <L12> [INV], case 31: <L15> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _3 = state->enhancedFifoOutput.state;
  if (_3 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _4 = state->enhancedFifoOutput.pMBmessage;
  if (_4 == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  state->enhancedFifoOutput.pMBmessage = &data;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _5 = state->enhancedFifoOutput.pMBmessage;
  FlexCAN_ReadEnhancedRxFifo (base, _5);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base, intType);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base, 29);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base, 30);
  # DEBUG BEGIN_STMT
  state->enhancedFifoOutput.state = 0;
  # DEBUG BEGIN_STMT
  _6 = state->callback;
  if (_6 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 = state->callback;
  _7 (instance, 5, 255, state);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _8 = state->enhancedFifoOutput.state;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  FlexCAN_CompleteRxMessageEnhancedFifoData (instance);
  goto <bb 16>; [INV]

  <bb 10> :
<L9>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base, intType);
  # DEBUG BEGIN_STMT
  _9 = state->callback;
  if (_9 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _10 = state->callback;
  _10 (instance, 6, 255, state);
  goto <bb 16>; [INV]

  <bb 12> :
<L12>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base, intType);
  # DEBUG BEGIN_STMT
  _11 = state->callback;
  if (_11 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _12 = state->callback;
  _12 (instance, 7, 255, state);
  goto <bb 16>; [INV]

  <bb 14> :
<L15>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base, intType);
  # DEBUG BEGIN_STMT
  _13 = state->callback;
  if (_13 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _14 = state->callback;
  _14 (instance, 8, 255, state);

  <bb 16> :
<L20>:
  data = {CLOBBER};
  return;

}


FlexCAN_ProcessIRQHandlerEnhancedRxFIFO (uint8 u8Instance, boolean bIsSpuriousIntPrevious)
{
  boolean bIsSpuriousInt;
  uint32 u32intType;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  boolean D.13315;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  u32intType = 0;
  # DEBUG BEGIN_STMT
  bIsSpuriousInt = bIsSpuriousIntPrevious;
  # DEBUG BEGIN_STMT
  u32intType = 31;
  goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_GetEnhancedRxFIFOStatusFlag (base, u32intType);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_GetEnhancedRxFIFOIntStatusFlag (base, u32intType);
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerEnhancedRxFIFO (u8Instance, u32intType);
  # DEBUG BEGIN_STMT
  bIsSpuriousInt = 0;
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (bIsSpuriousInt == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _5 = state->enhancedFifoOutput.isPolling;
  if (_5 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base, u32intType);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  u32intType = u32intType + 4294967295;

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (u32intType > 27)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.13315 = bIsSpuriousInt;
  return D.13315;

}


FlexCAN_ProcessSpuriousInterruptMB (uint8 instance, uint32 startMbIdx, uint32 endMbIdx)
{
  uint32 u32MbHandle;
  uint32 mb_idx;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  mb_idx = 0;
  # DEBUG BEGIN_STMT
  u32MbHandle = 0;
  # DEBUG BEGIN_STMT
  mb_idx = startMbIdx;
  goto <bb 12>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_GetBuffStatusFlag (base, mb_idx);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  _4 = FlexCAN_GetBuffStatusImask (base, mb_idx);
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  u32MbHandle = mb_idx;
  # DEBUG BEGIN_STMT
  _5 = state->bIsLegacyFifoEn;
  if (_5 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (mb_idx <= 7)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  u32MbHandle = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _6 = state->mbs[u32MbHandle].isPolling;
  if (_6 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  # DEBUG BEGIN_STMT
  _7 = state->mbs[u32MbHandle].state;
  if (_7 == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  state->mbs[u32MbHandle].state = 0;
  # DEBUG BEGIN_STMT
  state->mbs[u32MbHandle].isPolling = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  mb_idx = mb_idx + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (mb_idx <= endMbIdx)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  return;

}


FlexCAN_IRQHandlerRxFIFO (uint8 instance, uint32 mb_idx)
{
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = state->mbs[0].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  state->mbs[0].pMBmessage = &data;

  <bb 4> :
  # DEBUG BEGIN_STMT
  switch (mb_idx) <default: <L17> [INV], case 5: <L2> [INV], case 6: <L9> [INV], case 7: <L12> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _4 = state->mbs[0].state;
  if (_4 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _5 = state->mbs[0].pMBmessage;
  FlexCAN_ReadRxFifo (base, _5);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  # DEBUG BEGIN_STMT
  state->mbs[0].state = 0;
  # DEBUG BEGIN_STMT
  _6 = state->callback;
  if (_6 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 = state->callback;
  _7 (instance, 1, 0, state);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _8 = state->mbs[0].state;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  state->mbs[0].isPolling = 1;
  # DEBUG BEGIN_STMT
  FlexCAN_CompleteRxMessageFifoData (instance);
  goto <bb 14>; [INV]

  <bb 10> :
<L9>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  # DEBUG BEGIN_STMT
  _9 = state->callback;
  if (_9 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _10 = state->callback;
  _10 (instance, 2, 0, state);
  goto <bb 14>; [INV]

  <bb 12> :
<L12>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  # DEBUG BEGIN_STMT
  _11 = state->callback;
  if (_11 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _12 = state->callback;
  _12 (instance, 3, 0, state);

  <bb 14> :
<L17>:
  data = {CLOBBER};
  return;

}


FlexCAN_IRQHandlerTxMB (uint8 u8Instance, uint32 u32MbIdx)
{
  struct Flexcan_Ip_MsgBuffType mb;
  struct Flexcan_Ip_StateType * pState;
  struct FLEXCAN_Type * pBase;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance;
  pState = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = pState->mbs[u32MbIdx].isRemote;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_LockRxMsgBuff (pBase, u32MbIdx);
  # DEBUG BEGIN_STMT
  FlexCAN_GetMsgBuff (pBase, u32MbIdx, &mb);
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (pBase);
  # DEBUG BEGIN_STMT
  _4 = mb.time_stamp;
  pState->mbs[u32MbIdx].time_stamp = _4;
  # DEBUG BEGIN_STMT
  _5 = mb.cs;
  _6 = _5 >> 24;
  _7 = _6 & 15;
  if (_7 == 4)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, u32MbIdx);
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_GetMsgBuffTimestamp (pBase, u32MbIdx);
  pState->mbs[u32MbIdx].time_stamp = _8;
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (pBase);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase, u32MbIdx);

  <bb 6> :
  # DEBUG BEGIN_STMT
  pState->mbs[u32MbIdx].state = 0;
  # DEBUG BEGIN_STMT
  _9 = pState->callback;
  if (_9 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = pState->callback;
  _10 (u8Instance, 4, u32MbIdx, pState);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _11 = pState->mbs[u32MbIdx].state;
  if (_11 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  pState->mbs[u32MbIdx].isPolling = 1;
  # DEBUG BEGIN_STMT
  _12 = pState->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase, u8Instance, u32MbIdx, 0, _12);
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _13 = pState->mbs[u32MbIdx].isPolling;
  if (_13 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _14 = pState->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase, u8Instance, u32MbIdx, 0, _14);

  <bb 12> :
  # DEBUG BEGIN_STMT
  mb = {CLOBBER};
  return;

}


FlexCAN_IRQHandlerRxMB (uint8 instance, uint32 mb_idx)
{
  boolean bCurrentIntStat;
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  bCurrentIntStat = 0;
  # DEBUG BEGIN_STMT
  _3 = state->mbs[mb_idx].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  state->mbs[mb_idx].pMBmessage = &data;

  <bb 4> :
  # DEBUG BEGIN_STMT
  FlexCAN_LockRxMsgBuff (base, mb_idx);
  # DEBUG BEGIN_STMT
  _4 = state->mbs[mb_idx].pMBmessage;
  FlexCAN_GetMsgBuff (base, mb_idx, _4);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base, mb_idx);
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (base);
  # DEBUG BEGIN_STMT
  state->mbs[mb_idx].state = 0;
  # DEBUG BEGIN_STMT
  bCurrentIntStat = state->mbs[mb_idx].isPolling;
  # DEBUG BEGIN_STMT
  _5 = state->callback;
  if (_5 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = state->callback;
  _6 (instance, 0, mb_idx, state);

  <bb 6> :
  # DEBUG BEGIN_STMT
  _7 = state->mbs[mb_idx].state;
  if (_7 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _8 = state->mbs[mb_idx].isPolling;
  if (_8 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  state->mbs[mb_idx].isPolling = 1;
  # DEBUG BEGIN_STMT
  _9 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, mb_idx, 0, _9);
  goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (bCurrentIntStat == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _10 = state->mbs[mb_idx].isPolling;
  if (_10 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _11 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, mb_idx, 0, _11);

  <bb 12> :
  # DEBUG BEGIN_STMT
  data = {CLOBBER};
  return;

}


FlexCAN_StartRxMessageFifoData (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType eResult;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.13124;

  <bb 2> :
  # DEBUG BEGIN_STMT
  base = 0B;
  # DEBUG BEGIN_STMT
  state = 0B;
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  _1 = instance <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  base = Flexcan_Ip_apxBase[_3];
  # DEBUG BEGIN_STMT
  _4 = (int) instance;
  state = Flexcan_Ip_apxState[_4];
  # DEBUG BEGIN_STMT
  _5 = state->bIsLegacyFifoEn;
  if (_5 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult = 1;
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = state->mbs[0].state;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  eResult = 2;
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  state->mbs[0].state = 1;
  # DEBUG BEGIN_STMT
  _7 = state->transferType;
  if (_7 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  state->mbs[0].isPolling = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  state->mbs[0].pMBmessage = data;
  # DEBUG BEGIN_STMT
  _8 = state->transferType;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  state->mbs[0].isPolling = 0;
  # DEBUG BEGIN_STMT
  _9 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 6, 1, _9);
  # DEBUG BEGIN_STMT
  _10 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 7, 1, _10);
  # DEBUG BEGIN_STMT
  _11 = state->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base, instance, 5, 1, _11);

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.13124 = eResult;
  return D.13124;

}


FlexCAN_StartSendData (uint8 Flexcan_Ip_u8Instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.13008;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) Flexcan_Ip_u8Instance;
  state = Flexcan_Ip_apxState[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) Flexcan_Ip_u8Instance;
  base = Flexcan_Ip_apxBase[_2];
  # DEBUG BEGIN_STMT
  pMbAddr = 0B;
  # DEBUG BEGIN_STMT
  _3 = Flexcan_Ip_u8Instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = tx_info != 0B;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  _7 = tx_info->data_length;
  _8 = (unsigned char) _7;
  _9 = (long unsigned int) mb_idx;
  _10 = FlexCAN_GetMbPayloadSize (base, _9);
  _11 = _8 <= _10;
  _12 = (unsigned char) _11;
  DevAssert (_12);
  # DEBUG BEGIN_STMT
  _13 = state->bIsLegacyFifoEn;
  _14 = state->u32MaxMbNum;
  _15 = FlexCAN_IsMbOutOfRange (base, mb_idx, _13, _14);
  if (_15 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult = 4;
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _16 = (int) mb_idx;
  _17 = state->mbs[_16].state;
  if (_17 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  eResult = 2;
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _18 = (long unsigned int) mb_idx;
  FlexCAN_ClearMsgBuffIntStatusFlag (base, _18);
  # DEBUG BEGIN_STMT
  _19 = (int) mb_idx;
  state->mbs[_19].state = 2;
  # DEBUG BEGIN_STMT
  _20 = (int) mb_idx;
  state->mbs[_20].time_stamp = 0;
  # DEBUG BEGIN_STMT
  _21 = (int) mb_idx;
  _22 = tx_info->is_polling;
  state->mbs[_21].isPolling = _22;
  # DEBUG BEGIN_STMT
  _23 = (int) mb_idx;
  _24 = tx_info->is_remote;
  state->mbs[_23].isRemote = _24;
  # DEBUG BEGIN_STMT
  _25 = tx_info->data_length;
  cs.dataLen = _25;
  # DEBUG BEGIN_STMT
  _26 = tx_info->msg_id_type;
  cs.msgIdType = _26;
  # DEBUG BEGIN_STMT
  _27 = tx_info->fd_enable;
  cs.fd_enable = _27;
  # DEBUG BEGIN_STMT
  _28 = tx_info->fd_padding;
  cs.fd_padding = _28;
  # DEBUG BEGIN_STMT
  _29 = tx_info->enable_brs;
  cs.enable_brs = _29;
  # DEBUG BEGIN_STMT
  _30 = tx_info->is_remote;
  if (_30 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  cs.code = 28;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  cs.code = 12;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _31 = (long unsigned int) mb_idx;
  pMbAddr = FlexCAN_GetMsgBuffRegion (base, _31);
  # DEBUG BEGIN_STMT
  FlexCAN_SetTxMsgBuff (pMbAddr, &cs, msg_id, mb_data, 0);

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.13008 = eResult;
  cs = {CLOBBER};
  return D.13008;

}


FlexCAN_StartRxMessageBufferData (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.13035;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = state->bIsLegacyFifoEn;
  _6 = state->u32MaxMbNum;
  _7 = FlexCAN_IsMbOutOfRange (base, mb_idx, _5, _6);
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result = 4;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = (int) mb_idx;
  _9 = state->mbs[_8].state;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  result = 2;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = (int) mb_idx;
  state->mbs[_10].state = 1;
  # DEBUG BEGIN_STMT
  _11 = (int) mb_idx;
  state->mbs[_11].pMBmessage = data;
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx;
  state->mbs[_12].isPolling = isPolling;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.13035 = result;
  return D.13035;

}


FlexCAN_ProccessLegacyRxFIFO (uint8 u8Instance, uint32 u32TimeoutMs)
{
  uint32 u32intType;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * pState;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.13184;
  long unsigned int D.13177;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance;
  pState = Flexcan_Ip_apxState[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_2];
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  _3 = u32TimeoutMs * 1000;
  mS2Ticks = OsIf_MicrosToTicks (_3, 0);
  # DEBUG BEGIN_STMT
  u32intType = 0;
  # DEBUG BEGIN_STMT
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = pState->transferType;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  u32intType = 7;
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_GetBuffStatusFlag (pBase, u32intType);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (u8Instance, u32intType);

  <bb 7> :
  # DEBUG BEGIN_STMT
  u32intType = u32intType + 4294967295;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (u32intType > 4)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.13177 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.13177 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= mS2Ticks)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  eResult = 3;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _7 = pState->mbs[0].state;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (eResult == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _8 = pState->transferType;
  if (_8 != 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _9 = pState->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase, u8Instance, 5, 0, _9);
  # DEBUG BEGIN_STMT
  _10 = pState->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase, u8Instance, 6, 0, _10);
  # DEBUG BEGIN_STMT
  _11 = pState->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase, u8Instance, 7, 0, _11);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _12 = pState->mbs[0].state;
  switch (_12) <default: <L18> [INV], case 0: <L17> [INV], case 1: <L16> [INV]>

  <bb 16> :
<L16>:
  # DEBUG BEGIN_STMT
  pState->mbs[0].state = 0;
  # DEBUG BEGIN_STMT
  goto <bb 19>; [INV]

  <bb 17> :
<L17>:
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:
  # DEBUG BEGIN_STMT
  eResult = 1;
  # DEBUG BEGIN_STMT

  <bb 19> :
  # DEBUG BEGIN_STMT
  D.13184 = eResult;
  timeStart = {CLOBBER};
  return D.13184;

}


FlexCAN_ProccessEnhancedRxFifo (uint8 u8Instance, uint32 u32TimeoutMs)
{
  uint32 u32intType;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * pState;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.13151;
  long unsigned int D.13144;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance;
  pState = Flexcan_Ip_apxState[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance;
  pBase = Flexcan_Ip_apxBase[_2];
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  _3 = u32TimeoutMs * 1000;
  mS2Ticks = OsIf_MicrosToTicks (_3, 0);
  # DEBUG BEGIN_STMT
  u32intType = 0;
  # DEBUG BEGIN_STMT
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = pState->transferType;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  u32intType = 31;
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_GetEnhancedRxFIFOStatusFlag (pBase, u32intType);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerEnhancedRxFIFO (u8Instance, u32intType);

  <bb 7> :
  # DEBUG BEGIN_STMT
  u32intType = u32intType + 4294967295;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (u32intType > 27)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.13144 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.13144 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= mS2Ticks)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  eResult = 3;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _7 = pState->enhancedFifoOutput.state;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (eResult == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _8 = pState->transferType;
  if (_8 != 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoIntAll (pBase, 0);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _9 = pState->enhancedFifoOutput.state;
  switch (_9) <default: <L18> [INV], case 0: <L17> [INV], case 1: <L16> [INV]>

  <bb 16> :
<L16>:
  # DEBUG BEGIN_STMT
  pState->enhancedFifoOutput.state = 0;
  # DEBUG BEGIN_STMT
  goto <bb 19>; [INV]

  <bb 17> :
<L17>:
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:
  # DEBUG BEGIN_STMT
  eResult = 1;
  # DEBUG BEGIN_STMT

  <bb 19> :
  # DEBUG BEGIN_STMT
  D.13151 = eResult;
  timeStart = {CLOBBER};
  return D.13151;

}


FlexCAN_StartRxMessageEnhancedFifoData (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType eResult;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.13109;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = state->enhancedFifoOutput.state;
  if (_5 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult = 2;
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  state->enhancedFifoOutput.state = 1;
  # DEBUG BEGIN_STMT
  state->enhancedFifoOutput.pMBmessage = data;
  # DEBUG BEGIN_STMT
  _6 = state->transferType;
  if (_6 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  state->enhancedFifoOutput.isPolling = 0;
  # DEBUG BEGIN_STMT
  _7 = state->isIntActive;
  if (_7 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoIntAll (base, 1);

  <bb 7> :
  # DEBUG BEGIN_STMT
  _8 = state->transferType;
  if (_8 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  state->enhancedFifoOutput.isPolling = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.13109 = eResult;
  return D.13109;

}


FlexCAN_CompleteRxMessageEnhancedFifoData (uint8 instance)
{
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  base = Flexcan_Ip_apxBase[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) instance;
  state = Flexcan_Ip_apxState[_2];
  # DEBUG BEGIN_STMT
  _3 = instance <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsEnhancedRxFifoAvailable (base);
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  _6 = state->enhancedFifoOutput.isPolling;
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  state->enhancedFifoOutput.isPolling = 1;
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoIntAll (base, 0);

  <bb 4> :
  # DEBUG BEGIN_STMT
  state->enhancedFifoOutput.pMBmessage = 0B;
  # DEBUG BEGIN_STMT
  state->enhancedFifoOutput.state = 0;
  return;

}


FlexCAN_InitBaudrate (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Flexcan_Ip_pData->fd_enable;
  FlexCAN_EnableExtCbt (pBase, _1);
  # DEBUG BEGIN_STMT
  _2 = Flexcan_Ip_pData->enhCbtEnable;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = pBase->CTRL2;
  _4 = _3 | 8192;
  pBase->CTRL2 = _4;
  # DEBUG BEGIN_STMT
  _5 = &Flexcan_Ip_pData->bitrate;
  FlexCAN_SetEnhancedNominalTimeSegments (pBase, _5);
  # DEBUG BEGIN_STMT
  _6 = Flexcan_Ip_pData->fd_enable;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = &Flexcan_Ip_pData->bitrate_cbt;
  FlexCAN_SetEnhancedDataTimeSegments (pBase, _7);
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = pBase->CTRL2;
  _9 = _8 & 4294959103;
  pBase->CTRL2 = _9;
  # DEBUG BEGIN_STMT
  _10 = Flexcan_Ip_pData->fd_enable;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _11 = &Flexcan_Ip_pData->bitrate;
  FlexCAN_SetExtendedTimeSegments (pBase, _11);
  # DEBUG BEGIN_STMT
  _12 = &Flexcan_Ip_pData->bitrate_cbt;
  FlexCAN_SetFDTimeSegments (pBase, _12);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _13 = &Flexcan_Ip_pData->bitrate;
  FlexCAN_SetTimeSegments (pBase, _13);

  <bb 8> :
  return;

}


FlexCAN_InitController (uint8 Instance, struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.12940;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_IsEnabled (pBase);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult = FlexCAN_EnterFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  if (eResult == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  eResult = FlexCAN_Disable (pBase);

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (eResult == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = pBase->MCR;
  _3 = _2 & 2147483647;
  pBase->MCR = _3;
  # DEBUG BEGIN_STMT
  eResult = FlexCAN_Init (pBase);
  # DEBUG BEGIN_STMT
  if (eResult != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_DisableMemErrorDetection (pBase);
  # DEBUG BEGIN_STMT
  _4 = Flexcan_Ip_pData->fd_enable;
  _5 = Flexcan_Ip_pData->bitRateSwitch;
  FlexCAN_SetFDEnabled (pBase, _4, _5);
  # DEBUG BEGIN_STMT
  _6 = Flexcan_Ip_pData->ctrlOptions;
  FlexCAN_ConfigCtrlOptions (pBase, _6);
  # DEBUG BEGIN_STMT
  FlexCAN_ResetImaskBuff (Instance);
  # DEBUG BEGIN_STMT
  eResult = FlexCAN_InitCtroll (pBase, Flexcan_Ip_pData);

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.12940 = eResult;
  return D.12940;

}


FlexCAN_InitCtroll (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.12959;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  _1 = Flexcan_Ip_pData->flexcanMode;
  if (_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetSelfReception (pBase, 0);

  <bb 4> :
  # DEBUG BEGIN_STMT
  eResult = FlexCAN_InitRxFifo (pBase, Flexcan_Ip_pData);
  # DEBUG BEGIN_STMT
  if (eResult != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase);
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = &Flexcan_Ip_pData->payload;
  FlexCAN_SetPayloadSize (pBase, _2);
  # DEBUG BEGIN_STMT
  _3 = Flexcan_Ip_pData->max_num_mb;
  eResult = FlexCAN_SetMaxMsgBuffNum (pBase, _3);
  # DEBUG BEGIN_STMT
  if (eResult != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase);
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase);

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.12959 = eResult;
  return D.12959;

}


FlexCAN_InitRxFifo (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.12971;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult = 0;
  # DEBUG BEGIN_STMT
  _1 = Flexcan_Ip_pData->is_rx_fifo_needed;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Flexcan_Ip_pData->num_id_filters;
  eResult = FlexCAN_EnableRxFifo (pBase, _2);

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (eResult == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _3 = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
  if (_3 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _4 = Flexcan_Ip_pData->num_enhanced_std_id_filters;
  _5 = Flexcan_Ip_pData->num_enhanced_ext_id_filters;
  _6 = Flexcan_Ip_pData->num_enhanced_watermark;
  eResult = FlexCAN_EnableEnhancedRxFifo (pBase, _4, _5, _6);

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.12971 = eResult;
  return D.12971;

}


FlexCAN_SetRegDefaultVal (struct FLEXCAN_Type * base)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_IsEnhancedRxFifoAvailable (base);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  base->ERFSR = 4160749568;
  # DEBUG BEGIN_STMT
  base->ERFIER = 0;
  # DEBUG BEGIN_STMT
  base->ERFCR = 0;

  <bb 4> :
  # DEBUG BEGIN_STMT
  base->FDCBT = 0;
  # DEBUG BEGIN_STMT
  base->FDCTRL = 2147500288;
  # DEBUG BEGIN_STMT
  base->ERRSR = 851981;
  # DEBUG BEGIN_STMT
  base->ERRIPPR = 0;
  # DEBUG BEGIN_STMT
  base->ERRIDPR = 0;
  # DEBUG BEGIN_STMT
  base->ERRIAR = 0;
  # DEBUG BEGIN_STMT
  _2 = base->CTRL2;
  _3 = _2 | 536870912;
  base->CTRL2 = _3;
  # DEBUG BEGIN_STMT
  _4 = base->MECR;
  _5 = _4 & 2147483647;
  base->MECR = _5;
  # DEBUG BEGIN_STMT
  base->MECR = 786560;
  # DEBUG BEGIN_STMT
  _6 = base->MECR;
  _7 = _6 | 2147483648;
  base->MECR = _7;
  # DEBUG BEGIN_STMT
  _8 = base->CTRL2;
  _9 = _8 & 3758096383;
  base->CTRL2 = _9;
  # DEBUG BEGIN_STMT
  _10 = FlexCAN_GetMaxMbNum (base);
  if (_10 > 32)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  base->IFLAG2 = 4294967295;
  # DEBUG BEGIN_STMT
  base->IMASK2 = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  base->IFLAG1 = 4294967295;
  # DEBUG BEGIN_STMT
  base->IMASK1 = 0;
  # DEBUG BEGIN_STMT
  base->CBT = 0;
  # DEBUG BEGIN_STMT
  base->CTRL2 = 1048576;
  # DEBUG BEGIN_STMT
  base->ESR1 = 241670;
  # DEBUG BEGIN_STMT
  base->ECR = 0;
  # DEBUG BEGIN_STMT
  base->TIMER = 0;
  # DEBUG BEGIN_STMT
  base->CTRL1 = 0;
  # DEBUG BEGIN_STMT
  base->EPRS = 0;
  # DEBUG BEGIN_STMT
  base->ENCBT = 0;
  # DEBUG BEGIN_STMT
  base->EDCBT = 0;
  # DEBUG BEGIN_STMT
  base->ETDC = 0;
  # DEBUG BEGIN_STMT
  base->MCR = 3633315855;
  return;

}


FlexCAN_GetEnhancedRxFIFOIntStatusFlag (const struct FLEXCAN_Type * base, uint32 intFlag)
{
  uint8 D.13317;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->ERFIER;
  _2 = (unsigned char) intFlag;
  _3 = (int) _2;
  _4 = _3 & 31;
  _5 = 1 << _4;
  _6 = _1 & _5;
  _7 = (unsigned char) intFlag;
  _8 = (int) _7;
  _9 = _8 & 31;
  _10 = _6 >> _9;
  D.13317 = (uint8) _10;
  return D.13317;

}


FlexCAN_ClearEnhancedRxFifoIntStatusFlag (struct FLEXCAN_Type * base, uint32 intFlag)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = 1 << intFlag;
  base->ERFSR = _1;
  return;

}


FlexCAN_GetEnhancedRxFIFOStatusFlag (const struct FLEXCAN_Type * base, uint32 intFlag)
{
  uint8 D.13154;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->ERFSR;
  _2 = (unsigned char) intFlag;
  _3 = (int) _2;
  _4 = _3 & 31;
  _5 = 1 << _4;
  _6 = _1 & _5;
  _7 = (unsigned char) intFlag;
  _8 = (int) _7;
  _9 = _8 & 31;
  _10 = _6 >> _9;
  D.13154 = (uint8) _10;
  return D.13154;

}


FlexCAN_SetEnhancedRxFifoIntAll (struct FLEXCAN_Type * base, boolean enable)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (enable == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  base->ERFIER = 4026531840;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  base->ERFIER = 0;

  <bb 5> :
  return;

}


FlexCAN_IsEnhancedRxFifoEnabled (const struct FLEXCAN_Type * base)
{
  boolean iftmp.7;
  boolean D.13094;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->ERFCR;
  _2 = (signed int) _1;
  if (_2 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7 = 0;

  <bb 5> :
  D.13094 = iftmp.7;
  return D.13094;

}


FlexCAN_SetRxMaskType (struct FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (type == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = _1 & 4294901759;
  base->MCR = _2;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = base->MCR;
  _4 = _3 | 65536;
  base->MCR = _4;

  <bb 5> :
  return;

}


FlexCAN_SetTxArbitrationStartDelay (struct FLEXCAN_Type * base, uint8 tasd)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL2;
  _2 = _1 & 4278714367;
  _3 = (long unsigned int) tasd;
  _4 = _3 << 19;
  _5 = _4 & 16252928;
  _6 = _2 | _5;
  base->CTRL2 = _6;
  return;

}


FlexCAN_IsFreezeMode (const struct FLEXCAN_Type * base)
{
  boolean iftmp.8;
  boolean D.13216;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = _1 & 16777216;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.8 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.8 = 0;

  <bb 5> :
  D.13216 = iftmp.8;
  return D.13216;

}


FlexCAN_SetRxIndividualMask (struct FLEXCAN_Type * base, uint32 msgBuffIdx, uint32 mask)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  base->RXIMR[msgBuffIdx] = mask;
  return;

}


FlexCAN_SetRxMsgBuffGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  base->RXMGMASK = Mask;
  return;

}


FlexCAN_GetMsgBuffIntStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 mask;
  uint8 flag;
  uint8 D.13303;

  <bb 2> :
  # DEBUG BEGIN_STMT
  flag = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (msgBuffIdx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  mask = base->IMASK1;
  # DEBUG BEGIN_STMT
  _1 = base->IFLAG1;
  _2 = mask & _1;
  _3 = msgBuffIdx & 31;
  _4 = _2 >> _3;
  _5 = (unsigned char) _4;
  flag = _5 & 1;
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (msgBuffIdx <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  mask = base->IMASK2;
  # DEBUG BEGIN_STMT
  _6 = base->IFLAG2;
  _7 = mask & _6;
  _8 = msgBuffIdx & 31;
  _9 = _7 >> _8;
  _10 = (unsigned char) _9;
  flag = _10 & 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.13303 = flag;
  return D.13303;

}


RxFifoOcuppiedLastMsgBuff (uint32 x)
{
  uint32 D.13741;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = x + 1;
  _2 = _1 * 8;
  _3 = _2 / 4;
  D.13741 = _3 + 5;
  return D.13741;

}


FlexCAN_IsListenOnlyModeEnabled (const struct FLEXCAN_Type * base)
{
  boolean iftmp.5;
  boolean D.12993;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL1;
  _2 = _1 & 8;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5 = 0;

  <bb 5> :
  D.12993 = iftmp.5;
  return D.12993;

}


FlexCAN_IsFDEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.13619;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = _1 & 2048;
  _3 = _2 != 0;
  D.13619 = (boolean) _3;
  return D.13619;

}


FlexCAN_SetSelfReception (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = _1 & 4294836223;
  if (enable == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.3 = 131072;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3 = 0;

  <bb 5> :
  _3 = iftmp.3 | _2;
  base->MCR = _3;
  return;

}


FlexCAN_EnableExtCbt (struct FLEXCAN_Type * base, boolean enableCBT)
{
  long unsigned int iftmp.4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CBT;
  _2 = _1 & 2147483647;
  if (enableCBT != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.4 = 2147483648;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4 = 0;

  <bb 5> :
  _3 = iftmp.4 | _2;
  base->CBT = _3;
  return;

}


FlexCAN_EnhCbtEnable (struct FLEXCAN_Type * base, boolean enableCBT)
{
  long unsigned int iftmp.13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL2;
  _2 = _1 & 4294959103;
  if (enableCBT != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.13 = 8192;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.13 = 0;

  <bb 5> :
  _3 = iftmp.13 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_IsEnhCbtEnabled (const struct FLEXCAN_Type * pBase)
{
  boolean D.13571;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = pBase->CTRL2;
  _2 = _1 & 8192;
  _3 = _2 != 0;
  D.13571 = (boolean) _3;
  return D.13571;

}


FlexCAN_IsExCbtEnabled (const struct FLEXCAN_Type * pBase)
{
  boolean D.13561;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = pBase->CBT;
  _2 = (signed int) _1;
  _3 = _2 < 0;
  D.13561 = (boolean) _3;
  return D.13561;

}


FlexCAN_GetFDTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->FDCBT;
  _2 = _1 >> 20;
  _3 = _2 & 1023;
  timeSeg->preDivider = _3;
  # DEBUG BEGIN_STMT
  _4 = base->FDCBT;
  _5 = _4 >> 10;
  _6 = _5 & 31;
  timeSeg->propSeg = _6;
  # DEBUG BEGIN_STMT
  _7 = base->FDCBT;
  _8 = _7 >> 5;
  _9 = _8 & 7;
  timeSeg->phaseSeg1 = _9;
  # DEBUG BEGIN_STMT
  _10 = base->FDCBT;
  _11 = _10 & 7;
  timeSeg->phaseSeg2 = _11;
  # DEBUG BEGIN_STMT
  _12 = base->FDCBT;
  _13 = _12 >> 16;
  _14 = _13 & 7;
  timeSeg->rJumpwidth = _14;
  return;

}


FlexCAN_GetTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL1;
  _2 = _1 >> 24;
  _3 = _2 & 255;
  timeSeg->preDivider = _3;
  # DEBUG BEGIN_STMT
  _4 = base->CTRL1;
  _5 = _4 & 7;
  timeSeg->propSeg = _5;
  # DEBUG BEGIN_STMT
  _6 = base->CTRL1;
  _7 = _6 >> 19;
  _8 = _7 & 7;
  timeSeg->phaseSeg1 = _8;
  # DEBUG BEGIN_STMT
  _9 = base->CTRL1;
  _10 = _9 >> 16;
  _11 = _10 & 7;
  timeSeg->phaseSeg2 = _11;
  # DEBUG BEGIN_STMT
  _12 = base->CTRL1;
  _13 = _12 >> 22;
  _14 = _13 & 3;
  timeSeg->rJumpwidth = _14;
  return;

}


FlexCAN_GetExtendedTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CBT;
  _2 = _1 >> 21;
  _3 = _2 & 1023;
  timeSeg->preDivider = _3;
  # DEBUG BEGIN_STMT
  _4 = base->CBT;
  _5 = _4 >> 10;
  _6 = _5 & 63;
  timeSeg->propSeg = _6;
  # DEBUG BEGIN_STMT
  _7 = base->CBT;
  _8 = _7 >> 5;
  _9 = _8 & 31;
  timeSeg->phaseSeg1 = _9;
  # DEBUG BEGIN_STMT
  _10 = base->CBT;
  _11 = _10 & 31;
  timeSeg->phaseSeg2 = _11;
  # DEBUG BEGIN_STMT
  _12 = base->CBT;
  _13 = _12 >> 16;
  _14 = _13 & 31;
  timeSeg->rJumpwidth = _14;
  return;

}


FlexCAN_GetEnhancedDataTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  timeSeg->propSeg = 0;
  # DEBUG BEGIN_STMT
  _3 = base->EDCBT;
  _4 = _3 & 31;
  timeSeg->phaseSeg1 = _4;
  # DEBUG BEGIN_STMT
  _5 = base->EDCBT;
  _6 = _5 >> 12;
  _7 = _6 & 15;
  timeSeg->phaseSeg2 = _7;
  # DEBUG BEGIN_STMT
  _8 = base->EDCBT;
  _9 = _8 >> 22;
  _10 = _9 & 15;
  timeSeg->rJumpwidth = _10;
  # DEBUG BEGIN_STMT
  _11 = base->EPRS;
  _12 = _11 >> 16;
  _13 = _12 & 1023;
  timeSeg->preDivider = _13;
  return;

}


FlexCAN_SetEnhancedDataTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = base->EDCBT;
  _4 = _3 & 4231991264;
  base->EDCBT = _4;
  # DEBUG BEGIN_STMT
  _5 = base->EDCBT;
  _6 = timeSeg->phaseSeg1;
  _7 = timeSeg->propSeg;
  _8 = _6 + _7;
  _9 = _8 & 31;
  _10 = timeSeg->phaseSeg2;
  _11 = _10 << 12;
  _12 = _11 & 65535;
  _13 = _9 | _12;
  _14 = timeSeg->rJumpwidth;
  _15 = _14 << 22;
  _16 = _15 & 62914560;
  _17 = _13 | _16;
  _18 = _5 | _17;
  base->EDCBT = _18;
  # DEBUG BEGIN_STMT
  _19 = base->EPRS;
  _20 = _19 & 4227923967;
  base->EPRS = _20;
  # DEBUG BEGIN_STMT
  _21 = base->EPRS;
  _22 = timeSeg->preDivider;
  _23 = _22 << 16;
  _24 = _23 & 67043328;
  _25 = _21 | _24;
  base->EPRS = _25;
  return;

}


FlexCAN_GetEnhancedNominalTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  timeSeg->propSeg = 0;
  # DEBUG BEGIN_STMT
  _1 = base->EPRS;
  _2 = _1 & 1023;
  timeSeg->preDivider = _2;
  # DEBUG BEGIN_STMT
  _3 = base->ENCBT;
  _4 = _3 & 255;
  timeSeg->phaseSeg1 = _4;
  # DEBUG BEGIN_STMT
  _5 = base->ENCBT;
  _6 = _5 >> 12;
  _7 = _6 & 127;
  timeSeg->phaseSeg2 = _7;
  # DEBUG BEGIN_STMT
  _8 = base->ENCBT;
  _9 = _8 >> 22;
  _10 = _9 & 127;
  timeSeg->rJumpwidth = _10;
  return;

}


FlexCAN_SetEnhancedNominalTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = base->ENCBT;
  _4 = _3 & 3761770240;
  base->ENCBT = _4;
  # DEBUG BEGIN_STMT
  _5 = base->ENCBT;
  _6 = timeSeg->phaseSeg1;
  _7 = timeSeg->propSeg;
  _8 = _6 + _7;
  _9 = _8 + 1;
  _10 = _9 & 255;
  _11 = timeSeg->phaseSeg2;
  _12 = _11 << 12;
  _13 = _12 & 520192;
  _14 = _10 | _13;
  _15 = timeSeg->rJumpwidth;
  _16 = _15 << 22;
  _17 = _16 & 532676608;
  _18 = _14 | _17;
  _19 = _5 | _18;
  base->ENCBT = _19;
  # DEBUG BEGIN_STMT
  _20 = base->EPRS;
  _21 = _20 & 4294966272;
  base->EPRS = _21;
  # DEBUG BEGIN_STMT
  _22 = base->EPRS;
  _23 = timeSeg->preDivider;
  _24 = _23 & 1023;
  _25 = _22 | _24;
  base->EPRS = _25;
  return;

}


FlexCAN_SetExtendedTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = base->CBT;
  _4 = _3 & 2147483648;
  base->CBT = _4;
  # DEBUG BEGIN_STMT
  _5 = base->CBT;
  _6 = timeSeg->propSeg;
  _7 = _6 << 10;
  _8 = _7 & 65535;
  _9 = timeSeg->phaseSeg2;
  _10 = _9 & 31;
  _11 = _8 | _10;
  _12 = timeSeg->phaseSeg1;
  _13 = _12 << 5;
  _14 = _13 & 992;
  _15 = _11 | _14;
  _16 = timeSeg->preDivider;
  _17 = _16 << 21;
  _18 = _17 & 2145386496;
  _19 = _15 | _18;
  _20 = timeSeg->rJumpwidth;
  _21 = _20 << 16;
  _22 = _21 & 2031616;
  _23 = _19 | _22;
  _24 = _5 | _23;
  base->CBT = _24;
  return;

}


FlexCAN_SetTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = base->CTRL1;
  _4 = _3 & 65528;
  base->CTRL1 = _4;
  # DEBUG BEGIN_STMT
  _5 = base->CTRL1;
  _6 = timeSeg->propSeg;
  _7 = _6 & 7;
  _8 = timeSeg->phaseSeg2;
  _9 = _8 << 16;
  _10 = _9 & 458752;
  _11 = _7 | _10;
  _12 = timeSeg->phaseSeg1;
  _13 = _12 << 19;
  _14 = _13 & 3670016;
  _15 = _11 | _14;
  _16 = timeSeg->preDivider;
  _17 = _16 << 24;
  _18 = _15 | _17;
  _19 = timeSeg->rJumpwidth;
  _20 = _19 << 22;
  _21 = _20 & 12582912;
  _22 = _18 | _21;
  _23 = _5 | _22;
  base->CTRL1 = _23;
  return;

}


FlexCAN_SetFDTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = base->FDCBT;
  _4 = _3 & 3221783320;
  base->FDCBT = _4;
  # DEBUG BEGIN_STMT
  _5 = base->FDCBT;
  _6 = timeSeg->propSeg;
  _7 = _6 << 10;
  _8 = _7 & 31744;
  _9 = timeSeg->phaseSeg2;
  _10 = _9 & 7;
  _11 = _8 | _10;
  _12 = timeSeg->phaseSeg1;
  _13 = _12 << 5;
  _14 = _13 & 255;
  _15 = _11 | _14;
  _16 = timeSeg->preDivider;
  _17 = _16 << 20;
  _18 = _17 & 1072693248;
  _19 = _15 | _18;
  _20 = timeSeg->rJumpwidth;
  _21 = _20 << 16;
  _22 = _21 & 458752;
  _23 = _19 | _22;
  _24 = _5 | _23;
  base->FDCBT = _24;
  return;

}


FlexCAN_GetBuffStatusImask (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 u32Imask;
  uint8 D.13337;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32Imask = 0;
  # DEBUG BEGIN_STMT
  if (msgBuffIdx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = base->IMASK1;
  _2 = msgBuffIdx & 31;
  _3 = 1 << _2;
  _4 = _1 & _3;
  _5 = msgBuffIdx & 31;
  u32Imask = _4 >> _5;
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (msgBuffIdx <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = base->IMASK2;
  _7 = msgBuffIdx & 31;
  _8 = 1 << _7;
  _9 = _6 & _8;
  _10 = msgBuffIdx & 31;
  u32Imask = _9 >> _10;

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.13337 = (uint8) u32Imask;
  return D.13337;

}


FlexCAN_GetBuffStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  uint8 D.13070;

  <bb 2> :
  # DEBUG BEGIN_STMT
  flag = 0;
  # DEBUG BEGIN_STMT
  if (msgBuffIdx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = base->IFLAG1;
  _2 = msgBuffIdx & 31;
  _3 = 1 << _2;
  _4 = _1 & _3;
  _5 = msgBuffIdx & 31;
  flag = _4 >> _5;
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (msgBuffIdx <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = base->IFLAG2;
  _7 = msgBuffIdx & 31;
  _8 = 1 << _7;
  _9 = _6 & _8;
  _10 = msgBuffIdx & 31;
  flag = _9 >> _10;

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.13070 = (uint8) flag;
  return D.13070;

}


FlexCAN_ClearMsgBuffIntStatusFlag (struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = msgBuffIdx & 31;
  flag = 1 << _1;
  # DEBUG BEGIN_STMT
  if (msgBuffIdx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  base->IFLAG1 = flag;
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (msgBuffIdx <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  base->IFLAG2 = flag;

  <bb 6> :
  # DEBUG BEGIN_STMT
  return;

}


FlexCAN_UnlockRxMsgBuff (const struct FLEXCAN_Type * base)
{
  long unsigned int vol.6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  vol.6 = base->TIMER;
  return;

}


FlexCAN_SetListenOnlyMode (struct FLEXCAN_Type * base, boolean enableListenOnly)
{
  long unsigned int iftmp.20;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL1;
  _2 = _1 & 4294967287;
  if (enableListenOnly != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.20 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.20 = 0;

  <bb 5> :
  _3 = iftmp.20 | _2;
  base->CTRL1 = _3;
  return;

}


FlexCAN_SetFDEnabled (struct FLEXCAN_Type * base, boolean enableFD, boolean enableBRS)
{
  long unsigned int iftmp.2;
  long unsigned int iftmp.1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = _1 & 4294965247;
  if (enableFD != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.1 = 2048;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1 = 0;

  <bb 5> :
  _3 = iftmp.1 | _2;
  base->MCR = _3;
  # DEBUG BEGIN_STMT
  _4 = base->FDCTRL;
  _5 = _4 & 2147483647;
  if (enableBRS != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.2 = 2147483648;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.2 = 0;

  <bb 8> :
  _6 = iftmp.2 | _5;
  base->FDCTRL = _6;
  # DEBUG BEGIN_STMT
  _7 = base->FDCTRL;
  _8 = _7 & 4294926591;
  base->FDCTRL = _8;
  return;

}


FlexCAN_DisableMemErrorDetection (struct FLEXCAN_Type * base)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL2;
  _2 = _1 | 536870912;
  base->CTRL2 = _2;
  # DEBUG BEGIN_STMT
  base->MECR = 0;
  # DEBUG BEGIN_STMT
  base->MECR = 0;
  # DEBUG BEGIN_STMT
  _3 = base->MECR;
  _4 = _3 | 256;
  base->MECR = _4;
  # DEBUG BEGIN_STMT
  _5 = base->CTRL2;
  _6 = _5 & 3758096383;
  base->CTRL2 = _6;
  return;

}


FlexCAN_IsEnabled (const struct FLEXCAN_Type * pBase)
{
  boolean D.12942;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = pBase->MCR;
  _2 = (signed int) _1;
  _3 = _2 >= 0;
  D.12942 = (boolean) _3;
  return D.12942;

}


FlexCAN_SetEnhancedTDCOffset (struct FLEXCAN_Type * base, boolean enable, uint8 offset)
{
  uint32 tmp;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  tmp = base->ETDC;
  # DEBUG BEGIN_STMT
  tmp = tmp & 2139160575;
  # DEBUG BEGIN_STMT
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  tmp = tmp | 2147483648;
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) offset;
  _2 = _1 << 16;
  _3 = _2 & 8323072;
  tmp = tmp | _3;

  <bb 4> :
  # DEBUG BEGIN_STMT
  base->ETDC = tmp;
  return;

}


FlexCAN_SetTDCOffset (struct FLEXCAN_Type * base, boolean enable, uint8 offset)
{
  uint32 tmp;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  tmp = base->FDCTRL;
  # DEBUG BEGIN_STMT
  tmp = tmp & 4294926591;
  # DEBUG BEGIN_STMT
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  tmp = tmp | 32768;
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) offset;
  _2 = _1 << 8;
  _3 = _2 & 7936;
  tmp = tmp | _3;

  <bb 4> :
  # DEBUG BEGIN_STMT
  base->FDCTRL = tmp;
  return;

}


FlexCAN_SetRxFifoGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  base->RXFGMASK = Mask;
  return;

}


DevAssert (volatile boolean x)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  x.0_1 = x;
  if (x.0_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  __asm__ __volatile__("BKPT #0");
  # DEBUG BEGIN_STMT
  goto <bb 3>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


