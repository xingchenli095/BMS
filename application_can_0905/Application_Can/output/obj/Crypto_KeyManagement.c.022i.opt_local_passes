Crypto_CertificateVerify (uint32 CryptoKeyId, uint32 VerifyCryptoKeyId, Crypto_VerifyResultType * VerifyPtr)
{
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.11_1;
  Std_ReturnType _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_4 = 1;
  # DEBUG RetVal => RetVal_4
  # DEBUG BEGIN_STMT
  Crypto_Initialized.11_1 = Crypto_Initialized;
  if (Crypto_Initialized.11_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 18, 0);
  # DEBUG BEGIN_STMT
  RetVal_16 = 1;
  # DEBUG RetVal => RetVal_16
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_6(D) > 1)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (VerifyCryptoKeyId_7(D) > 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 18, 4);
  # DEBUG BEGIN_STMT
  RetVal_14 = 1;
  # DEBUG RetVal => RetVal_14
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (VerifyPtr_8(D) == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 18, 2);
  # DEBUG BEGIN_STMT
  RetVal_12 = 1;
  # DEBUG RetVal => RetVal_12
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RetVal_10 = Crypto_PL_CertificateVerify (CryptoKeyId_6(D), VerifyCryptoKeyId_7(D), VerifyPtr_8(D));
  # DEBUG RetVal => RetVal_10

  <bb 10> :
  # RetVal_2 = PHI <RetVal_16(3), RetVal_14(6), RetVal_12(8), RetVal_10(9)>
  # DEBUG RetVal => RetVal_2
  # DEBUG BEGIN_STMT
  _17 = RetVal_2;
  return _17;

}


Crypto_CertificateParse (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = RetVal_1;
  return _2;

}


Crypto_KeyExchangeCalcSecret (uint32 CryptoKeyId, const uint8 * PartnerPublicValuePtr, uint32 PartnerPublicValueLength)
{
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.10_1;
  Std_ReturnType _19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_4 = 1;
  # DEBUG RetVal => RetVal_4
  # DEBUG BEGIN_STMT
  Crypto_Initialized.10_1 = Crypto_Initialized;
  if (Crypto_Initialized.10_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 10, 0);
  # DEBUG BEGIN_STMT
  RetVal_18 = 1;
  # DEBUG RetVal => RetVal_18
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_6(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 10, 4);
  # DEBUG BEGIN_STMT
  RetVal_16 = 1;
  # DEBUG RetVal => RetVal_16
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (PartnerPublicValuePtr_7(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 10, 2);
  # DEBUG BEGIN_STMT
  RetVal_14 = 1;
  # DEBUG RetVal => RetVal_14
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (PartnerPublicValueLength_8(D) == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 10, 5);
  # DEBUG BEGIN_STMT
  RetVal_12 = 1;
  # DEBUG RetVal => RetVal_12
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal_10 = Crypto_PL_KeyExchangeCalcSecret (CryptoKeyId_6(D), PartnerPublicValuePtr_7(D), PartnerPublicValueLength_8(D));
  # DEBUG RetVal => RetVal_10

  <bb 11> :
  # RetVal_2 = PHI <RetVal_18(3), RetVal_16(5), RetVal_14(7), RetVal_12(9), RetVal_10(10)>
  # DEBUG RetVal => RetVal_2
  # DEBUG BEGIN_STMT
  _19 = RetVal_2;
  return _19;

}


Crypto_KeyExchangeCalcPubVal (uint32 CryptoKeyId, uint8 * PublicValuePtr, uint32 * PublicValueLengthPtr)
{
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.9_1;
  long unsigned int _2;
  Std_ReturnType _26;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_7 = 1;
  # DEBUG RetVal => RetVal_7
  # DEBUG BEGIN_STMT
  Crypto_Initialized.9_1 = Crypto_Initialized;
  if (Crypto_Initialized.9_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 0);
  # DEBUG BEGIN_STMT
  RetVal_23 = 1;
  # DEBUG RetVal => RetVal_23
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_9(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 4);
  # DEBUG BEGIN_STMT
  RetVal_21 = 1;
  # DEBUG RetVal => RetVal_21
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (PublicValuePtr_10(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 2);
  # DEBUG BEGIN_STMT
  RetVal_19 = 1;
  # DEBUG RetVal => RetVal_19
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (PublicValueLengthPtr_11(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 2);
  # DEBUG BEGIN_STMT
  RetVal_17 = 1;
  # DEBUG RetVal => RetVal_17
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = *PublicValueLengthPtr_11(D);
  if (_2 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 5);
  # DEBUG BEGIN_STMT
  RetVal_15 = 1;
  # DEBUG RetVal => RetVal_15
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RetVal_13 = Crypto_PL_KeyExchangeCalcPubVal (CryptoKeyId_9(D), PublicValuePtr_10(D), PublicValueLengthPtr_11(D));
  # DEBUG RetVal => RetVal_13

  <bb 13> :
  # RetVal_3 = PHI <RetVal_23(3), RetVal_21(5), RetVal_19(7), RetVal_17(9), RetVal_15(11), RetVal_13(12)>
  # DEBUG RetVal => RetVal_3
  # DEBUG BEGIN_STMT
  if (RetVal_3 == 3)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 0);
  # DEBUG BEGIN_STMT
  RetVal_25 = 3;
  # DEBUG RetVal => RetVal_25

  <bb 15> :
  # RetVal_4 = PHI <RetVal_3(13), RetVal_25(14)>
  # DEBUG RetVal => RetVal_4
  # DEBUG BEGIN_STMT
  _26 = RetVal_4;
  return _26;

}


Crypto_KeyDerive (uint32 CryptoKeyId, uint32 TargetCryptoKeyId)
{
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.8_1;
  Std_ReturnType _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_4 = 1;
  # DEBUG RetVal => RetVal_4
  # DEBUG BEGIN_STMT
  Crypto_Initialized.8_1 = Crypto_Initialized;
  if (Crypto_Initialized.8_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 8, 0);
  # DEBUG BEGIN_STMT
  RetVal_15 = 1;
  # DEBUG RetVal => RetVal_15
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_6(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 8, 4);
  # DEBUG BEGIN_STMT
  RetVal_13 = 1;
  # DEBUG RetVal => RetVal_13
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TargetCryptoKeyId_7(D) > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 8, 4);
  # DEBUG BEGIN_STMT
  RetVal_11 = 1;
  # DEBUG RetVal => RetVal_11
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal_9 = Crypto_PL_KeyDerive (CryptoKeyId_6(D), TargetCryptoKeyId_7(D));
  # DEBUG RetVal => RetVal_9

  <bb 9> :
  # RetVal_2 = PHI <RetVal_15(3), RetVal_13(5), RetVal_11(7), RetVal_9(8)>
  # DEBUG RetVal => RetVal_2
  # DEBUG BEGIN_STMT
  _16 = RetVal_2;
  return _16;

}


Crypto_KeyGenerate (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.7_1;
  Std_ReturnType _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_4 = 1;
  # DEBUG RetVal => RetVal_4
  # DEBUG BEGIN_STMT
  Crypto_Initialized.7_1 = Crypto_Initialized;
  if (Crypto_Initialized.7_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 7, 0);
  # DEBUG BEGIN_STMT
  RetVal_12 = 1;
  # DEBUG RetVal => RetVal_12
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_6(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 7, 4);
  # DEBUG BEGIN_STMT
  RetVal_10 = 1;
  # DEBUG RetVal => RetVal_10
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal_8 = Crypto_PL_KeyGenerate (CryptoKeyId_6(D));
  # DEBUG RetVal => RetVal_8

  <bb 7> :
  # RetVal_2 = PHI <RetVal_12(3), RetVal_10(5), RetVal_8(6)>
  # DEBUG RetVal => RetVal_2
  # DEBUG BEGIN_STMT
  _13 = RetVal_2;
  return _13;

}


Crypto_RandomSeed (uint32 CryptoKeyId, const uint8 * EntropyPtr, uint32 EntropyLength)
{
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.6_1;
  Std_ReturnType _19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_4 = 1;
  # DEBUG RetVal => RetVal_4
  # DEBUG BEGIN_STMT
  Crypto_Initialized.6_1 = Crypto_Initialized;
  if (Crypto_Initialized.6_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 13, 0);
  # DEBUG BEGIN_STMT
  RetVal_18 = 1;
  # DEBUG RetVal => RetVal_18
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_6(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 13, 4);
  # DEBUG BEGIN_STMT
  RetVal_16 = 1;
  # DEBUG RetVal => RetVal_16
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EntropyPtr_7(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 13, 2);
  # DEBUG BEGIN_STMT
  RetVal_14 = 1;
  # DEBUG RetVal => RetVal_14
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EntropyLength_8(D) == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 13, 5);
  # DEBUG BEGIN_STMT
  RetVal_12 = 1;
  # DEBUG RetVal => RetVal_12
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal_10 = Crypto_PL_RandomSeed (CryptoKeyId_6(D), EntropyPtr_7(D), EntropyLength_8(D));
  # DEBUG RetVal => RetVal_10

  <bb 11> :
  # RetVal_2 = PHI <RetVal_18(3), RetVal_16(5), RetVal_14(7), RetVal_12(9), RetVal_10(10)>
  # DEBUG RetVal => RetVal_2
  # DEBUG BEGIN_STMT
  _19 = RetVal_2;
  return _19;

}


Crypto_KeyElementIdsGet (uint32 CryptoKeyId, uint32 * KeyElementIdsPtr, uint32 * KeyElementIdsLengthPtr)
{
  uint32 keyElementIndex;
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.5_1;
  long unsigned int _2;
  long unsigned int _3;
  struct Crypto_KeyElement * const * _4;
  long unsigned int _5;
  struct Crypto_KeyElement * const * _6;
  struct Crypto_KeyElement * _7;
  long unsigned int _8;
  uint32 * _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  Std_ReturnType _34;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_17 = 1;
  # DEBUG RetVal => RetVal_17
  # DEBUG BEGIN_STMT
  keyElementIndex_18 = 0;
  # DEBUG keyElementIndex => keyElementIndex_18
  # DEBUG BEGIN_STMT
  Crypto_Initialized.5_1 = Crypto_Initialized;
  if (Crypto_Initialized.5_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 17, 0);
  # DEBUG BEGIN_STMT
  RetVal_33 = 1;
  # DEBUG RetVal => RetVal_33
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_20(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 17, 4);
  # DEBUG BEGIN_STMT
  RetVal_31 = 1;
  # DEBUG RetVal => RetVal_31
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = *KeyElementIdsLengthPtr_21(D);
  _3 = Crypto_Keys[CryptoKeyId_20(D)].KeyElements;
  if (_2 < _3)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 17, 0);
  # DEBUG BEGIN_STMT
  RetVal_29 = 3;
  # DEBUG RetVal => RetVal_29
  goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  keyElementIndex_22 = 0;
  # DEBUG keyElementIndex => keyElementIndex_22
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _4 = Crypto_Keys[CryptoKeyId_20(D)].KeyType;
  _5 = keyElementIndex_14 * 4;
  _6 = _4 + _5;
  _7 = *_6;
  _8 = keyElementIndex_14 * 4;
  _9 = KeyElementIdsPtr_25(D) + _8;
  _10 = _7->Id;
  *_9 = _10;
  # DEBUG BEGIN_STMT
  keyElementIndex_27 = keyElementIndex_14 + 1;
  # DEBUG keyElementIndex => keyElementIndex_27

  <bb 10> :
  # keyElementIndex_14 = PHI <keyElementIndex_22(8), keyElementIndex_27(9)>
  # DEBUG keyElementIndex => keyElementIndex_14
  # DEBUG BEGIN_STMT
  _11 = Crypto_Keys[CryptoKeyId_20(D)].KeyElements;
  if (keyElementIndex_14 < _11)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _12 = Crypto_Keys[CryptoKeyId_20(D)].KeyElements;
  *KeyElementIdsLengthPtr_21(D) = _12;
  # DEBUG BEGIN_STMT
  RetVal_24 = 0;
  # DEBUG RetVal => RetVal_24

  <bb 12> :
  # RetVal_13 = PHI <RetVal_33(3), RetVal_31(5), RetVal_29(7), RetVal_24(11)>
  # DEBUG RetVal => RetVal_13
  # DEBUG BEGIN_STMT
  _34 = RetVal_13;
  return _34;

}


Crypto_KeyCopy (uint32 CryptoKeyId, uint32 TargetCryptoKeyId)
{
  uint32 j;
  uint32 i;
  uint32 ObjectId;
  struct Crypto_DriverObject * DriverObj;
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.4_1;
  struct Crypto_JobType * _2;
  struct Crypto_JobType * _3;
  long unsigned int _4;
  struct Crypto_KeyElement * const * _5;
  long unsigned int _6;
  struct Crypto_KeyElement * const * _7;
  struct Crypto_KeyElement * _8;
  unsigned char _9;
  struct Crypto_KeyElement * const * _10;
  long unsigned int _11;
  struct Crypto_KeyElement * const * _12;
  struct Crypto_KeyElement * _13;
  long unsigned int _14;
  struct Crypto_KeyElement * const * _15;
  long unsigned int _16;
  struct Crypto_KeyElement * const * _17;
  struct Crypto_KeyElement * _18;
  long unsigned int _19;
  struct Crypto_KeyElement * const * _20;
  long unsigned int _21;
  struct Crypto_KeyElement * const * _22;
  struct Crypto_KeyElement * _23;
  unsigned char _24;
  struct Crypto_KeyElement * const * _25;
  long unsigned int _26;
  struct Crypto_KeyElement * const * _27;
  struct Crypto_KeyElement * _28;
  unsigned char _29;
  struct Crypto_KeyElement * const * _30;
  long unsigned int _31;
  struct Crypto_KeyElement * const * _32;
  struct Crypto_KeyElement * _33;
  unsigned char _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  Std_ReturnType _74;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_46 = 1;
  # DEBUG RetVal => RetVal_46
  # DEBUG BEGIN_STMT
  DriverObj_47 = 0B;
  # DEBUG DriverObj => DriverObj_47
  # DEBUG BEGIN_STMT
  ObjectId_48 = 0;
  # DEBUG ObjectId => ObjectId_48
  # DEBUG BEGIN_STMT
  i_49 = 0;
  # DEBUG i => i_49
  # DEBUG BEGIN_STMT
  j_50 = 0;
  # DEBUG j => j_50
  # DEBUG BEGIN_STMT
  Crypto_Initialized.4_1 = Crypto_Initialized;
  if (Crypto_Initialized.4_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 16, 0);
  # DEBUG BEGIN_STMT
  RetVal_73 = 1;
  # DEBUG RetVal => RetVal_73
  goto <bb 29>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_52(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 16, 4);
  # DEBUG BEGIN_STMT
  RetVal_71 = 1;
  # DEBUG RetVal => RetVal_71
  goto <bb 29>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TargetCryptoKeyId_53(D) > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 16, 4);
  # DEBUG BEGIN_STMT
  RetVal_69 = 1;
  # DEBUG RetVal => RetVal_69
  goto <bb 29>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  DriverObj_54 = &Crypto_DriverObjects[ObjectId_48];
  # DEBUG DriverObj => DriverObj_54
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _2 = DriverObj_54->CurrentJob;
  if (_2 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _3 = DriverObj_54->CurrentJob;
  _4 = _3->cryptoKeyId;
  if (TargetCryptoKeyId_53(D) == _4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal_56 = 2;
  # DEBUG RetVal => RetVal_56

  <bb 11> :
  # RetVal_38 = PHI <RetVal_46(8), RetVal_46(9), RetVal_56(10)>
  # DEBUG RetVal => RetVal_38
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  if (RetVal_38 != 2)
    goto <bb 12>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RetVal_58 = 0;
  # DEBUG RetVal => RetVal_58
  # DEBUG BEGIN_STMT
  i_59 = 0;
  # DEBUG i => i_59
  goto <bb 26>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _5 = Crypto_Keys[CryptoKeyId_52(D)].KeyType;
  _6 = i_43 * 4;
  _7 = _5 + _6;
  _8 = *_7;
  _9 = _8->ReadAccess;
  if (_9 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  RetVal_65 = 6;
  # DEBUG RetVal => RetVal_65
  # DEBUG BEGIN_STMT
  goto <bb 27>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  j_60 = 0;
  # DEBUG j => j_60
  goto <bb 22>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _10 = Crypto_Keys[CryptoKeyId_52(D)].KeyType;
  _11 = i_43 * 4;
  _12 = _10 + _11;
  _13 = *_12;
  _14 = _13->Id;
  _15 = Crypto_Keys[TargetCryptoKeyId_53(D)].KeyType;
  _16 = j_44 * 4;
  _17 = _15 + _16;
  _18 = *_17;
  _19 = _18->Id;
  if (_14 == _19)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _20 = Crypto_Keys[TargetCryptoKeyId_53(D)].KeyType;
  _21 = j_44 * 4;
  _22 = _20 + _21;
  _23 = *_22;
  _24 = _23->WriteAccess;
  if (_24 == 1)
    goto <bb 20>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _25 = Crypto_Keys[CryptoKeyId_52(D)].KeyType;
  _26 = i_43 * 4;
  _27 = _25 + _26;
  _28 = *_27;
  _29 = _28->ReadAccess;
  if (_29 == 2)
    goto <bb 19>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 19> :
  _30 = Crypto_Keys[TargetCryptoKeyId_53(D)].KeyType;
  _31 = j_44 * 4;
  _32 = _30 + _31;
  _33 = *_32;
  _34 = _33->ReadAccess;
  if (_34 == 3)
    goto <bb 20>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  RetVal_62 = 7;
  # DEBUG RetVal => RetVal_62
  goto <bb 23>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  j_61 = j_44 + 1;
  # DEBUG j => j_61

  <bb 22> :
  # j_44 = PHI <j_60(15), j_61(21)>
  # DEBUG j => j_44
  # DEBUG BEGIN_STMT
  _35 = Crypto_Keys[TargetCryptoKeyId_53(D)].KeyElements;
  if (j_44 < _35)
    goto <bb 16>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  # RetVal_39 = PHI <RetVal_40(19), RetVal_40(22), RetVal_40(18), RetVal_62(20)>
  # DEBUG RetVal => RetVal_39
  # DEBUG BEGIN_STMT
  _36 = Crypto_Keys[TargetCryptoKeyId_53(D)].KeyElements;
  if (j_44 == _36)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  RetVal_64 = 8;
  # DEBUG RetVal => RetVal_64
  # DEBUG BEGIN_STMT
  goto <bb 27>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  i_63 = i_43 + 1;
  # DEBUG i => i_63

  <bb 26> :
  # RetVal_40 = PHI <RetVal_58(12), RetVal_39(25)>
  # i_43 = PHI <i_59(12), i_63(25)>
  # DEBUG i => i_43
  # DEBUG RetVal => RetVal_40
  # DEBUG BEGIN_STMT
  _37 = Crypto_Keys[CryptoKeyId_52(D)].KeyElements;
  if (i_43 < _37)
    goto <bb 13>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  # RetVal_41 = PHI <RetVal_65(14), RetVal_64(24), RetVal_40(26)>
  # DEBUG RetVal => RetVal_41
  # DEBUG BEGIN_STMT
  if (RetVal_41 == 0)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  RetVal_67 = Crypto_PL_KeyCopy (CryptoKeyId_52(D), TargetCryptoKeyId_53(D));
  # DEBUG RetVal => RetVal_67

  <bb 29> :
  # RetVal_42 = PHI <RetVal_73(3), RetVal_71(5), RetVal_69(7), RetVal_38(11), RetVal_41(27), RetVal_67(28)>
  # DEBUG RetVal => RetVal_42
  # DEBUG BEGIN_STMT
  _74 = RetVal_42;
  return _74;

}


Crypto_KeyElementCopy (uint32 CryptoKeyId, uint32 KeyElementId, uint32 TargetCryptoKeyId, uint32 TargetKeyElementId)
{
  uint32 TargetKeyElementIndex;
  uint32 SourceKeyElementIndex;
  uint32 ObjectId;
  struct Crypto_DriverObject * DriverObj;
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.3_1;
  struct Crypto_JobType * _2;
  struct Crypto_JobType * _3;
  long unsigned int _4;
  struct Crypto_KeyElement * const * _5;
  long unsigned int _6;
  struct Crypto_KeyElement * const * _7;
  struct Crypto_KeyElement * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  struct Crypto_KeyElement * const * _12;
  long unsigned int _13;
  struct Crypto_KeyElement * const * _14;
  struct Crypto_KeyElement * _15;
  unsigned char _16;
  struct Crypto_KeyElement * const * _17;
  long unsigned int _18;
  struct Crypto_KeyElement * const * _19;
  struct Crypto_KeyElement * _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  struct Crypto_KeyElement * const * _24;
  long unsigned int _25;
  struct Crypto_KeyElement * const * _26;
  struct Crypto_KeyElement * _27;
  unsigned char _28;
  struct Crypto_KeyElement * const * _29;
  long unsigned int _30;
  struct Crypto_KeyElement * const * _31;
  struct Crypto_KeyElement * _32;
  unsigned char _33;
  struct Crypto_KeyElement * const * _34;
  long unsigned int _35;
  struct Crypto_KeyElement * const * _36;
  struct Crypto_KeyElement * _37;
  unsigned char _38;
  Std_ReturnType _74;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_44 = 1;
  # DEBUG RetVal => RetVal_44
  # DEBUG BEGIN_STMT
  DriverObj_45 = 0B;
  # DEBUG DriverObj => DriverObj_45
  # DEBUG BEGIN_STMT
  ObjectId_46 = 0;
  # DEBUG ObjectId => ObjectId_46
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Crypto_Initialized.3_1 = Crypto_Initialized;
  if (Crypto_Initialized.3_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 15, 0);
  # DEBUG BEGIN_STMT
  RetVal_73 = 1;
  # DEBUG RetVal => RetVal_73
  goto <bb 31>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_48(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 15, 4);
  # DEBUG BEGIN_STMT
  RetVal_71 = 1;
  # DEBUG RetVal => RetVal_71
  goto <bb 31>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TargetCryptoKeyId_49(D) > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 15, 4);
  # DEBUG BEGIN_STMT
  RetVal_69 = 1;
  # DEBUG RetVal => RetVal_69
  goto <bb 31>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  DriverObj_50 = &Crypto_DriverObjects[ObjectId_46];
  # DEBUG DriverObj => DriverObj_50
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _2 = DriverObj_50->CurrentJob;
  if (_2 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _3 = DriverObj_50->CurrentJob;
  _4 = _3->cryptoKeyId;
  if (TargetCryptoKeyId_49(D) == _4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal_52 = 2;
  # DEBUG RetVal => RetVal_52

  <bb 11> :
  # RetVal_39 = PHI <RetVal_44(8), RetVal_44(9), RetVal_52(10)>
  # DEBUG RetVal => RetVal_39
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  if (RetVal_39 != 2)
    goto <bb 12>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  SourceKeyElementIndex_54 = 0;
  # DEBUG SourceKeyElementIndex => SourceKeyElementIndex_54
  goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _5 = Crypto_Keys[CryptoKeyId_48(D)].KeyType;
  _6 = SourceKeyElementIndex_41 * 4;
  _7 = _5 + _6;
  _8 = *_7;
  _9 = _8->Id;
  if (KeyElementId_55(D) == _9)
    goto <bb 16>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  SourceKeyElementIndex_56 = SourceKeyElementIndex_41 + 1;
  # DEBUG SourceKeyElementIndex => SourceKeyElementIndex_56

  <bb 15> :
  # SourceKeyElementIndex_41 = PHI <SourceKeyElementIndex_54(12), SourceKeyElementIndex_56(14)>
  # DEBUG SourceKeyElementIndex => SourceKeyElementIndex_41
  # DEBUG BEGIN_STMT
  _10 = Crypto_Keys[CryptoKeyId_48(D)].KeyElements;
  if (SourceKeyElementIndex_41 < _10)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _11 = Crypto_Keys[CryptoKeyId_48(D)].KeyElements;
  if (SourceKeyElementIndex_41 == _11)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 15, 4);
  # DEBUG BEGIN_STMT
  RetVal_67 = 1;
  # DEBUG RetVal => RetVal_67
  goto <bb 31>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _12 = Crypto_Keys[CryptoKeyId_48(D)].KeyType;
  _13 = SourceKeyElementIndex_41 * 4;
  _14 = _12 + _13;
  _15 = *_14;
  _16 = _15->ReadAccess;
  if (_16 == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  RetVal_65 = 6;
  # DEBUG RetVal => RetVal_65
  goto <bb 31>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  TargetKeyElementIndex_57 = 0;
  # DEBUG TargetKeyElementIndex => TargetKeyElementIndex_57
  goto <bb 23>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _17 = Crypto_Keys[TargetCryptoKeyId_49(D)].KeyType;
  _18 = TargetKeyElementIndex_42 * 4;
  _19 = _17 + _18;
  _20 = *_19;
  _21 = _20->Id;
  if (TargetKeyElementId_58(D) == _21)
    goto <bb 24>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  TargetKeyElementIndex_59 = TargetKeyElementIndex_42 + 1;
  # DEBUG TargetKeyElementIndex => TargetKeyElementIndex_59

  <bb 23> :
  # TargetKeyElementIndex_42 = PHI <TargetKeyElementIndex_57(20), TargetKeyElementIndex_59(22)>
  # DEBUG TargetKeyElementIndex => TargetKeyElementIndex_42
  # DEBUG BEGIN_STMT
  _22 = Crypto_Keys[TargetCryptoKeyId_49(D)].KeyElements;
  if (TargetKeyElementIndex_42 < _22)
    goto <bb 21>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  _23 = Crypto_Keys[TargetCryptoKeyId_49(D)].KeyElements;
  if (TargetKeyElementIndex_42 == _23)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 15, 4);
  # DEBUG BEGIN_STMT
  RetVal_64 = 1;
  # DEBUG RetVal => RetVal_64
  goto <bb 31>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  _24 = Crypto_Keys[TargetCryptoKeyId_49(D)].KeyType;
  _25 = TargetKeyElementIndex_42 * 4;
  _26 = _24 + _25;
  _27 = *_26;
  _28 = _27->WriteAccess;
  if (_28 == 1)
    goto <bb 29>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  _29 = Crypto_Keys[CryptoKeyId_48(D)].KeyType;
  _30 = SourceKeyElementIndex_41 * 4;
  _31 = _29 + _30;
  _32 = *_31;
  _33 = _32->ReadAccess;
  if (_33 == 2)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 28> :
  _34 = Crypto_Keys[TargetCryptoKeyId_49(D)].KeyType;
  _35 = TargetKeyElementIndex_42 * 4;
  _36 = _34 + _35;
  _37 = *_36;
  _38 = _37->ReadAccess;
  if (_38 == 3)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  RetVal_62 = 7;
  # DEBUG RetVal => RetVal_62
  goto <bb 31>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  RetVal_61 = Crypto_PL_KeyElementCopy (CryptoKeyId_48(D), KeyElementId_55(D), TargetCryptoKeyId_49(D), TargetKeyElementId_58(D));
  # DEBUG RetVal => RetVal_61

  <bb 31> :
  # RetVal_40 = PHI <RetVal_73(3), RetVal_71(5), RetVal_69(7), RetVal_39(11), RetVal_67(17), RetVal_65(19), RetVal_64(25), RetVal_62(29), RetVal_61(30)>
  # DEBUG RetVal => RetVal_40
  # DEBUG BEGIN_STMT
  _74 = RetVal_40;
  return _74;

}


Crypto_KeyElementGet (uint32 CryptoKeyId, uint32 KeyElementId, uint8 * ResultPtr, uint32 * ResultLengthPtr)
{
  uint32 keyElementIndex;
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.2_1;
  long unsigned int _2;
  unsigned char _3;
  struct Crypto_KeyElement * const * _4;
  long unsigned int _5;
  struct Crypto_KeyElement * const * _6;
  struct Crypto_KeyElement * _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  struct Crypto_KeyElement * const * _12;
  long unsigned int _13;
  struct Crypto_KeyElement * const * _14;
  struct Crypto_KeyElement * _15;
  long unsigned int _16;
  struct Crypto_KeyElement * const * _17;
  long unsigned int _18;
  struct Crypto_KeyElement * const * _19;
  struct Crypto_KeyElement * _20;
  unsigned char _21;
  struct Crypto_KeyElement * const * _22;
  long unsigned int _23;
  struct Crypto_KeyElement * const * _24;
  struct Crypto_KeyElement * _25;
  unsigned char _26;
  unsigned char _27;
  Std_ReturnType _61;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_34 = 1;
  # DEBUG RetVal => RetVal_34
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Crypto_Initialized.2_1 = Crypto_Initialized;
  if (Crypto_Initialized.2_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 0);
  # DEBUG BEGIN_STMT
  RetVal_60 = 1;
  # DEBUG RetVal => RetVal_60
  goto <bb 29>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_36(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 4);
  # DEBUG BEGIN_STMT
  RetVal_58 = 1;
  # DEBUG RetVal => RetVal_58
  goto <bb 29>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ResultPtr_37(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 2);
  # DEBUG BEGIN_STMT
  RetVal_56 = 1;
  # DEBUG RetVal => RetVal_56
  goto <bb 29>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ResultLengthPtr_38(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 2);
  # DEBUG BEGIN_STMT
  RetVal_54 = 1;
  # DEBUG RetVal => RetVal_54
  goto <bb 29>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = *ResultLengthPtr_38(D);
  if (_2 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 5);
  # DEBUG BEGIN_STMT
  RetVal_52 = 1;
  # DEBUG RetVal => RetVal_52
  goto <bb 29>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _3 = Crypto_Keys[CryptoKeyId_36(D)].KeyState;
  if (_3 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  keyElementIndex_39 = 0;
  # DEBUG keyElementIndex => keyElementIndex_39
  goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _4 = Crypto_Keys[CryptoKeyId_36(D)].KeyType;
  _5 = keyElementIndex_30 * 4;
  _6 = _4 + _5;
  _7 = *_6;
  _8 = _7->Id;
  if (KeyElementId_40(D) == _8)
    goto <bb 17>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  keyElementIndex_41 = keyElementIndex_30 + 1;
  # DEBUG keyElementIndex => keyElementIndex_41

  <bb 16> :
  # keyElementIndex_30 = PHI <keyElementIndex_39(13), keyElementIndex_41(15)>
  # DEBUG keyElementIndex => keyElementIndex_30
  # DEBUG BEGIN_STMT
  _9 = Crypto_Keys[CryptoKeyId_36(D)].KeyElements;
  if (keyElementIndex_30 < _9)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _10 = Crypto_Keys[CryptoKeyId_36(D)].KeyElements;
  if (keyElementIndex_30 == _10)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 1);
  # DEBUG BEGIN_STMT
  RetVal_48 = 8;
  # DEBUG RetVal => RetVal_48
  goto <bb 25>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _11 = *ResultLengthPtr_38(D);
  _12 = Crypto_Keys[CryptoKeyId_36(D)].KeyType;
  _13 = keyElementIndex_30 * 4;
  _14 = _12 + _13;
  _15 = *_14;
  _16 = _15->Size;
  if (_11 < _16)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  _17 = Crypto_Keys[CryptoKeyId_36(D)].KeyType;
  _18 = keyElementIndex_30 * 4;
  _19 = _17 + _18;
  _20 = *_19;
  _21 = _20->AllowPartialAccess;
  if (_21 == 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 0);
  # DEBUG BEGIN_STMT
  RetVal_43 = 3;
  # DEBUG RetVal => RetVal_43
  goto <bb 25>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _22 = Crypto_Keys[CryptoKeyId_36(D)].KeyType;
  _23 = keyElementIndex_30 * 4;
  _24 = _22 + _23;
  _25 = *_24;
  _26 = _25->ReadAccess;
  _27 = _26 + 255;
  if (_27 <= 1)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  RetVal_46 = 6;
  # DEBUG RetVal => RetVal_46
  goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  RetVal_45 = Crypto_PL_KeyElementGet (CryptoKeyId_36(D), KeyElementId_40(D), ResultPtr_37(D), ResultLengthPtr_38(D));
  # DEBUG RetVal => RetVal_45

  <bb 25> :
  # RetVal_28 = PHI <RetVal_34(12), RetVal_48(18), RetVal_43(21), RetVal_46(23), RetVal_45(24)>
  # DEBUG RetVal => RetVal_28
  # DEBUG BEGIN_STMT
  if (RetVal_28 == 8)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 1);

  <bb 27> :
  # DEBUG BEGIN_STMT
  if (RetVal_28 == 6)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 2);

  <bb 29> :
  # RetVal_29 = PHI <RetVal_60(3), RetVal_58(5), RetVal_56(7), RetVal_54(9), RetVal_52(11), RetVal_28(27), RetVal_28(28)>
  # DEBUG RetVal => RetVal_29
  # DEBUG BEGIN_STMT
  _61 = RetVal_29;
  return _61;

}


Crypto_KeyValidSet (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.1_1;
  Std_ReturnType _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_4 = 1;
  # DEBUG RetVal => RetVal_4
  # DEBUG BEGIN_STMT
  Crypto_Initialized.1_1 = Crypto_Initialized;
  if (Crypto_Initialized.1_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 5, 0);
  # DEBUG BEGIN_STMT
  RetVal_12 = 1;
  # DEBUG RetVal => RetVal_12
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_6(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 5, 4);
  # DEBUG BEGIN_STMT
  RetVal_10 = 1;
  # DEBUG RetVal => RetVal_10
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal_8 = Crypto_PL_KeyValidSet (CryptoKeyId_6(D));
  # DEBUG RetVal => RetVal_8

  <bb 7> :
  # RetVal_2 = PHI <RetVal_12(3), RetVal_10(5), RetVal_8(6)>
  # DEBUG RetVal => RetVal_2
  # DEBUG BEGIN_STMT
  _13 = RetVal_2;
  return _13;

}


Crypto_KeyElementSet (uint32 CryptoKeyId, uint32 KeyElementId, const uint8 * KeyPtr, uint32 KeyLength)
{
  struct Crypto_DriverObject * DriverObj;
  uint32 ObjectId;
  uint32 KeyElementLength;
  uint32 KeyElementIndex;
  boolean Found;
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.0_1;
  struct Crypto_KeyElement * const * _2;
  long unsigned int _3;
  struct Crypto_KeyElement * const * _4;
  struct Crypto_KeyElement * _5;
  long unsigned int _6;
  long unsigned int _7;
  struct Crypto_JobType * _8;
  struct Crypto_JobType * _9;
  long unsigned int _10;
  struct Crypto_KeyElement * const * _11;
  long unsigned int _12;
  struct Crypto_KeyElement * const * _13;
  struct Crypto_KeyElement * _14;
  unsigned char _15;
  unsigned char _16;
  struct Crypto_KeyElement * const * _17;
  long unsigned int _18;
  struct Crypto_KeyElement * const * _19;
  struct Crypto_KeyElement * _20;
  long unsigned int _21;
  struct Crypto_KeyElement * const * _22;
  long unsigned int _23;
  struct Crypto_KeyElement * const * _24;
  struct Crypto_KeyElement * _25;
  unsigned char _26;
  struct Crypto_KeyElement * const * _27;
  long unsigned int _28;
  struct Crypto_KeyElement * const * _29;
  struct Crypto_KeyElement * _30;
  long unsigned int _31;
  struct Crypto_KeyElement * const * _32;
  long unsigned int _33;
  struct Crypto_KeyElement * const * _34;
  struct Crypto_KeyElement * _35;
  Std_ReturnType _75;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_42 = 1;
  # DEBUG RetVal => RetVal_42
  # DEBUG BEGIN_STMT
  Found_43 = 0;
  # DEBUG Found => Found_43
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ObjectId_44 = 0;
  # DEBUG ObjectId => ObjectId_44
  # DEBUG BEGIN_STMT
  DriverObj_45 = 0B;
  # DEBUG DriverObj => DriverObj_45
  # DEBUG BEGIN_STMT
  Crypto_Initialized.0_1 = Crypto_Initialized;
  if (Crypto_Initialized.0_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 4, 0);
  # DEBUG BEGIN_STMT
  RetVal_74 = 1;
  # DEBUG RetVal => RetVal_74
  goto <bb 31>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId_47(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 4, 4);
  # DEBUG BEGIN_STMT
  RetVal_72 = 1;
  # DEBUG RetVal => RetVal_72
  goto <bb 31>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (KeyPtr_48(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 4, 2);
  # DEBUG BEGIN_STMT
  RetVal_70 = 1;
  # DEBUG RetVal => RetVal_70
  goto <bb 31>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (KeyLength_49(D) == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 4, 5);
  # DEBUG BEGIN_STMT
  RetVal_68 = 1;
  # DEBUG RetVal => RetVal_68
  goto <bb 31>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  KeyElementIndex_50 = 0;
  # DEBUG KeyElementIndex => KeyElementIndex_50
  goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _2 = Crypto_Keys[CryptoKeyId_47(D)].KeyType;
  _3 = KeyElementIndex_39 * 4;
  _4 = _2 + _3;
  _5 = *_4;
  _6 = _5->Id;
  if (KeyElementId_51(D) == _6)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Found_53 = 1;
  # DEBUG Found => Found_53
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  KeyElementIndex_52 = KeyElementIndex_39 + 1;
  # DEBUG KeyElementIndex => KeyElementIndex_52

  <bb 14> :
  # KeyElementIndex_39 = PHI <KeyElementIndex_50(10), KeyElementIndex_52(13)>
  # DEBUG KeyElementIndex => KeyElementIndex_39
  # DEBUG BEGIN_STMT
  _7 = Crypto_Keys[CryptoKeyId_47(D)].KeyElements;
  if (KeyElementIndex_39 < _7)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # Found_38 = PHI <Found_53(12), Found_43(14)>
  # DEBUG Found => Found_38
  # DEBUG BEGIN_STMT
  if (Found_38 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 4, 4);
  # DEBUG BEGIN_STMT
  RetVal_66 = 1;
  # DEBUG RetVal => RetVal_66
  goto <bb 31>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  DriverObj_54 = &Crypto_DriverObjects[ObjectId_44];
  # DEBUG DriverObj => DriverObj_54
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _8 = DriverObj_54->CurrentJob;
  if (_8 != 0B)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _9 = DriverObj_54->CurrentJob;
  _10 = _9->cryptoKeyId;
  if (CryptoKeyId_47(D) == _10)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  RetVal_56 = 2;
  # DEBUG RetVal => RetVal_56

  <bb 20> :
  # RetVal_36 = PHI <RetVal_42(17), RetVal_42(18), RetVal_56(19)>
  # DEBUG RetVal => RetVal_36
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  if (RetVal_36 != 2)
    goto <bb 21>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 21> :
  if (Found_38 == 1)
    goto <bb 22>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _11 = Crypto_Keys[CryptoKeyId_47(D)].KeyType;
  _12 = KeyElementIndex_39 * 4;
  _13 = _11 + _12;
  _14 = *_13;
  _15 = _14->WriteAccess;
  _16 = _15 + 255;
  if (_16 <= 1)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  RetVal_64 = 7;
  # DEBUG RetVal => RetVal_64
  goto <bb 31>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  _17 = Crypto_Keys[CryptoKeyId_47(D)].KeyType;
  _18 = KeyElementIndex_39 * 4;
  _19 = _17 + _18;
  _20 = *_19;
  _21 = _20->Size;
  if (KeyLength_49(D) != _21)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 25> :
  _22 = Crypto_Keys[CryptoKeyId_47(D)].KeyType;
  _23 = KeyElementIndex_39 * 4;
  _24 = _22 + _23;
  _25 = *_24;
  _26 = _25->AllowPartialAccess;
  if (_26 == 0)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  RetVal_58 = 10;
  # DEBUG RetVal => RetVal_58
  goto <bb 31>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  _27 = Crypto_Keys[CryptoKeyId_47(D)].KeyType;
  _28 = KeyElementIndex_39 * 4;
  _29 = _27 + _28;
  _30 = *_29;
  _31 = _30->Size;
  if (KeyLength_49(D) > _31)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  _32 = Crypto_Keys[CryptoKeyId_47(D)].KeyType;
  _33 = KeyElementIndex_39 * 4;
  _34 = _32 + _33;
  _35 = *_34;
  KeyElementLength_60 = _35->Size;
  # DEBUG KeyElementLength => KeyElementLength_60
  goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  KeyElementLength_59 = KeyLength_49(D);
  # DEBUG KeyElementLength => KeyElementLength_59

  <bb 30> :
  # KeyElementLength_40 = PHI <KeyElementLength_60(28), KeyElementLength_59(29)>
  # DEBUG KeyElementLength => KeyElementLength_40
  # DEBUG BEGIN_STMT
  Crypto_Keys[CryptoKeyId_47(D)].KeyState = 0;
  # DEBUG BEGIN_STMT
  RetVal_63 = Crypto_PL_KeyElementSet (CryptoKeyId_47(D), KeyElementId_51(D), KeyPtr_48(D), KeyElementLength_40);
  # DEBUG RetVal => RetVal_63

  <bb 31> :
  # RetVal_37 = PHI <RetVal_74(3), RetVal_72(5), RetVal_70(7), RetVal_68(9), RetVal_66(16), RetVal_36(20), RetVal_36(21), RetVal_64(23), RetVal_58(26), RetVal_63(30)>
  # DEBUG RetVal => RetVal_37
  # DEBUG BEGIN_STMT
  _75 = RetVal_37;
  return _75;

}


