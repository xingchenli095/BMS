__attribute__((target ("general-regs-only")))
OS_ResetScheduleAlarm (const struct os_schedule_t * ss, struct os_scheduledynamic_t * sd, os_tick_t delta)
{
  os_boolean_t repeat;
  os_tick_t diff;
  struct os_counterdynamic_t * cd;
  const struct os_counter_t * cs;
  struct os_alarmdynamic_t * ad;
  const struct os_alarm_t * as;
  const struct os_alarm_t * OS_alarmTableBase.0_1;
  short unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  const struct os_counter_t * OS_counterTableBase.1_5;
  unsigned char _6;
  unsigned int _7;
  unsigned int _8;
  unsigned int _9;
  unsigned int _10;
  unsigned int _11;
  unsigned int _12;
  unsigned int _13;
  unsigned int _14;
  unsigned int _15;
  unsigned int _16;
  unsigned int _17;
  unsigned int _18;
  unsigned int _19;
  unsigned int _20;
  unsigned int _21;
  unsigned int _22;
  unsigned int _23;
  unsigned int _24;
  unsigned int _25;
  unsigned int _26;
  unsigned int _27;
  unsigned int _28;
  unsigned int _29;
  unsigned int _30;
  unsigned int _31;
  unsigned int _32;
  unsigned int _33;
  unsigned int _34;
  short unsigned int _35;
  os_tick_t iftmp.2_37;
  os_tick_t iftmp.3_38;
  os_tick_t iftmp.4_39;
  os_tick_t iftmp.2_49;
  os_tick_t iftmp.2_50;
  os_tick_t iftmp.3_53;
  os_tick_t iftmp.3_54;
  os_tick_t iftmp.4_56;
  os_tick_t iftmp.4_57;
  os_boolean_t _63;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  repeat_41 = 1;
  # DEBUG repeat => repeat_41
  # DEBUG BEGIN_STMT
  OS_alarmTableBase.0_1 = OS_alarmTableBase;
  _2 = ss_43(D)->alarm;
  _3 = (unsigned int) _2;
  _4 = _3 * 28;
  as_44 = OS_alarmTableBase.0_1 + _4;
  # DEBUG as => as_44
  # DEBUG BEGIN_STMT
  ad_45 = as_44->dynamic;
  # DEBUG ad => ad_45
  # DEBUG BEGIN_STMT
  OS_counterTableBase.1_5 = OS_counterTableBase;
  _6 = as_44->counter;
  _7 = (unsigned int) _6;
  _8 = _7 * 32;
  cs_46 = OS_counterTableBase.1_5 + _8;
  # DEBUG cs => cs_46
  # DEBUG BEGIN_STMT
  cd_47 = cs_46->dynamic;
  # DEBUG cd => cd_47
  # DEBUG BEGIN_STMT
  _9 = cd_47->current;
  _10 = sd_48(D)->ctrAbs;
  if (_9 < _10)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _11 = cd_47->current;
  _12 = sd_48(D)->ctrAbs;
  _13 = _11 - _12;
  _14 = cs_46->maxallowedvalue;
  _15 = _13 + _14;
  iftmp.2_50 = _15 + 1;
  goto <bb 5>; [INV]

  <bb 4> :
  _16 = cd_47->current;
  _17 = sd_48(D)->ctrAbs;
  iftmp.2_49 = _16 - _17;

  <bb 5> :
  # iftmp.2_37 = PHI <iftmp.2_50(3), iftmp.2_49(4)>
  diff_51 = iftmp.2_37;
  # DEBUG diff => diff_51
  # DEBUG BEGIN_STMT
  _18 = cs_46->maxallowedvalue;
  _19 = sd_48(D)->ctrAbs;
  _20 = _18 - _19;
  if (delta_52(D) > _20)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _21 = sd_48(D)->ctrAbs;
  _22 = delta_52(D) + _21;
  _23 = cs_46->maxallowedvalue;
  _24 = _22 - _23;
  iftmp.3_54 = _24 + 4294967295;
  goto <bb 8>; [INV]

  <bb 7> :
  _25 = sd_48(D)->ctrAbs;
  iftmp.3_53 = delta_52(D) + _25;

  <bb 8> :
  # iftmp.3_38 = PHI <iftmp.3_54(6), iftmp.3_53(7)>
  sd_48(D)->ctrAbs = iftmp.3_38;
  # DEBUG BEGIN_STMT
  if (delta_52(D) > diff_51)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _26 = sd_48(D)->ctrAbs;
  _27 = cd_47->current;
  if (_26 < _27)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _28 = sd_48(D)->ctrAbs;
  _29 = cd_47->current;
  _30 = _28 - _29;
  _31 = cs_46->maxallowedvalue;
  _32 = _30 + _31;
  iftmp.4_57 = _32 + 1;
  goto <bb 12>; [INV]

  <bb 11> :
  _33 = sd_48(D)->ctrAbs;
  _34 = cd_47->current;
  iftmp.4_56 = _33 - _34;

  <bb 12> :
  # iftmp.4_39 = PHI <iftmp.4_57(10), iftmp.4_56(11)>
  ad_45->delta = iftmp.4_39;
  # DEBUG BEGIN_STMT
  ad_45->period = 0;
  # DEBUG BEGIN_STMT
  ad_45->inUse = 1;
  # DEBUG BEGIN_STMT
  _35 = ss_43(D)->alarm;
  OS_EnqueueAlarm (cs_46, cd_47, _35, ad_45);
  # DEBUG BEGIN_STMT
  repeat_62 = 0;
  # DEBUG repeat => repeat_62

  <bb 13> :
  # repeat_36 = PHI <repeat_41(8), repeat_62(12)>
  # DEBUG repeat => repeat_36
  # DEBUG BEGIN_STMT
  _63 = repeat_36;
  return _63;

}


