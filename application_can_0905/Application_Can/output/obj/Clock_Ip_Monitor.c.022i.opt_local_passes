Clock_Ip_CMU_ClockFailInt ()
{
  uint32 IndexCmu;
  uint32 CmuIsrValue;
  uint32 CmuIerValue;
  struct Clock_Ip_ClockMonitorType * _1;
  long unsigned int _2;
  struct Clock_Ip_ClockMonitorType * _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.0_4;
  struct Clock_Ip_ClockMonitorType * _5;
  long unsigned int _6;
  <unnamed type> _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IndexCmu_11 = 0;
  # DEBUG IndexCmu => IndexCmu_11
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_apxCmu[IndexCmu_8];
  _2 ={v} _1->SR;
  CmuIsrValue_13 = _2 & 3;
  # DEBUG CmuIsrValue => CmuIsrValue_13
  # DEBUG BEGIN_STMT
  _3 = Clock_Ip_apxCmu[IndexCmu_8];
  _3->SR ={v} CmuIsrValue_13;
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.0_4 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.0_4 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_apxCmu[IndexCmu_8];
  _6 = _5->IER;
  CmuIerValue_15 = _6 & 3;
  # DEBUG CmuIerValue => CmuIerValue_15
  # DEBUG BEGIN_STMT
  CmuIsrValue_16 = CmuIsrValue_13 & CmuIerValue_15;
  # DEBUG CmuIsrValue => CmuIsrValue_16
  # DEBUG BEGIN_STMT
  if (CmuIsrValue_16 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_aeCmuNames[IndexCmu_8];
  Clock_Ip_ReportClockErrors (0, _7);

  <bb 6> :
  # DEBUG BEGIN_STMT
  IndexCmu_18 = IndexCmu_8 + 1;
  # DEBUG IndexCmu => IndexCmu_18

  <bb 7> :
  # IndexCmu_8 = PHI <IndexCmu_11(2), IndexCmu_18(6)>
  # DEBUG IndexCmu => IndexCmu_8
  # DEBUG BEGIN_STMT
  if (IndexCmu_8 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Clock_Ip_CMU_GetInterruptStatus (uint8 IndexCmu)
{
  uint32 CmuIsrValue;
  int _1;
  struct Clock_Ip_ClockMonitorType * _2;
  long unsigned int _3;
  uint32 _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) IndexCmu_4(D);
  _2 = Clock_Ip_apxCmu[_1];
  _3 ={v} _2->SR;
  CmuIsrValue_6 = _3 & 3;
  # DEBUG CmuIsrValue => CmuIsrValue_6
  # DEBUG BEGIN_STMT
  _7 = CmuIsrValue_6;
  return _7;

}


Clock_Ip_EnableCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config)
{
  struct Clock_Ip_ClockMonitorType * const CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_11(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][8];
  _3 = (int) _2;
  CmuInformation_12 = &Clock_Ip_axCmuInfo[_3];
  # DEBUG CmuInformation => CmuInformation_12
  # DEBUG BEGIN_STMT
  CmuFc_13 = CmuInformation_12->CmuInstance;
  # DEBUG CmuFc => CmuFc_13
  # DEBUG BEGIN_STMT
  _4 = Config_11(D)->Enable;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = CmuFc_13->GCR;
  _6 = _5 | 1;
  CmuFc_13->GCR = _6;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = CmuFc_13->GCR;
  _8 = _7 & 4294967294;
  CmuFc_13->GCR = _8;

  <bb 5> :
  return;

}


Clock_Ip_GetStatusCmuFcFceRefCntLfrefHfref (Clock_Ip_NameType Name)
{
  uint32 CmuIsrValue;
  uint32 CmuIerValue;
  Clock_Ip_CmuStatusType Status;
  const struct Clock_Ip_ClockMonitorType * CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  unsigned char _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  Clock_Ip_CmuStatusType _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[Name_11(D)][8];
  _2 = (int) _1;
  CmuInformation_12 = &Clock_Ip_axCmuInfo[_2];
  # DEBUG CmuInformation => CmuInformation_12
  # DEBUG BEGIN_STMT
  CmuFc_13 = CmuInformation_12->CmuInstance;
  # DEBUG CmuFc => CmuFc_13
  # DEBUG BEGIN_STMT
  Status_14 = 3;
  # DEBUG Status => Status_14
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 ={v} CmuFc_13->SR;
  CmuIsrValue_15 = _3 & 3;
  # DEBUG CmuIsrValue => CmuIsrValue_15
  # DEBUG BEGIN_STMT
  _4 = CmuFc_13->IER;
  CmuIerValue_16 = _4 & 3;
  # DEBUG CmuIerValue => CmuIerValue_16
  # DEBUG BEGIN_STMT
  CmuIsrValue_17 = CmuIsrValue_15 & CmuIerValue_16;
  # DEBUG CmuIsrValue => CmuIsrValue_17
  # DEBUG BEGIN_STMT
  _5 = CmuFc_13->GCR;
  _6 = _5 & 1;
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _7 = CmuIsrValue_17 & 2;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Status_20 = 1;
  # DEBUG Status => Status_20
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = CmuIsrValue_17 & 1;
  if (_8 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Status_19 = 2;
  # DEBUG Status => Status_19
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Status_18 = 0;
  # DEBUG Status => Status_18

  <bb 8> :
  # Status_9 = PHI <Status_14(2), Status_20(4), Status_19(6), Status_18(7)>
  # DEBUG Status => Status_9
  # DEBUG BEGIN_STMT
  _21 = Status_9;
  return _21;

}


Clock_Ip_ClearStatusCmuFcFceRefCntLfrefHfref (Clock_Ip_NameType Name)
{
  uint32 CmuIsrValue;
  struct Clock_Ip_ClockMonitorType * const CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  unsigned char _1;
  int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[Name_5(D)][8];
  _2 = (int) _1;
  CmuInformation_6 = &Clock_Ip_axCmuInfo[_2];
  # DEBUG CmuInformation => CmuInformation_6
  # DEBUG BEGIN_STMT
  CmuFc_7 = CmuInformation_6->CmuInstance;
  # DEBUG CmuFc => CmuFc_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 ={v} CmuFc_7->SR;
  CmuIsrValue_8 = _3 & 3;
  # DEBUG CmuIsrValue => CmuIsrValue_8
  # DEBUG BEGIN_STMT
  CmuFc_7->SR ={v} CmuIsrValue_8;
  return;

}


Clock_Ip_SetCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config, uint32 Index)
{
  uint32 ModuloValue;
  uint32 DividerResult;
  uint32 DivideBy;
  uint32 Cmp2;
  uint32 Cmp1;
  uint32 LfRef;
  uint32 HfRef;
  uint32 RefCount;
  uint32 BusClk;
  uint32 MonitoredClk;
  uint32 ReferenceClk;
  static uint32 Hash[4];
  struct Clock_Ip_ClockMonitorType * const CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  long unsigned int _4;
  unsigned char _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  <unnamed type> _11;
  long unsigned int _12;
  unsigned char _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  <unnamed type> _19;
  long unsigned int _20;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.2_21;
  <unnamed type> _22;
  unsigned char _23;
  int _24;
  long unsigned int _25;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.3_26;
  <unnamed type> _27;
  unsigned char _28;
  int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  long unsigned int _49;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_52(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][8];
  _3 = (int) _2;
  CmuInformation_53 = &Clock_Ip_axCmuInfo[_3];
  # DEBUG CmuInformation => CmuInformation_53
  # DEBUG BEGIN_STMT
  CmuFc_54 = CmuInformation_53->CmuInstance;
  # DEBUG CmuFc => CmuFc_54
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReferenceClk_55 = 0;
  # DEBUG ReferenceClk => ReferenceClk_55
  # DEBUG BEGIN_STMT
  MonitoredClk_56 = 0;
  # DEBUG MonitoredClk => MonitoredClk_56
  # DEBUG BEGIN_STMT
  BusClk_57 = 0;
  # DEBUG BusClk => BusClk_57
  # DEBUG BEGIN_STMT
  RefCount_58 = 0;
  # DEBUG RefCount => RefCount_58
  # DEBUG BEGIN_STMT
  HfRef_59 = 0;
  # DEBUG HfRef => HfRef_59
  # DEBUG BEGIN_STMT
  LfRef_60 = 0;
  # DEBUG LfRef => LfRef_60
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = Hash[Index_61(D)];
  _5 = Config_52(D)->Enable;
  _6 = (long unsigned int) _5;
  _7 = Config_52(D)->Interrupt;
  _8 = _6 ^ _7;
  _9 = Config_52(D)->MonitoredClockFrequency;
  _10 = _8 ^ _9;
  _11 = Config_52(D)->Name;
  _12 = _10 ^ _11;
  if (_4 != _12)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _13 = Config_52(D)->Enable;
  _14 = (long unsigned int) _13;
  _15 = Config_52(D)->Interrupt;
  _16 = _14 ^ _15;
  _17 = Config_52(D)->MonitoredClockFrequency;
  _18 = _16 ^ _17;
  _19 = Config_52(D)->Name;
  _20 = _18 ^ _19;
  Hash[Index_61(D)] = _20;
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.2_21 = Clock_Ip_pxConfig;
  _22 = CmuInformation_53->Reference;
  _23 = Clock_Ip_FreqIds[_22];
  _24 = (int) _23;
  _25 = Clock_Ip_pxConfig.2_21->ConfiguredFrequencies[_24].ConfiguredFrequencyValue;
  ReferenceClk_63 = _25 / 1000;
  # DEBUG ReferenceClk => ReferenceClk_63
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.3_26 = Clock_Ip_pxConfig;
  _27 = CmuInformation_53->Bus;
  _28 = Clock_Ip_FreqIds[_27];
  _29 = (int) _28;
  _30 = Clock_Ip_pxConfig.3_26->ConfiguredFrequencies[_29].ConfiguredFrequencyValue;
  BusClk_64 = _30 / 1000;
  # DEBUG BusClk => BusClk_64
  # DEBUG BEGIN_STMT
  _31 = Config_52(D)->MonitoredClockFrequency;
  MonitoredClk_65 = _31 / 1000;
  # DEBUG MonitoredClk => MonitoredClk_65
  # DEBUG BEGIN_STMT
  if (ReferenceClk_63 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  if (BusClk_64 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (MonitoredClk_65 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _32 = ReferenceClk_63 * 3;
  _33 = _32 / BusClk_64;
  Cmp1_66 = _33 + 1;
  # DEBUG Cmp1 => Cmp1_66
  # DEBUG BEGIN_STMT
  _34 = ReferenceClk_63 * 5;
  _35 = _34 / MonitoredClk_65;
  Cmp2_67 = _35 + 9;
  # DEBUG Cmp2 => Cmp2_67
  # DEBUG BEGIN_STMT
  RefCount_68 = MAX_EXPR <Cmp2_67, Cmp1_66>;
  # DEBUG RefCount => RefCount_68
  # DEBUG BEGIN_STMT
  _36 = MonitoredClk_65 * RefCount_68;
  HfRef_69 = _36 * 1011;
  # DEBUG HfRef => HfRef_69
  # DEBUG BEGIN_STMT
  DivideBy_70 = ReferenceClk_63 * 967;
  # DEBUG DivideBy => DivideBy_70
  # DEBUG BEGIN_STMT
  DividerResult_71 = HfRef_69 / DivideBy_70;
  # DEBUG DividerResult => DividerResult_71
  # DEBUG BEGIN_STMT
  _37 = DivideBy_70 * DividerResult_71;
  ModuloValue_72 = HfRef_69 - _37;
  # DEBUG ModuloValue => ModuloValue_72
  # DEBUG BEGIN_STMT
  _38 = DividerResult_71 * 10;
  _39 = ModuloValue_72 * 10;
  _40 = _39 / DivideBy_70;
  _41 = _38 + _40;
  HfRef_73 = _41 + 4;
  # DEBUG HfRef => HfRef_73
  # DEBUG BEGIN_STMT
  _42 = MonitoredClk_65 * RefCount_68;
  LfRef_74 = _42 * 989;
  # DEBUG LfRef => LfRef_74
  # DEBUG BEGIN_STMT
  DivideBy_75 = ReferenceClk_63 * 1033;
  # DEBUG DivideBy => DivideBy_75
  # DEBUG BEGIN_STMT
  DividerResult_76 = LfRef_74 / DivideBy_75;
  # DEBUG DividerResult => DividerResult_76
  # DEBUG BEGIN_STMT
  _43 = DivideBy_75 * DividerResult_76;
  ModuloValue_77 = LfRef_74 - _43;
  # DEBUG ModuloValue => ModuloValue_77
  # DEBUG BEGIN_STMT
  _44 = DividerResult_76 * 10;
  _45 = ModuloValue_77 * 10;
  _46 = _45 / DivideBy_75;
  _47 = _44 + _46;
  LfRef_78 = _47 + 4294967293;
  # DEBUG LfRef => LfRef_78
  # DEBUG BEGIN_STMT
  _48 = RefCount_68 * 10;
  CmuFc_54->RCCR = _48;
  # DEBUG BEGIN_STMT
  CmuFc_54->HTCR = HfRef_73;
  # DEBUG BEGIN_STMT
  CmuFc_54->LTCR = LfRef_78;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _49 = Config_52(D)->Interrupt;
  CmuFc_54->IER = _49;
  return;

}


Clock_Ip_ResetCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config)
{
  <unnamed type> _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_3(D)->Name;
  Clock_Ip_DisableCmuFcFceRefCntLfrefHfref (_1);
  return;

}


Clock_Ip_DisableCmuFcFceRefCntLfrefHfref (Clock_Ip_NameType Name)
{
  uint32 FrequencyCheckStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  struct Clock_Ip_ClockMonitorType * const CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  unsigned char _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int TimeoutTicks.1_6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[Name_20(D)][8];
  _2 = (int) _1;
  CmuInformation_21 = &Clock_Ip_axCmuInfo[_2];
  # DEBUG CmuInformation => CmuInformation_21
  # DEBUG BEGIN_STMT
  CmuFc_22 = CmuInformation_21->CmuInstance;
  # DEBUG CmuFc => CmuFc_22
  # DEBUG BEGIN_STMT
  TimeoutOccurred_23 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_23
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01 ();
  # DEBUG BEGIN_STMT
  _3 = CmuFc_22->GCR;
  _4 = _3 & 1;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 ={v} CmuFc_22->SR;
  FrequencyCheckStatus_28 = _5 & 16;
  # DEBUG FrequencyCheckStatus => FrequencyCheckStatus_28
  # DEBUG BEGIN_STMT
  TimeoutTicks.1_6 = TimeoutTicks;
  TimeoutOccurred_30 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_6);
  # DEBUG TimeoutOccurred => TimeoutOccurred_30
  # DEBUG BEGIN_STMT
  if (FrequencyCheckStatus_28 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (TimeoutOccurred_30 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_30 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ReportClockErrors (1, Name_20(D));
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _7 = CmuFc_22->GCR;
  _8 = _7 & 4294967294;
  CmuFc_22->GCR = _8;
  # DEBUG BEGIN_STMT
  _9 = CmuFc_22->IER;
  _10 = _9 & 4294967280;
  CmuFc_22->IER = _10;
  # DEBUG BEGIN_STMT
  _11 ={v} CmuFc_22->SR;
  _12 = _11 | 3;
  CmuFc_22->SR ={v} _12;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _13 = CmuFc_22->IER;
  _14 = _13 & 4294967280;
  CmuFc_22->IER = _14;
  # DEBUG BEGIN_STMT
  _15 ={v} CmuFc_22->SR;
  _16 = _15 | 3;
  CmuFc_22->SR ={v} _16;

  <bb 10> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01 ();
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Clock_Ip_ClockMonitorEmpty_GetStatus (Clock_Ip_NameType Name)
{
  Clock_Ip_CmuStatusType _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = 3;
  return _1;

}


Clock_Ip_ClockMonitorEmpty_ClearStatus (Clock_Ip_NameType Name)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_ClockMonitorEmpty_Disable (Clock_Ip_NameType Name)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_ClockMonitorEmpty_Set (const struct Clock_Ip_CmuConfigType * Config, uint32 Index)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_ClockMonitorEmpty (const struct Clock_Ip_CmuConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


