
Marking local functions:


Marking externally visible functions: OS_PreemptIsrExecTiming


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_GetTimeUsed/3 (OS_GetTimeUsed) @06ba0c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_PreemptIsrExecTiming/0 
  Calls: 
OS_executionTimer/2 (OS_executionTimer) @06c2a798
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_PreemptIsrExecTiming/0 (read)OS_PreemptIsrExecTiming/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_kernelData/1 (OS_kernelData) @06c2a750
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_PreemptIsrExecTiming/0 (addr)OS_PreemptIsrExecTiming/0 (read)OS_PreemptIsrExecTiming/0 (read)OS_PreemptIsrExecTiming/0 (read)OS_PreemptIsrExecTiming/0 (read)OS_PreemptIsrExecTiming/0 (read)OS_PreemptIsrExecTiming/0 (write)OS_PreemptIsrExecTiming/0 (write)OS_PreemptIsrExecTiming/0 (write)OS_PreemptIsrExecTiming/0 (write)
  Availability: not_available
  Varpool flags:
OS_PreemptIsrExecTiming/0 (OS_PreemptIsrExecTiming) @06ba0a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_kernelData/1 (addr)OS_kernelData/1 (read)OS_executionTimer/2 (read)OS_executionTimer/2 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_GetTimeUsed/3 
   Indirect call
__attribute__((target ("general-regs-only")))
OS_PreemptIsrExecTiming (struct os_accountingsave_t * save)
{
  os_tick_t used;
  struct os_kerneldata_t * const kernel_data;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = OS_kernelData.accounting.inFunction;
  if (_1 == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  save->inFunction = 255;
  # DEBUG BEGIN_STMT
  save->etType = 0;
  # DEBUG BEGIN_STMT
  save->etUsed = 0;
  # DEBUG BEGIN_STMT
  save->etLimit = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = OS_executionTimer[0];
  _3 = _2->driver;
  _4 = _3->hwtStop;
  _5 = OS_executionTimer[0];
  _4 (_5);
  # DEBUG BEGIN_STMT
  used = OS_GetTimeUsed ();
  # DEBUG BEGIN_STMT
  _6 = OS_kernelData.accounting.etUsed;
  _7 = used + _6;
  save->etUsed = _7;
  # DEBUG BEGIN_STMT
  _8 = OS_kernelData.accounting.etLimit;
  save->etLimit = _8;
  # DEBUG BEGIN_STMT
  _9 = OS_kernelData.accounting.inFunction;
  save->inFunction = _9;
  # DEBUG BEGIN_STMT
  _10 = OS_kernelData.accounting.etType;
  save->etType = _10;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.inFunction = 255;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etType = 0;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etUsed = 0;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etLimit = 0;

  <bb 5> :
  return;

}


