CryIf_CertificateVerify (uint32 cryIfKeyId, uint32 verifyCryIfKeyId, Crypto_VerifyResultType * verifyPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6181;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.22_1 = CryIf_Initialized;
  if (CryIf_Initialized.22_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 17, 0);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 17, 3);
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (verifyCryIfKeyId > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 17, 3);
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (verifyPtr == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 17, 2);
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = CryIf_CertificateVerifyJumpTable[cryIfKeyId];
  _3 = CryIf_CertificateVerifyJumpTable[verifyCryIfKeyId];
  if (_2 != _3)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 17, 3);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _4 = CryIf_CertificateVerifyJumpTable[cryIfKeyId];
  _5 = CryIf_Keys[cryIfKeyId];
  _6 = CryIf_Keys[verifyCryIfKeyId];
  RetVal = _4 (_5, _6, verifyPtr);

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.6181 = RetVal;
  return D.6181;

}


CryIf_CertificateParse (uint32 cryIfKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6164;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.21_1 = CryIf_Initialized;
  if (CryIf_Initialized.21_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 12, 0);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 12, 3);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = CryIf_CertificateParseJumpTable[cryIfKeyId];
  _3 = CryIf_Keys[cryIfKeyId];
  RetVal = _2 (_3);

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.6164 = RetVal;
  return D.6164;

}


CryIf_KeyExchangeCalcSecret (uint32 cryIfKeyId, const uint8 * partnerPublicValuePtr, uint32 partnerPublicValueLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6156;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.20_1 = CryIf_Initialized;
  if (CryIf_Initialized.20_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 11, 0);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 11, 3);
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (partnerPublicValuePtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 11, 2);
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (partnerPublicValueLength == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 11, 4);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = CryIf_KeyExchangeCalcSecretJumpTable[cryIfKeyId];
  _3 = CryIf_Keys[cryIfKeyId];
  RetVal = _2 (_3, partnerPublicValuePtr, partnerPublicValueLength);

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.6156 = RetVal;
  return D.6156;

}


CryIf_KeyExchangeCalcPubVal (uint32 cryIfKeyId, uint8 * publicValuePtr, uint32 * publicValueLengthPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6142;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.19_1 = CryIf_Initialized;
  if (CryIf_Initialized.19_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 10, 0);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 10, 3);
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (publicValuePtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 10, 2);
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (publicValueLengthPtr == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 10, 2);
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = *publicValueLengthPtr;
  if (_2 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 10, 4);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _3 = CryIf_KeyExchangeCalcPubValJumpTable[cryIfKeyId];
  _4 = CryIf_Keys[cryIfKeyId];
  RetVal = _3 (_4, publicValuePtr, publicValueLengthPtr);

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.6142 = RetVal;
  return D.6142;

}


CryIf_KeyDerive (uint32 cryIfKeyId, uint32 targetCryIfKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6125;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.18_1 = CryIf_Initialized;
  if (CryIf_Initialized.18_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 9, 0);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 9, 3);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (targetCryIfKeyId > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 9, 3);
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = CryIf_KeyDeriveJumpTable[cryIfKeyId];
  _3 = CryIf_KeyDeriveJumpTable[targetCryIfKeyId];
  if (_2 == _3)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _4 = CryIf_KeyDeriveJumpTable[cryIfKeyId];
  _5 = CryIf_Keys[cryIfKeyId];
  _6 = CryIf_Keys[targetCryIfKeyId];
  RetVal = _4 (_5, _6);

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.6125 = RetVal;
  return D.6125;

}


CryIf_KeyGenerate (uint32 cryIfKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6112;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.17_1 = CryIf_Initialized;
  if (CryIf_Initialized.17_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 8, 0);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 8, 3);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = CryIf_KeyGenerateJumpTable[cryIfKeyId];
  _3 = CryIf_Keys[cryIfKeyId];
  RetVal = _2 (_3);

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.6112 = RetVal;
  return D.6112;

}


CryIf_RandomSeed (uint32 cryIfKeyId, const uint8 * seedPtr, uint32 seedLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6104;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.16_1 = CryIf_Initialized;
  if (CryIf_Initialized.16_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 7, 0);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 7, 3);
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (seedPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 7, 2);
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (seedLength == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 7, 4);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = CryIf_RandomSeedJumpTable[cryIfKeyId];
  _3 = CryIf_Keys[cryIfKeyId];
  RetVal = _2 (_3, seedPtr, seedLength);

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.6104 = RetVal;
  return D.6104;

}


CryIf_KeyCopy (uint32 cryIfKeyId, uint32 targetCryIfKeyId)
{
  uint32 i;
  uint32 KeyElementTargetLength;
  uint32 KeyElementLength;
  uint8 KeyElementBuffer[1];
  uint32 KeyElementIdsLength;
  uint32 KeyElementIds[2];
  Std_ReturnType RetVal;
  Std_ReturnType D.6090;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.9_1 = CryIf_Initialized;
  if (CryIf_Initialized.9_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 16, 0);
  goto <bb 25>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 16, 3);
  goto <bb 25>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (targetCryIfKeyId > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 16, 3);
  goto <bb 25>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  KeyElementIds = {};
  # DEBUG BEGIN_STMT
  KeyElementIdsLength = 2;
  # DEBUG BEGIN_STMT
  KeyElementBuffer = "";
  # DEBUG BEGIN_STMT
  KeyElementLength = 0;
  # DEBUG BEGIN_STMT
  KeyElementTargetLength = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  # DEBUG BEGIN_STMT
  _2 = CryIf_KeyCopyJumpTable[cryIfKeyId];
  _3 = CryIf_KeyCopyJumpTable[targetCryIfKeyId];
  if (_2 == _3)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _4 = CryIf_KeyCopyJumpTable[cryIfKeyId];
  _5 = CryIf_Keys[cryIfKeyId];
  _6 = CryIf_Keys[targetCryIfKeyId];
  RetVal = _4 (_5, _6);
  goto <bb 22>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _7 = CryIf_KeyElementIdsGetJumpTable[cryIfKeyId];
  _8 = CryIf_Keys[cryIfKeyId];
  RetVal = _7 (_8, &KeyElementIds[0], &KeyElementIdsLength);
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 16>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  KeyElementLength = 1;
  # DEBUG BEGIN_STMT
  _9 = CryIf_KeyElementGetJumpTable[cryIfKeyId];
  _10 = CryIf_Keys[cryIfKeyId];
  _11 = KeyElementIds[i];
  RetVal = _9 (_10, _11, &KeyElementBuffer, &KeyElementLength);
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  KeyElementLength.10_12 = KeyElementLength;
  KeyElementTargetLength = KeyElementLength.10_12;
  # DEBUG BEGIN_STMT
  _13 = CryIf_KeyElementGetJumpTable[targetCryIfKeyId];
  _14 = CryIf_Keys[targetCryIfKeyId];
  _15 = KeyElementIds[i];
  RetVal = _13 (_14, _15, &KeyElementBuffer, &KeyElementTargetLength);
  # DEBUG BEGIN_STMT
  KeyElementTargetLength.11_16 = KeyElementTargetLength;
  KeyElementLength.12_17 = KeyElementLength;
  if (KeyElementTargetLength.11_16 != KeyElementLength.12_17)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  if (RetVal == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  RetVal = 10;

  <bb 15> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 16> :
  # DEBUG BEGIN_STMT
  KeyElementIdsLength.13_18 = KeyElementIdsLength;
  if (i < KeyElementIdsLength.13_18)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  if (RetVal == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  KeyElementLength = 1;
  # DEBUG BEGIN_STMT
  _19 = CryIf_KeyElementGetJumpTable[cryIfKeyId];
  _20 = CryIf_Keys[cryIfKeyId];
  _21 = KeyElementIds[i];
  _19 (_20, _21, &KeyElementBuffer, &KeyElementLength);
  # DEBUG BEGIN_STMT
  _22 = CryIf_KeyElementSetJumpTable[targetCryIfKeyId];
  _23 = CryIf_Keys[targetCryIfKeyId];
  _24 = KeyElementIds[i];
  KeyElementLength.14_25 = KeyElementLength;
  RetVal = _22 (_23, _24, &KeyElementBuffer, KeyElementLength.14_25);
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 20> :
  # DEBUG BEGIN_STMT
  KeyElementIdsLength.15_26 = KeyElementIdsLength;
  if (i < KeyElementIdsLength.15_26)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  if (RetVal == 0)
    goto <bb 19>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  if (RetVal == 10)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 15, 5);

  <bb 24> :
  KeyElementIds = {CLOBBER};
  KeyElementIdsLength = {CLOBBER};
  KeyElementBuffer = {CLOBBER};
  KeyElementLength = {CLOBBER};
  KeyElementTargetLength = {CLOBBER};

  <bb 25> :
  # DEBUG BEGIN_STMT
  D.6090 = RetVal;
  return D.6090;

}


CryIf_KeyElementCopy (uint32 cryIfKeyId, uint32 keyElementId, uint32 targetCryIfKeyId, uint32 targetKeyElementId)
{
  uint32 KeyElementLength;
  uint8 KeyElementBuffer[1];
  Std_ReturnType RetVal;
  Std_ReturnType D.6065;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  KeyElementBuffer = "";
  # DEBUG BEGIN_STMT
  KeyElementLength = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.7_1 = CryIf_Initialized;
  if (CryIf_Initialized.7_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 15, 0);
  goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 15, 3);
  goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (targetCryIfKeyId > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 15, 3);
  goto <bb 14>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = CryIf_KeyElementCopyJumpTable[cryIfKeyId];
  _3 = CryIf_KeyElementCopyJumpTable[targetCryIfKeyId];
  if (_2 == _3)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _4 = CryIf_KeyElementCopyJumpTable[cryIfKeyId];
  _5 = CryIf_Keys[cryIfKeyId];
  _6 = CryIf_Keys[targetCryIfKeyId];
  RetVal = _4 (_5, keyElementId, _6, targetKeyElementId);
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _7 = CryIf_KeyElementGetJumpTable[cryIfKeyId];
  _8 = CryIf_Keys[cryIfKeyId];
  RetVal = _7 (_8, keyElementId, &KeyElementBuffer, &KeyElementLength);
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _9 = CryIf_KeyElementSetJumpTable[targetCryIfKeyId];
  _10 = CryIf_Keys[targetCryIfKeyId];
  KeyElementLength.8_11 = KeyElementLength;
  RetVal = _9 (_10, targetKeyElementId, &KeyElementBuffer, KeyElementLength.8_11);

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (RetVal == 10)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 15, 5);

  <bb 14> :
  # DEBUG BEGIN_STMT
  D.6065 = RetVal;
  KeyElementBuffer = {CLOBBER};
  KeyElementLength = {CLOBBER};
  return D.6065;

}


CryIf_KeyElementGet (uint32 cryIfKeyId, uint32 keyElementId, uint8 * resultPtr, uint32 * resultLengthPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6047;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.6_1 = CryIf_Initialized;
  if (CryIf_Initialized.6_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 6, 0);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 6, 3);
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (resultPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 6, 2);
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (resultLengthPtr == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 6, 2);
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = *resultLengthPtr;
  if (_2 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 6, 4);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _3 = CryIf_KeyElementGetJumpTable[cryIfKeyId];
  _4 = CryIf_Keys[cryIfKeyId];
  RetVal = _3 (_4, keyElementId, resultPtr, resultLengthPtr);

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.6047 = RetVal;
  return D.6047;

}


CryIf_KeySetValid (uint32 cryIfKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6030;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.5_1 = CryIf_Initialized;
  if (CryIf_Initialized.5_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 5, 0);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 5, 3);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = CryIf_KeySetValidJumpTable[cryIfKeyId];
  _3 = CryIf_Keys[cryIfKeyId];
  RetVal = _2 (_3);

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.6030 = RetVal;
  return D.6030;

}


CryIf_KeyElementSet (uint32 cryIfKeyId, uint32 keyElementId, const uint8 * keyPtr, uint32 keyLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6022;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.4_1 = CryIf_Initialized;
  if (CryIf_Initialized.4_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 4, 0);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 4, 3);
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (keyPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 4, 2);
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (keyLength == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 4, 4);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = CryIf_KeyElementSetJumpTable[cryIfKeyId];
  _3 = CryIf_Keys[cryIfKeyId];
  RetVal = _2 (_3, keyElementId, keyPtr, keyLength);

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.6022 = RetVal;
  return D.6022;

}


CryIf_CallbackNotification (const struct Crypto_JobType * job, Std_ReturnType result)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  CryIf_Initialized.3_1 = CryIf_Initialized;
  if (CryIf_Initialized.3_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 13, 0);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (job == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 13, 2);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Csm_CallbackNotification (job, result);

  <bb 7> :
  return;

}


CryIf_CancelJob (uint32 channelId, struct Crypto_JobType * job)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6002;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.2_1 = CryIf_Initialized;
  if (CryIf_Initialized.2_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 13, 0);
  goto <bb 16>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (job == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 3, 2);
  goto <bb 16>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (channelId != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 3, 3);
  goto <bb 16>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = job->jobPrimitiveInfo;
  _3 = _2->cryIfKeyId;
  _4 = _3 + 4294967294;
  if (_4 > 4294967292)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _5 = job->jobPrimitiveInfo;
  _6 = _5->cryIfKeyId;
  if (_6 != 4294967295)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  _7 = job->jobPrimitiveInfo;
  _8 = _7->primitiveInfo;
  _9 = _8->service;
  if (_9 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  _10 = job->jobPrimitiveInfo;
  _11 = _10->primitiveInfo;
  _12 = _11->service;
  if (_12 != 10)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _13 = job->jobPrimitiveInfo;
  _14 = _13->primitiveInfo;
  _15 = _14->service;
  if (_15 != 9)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _16 = job->jobPrimitiveInfo;
  _17 = _16->cryIfKeyId;
  _18 = CryIf_Keys[_17];
  job->cryptoKeyId = _18;
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  job->cryptoKeyId = 4294967295;

  <bb 15> :
  # DEBUG BEGIN_STMT
  _19 = CryIf_CancelJobJumpTable[channelId];
  _20 = CryIf_Channels[channelId];
  RetVal = _19 (_20, job);

  <bb 16> :
  # DEBUG BEGIN_STMT
  D.6002 = RetVal;
  return D.6002;

}


CryIf_ProcessJob (uint32 channelId, struct Crypto_JobType * job)
{
  boolean cryIfKeyIdOk;
  Std_ReturnType RetVal;
  Std_ReturnType D.5983;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  cryIfKeyIdOk = 0;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.1_1 = CryIf_Initialized;
  if (CryIf_Initialized.1_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 3, 0);
  goto <bb 25>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (job == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 3, 2);
  goto <bb 25>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (channelId != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 3, 3);
  goto <bb 25>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = job->jobPrimitiveInfo;
  _3 = _2->primitiveInfo;
  _4 = _3->service;
  _5 = _4 + 253;
  if (_5 <= 3)
    goto <bb 14>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _6 = job->jobPrimitiveInfo;
  _7 = _6->primitiveInfo;
  _8 = _7->service;
  if (_8 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _9 = job->jobPrimitiveInfo;
  _10 = _9->primitiveInfo;
  _11 = _10->service;
  if (_11 == 2)
    goto <bb 14>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _12 = job->jobPrimitiveInfo;
  _13 = _12->primitiveInfo;
  _14 = _13->service;
  if (_14 == 7)
    goto <bb 14>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _15 = job->jobPrimitiveInfo;
  _16 = _15->primitiveInfo;
  _17 = _16->service;
  if (_17 == 8)
    goto <bb 14>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _18 = job->jobPrimitiveInfo;
  _19 = _18->primitiveInfo;
  _20 = _19->service;
  if (_20 == 11)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _21 = job->jobPrimitiveInfo;
  _22 = _21->cryIfKeyId;
  if (_22 <= 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  cryIfKeyIdOk = 1;
  # DEBUG BEGIN_STMT
  _23 = job->jobPrimitiveInfo;
  _24 = _23->cryIfKeyId;
  _25 = CryIf_Keys[_24];
  job->cryptoKeyId = _25;

  <bb 16> :
  # DEBUG BEGIN_STMT
  _26 = job->jobPrimitiveInfo;
  _27 = _26->primitiveInfo;
  _28 = _27->service;
  if (_28 == 0)
    goto <bb 19>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _29 = job->jobPrimitiveInfo;
  _30 = _29->primitiveInfo;
  _31 = _30->service;
  if (_31 == 10)
    goto <bb 19>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _32 = job->jobPrimitiveInfo;
  _33 = _32->primitiveInfo;
  _34 = _33->service;
  if (_34 == 9)
    goto <bb 19>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 19> :
  _35 = job->jobPrimitiveInfo;
  _36 = _35->cryIfKeyId;
  _37 = _36 + 4294967294;
  if (_37 > 4294967292)
    goto <bb 20>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  cryIfKeyIdOk = 1;
  # DEBUG BEGIN_STMT
  _38 = job->jobPrimitiveInfo;
  _39 = _38->cryIfKeyId;
  if (_39 != 4294967295)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _40 = job->jobPrimitiveInfo;
  _41 = _40->cryIfKeyId;
  _42 = CryIf_Keys[_41];
  job->cryptoKeyId = _42;
  goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  job->cryptoKeyId = 4294967295;

  <bb 23> :
  # DEBUG BEGIN_STMT
  if (cryIfKeyIdOk == 1)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  _43 = CryIf_ProcessJobJumpTable[channelId];
  _44 = CryIf_Channels[channelId];
  RetVal = _43 (_44, job);

  <bb 25> :
  # DEBUG BEGIN_STMT
  D.5983 = RetVal;
  return D.5983;

}


CryIf_Init ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  CryIf_Initialized = 1;
  # DEBUG BEGIN_STMT
  CryIf_Initialized.0_1 = CryIf_Initialized;
  if (CryIf_Initialized.0_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (112, 0, 0, 1);

  <bb 4> :
  return;

}


