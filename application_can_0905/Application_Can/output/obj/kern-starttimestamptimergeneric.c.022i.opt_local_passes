__attribute__((target ("general-regs-only")))
OS_StartTimeStampTimerGeneric ()
{
  const os_coreid_t myCoreId;
  const struct os_hwt_t * OS_timeStampTimer.0_1;
  const struct os_hwt_t * OS_timeStampTimer.1_2;
  const struct os_hwtdrv_t * _3;
  os_boolean_t (*<T52b>) (const struct os_hwt_t *, os_timervalue_t, os_tick_t) _4;
  const struct os_hwt_t * OS_timeStampTimer.2_5;
  unsigned int OS_lastTimeStampTime.3_6;
  const struct os_hwt_t * OS_timeStampTimer.4_7;
  unsigned int _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  myCoreId_10 = 0;
  # DEBUG myCoreId => myCoreId_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_timeStampTimer.0_1 = OS_timeStampTimer;
  if (OS_timeStampTimer.0_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  OS_timeStampTimer.1_2 = OS_timeStampTimer;
  _3 = OS_timeStampTimer.1_2->driver;
  _4 = _3->hwtStart;
  OS_timeStampTimer.2_5 = OS_timeStampTimer;
  OS_lastTimeStampTime.3_6 = OS_lastTimeStampTime;
  OS_timeStampTimer.4_7 = OS_timeStampTimer;
  _8 = OS_timeStampTimer.4_7->maxDelta;
  _4 (OS_timeStampTimer.2_5, OS_lastTimeStampTime.3_6, _8);

  <bb 4> :
  return;

}


