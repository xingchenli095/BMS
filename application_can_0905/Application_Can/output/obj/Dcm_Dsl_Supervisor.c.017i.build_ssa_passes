Dcm_Dsl_Supervisor_RxPermissionTYPE1PeriodicRequest (Dcm_BufferUserType RxConnectionId)
{
  Dcm_ReceptionPermissionType ReceptionPermission;
  Dcm_RequestTypeType AcceptAsRequestType;
  Dcm_RequestTypeType D.8164;

  <bb 2> :
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 17;
  # DEBUG BEGIN_STMT
  ReceptionPermission = Dcm_Dsl_Supervisor_PrearbitrationTYPE1Periodic (RxConnectionId);
  # DEBUG BEGIN_STMT
  _1 = (int) ReceptionPermission;
  switch (_1) <default: <L5> [INV], case 0: <L1> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 14;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 17;
  # DEBUG BEGIN_STMT

  <bb 5> :
<L5>:
  # DEBUG BEGIN_STMT
  D.8164 = AcceptAsRequestType;
  return D.8164;

}


Dcm_Dsl_Supervisor_RxPermissionPostBootRequest (Dcm_RequestTypeType InitialRequestType)
{
  Dcm_ReceptionPermissionType ReceptionPermission;
  Dcm_RequestTypeType AcceptAsRequestType;
  Dcm_RequestTypeType D.8157;

  <bb 2> :
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 17;
  # DEBUG BEGIN_STMT
  ReceptionPermission = Dcm_Dsl_Supervisor_PrearbitrationPostBootRequest ();
  # DEBUG BEGIN_STMT
  _1 = (int) ReceptionPermission;
  switch (_1) <default: <L5> [INV], case 0: <L1> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = InitialRequestType;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 17;
  # DEBUG BEGIN_STMT

  <bb 5> :
<L5>:
  # DEBUG BEGIN_STMT
  D.8157 = AcceptAsRequestType;
  return D.8157;

}


Dcm_Dsl_Supervisor_RxPermissionTYPE1ROERequest (Dcm_BufferUserType RxConnectionId, Dcm_RequestTypeType InitialRequestType)
{
  Dcm_ReceptionPermissionType ReceptionPermission;
  Dcm_RequestTypeType AcceptAsRequestType;
  Dcm_RequestTypeType D.8151;

  <bb 2> :
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 17;
  # DEBUG BEGIN_STMT
  ReceptionPermission = Dcm_Dsl_Supervisor_PrearbitrationTYPE1ROE (RxConnectionId);
  # DEBUG BEGIN_STMT
  _1 = (int) ReceptionPermission;
  switch (_1) <default: <L6> [INV], case 0: <L1> [INV], case 1: <L0> [INV], case 5: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = InitialRequestType;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 17;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 16;
  # DEBUG BEGIN_STMT

  <bb 6> :
<L6>:
  # DEBUG BEGIN_STMT
  D.8151 = AcceptAsRequestType;
  return D.8151;

}


Dcm_Dsl_Supervisor_RxPermissionNormalRequest (Dcm_BufferUserType RxConnectionId, PduLengthType Length, Dcm_RequestTypeType InitialRequestType)
{
  Dcm_ReceptionPermissionType ReceptionPermission;
  Dcm_RequestTypeType AcceptAsRequestType;
  Dcm_RequestTypeType D.8121;

  <bb 2> :
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 17;
  # DEBUG BEGIN_STMT
  ReceptionPermission = Dcm_Dsl_Supervisor_PrearbitrationNormalRequest (RxConnectionId, Length);
  # DEBUG BEGIN_STMT
  _1 = (int) ReceptionPermission;
  switch (_1) <default: <L7> [INV], case 0: <L3> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = InitialRequestType;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 7;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 6;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 17;
  # DEBUG BEGIN_STMT

  <bb 7> :
<L7>:
  # DEBUG BEGIN_STMT
  D.8121 = AcceptAsRequestType;
  return D.8121;

}


Dcm_Dsl_Supervisor_RequestIsPotentialConcurrentTesterPresent (PduIdType RxPduId, PduLengthType Length)
{
  boolean IsPotentialTesterPresent;
  boolean D.8149;

  <bb 2> :
  # DEBUG BEGIN_STMT
  IsPotentialTesterPresent = 0;
  # DEBUG BEGIN_STMT
  if (Length == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) RxPduId;
  _2 = Dcm_RxPduIdConfig[_1].AddressingType;
  if (_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  IsPotentialTesterPresent = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.8149 = IsPotentialTesterPresent;
  return D.8149;

}


Dcm_Dsl_Supervisor_ResetDiagnosticSession ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Dcm_ResetDiagnosticSession.0_1 = Dcm_ResetDiagnosticSession;
  if (Dcm_ResetDiagnosticSession.0_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dcm_ResetDiagnosticSession = 0;
  # DEBUG BEGIN_STMT
  SchM_Exit_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Dcm_Dsl_DiagnosticSessionHandler_ResetToDefaultSession (1);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();

  <bb 5> :
  return;

}


Dcm_Dsl_Supervisor_ProcessTYPE1Request (Dcm_BufferUserType RxConnectionId, Dcm_RequestTypeType RequestType, struct Dcm_BufferType RequestBuffer)
{
  Dcm_TimerValueType ServerAdjust;
  Dcm_TimerValueType P2MaxTime;
  Dcm_TimerValueType NRCTimeout;
  Dcm_ReceptionArbitrationResultType ReceptionArbitrationResult;
  Dcm_ProtocolIndexType ProcessingProtocolIndex;
  struct Dcm_RxPduIdInfoType RxPduIdInfo;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ProcessingProtocolIndex = Dcm_Dsl_Supervisor_GetProcessingProtocolIndexForTYPE1Request (RxConnectionId, RequestType);
  # DEBUG BEGIN_STMT
  ReceptionArbitrationResult = Dcm_Dsl_Supervisor_RearbitrationTYPE1Request (RxConnectionId, RequestType);
  # DEBUG BEGIN_STMT
  Dcm_Dsl_RxConnectionGetRxPduIdInformation (RxConnectionId, &RxPduIdInfo);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) ReceptionArbitrationResult;
  switch (_1) <default: <L23> [INV], case 0 ... 2: <L0> [INV], case 3 ... 4: <L7> [INV], case 6: <L20> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _2 = RequestType + 255;
  if (_2 <= 1)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (RequestType == 8)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (RequestType == 9)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_ReceptionEnd (RxConnectionId);

  <bb 7> :
  # DEBUG BEGIN_STMT
  _3 = RequestBuffer.BufferId;
  Dcm_Dsl_BufferFree (14, _3);
  # DEBUG BEGIN_STMT
  goto <bb 20>; [INV]

  <bb 8> :
<L7>:
  # DEBUG BEGIN_STMT
  if (RequestType != 14)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  if (RequestType != 10)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  if (RequestType != 11)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  NRCTimeout = 0;
  # DEBUG BEGIN_STMT
  P2MaxTime = Dcm_Dsl_DiagnosticSessionHandler_GetP2MaxTime (ProcessingProtocolIndex);
  # DEBUG BEGIN_STMT
  _4 = (int) ProcessingProtocolIndex;
  _5 = Dcm_ProtocolConfig[_4].P2ServerAdjustTime;
  ServerAdjust = (Dcm_TimerValueType) _5;
  # DEBUG BEGIN_STMT
  if (P2MaxTime > ServerAdjust)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  NRCTimeout = P2MaxTime - ServerAdjust;

  <bb 13> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_ProcessingBegin (RxConnectionId, 1);
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_MainConnectionHandling_InitiateNRC (RxConnectionId, RequestBuffer, 33, NRCTimeout);
  goto <bb 18>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _6 = RequestType + 255;
  if (_6 <= 1)
    goto <bb 17>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  if (RequestType == 8)
    goto <bb 17>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  if (RequestType == 9)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_ReceptionEnd (RxConnectionId);

  <bb 18> :
  # DEBUG BEGIN_STMT
  _7 = RequestBuffer.BufferId;
  Dcm_Dsl_BufferFree (14, _7);
  # DEBUG BEGIN_STMT
  goto <bb 20>; [INV]

  <bb 19> :
<L20>:
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_EnqueueTYPE1RequestAsPresumptive (RxConnectionId, ProcessingProtocolIndex, RequestType, RequestBuffer);
  # DEBUG BEGIN_STMT

  <bb 20> :
<L23>:
  RxPduIdInfo = {CLOBBER};
  return;

}


Dcm_Dsl_Supervisor_EnqueueTYPE1RequestAsPresumptive (Dcm_BufferUserType RxConnectionId, Dcm_ProtocolIndexType ProcessingProtocolIndex, Dcm_RequestTypeType RequestType, struct Dcm_BufferType RequestBuffer)
{
  Dcm_TimerValueType ServerAdjust;
  Dcm_TimerValueType P2MaxTime;
  Dcm_TimerValueType NRCTimeout;
  boolean PreemptionNecessary;
  const Dcm_ProtocolGroupType ProcessingProtocolGroup;
  const Dcm_SesCtrlType CurrentSession;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CurrentSession = Dcm_Dsl_DiagnosticSessionHandler_GetCurrentSession ();
  # DEBUG BEGIN_STMT
  ProcessingProtocolGroup = Dcm_Dsl_Supervisor_ProtocolHandling_GetProtocolGroupTypeForProtocol (ProcessingProtocolIndex);
  # DEBUG BEGIN_STMT
  PreemptionNecessary = 0;
  # DEBUG BEGIN_STMT
  NRCTimeout = 0;
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProtocolHandling_CancelTYPE1PresumptiveProtocolsOnSameStack (ProcessingProtocolIndex);
  # DEBUG BEGIN_STMT
  PreemptionNecessary = Dcm_Dsl_Supervisor_ProtocolHandling_PreemptionNecessaryOnStack (ProcessingProtocolIndex);
  # DEBUG BEGIN_STMT
  if (PreemptionNecessary == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProtocolHandling_TerminateCurrentProtocolOnSameStack (ProcessingProtocolIndex);

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = RequestType + 246;
  if (_1 > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProtocolHandling_CancelOngoingReceptionsOnLowerPriorityProtocolsOfSameStack (RxConnectionId);

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = RequestType + 246;
  if (_2 > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  if (RequestType != 14)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProtocolHandling_CancelROEProcessingOnAllProtocols ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ProcessingProtocolGroup == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (CurrentSession != 1)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProtocolHandling_CancelUDSProtocolsInNonDefaultSession ();
  # DEBUG BEGIN_STMT
  if (PreemptionNecessary == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_EnqueueResetOfDiagnosticSession ();

  <bb 13> :
  # DEBUG BEGIN_STMT
  _3 = RequestType + 255;
  if (_3 <= 1)
    goto <bb 16>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  if (RequestType == 8)
    goto <bb 16>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  if (RequestType == 9)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_ProcessingBegin (RxConnectionId, 0);

  <bb 17> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProtocolHandling_EnqueueAsPresumptive (ProcessingProtocolIndex, RxConnectionId, RequestType, RequestBuffer, PreemptionNecessary);
  # DEBUG BEGIN_STMT
  _4 = RequestType + 255;
  if (_4 <= 1)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  P2MaxTime = Dcm_Dsl_DiagnosticSessionHandler_GetP2MaxTime (ProcessingProtocolIndex);
  # DEBUG BEGIN_STMT
  _5 = (int) ProcessingProtocolIndex;
  _6 = Dcm_ProtocolConfig[_5].P2ServerAdjustTime;
  ServerAdjust = (Dcm_TimerValueType) _6;
  # DEBUG BEGIN_STMT
  if (P2MaxTime > ServerAdjust)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  NRCTimeout = P2MaxTime - ServerAdjust;

  <bb 20> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_DiagnosticSessionHandler_AllocateP2Timer (14, ProcessingProtocolIndex);
  # DEBUG BEGIN_STMT
  Dcm_Dsl_DiagnosticSessionHandler_StartP2Timer (14, ProcessingProtocolIndex, NRCTimeout);

  <bb 21> :
  return;

}


Dcm_Dsl_Supervisor_RearbitrationTYPE1Request (Dcm_BufferUserType RxConnectionId, Dcm_RequestTypeType RequestType)
{
  Dcm_ReceptionArbitrationResultType ReceptionArbitrationResult;
  Dcm_ReceptionArbitrationResultType D.8227;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReceptionArbitrationResult = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) RequestType;
  switch (_1) <default: <L10> [INV], case 1 ... 2: <L0> [INV], case 8: <L3> [INV], case 9: <L2> [INV], case 10 ... 11: <L4> [INV], case 14: <L6> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  ReceptionArbitrationResult = Dcm_Dsl_Supervisor_RxArbitrationTYPE1Request (RxConnectionId, 1);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 4> :
<L2>:
  # DEBUG BEGIN_STMT
  ReceptionArbitrationResult = Dcm_Dsl_Supervisor_RxArbitrationTYPE1Request (RxConnectionId, 4);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
<L3>:
  # DEBUG BEGIN_STMT
  ReceptionArbitrationResult = Dcm_Dsl_Supervisor_RxArbitrationTYPE1Request (RxConnectionId, 5);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
<L4>:
  # DEBUG BEGIN_STMT
  ReceptionArbitrationResult = Dcm_Dsl_Supervisor_RxArbitrationTYPE1Request (RxConnectionId, 2);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
<L6>:
  # DEBUG BEGIN_STMT
  ReceptionArbitrationResult = Dcm_Dsl_Supervisor_RxArbitrationTYPE1Request (RxConnectionId, 3);
  # DEBUG BEGIN_STMT

  <bb 8> :
<L10>:
  # DEBUG BEGIN_STMT
  D.8227 = ReceptionArbitrationResult;
  return D.8227;

}


Dcm_Dsl_Supervisor_GetProcessingProtocolIndexForTYPE1Request (Dcm_BufferUserType RxConnectionId, Dcm_RequestTypeType RequestType)
{
  Dcm_ProtocolIndexType ProcessingProtocolIndex;
  Dcm_ProtocolIndexType D.8224;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ProcessingProtocolIndex = 2;
  # DEBUG BEGIN_STMT
  _1 = (int) RequestType;
  switch (_1) <default: <L10> [INV], case 1 ... 2: <L0> [INV], case 8: <L3> [INV], case 9: <L2> [INV], case 10 ... 11: <L4> [INV], case 14: <L6> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  ProcessingProtocolIndex = Dcm_Dsl_Supervisor_GetProcessingProtocolIndex (RxConnectionId, 1);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 4> :
<L2>:
  # DEBUG BEGIN_STMT
  ProcessingProtocolIndex = Dcm_Dsl_Supervisor_GetProcessingProtocolIndex (RxConnectionId, 4);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
<L3>:
  # DEBUG BEGIN_STMT
  ProcessingProtocolIndex = Dcm_Dsl_Supervisor_GetProcessingProtocolIndex (RxConnectionId, 5);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
<L4>:
  # DEBUG BEGIN_STMT
  ProcessingProtocolIndex = Dcm_Dsl_Supervisor_GetProcessingProtocolIndex (RxConnectionId, 2);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
<L6>:
  # DEBUG BEGIN_STMT
  ProcessingProtocolIndex = Dcm_Dsl_Supervisor_GetProcessingProtocolIndex (RxConnectionId, 3);
  # DEBUG BEGIN_STMT

  <bb 8> :
<L10>:
  # DEBUG BEGIN_STMT
  D.8224 = ProcessingProtocolIndex;
  return D.8224;

}


Dcm_Dsl_Supervisor_RxArbitrationTYPE1Request (Dcm_BufferUserType RxConnectionId, Dcm_RequestOriginType RequestOrigin)
{
  const boolean ProtocolBusyWithType1ROE;
  Dcm_ComMChannelOperationStateType ComMChannelOperationState;
  Dcm_ReceptionArbitrationResultType ArbitrationResult;
  Dcm_ProtocolIndexType ProcessingProtocolIndex;
  struct Dcm_RxPduIdInfoType RxPduIdInfo;
  Dcm_ReceptionArbitrationResultType D.8141;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ProcessingProtocolIndex = 2;
  # DEBUG BEGIN_STMT
  ArbitrationResult = 0;
  # DEBUG BEGIN_STMT
  ComMChannelOperationState = 0;
  # DEBUG BEGIN_STMT
  Dcm_Dsl_RxConnectionGetRxPduIdInformation (RxConnectionId, &RxPduIdInfo);
  # DEBUG BEGIN_STMT
  ProcessingProtocolIndex = Dcm_Dsl_Supervisor_GetProcessingProtocolIndex (RxConnectionId, RequestOrigin);
  # DEBUG BEGIN_STMT
  _1 = (int) RequestOrigin;
  switch (_1) <default: <L19> [INV], case 1: <L0> [INV], case 2 ... 3: <L1> [INV], case 4 ... 5: <L3> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _2 = RxPduIdInfo.ComMChannelId;
  ComMChannelOperationState = Dcm_Dsl_ComMChannelStateManager_GetRxState (_2);
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _3 = RxPduIdInfo.ComMChannelId;
  ComMChannelOperationState = Dcm_Dsl_ComMChannelStateManager_GetTxState (_3);
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L3>:
  # DEBUG BEGIN_STMT
  ComMChannelOperationState = 1;
  # DEBUG BEGIN_STMT

  <bb 6> :
<L19>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (ComMChannelOperationState != 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ArbitrationResult = 2;
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _4 = RxPduIdInfo.MainConnectionIndex;
  _5 = Dcm_Dsl_Supervisor_MainConnectionHandling_MainConnectionBusy (_4);
  if (_5 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ProtocolBusyWithType1ROE = Dcm_Dsl_Supervisor_ProtocolHandling_ProtocolIsBusyWithType1ROE (ProcessingProtocolIndex);
  # DEBUG BEGIN_STMT
  ArbitrationResult = 1;
  # DEBUG BEGIN_STMT
  _6 = RequestOrigin + 254;
  if (_6 > 1)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  if (ProtocolBusyWithType1ROE == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  ArbitrationResult = 6;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  ArbitrationResult = Dcm_Dsl_Supervisor_ProtocolHandling_TYPE1RequestPriorityAssessment (ProcessingProtocolIndex, RequestOrigin);

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.8141 = ArbitrationResult;
  RxPduIdInfo = {CLOBBER};
  return D.8141;

}


Dcm_Dsl_Supervisor_RxArbitrationPostBootRequest ()
{
  Dcm_ReceptionArbitrationResultType D.8162;

  <bb 2> :
  # DEBUG BEGIN_STMT
  D.8162 = 6;
  return D.8162;

}


Dcm_Dsl_Supervisor_PrearbitrationTYPE1Periodic (Dcm_BufferUserType RxConnectionId)
{
  Dcm_ReceptionPermissionType RxPermission;
  const Dcm_ReceptionArbitrationResultType ArbitrationResult;
  Dcm_ReceptionPermissionType D.8167;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ArbitrationResult = Dcm_Dsl_Supervisor_RxArbitrationTYPE1Request (RxConnectionId, 3);
  # DEBUG BEGIN_STMT
  RxPermission = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) ArbitrationResult;
  switch (_1) <default: <L9> [INV], case 0 ... 4: <L0> [INV], case 6: <L5> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  RxPermission = 0;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
<L5>:
  # DEBUG BEGIN_STMT
  RxPermission = 1;
  # DEBUG BEGIN_STMT

  <bb 5> :
<L9>:
  # DEBUG BEGIN_STMT
  D.8167 = RxPermission;
  return D.8167;

}


Dcm_Dsl_Supervisor_PrearbitrationTYPE1ROE (Dcm_BufferUserType RxConnectionId)
{
  Dcm_ReceptionPermissionType RxPermission;
  const Dcm_ReceptionArbitrationResultType ArbitrationResult;
  Dcm_ReceptionPermissionType D.8154;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ArbitrationResult = Dcm_Dsl_Supervisor_RxArbitrationTYPE1Request (RxConnectionId, 2);
  # DEBUG BEGIN_STMT
  RxPermission = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) ArbitrationResult;
  switch (_1) <default: <L8> [INV], case 1: <L1> [INV], case 2: <L0> [INV], case 3 ... 4: <L1> [INV], case 6: <L4> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  RxPermission = 0;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  RxPermission = 5;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L4>:
  # DEBUG BEGIN_STMT
  RxPermission = 1;
  # DEBUG BEGIN_STMT

  <bb 6> :
<L8>:
  # DEBUG BEGIN_STMT
  D.8154 = RxPermission;
  return D.8154;

}


Dcm_Dsl_Supervisor_PrearbitrationNormalRequest (Dcm_BufferUserType RxConnectionId, PduLengthType Length)
{
  const boolean PotentialTesterPresent;
  const Dcm_ReceptionArbitrationResultType ReceptionArbitrationResult;
  Dcm_ReceptionPermissionType RxPermission;
  struct Dcm_RxPduIdInfoType RxPduIdInfo;
  Dcm_ReceptionPermissionType D.8127;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RxPermission = 0;
  # DEBUG BEGIN_STMT
  ReceptionArbitrationResult = Dcm_Dsl_Supervisor_RxArbitrationTYPE1Request (RxConnectionId, 1);
  # DEBUG BEGIN_STMT
  Dcm_Dsl_RxConnectionGetRxPduIdInformation (RxConnectionId, &RxPduIdInfo);
  # DEBUG BEGIN_STMT
  _1 = (int) ReceptionArbitrationResult;
  switch (_1) <default: <L13> [INV], case 0: <L0> [INV], case 1: <L2> [INV], case 2: <L0> [INV], case 3 ... 4: <L6> [INV], case 6: <L8> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  RxPermission = 0;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 4> :
<L2>:
  # DEBUG BEGIN_STMT
  PotentialTesterPresent = Dcm_Dsl_Supervisor_RequestIsPotentialConcurrentTesterPresent (RxConnectionId, Length);
  # DEBUG BEGIN_STMT
  if (PotentialTesterPresent == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RxPermission = 2;
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RxPermission = 0;
  goto <bb 9>; [INV]

  <bb 7> :
<L6>:
  # DEBUG BEGIN_STMT
  RxPermission = 3;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 8> :
<L8>:
  # DEBUG BEGIN_STMT
  RxPermission = 1;
  # DEBUG BEGIN_STMT

  <bb 9> :
<L13>:
  # DEBUG BEGIN_STMT
  D.8127 = RxPermission;
  RxPduIdInfo = {CLOBBER};
  return D.8127;

}


Dcm_Dsl_Supervisor_PrearbitrationPostBootRequest ()
{
  Dcm_ReceptionPermissionType RxPermission;
  const Dcm_ReceptionArbitrationResultType ReceptionArbitrationResult;
  Dcm_ReceptionPermissionType D.8160;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReceptionArbitrationResult = Dcm_Dsl_Supervisor_RxArbitrationPostBootRequest ();
  # DEBUG BEGIN_STMT
  RxPermission = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) ReceptionArbitrationResult;
  if (_1 == 6)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  RxPermission = 1;
  # DEBUG BEGIN_STMT

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.8160 = RxPermission;
  return D.8160;

}


Dcm_Dsl_Supervisor_DetermineRequestType (Dcm_BufferUserType RxConnectionId, Dcm_RequestOriginType RequestOrigin)
{
  boolean RequestIsTYPE2;
  Dcm_RequestTypeType RequestType;
  struct Dcm_RxPduIdInfoType RxPduIdInfo;
  Dcm_RequestTypeType D.8117;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RequestType = 0;
  # DEBUG BEGIN_STMT
  Dcm_Dsl_RxConnectionGetRxPduIdInformation (RxConnectionId, &RxPduIdInfo);
  # DEBUG BEGIN_STMT
  _1 = (int) RequestOrigin;
  switch (_1) <default: <L21> [INV], case 1: <L0> [INV], case 2: <L4> [INV], case 3: <L16> [INV], case 4: <L14> [INV], case 5: <L15> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _2 = RxPduIdInfo.AddressingType;
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RequestType = 1;
  goto <bb 16>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RequestType = 2;
  goto <bb 16>; [INV]

  <bb 6> :
<L4>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RequestIsTYPE2 = 0;
  # DEBUG BEGIN_STMT
  _3 = RxPduIdInfo.AddressingType;
  if (_3 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (RequestIsTYPE2 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RequestType = 12;
  goto <bb 16>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RequestType = 10;
  goto <bb 16>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (RequestIsTYPE2 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  RequestType = 13;
  goto <bb 16>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RequestType = 11;
  goto <bb 16>; [INV]

  <bb 13> :
<L14>:
  # DEBUG BEGIN_STMT
  RequestType = 9;
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 14> :
<L15>:
  # DEBUG BEGIN_STMT
  RequestType = 8;
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 15> :
<L16>:
  # DEBUG BEGIN_STMT
  RequestType = 14;
  # DEBUG BEGIN_STMT

  <bb 16> :
<L21>:
  # DEBUG BEGIN_STMT
  D.8117 = RequestType;
  RxPduIdInfo = {CLOBBER};
  return D.8117;

}


Dcm_Dsl_Supervisor_EnqueueResetOfDiagnosticSession ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_ResetDiagnosticSession = 1;
  return;

}


Dcm_Dsl_Supervisor_GetProtocolIndexFromRxPduIdAndRequestType (PduIdType RxPduId, uint8 MessageType)
{
  Dcm_ProtocolIndexType ProtocolIndex;
  Dcm_ProtocolIndexType D.8254;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) RxPduId;
  _2 = Dcm_RxPduIdConfig[_1].MainConnectionIndex;
  _3 = (int) _2;
  ProtocolIndex = Dcm_MainConnectionConfig[_3].ProtocolIndex;
  # DEBUG BEGIN_STMT
  D.8254 = ProtocolIndex;
  return D.8254;

}


Dcm_Dsl_Supervisor_DefaultSessionEntered ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_DefaultSessionEntered ();
  return;

}


Dcm_Dsl_Supervisor_ProcessingEnd (Dcm_BufferUserType RxConnectionId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_ProcessingEnd (RxConnectionId);
  # DEBUG BEGIN_STMT
  SchM_Exit_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  return;

}


Dcm_Dsl_Supervisor_ProtocolFree (Dcm_BufferUserType ProtocolID)
{
  const Dcm_ProtocolIndexType ProtocolIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (unsigned char) ProtocolID;
  ProtocolIndex = _1 + 244;
  # DEBUG BEGIN_STMT
  SchM_Enter_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProtocolHandling_ProtocolFree (ProtocolIndex);
  # DEBUG BEGIN_STMT
  SchM_Exit_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  return;

}


Dcm_Dsl_Supervisor_IsSessionClearedToSwitch (Dcm_SesCtrlType NewSession)
{
  Dcm_SessionSwitchPermissionType IsSessionClearedToSwitch;
  boolean D.8252;

  <bb 2> :
  # DEBUG BEGIN_STMT
  IsSessionClearedToSwitch = Dcm_Dsl_Supervisor_ProtocolHandling_IsSessionClearedToSwitch (NewSession);
  # DEBUG BEGIN_STMT
  D.8252 = IsSessionClearedToSwitch;
  return D.8252;

}


Dcm_Dsl_Supervisor_ProcessRequest (Dcm_BufferUserType RxConnectionId, Dcm_RequestTypeType RequestType, struct Dcm_BufferType RequestBuffer)
{
  Dcm_TimerValueType NRCTimeout;
  boolean ProtocolBusyWithType1ROE;
  boolean RxConnectionCancellationEnqueued;
  boolean MainConnectionBusy;
  Dcm_ComMChannelOperationStateType ComMChannelRxState;
  Dcm_RxConnectionStatusType RxConnectionState;
  Dcm_ProtocolIndexType RxProtocolIndex;
  struct Dcm_RxPduIdInfoType RxPduIdInfo;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RxConnectionState = Dcm_Dsl_RxConnectionGetState (RxConnectionId);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RxConnectionCancellationEnqueued = Dcm_Dsl_Supervisor_CommunicationSessionHandling_IsCancellationEnqueuedForRxConnection (RxConnectionId);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dcm_Dsl_RxConnectionGetRxPduIdInformation (RxConnectionId, &RxPduIdInfo);
  # DEBUG BEGIN_STMT
  _1 = RxPduIdInfo.ComMChannelId;
  ComMChannelRxState = Dcm_Dsl_ComMChannelStateManager_GetRxState (_1);
  # DEBUG BEGIN_STMT
  _2 = RxPduIdInfo.MainConnectionIndex;
  MainConnectionBusy = Dcm_Dsl_Supervisor_MainConnectionHandling_MainConnectionBusy (_2);
  # DEBUG BEGIN_STMT
  RxProtocolIndex = RxPduIdInfo.ProtocolIndex;
  # DEBUG BEGIN_STMT
  ProtocolBusyWithType1ROE = Dcm_Dsl_Supervisor_ProtocolHandling_ProtocolIsBusyWithType1ROE (RxProtocolIndex);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = (int) RxConnectionId;
  _4 = Dcm_RxPduIdConfig[_3].AddressingType;
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _5 = RequestBuffer.FilledLength;
  if (_5 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _6 = RequestBuffer.BufferPtr;
  _7 = *_6;
  if (_7 == 62)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _8 = RequestBuffer.BufferPtr;
  _9 = _8 + 1;
  _10 = *_9;
  if (_10 == 128)
    goto <bb 15>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _11 = RequestType + 255;
  if (_11 <= 1)
    goto <bb 9>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (RequestType == 8)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (RequestType == 9)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  if (RxConnectionCancellationEnqueued == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (RxConnectionState == 2)
    goto <bb 15>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (MainConnectionBusy == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  if (ProtocolBusyWithType1ROE == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _12 = RequestType + 255;
  if (_12 <= 1)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  if (ComMChannelRxState != 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _13 = RequestBuffer.BufferId;
  Dcm_Dsl_BufferFree (14, _13);
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_ReceptionEnd (RxConnectionId);
  goto <bb 23>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _14 = (int) RequestType;
  switch (_14) <default: <L26> [INV], case 1 ... 2: <L14> [INV], case 6: <L21> [INV], case 7: <L22> [INV], case 8 ... 9: <L16> [INV], case 10 ... 11: <L18> [INV], case 14: <L20> [INV]>

  <bb 17> :
<L14>:
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProcessTYPE1Request (RxConnectionId, RequestType, RequestBuffer);
  # DEBUG BEGIN_STMT
  goto <bb 23>; [INV]

  <bb 18> :
<L16>:
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProcessTYPE1Request (RxConnectionId, RequestType, RequestBuffer);
  # DEBUG BEGIN_STMT
  goto <bb 23>; [INV]

  <bb 19> :
<L18>:
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProcessTYPE1Request (RxConnectionId, RequestType, RequestBuffer);
  # DEBUG BEGIN_STMT
  goto <bb 23>; [INV]

  <bb 20> :
<L20>:
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProcessTYPE1Request (RxConnectionId, RequestType, RequestBuffer);
  # DEBUG BEGIN_STMT
  goto <bb 23>; [INV]

  <bb 21> :
<L21>:
  # DEBUG BEGIN_STMT
  NRCTimeout = Dcm_Dsl_Supervisor_MainConnectionHandling_GetNRCTimeout (RxProtocolIndex);
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_ProcessingBegin (RxConnectionId, 1);
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_MainConnectionHandling_InitiateNRC (RxConnectionId, RequestBuffer, 33, NRCTimeout);
  # DEBUG BEGIN_STMT
  goto <bb 23>; [INV]

  <bb 22> :
<L22>:
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_ReceptionEnd (RxConnectionId);
  # DEBUG BEGIN_STMT

  <bb 23> :
<L26>:
  # DEBUG BEGIN_STMT
  RxPduIdInfo = {CLOBBER};
  return;

}


Dcm_Dsl_Supervisor_TransmissionFinished (Dcm_BufferUserType TxConnectionId, Dcm_TxResultType TransmissionResult)
{
  boolean TransmissionDone;
  uint16_least MainConnectionIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  MainConnectionIndex = 0;
  # DEBUG BEGIN_STMT
  TransmissionDone = 0;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Dcm_MainConnectionConfig[MainConnectionIndex].ConfirmationTxPduId;
  _2 = TxConnectionId + 65530;
  if (_1 == _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = (unsigned char) MainConnectionIndex;
  Dcm_Dsl_Supervisor_MainConnectionHandling_TransmissionFinished (_3, TransmissionResult);
  # DEBUG BEGIN_STMT
  TransmissionDone = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  MainConnectionIndex = MainConnectionIndex + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (MainConnectionIndex <= 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  if (TransmissionDone == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Dcm_Dsl_Supervisor_P2TimerTimeout (Dcm_TimerIndexType TimerIndex)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProtocolHandling_P2TimerTimeout (TimerIndex);
  return;

}


Dcm_Dsl_Supervisor_GetProtocolRequestType (Dcm_BufferUserType ProtocolId)
{
  Dcm_SupervisorProtocolRequestTypeType ProtocolRequestType;
  const Dcm_ProtocolIndexType ProtocolIndex;
  Dcm_SupervisorProtocolRequestTypeType D.8186;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (unsigned char) ProtocolId;
  ProtocolIndex = _1 + 244;
  # DEBUG BEGIN_STMT
  ProtocolRequestType = Dcm_Dsl_Supervisor_ProtocolHandling_GetProtocolRequestType (ProtocolIndex);
  # DEBUG BEGIN_STMT
  D.8186 = ProtocolRequestType;
  return D.8186;

}


Dcm_Dsl_Supervisor_GetProcessingProtocolIndex (Dcm_BufferUserType RxConnectionId, Dcm_RequestOriginType RequestOrigin)
{
  Dcm_MainConnectionIndexType MainConnectionIndex;
  Dcm_ProtocolIndexType ProcessingProtocolIndex;
  struct Dcm_RxPduIdInfoType RxPduIdInfo;
  Dcm_ProtocolIndexType D.8182;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ProcessingProtocolIndex = 2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dcm_Dsl_RxConnectionGetRxPduIdInformation (RxConnectionId, &RxPduIdInfo);
  # DEBUG BEGIN_STMT
  _1 = (int) RxConnectionId;
  MainConnectionIndex = Dcm_RxPduIdConfig[_1].MainConnectionIndex;
  # DEBUG BEGIN_STMT
  _2 = (int) RequestOrigin;
  switch (_2) <default: <L9> [INV], case 1: <L0> [INV], case 2: <L3> [INV], case 3: <L4> [INV], case 4 ... 5: <L0> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _3 = (int) MainConnectionIndex;
  ProcessingProtocolIndex = Dcm_MainConnectionConfig[_3].ProtocolIndex;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L3>:
  # DEBUG BEGIN_STMT
  _4 = (int) MainConnectionIndex;
  ProcessingProtocolIndex = Dcm_MainConnectionConfig[_4].ProtocolIndex;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L4>:
  # DEBUG BEGIN_STMT
  _5 = (int) MainConnectionIndex;
  ProcessingProtocolIndex = Dcm_MainConnectionConfig[_5].ProtocolIndex;
  # DEBUG BEGIN_STMT

  <bb 6> :
<L9>:
  # DEBUG BEGIN_STMT
  D.8182 = ProcessingProtocolIndex;
  RxPduIdInfo = {CLOBBER};
  return D.8182;

}


Dcm_Dsl_Supervisor_GetProtocolGroupTypeForProtocol (Dcm_ProtocolIndexType ProtocolIndex)
{
  Dcm_ProtocolGroupType ProtocolGroup;
  Dcm_ProtocolGroupType D.8180;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ProtocolGroup = Dcm_Dsl_Supervisor_ProtocolHandling_GetProtocolGroupTypeForProtocol (ProtocolIndex);
  # DEBUG BEGIN_STMT
  D.8180 = ProtocolGroup;
  return D.8180;

}


Dcm_Dsl_Supervisor_GetLatestExternalUDSProtocolConfig (struct Dcm_ProtocolConfigType * const CurrentProtocolConfig)
{
  Std_ReturnType GetProtocolConfigResult;
  Std_ReturnType D.8178;

  <bb 2> :
  # DEBUG BEGIN_STMT
  GetProtocolConfigResult = 1;
  # DEBUG BEGIN_STMT
  GetProtocolConfigResult = Dcm_Dsl_Supervisor_ProtocolHandling_GetLatestExternalUDSProtocolConfig (CurrentProtocolConfig);
  # DEBUG BEGIN_STMT
  D.8178 = GetProtocolConfigResult;
  return D.8178;

}


Dcm_Dsl_Supervisor_GetLatestExternalUDSProtocol ()
{
  Dcm_BufferUserType ProtocolId;
  Dcm_BufferUserType D.8176;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Dcm_Dsl_Supervisor_ProtocolHandling_GetLatestExternalUDSProtocolIndex ();
  _2 = (short unsigned int) _1;
  ProtocolId = _2 + 12;
  # DEBUG BEGIN_STMT
  D.8176 = ProtocolId;
  return D.8176;

}


Dcm_Dsl_Supervisor_IncomingReceptionFinished (Dcm_BufferUserType RxConnectionId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_ReceptionEnd (RxConnectionId);
  return;

}


Dcm_Dsl_Supervisor_AnnounceIncomingApplicationDiagnosticRequest (Dcm_BufferUserType RxConnectionId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_PrepareApplicationDiagnosticRequest (RxConnectionId);
  return;

}


Dcm_Dsl_Supervisor_IncomingReception (Dcm_BufferUserType RxConnectionId, Dcm_RequestTypeType RequestType)
{
  struct Dcm_RxPduIdInfoType RxPduIdInfo;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = RequestType + 250;
  if (_1 <= 1)
    goto <bb 7>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (RequestType == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (RequestType == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (RequestType == 8)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (RequestType == 9)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dcm_Dsl_RxConnectionGetRxPduIdInformation (RxConnectionId, &RxPduIdInfo);
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_ReceptionBegin (RxConnectionId);
  RxPduIdInfo = {CLOBBER};

  <bb 8> :
  return;

}


Dcm_Dsl_Supervisor_RequestRxPermission (Dcm_BufferUserType RxConnectionId, PduLengthType Length, Dcm_RequestOriginType RequestOrigin)
{
  Dcm_RequestTypeType AcceptAsRequestType;
  const Dcm_RequestTypeType InitialRequestType;
  Dcm_RequestTypeType D.8101;

  <bb 2> :
  # DEBUG BEGIN_STMT
  InitialRequestType = Dcm_Dsl_Supervisor_DetermineRequestType (RxConnectionId, RequestOrigin);
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 17;
  # DEBUG BEGIN_STMT
  Dcm_InhibitRequestProcessing.1_1 = Dcm_InhibitRequestProcessing;
  if (Dcm_InhibitRequestProcessing.1_1 != 1)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (InitialRequestType == 9)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (InitialRequestType == 8)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = (int) InitialRequestType;
  switch (_2) <default: <L16> [INV], case 1 ... 2: <L3> [INV], case 8 ... 9: <L7> [INV], case 10 ... 11: <L5> [INV], case 14: <L9> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = Dcm_Dsl_Supervisor_RxPermissionNormalRequest (RxConnectionId, Length, InitialRequestType);
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 7> :
<L5>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = Dcm_Dsl_Supervisor_RxPermissionTYPE1ROERequest (RxConnectionId, InitialRequestType);
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 8> :
<L7>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = Dcm_Dsl_Supervisor_RxPermissionPostBootRequest (InitialRequestType);
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 9> :
<L9>:
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = Dcm_Dsl_Supervisor_RxPermissionTYPE1PeriodicRequest (RxConnectionId);
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  AcceptAsRequestType = 17;

  <bb 11> :
<L16>:
  # DEBUG BEGIN_STMT
  D.8101 = AcceptAsRequestType;
  return D.8101;

}


Dcm_Dsl_Supervisor_DisinhibitRequestProcessing ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_InhibitRequestProcessing = 0;
  return;

}


Dcm_Dsl_Supervisor_RequestProcessingInhibited ()
{
  boolean D.8094;

  <bb 2> :
  # DEBUG BEGIN_STMT
  D.8094 = Dcm_InhibitRequestProcessing;
  return D.8094;

}


Dcm_Dsl_Supervisor_InhibitRequestProcessing ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_InhibitRequestProcessing = 1;
  return;

}


Dcm_Dsl_Supervisor_PostProcessingMainFunction ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_MainFunction ();
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_MainConnectionHandling_MainFunction ();
  return;

}


Dcm_Dsl_Supervisor_PreProcessingMainFunction ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_MainFunction ();
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_MainConnectionHandling_MainFunction ();
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ResetDiagnosticSession ();
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProtocolHandling_MainFunction ();
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ResetDiagnosticSession ();
  return;

}


Dcm_Dsl_Supervisor_Init ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_CommunicationSessionHandling_Init ();
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_ProtocolHandling_Init ();
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_MainConnectionHandling_Init ();
  # DEBUG BEGIN_STMT
  Dcm_Dsl_Supervisor_EnqueueResetOfDiagnosticSession ();
  return;

}


