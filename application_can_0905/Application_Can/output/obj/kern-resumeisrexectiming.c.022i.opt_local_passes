__attribute__((target ("general-regs-only")))
OS_ResumeIsrExecTiming (struct os_accountingsave_t * save)
{
  os_tick_t OS_hwtStartDelta;
  struct os_kerneldata_t * const kernel_data;
  unsigned char _1;
  unsigned char _2;
  unsigned int _3;
  unsigned int _4;
  unsigned int _5;
  unsigned int _6;
  unsigned int _7;
  const struct os_hwt_t * _8;
  const struct os_hwtdrv_t * _9;
  os_timervalue_t (*<T526>) (const struct os_hwt_t *) _10;
  const struct os_hwt_t * _11;
  unsigned int _12;
  unsigned int _13;
  unsigned int _14;
  unsigned int _15;
  const struct os_hwt_t * _16;
  unsigned int _17;
  const struct os_hwt_t * _18;
  const struct os_hwt_t * _19;
  const struct os_hwtdrv_t * _20;
  os_boolean_t (*<T52b>) (const struct os_hwt_t *, os_timervalue_t, os_tick_t) _21;
  const struct os_hwt_t * _22;
  unsigned int _23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data_26 = &OS_kernelData;
  # DEBUG kernel_data => kernel_data_26
  # DEBUG BEGIN_STMT
  _1 = save_28(D)->inFunction;
  OS_kernelData.accounting.inFunction = _1;
  # DEBUG BEGIN_STMT
  _2 = save_28(D)->etType;
  OS_kernelData.accounting.etType = _2;
  # DEBUG BEGIN_STMT
  _3 = save_28(D)->etUsed;
  OS_kernelData.accounting.etUsed = _3;
  # DEBUG BEGIN_STMT
  _4 = save_28(D)->etLimit;
  OS_kernelData.accounting.etLimit = _4;
  # DEBUG BEGIN_STMT
  _5 = OS_kernelData.accounting.etLimit;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _6 = OS_kernelData.accounting.etUsed;
  _7 = OS_kernelData.accounting.etLimit;
  if (_6 >= _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  OS_ExceedExecTime ();
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = OS_executionTimer[0];
  _9 = _8->driver;
  _10 = _9->hwtRead;
  _11 = OS_executionTimer[0];
  _12 = _10 (_11);
  OS_kernelData.accounting.frc = _12;
  # DEBUG BEGIN_STMT
  _13 = OS_kernelData.accounting.etLimit;
  if (_13 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = OS_kernelData.accounting.etLimit;
  _15 = OS_kernelData.accounting.etUsed;
  OS_hwtStartDelta_36 = _14 - _15;
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_36
  # DEBUG BEGIN_STMT
  _16 = OS_executionTimer[0];
  _17 = _16->maxDelta;
  if (OS_hwtStartDelta_36 > _17)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _18 = OS_executionTimer[0];
  OS_hwtStartDelta_37 = _18->defDelta;
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_37

  <bb 8> :
  # OS_hwtStartDelta_24 = PHI <OS_hwtStartDelta_36(6), OS_hwtStartDelta_37(7)>
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_24
  # DEBUG BEGIN_STMT
  _19 = OS_executionTimer[0];
  _20 = _19->driver;
  _21 = _20->hwtStart;
  _22 = OS_executionTimer[0];
  _23 = OS_kernelData.accounting.frc;
  _21 (_22, _23, OS_hwtStartDelta_24);

  <bb 9> :
  # DEBUG BEGIN_STMT
  return;

}


