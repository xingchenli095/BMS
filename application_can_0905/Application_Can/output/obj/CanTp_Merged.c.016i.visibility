
Marking local functions: CanTp_PostponedTimeoutHandling CanTp_ProcessConfirmedCF CanTp_ProcessTxPdu CanTp_ProcessCopyTxData CanTp_RequestTxFrameData CanTp_STminTimeoutHandling CanTp_ValidateNAI CanTp_ValidateFCLength CanTp_CheckNPduLength CanTp_ProcessReceivedFC CanTp_ProcessReceivedLastCF CanTp_ProcessReceivedIntermediateCF CanTp_ProcessReceivedCF CanTp_ProcessReceivedFF CanTp_ProcessReceivedSF CanTp_FindNSduId CanTp_RxChannelCleanup CanTp_ProcessRxFrame CanTp_PostponeRxFrame CanTp_StallHandling


Marking externally visible functions: CanTp_CancelReceive CanTp_HandlePostponedFlags CanTp_PostTxConfirmation CanTp_TxConfirmation CanTp_TxStateHandling CanTp_TransmitPostponedFlowControl CanTp_TransmitPostponedFrame CanTp_TransmitFrame CanTp_Transmit CanTp_StopChannel CanTp_PostSTminCallback CanTp_STminCallback CanTp_PostRxIndication CanTp_RxIndication CanTp_TryToSendFC CanTp_RxStateHandling CanTp_RxProcessData CanTp_ProcessStartOfReceptionData CanTp_ProcessStartOfReception CanTp_PreparePadding CanTp_PreparexF CanTp_CheckAndHandleWaitFrameTimeOut CanTp_VerifyBlockSize CanTp_CalculateBlockSize CanTp_PrepareFC CanTp_ChannelHandling CanTp_TimeoutHandling CanTp_MainFunction CanTp_CancelTransmit CanTp_InitChannelPtr CanTp_Init CanTp_IsValidConfig


Marking externally visible variables: CanTp_CfgPtr


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

PduR_CanTpCopyTxData/68 (PduR_CanTpCopyTxData) @070ca620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanTp_ProcessCopyTxData/45 
  Calls: 
RetVal_DataReq/67 (RetVal_DataReq) @070c8c18
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanTp_TxStateHandling/43 (write)CanTp_TxStateHandling/43 (read)CanTp_TxStateHandling/43 (write)CanTp_TxStateHandling/43 (read)
  Availability: not_available
  Varpool flags:
CanIf_Transmit/66 (CanIf_Transmit) @0705d2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanTp_TransmitFrame/40 
  Calls: 
PduR_CanTpTxConfirmation/65 (PduR_CanTpTxConfirmation) @0705db60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanTp_StopChannel/38 
  Calls: 
PduR_CanTpRxIndication/64 (PduR_CanTpRxIndication) @0705da80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanTp_StopChannel/38 
  Calls: 
TS_MemCpy32/63 (TS_MemCpy32) @0702ab60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanTp_ProcessReceivedFF/27 CanTp_ProcessReceivedSF/26 CanTp_PostponeRxFrame/22 
  Calls: 
PduR_CanTpCopyRxData/62 (PduR_CanTpCopyRxData) @07004540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanTp_RxProcessData/17 
  Calls: 
PduR_CanTpStartOfReception/61 (PduR_CanTpStartOfReception) @07004e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanTp_ProcessStartOfReception/15 
  Calls: 
CanTp_Channel/60 (CanTp_Channel) @06fdb480
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanTp_Init/2 (addr)CanTp_Init/2 (addr)CanTp_CancelTransmit/4 (addr)CanTp_MainFunction/5 (addr)CanTp_ChannelHandling/7 (addr)CanTp_TryToSendFC/19 (addr)CanTp_RxIndication/20 (addr)CanTp_STminCallback/35 (addr)CanTp_Transmit/39 (addr)CanTp_TransmitPostponedFrame/41 (addr)CanTp_TransmitPostponedFlowControl/42 (addr)CanTp_TxStateHandling/43 (addr)CanTp_TxStateHandling/43 (addr)CanTp_TxConfirmation/46 (addr)CanTp_TxConfirmation/46 (addr)CanTp_CancelReceive/52 (addr)
  Availability: not_available
  Varpool flags:
SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 (SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0) @06fc1a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanTp_CancelReceive/52 CanTp_PostponedTimeoutHandling/51 CanTp_HandlePostponedFlags/50 CanTp_PostTxConfirmation/47 CanTp_TxConfirmation/46 CanTp_Transmit/39 CanTp_StopChannel/38 CanTp_PostSTminCallback/36 CanTp_STminCallback/35 CanTp_PostRxIndication/21 CanTp_ProcessRxFrame/23 CanTp_ProcessRxFrame/23 CanTp_RxIndication/20 CanTp_ChannelHandling/7 CanTp_MainFunction/5 CanTp_CancelTransmit/4 CanTp_Init/2 
  Calls: 
CanTp_NonIdleChannelCounter/58 (CanTp_NonIdleChannelCounter) @06fdb3f0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanTp_Init/2 (write)CanTp_InitChannelPtr/3 (read)CanTp_InitChannelPtr/3 (read)CanTp_InitChannelPtr/3 (write)CanTp_MainFunction/5 (read)CanTp_ProcessRxFrame/23 (read)CanTp_ProcessRxFrame/23 (write)CanTp_ProcessRxFrame/23 (read)CanTp_ProcessRxFrame/23 (write)CanTp_Transmit/39 (read)CanTp_Transmit/39 (write)CanTp_Transmit/39 (read)CanTp_Transmit/39 (write)
  Availability: not_available
  Varpool flags:
CanTp_InitVars/57 (CanTp_InitVars) @06fdb3a8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanTp_Init/2 (read)CanTp_Init/2 (write)CanTp_Init/2 (write)CanTp_CancelTransmit/4 (read)CanTp_MainFunction/5 (read)CanTp_RxIndication/20 (read)CanTp_Transmit/39 (read)CanTp_TxConfirmation/46 (read)CanTp_CancelReceive/52 (read)
  Availability: not_available
  Varpool flags:
SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 (SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0) @06fc19a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanTp_CancelReceive/52 CanTp_PostponedTimeoutHandling/51 CanTp_HandlePostponedFlags/50 CanTp_PostTxConfirmation/47 CanTp_TxConfirmation/46 CanTp_Transmit/39 CanTp_StopChannel/38 CanTp_PostSTminCallback/36 CanTp_STminCallback/35 CanTp_PostRxIndication/21 CanTp_ProcessRxFrame/23 CanTp_ProcessRxFrame/23 CanTp_RxIndication/20 CanTp_ChannelHandling/7 CanTp_MainFunction/5 CanTp_CancelTransmit/4 CanTp_Init/2 
  Calls: 
Det_ASR40_ReportError/55 (Det_ASR40_ReportError) @06fc18c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanTp_CancelReceive/52 CanTp_CancelReceive/52 CanTp_CancelReceive/52 CanTp_CancelReceive/52 CanTp_TxConfirmation/46 CanTp_TxConfirmation/46 CanTp_Transmit/39 CanTp_Transmit/39 CanTp_Transmit/39 CanTp_Transmit/39 CanTp_Transmit/39 CanTp_ProcessReceivedIntermediateCF/29 CanTp_ProcessReceivedLastCF/30 CanTp_ProcessReceivedFF/27 CanTp_ProcessReceivedFF/27 CanTp_ProcessReceivedSF/26 CanTp_FindNSduId/25 CanTp_RxIndication/20 CanTp_RxIndication/20 CanTp_RxIndication/20 CanTp_RxIndication/20 CanTp_RxIndication/20 CanTp_RxIndication/20 CanTp_RxIndication/20 CanTp_CancelTransmit/4 CanTp_CancelTransmit/4 CanTp_CancelTransmit/4 CanTp_CancelTransmit/4 CanTp_Init/2 CanTp_Init/2 
  Calls: 
CanTp_LcfgSignature/54 (CanTp_LcfgSignature) @06efec18
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanTp_IsValidConfig/1 (read)
  Availability: not_available
  Varpool flags: read-only
TS_PlatformSigIsValid/53 (TS_PlatformSigIsValid) @06fc1700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CanTp_IsValidConfig/1 
  Calls: 
CanTp_CancelReceive/52 (CanTp_CancelReceive) @06fc1540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_InitVars/57 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_Channel/60 (addr)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanTp_HandlePostponedFlags/50 Det_ASR40_ReportError/55 CanTp_StopChannel/38 Det_ASR40_ReportError/55 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 Det_ASR40_ReportError/55 Det_ASR40_ReportError/55 
CanTp_PostponedTimeoutHandling/51 (CanTp_PostponedTimeoutHandling) @06fbdd20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_HandlePostponedFlags/50 
  Calls: CanTp_TimeoutHandling/6 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 
CanTp_HandlePostponedFlags/50 (CanTp_HandlePostponedFlags) @06fbdb60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_CancelReceive/52 CanTp_TxConfirmation/46 CanTp_Transmit/39 CanTp_STminCallback/35 CanTp_RxIndication/20 CanTp_ChannelHandling/7 CanTp_CancelTransmit/4 
  Calls: CanTp_PostSTminCallback/36 CanTp_PostRxIndication/21 CanTp_PostTxConfirmation/47 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 CanTp_PostponedTimeoutHandling/51 
CanTp_ProcessConfirmedCF/49 (CanTp_ProcessConfirmedCF) @06fbd7e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_ProcessTxPdu/48 
  Calls: CanTp_TxStateHandling/43 CanTp_StopChannel/38 
CanTp_ProcessTxPdu/48 (CanTp_ProcessTxPdu) @06fb1700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_PostTxConfirmation/47 CanTp_TxConfirmation/46 
  Calls: CanTp_TransmitPostponedFrame/41 CanTp_StopChannel/38 CanTp_TransmitPostponedFrame/41 CanTp_TransmitPostponedFrame/41 CanTp_TransmitPostponedFlowControl/42 CanTp_ProcessConfirmedCF/49 CanTp_TransmitPostponedFlowControl/42 CanTp_TransmitPostponedFlowControl/42 CanTp_StopChannel/38 
CanTp_PostTxConfirmation/47 (CanTp_PostTxConfirmation) @06fac380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_HandlePostponedFlags/50 
  Calls: CanTp_ProcessTxPdu/48 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 
CanTp_TxConfirmation/46 (CanTp_TxConfirmation) @06fac000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_InitVars/57 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_Channel/60 (addr)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_Channel/60 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/55 CanTp_HandlePostponedFlags/50 CanTp_ProcessTxPdu/48 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 Det_ASR40_ReportError/55 
CanTp_ProcessCopyTxData/45 (CanTp_ProcessCopyTxData) @06fa32a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_RequestTxFrameData/44 CanTp_RequestTxFrameData/44 
  Calls: PduR_CanTpCopyTxData/68 
CanTp_RequestTxFrameData/44 (CanTp_RequestTxFrameData) @06f9aee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_TxStateHandling/43 CanTp_TxStateHandling/43 
  Calls: CanTp_ProcessCopyTxData/45 CanTp_ProcessCopyTxData/45 CanTp_PreparexF/13 
CanTp_TxStateHandling/43 (CanTp_TxStateHandling) @06f9ab60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: RetVal_DataReq/67 (write)RetVal_DataReq/67 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_Channel/60 (addr)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_Channel/60 (addr)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)RetVal_DataReq/67 (write)RetVal_DataReq/67 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_ProcessConfirmedCF/49 CanTp_STminTimeoutHandling/37 CanTp_STminTimeoutHandling/37 CanTp_ProcessReceivedFC/31 CanTp_ChannelHandling/7 
  Calls: CanTp_StopChannel/38 CanTp_RequestTxFrameData/44 CanTp_StopChannel/38 CanTp_TransmitFrame/40 CanTp_PreparePadding/14 CanTp_RequestTxFrameData/44 
CanTp_TransmitPostponedFlowControl/42 (CanTp_TransmitPostponedFlowControl) @06ec5d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_Channel/60 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_ProcessTxPdu/48 CanTp_ProcessTxPdu/48 CanTp_ProcessTxPdu/48 CanTp_TimeoutHandling/6 
  Calls: CanTp_PrepareFC/9 CanTp_PrepareFC/9 CanTp_PrepareFC/9 
CanTp_TransmitPostponedFrame/41 (CanTp_TransmitPostponedFrame) @06ec5b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_Channel/60 (addr)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_ProcessTxPdu/48 CanTp_ProcessTxPdu/48 CanTp_ProcessTxPdu/48 CanTp_TimeoutHandling/6 
  Calls: CanTp_TransmitFrame/40 
CanTp_TransmitFrame/40 (CanTp_TransmitFrame) @06ec5540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_TxStateHandling/43 CanTp_TransmitPostponedFrame/41 CanTp_PrepareFC/9 
  Calls: CanTp_StopChannel/38 CanIf_Transmit/66 
CanTp_Transmit/39 (CanTp_Transmit) @06ec0d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_InitVars/57 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_Channel/60 (addr)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_NonIdleChannelCounter/58 (read)CanTp_NonIdleChannelCounter/58 (write)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_NonIdleChannelCounter/58 (read)CanTp_NonIdleChannelCounter/58 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanTp_HandlePostponedFlags/50 Det_ASR40_ReportError/55 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 Det_ASR40_ReportError/55 Det_ASR40_ReportError/55 Det_ASR40_ReportError/55 Det_ASR40_ReportError/55 
CanTp_StopChannel/38 (CanTp_StopChannel) @06ebac40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_CancelReceive/52 CanTp_ProcessConfirmedCF/49 CanTp_ProcessTxPdu/48 CanTp_ProcessTxPdu/48 CanTp_TxStateHandling/43 CanTp_TxStateHandling/43 CanTp_TransmitFrame/40 CanTp_ProcessReceivedFC/31 CanTp_ProcessReceivedFC/31 CanTp_ProcessReceivedIntermediateCF/29 CanTp_ProcessReceivedLastCF/30 CanTp_ProcessReceivedLastCF/30 CanTp_ProcessReceivedCF/28 CanTp_ProcessReceivedFF/27 CanTp_ProcessReceivedFF/27 CanTp_RxChannelCleanup/24 CanTp_RxChannelCleanup/24 CanTp_ProcessReceivedSF/26 CanTp_ProcessReceivedSF/26 CanTp_ProcessReceivedSF/26 CanTp_RxStateHandling/18 CanTp_RxStateHandling/18 CanTp_RxStateHandling/18 CanTp_RxStateHandling/18 CanTp_ProcessStartOfReception/15 CanTp_ProcessStartOfReception/15 CanTp_ProcessStartOfReception/15 CanTp_TimeoutHandling/6 CanTp_TimeoutHandling/6 CanTp_TimeoutHandling/6 CanTp_TimeoutHandling/6 CanTp_TimeoutHandling/6 CanTp_TimeoutHandling/6 CanTp_TimeoutHandling/6 CanTp_TimeoutHandling/6 CanTp_CancelTransmit/4 CanTp_Init/2 
  Calls: PduR_CanTpTxConfirmation/65 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 CanTp_InitChannelPtr/3 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 PduR_CanTpRxIndication/64 
CanTp_STminTimeoutHandling/37 (CanTp_STminTimeoutHandling) @06eba620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_PostSTminCallback/36 CanTp_STminCallback/35 
  Calls: CanTp_TxStateHandling/43 CanTp_TxStateHandling/43 
CanTp_PostSTminCallback/36 (CanTp_PostSTminCallback) @06eba460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_HandlePostponedFlags/50 
  Calls: CanTp_STminTimeoutHandling/37 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 
CanTp_STminCallback/35 (CanTp_STminCallback) @06f8aee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_Channel/60 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_MainFunction/5 
  Calls: CanTp_HandlePostponedFlags/50 CanTp_STminTimeoutHandling/37 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 
CanTp_ValidateNAI/34 (CanTp_ValidateNAI) @06f8aa80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_RxIndication/20 
  Calls: 
CanTp_ValidateFCLength/33 (CanTp_ValidateFCLength) @06f8a000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_RxIndication/20 
  Calls: 
CanTp_CheckNPduLength/32 (CanTp_CheckNPduLength) @06f0a540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_ProcessReceivedLastCF/30 CanTp_ProcessReceivedSF/26 
  Calls: 
CanTp_ProcessReceivedFC/31 (CanTp_ProcessReceivedFC) @06f0a380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_ProcessRxFrame/23 
  Calls: CanTp_StopChannel/38 CanTp_StopChannel/38 CanTp_TxStateHandling/43 
CanTp_ProcessReceivedLastCF/30 (CanTp_ProcessReceivedLastCF) @06f02e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_ProcessReceivedCF/28 
  Calls: Det_ASR40_ReportError/55 CanTp_StopChannel/38 CanTp_StopChannel/38 CanTp_RxProcessData/17 CanTp_CheckNPduLength/32 
CanTp_ProcessReceivedIntermediateCF/29 (CanTp_ProcessReceivedIntermediateCF) @06f029a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_ProcessReceivedCF/28 
  Calls: Det_ASR40_ReportError/55 CanTp_StopChannel/38 CanTp_CheckAndHandleWaitFrameTimeOut/12 CanTp_TryToSendFC/19 CanTp_VerifyBlockSize/11 CanTp_RxProcessData/17 
CanTp_ProcessReceivedCF/28 (CanTp_ProcessReceivedCF) @06ef3ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_ProcessRxFrame/23 
  Calls: CanTp_ProcessReceivedIntermediateCF/29 CanTp_ProcessReceivedLastCF/30 CanTp_StopChannel/38 
CanTp_ProcessReceivedFF/27 (CanTp_ProcessReceivedFF) @06ef3a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_ProcessRxFrame/23 
  Calls: Det_ASR40_ReportError/55 Det_ASR40_ReportError/55 CanTp_StopChannel/38 CanTp_StopChannel/38 CanTp_CheckAndHandleWaitFrameTimeOut/12 TS_MemCpy32/63 CanTp_CheckAndHandleWaitFrameTimeOut/12 CanTp_TryToSendFC/19 CanTp_CalculateBlockSize/10 CanTp_ProcessStartOfReceptionData/16 CanTp_ProcessStartOfReception/15 
CanTp_ProcessReceivedSF/26 (CanTp_ProcessReceivedSF) @06ef3460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_ProcessRxFrame/23 
  Calls: Det_ASR40_ReportError/55 CanTp_StopChannel/38 CanTp_StopChannel/38 TS_MemCpy32/63 CanTp_StopChannel/38 CanTp_ProcessStartOfReceptionData/16 CanTp_ProcessStartOfReception/15 CanTp_CheckNPduLength/32 
CanTp_FindNSduId/25 (CanTp_FindNSduId) @06edaee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_RxIndication/20 
  Calls: Det_ASR40_ReportError/55 
CanTp_RxChannelCleanup/24 (CanTp_RxChannelCleanup) @06eda8c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_ProcessRxFrame/23 CanTp_ProcessRxFrame/23 
  Calls: CanTp_StopChannel/38 CanTp_StopChannel/38 
CanTp_ProcessRxFrame/23 (CanTp_ProcessRxFrame) @06eda540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: CanTp_NonIdleChannelCounter/58 (read)CanTp_NonIdleChannelCounter/58 (write)CanTp_NonIdleChannelCounter/58 (read)CanTp_NonIdleChannelCounter/58 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_PostRxIndication/21 CanTp_RxIndication/20 
  Calls: CanTp_ProcessReceivedFC/31 CanTp_ProcessReceivedCF/28 CanTp_ProcessReceivedFF/27 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 CanTp_RxChannelCleanup/24 CanTp_ProcessReceivedSF/26 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 CanTp_RxChannelCleanup/24 
CanTp_PostponeRxFrame/22 (CanTp_PostponeRxFrame) @06eda380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_RxIndication/20 
  Calls: TS_MemCpy32/63 
CanTp_PostRxIndication/21 (CanTp_PostRxIndication) @06eda000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_HandlePostponedFlags/50 
  Calls: CanTp_ProcessRxFrame/23 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 
CanTp_RxIndication/20 (CanTp_RxIndication) @06ed4a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_InitVars/57 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_Channel/60 (addr)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/55 CanTp_HandlePostponedFlags/50 CanTp_ProcessRxFrame/23 Det_ASR40_ReportError/55 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 CanTp_PostponeRxFrame/22 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 CanTp_ValidateNAI/34 Det_ASR40_ReportError/55 CanTp_ValidateFCLength/33 CanTp_FindNSduId/25 Det_ASR40_ReportError/55 Det_ASR40_ReportError/55 Det_ASR40_ReportError/55 Det_ASR40_ReportError/55 
CanTp_TryToSendFC/19 (CanTp_TryToSendFC) @06eb19a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_Channel/60 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_ProcessReceivedIntermediateCF/29 CanTp_ProcessReceivedFF/27 CanTp_RxStateHandling/18 CanTp_RxStateHandling/18 CanTp_ProcessStartOfReception/15 CanTp_CheckAndHandleWaitFrameTimeOut/12 
  Calls: CanTp_PrepareFC/9 CanTp_PrepareFC/9 CanTp_PrepareFC/9 
CanTp_RxStateHandling/18 (CanTp_RxStateHandling) @06eb1620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_ChannelHandling/7 
  Calls: CanTp_StopChannel/38 CanTp_CheckAndHandleWaitFrameTimeOut/12 CanTp_CheckAndHandleWaitFrameTimeOut/12 CanTp_TryToSendFC/19 CanTp_VerifyBlockSize/11 CanTp_RxProcessData/17 CanTp_StopChannel/38 CanTp_CheckAndHandleWaitFrameTimeOut/12 CanTp_CheckAndHandleWaitFrameTimeOut/12 CanTp_TryToSendFC/19 CanTp_CalculateBlockSize/10 CanTp_ProcessStartOfReceptionData/16 CanTp_StopChannel/38 CanTp_StopChannel/38 CanTp_ProcessStartOfReceptionData/16 
CanTp_RxProcessData/17 (CanTp_RxProcessData) @06ea3ee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_ProcessReceivedIntermediateCF/29 CanTp_ProcessReceivedLastCF/30 CanTp_RxStateHandling/18 CanTp_ProcessStartOfReceptionData/16 CanTp_ProcessStartOfReceptionData/16 CanTp_ProcessStartOfReceptionData/16 
  Calls: PduR_CanTpCopyRxData/62 
CanTp_ProcessStartOfReceptionData/16 (CanTp_ProcessStartOfReceptionData) @06ea3b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_ProcessReceivedFF/27 CanTp_ProcessReceivedSF/26 CanTp_RxStateHandling/18 CanTp_RxStateHandling/18 
  Calls: CanTp_RxProcessData/17 CanTp_RxProcessData/17 CanTp_RxProcessData/17 
CanTp_ProcessStartOfReception/15 (CanTp_ProcessStartOfReception) @06ea39a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_ProcessReceivedFF/27 CanTp_ProcessReceivedSF/26 
  Calls: CanTp_StopChannel/38 CanTp_StopChannel/38 CanTp_TryToSendFC/19 CanTp_StopChannel/38 PduR_CanTpStartOfReception/61 
CanTp_PreparePadding/14 (CanTp_PreparePadding) @06ea3620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_TxStateHandling/43 CanTp_PrepareFC/9 
  Calls: 
CanTp_PreparexF/13 (CanTp_PreparexF) @06ea3460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_RequestTxFrameData/44 
  Calls: 
CanTp_CheckAndHandleWaitFrameTimeOut/12 (CanTp_CheckAndHandleWaitFrameTimeOut) @06e9cee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_ProcessReceivedIntermediateCF/29 CanTp_ProcessReceivedFF/27 CanTp_ProcessReceivedFF/27 CanTp_RxStateHandling/18 CanTp_RxStateHandling/18 CanTp_RxStateHandling/18 CanTp_RxStateHandling/18 
  Calls: CanTp_TryToSendFC/19 
CanTp_VerifyBlockSize/11 (CanTp_VerifyBlockSize) @06e9cb60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_ProcessReceivedIntermediateCF/29 CanTp_RxStateHandling/18 
  Calls: CanTp_CalculateBlockSize/10 
CanTp_CalculateBlockSize/10 (CanTp_CalculateBlockSize) @06e9c9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_ProcessReceivedFF/27 CanTp_RxStateHandling/18 CanTp_VerifyBlockSize/11 
  Calls: 
CanTp_PrepareFC/9 (CanTp_PrepareFC) @06e92d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_TransmitPostponedFlowControl/42 CanTp_TransmitPostponedFlowControl/42 CanTp_TransmitPostponedFlowControl/42 CanTp_TryToSendFC/19 CanTp_TryToSendFC/19 CanTp_TryToSendFC/19 
  Calls: CanTp_TransmitFrame/40 CanTp_PreparePadding/14 
CanTp_StallHandling/8 (CanTp_StallHandling) @06e920e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: CanTp_ChannelHandling/7 
  Calls: 
CanTp_ChannelHandling/7 (CanTp_ChannelHandling) @06e89ee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_Channel/60 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_MainFunction/5 
  Calls: CanTp_HandlePostponedFlags/50 CanTp_TxStateHandling/43 CanTp_RxStateHandling/18 CanTp_TimeoutHandling/6 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 CanTp_StallHandling/8 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 
CanTp_TimeoutHandling/6 (CanTp_TimeoutHandling) @06e899a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_PostponedTimeoutHandling/51 CanTp_ChannelHandling/7 
  Calls: CanTp_StopChannel/38 CanTp_StopChannel/38 CanTp_StopChannel/38 CanTp_TransmitPostponedFlowControl/42 CanTp_StopChannel/38 CanTp_StopChannel/38 CanTp_TransmitPostponedFrame/41 CanTp_StopChannel/38 CanTp_StopChannel/38 CanTp_StopChannel/38 
CanTp_MainFunction/5 (CanTp_MainFunction) @06e89460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_NonIdleChannelCounter/58 (read)CanTp_InitVars/57 (read)CanTp_Channel/60 (addr)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanTp_ChannelHandling/7 CanTp_STminCallback/35 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 
CanTp_CancelTransmit/4 (CanTp_CancelTransmit) @06e892a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_InitVars/57 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_CfgPtr/0 (read)CanTp_Channel/60 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanTp_HandlePostponedFlags/50 Det_ASR40_ReportError/55 CanTp_StopChannel/38 Det_ASR40_ReportError/55 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 Det_ASR40_ReportError/55 Det_ASR40_ReportError/55 
CanTp_InitChannelPtr/3 (CanTp_InitChannelPtr) @06ba5a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_NonIdleChannelCounter/58 (read)CanTp_NonIdleChannelCounter/58 (read)CanTp_NonIdleChannelCounter/58 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_StopChannel/38 CanTp_Init/2 
  Calls: 
CanTp_Init/2 (CanTp_Init) @06ba5620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_CfgPtr/0 (write)CanTp_InitVars/57 (read)CanTp_InitVars/57 (write)CanTp_NonIdleChannelCounter/58 (write)CanTp_Channel/60 (addr)CanTp_CfgPtr/0 (read)CanTp_Channel/60 (addr)CanTp_CfgPtr/0 (read)CanTp_InitVars/57 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanTp_InitChannelPtr/3 CanTp_StopChannel/38 SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/59 SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0/56 Det_ASR40_ReportError/55 CanTp_IsValidConfig/1 Det_ASR40_ReportError/55 
CanTp_IsValidConfig/1 (CanTp_IsValidConfig) @06ba5380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: CanTp_LcfgSignature/54 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: CanTp_Init/2 
  Calls: TS_PlatformSigIsValid/53 
CanTp_CfgPtr/0 (CanTp_CfgPtr) @06e3e558
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: CanTp_Init/2 (write)CanTp_Init/2 (read)CanTp_Init/2 (read)CanTp_CancelTransmit/4 (read)CanTp_CancelTransmit/4 (read)CanTp_CancelTransmit/4 (read)CanTp_CancelTransmit/4 (read)CanTp_CancelTransmit/4 (read)CanTp_MainFunction/5 (read)CanTp_MainFunction/5 (read)CanTp_TimeoutHandling/6 (read)CanTp_TimeoutHandling/6 (read)CanTp_TimeoutHandling/6 (read)CanTp_TimeoutHandling/6 (read)CanTp_PrepareFC/9 (read)CanTp_PrepareFC/9 (read)CanTp_PrepareFC/9 (read)CanTp_PrepareFC/9 (read)CanTp_PrepareFC/9 (read)CanTp_PrepareFC/9 (read)CanTp_PrepareFC/9 (read)CanTp_PrepareFC/9 (read)CanTp_PrepareFC/9 (read)CanTp_PrepareFC/9 (read)CanTp_PrepareFC/9 (read)CanTp_PrepareFC/9 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CalculateBlockSize/10 (read)CanTp_CheckAndHandleWaitFrameTimeOut/12 (read)CanTp_CheckAndHandleWaitFrameTimeOut/12 (read)CanTp_PreparexF/13 (read)CanTp_PreparexF/13 (read)CanTp_PreparexF/13 (read)CanTp_PreparexF/13 (read)CanTp_ProcessStartOfReception/15 (read)CanTp_ProcessStartOfReception/15 (read)CanTp_RxProcessData/17 (read)CanTp_RxProcessData/17 (read)CanTp_TryToSendFC/19 (read)CanTp_TryToSendFC/19 (read)CanTp_RxIndication/20 (read)CanTp_RxIndication/20 (read)CanTp_RxIndication/20 (read)CanTp_RxIndication/20 (read)CanTp_RxIndication/20 (read)CanTp_RxIndication/20 (read)CanTp_RxIndication/20 (read)CanTp_RxIndication/20 (read)CanTp_RxIndication/20 (read)CanTp_RxIndication/20 (read)CanTp_RxIndication/20 (read)CanTp_FindNSduId/25 (read)CanTp_FindNSduId/25 (read)CanTp_FindNSduId/25 (read)CanTp_FindNSduId/25 (read)CanTp_FindNSduId/25 (read)CanTp_FindNSduId/25 (read)CanTp_ValidateFCLength/33 (read)CanTp_ValidateFCLength/33 (read)CanTp_ValidateFCLength/33 (read)CanTp_ValidateFCLength/33 (read)CanTp_ValidateFCLength/33 (read)CanTp_ValidateFCLength/33 (read)CanTp_ValidateFCLength/33 (read)CanTp_ValidateFCLength/33 (read)CanTp_ValidateNAI/34 (read)CanTp_ValidateNAI/34 (read)CanTp_ValidateNAI/34 (read)CanTp_ValidateNAI/34 (read)CanTp_ValidateNAI/34 (read)CanTp_ValidateNAI/34 (read)CanTp_ValidateNAI/34 (read)CanTp_ValidateNAI/34 (read)CanTp_ValidateNAI/34 (read)CanTp_ValidateNAI/34 (read)CanTp_ProcessReceivedSF/26 (read)CanTp_ProcessReceivedSF/26 (read)CanTp_RxChannelCleanup/24 (read)CanTp_RxChannelCleanup/24 (read)CanTp_ProcessReceivedFF/27 (read)CanTp_ProcessReceivedFF/27 (read)CanTp_ProcessReceivedCF/28 (read)CanTp_ProcessReceivedCF/28 (read)CanTp_ProcessReceivedLastCF/30 (read)CanTp_ProcessReceivedLastCF/30 (read)CanTp_ProcessReceivedIntermediateCF/29 (read)CanTp_ProcessReceivedIntermediateCF/29 (read)CanTp_ProcessReceivedIntermediateCF/29 (read)CanTp_ProcessReceivedIntermediateCF/29 (read)CanTp_ProcessReceivedIntermediateCF/29 (read)CanTp_ProcessReceivedIntermediateCF/29 (read)CanTp_ProcessReceivedIntermediateCF/29 (read)CanTp_ProcessReceivedIntermediateCF/29 (read)CanTp_ProcessReceivedIntermediateCF/29 (read)CanTp_ProcessReceivedIntermediateCF/29 (read)CanTp_ProcessReceivedFC/31 (read)CanTp_ProcessReceivedFC/31 (read)CanTp_StopChannel/38 (read)CanTp_StopChannel/38 (read)CanTp_StopChannel/38 (read)CanTp_StopChannel/38 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_Transmit/39 (read)CanTp_TransmitFrame/40 (read)CanTp_TransmitFrame/40 (read)CanTp_TransmitFrame/40 (read)CanTp_TransmitFrame/40 (read)CanTp_TransmitPostponedFrame/41 (read)CanTp_TransmitPostponedFrame/41 (read)CanTp_TxStateHandling/43 (read)CanTp_TxStateHandling/43 (read)CanTp_TxStateHandling/43 (read)CanTp_TxStateHandling/43 (read)CanTp_TxStateHandling/43 (read)CanTp_TxStateHandling/43 (read)CanTp_TxStateHandling/43 (read)CanTp_TxStateHandling/43 (read)CanTp_RequestTxFrameData/44 (read)CanTp_RequestTxFrameData/44 (read)CanTp_ProcessCopyTxData/45 (read)CanTp_ProcessCopyTxData/45 (read)CanTp_TxConfirmation/46 (read)CanTp_TxConfirmation/46 (read)CanTp_TxConfirmation/46 (read)CanTp_TxConfirmation/46 (read)CanTp_TxConfirmation/46 (read)CanTp_TxConfirmation/46 (read)CanTp_TxConfirmation/46 (read)CanTp_TxConfirmation/46 (read)CanTp_TxConfirmation/46 (read)CanTp_TxConfirmation/46 (read)CanTp_TxConfirmation/46 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessTxPdu/48 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_ProcessConfirmedCF/49 (read)CanTp_CancelReceive/52 (read)CanTp_CancelReceive/52 (read)CanTp_CancelReceive/52 (read)CanTp_CancelReceive/52 (read)CanTp_CancelReceive/52 (read)
  Availability: available
  Varpool flags: initialized
CanTp_CancelReceive (PduIdType CanTpRxSduId)
{
  uint8 MaxCfLength;
  struct CanTp_ChannelType * ChannelPtr;
  Std_ReturnType ChannelLockedFound;
  boolean ChannelLockSuccess;
  CanTp_ChType Channel;
  Std_ReturnType ret_result;
  Std_ReturnType D.10075;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CanTp_InitVars.State;
  if (_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 9, 32);
  goto <bb 27>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.251_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.251_2->NumberRxNSdus;
  if (CanTpRxSduId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 9, 2);
  goto <bb 27>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelLockedFound = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.252_4 = CanTp_CfgPtr;
  CanTp_CfgPtr.253_5 = CanTp_CfgPtr;
  _6 = CanTp_CfgPtr.253_5->RxNSduConfigPtr;
  _7 = (unsigned int) CanTpRxSduId;
  _8 = _7 * 26;
  _9 = _6 + _8;
  _10 = CanTp_CfgPtr.252_4 + _9;
  Channel = _10->Channel;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = (int) Channel;
  ChannelPtr = &CanTp_Channel[_11];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = ChannelPtr->ChannelLockFlag;
  if (_12 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ChannelLockSuccess = 0;
  # DEBUG BEGIN_STMT
  ret_result = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelLockSuccess = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (ChannelLockSuccess != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _13 = ChannelPtr->NSduId;
  if (CanTpRxSduId == _13)
    goto <bb 11>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.254_14 = CanTp_CfgPtr;
  CanTp_CfgPtr.255_15 = CanTp_CfgPtr;
  _16 = CanTp_CfgPtr.255_15->RxNSduConfigPtr;
  _17 = ChannelPtr->NSduId;
  _18 = (unsigned int) _17;
  _19 = _18 * 26;
  _20 = _16 + _19;
  _21 = CanTp_CfgPtr.254_14 + _20;
  _22 = _21->AddressingFormat;
  if (_22 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  MaxCfLength = 7;
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  MaxCfLength = 6;

  <bb 14> :
  # DEBUG BEGIN_STMT
  _23 = ChannelPtr->State;
  _24 = (int) _23;
  switch (_24) <default: <L28> [INV], case 64: <L12> [INV], case 65: <L13> [INV], case 66: <L24> [INV], case 76 ... 78: <L13> [INV], case 84 ... 86: <L25> [INV], case 194: <L20> [INV], case 204 ... 206: <L13> [INV]>

  <bb 15> :
<L12>:
  # DEBUG BEGIN_STMT
  ret_result = 1;
  # DEBUG BEGIN_STMT
  goto <bb 23>; [INV]

  <bb 16> :
<L13>:
  # DEBUG BEGIN_STMT
  ret_result = 0;
  # DEBUG BEGIN_STMT
  goto <bb 23>; [INV]

  <bb 17> :
<L20>:
  # DEBUG BEGIN_STMT
  _25 = ChannelPtr->TotalLength;
  _26 = (int) _25;
  _27 = ChannelPtr->ProcessedLength;
  _28 = (int) _27;
  _29 = _26 - _28;
  _30 = (int) MaxCfLength;
  if (_29 <= _30)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  ret_result = 1;
  goto <bb 23>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  ret_result = 0;
  goto <bb 23>; [INV]

  <bb 20> :
<L24>:
  # DEBUG BEGIN_STMT
  ret_result = 0;
  # DEBUG BEGIN_STMT
  goto <bb 23>; [INV]

  <bb 21> :
<L25>:
  # DEBUG BEGIN_STMT
  ret_result = 1;
  # DEBUG BEGIN_STMT
  goto <bb 23>; [INV]

  <bb 22> :
<L28>:
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 9, 160);
  # DEBUG BEGIN_STMT
  ret_result = 1;
  # DEBUG BEGIN_STMT

  <bb 23> :
  # DEBUG BEGIN_STMT
  if (ret_result == 0)
    goto <bb 24>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 9, 160);
  # DEBUG BEGIN_STMT
  ret_result = 1;

  <bb 26> :
  # DEBUG BEGIN_STMT
  CanTp_HandlePostponedFlags (ChannelPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;

  <bb 27> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.10075 = ret_result;
  return D.10075;

}


CanTp_PostponedTimeoutHandling (struct CanTp_ChannelType * ChannelPtr)
{
  boolean TimeoutDetected;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TimeoutDetected = 0;
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->State;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ChannelPtr->PostTicks;
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = ChannelPtr->PostTicks;
  _4 = (long unsigned int) _3;
  _5 = ChannelPtr->Ticks;
  if (_4 >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ChannelPtr->Ticks = 0;
  # DEBUG BEGIN_STMT
  TimeoutDetected = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = ChannelPtr->Ticks;
  _7 = ChannelPtr->PostTicks;
  _8 = (long unsigned int) _7;
  _9 = _6 - _8;
  ChannelPtr->Ticks = _9;
  # DEBUG BEGIN_STMT
  ChannelPtr->PostTicks = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (TimeoutDetected != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  CanTp_TimeoutHandling (ChannelPtr);

  <bb 10> :
  return;

}


CanTp_HandlePostponedFlags (struct CanTp_ChannelType * ChannelPtr)
{
  boolean PostponedFlags;

  <bb 2> :
  # DEBUG BEGIN_STMT
  PostponedFlags = 0;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_PostponedTimeoutHandling (ChannelPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->PostFlag;
  _2 = (unsigned int) _1;
  _3 = _2 & 7;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  PostponedFlags = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  PostponedFlags = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (PostponedFlags != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_PostTxConfirmation (ChannelPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_PostRxIndication (ChannelPtr);
  # DEBUG BEGIN_STMT
  CanTp_PostSTminCallback (ChannelPtr);

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (PostponedFlags != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


CanTp_ProcessConfirmedCF (struct CanTp_ChannelType * ChannelPtr)
{
  const CanTp_TxChannelType Channel;
  const PduIdType NSduId;
  PduLengthType RemainingBytes;
  uint32 GPTticks;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NSduId = ChannelPtr->NSduId;
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->TotalLength;
  _2 = ChannelPtr->ProcessedLength;
  RemainingBytes = _1 - _2;
  # DEBUG BEGIN_STMT
  if (RemainingBytes == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 0);
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = ChannelPtr->BlockSize;
  if (_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _4 = ChannelPtr->BlockSize;
  _5 = ChannelPtr->ProcessedBlockFrames;
  if (_4 == _5)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 228;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.237_6 = CanTp_CfgPtr;
  CanTp_CfgPtr.238_7 = CanTp_CfgPtr;
  _8 = CanTp_CfgPtr.238_7->TxNSduConfigPtr;
  _9 = (unsigned int) NSduId;
  _10 = _9 * 24;
  _11 = _8 + _10;
  _12 = CanTp_CfgPtr.237_6 + _11;
  _13 = _12->N_Bs;
  _14 = (long unsigned int) _13;
  ChannelPtr->Ticks = _14;
  goto <bb 17>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = ChannelPtr->ConnectionFlags;
  _16 = _15 & 239;
  ChannelPtr->ConnectionFlags = _16;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _17 = ChannelPtr->StMin;
  if (_17 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 98;
  # DEBUG BEGIN_STMT
  CanTp_TxStateHandling (ChannelPtr, 0);
  goto <bb 17>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.239_18 = CanTp_CfgPtr;
  CanTp_CfgPtr.240_19 = CanTp_CfgPtr;
  _20 = CanTp_CfgPtr.240_19->TxNSduConfigPtr;
  _21 = ChannelPtr->NSduId;
  _22 = (unsigned int) _21;
  _23 = _22 * 24;
  _24 = _20 + _23;
  _25 = CanTp_CfgPtr.239_18 + _24;
  Channel = _25->Channel;
  # DEBUG BEGIN_STMT
  _26 = ChannelPtr->StMin;
  _27 = (signed char) _26;
  if (_27 >= 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _28 = ChannelPtr->StMin;
  _29 = (long unsigned int) _28;
  GPTticks = _29 * 1000000;
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _30 = ChannelPtr->StMin;
  _31 = (long unsigned int) _30;
  _32 = _31 * 100000;
  GPTticks = _32 + 4270967296;

  <bb 12> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.241_33 = CanTp_CfgPtr;
  CanTp_CfgPtr.242_34 = CanTp_CfgPtr;
  _35 = CanTp_CfgPtr.242_34->MfCtrConfigPtr;
  _36 = (unsigned int) Channel;
  _37 = _36 * 8;
  _38 = _35 + _37;
  _39 = CanTp_CfgPtr.241_33 + _38;
  _40 = _39->Resolution;
  _41 = GPTticks + _40;
  GPTticks = _41 + 4294967295;
  # DEBUG BEGIN_STMT
  _42 = ChannelPtr->ConnectionFlags;
  _43 = (unsigned int) _42;
  _44 = _43 & 1;
  if (_44 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.243_45 = CanTp_CfgPtr;
  CanTp_CfgPtr.244_46 = CanTp_CfgPtr;
  _47 = CanTp_CfgPtr.244_46->MfCtrConfigPtr;
  _48 = (unsigned int) Channel;
  _49 = _48 * 8;
  _50 = _47 + _49;
  _51 = CanTp_CfgPtr.243_45 + _50;
  _52 = _51->Resolution;
  _53 = GPTticks / _52;
  GPTticks = _53 + 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _54 = ChannelPtr->ConnectionFlags;
  _55 = _54 & 254;
  ChannelPtr->ConnectionFlags = _55;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.245_56 = CanTp_CfgPtr;
  CanTp_CfgPtr.246_57 = CanTp_CfgPtr;
  _58 = CanTp_CfgPtr.246_57->MfCtrConfigPtr;
  _59 = (unsigned int) Channel;
  _60 = _59 * 8;
  _61 = _58 + _60;
  _62 = CanTp_CfgPtr.245_56 + _61;
  _63 = _62->Resolution;
  GPTticks = GPTticks / _63;

  <bb 15> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 122;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.247_64 = CanTp_CfgPtr;
  CanTp_CfgPtr.248_65 = CanTp_CfgPtr;
  _66 = CanTp_CfgPtr.248_65->TxNSduConfigPtr;
  _67 = (unsigned int) NSduId;
  _68 = _67 * 24;
  _69 = _66 + _68;
  _70 = CanTp_CfgPtr.247_64 + _69;
  _71 = _70->N_Cs;
  _72 = (long unsigned int) _71;
  ChannelPtr->Ticks = _72;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.249_73 = CanTp_CfgPtr;
  CanTp_CfgPtr.250_74 = CanTp_CfgPtr;
  _75 = CanTp_CfgPtr.250_74->MfCtrConfigPtr;
  _76 = (unsigned int) Channel;
  _77 = _76 * 8;
  _78 = _75 + _77;
  _79 = CanTp_CfgPtr.249_73 + _78;
  _80 = _79->CallbackType;
  if (_80 == 1)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  ChannelPtr->MfCounterTicks = GPTticks;

  <bb 17> :
  # DEBUG BEGIN_STMT
  return;

}


CanTp_ProcessTxPdu (struct CanTp_ChannelType * ChannelPtr, PduIdType CanTpTxNPduConfId)
{
  const uint8 DataLength_FF;
  const struct CanTp_RxNSduConfigType * const RxNSduCfgPtr;
  CanTp_ChType Rx_ChannelID;
  CanTp_TxChannelType Tx_ChannelID;
  const PduIdType NSduId;
  PduIdType SearchTxNPduId;
  int iftmp.232;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NSduId = ChannelPtr->NSduId;
  # DEBUG BEGIN_STMT
  Tx_ChannelID = 255;
  # DEBUG BEGIN_STMT
  Rx_ChannelID = 255;
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->State;
  _2 = (unsigned int) _1;
  _3 = _2 & 96;
  if (_3 == 64)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.218_4 = CanTp_CfgPtr;
  CanTp_CfgPtr.219_5 = CanTp_CfgPtr;
  _6 = CanTp_CfgPtr.219_5->RxNSduConfigPtr;
  _7 = (unsigned int) NSduId;
  _8 = _7 * 26;
  _9 = _6 + _8;
  _10 = CanTp_CfgPtr.218_4 + _9;
  SearchTxNPduId = _10->NPduConfIdFc;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.220_11 = CanTp_CfgPtr;
  CanTp_CfgPtr.221_12 = CanTp_CfgPtr;
  _13 = CanTp_CfgPtr.221_12->RxNSduConfigPtr;
  _14 = ChannelPtr->NSduId;
  _15 = (unsigned int) _14;
  _16 = _15 * 26;
  _17 = _13 + _16;
  _18 = CanTp_CfgPtr.220_11 + _17;
  Tx_ChannelID = _18->Tx_Channel;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.222_19 = CanTp_CfgPtr;
  CanTp_CfgPtr.223_20 = CanTp_CfgPtr;
  _21 = CanTp_CfgPtr.223_20->TxNSduConfigPtr;
  _22 = (unsigned int) NSduId;
  _23 = _22 * 24;
  _24 = _21 + _23;
  _25 = CanTp_CfgPtr.222_19 + _24;
  SearchTxNPduId = _25->NPduConfIdxF;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.224_26 = CanTp_CfgPtr;
  CanTp_CfgPtr.225_27 = CanTp_CfgPtr;
  _28 = CanTp_CfgPtr.225_27->TxNSduConfigPtr;
  _29 = ChannelPtr->NSduId;
  _30 = (unsigned int) _29;
  _31 = _30 * 24;
  _32 = _28 + _31;
  _33 = CanTp_CfgPtr.224_26 + _32;
  Rx_ChannelID = _33->Rx_Channel;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (CanTpTxNPduConfId == SearchTxNPduId)
    goto <bb 6>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _34 = ChannelPtr->State;
  _35 = (int) _34;
  switch (_35) <default: <L25> [INV], case 84: <L10> [INV], case 85: <L21> [INV], case 86: <L11> [INV], case 112: <L4> [INV], case 113: <L5> [INV], case 114: <L9> [INV]>

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 0);
  # DEBUG BEGIN_STMT
  CanTp_TransmitPostponedFlowControl (Rx_ChannelID);
  # DEBUG BEGIN_STMT
  goto <bb 25>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  _36 = ChannelPtr->ConnectionFlags;
  _37 = (unsigned int) _36;
  _38 = _37 & 16;
  if (_38 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 228;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.226_39 = CanTp_CfgPtr;
  CanTp_CfgPtr.227_40 = CanTp_CfgPtr;
  _41 = CanTp_CfgPtr.227_40->TxNSduConfigPtr;
  _42 = (unsigned int) NSduId;
  _43 = _42 * 24;
  _44 = _41 + _43;
  _45 = CanTp_CfgPtr.226_39 + _44;
  _46 = _45->N_Bs;
  _47 = (long unsigned int) _46;
  ChannelPtr->Ticks = _47;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 98;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _48 = ChannelPtr->ConnectionFlags;
  _49 = _48 & 239;
  ChannelPtr->ConnectionFlags = _49;

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_TransmitPostponedFlowControl (Rx_ChannelID);
  # DEBUG BEGIN_STMT
  goto <bb 25>; [INV]

  <bb 12> :
<L9>:
  # DEBUG BEGIN_STMT
  CanTp_ProcessConfirmedCF (ChannelPtr);
  # DEBUG BEGIN_STMT
  CanTp_TransmitPostponedFlowControl (Rx_ChannelID);
  # DEBUG BEGIN_STMT
  goto <bb 25>; [INV]

  <bb 13> :
<L10>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 194;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.228_50 = CanTp_CfgPtr;
  CanTp_CfgPtr.229_51 = CanTp_CfgPtr;
  _52 = CanTp_CfgPtr.229_51->RxNSduConfigPtr;
  _53 = (unsigned int) NSduId;
  _54 = _53 * 26;
  _55 = _52 + _54;
  _56 = CanTp_CfgPtr.228_50 + _55;
  _57 = _56->N_Cr;
  _58 = (long unsigned int) _57;
  ChannelPtr->Ticks = _58;
  # DEBUG BEGIN_STMT
  CanTp_TransmitPostponedFrame (Tx_ChannelID);
  # DEBUG BEGIN_STMT
  goto <bb 25>; [INV]

  <bb 14> :
<L11>:
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.230_59 = CanTp_CfgPtr;
  CanTp_CfgPtr.231_60 = CanTp_CfgPtr;
  _61 = CanTp_CfgPtr.231_60->RxNSduConfigPtr;
  _62 = ChannelPtr->NSduId;
  _63 = (unsigned int) _62;
  _64 = _63 * 26;
  _65 = _61 + _64;
  RxNSduCfgPtr = CanTp_CfgPtr.230_59 + _65;
  # DEBUG BEGIN_STMT
  _66 = RxNSduCfgPtr->NPduLength;
  _67 = RxNSduCfgPtr->AddressingFormat;
  if (_67 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  _68 = RxNSduCfgPtr->AddressingFormat;
  if (_68 != 3)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.232 = 1;
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.232 = 0;

  <bb 18> :
  _69 = (unsigned char) iftmp.232;
  _70 = _66 - _69;
  DataLength_FF = _70 + 254;
  # DEBUG BEGIN_STMT
  _71 = ChannelPtr->WftCounter;
  _72 = _71;
  _73 = _72 + 255;
  ChannelPtr->WftCounter = _73;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.233_74 = CanTp_CfgPtr;
  CanTp_CfgPtr.234_75 = CanTp_CfgPtr;
  _76 = CanTp_CfgPtr.234_75->RxNSduConfigPtr;
  _77 = (unsigned int) NSduId;
  _78 = _77 * 26;
  _79 = _76 + _78;
  _80 = CanTp_CfgPtr.233_74 + _79;
  _81 = _80->N_Br;
  _82 = (long unsigned int) _81;
  ChannelPtr->Ticks = _82;
  # DEBUG BEGIN_STMT
  _83 = ChannelPtr->WftCounter;
  if (_83 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _84 = ChannelPtr->Ticks;
  CanTp_CfgPtr.235_85 = CanTp_CfgPtr;
  CanTp_CfgPtr.236_86 = CanTp_CfgPtr;
  _87 = CanTp_CfgPtr.236_86->RxNSduConfigPtr;
  _88 = (unsigned int) NSduId;
  _89 = _88 * 26;
  _90 = _87 + _89;
  _91 = CanTp_CfgPtr.235_85 + _90;
  _92 = _91->N_Ar;
  _93 = (long unsigned int) _92;
  _94 = _84 + _93;
  ChannelPtr->Ticks = _94;

  <bb 20> :
  # DEBUG BEGIN_STMT
  _95 = ChannelPtr->ProcessedLength;
  _96 = (short unsigned int) DataLength_FF;
  if (_95 > _96)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 66;
  goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 65;

  <bb 23> :
  # DEBUG BEGIN_STMT
  CanTp_TransmitPostponedFrame (Tx_ChannelID);
  # DEBUG BEGIN_STMT
  goto <bb 25>; [INV]

  <bb 24> :
<L21>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 0, 1);
  # DEBUG BEGIN_STMT
  CanTp_TransmitPostponedFrame (Tx_ChannelID);
  # DEBUG BEGIN_STMT

  <bb 25> :
<L25>:
  return;

}


CanTp_PostTxConfirmation (struct CanTp_ChannelType * ChannelPtr)
{
  boolean PendingTxConf;
  PduIdType CanTpTxNPduConfId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PendingTxConf = 0;
  # DEBUG BEGIN_STMT
  CanTpTxNPduConfId = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->PostFlag;
  _2 = (unsigned int) _1;
  _3 = _2 & 2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CanTpTxNPduConfId = ChannelPtr->PostTxConfNPduId;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = ChannelPtr->PostFlag;
  _5 = _4 & 253;
  ChannelPtr->PostFlag = _5;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PendingTxConf = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (PendingTxConf != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  CanTp_ProcessTxPdu (ChannelPtr, CanTpTxNPduConfId);

  <bb 6> :
  return;

}


CanTp_TxConfirmation (PduIdType CanTpTxPduId)
{
  unsigned int D.9996;
  unsigned int D.9995;
  struct CanTp_ChannelType * ChannelPtrLcl;
  CanTp_ChType ChannelLcl;
  boolean PduHandled;
  boolean TxConfirmFlag;
  CanTp_ChType Channel;
  struct CanTp_ChannelType * ChannelPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TxConfirmFlag = 0;
  # DEBUG BEGIN_STMT
  PduHandled = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CanTp_InitVars.State;
  if (_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 64, 32);
  goto <bb 19>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.207_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.207_2->NumberTxConfNPdus;
  if (CanTpTxPduId < _3)
    goto <bb 5>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.208_4 = CanTp_CfgPtr;
  CanTp_CfgPtr.209_5 = CanTp_CfgPtr;
  _6 = CanTp_CfgPtr.209_5->TxNPduToTpChannelPtr;
  _7 = (unsigned int) CanTpTxPduId;
  _8 = _7 * 2;
  _9 = _6 + _8;
  _10 = CanTp_CfgPtr.208_4 + _9;
  Channel = _10->Tx_Chan;
  # DEBUG BEGIN_STMT
  if (Channel != 255)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.210_11 = CanTp_CfgPtr;
  CanTp_CfgPtr.211_12 = CanTp_CfgPtr;
  _13 = CanTp_CfgPtr.211_12->TxNPduToTpChannelPtr;
  _14 = (unsigned int) CanTpTxPduId;
  _15 = _14 * 2;
  _16 = _13 + _15;
  _17 = CanTp_CfgPtr.210_11 + _16;
  ChannelLcl = _17->Rx_Chan;
  # DEBUG BEGIN_STMT
  if (ChannelLcl != 255)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.212_18 = CanTp_CfgPtr;
  CanTp_CfgPtr.213_19 = CanTp_CfgPtr;
  _20 = CanTp_CfgPtr.213_19->TxNPduToTpChannelPtr;
  _21 = (unsigned int) CanTpTxPduId;
  _22 = _21 * 2;
  _23 = _20 + _22;
  _24 = CanTp_CfgPtr.212_18 + _23;
  _25 = _24->Rx_Chan;
  _26 = (int) _25;
  ChannelPtrLcl = &CanTp_Channel[_26];
  # DEBUG BEGIN_STMT
  _27 = ChannelPtrLcl->State;
  _28 = (int) _27;
  D.9995 = (unsigned int) _28;
  D.9996 = D.9995 + 4294967212;
  if (D.9996 <= 2)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.214_29 = CanTp_CfgPtr;
  CanTp_CfgPtr.215_30 = CanTp_CfgPtr;
  _31 = CanTp_CfgPtr.215_30->TxNPduToTpChannelPtr;
  _32 = (unsigned int) CanTpTxPduId;
  _33 = _32 * 2;
  _34 = _31 + _33;
  _35 = CanTp_CfgPtr.214_29 + _34;
  Channel = _35->Rx_Chan;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.216_36 = CanTp_CfgPtr;
  CanTp_CfgPtr.217_37 = CanTp_CfgPtr;
  _38 = CanTp_CfgPtr.217_37->TxNPduToTpChannelPtr;
  _39 = (unsigned int) CanTpTxPduId;
  _40 = _39 * 2;
  _41 = _38 + _40;
  _42 = CanTp_CfgPtr.216_36 + _41;
  Channel = _42->Rx_Chan;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _43 = (int) Channel;
  ChannelPtr = &CanTp_Channel[_43];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _44 = ChannelPtr->ChannelLockFlag;
  if (_44 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _45 = ChannelPtr->State;
  _46 = (unsigned int) _45;
  _47 = _46 & 152;
  if (_47 == 16)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _48 = ChannelPtr->PostFlag;
  _49 = _48 | 2;
  ChannelPtr->PostFlag = _49;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->PostTxConfNPduId = CanTpTxPduId;
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TxConfirmFlag = 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (TxConfirmFlag == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  CanTp_ProcessTxPdu (ChannelPtr, CanTpTxPduId);
  # DEBUG BEGIN_STMT
  CanTp_HandlePostponedFlags (ChannelPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  PduHandled = 0;

  <bb 17> :
  # DEBUG BEGIN_STMT
  if (PduHandled == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 64, 48);

  <bb 19> :
  # DEBUG BEGIN_STMT
  return;

}


CanTp_ProcessCopyTxData (struct CanTp_ChannelType * ChannelPtr, struct PduInfoType * PduInfoPtr)
{
  PduLengthType UL_BufferSize;
  BufReq_ReturnType Ret_CopyTxData;
  BufReq_ReturnType D.9972;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  UL_BufferSize = 0;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.204_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.205_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.205_2->TxNSduConfigPtr;
  _4 = ChannelPtr->NSduId;
  _5 = (unsigned int) _4;
  _6 = _5 * 24;
  _7 = _3 + _6;
  _8 = CanTp_CfgPtr.204_1 + _7;
  _9 = _8->IPduConfId;
  Ret_CopyTxData = PduR_CanTpCopyTxData (_9, PduInfoPtr, 0B, &UL_BufferSize);
  # DEBUG BEGIN_STMT
  if (Ret_CopyTxData == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Ret_CopyTxData == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  UL_BufferSize.206_10 = UL_BufferSize;
  ChannelPtr->ActualBufferSize = UL_BufferSize.206_10;

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.9972 = Ret_CopyTxData;
  UL_BufferSize = {CLOBBER};
  return D.9972;

}


CanTp_RequestTxFrameData (struct CanTp_ChannelType * ChannelPtr)
{
  boolean FrameReadyToSend;
  uint8 ReqTxFrameBytes;
  const PduLengthType RemainingMsgBytes;
  struct PduInfoType PduInfo;
  BufReq_ReturnType Ret_CopyTxData;
  BufReq_ReturnType D.9966;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Ret_CopyTxData = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->CanIfDLC;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CanTp_PreparexF (ChannelPtr);

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = ChannelPtr->ActualBufferSize;
  if (_2 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  PduInfo.SduDataPtr = 0B;
  # DEBUG BEGIN_STMT
  PduInfo.SduLength = 0;
  # DEBUG BEGIN_STMT
  Ret_CopyTxData = CanTp_ProcessCopyTxData (ChannelPtr, &PduInfo);
  # DEBUG BEGIN_STMT
  if (Ret_CopyTxData == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _3 = ChannelPtr->ActualBufferSize;
  if (_3 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Ret_CopyTxData = 2;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _4 = ChannelPtr->ActualBufferSize;
  if (_4 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _5 = ChannelPtr->TotalLength;
  _6 = ChannelPtr->ProcessedLength;
  RemainingMsgBytes = _5 - _6;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.202_7 = CanTp_CfgPtr;
  CanTp_CfgPtr.203_8 = CanTp_CfgPtr;
  _9 = CanTp_CfgPtr.203_8->TxNSduConfigPtr;
  _10 = ChannelPtr->NSduId;
  _11 = (unsigned int) _10;
  _12 = _11 * 24;
  _13 = _9 + _12;
  _14 = CanTp_CfgPtr.202_7 + _13;
  _15 = _14->LSduMaxLength;
  _16 = ChannelPtr->CanIfDLC;
  ReqTxFrameBytes = _15 - _16;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _17 = (short unsigned int) ReqTxFrameBytes;
  if (RemainingMsgBytes < _17)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ReqTxFrameBytes = (uint8) RemainingMsgBytes;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _18 = (short unsigned int) ReqTxFrameBytes;
  _19 = ChannelPtr->ActualBufferSize;
  if (_18 > _19)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _20 = ChannelPtr->ActualBufferSize;
  ReqTxFrameBytes = (uint8) _20;
  # DEBUG BEGIN_STMT
  FrameReadyToSend = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  FrameReadyToSend = 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  _21 = (short unsigned int) ReqTxFrameBytes;
  PduInfo.SduLength = _21;
  # DEBUG BEGIN_STMT
  _22 = ChannelPtr->CanIfDLC;
  _23 = (int) _22;
  _24 = &ChannelPtr->CanIfData[_23];
  PduInfo.SduDataPtr = _24;
  # DEBUG BEGIN_STMT
  Ret_CopyTxData = CanTp_ProcessCopyTxData (ChannelPtr, &PduInfo);
  # DEBUG BEGIN_STMT
  if (Ret_CopyTxData == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _25 = ChannelPtr->CanIfDLC;
  _26 = ReqTxFrameBytes + _25;
  ChannelPtr->CanIfDLC = _26;
  # DEBUG BEGIN_STMT
  _27 = ChannelPtr->ProcessedLength;
  _28 = (short unsigned int) ReqTxFrameBytes;
  _29 = _27 + _28;
  ChannelPtr->ProcessedLength = _29;
  # DEBUG BEGIN_STMT
  if (FrameReadyToSend == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Ret_CopyTxData = 2;

  <bb 17> :
  # DEBUG BEGIN_STMT
  D.9966 = Ret_CopyTxData;
  PduInfo = {CLOBBER};
  return D.9966;

}


CanTp_TxStateHandling (struct CanTp_ChannelType * ChannelPtr, boolean CFBufferRequested)
{
  CanTp_ChStateType CurrentState;
  CanTp_ChStateType NextState;
  CanTp_ChStateType CurrentState;
  CanTp_ChStateType NextState;
  struct CanTp_ChannelType * ChPtr;
  CanTp_ChStateType ChanState;
  const PduIdType NSduId;
  struct CanTp_ChannelType * Rx_ChannelPtr;
  boolean Ret_Postponed;
  CanTp_ChType Rx_ChannelID;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Rx_ChannelID = 255;
  # DEBUG BEGIN_STMT
  Ret_Postponed = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->State;
  _2 = (int) _1;
  switch (_2) <default: <L36> [INV], case 96 ... 98: <L0> [INV], case 122: <L25> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  NSduId = ChannelPtr->NSduId;
  # DEBUG BEGIN_STMT
  if (CFBufferRequested != 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = CanTp_RequestTxFrameData (ChannelPtr);
  RetVal_DataReq = _3;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal_DataReq.192_4 = RetVal_DataReq;
  switch (RetVal_DataReq.192_4) <default: <L19> [INV], case 0: <L6> [INV], case 2: <L36> [INV]>

  <bb 6> :
<L6>:
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.193_5 = CanTp_CfgPtr;
  CanTp_CfgPtr.194_6 = CanTp_CfgPtr;
  _7 = CanTp_CfgPtr.194_6->TxNSduConfigPtr;
  _8 = ChannelPtr->NSduId;
  _9 = (unsigned int) _8;
  _10 = _9 * 24;
  _11 = _7 + _10;
  _12 = CanTp_CfgPtr.193_5 + _11;
  Rx_ChannelID = _12->Rx_Channel;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Ret_Postponed = 0;
  # DEBUG BEGIN_STMT
  if (Rx_ChannelID != 255)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _13 = (int) Rx_ChannelID;
  ChPtr = &CanTp_Channel[_13];
  # DEBUG BEGIN_STMT
  ChanState = ChPtr->State;
  # DEBUG BEGIN_STMT
  _14 = (unsigned int) ChanState;
  _15 = _14 & 152;
  if (_15 == 16)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Ret_Postponed = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.195_16 = CanTp_CfgPtr;
  CanTp_CfgPtr.196_17 = CanTp_CfgPtr;
  _18 = CanTp_CfgPtr.196_17->TxNSduConfigPtr;
  _19 = (unsigned int) NSduId;
  _20 = _19 * 24;
  _21 = _18 + _20;
  _22 = CanTp_CfgPtr.195_16 + _21;
  _23 = _22->PaddingActivation;
  CanTp_CfgPtr.197_24 = CanTp_CfgPtr;
  CanTp_CfgPtr.198_25 = CanTp_CfgPtr;
  _26 = CanTp_CfgPtr.198_25->TxNSduConfigPtr;
  _27 = (unsigned int) NSduId;
  _28 = _27 * 24;
  _29 = _26 + _28;
  _30 = CanTp_CfgPtr.197_24 + _29;
  _31 = _30->CanIdType;
  CanTp_PreparePadding (ChannelPtr, _23, _31, 0B);
  # DEBUG BEGIN_STMT
  if (Ret_Postponed == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _32 = (int) Rx_ChannelID;
  Rx_ChannelPtr = &CanTp_Channel[_32];
  # DEBUG BEGIN_STMT
  _33 = ChannelPtr->State;
  _34 = _33 + 160;
  if (_34 <= 1)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _35 = ChannelPtr->Ticks;
  _36 = Rx_ChannelPtr->Ticks;
  if (_35 < _36)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _37 = Rx_ChannelPtr->Ticks;
  ChannelPtr->Ticks = _37;

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CurrentState = ChannelPtr->State;
  # DEBUG BEGIN_STMT
  NextState = CurrentState & 103;
  # DEBUG BEGIN_STMT
  NextState = NextState | 136;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = NextState;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 22>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.199_38 = CanTp_CfgPtr;
  CanTp_CfgPtr.200_39 = CanTp_CfgPtr;
  _40 = CanTp_CfgPtr.200_39->TxNSduConfigPtr;
  _41 = (unsigned int) NSduId;
  _42 = _41 * 24;
  _43 = _40 + _42;
  _44 = CanTp_CfgPtr.199_38 + _43;
  _45 = _44->N_As;
  _46 = (long unsigned int) _45;
  ChannelPtr->Ticks = _46;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CurrentState = ChannelPtr->State;
  # DEBUG BEGIN_STMT
  NextState = CurrentState & 103;
  # DEBUG BEGIN_STMT
  NextState = NextState | 16;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = NextState;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_TransmitFrame (ChannelPtr, 0B);
  goto <bb 22>; [INV]

  <bb 15> :
<L19>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  # DEBUG BEGIN_STMT
  goto <bb 22>; [INV]

  <bb 16> :
<L25>:
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 98;
  # DEBUG BEGIN_STMT
  _47 = CanTp_RequestTxFrameData (ChannelPtr);
  RetVal_DataReq = _47;
  # DEBUG BEGIN_STMT
  RetVal_DataReq.201_48 = RetVal_DataReq;
  switch (RetVal_DataReq.201_48) <default: <L30> [INV], case 0: <L26> [INV], case 2: <L29> [INV]>

  <bb 17> :
<L26>:
  # DEBUG BEGIN_STMT
  _49 = ChannelPtr->MfCounterTicks;
  _50 = ChannelPtr->Ticks;
  if (_49 > _50)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _51 = ChannelPtr->MfCounterTicks;
  ChannelPtr->Ticks = _51;

  <bb 19> :
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 106;
  # DEBUG BEGIN_STMT
  goto <bb 22>; [INV]

  <bb 20> :
<L29>:
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 122;
  # DEBUG BEGIN_STMT
  goto <bb 22>; [INV]

  <bb 21> :
<L30>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  # DEBUG BEGIN_STMT

  <bb 22> :
<L36>:
  return;

}


CanTp_TransmitPostponedFlowControl (CanTp_ChType RxChannelID)
{
  struct CanTp_ChannelType * Rx_ChannelPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Rx_ChannelPtr = 0B;
  # DEBUG BEGIN_STMT
  if (RxChannelID != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) RxChannelID;
  Rx_ChannelPtr = &CanTp_Channel[_1];
  # DEBUG BEGIN_STMT
  _2 = Rx_ChannelPtr->State;
  _3 = (int) _2;
  switch (_3) <default: <L7> [INV], case 204: <L2> [INV], case 205: <L3> [INV], case 206: <L1> [INV]>

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  Rx_ChannelPtr->State = 78;
  # DEBUG BEGIN_STMT
  CanTp_PrepareFC (Rx_ChannelPtr, 49);
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  Rx_ChannelPtr->State = 76;
  # DEBUG BEGIN_STMT
  CanTp_PrepareFC (Rx_ChannelPtr, 48);
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  Rx_ChannelPtr->State = 77;
  # DEBUG BEGIN_STMT
  CanTp_PrepareFC (Rx_ChannelPtr, 50);
  # DEBUG BEGIN_STMT

  <bb 7> :
<L7>:
  return;

}


CanTp_TransmitPostponedFrame (CanTp_TxChannelType TxChannelID)
{
  CanTp_ChStateType CurrentState;
  CanTp_ChStateType NextState;
  struct CanTp_ChannelType * Tx_ChannelPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Tx_ChannelPtr = 0B;
  # DEBUG BEGIN_STMT
  if (TxChannelID != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) TxChannelID;
  Tx_ChannelPtr = &CanTp_Channel[_1];
  # DEBUG BEGIN_STMT
  _2 = Tx_ChannelPtr->State;
  _3 = (unsigned int) _2;
  _4 = _3 & 152;
  if (_4 == 136)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = Tx_ChannelPtr->State;
  _6 = _5 & 119;
  Tx_ChannelPtr->State = _6;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.190_7 = CanTp_CfgPtr;
  CanTp_CfgPtr.191_8 = CanTp_CfgPtr;
  _9 = CanTp_CfgPtr.191_8->TxNSduConfigPtr;
  _10 = Tx_ChannelPtr->NSduId;
  _11 = (unsigned int) _10;
  _12 = _11 * 24;
  _13 = _9 + _12;
  _14 = CanTp_CfgPtr.190_7 + _13;
  _15 = _14->N_As;
  _16 = (long unsigned int) _15;
  Tx_ChannelPtr->Ticks = _16;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CurrentState = Tx_ChannelPtr->State;
  # DEBUG BEGIN_STMT
  NextState = CurrentState & 103;
  # DEBUG BEGIN_STMT
  NextState = NextState | 16;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Tx_ChannelPtr->State = NextState;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_TransmitFrame (Tx_ChannelPtr, 0B);

  <bb 5> :
  return;

}


CanTp_TransmitFrame (struct CanTp_ChannelType * ChannelPtr, struct PduInfoType * FCBufferPtr)
{
  CanTp_ChStateType CurrentState;
  CanTp_ChStateType NextState;
  Std_ReturnType CanIfRet;
  PduIdType LSduId;
  const PduIdType NSduId;
  struct PduInfoType PduInfo;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NSduId = ChannelPtr->NSduId;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->State;
  _2 = (unsigned int) _1;
  _3 = _2 & 96;
  if (_3 == 64)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.186_4 = CanTp_CfgPtr;
  CanTp_CfgPtr.187_5 = CanTp_CfgPtr;
  _6 = CanTp_CfgPtr.187_5->RxNSduConfigPtr;
  _7 = (unsigned int) NSduId;
  _8 = _7 * 26;
  _9 = _6 + _8;
  _10 = CanTp_CfgPtr.186_4 + _9;
  LSduId = _10->LSduIdFc;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.188_11 = CanTp_CfgPtr;
  CanTp_CfgPtr.189_12 = CanTp_CfgPtr;
  _13 = CanTp_CfgPtr.189_12->TxNSduConfigPtr;
  _14 = (unsigned int) NSduId;
  _15 = _14 * 24;
  _16 = _13 + _15;
  _17 = CanTp_CfgPtr.188_11 + _16;
  LSduId = _17->LSduIdxF;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (FCBufferPtr != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _18 = FCBufferPtr->SduDataPtr;
  PduInfo.SduDataPtr = _18;
  # DEBUG BEGIN_STMT
  _19 = FCBufferPtr->SduLength;
  PduInfo.SduLength = _19;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _20 = ChannelPtr->CanIfDLC;
  _21 = (short unsigned int) _20;
  PduInfo.SduLength = _21;
  # DEBUG BEGIN_STMT
  _22 = &ChannelPtr->CanIfData;
  PduInfo.SduDataPtr = _22;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CurrentState = ChannelPtr->State;
  # DEBUG BEGIN_STMT
  NextState = CurrentState & 103;
  # DEBUG BEGIN_STMT
  NextState = NextState | 16;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = NextState;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanIfRet = CanIf_Transmit (LSduId, &PduInfo);
  # DEBUG BEGIN_STMT
  if (CanIfRet == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (FCBufferPtr == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ChannelPtr->CanIfDLC = 0;
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);

  <bb 12> :
  PduInfo = {CLOBBER};
  return;

}


CanTp_Transmit (PduIdType CanTpTxSduId, const struct PduInfoType * CanTpTxInfoPtr)
{
  uint8 MaxUnSegMsgLength;
  uint8 NPciSize_SF;
  Std_ReturnType ValidLength;
  Std_ReturnType ChannelFound;
  CanTp_TxChannelType Channel;
  struct CanTp_ChannelType * ChannelPtr;
  Std_ReturnType Ret;
  Std_ReturnType D.9909;
  int iftmp.173;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Ret = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CanTp_InitVars.State;
  if (_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 3, 32);
  goto <bb 28>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.166_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.166_2->NumberTxNSdus;
  if (CanTpTxSduId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 3, 2);
  goto <bb 28>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (CanTpTxInfoPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 3, 3);
  goto <bb 28>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _4 = CanTpTxInfoPtr->SduLength;
  if (_4 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 3, 112);
  goto <bb 28>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelFound = 1;
  # DEBUG BEGIN_STMT
  ValidLength = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.167_5 = CanTp_CfgPtr;
  CanTp_CfgPtr.168_6 = CanTp_CfgPtr;
  _7 = CanTp_CfgPtr.168_6->TxNSduConfigPtr;
  _8 = (unsigned int) CanTpTxSduId;
  _9 = _8 * 24;
  _10 = _7 + _9;
  _11 = CanTp_CfgPtr.167_5 + _10;
  Channel = _11->Channel;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = (int) Channel;
  ChannelPtr = &CanTp_Channel[_12];
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.169_13 = CanTp_CfgPtr;
  CanTp_CfgPtr.170_14 = CanTp_CfgPtr;
  _15 = CanTp_CfgPtr.170_14->TxNSduConfigPtr;
  _16 = (unsigned int) CanTpTxSduId;
  _17 = _16 * 24;
  _18 = _15 + _17;
  _19 = CanTp_CfgPtr.169_13 + _18;
  _20 = _19->LSduMaxLength;
  if (_20 > 8)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  NPciSize_SF = 2;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  NPciSize_SF = 1;

  <bb 13> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.171_21 = CanTp_CfgPtr;
  CanTp_CfgPtr.172_22 = CanTp_CfgPtr;
  _23 = CanTp_CfgPtr.172_22->TxNSduConfigPtr;
  _24 = (unsigned int) CanTpTxSduId;
  _25 = _24 * 24;
  _26 = _23 + _25;
  _27 = CanTp_CfgPtr.171_21 + _26;
  _28 = _27->LSduMaxLength;
  _29 = _28 - NPciSize_SF;
  CanTp_CfgPtr.174_30 = CanTp_CfgPtr;
  CanTp_CfgPtr.175_31 = CanTp_CfgPtr;
  _32 = CanTp_CfgPtr.175_31->TxNSduConfigPtr;
  _33 = (unsigned int) CanTpTxSduId;
  _34 = _33 * 24;
  _35 = _32 + _34;
  _36 = CanTp_CfgPtr.174_30 + _35;
  _37 = _36->AddressingFormat;
  if (_37 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  CanTp_CfgPtr.176_38 = CanTp_CfgPtr;
  CanTp_CfgPtr.177_39 = CanTp_CfgPtr;
  _40 = CanTp_CfgPtr.177_39->TxNSduConfigPtr;
  _41 = (unsigned int) CanTpTxSduId;
  _42 = _41 * 24;
  _43 = _40 + _42;
  _44 = CanTp_CfgPtr.176_38 + _43;
  _45 = _44->AddressingFormat;
  if (_45 != 3)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.173 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.173 = 0;

  <bb 17> :
  _46 = (unsigned char) iftmp.173;
  MaxUnSegMsgLength = _29 - _46;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _47 = ChannelPtr->State;
  if (_47 == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 18> :
  _48 = ChannelPtr->ChannelLockFlag;
  if (_48 == 0)
    goto <bb 19>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _49 = CanTpTxInfoPtr->SduLength;
  _50 = (short unsigned int) MaxUnSegMsgLength;
  if (_49 <= _50)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  ChannelPtr->NSduId = CanTpTxSduId;
  # DEBUG BEGIN_STMT
  _51 = CanTpTxInfoPtr->SduLength;
  ChannelPtr->TotalLength = _51;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.178_52 = CanTp_CfgPtr;
  CanTp_CfgPtr.179_53 = CanTp_CfgPtr;
  _54 = CanTp_CfgPtr.179_53->TxNSduConfigPtr;
  _55 = (unsigned int) CanTpTxSduId;
  _56 = _55 * 24;
  _57 = _54 + _56;
  _58 = CanTp_CfgPtr.178_52 + _57;
  _59 = _58->N_Cs;
  _60 = (long unsigned int) _59;
  ChannelPtr->Ticks = _60;
  # DEBUG BEGIN_STMT
  CanTp_NonIdleChannelCounter.180_61 = CanTp_NonIdleChannelCounter;
  _62 = CanTp_NonIdleChannelCounter.180_61 + 1;
  CanTp_NonIdleChannelCounter = _62;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 96;
  # DEBUG BEGIN_STMT
  ValidLength = 0;
  goto <bb 23>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.181_63 = CanTp_CfgPtr;
  CanTp_CfgPtr.182_64 = CanTp_CfgPtr;
  _65 = CanTp_CfgPtr.182_64->TxNSduConfigPtr;
  _66 = (unsigned int) CanTpTxSduId;
  _67 = _66 * 24;
  _68 = _65 + _67;
  _69 = CanTp_CfgPtr.181_63 + _68;
  _70 = _69->Tatype;
  if (_70 != 1)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  ChannelPtr->NSduId = CanTpTxSduId;
  # DEBUG BEGIN_STMT
  _71 = CanTpTxInfoPtr->SduLength;
  ChannelPtr->TotalLength = _71;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.183_72 = CanTp_CfgPtr;
  CanTp_CfgPtr.184_73 = CanTp_CfgPtr;
  _74 = CanTp_CfgPtr.184_73->TxNSduConfigPtr;
  _75 = (unsigned int) CanTpTxSduId;
  _76 = _75 * 24;
  _77 = _74 + _76;
  _78 = CanTp_CfgPtr.183_72 + _77;
  _79 = _78->N_Cs;
  _80 = (long unsigned int) _79;
  ChannelPtr->Ticks = _80;
  # DEBUG BEGIN_STMT
  CanTp_NonIdleChannelCounter.185_81 = CanTp_NonIdleChannelCounter;
  _82 = CanTp_NonIdleChannelCounter.185_81 + 1;
  CanTp_NonIdleChannelCounter = _82;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 97;
  # DEBUG BEGIN_STMT
  ValidLength = 0;

  <bb 23> :
  # DEBUG BEGIN_STMT
  Ret = 0;

  <bb 24> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Ret == 0)
    goto <bb 25>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  if (ValidLength == 1)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 3, 144);
  # DEBUG BEGIN_STMT
  Ret = 1;

  <bb 27> :
  # DEBUG BEGIN_STMT
  CanTp_HandlePostponedFlags (ChannelPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;

  <bb 28> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9909 = Ret;
  return D.9909;

}


CanTp_StopChannel (struct CanTp_ChannelType * ChannelPtr, CanTp_ULIndicationType ULIndication, NotifResultType Result)
{
  PduIdType NSduID;
  boolean CallPduRCanTpTxConfirmation;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CallPduRCanTpTxConfirmation = 0;
  # DEBUG BEGIN_STMT
  NSduID = ChannelPtr->NSduId;
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->State;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (ULIndication == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = ChannelPtr->State;
  _3 = (unsigned int) _2;
  _4 = _3 & 96;
  if (_4 == 64)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.162_5 = CanTp_CfgPtr;
  CanTp_CfgPtr.163_6 = CanTp_CfgPtr;
  _7 = CanTp_CfgPtr.163_6->RxNSduConfigPtr;
  _8 = ChannelPtr->NSduId;
  _9 = (unsigned int) _8;
  _10 = _9 * 26;
  _11 = _7 + _10;
  _12 = CanTp_CfgPtr.162_5 + _11;
  _13 = _12->IPduId;
  PduR_CanTpRxIndication (_13, Result);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CallPduRCanTpTxConfirmation = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = ChannelPtr->PostRxIndFrameType;
  if (_14 == 32)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = ChannelPtr->PostFlag;
  _16 = _15 & 254;
  ChannelPtr->PostFlag = _16;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_InitChannelPtr (ChannelPtr);
  # DEBUG BEGIN_STMT
  if (CallPduRCanTpTxConfirmation == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _17 = ChannelPtr->ChannelLockFlag;
  if (_17 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (CallPduRCanTpTxConfirmation == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.164_18 = CanTp_CfgPtr;
  CanTp_CfgPtr.165_19 = CanTp_CfgPtr;
  _20 = CanTp_CfgPtr.165_19->TxNSduConfigPtr;
  _21 = (unsigned int) NSduID;
  _22 = _21 * 24;
  _23 = _20 + _22;
  _24 = CanTp_CfgPtr.164_18 + _23;
  _25 = _24->IPduConfId;
  PduR_CanTpTxConfirmation (_25, Result);

  <bb 14> :
  return;

}


CanTp_STminTimeoutHandling (struct CanTp_ChannelType * ChannelPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->State;
  if (_1 == 106)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 98;
  # DEBUG BEGIN_STMT
  CanTp_TxStateHandling (ChannelPtr, 1);
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = ChannelPtr->State;
  if (_2 == 122)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 98;
  # DEBUG BEGIN_STMT
  CanTp_TxStateHandling (ChannelPtr, 0);

  <bb 6> :
  # DEBUG BEGIN_STMT
  return;

}


CanTp_PostSTminCallback (struct CanTp_ChannelType * ChannelPtr)
{
  boolean PendingSTminTimeout;

  <bb 2> :
  # DEBUG BEGIN_STMT
  PendingSTminTimeout = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->PostFlag;
  _2 = (unsigned int) _1;
  _3 = _2 & 4;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = ChannelPtr->PostFlag;
  _5 = _4 & 251;
  ChannelPtr->PostFlag = _5;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PendingSTminTimeout = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (PendingSTminTimeout != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_STminTimeoutHandling (ChannelPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  return;

}


CanTp_STminCallback (CanTp_ChType Channel)
{
  boolean STminCallbackFlag;
  struct CanTp_ChannelType * ChannelPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  STminCallbackFlag = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) Channel;
  ChannelPtr = &CanTp_Channel[_1];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ChannelPtr->ChannelLockFlag;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = ChannelPtr->PostFlag;
  _4 = _3 | 4;
  ChannelPtr->PostFlag = _4;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  STminCallbackFlag = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (STminCallbackFlag == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanTp_STminTimeoutHandling (ChannelPtr);
  # DEBUG BEGIN_STMT
  CanTp_HandlePostponedFlags (ChannelPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


CanTp_ValidateNAI (struct CanTp_ChannelType * ChannelPtr, PduIdType NSduId, PduIdType CanDataNAI, uint8 FrameType)
{
  PduIdType N_AI;
  boolean IgnoreMsgFlag;
  PduIdType NPduId;
  uint8 AddressingFormat;
  boolean D.9627;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IgnoreMsgFlag = 0;
  # DEBUG BEGIN_STMT
  if (FrameType == 48)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.119_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.120_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.120_2->TxNSduConfigPtr;
  _4 = (unsigned int) NSduId;
  _5 = _4 * 24;
  _6 = _3 + _5;
  _7 = CanTp_CfgPtr.119_1 + _6;
  NPduId = _7->NPduIdFc;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.121_8 = CanTp_CfgPtr;
  CanTp_CfgPtr.122_9 = CanTp_CfgPtr;
  _10 = CanTp_CfgPtr.122_9->RxNPduTablePtr;
  CanTp_CfgPtr.123_11 = CanTp_CfgPtr;
  CanTp_CfgPtr.124_12 = CanTp_CfgPtr;
  _13 = CanTp_CfgPtr.124_12->RxNPduLookupTablePtr;
  _14 = (unsigned int) NPduId;
  _15 = _14 * 2;
  _16 = _13 + _15;
  _17 = CanTp_CfgPtr.123_11 + _16;
  _18 = *_17;
  _19 = (unsigned int) _18;
  _20 = _19 * 8;
  _21 = _10 + _20;
  _22 = CanTp_CfgPtr.121_8 + _21;
  AddressingFormat = _22->AddressingFormat;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.125_23 = CanTp_CfgPtr;
  CanTp_CfgPtr.126_24 = CanTp_CfgPtr;
  _25 = CanTp_CfgPtr.126_24->RxNSduConfigPtr;
  _26 = (unsigned int) NSduId;
  _27 = _26 * 26;
  _28 = _25 + _27;
  _29 = CanTp_CfgPtr.125_23 + _28;
  NPduId = _29->NPduIdxF;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.127_30 = CanTp_CfgPtr;
  CanTp_CfgPtr.128_31 = CanTp_CfgPtr;
  _32 = CanTp_CfgPtr.128_31->RxNSduConfigPtr;
  _33 = (unsigned int) NSduId;
  _34 = _33 * 26;
  _35 = _32 + _34;
  _36 = CanTp_CfgPtr.127_30 + _35;
  AddressingFormat = _36->AddressingFormat;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (FrameType == 16)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (FrameType == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  N_AI = 0;
  # DEBUG BEGIN_STMT
  if (AddressingFormat == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  N_AI = NPduId;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  N_AI = CanDataNAI;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _37 = ChannelPtr->ConnectionFlags;
  _38 = (unsigned int) _37;
  _39 = _38 & 2;
  if (_39 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  ChannelPtr->RxNAILock = N_AI;
  goto <bb 14>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _40 = ChannelPtr->RxNAILock;
  if (N_AI != _40)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  IgnoreMsgFlag = 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  D.9627 = IgnoreMsgFlag;
  return D.9627;

}


CanTp_ValidateFCLength (PduIdType NSduId, PduLengthType SduLength, const uint8 AddressingFormat)
{
  PduLengthType FCMinLength;
  PduLengthType NPduMaxLength;
  boolean FCValidLength;
  boolean D.9611;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FCValidLength = 0;
  # DEBUG BEGIN_STMT
  NPduMaxLength = 8;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.111_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.112_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.112_2->TxNSduConfigPtr;
  _4 = (unsigned int) NSduId;
  _5 = _4 * 24;
  _6 = _3 + _5;
  _7 = CanTp_CfgPtr.111_1 + _6;
  _8 = _7->PaddingActivation;
  if (_8 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (AddressingFormat == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  FCMinLength = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  FCMinLength = 4;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (SduLength >= FCMinLength)
    goto <bb 7>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 7> :
  if (SduLength <= NPduMaxLength)
    goto <bb 8>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FCValidLength = 1;
  goto <bb 18>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.113_9 = CanTp_CfgPtr;
  CanTp_CfgPtr.114_10 = CanTp_CfgPtr;
  _11 = CanTp_CfgPtr.114_10->TxNSduConfigPtr;
  _12 = (unsigned int) NSduId;
  _13 = _12 * 24;
  _14 = _11 + _13;
  _15 = CanTp_CfgPtr.113_9 + _14;
  _16 = _15->PaddingActivation;
  if (_16 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (SduLength > 8)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.115_17 = CanTp_CfgPtr;
  CanTp_CfgPtr.116_18 = CanTp_CfgPtr;
  _19 = CanTp_CfgPtr.116_18->TxNSduConfigPtr;
  _20 = (unsigned int) NSduId;
  _21 = _20 * 24;
  _22 = _19 + _21;
  _23 = CanTp_CfgPtr.115_17 + _22;
  _24 = _23->LSduMaxLength;
  NPduMaxLength = (PduLengthType) _24;

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (SduLength == NPduMaxLength)
    goto <bb 13>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  FCValidLength = 1;
  goto <bb 18>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.117_25 = CanTp_CfgPtr;
  CanTp_CfgPtr.118_26 = CanTp_CfgPtr;
  _27 = CanTp_CfgPtr.118_26->TxNSduConfigPtr;
  _28 = (unsigned int) NSduId;
  _29 = _28 * 24;
  _30 = _27 + _29;
  _31 = CanTp_CfgPtr.117_25 + _30;
  _32 = _31->CanIdType;
  _33 = _32 + 254;
  if (_33 <= 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  NPduMaxLength = 64;

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (SduLength == NPduMaxLength)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FCValidLength = 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  D.9611 = FCValidLength;
  return D.9611;

}


CanTp_CheckNPduLength (PduLengthType NPduLength, uint8 Padding, uint8 MaxLength)
{
  boolean ValidNPduLength;
  boolean D.9725;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Padding == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (short unsigned int) MaxLength;
  if (NPduLength == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 1;
  goto <bb 27>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 0;
  goto <bb 27>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (NPduLength <= 7)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (Padding == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 0;
  goto <bb 27>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 1;
  goto <bb 27>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (NPduLength == 8)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 1;
  goto <bb 27>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (NPduLength == 12)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 1;
  goto <bb 27>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (NPduLength == 16)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 1;
  goto <bb 27>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (NPduLength == 20)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 1;
  goto <bb 27>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  if (NPduLength == 24)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 1;
  goto <bb 27>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  if (NPduLength == 32)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 1;
  goto <bb 27>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  if (NPduLength == 48)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 1;
  goto <bb 27>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  if (NPduLength == 64)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 1;
  goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  ValidNPduLength = 0;

  <bb 27> :
  # DEBUG BEGIN_STMT
  D.9725 = ValidNPduLength;
  return D.9725;

}


CanTp_ProcessReceivedFC (const struct PduInfoType * CanTpRxPduPtr, struct CanTp_ChannelType * ChannelPtr)
{
  uint8 DataIndex;
  const uint8 * const CanDataPtr;
  boolean ExpectedFrame;
  const uint8 StartPosition_FC_N_PCI;
  const struct CanTp_TxNSduConfigType * const TxNSduCfgPtr;
  int iftmp.159;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.157_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.158_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.158_2->TxNSduConfigPtr;
  _4 = ChannelPtr->NSduId;
  _5 = (unsigned int) _4;
  _6 = _5 * 24;
  _7 = _3 + _6;
  TxNSduCfgPtr = CanTp_CfgPtr.157_1 + _7;
  # DEBUG BEGIN_STMT
  _8 = TxNSduCfgPtr->AddressingFormat;
  if (_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _9 = TxNSduCfgPtr->AddressingFormat;
  if (_9 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.159 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.159 = 0;

  <bb 6> :
  StartPosition_FC_N_PCI = (const uint8) iftmp.159;
  # DEBUG BEGIN_STMT
  _10 = ChannelPtr->State;
  _11 = (int) _10;
  switch (_11) <default: <L33> [INV], case 113 ... 114: <L4> [INV], case 228: <L4> [INV]>

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  ExpectedFrame = 0;
  # DEBUG BEGIN_STMT
  _12 = ChannelPtr->BlockSize;
  if (_12 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ExpectedFrame = 0;
  goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _13 = ChannelPtr->BlockSize;
  _14 = ChannelPtr->ProcessedBlockFrames;
  if (_13 != _14)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ExpectedFrame = 0;
  goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _15 = ChannelPtr->TotalLength;
  _16 = ChannelPtr->ProcessedLength;
  if (_15 == _16)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  ExpectedFrame = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  ExpectedFrame = 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (ExpectedFrame != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  CanDataPtr = CanTpRxPduPtr->SduDataPtr;
  # DEBUG BEGIN_STMT
  _17 = (sizetype) StartPosition_FC_N_PCI;
  _18 = CanDataPtr + _17;
  _19 = *_18;
  _20 = (int) _19;
  switch (_20) <default: <L28> [INV], case 48: <L17> [INV], case 49: <L26> [INV], case 50: <L27> [INV]>

  <bb 16> :
<L17>:
  # DEBUG BEGIN_STMT
  DataIndex = StartPosition_FC_N_PCI;
  # DEBUG BEGIN_STMT
  ChannelPtr->ProcessedBlockFrames = 0;
  # DEBUG BEGIN_STMT
  DataIndex.160_21 = DataIndex;
  DataIndex = DataIndex.160_21 + 1;
  # DEBUG BEGIN_STMT
  _22 = (sizetype) DataIndex;
  _23 = CanDataPtr + _22;
  _24 = *_23;
  ChannelPtr->BlockSize = _24;
  # DEBUG BEGIN_STMT
  DataIndex.161_25 = DataIndex;
  DataIndex = DataIndex.161_25 + 1;
  # DEBUG BEGIN_STMT
  _26 = (sizetype) DataIndex;
  _27 = CanDataPtr + _26;
  _28 = *_27;
  ChannelPtr->StMin = _28;
  # DEBUG BEGIN_STMT
  _29 = ChannelPtr->StMin;
  _30 = _29 + 128;
  if (_30 <= 112)
    goto <bb 18>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _31 = ChannelPtr->StMin;
  if (_31 > 249)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  ChannelPtr->StMin = 127;

  <bb 19> :
  # DEBUG BEGIN_STMT
  _32 = ChannelPtr->StMin;
  if (_32 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _33 = ChannelPtr->ConnectionFlags;
  _34 = _33 | 1;
  ChannelPtr->ConnectionFlags = _34;

  <bb 21> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _35 = TxNSduCfgPtr->N_Cs;
  _36 = (long unsigned int) _35;
  ChannelPtr->Ticks = _36;
  # DEBUG BEGIN_STMT
  _37 = ChannelPtr->State;
  if (_37 == 228)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 98;
  # DEBUG BEGIN_STMT
  CanTp_TxStateHandling (ChannelPtr, 0);
  goto <bb 27>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = ChannelPtr->ConnectionFlags;
  _39 = _38 | 16;
  ChannelPtr->ConnectionFlags = _39;
  goto <bb 27>; [INV]

  <bb 24> :
<L26>:
  # DEBUG BEGIN_STMT
  _40 = TxNSduCfgPtr->N_Bs;
  _41 = (long unsigned int) _40;
  ChannelPtr->Ticks = _41;
  # DEBUG BEGIN_STMT
  goto <bb 27>; [INV]

  <bb 25> :
<L27>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 10);
  # DEBUG BEGIN_STMT
  goto <bb 27>; [INV]

  <bb 26> :
<L28>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 6);
  # DEBUG BEGIN_STMT

  <bb 27> :
<L33>:
  return;

}


CanTp_ProcessReceivedLastCF (const struct PduInfoType * CanTpRxPduPtr, struct CanTp_ChannelType * ChannelPtr, uint8 DataLength)
{
  uint8 * const NSduDataPtr;
  BufReq_ReturnType Ret_CopyRxData;
  const uint8 MinReqSduLength;
  const uint8 StartPosition_CF_N_PCI;
  const struct CanTp_RxNSduConfigType * const RxNSduCfgPtr;
  boolean ValidFrameLength;
  int iftmp.145;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.143_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.144_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.144_2->RxNSduConfigPtr;
  _4 = ChannelPtr->NSduId;
  _5 = (unsigned int) _4;
  _6 = _5 * 26;
  _7 = _3 + _6;
  RxNSduCfgPtr = CanTp_CfgPtr.143_1 + _7;
  # DEBUG BEGIN_STMT
  _8 = RxNSduCfgPtr->AddressingFormat;
  if (_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _9 = RxNSduCfgPtr->AddressingFormat;
  if (_9 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.145 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.145 = 0;

  <bb 6> :
  StartPosition_CF_N_PCI = (const uint8) iftmp.145;
  # DEBUG BEGIN_STMT
  _10 = StartPosition_CF_N_PCI + DataLength;
  MinReqSduLength = _10 + 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = CanTpRxPduPtr->SduLength;
  _12 = (short unsigned int) MinReqSduLength;
  if (_11 < _12)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _13 = CanTpRxPduPtr->SduLength;
  _14 = RxNSduCfgPtr->PaddingActivation;
  _15 = RxNSduCfgPtr->NPduLength;
  _16 = CanTp_CheckNPduLength (_13, _14, _15);
  if (_16 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (ValidFrameLength != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _17 = CanTpRxPduPtr->SduDataPtr;
  _18 = (sizetype) StartPosition_CF_N_PCI;
  _19 = _18 + 1;
  NSduDataPtr = _17 + _19;
  # DEBUG BEGIN_STMT
  Ret_CopyRxData = CanTp_RxProcessData (ChannelPtr, NSduDataPtr, DataLength);
  # DEBUG BEGIN_STMT
  if (Ret_CopyRxData == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 0);
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);

  <bb 15> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _20 = ChannelPtr->ConnectionFlags;
  _21 = _20 & 251;
  ChannelPtr->ConnectionFlags = _21;
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 128);

  <bb 17> :
  return;

}


CanTp_ProcessReceivedIntermediateCF (const struct PduInfoType * CanTpRxPduPtr, struct CanTp_ChannelType * ChannelPtr)
{
  boolean ContinueWithNextBlock;
  const uint8 DataLength;
  uint8 * const NSduDataPtr;
  const uint8 StartPosition_CF_N_PCI;
  BufReq_ReturnType Ret_CopyRxData;
  const uint8 DataLen;
  const struct CanTp_RxNSduConfigType * const RxNSduCfgPtr;
  int iftmp.148;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.146_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.147_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.147_2->RxNSduConfigPtr;
  _4 = ChannelPtr->NSduId;
  _5 = (unsigned int) _4;
  _6 = _5 * 26;
  _7 = _3 + _6;
  RxNSduCfgPtr = CanTp_CfgPtr.146_1 + _7;
  # DEBUG BEGIN_STMT
  DataLen = ChannelPtr->ReceivedSduLength;
  # DEBUG BEGIN_STMT
  _8 = CanTpRxPduPtr->SduLength;
  _9 = (short unsigned int) DataLen;
  if (_8 == _9)
    goto <bb 3>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = RxNSduCfgPtr->AddressingFormat;
  if (_10 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _11 = RxNSduCfgPtr->AddressingFormat;
  if (_11 != 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.148 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.148 = 0;

  <bb 7> :
  StartPosition_CF_N_PCI = (const uint8) iftmp.148;
  # DEBUG BEGIN_STMT
  _12 = CanTpRxPduPtr->SduDataPtr;
  _13 = (sizetype) StartPosition_CF_N_PCI;
  _14 = _13 + 1;
  NSduDataPtr = _12 + _14;
  # DEBUG BEGIN_STMT
  _15 = DataLen - StartPosition_CF_N_PCI;
  DataLength = _15 + 255;
  # DEBUG BEGIN_STMT
  _16 = ChannelPtr->SequenceNumber;
  _17 = _16;
  _18 = _17 + 1;
  ChannelPtr->SequenceNumber = _18;
  # DEBUG BEGIN_STMT
  _19 = ChannelPtr->SequenceNumber;
  _20 = _19 & 15;
  ChannelPtr->SequenceNumber = _20;
  # DEBUG BEGIN_STMT
  Ret_CopyRxData = CanTp_RxProcessData (ChannelPtr, NSduDataPtr, DataLength);
  # DEBUG BEGIN_STMT
  if (Ret_CopyRxData == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _21 = ChannelPtr->ProcessedLength;
  _22 = (short unsigned int) DataLength;
  _23 = _21 + _22;
  ChannelPtr->ProcessedLength = _23;
  # DEBUG BEGIN_STMT
  _24 = ChannelPtr->BlockSize;
  if (_24 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ChannelPtr->ProcessedBlockFrames = 15;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _25 = ChannelPtr->ProcessedBlockFrames;
  _26 = _25;
  _27 = _26 + 1;
  ChannelPtr->ProcessedBlockFrames = _27;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _28 = ChannelPtr->ProcessedBlockFrames;
  _29 = ChannelPtr->BlockSize;
  if (_28 == _29)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ProcessedBlockFrames = 0;
  # DEBUG BEGIN_STMT
  ContinueWithNextBlock = CanTp_VerifyBlockSize (ChannelPtr);
  # DEBUG BEGIN_STMT
  if (ContinueWithNextBlock != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  CanTp_TryToSendFC (ChannelPtr, 4);
  goto <bb 18>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.149_30 = CanTp_CfgPtr;
  CanTp_CfgPtr.150_31 = CanTp_CfgPtr;
  _32 = CanTp_CfgPtr.150_31->RxNSduConfigPtr;
  _33 = ChannelPtr->NSduId;
  _34 = (unsigned int) _33;
  _35 = _34 * 26;
  _36 = _32 + _35;
  _37 = CanTp_CfgPtr.149_30 + _36;
  _38 = _37->N_Br;
  _39 = (long unsigned int) _38;
  CanTp_CfgPtr.151_40 = CanTp_CfgPtr;
  CanTp_CfgPtr.152_41 = CanTp_CfgPtr;
  _42 = CanTp_CfgPtr.152_41->RxNSduConfigPtr;
  _43 = ChannelPtr->NSduId;
  _44 = (unsigned int) _43;
  _45 = _44 * 26;
  _46 = _42 + _45;
  _47 = CanTp_CfgPtr.151_40 + _46;
  _48 = _47->N_Ar;
  _49 = (long unsigned int) _48;
  _50 = _39 + _49;
  ChannelPtr->Ticks = _50;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.153_51 = CanTp_CfgPtr;
  CanTp_CfgPtr.154_52 = CanTp_CfgPtr;
  _53 = CanTp_CfgPtr.154_52->RxNSduConfigPtr;
  _54 = ChannelPtr->NSduId;
  _55 = (unsigned int) _54;
  _56 = _55 * 26;
  _57 = _53 + _56;
  _58 = CanTp_CfgPtr.153_51 + _57;
  _59 = _58->WftMax;
  ChannelPtr->WftCounter = _59;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 66;
  # DEBUG BEGIN_STMT
  CanTp_CheckAndHandleWaitFrameTimeOut (ChannelPtr);
  goto <bb 18>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.155_60 = CanTp_CfgPtr;
  CanTp_CfgPtr.156_61 = CanTp_CfgPtr;
  _62 = CanTp_CfgPtr.156_61->RxNSduConfigPtr;
  _63 = ChannelPtr->NSduId;
  _64 = (unsigned int) _63;
  _65 = _64 * 26;
  _66 = _62 + _65;
  _67 = CanTp_CfgPtr.155_60 + _66;
  _68 = _67->N_Cr;
  _69 = (long unsigned int) _68;
  ChannelPtr->Ticks = _69;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 194;
  goto <bb 18>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 128);

  <bb 18> :
  return;

}


CanTp_ProcessReceivedCF (const struct PduInfoType * CanTpRxPduPtr, struct CanTp_ChannelType * ChannelPtr)
{
  const uint8 SingleFrameLength;
  const uint8 DataLen;
  const PduLengthType Delta;
  const uint8 StartPosition_CF_N_PCI;
  const struct CanTp_RxNSduConfigType * const RxNSduCfgPtr;
  int iftmp.142;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->State;
  if (_1 == 194)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _2 = ChannelPtr->State;
  if (_2 == 84)
    goto <bb 4>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.140_3 = CanTp_CfgPtr;
  CanTp_CfgPtr.141_4 = CanTp_CfgPtr;
  _5 = CanTp_CfgPtr.141_4->RxNSduConfigPtr;
  _6 = ChannelPtr->NSduId;
  _7 = (unsigned int) _6;
  _8 = _7 * 26;
  _9 = _5 + _8;
  RxNSduCfgPtr = CanTp_CfgPtr.140_3 + _9;
  # DEBUG BEGIN_STMT
  _10 = RxNSduCfgPtr->AddressingFormat;
  if (_10 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _11 = RxNSduCfgPtr->AddressingFormat;
  if (_11 != 3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.142 = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.142 = 0;

  <bb 8> :
  StartPosition_CF_N_PCI = (const uint8) iftmp.142;
  # DEBUG BEGIN_STMT
  _12 = ChannelPtr->SequenceNumber;
  _13 = (unsigned int) _12;
  _14 = CanTpRxPduPtr->SduDataPtr;
  _15 = (sizetype) StartPosition_CF_N_PCI;
  _16 = _14 + _15;
  _17 = *_16;
  _18 = (unsigned int) _17;
  _19 = _18 & 15;
  if (_13 != _19)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 5);
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _20 = ChannelPtr->TotalLength;
  _21 = ChannelPtr->ProcessedLength;
  Delta = _20 - _21;
  # DEBUG BEGIN_STMT
  DataLen = ChannelPtr->ReceivedSduLength;
  # DEBUG BEGIN_STMT
  _22 = DataLen - StartPosition_CF_N_PCI;
  SingleFrameLength = _22 + 255;
  # DEBUG BEGIN_STMT
  _23 = (short unsigned int) SingleFrameLength;
  if (Delta <= _23)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _24 = ChannelPtr->ConnectionFlags;
  _25 = _24 | 4;
  ChannelPtr->ConnectionFlags = _25;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = (unsigned char) Delta;
  CanTp_ProcessReceivedLastCF (CanTpRxPduPtr, ChannelPtr, _26);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  CanTp_ProcessReceivedIntermediateCF (CanTpRxPduPtr, ChannelPtr);

  <bb 13> :
  return;

}


CanTp_ProcessReceivedFF (const struct PduInfoType * CanTpRxPduPtr, struct CanTp_ChannelType * ChannelPtr)
{
  Std_ReturnType BSCalc_Ok;
  BufReq_ReturnType Ret_ReqRxBuffer;
  uint8 * const NSduDataPtr;
  const uint8 DataLength_FF;
  Std_ReturnType Ret;
  const uint8 StartPosition_FF_N_PCI_Length;
  const PduLengthType PduLenghTypeMax;
  const PduLengthType PduLenghTypeMaxMask;
  uint32 MessageLength_BigData;
  uint8 MaxUnSegMsgLength;
  uint8 NPciSize_SF;
  const uint8 StartPosition_FF_N_PCI;
  uint8 FirstFrame_NPCI_Size;
  uint16 MessageLength;
  boolean ValidFirstFrame;
  const struct CanTp_RxNSduConfigType * const RxNSduCfgPtr;
  int iftmp.139;
  int iftmp.138;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.136_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.137_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.137_2->RxNSduConfigPtr;
  _4 = ChannelPtr->NSduId;
  _5 = (unsigned int) _4;
  _6 = _5 * 26;
  _7 = _3 + _6;
  RxNSduCfgPtr = CanTp_CfgPtr.136_1 + _7;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FirstFrame_NPCI_Size = 2;
  # DEBUG BEGIN_STMT
  _8 = RxNSduCfgPtr->AddressingFormat;
  if (_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _9 = RxNSduCfgPtr->AddressingFormat;
  if (_9 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.138 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.138 = 0;

  <bb 6> :
  StartPosition_FF_N_PCI = (const uint8) iftmp.138;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = CanTpRxPduPtr->SduLength;
  if (_10 > 8)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  NPciSize_SF = 2;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  NPciSize_SF = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _11 = CanTpRxPduPtr->SduLength;
  _12 = (unsigned char) _11;
  _13 = _12 - NPciSize_SF;
  _14 = RxNSduCfgPtr->AddressingFormat;
  if (_14 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _15 = RxNSduCfgPtr->AddressingFormat;
  if (_15 != 3)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  iftmp.139 = 1;
  goto <bb 13>; [INV]

  <bb 12> :
  iftmp.139 = 0;

  <bb 13> :
  _16 = (unsigned char) iftmp.139;
  MaxUnSegMsgLength = _13 - _16;
  # DEBUG BEGIN_STMT
  _17 = CanTpRxPduPtr->SduDataPtr;
  _18 = (sizetype) StartPosition_FF_N_PCI;
  _19 = _17 + _18;
  _20 = *_19;
  _21 = (short unsigned int) _20;
  MessageLength = _21 & 15;
  # DEBUG BEGIN_STMT
  MessageLength = MessageLength << 8;
  # DEBUG BEGIN_STMT
  _22 = CanTpRxPduPtr->SduDataPtr;
  _23 = (sizetype) StartPosition_FF_N_PCI;
  _24 = _23 + 1;
  _25 = _22 + _24;
  _26 = *_25;
  _27 = (short unsigned int) _26;
  MessageLength = MessageLength | _27;
  # DEBUG BEGIN_STMT
  _28 = CanTpRxPduPtr->SduLength;
  _29 = (int) _28;
  switch (_29) <default: <L30> [INV], case 8: <L11> [INV], case 12: <L11> [INV], case 16: <L11> [INV], case 20: <L11> [INV], case 24: <L11> [INV], case 32: <L11> [INV], case 48: <L11> [INV], case 64: <L11> [INV]>

  <bb 14> :
<L11>:
  # DEBUG BEGIN_STMT
  _30 = RxNSduCfgPtr->Tatype;
  if (_30 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  ValidFirstFrame = 0;
  goto <bb 21>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (MessageLength == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  MessageLength_BigData = 0;
  # DEBUG BEGIN_STMT
  PduLenghTypeMaxMask = 0;
  # DEBUG BEGIN_STMT
  PduLenghTypeMax = 65535;
  # DEBUG BEGIN_STMT
  StartPosition_FF_N_PCI_Length = StartPosition_FF_N_PCI + 2;
  # DEBUG BEGIN_STMT
  _31 = CanTpRxPduPtr->SduDataPtr;
  _32 = (sizetype) StartPosition_FF_N_PCI_Length;
  _33 = _31 + _32;
  _34 = *_33;
  _35 = (long unsigned int) _34;
  _36 = _35 << 24;
  MessageLength_BigData = MessageLength_BigData | _36;
  # DEBUG BEGIN_STMT
  _37 = CanTpRxPduPtr->SduDataPtr;
  _38 = (sizetype) StartPosition_FF_N_PCI_Length;
  _39 = _38 + 1;
  _40 = _37 + _39;
  _41 = *_40;
  _42 = (long unsigned int) _41;
  _43 = _42 << 16;
  MessageLength_BigData = MessageLength_BigData | _43;
  # DEBUG BEGIN_STMT
  _44 = CanTpRxPduPtr->SduDataPtr;
  _45 = (sizetype) StartPosition_FF_N_PCI_Length;
  _46 = _45 + 2;
  _47 = _44 + _46;
  _48 = *_47;
  _49 = (long unsigned int) _48;
  _50 = _49 << 8;
  MessageLength_BigData = MessageLength_BigData | _50;
  # DEBUG BEGIN_STMT
  _51 = CanTpRxPduPtr->SduDataPtr;
  _52 = (sizetype) StartPosition_FF_N_PCI_Length;
  _53 = _52 + 3;
  _54 = _51 + _53;
  _55 = *_54;
  _56 = (long unsigned int) _55;
  MessageLength_BigData = MessageLength_BigData | _56;
  # DEBUG BEGIN_STMT
  _57 = MessageLength_BigData + 4294963200;
  if (_57 <= 61439)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _58 = (short unsigned int) MessageLength_BigData;
  ChannelPtr->TotalLength = _58;
  # DEBUG BEGIN_STMT
  FirstFrame_NPCI_Size = 6;
  # DEBUG BEGIN_STMT
  ValidFirstFrame = 1;
  goto <bb 21>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  ValidFirstFrame = 0;
  goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  ChannelPtr->TotalLength = MessageLength;
  # DEBUG BEGIN_STMT
  ValidFirstFrame = 1;

  <bb 21> :
  # DEBUG BEGIN_STMT
  _59 = ChannelPtr->TotalLength;
  _60 = (short unsigned int) MaxUnSegMsgLength;
  if (_59 <= _60)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  ValidFirstFrame = 0;
  goto <bb 24>; [INV]

  <bb 23> :
<L30>:
  # DEBUG BEGIN_STMT
  ValidFirstFrame = 0;
  # DEBUG BEGIN_STMT

  <bb 24> :
  # DEBUG BEGIN_STMT
  if (ValidFirstFrame != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _61 = CanTpRxPduPtr->SduLength;
  _62 = (unsigned char) _61;
  _63 = _62 - StartPosition_FF_N_PCI;
  DataLength_FF = _63 - FirstFrame_NPCI_Size;
  # DEBUG BEGIN_STMT
  _64 = CanTpRxPduPtr->SduDataPtr;
  _65 = (int) StartPosition_FF_N_PCI;
  _66 = (int) FirstFrame_NPCI_Size;
  _67 = _65 + _66;
  _68 = (sizetype) _67;
  NSduDataPtr = _64 + _68;
  # DEBUG BEGIN_STMT
  ChannelPtr->ProcessedLength = 0;
  # DEBUG BEGIN_STMT
  _69 = RxNSduCfgPtr->WftMax;
  ChannelPtr->WftCounter = _69;
  # DEBUG BEGIN_STMT
  _70 = RxNSduCfgPtr->N_Br;
  _71 = (long unsigned int) _70;
  _72 = RxNSduCfgPtr->N_Ar;
  _73 = (long unsigned int) _72;
  _74 = _71 + _73;
  ChannelPtr->Ticks = _74;
  # DEBUG BEGIN_STMT
  _75 = RxNSduCfgPtr->BS;
  ChannelPtr->BlockSize = _75;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 65;
  # DEBUG BEGIN_STMT
  _76 = CanTpRxPduPtr->SduLength;
  _77 = (unsigned char) _76;
  ChannelPtr->ReceivedSduLength = _77;
  # DEBUG BEGIN_STMT
  Ret = CanTp_ProcessStartOfReception (ChannelPtr);
  # DEBUG BEGIN_STMT
  if (Ret == 0)
    goto <bb 26>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _78 = ChannelPtr->ConnectionFlags;
  _79 = _78 | 2;
  ChannelPtr->ConnectionFlags = _79;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Ret_ReqRxBuffer = CanTp_ProcessStartOfReceptionData (ChannelPtr, NSduDataPtr, DataLength_FF);
  # DEBUG BEGIN_STMT
  switch (Ret_ReqRxBuffer) <default: <L39> [INV], case 0: <L34> [INV], case 2: <L38> [INV]>

  <bb 27> :
<L34>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _80 = (short unsigned int) DataLength_FF;
  ChannelPtr->ProcessedLength = _80;
  # DEBUG BEGIN_STMT
  _81 = &ChannelPtr->BlockSize;
  BSCalc_Ok = CanTp_CalculateBlockSize (ChannelPtr, _81);
  # DEBUG BEGIN_STMT
  if (BSCalc_Ok == 0)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  CanTp_TryToSendFC (ChannelPtr, 4);
  goto <bb 35>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  CanTp_CheckAndHandleWaitFrameTimeOut (ChannelPtr);
  goto <bb 35>; [INV]

  <bb 30> :
<L38>:
  # DEBUG BEGIN_STMT
  _82 = &ChannelPtr->CanIfData;
  _83 = (long unsigned int) DataLength_FF;
  TS_MemCpy32 (_82, NSduDataPtr, _83);
  # DEBUG BEGIN_STMT
  ChannelPtr->CanIfDLC = DataLength_FF;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _84 = ChannelPtr->ConnectionFlags;
  _85 = _84 | 2;
  ChannelPtr->ConnectionFlags = _85;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CheckAndHandleWaitFrameTimeOut (ChannelPtr);
  # DEBUG BEGIN_STMT
  goto <bb 35>; [INV]

  <bb 31> :
<L39>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  # DEBUG BEGIN_STMT
  goto <bb 35>; [INV]

  <bb 32> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 0, 1);
  # DEBUG BEGIN_STMT
  _86 = RxNSduCfgPtr->Tatype;
  if (_86 == 1)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 33> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 144);
  goto <bb 35>; [INV]

  <bb 34> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 128);

  <bb 35> :
  return;

}


CanTp_ProcessReceivedSF (const struct PduInfoType * CanTpRxPduPtr, struct CanTp_ChannelType * ChannelPtr)
{
  BufReq_ReturnType Ret_ReqRxBuffer;
  uint8 * const NSduDataPtr;
  Std_ReturnType Ret;
  boolean ValidFrameLength;
  uint8 NPciHeaderSize;
  uint8 DataLength;
  const uint8 StartPosition_SF_N_PCI;
  const struct CanTp_RxNSduConfigType * const RxNSduCfgPtr;
  int iftmp.133;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.131_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.132_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.132_2->RxNSduConfigPtr;
  _4 = ChannelPtr->NSduId;
  _5 = (unsigned int) _4;
  _6 = _5 * 26;
  _7 = _3 + _6;
  RxNSduCfgPtr = CanTp_CfgPtr.131_1 + _7;
  # DEBUG BEGIN_STMT
  _8 = RxNSduCfgPtr->AddressingFormat;
  if (_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _9 = RxNSduCfgPtr->AddressingFormat;
  if (_9 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.133 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.133 = 0;

  <bb 6> :
  StartPosition_SF_N_PCI = (const uint8) iftmp.133;
  # DEBUG BEGIN_STMT
  DataLength = 0;
  # DEBUG BEGIN_STMT
  NPciHeaderSize = 0;
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;
  # DEBUG BEGIN_STMT
  _10 = CanTpRxPduPtr->SduLength;
  if (_10 <= 8)
    goto <bb 7>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _11 = CanTpRxPduPtr->SduDataPtr;
  _12 = (sizetype) StartPosition_SF_N_PCI;
  _13 = _11 + _12;
  _14 = *_13;
  DataLength = _14 & 15;
  # DEBUG BEGIN_STMT
  NPciHeaderSize = 1;
  # DEBUG BEGIN_STMT
  if (DataLength == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;
  goto <bb 30>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (DataLength <= 7)
    goto <bb 10>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (StartPosition_SF_N_PCI == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _15 = (unsigned int) DataLength;
  _16 = CanTpRxPduPtr->SduLength;
  _17 = (unsigned int) _16;
  _18 = _17 + 4294967295;
  if (_15 <= _18)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 1;
  goto <bb 30>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;
  goto <bb 30>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _19 = CanTpRxPduPtr->SduLength;
  if (_19 > 2)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  _20 = (unsigned int) DataLength;
  _21 = CanTpRxPduPtr->SduLength;
  _22 = (unsigned int) _21;
  _23 = _22 + 4294967294;
  if (_20 <= _23)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 1;
  goto <bb 30>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;
  goto <bb 30>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;
  goto <bb 30>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _24 = CanTpRxPduPtr->SduDataPtr;
  _25 = (sizetype) StartPosition_SF_N_PCI;
  _26 = _24 + _25;
  _27 = *_26;
  _28 = (unsigned int) _27;
  _29 = _28 & 15;
  if (_29 == 0)
    goto <bb 20>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _30 = CanTpRxPduPtr->SduDataPtr;
  _31 = (sizetype) StartPosition_SF_N_PCI;
  _32 = _31 + 1;
  _33 = _30 + _32;
  DataLength = *_33;
  # DEBUG BEGIN_STMT
  NPciHeaderSize = 2;
  # DEBUG BEGIN_STMT
  if (DataLength == 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;
  goto <bb 30>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  if (StartPosition_SF_N_PCI == 0)
    goto <bb 23>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  _34 = (unsigned int) DataLength;
  _35 = CanTpRxPduPtr->SduLength;
  _36 = (unsigned int) _35;
  _37 = _36 + 4294967294;
  if (_34 <= _37)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 1;
  goto <bb 30>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;
  goto <bb 30>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  _38 = (unsigned int) DataLength;
  _39 = CanTpRxPduPtr->SduLength;
  _40 = (unsigned int) _39;
  _41 = _40 + 4294967293;
  if (_38 <= _41)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 1;
  goto <bb 30>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;
  goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;

  <bb 30> :
  # DEBUG BEGIN_STMT
  if (ValidFrameLength != 0)
    goto <bb 31>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 31> :
  # DEBUG BEGIN_STMT
  _42 = CanTpRxPduPtr->SduLength;
  _43 = RxNSduCfgPtr->PaddingActivation;
  _44 = RxNSduCfgPtr->NPduLength;
  _45 = CanTp_CheckNPduLength (_42, _43, _44);
  if (_45 == 0)
    goto <bb 32>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 32> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 0;
  goto <bb 34>; [INV]

  <bb 33> :
  # DEBUG BEGIN_STMT
  ValidFrameLength = 1;

  <bb 34> :
  # DEBUG BEGIN_STMT
  if (ValidFrameLength != 0)
    goto <bb 35>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 35> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _46 = CanTpRxPduPtr->SduDataPtr;
  _47 = (int) StartPosition_SF_N_PCI;
  _48 = (int) NPciHeaderSize;
  _49 = _47 + _48;
  _50 = (sizetype) _49;
  NSduDataPtr = _46 + _50;
  # DEBUG BEGIN_STMT
  _51 = (short unsigned int) DataLength;
  ChannelPtr->TotalLength = _51;
  # DEBUG BEGIN_STMT
  _52 = RxNSduCfgPtr->N_Br;
  _53 = (long unsigned int) _52;
  ChannelPtr->Ticks = _53;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 64;
  # DEBUG BEGIN_STMT
  Ret = CanTp_ProcessStartOfReception (ChannelPtr);
  # DEBUG BEGIN_STMT
  if (Ret == 0)
    goto <bb 36>; [INV]
  else
    goto <bb 41>; [INV]

  <bb 36> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Ret_ReqRxBuffer = CanTp_ProcessStartOfReceptionData (ChannelPtr, NSduDataPtr, DataLength);
  # DEBUG BEGIN_STMT
  switch (Ret_ReqRxBuffer) <default: <L47> [INV], case 0: <L45> [INV], case 2: <L46> [INV]>

  <bb 37> :
<L45>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 0);
  # DEBUG BEGIN_STMT
  goto <bb 41>; [INV]

  <bb 38> :
<L46>:
  # DEBUG BEGIN_STMT
  _54 = &ChannelPtr->CanIfData;
  _55 = (long unsigned int) DataLength;
  TS_MemCpy32 (_54, NSduDataPtr, _55);
  # DEBUG BEGIN_STMT
  ChannelPtr->CanIfDLC = DataLength;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _56 = ChannelPtr->ConnectionFlags;
  _57 = _56 | 2;
  ChannelPtr->ConnectionFlags = _57;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 41>; [INV]

  <bb 39> :
<L47>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  # DEBUG BEGIN_STMT
  goto <bb 41>; [INV]

  <bb 40> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 0, 1);
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 128);

  <bb 41> :
  return;

}


CanTp_FindNSduId (PduIdType CanTpRxPduId, const uint8 * CanDataPtr, PduIdType * NSduId, uint8 * FrameType)
{
  uint8 N_SA_AE;
  const uint8 FirstNPCIByte;
  const uint8 AddressingFormat;
  uint8 SearchDirection;
  boolean FoundFlag;
  const struct CanTp_RxNPduTableType * RxNPduTableEntry;
  boolean D.9588;
  int iftmp.108;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.104_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.105_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.105_2->RxNPduTablePtr;
  CanTp_CfgPtr.106_4 = CanTp_CfgPtr;
  CanTp_CfgPtr.107_5 = CanTp_CfgPtr;
  _6 = CanTp_CfgPtr.107_5->RxNPduLookupTablePtr;
  _7 = (unsigned int) CanTpRxPduId;
  _8 = _7 * 2;
  _9 = _6 + _8;
  _10 = CanTp_CfgPtr.106_4 + _9;
  _11 = *_10;
  _12 = (unsigned int) _11;
  _13 = _12 * 8;
  _14 = _3 + _13;
  RxNPduTableEntry = CanTp_CfgPtr.104_1 + _14;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  AddressingFormat = RxNPduTableEntry->AddressingFormat;
  # DEBUG BEGIN_STMT
  _15 = RxNPduTableEntry->AddressingFormat;
  if (_15 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _16 = RxNPduTableEntry->AddressingFormat;
  if (_16 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.108 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.108 = 0;

  <bb 6> :
  FirstNPCIByte = (const uint8) iftmp.108;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FoundFlag = 0;
  # DEBUG BEGIN_STMT
  _17 = (sizetype) FirstNPCIByte;
  _18 = CanDataPtr + _17;
  _19 = *_18;
  _20 = (unsigned int) _19;
  _21 = _20 & 240;
  if (_21 == 48)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  SearchDirection = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SearchDirection = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _22 = RxNPduTableEntry->Direction;
  if (SearchDirection == _22)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  N_SA_AE = RxNPduTableEntry->N_SA_AE;
  # DEBUG BEGIN_STMT
  if (AddressingFormat == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _23 = *CanDataPtr;
  if (N_SA_AE == _23)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  FoundFlag = 1;
  # DEBUG BEGIN_STMT
  _24 = RxNPduTableEntry->Index;
  *NSduId = _24;
  # DEBUG BEGIN_STMT
  _25 = (sizetype) FirstNPCIByte;
  _26 = CanDataPtr + _25;
  _27 = *_26;
  _28 = _27 & 240;
  *FrameType = _28;

  <bb 13> :
  # DEBUG BEGIN_STMT
  _29 = RxNPduTableEntry->Next;
  if (_29 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.109_30 = CanTp_CfgPtr;
  CanTp_CfgPtr.110_31 = CanTp_CfgPtr;
  _32 = CanTp_CfgPtr.110_31->RxNPduTablePtr;
  _33 = RxNPduTableEntry->Next;
  _34 = (unsigned int) _33;
  _35 = _34 * 8;
  _36 = _32 + _35;
  RxNPduTableEntry = CanTp_CfgPtr.109_30 + _36;
  # DEBUG BEGIN_STMT
  if (FoundFlag == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (AddressingFormat == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  if (FoundFlag == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 64);

  <bb 18> :
  # DEBUG BEGIN_STMT
  D.9588 = FoundFlag;
  return D.9588;

}


CanTp_RxChannelCleanup (struct CanTp_ChannelType * ChannelPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->State;
  _2 = (int) _1;
  _3 = _2 & 96;
  switch (_3) <default: <L8> [INV], case 64: <L2> [INV]>

  <bb 3> :
<L2>:
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.134_4 = CanTp_CfgPtr;
  CanTp_CfgPtr.135_5 = CanTp_CfgPtr;
  _6 = CanTp_CfgPtr.135_5->RxNSduConfigPtr;
  _7 = ChannelPtr->NSduId;
  _8 = (unsigned int) _7;
  _9 = _8 * 26;
  _10 = _6 + _9;
  _11 = CanTp_CfgPtr.134_4 + _10;
  _12 = _11->ChannelMode;
  if (_12 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 7);

  <bb 6> :
<L8>:
  return;

}


CanTp_ProcessRxFrame (struct CanTp_ChannelType * ChannelPtr, const struct PduInfoType * CanTpRxPduPtr, PduIdType NSduId, uint8 FrameType)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) FrameType;
  switch (_1) <default: <L16> [INV], case 0: <L0> [INV], case 16: <L3> [INV], case 32: <L6> [INV], case 48: <L11> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  CanTp_RxChannelCleanup (ChannelPtr);
  # DEBUG BEGIN_STMT
  _2 = ChannelPtr->State;
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  ChannelPtr->NSduId = NSduId;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_NonIdleChannelCounter.129_3 = CanTp_NonIdleChannelCounter;
  _4 = CanTp_NonIdleChannelCounter.129_3 + 1;
  CanTp_NonIdleChannelCounter = _4;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_ProcessReceivedSF (CanTpRxPduPtr, ChannelPtr);
  goto <bb 12>; [INV]

  <bb 5> :
<L3>:
  # DEBUG BEGIN_STMT
  CanTp_RxChannelCleanup (ChannelPtr);
  # DEBUG BEGIN_STMT
  _5 = ChannelPtr->State;
  if (_5 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ChannelPtr->NSduId = NSduId;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_NonIdleChannelCounter.130_6 = CanTp_NonIdleChannelCounter;
  _7 = CanTp_NonIdleChannelCounter.130_6 + 1;
  CanTp_NonIdleChannelCounter = _7;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_ProcessReceivedFF (CanTpRxPduPtr, ChannelPtr);
  goto <bb 12>; [INV]

  <bb 7> :
<L6>:
  # DEBUG BEGIN_STMT
  _8 = ChannelPtr->NSduId;
  if (NSduId == _8)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  _9 = ChannelPtr->State;
  _10 = (unsigned int) _9;
  _11 = _10 & 96;
  if (_11 == 64)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  CanTp_ProcessReceivedCF (CanTpRxPduPtr, ChannelPtr);
  goto <bb 12>; [INV]

  <bb 10> :
<L11>:
  # DEBUG BEGIN_STMT
  _12 = ChannelPtr->NSduId;
  if (NSduId == _12)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  CanTp_ProcessReceivedFC (CanTpRxPduPtr, ChannelPtr);

  <bb 12> :
<L16>:
  return;

}


CanTp_PostponeRxFrame (struct CanTp_ChannelType * ChannelPtr, const struct PduInfoType * CanTpRxPduPtr, PduIdType NSduId, uint8 FrameType)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = &ChannelPtr->PostRxIndData;
  _2 = CanTpRxPduPtr->SduDataPtr;
  _3 = CanTpRxPduPtr->SduLength;
  _4 = (long unsigned int) _3;
  TS_MemCpy32 (_1, _2, _4);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = ChannelPtr->PostFlag;
  _6 = _5 | 1;
  ChannelPtr->PostFlag = _6;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->PostRxIndNSduId = NSduId;
  # DEBUG BEGIN_STMT
  _7 = CanTpRxPduPtr->SduLength;
  _8 = (unsigned char) _7;
  ChannelPtr->PostRxIndLength = _8;
  # DEBUG BEGIN_STMT
  ChannelPtr->PostRxIndFrameType = FrameType;
  return;

}


CanTp_PostRxIndication (struct CanTp_ChannelType * ChannelPtr)
{
  boolean PendingFrame;
  uint8_least Loop;
  uint8 FrameType;
  PduIdType NSduId;
  uint8 NPduData[64];
  struct PduInfoType CanTpNPdu;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NPduData = "\x00";
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PendingFrame = 0;
  # DEBUG BEGIN_STMT
  NSduId = 0;
  # DEBUG BEGIN_STMT
  FrameType = 0;
  # DEBUG BEGIN_STMT
  CanTpNPdu.SduDataPtr = 0B;
  # DEBUG BEGIN_STMT
  CanTpNPdu.SduLength = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->PostFlag;
  _2 = (unsigned int) _1;
  _3 = _2 & 1;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Loop = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _4 = ChannelPtr->PostRxIndData[Loop];
  NPduData[Loop] = _4;
  # DEBUG BEGIN_STMT
  Loop = Loop + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = ChannelPtr->PostRxIndLength;
  _6 = (long unsigned int) _5;
  if (Loop < _6)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanTpNPdu.SduDataPtr = &NPduData[0];
  # DEBUG BEGIN_STMT
  _7 = ChannelPtr->PostRxIndLength;
  _8 = (short unsigned int) _7;
  CanTpNPdu.SduLength = _8;
  # DEBUG BEGIN_STMT
  NSduId = ChannelPtr->PostRxIndNSduId;
  # DEBUG BEGIN_STMT
  FrameType = ChannelPtr->PostRxIndFrameType;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _9 = ChannelPtr->PostFlag;
  _10 = _9 & 254;
  ChannelPtr->PostFlag = _10;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PendingFrame = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (PendingFrame != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_ProcessRxFrame (ChannelPtr, &CanTpNPdu, NSduId, FrameType);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  CanTpNPdu = {CLOBBER};
  NPduData = {CLOBBER};
  return;

}


CanTp_RxIndication (PduIdType CanTpRxPduId, struct PduInfoType * CanTpRxPduPtr)
{
  boolean OverwrittenCF;
  boolean IgnoreMsgFlag;
  const uint8 * SduDataPtr;
  const uint8 AddressingFormat;
  Std_ReturnType Result;
  CanTp_ChType Channel;
  boolean FCValidLength;
  PduLengthType NPduMaxLength;
  boolean RxProcessFlag;
  const struct CanTp_RxNPduTableType * RxNPduTableEntry;
  uint8 FrameType;
  PduIdType NSduId;
  struct CanTp_ChannelType * ChannelPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CanTp_InitVars.State;
  if (_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 32);
  goto <bb 44>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CanTpRxPduPtr == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _2 = CanTpRxPduPtr->SduDataPtr;
  if (_2 == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 3);
  goto <bb 44>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.73_3 = CanTp_CfgPtr;
  _4 = CanTp_CfgPtr.73_3->NumberRxNPdus;
  if (CanTpRxPduId >= _4)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 64);
  goto <bb 44>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _5 = CanTpRxPduPtr->SduLength;
  if (_5 <= 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 128);
  goto <bb 44>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  NSduId = 0;
  # DEBUG BEGIN_STMT
  FrameType = 0;
  # DEBUG BEGIN_STMT
  _6 = CanTpRxPduPtr->SduDataPtr;
  _7 = CanTp_FindNSduId (CanTpRxPduId, _6, &NSduId, &FrameType);
  if (_7 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.74_8 = CanTp_CfgPtr;
  CanTp_CfgPtr.75_9 = CanTp_CfgPtr;
  _10 = CanTp_CfgPtr.75_9->RxNPduTablePtr;
  CanTp_CfgPtr.76_11 = CanTp_CfgPtr;
  CanTp_CfgPtr.77_12 = CanTp_CfgPtr;
  _13 = CanTp_CfgPtr.77_12->RxNPduLookupTablePtr;
  _14 = (unsigned int) CanTpRxPduId;
  _15 = _14 * 2;
  _16 = _13 + _15;
  _17 = CanTp_CfgPtr.76_11 + _16;
  _18 = *_17;
  _19 = (unsigned int) _18;
  _20 = _19 * 8;
  _21 = _10 + _20;
  RxNPduTableEntry = CanTp_CfgPtr.74_8 + _21;
  # DEBUG BEGIN_STMT
  RxProcessFlag = 0;
  # DEBUG BEGIN_STMT
  NPduMaxLength = 8;
  # DEBUG BEGIN_STMT
  FCValidLength = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  FrameType.78_22 = FrameType;
  if (FrameType.78_22 == 48)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.79_23 = CanTp_CfgPtr;
  CanTp_CfgPtr.80_24 = CanTp_CfgPtr;
  _25 = CanTp_CfgPtr.80_24->TxNSduConfigPtr;
  NSduId.81_26 = NSduId;
  _27 = (unsigned int) NSduId.81_26;
  _28 = _27 * 24;
  _29 = _25 + _28;
  _30 = CanTp_CfgPtr.79_23 + _29;
  Channel = _30->Channel;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.82_31 = CanTp_CfgPtr;
  CanTp_CfgPtr.83_32 = CanTp_CfgPtr;
  _33 = CanTp_CfgPtr.83_32->RxNSduConfigPtr;
  NSduId.84_34 = NSduId;
  _35 = (unsigned int) NSduId.84_34;
  _36 = _35 * 26;
  _37 = _33 + _36;
  _38 = CanTp_CfgPtr.82_31 + _37;
  Channel = _38->Channel;

  <bb 15> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _39 = (int) Channel;
  ChannelPtr = &CanTp_Channel[_39];
  # DEBUG BEGIN_STMT
  FrameType.85_40 = FrameType;
  if (FrameType.85_40 == 48)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  AddressingFormat = RxNPduTableEntry->AddressingFormat;
  # DEBUG BEGIN_STMT
  NSduId.86_41 = NSduId;
  _42 = CanTpRxPduPtr->SduLength;
  FCValidLength = CanTp_ValidateFCLength (NSduId.86_41, _42, AddressingFormat);
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.87_43 = CanTp_CfgPtr;
  CanTp_CfgPtr.88_44 = CanTp_CfgPtr;
  _45 = CanTp_CfgPtr.88_44->RxNSduConfigPtr;
  NSduId.89_46 = NSduId;
  _47 = (unsigned int) NSduId.89_46;
  _48 = _47 * 26;
  _49 = _45 + _48;
  _50 = CanTp_CfgPtr.87_43 + _49;
  _51 = _50->NPduLength;
  NPduMaxLength = (PduLengthType) _51;

  <bb 18> :
  # DEBUG BEGIN_STMT
  FrameType.90_52 = FrameType;
  if (FrameType.90_52 == 16)
    goto <bb 19>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 19> :
  _53 = RxNPduTableEntry->AddressingFormat;
  _54 = _53 + 255;
  if (_54 <= 1)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  _55 = CanTpRxPduPtr->SduLength;
  if (_55 <= 2)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 128);
  goto <bb 44>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  FrameType.91_56 = FrameType;
  if (FrameType.91_56 == 48)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  if (FCValidLength == 1)
    goto <bb 26>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  FrameType.92_57 = FrameType;
  if (FrameType.92_57 != 48)
    goto <bb 25>; [INV]
  else
    goto <bb 43>; [INV]

  <bb 25> :
  _58 = CanTpRxPduPtr->SduLength;
  if (NPduMaxLength >= _58)
    goto <bb 26>; [INV]
  else
    goto <bb 43>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  SduDataPtr = CanTpRxPduPtr->SduDataPtr;
  # DEBUG BEGIN_STMT
  NSduId.93_59 = NSduId;
  _60 = *SduDataPtr;
  _61 = (short unsigned int) _60;
  FrameType.94_62 = FrameType;
  IgnoreMsgFlag = CanTp_ValidateNAI (ChannelPtr, NSduId.93_59, _61, FrameType.94_62);
  # DEBUG BEGIN_STMT
  if (IgnoreMsgFlag == 0)
    goto <bb 27>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  OverwrittenCF = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _63 = ChannelPtr->ChannelLockFlag;
  if (_63 == 0)
    goto <bb 34>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 28> :
  FrameType.95_64 = FrameType;
  if (FrameType.95_64 != 48)
    goto <bb 29>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 29> :
  FrameType.96_65 = FrameType;
  if (FrameType.96_65 != 32)
    goto <bb 30>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 30> :
  FrameType.97_66 = FrameType;
  if (FrameType.97_66 != 0)
    goto <bb 32>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 31> :
  _67 = ChannelPtr->ConnectionFlags;
  _68 = (unsigned int) _67;
  _69 = _68 & 4;
  if (_69 == 0)
    goto <bb 32>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 32> :
  FrameType.98_70 = FrameType;
  if (FrameType.98_70 != 16)
    goto <bb 34>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  _71 = ChannelPtr->ConnectionFlags;
  _72 = (unsigned int) _71;
  _73 = _72 & 4;
  if (_73 == 0)
    goto <bb 34>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 34> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RxProcessFlag = 1;
  goto <bb 39>; [INV]

  <bb 35> :
  # DEBUG BEGIN_STMT
  FrameType.99_74 = FrameType;
  if (FrameType.99_74 == 32)
    goto <bb 36>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 36> :
  _75 = ChannelPtr->PostFlag;
  _76 = (unsigned int) _75;
  _77 = _76 & 1;
  if (_77 != 0)
    goto <bb 37>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 37> :
  # DEBUG BEGIN_STMT
  OverwrittenCF = 1;

  <bb 38> :
  # DEBUG BEGIN_STMT
  NSduId.100_78 = NSduId;
  FrameType.101_79 = FrameType;
  CanTp_PostponeRxFrame (ChannelPtr, CanTpRxPduPtr, NSduId.100_78, FrameType.101_79);

  <bb 39> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (OverwrittenCF == 1)
    goto <bb 40>; [INV]
  else
    goto <bb 41>; [INV]

  <bb 40> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 4);

  <bb 41> :
  # DEBUG BEGIN_STMT
  if (RxProcessFlag == 1)
    goto <bb 42>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 42> :
  # DEBUG BEGIN_STMT
  NSduId.102_80 = NSduId;
  FrameType.103_81 = FrameType;
  CanTp_ProcessRxFrame (ChannelPtr, CanTpRxPduPtr, NSduId.102_80, FrameType.103_81);
  # DEBUG BEGIN_STMT
  CanTp_HandlePostponedFlags (ChannelPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;
  goto <bb 44>; [INV]

  <bb 43> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 66, 128);

  <bb 44> :
  # DEBUG BEGIN_STMT
  NSduId = {CLOBBER};
  FrameType = {CLOBBER};
  return;

}


CanTp_TryToSendFC (struct CanTp_ChannelType * ChannelPtr, uint8 Type)
{
  struct CanTp_ChannelType * ChPtr;
  CanTp_ChStateType ChanState;
  boolean Ret_Postponed;
  CanTp_TxChannelType Tx_ChannelID;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Tx_ChannelID = 255;
  # DEBUG BEGIN_STMT
  Ret_Postponed = 0;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.71_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.72_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.72_2->RxNSduConfigPtr;
  _4 = ChannelPtr->NSduId;
  _5 = (unsigned int) _4;
  _6 = _5 * 26;
  _7 = _3 + _6;
  _8 = CanTp_CfgPtr.71_1 + _7;
  Tx_ChannelID = _8->Tx_Channel;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Ret_Postponed = 0;
  # DEBUG BEGIN_STMT
  if (Tx_ChannelID != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _9 = (int) Tx_ChannelID;
  ChPtr = &CanTp_Channel[_9];
  # DEBUG BEGIN_STMT
  ChanState = ChPtr->State;
  # DEBUG BEGIN_STMT
  _10 = (unsigned int) ChanState;
  _11 = _10 & 152;
  if (_11 == 16)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Ret_Postponed = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = (int) Type;
  switch (_12) <default: <L12> [INV], case 4: <L4> [INV], case 6: <L8> [INV]>

  <bb 6> :
<L4>:
  # DEBUG BEGIN_STMT
  if (Ret_Postponed == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 204;
  goto <bb 15>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 76;
  # DEBUG BEGIN_STMT
  CanTp_PrepareFC (ChannelPtr, 48);
  goto <bb 15>; [INV]

  <bb 9> :
<L8>:
  # DEBUG BEGIN_STMT
  if (Ret_Postponed == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 206;
  goto <bb 15>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 78;
  # DEBUG BEGIN_STMT
  CanTp_PrepareFC (ChannelPtr, 49);
  goto <bb 15>; [INV]

  <bb 12> :
<L12>:
  # DEBUG BEGIN_STMT
  ChannelPtr->ActualBufferSize = 0;
  # DEBUG BEGIN_STMT
  if (Ret_Postponed == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 205;
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 77;
  # DEBUG BEGIN_STMT
  CanTp_PrepareFC (ChannelPtr, 50);

  <bb 15> :
  return;

}


CanTp_RxStateHandling (struct CanTp_ChannelType * ChannelPtr)
{
  boolean ContinueWithNextBlock;
  BufReq_ReturnType Ret_ReqRxBuffer;
  Std_ReturnType BSCalc_Ok;
  BufReq_ReturnType Ret_ReqRxBuffer;
  BufReq_ReturnType Ret_ReqRxBuffer;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->State;
  _2 = (int) _1;
  switch (_2) <default: <L28> [INV], case 64: <L0> [INV], case 65: <L5> [INV], case 66: <L13> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = &ChannelPtr->CanIfData;
  _4 = ChannelPtr->CanIfDLC;
  Ret_ReqRxBuffer = CanTp_ProcessStartOfReceptionData (ChannelPtr, _3, _4);
  # DEBUG BEGIN_STMT
  switch (Ret_ReqRxBuffer) <default: <L3> [INV], case 0: <L1> [INV], case 2: <L27> [INV]>

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 0);
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L3>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  # DEBUG BEGIN_STMT

  <bb 6> :
<L27>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 21>; [INV]

  <bb 7> :
<L5>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = &ChannelPtr->CanIfData;
  _6 = ChannelPtr->CanIfDLC;
  Ret_ReqRxBuffer = CanTp_ProcessStartOfReceptionData (ChannelPtr, _5, _6);
  # DEBUG BEGIN_STMT
  switch (Ret_ReqRxBuffer) <default: <L11> [INV], case 0: <L6> [INV], case 2: <L10> [INV]>

  <bb 8> :
<L6>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _7 = ChannelPtr->ProcessedLength;
  _8 = ChannelPtr->CanIfDLC;
  _9 = (short unsigned int) _8;
  _10 = _7 + _9;
  ChannelPtr->ProcessedLength = _10;
  # DEBUG BEGIN_STMT
  ChannelPtr->CanIfDLC = 0;
  # DEBUG BEGIN_STMT
  _11 = &ChannelPtr->BlockSize;
  BSCalc_Ok = CanTp_CalculateBlockSize (ChannelPtr, _11);
  # DEBUG BEGIN_STMT
  if (BSCalc_Ok == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  CanTp_TryToSendFC (ChannelPtr, 4);
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  CanTp_CheckAndHandleWaitFrameTimeOut (ChannelPtr);
  goto <bb 13>; [INV]

  <bb 11> :
<L10>:
  # DEBUG BEGIN_STMT
  CanTp_CheckAndHandleWaitFrameTimeOut (ChannelPtr);
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 12> :
<L11>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  # DEBUG BEGIN_STMT

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 21>; [INV]

  <bb 14> :
<L13>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Ret_ReqRxBuffer = CanTp_RxProcessData (ChannelPtr, 0B, 0);
  # DEBUG BEGIN_STMT
  switch (Ret_ReqRxBuffer) <default: <L19> [INV], case 0: <L14> [INV], case 2: <L18> [INV]>

  <bb 15> :
<L14>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ContinueWithNextBlock = CanTp_VerifyBlockSize (ChannelPtr);
  # DEBUG BEGIN_STMT
  if (ContinueWithNextBlock != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  CanTp_TryToSendFC (ChannelPtr, 4);
  goto <bb 20>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  CanTp_CheckAndHandleWaitFrameTimeOut (ChannelPtr);
  goto <bb 20>; [INV]

  <bb 18> :
<L18>:
  # DEBUG BEGIN_STMT
  CanTp_CheckAndHandleWaitFrameTimeOut (ChannelPtr);
  # DEBUG BEGIN_STMT
  goto <bb 20>; [INV]

  <bb 19> :
<L19>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  # DEBUG BEGIN_STMT

  <bb 20> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 21> :
<L28>:
  return;

}


CanTp_RxProcessData (struct CanTp_ChannelType * ChannelPtr, uint8 * NPduDataPtr, uint8 NSduDataLength)
{
  struct PduInfoType PduInfo;
  PduLengthType UL_BufferSize;
  BufReq_ReturnType Ret_CopyRxData;
  BufReq_ReturnType D.9495;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (short unsigned int) NSduDataLength;
  PduInfo.SduLength = _1;
  # DEBUG BEGIN_STMT
  PduInfo.SduDataPtr = NPduDataPtr;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.68_2 = CanTp_CfgPtr;
  CanTp_CfgPtr.69_3 = CanTp_CfgPtr;
  _4 = CanTp_CfgPtr.69_3->RxNSduConfigPtr;
  _5 = ChannelPtr->NSduId;
  _6 = (unsigned int) _5;
  _7 = _6 * 26;
  _8 = _4 + _7;
  _9 = CanTp_CfgPtr.68_2 + _8;
  _10 = _9->IPduId;
  Ret_CopyRxData = PduR_CanTpCopyRxData (_10, &PduInfo, &UL_BufferSize);
  # DEBUG BEGIN_STMT
  if (Ret_CopyRxData == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  UL_BufferSize.70_11 = UL_BufferSize;
  ChannelPtr->ActualBufferSize = UL_BufferSize.70_11;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  ChannelPtr->ActualBufferSize = 0;

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.9495 = Ret_CopyRxData;
  UL_BufferSize = {CLOBBER};
  PduInfo = {CLOBBER};
  return D.9495;

}


CanTp_ProcessStartOfReceptionData (struct CanTp_ChannelType * ChannelPtr, uint8 * NPduDataPtr, uint8 NSduDataLength)
{
  BufReq_ReturnType Ret_ReqRxBuffer;
  BufReq_ReturnType D.9490;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (NSduDataLength == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Ret_ReqRxBuffer = CanTp_RxProcessData (ChannelPtr, 0B, 0);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->ActualBufferSize;
  _2 = (short unsigned int) NSduDataLength;
  if (_1 < _2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Ret_ReqRxBuffer = CanTp_RxProcessData (ChannelPtr, 0B, 0);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Ret_ReqRxBuffer = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (Ret_ReqRxBuffer == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _3 = ChannelPtr->ActualBufferSize;
  _4 = (short unsigned int) NSduDataLength;
  if (_3 >= _4)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Ret_ReqRxBuffer = CanTp_RxProcessData (ChannelPtr, NPduDataPtr, NSduDataLength);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Ret_ReqRxBuffer = 2;

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.9490 = Ret_ReqRxBuffer;
  return D.9490;

}


CanTp_ProcessStartOfReception (struct CanTp_ChannelType * ChannelPtr)
{
  BufReq_ReturnType Ret_StartOfReception;
  Std_ReturnType Ret;
  Std_ReturnType D.9477;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.66_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.67_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.67_2->RxNSduConfigPtr;
  _4 = ChannelPtr->NSduId;
  _5 = (unsigned int) _4;
  _6 = _5 * 26;
  _7 = _3 + _6;
  _8 = CanTp_CfgPtr.66_1 + _7;
  _9 = _8->IPduId;
  _10 = ChannelPtr->TotalLength;
  _11 = &ChannelPtr->ActualBufferSize;
  Ret_StartOfReception = PduR_CanTpStartOfReception (_9, _10, _11);
  # DEBUG BEGIN_STMT
  switch (Ret_StartOfReception) <default: <L7> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L6> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Ret = 0;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 0, 1);
  # DEBUG BEGIN_STMT
  Ret = 1;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _12 = ChannelPtr->State;
  if (_12 == 65)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanTp_TryToSendFC (ChannelPtr, 5);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 0, 1);

  <bb 8> :
  # DEBUG BEGIN_STMT
  Ret = 1;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  ChannelPtr->ActualBufferSize = 0;
  # DEBUG BEGIN_STMT
  Ret = 0;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  # DEBUG BEGIN_STMT
  Ret = 1;
  # DEBUG BEGIN_STMT

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.9477 = Ret;
  return D.9477;

}


CanTp_PreparePadding (struct CanTp_ChannelType * ChannelPtr, uint8 Padding, uint8 CanIdType, struct PduInfoType * FCBufferPtr)
{
  uint8 PaddingByte;
  PduLengthType FrameLength;
  PduLengthType NPduSize;
  uint8_least Idx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PaddingByte = 0;
  # DEBUG BEGIN_STMT
  if (FCBufferPtr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FrameLength = FCBufferPtr->SduLength;
  # DEBUG BEGIN_STMT
  NPduSize = FCBufferPtr->SduLength;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->CanIfDLC;
  FrameLength = (PduLengthType) _1;
  # DEBUG BEGIN_STMT
  _2 = ChannelPtr->CanIfDLC;
  NPduSize = (PduLengthType) _2;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _3 = CanIdType + 254;
  if (_3 <= 1)
    goto <bb 6>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  PaddingByte = 0;
  # DEBUG BEGIN_STMT
  if (Padding == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  NPduSize = 64;
  goto <bb 26>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (FrameLength <= 8)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (Padding == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  NPduSize = 8;
  goto <bb 26>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (FrameLength <= 12)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  NPduSize = 12;
  goto <bb 26>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (FrameLength <= 16)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  NPduSize = 16;
  goto <bb 26>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (FrameLength <= 20)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  NPduSize = 20;
  goto <bb 26>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  if (FrameLength <= 24)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  NPduSize = 24;
  goto <bb 26>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (FrameLength <= 32)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  NPduSize = 32;
  goto <bb 26>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  if (FrameLength <= 48)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  NPduSize = 48;
  goto <bb 26>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  NPduSize = 64;
  goto <bb 26>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  if (Padding != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  NPduSize = 8;

  <bb 26> :
  # DEBUG BEGIN_STMT
  if (FCBufferPtr != 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  _4 = FCBufferPtr->SduLength;
  Idx = (uint8_least) _4;
  # DEBUG BEGIN_STMT
  FCBufferPtr->SduLength = NPduSize;
  goto <bb 33>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  _5 = ChannelPtr->CanIfDLC;
  Idx = (uint8_least) _5;
  # DEBUG BEGIN_STMT
  _6 = (unsigned char) NPduSize;
  ChannelPtr->CanIfDLC = _6;
  goto <bb 33>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  if (FCBufferPtr != 0B)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  _7 = FCBufferPtr->SduDataPtr;
  _8 = _7 + Idx;
  *_8 = PaddingByte;
  goto <bb 32>; [INV]

  <bb 31> :
  # DEBUG BEGIN_STMT
  ChannelPtr->CanIfData[Idx] = PaddingByte;

  <bb 32> :
  # DEBUG BEGIN_STMT
  Idx = Idx + 1;

  <bb 33> :
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) NPduSize;
  if (Idx < _9)
    goto <bb 29>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 34> :
  return;

}


CanTp_PreparexF (struct CanTp_ChannelType * ChannelPtr)
{
  const uint16 TotalLength;
  const uint32 TotalLength;
  uint8 NPduLength;
  uint8 DataIndex;
  const PduIdType NSduId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  NSduId = ChannelPtr->NSduId;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DataIndex = 0;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.51_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.52_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.52_2->TxNSduConfigPtr;
  _4 = (unsigned int) NSduId;
  _5 = _4 * 24;
  _6 = _3 + _5;
  _7 = CanTp_CfgPtr.51_1 + _6;
  _8 = _7->AddressingFormat;
  if (_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.53_9 = CanTp_CfgPtr;
  CanTp_CfgPtr.54_10 = CanTp_CfgPtr;
  _11 = CanTp_CfgPtr.54_10->TxNSduConfigPtr;
  _12 = (unsigned int) NSduId;
  _13 = _12 * 24;
  _14 = _11 + _13;
  _15 = CanTp_CfgPtr.53_9 + _14;
  _16 = (int) DataIndex;
  _17 = _15->N_TA_AE;
  ChannelPtr->CanIfData[_16] = _17;
  # DEBUG BEGIN_STMT
  DataIndex = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _18 = ChannelPtr->State;
  _19 = (int) _18;
  switch (_19) <default: <L13> [INV], case 96: <L2> [INV], case 97: <L6> [INV], case 98: <L10> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _20 = ChannelPtr->TotalLength;
  _21 = (unsigned char) _20;
  _22 = DataIndex + _21;
  NPduLength = _22 + 1;
  # DEBUG BEGIN_STMT
  if (NPduLength > 8)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _23 = (int) DataIndex;
  ChannelPtr->CanIfData[_23] = 0;
  # DEBUG BEGIN_STMT
  DataIndex.55_24 = DataIndex;
  DataIndex = DataIndex.55_24 + 1;
  # DEBUG BEGIN_STMT
  _25 = ChannelPtr->TotalLength;
  _26 = (int) DataIndex;
  _27 = (unsigned char) _25;
  ChannelPtr->CanIfData[_26] = _27;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _28 = ChannelPtr->TotalLength;
  _29 = (unsigned char) _28;
  _30 = (int) DataIndex;
  _31 = _29 & 15;
  ChannelPtr->CanIfData[_30] = _31;

  <bb 8> :
  # DEBUG BEGIN_STMT
  DataIndex.56_32 = DataIndex;
  DataIndex = DataIndex.56_32 + 1;
  # DEBUG BEGIN_STMT
  goto <bb 14>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  _33 = ChannelPtr->TotalLength;
  if (_33 > 4095)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _34 = ChannelPtr->TotalLength;
  TotalLength = (const uint32) _34;
  # DEBUG BEGIN_STMT
  _35 = (int) DataIndex;
  ChannelPtr->CanIfData[_35] = 16;
  # DEBUG BEGIN_STMT
  DataIndex.57_36 = DataIndex;
  DataIndex = DataIndex.57_36 + 1;
  # DEBUG BEGIN_STMT
  _37 = (int) DataIndex;
  ChannelPtr->CanIfData[_37] = 0;
  # DEBUG BEGIN_STMT
  DataIndex.58_38 = DataIndex;
  DataIndex = DataIndex.58_38 + 1;
  # DEBUG BEGIN_STMT
  _39 = TotalLength >> 24;
  _40 = (int) DataIndex;
  _41 = (unsigned char) _39;
  ChannelPtr->CanIfData[_40] = _41;
  # DEBUG BEGIN_STMT
  DataIndex.59_42 = DataIndex;
  DataIndex = DataIndex.59_42 + 1;
  # DEBUG BEGIN_STMT
  _43 = TotalLength >> 16;
  _44 = (int) DataIndex;
  _45 = (unsigned char) _43;
  ChannelPtr->CanIfData[_44] = _45;
  # DEBUG BEGIN_STMT
  DataIndex.60_46 = DataIndex;
  DataIndex = DataIndex.60_46 + 1;
  # DEBUG BEGIN_STMT
  _47 = TotalLength >> 8;
  _48 = (int) DataIndex;
  _49 = (unsigned char) _47;
  ChannelPtr->CanIfData[_48] = _49;
  # DEBUG BEGIN_STMT
  DataIndex.61_50 = DataIndex;
  DataIndex = DataIndex.61_50 + 1;
  # DEBUG BEGIN_STMT
  _51 = (int) DataIndex;
  _52 = (unsigned char) TotalLength;
  ChannelPtr->CanIfData[_51] = _52;
  # DEBUG BEGIN_STMT
  DataIndex.62_53 = DataIndex;
  DataIndex = DataIndex.62_53 + 1;
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  TotalLength = ChannelPtr->TotalLength;
  # DEBUG BEGIN_STMT
  _54 = TotalLength >> 8;
  _55 = (unsigned char) _54;
  _56 = (int) DataIndex;
  _57 = _55 | 16;
  ChannelPtr->CanIfData[_56] = _57;
  # DEBUG BEGIN_STMT
  DataIndex.63_58 = DataIndex;
  DataIndex = DataIndex.63_58 + 1;
  # DEBUG BEGIN_STMT
  _59 = (int) DataIndex;
  _60 = (unsigned char) TotalLength;
  ChannelPtr->CanIfData[_59] = _60;
  # DEBUG BEGIN_STMT
  DataIndex.64_61 = DataIndex;
  DataIndex = DataIndex.64_61 + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  ChannelPtr->ProcessedBlockFrames = 1;
  # DEBUG BEGIN_STMT
  ChannelPtr->BlockSize = 1;
  # DEBUG BEGIN_STMT
  goto <bb 14>; [INV]

  <bb 13> :
<L10>:
  # DEBUG BEGIN_STMT
  _62 = ChannelPtr->SequenceNumber;
  _63 = (int) DataIndex;
  _64 = _62 | 32;
  ChannelPtr->CanIfData[_63] = _64;
  # DEBUG BEGIN_STMT
  DataIndex.65_65 = DataIndex;
  DataIndex = DataIndex.65_65 + 1;
  # DEBUG BEGIN_STMT
  _66 = ChannelPtr->SequenceNumber;
  _67 = _66;
  _68 = _67 + 1;
  ChannelPtr->SequenceNumber = _68;
  # DEBUG BEGIN_STMT
  _69 = ChannelPtr->SequenceNumber;
  _70 = _69 & 15;
  ChannelPtr->SequenceNumber = _70;
  # DEBUG BEGIN_STMT
  _71 = ChannelPtr->ProcessedBlockFrames;
  _72 = _71;
  _73 = _72 + 1;
  ChannelPtr->ProcessedBlockFrames = _73;
  # DEBUG BEGIN_STMT

  <bb 14> :
<L13>:
  # DEBUG BEGIN_STMT
  ChannelPtr->CanIfDLC = DataIndex;
  return;

}


CanTp_CheckAndHandleWaitFrameTimeOut (struct CanTp_ChannelType * ChannelPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->WftCounter;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = ChannelPtr->Ticks;
  CanTp_CfgPtr.49_3 = CanTp_CfgPtr;
  CanTp_CfgPtr.50_4 = CanTp_CfgPtr;
  _5 = CanTp_CfgPtr.50_4->RxNSduConfigPtr;
  _6 = ChannelPtr->NSduId;
  _7 = (unsigned int) _6;
  _8 = _7 * 26;
  _9 = _5 + _8;
  _10 = CanTp_CfgPtr.49_3 + _9;
  _11 = _10->N_Ar;
  _12 = (long unsigned int) _11;
  if (_2 <= _12)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanTp_TryToSendFC (ChannelPtr, 6);

  <bb 5> :
  return;

}


CanTp_VerifyBlockSize (struct CanTp_ChannelType * ChannelPtr)
{
  uint8 ActualBlockSize;
  Std_ReturnType BSCalc_Ok;
  const PduLengthType RemainingBytes;
  boolean Ret_BS_Ok;
  boolean D.9419;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->TotalLength;
  _2 = ChannelPtr->ProcessedLength;
  RemainingBytes = _1 - _2;
  # DEBUG BEGIN_STMT
  _3 = ChannelPtr->ActualBufferSize;
  if (RemainingBytes <= _3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Ret_BS_Ok = 1;
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  BSCalc_Ok = CanTp_CalculateBlockSize (ChannelPtr, &ActualBlockSize);
  # DEBUG BEGIN_STMT
  if (BSCalc_Ok == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = ChannelPtr->BlockSize;
  ActualBlockSize.48_5 = ActualBlockSize;
  if (_4 <= ActualBlockSize.48_5)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Ret_BS_Ok = 1;
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Ret_BS_Ok = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Ret_BS_Ok = 0;

  <bb 9> :
  ActualBlockSize = {CLOBBER};

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.9419 = Ret_BS_Ok;
  return D.9419;

}


CanTp_CalculateBlockSize (struct CanTp_ChannelType * ChannelPtr, uint8 * BlockSizePtr)
{
  const uint8 NSduMaxSize;
  const struct CanTp_RxNSduConfigType * const RxNSduCfgPtr;
  Std_ReturnType Ret_BSCalc;
  PduLengthType BlockSizeTmp;
  const PduLengthType RemainingBytes;
  const PduIdType NSduId;
  Std_ReturnType D.9408;
  int iftmp.39;

  <bb 2> :
  # DEBUG BEGIN_STMT
  NSduId = ChannelPtr->NSduId;
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->TotalLength;
  _2 = ChannelPtr->ProcessedLength;
  RemainingBytes = _1 - _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.35_3 = CanTp_CfgPtr;
  CanTp_CfgPtr.36_4 = CanTp_CfgPtr;
  _5 = CanTp_CfgPtr.36_4->RxNSduConfigPtr;
  _6 = ChannelPtr->NSduId;
  _7 = (unsigned int) _6;
  _8 = _7 * 26;
  _9 = _5 + _8;
  RxNSduCfgPtr = CanTp_CfgPtr.35_3 + _9;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.37_10 = CanTp_CfgPtr;
  CanTp_CfgPtr.38_11 = CanTp_CfgPtr;
  _12 = CanTp_CfgPtr.38_11->RxNSduConfigPtr;
  _13 = (unsigned int) NSduId;
  _14 = _13 * 26;
  _15 = _12 + _14;
  _16 = CanTp_CfgPtr.37_10 + _15;
  _17 = _16->NPduLength;
  _18 = RxNSduCfgPtr->AddressingFormat;
  if (_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _19 = RxNSduCfgPtr->AddressingFormat;
  if (_19 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.39 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.39 = 0;

  <bb 6> :
  _20 = (unsigned char) iftmp.39;
  _21 = _17 - _20;
  NSduMaxSize = _21 + 255;
  # DEBUG BEGIN_STMT
  _22 = ChannelPtr->ActualBufferSize;
  if (RemainingBytes <= _22)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.40_23 = CanTp_CfgPtr;
  CanTp_CfgPtr.41_24 = CanTp_CfgPtr;
  _25 = CanTp_CfgPtr.41_24->RxNSduConfigPtr;
  _26 = (unsigned int) NSduId;
  _27 = _26 * 26;
  _28 = _25 + _27;
  _29 = CanTp_CfgPtr.40_23 + _28;
  _30 = _29->BS;
  BlockSizeTmp = (PduLengthType) _30;
  # DEBUG BEGIN_STMT
  Ret_BSCalc = 0;
  goto <bb 15>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _31 = ChannelPtr->ActualBufferSize;
  _32 = (int) _31;
  _33 = (int) NSduMaxSize;
  _34 = _32 / _33;
  BlockSizeTmp = (PduLengthType) _34;
  # DEBUG BEGIN_STMT
  if (BlockSizeTmp != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Ret_BSCalc = 0;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.42_35 = CanTp_CfgPtr;
  CanTp_CfgPtr.43_36 = CanTp_CfgPtr;
  _37 = CanTp_CfgPtr.43_36->RxNSduConfigPtr;
  _38 = (unsigned int) NSduId;
  _39 = _38 * 26;
  _40 = _37 + _39;
  _41 = CanTp_CfgPtr.42_35 + _40;
  _42 = _41->BS;
  _43 = (short unsigned int) _42;
  if (BlockSizeTmp > _43)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  CanTp_CfgPtr.44_44 = CanTp_CfgPtr;
  CanTp_CfgPtr.45_45 = CanTp_CfgPtr;
  _46 = CanTp_CfgPtr.45_45->RxNSduConfigPtr;
  _47 = (unsigned int) NSduId;
  _48 = _47 * 26;
  _49 = _46 + _48;
  _50 = CanTp_CfgPtr.44_44 + _49;
  _51 = _50->BS;
  if (_51 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.46_52 = CanTp_CfgPtr;
  CanTp_CfgPtr.47_53 = CanTp_CfgPtr;
  _54 = CanTp_CfgPtr.47_53->RxNSduConfigPtr;
  _55 = (unsigned int) NSduId;
  _56 = _55 * 26;
  _57 = _54 + _56;
  _58 = CanTp_CfgPtr.46_52 + _57;
  _59 = _58->BS;
  BlockSizeTmp = (PduLengthType) _59;

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (BlockSizeTmp > 254)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  BlockSizeTmp = 255;
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Ret_BSCalc = 1;

  <bb 15> :
  # DEBUG BEGIN_STMT
  _60 = (unsigned char) BlockSizeTmp;
  *BlockSizePtr = _60;
  # DEBUG BEGIN_STMT
  D.9408 = Ret_BSCalc;
  return D.9408;

}


CanTp_PrepareFC (struct CanTp_ChannelType * ChannelPtr, uint8 FcNPCI_Header)
{
  struct PduInfoType Local_Buffer;
  uint8 FC_Data[64];
  uint8 DataIndex;
  const PduIdType NSduId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  NSduId = ChannelPtr->NSduId;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.20_1 = CanTp_CfgPtr;
  CanTp_CfgPtr.21_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.21_2->RxNSduConfigPtr;
  _4 = (unsigned int) NSduId;
  _5 = _4 * 26;
  _6 = _3 + _5;
  _7 = CanTp_CfgPtr.20_1 + _6;
  _8 = _7->AddressingFormat;
  if (_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.22_9 = CanTp_CfgPtr;
  CanTp_CfgPtr.23_10 = CanTp_CfgPtr;
  _11 = CanTp_CfgPtr.23_10->RxNSduConfigPtr;
  _12 = (unsigned int) NSduId;
  _13 = _12 * 26;
  _14 = _11 + _13;
  _15 = CanTp_CfgPtr.22_9 + _14;
  _16 = _15->N_TA_AE;
  FC_Data[0] = _16;
  # DEBUG BEGIN_STMT
  DataIndex = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  DataIndex = 0;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _17 = (int) DataIndex;
  FC_Data[_17] = FcNPCI_Header;
  # DEBUG BEGIN_STMT
  DataIndex.24_18 = DataIndex;
  DataIndex = DataIndex.24_18 + 1;
  # DEBUG BEGIN_STMT
  _19 = (int) DataIndex;
  _20 = ChannelPtr->BlockSize;
  FC_Data[_19] = _20;
  # DEBUG BEGIN_STMT
  DataIndex.25_21 = DataIndex;
  DataIndex = DataIndex.25_21 + 1;
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.26_22 = CanTp_CfgPtr;
  CanTp_CfgPtr.27_23 = CanTp_CfgPtr;
  _24 = CanTp_CfgPtr.27_23->RxNSduConfigPtr;
  _25 = (unsigned int) NSduId;
  _26 = _25 * 26;
  _27 = _24 + _26;
  _28 = CanTp_CfgPtr.26_22 + _27;
  _29 = (int) DataIndex;
  _30 = _28->STmin;
  FC_Data[_29] = _30;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DataIndex.28_31 = DataIndex;
  DataIndex = DataIndex.28_31 + 1;
  # DEBUG BEGIN_STMT
  _32 = (short unsigned int) DataIndex;
  Local_Buffer.SduLength = _32;
  # DEBUG BEGIN_STMT
  Local_Buffer.SduDataPtr = &FC_Data[0];
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.29_33 = CanTp_CfgPtr;
  CanTp_CfgPtr.30_34 = CanTp_CfgPtr;
  _35 = CanTp_CfgPtr.30_34->RxNSduConfigPtr;
  _36 = (unsigned int) NSduId;
  _37 = _36 * 26;
  _38 = _35 + _37;
  _39 = CanTp_CfgPtr.29_33 + _38;
  _40 = _39->PaddingActivation;
  CanTp_CfgPtr.31_41 = CanTp_CfgPtr;
  CanTp_CfgPtr.32_42 = CanTp_CfgPtr;
  _43 = CanTp_CfgPtr.32_42->RxNSduConfigPtr;
  _44 = (unsigned int) NSduId;
  _45 = _44 * 26;
  _46 = _43 + _45;
  _47 = CanTp_CfgPtr.31_41 + _46;
  _48 = _47->FcCanIdType;
  CanTp_PreparePadding (ChannelPtr, _40, _48, &Local_Buffer);
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.33_49 = CanTp_CfgPtr;
  CanTp_CfgPtr.34_50 = CanTp_CfgPtr;
  _51 = CanTp_CfgPtr.34_50->RxNSduConfigPtr;
  _52 = (unsigned int) NSduId;
  _53 = _52 * 26;
  _54 = _51 + _53;
  _55 = CanTp_CfgPtr.33_49 + _54;
  _56 = _55->N_Ar;
  _57 = (long unsigned int) _56;
  ChannelPtr->Ticks = _57;
  # DEBUG BEGIN_STMT
  CanTp_TransmitFrame (ChannelPtr, &Local_Buffer);
  FC_Data = {CLOBBER};
  Local_Buffer = {CLOBBER};
  return;

}


CanTp_StallHandling (struct CanTp_ChannelType * ChannelPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.9386;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->ChannelLockFlag;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = ChannelPtr->PostTicks;
  _3 = _2;
  _4 = _3 + 1;
  ChannelPtr->PostTicks = _4;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.9386 = RetVal;
  return D.9386;

}


CanTp_ChannelHandling (CanTp_ChType Channel)
{
  Std_ReturnType RetVal;
  struct CanTp_ChannelType * ChannelPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _1 = (int) Channel;
  ChannelPtr = &CanTp_Channel[_1];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ChannelPtr->State;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal = CanTp_StallHandling (ChannelPtr);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _3 = ChannelPtr->Ticks;
  if (_3 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_TimeoutHandling (ChannelPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _4 = ChannelPtr->Ticks;
  _5 = _4 + 4294967295;
  ChannelPtr->Ticks = _5;
  # DEBUG BEGIN_STMT
  _6 = ChannelPtr->State;
  _7 = (unsigned int) _6;
  _8 = _7 & 96;
  if (_8 == 64)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  CanTp_RxStateHandling (ChannelPtr);
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_TxStateHandling (ChannelPtr, 0);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_HandlePostponedFlags (ChannelPtr);

  <bb 11> :
  return;

}


CanTp_TimeoutHandling (struct CanTp_ChannelType * ChannelPtr)
{
  CanTp_ChType Rx_ChannelID;
  CanTp_TxChannelType Tx_ChannelID;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Tx_ChannelID = 255;
  # DEBUG BEGIN_STMT
  Rx_ChannelID = 255;
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->State;
  _2 = (int) _1;
  switch (_2) <default: <L17> [INV], case 64: <L2> [INV], case 65 ... 66: <L0> [INV], case 84 ... 86: <L3> [INV], case 112 ... 114: <L7> [INV], case 194: <L6> [INV], case 204 ... 206: <L10> [INV], case 228: <L16> [INV], case 232 ... 234: <L10> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 8);
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 4> :
<L2>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 5> :
<L3>:
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.16_3 = CanTp_CfgPtr;
  CanTp_CfgPtr.17_4 = CanTp_CfgPtr;
  _5 = CanTp_CfgPtr.17_4->RxNSduConfigPtr;
  _6 = ChannelPtr->NSduId;
  _7 = (unsigned int) _6;
  _8 = _7 * 26;
  _9 = _5 + _8;
  _10 = CanTp_CfgPtr.16_3 + _9;
  Tx_ChannelID = _10->Tx_Channel;
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 2);
  # DEBUG BEGIN_STMT
  CanTp_TransmitPostponedFrame (Tx_ChannelID);
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 6> :
<L6>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 4);
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 7> :
<L7>:
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.18_11 = CanTp_CfgPtr;
  CanTp_CfgPtr.19_12 = CanTp_CfgPtr;
  _13 = CanTp_CfgPtr.19_12->TxNSduConfigPtr;
  _14 = ChannelPtr->NSduId;
  _15 = (unsigned int) _14;
  _16 = _15 * 24;
  _17 = _13 + _16;
  _18 = CanTp_CfgPtr.18_11 + _17;
  Rx_ChannelID = _18->Rx_Channel;
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 2);
  # DEBUG BEGIN_STMT
  CanTp_TransmitPostponedFlowControl (Rx_ChannelID);
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 8> :
<L10>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 2);
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 9> :
<L16>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 3);
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 10> :
<L17>:
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  # DEBUG BEGIN_STMT

  <bb 11> :
  return;

}


CanTp_MainFunction ()
{
  uint32 MfCounterTicks;
  CanTp_ChType No_of_nonIdleChannels;
  CanTp_ChType Channel;
  struct CanTp_ChannelType * ChannelPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  No_of_nonIdleChannels = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  No_of_nonIdleChannels = CanTp_NonIdleChannelCounter;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CanTp_InitVars.State;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  if (No_of_nonIdleChannels != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Channel = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = (int) Channel;
  ChannelPtr = &CanTp_Channel[_2];
  # DEBUG BEGIN_STMT
  MfCounterTicks = ChannelPtr->MfCounterTicks;
  # DEBUG BEGIN_STMT
  if (MfCounterTicks != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  MfCounterTicks = MfCounterTicks + 4294967295;
  # DEBUG BEGIN_STMT
  ChannelPtr->MfCounterTicks = MfCounterTicks;
  # DEBUG BEGIN_STMT
  if (MfCounterTicks == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  CanTp_STminCallback (Channel);

  <bb 8> :
  # DEBUG BEGIN_STMT
  Channel.12_3 = Channel;
  Channel = Channel.12_3 + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.13_4 = CanTp_CfgPtr;
  _5 = CanTp_CfgPtr.13_4->NumberOfTxChannels;
  if (Channel < _5)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.14_6 = CanTp_CfgPtr;
  Channel = CanTp_CfgPtr.14_6->NumberOfChannels;

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Channel.15_7 = Channel;
  Channel = Channel.15_7 + 255;
  # DEBUG BEGIN_STMT
  CanTp_ChannelHandling (Channel);
  # DEBUG BEGIN_STMT
  if (Channel != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  return;

}


CanTp_CancelTransmit (PduIdType CanTpTxSduId)
{
  struct CanTp_ChannelType * ChannelPtr;
  Std_ReturnType IsChannelAvailable;
  boolean ChannelLockSuccess;
  CanTp_TxChannelType Channel;
  Std_ReturnType ret_result;
  Std_ReturnType D.9363;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CanTp_InitVars.State;
  if (_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 8, 32);
  goto <bb 21>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.7_2 = CanTp_CfgPtr;
  _3 = CanTp_CfgPtr.7_2->NumberTxNSdus;
  if (CanTpTxSduId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 8, 2);
  goto <bb 21>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.8_4 = CanTp_CfgPtr;
  CanTp_CfgPtr.9_5 = CanTp_CfgPtr;
  _6 = CanTp_CfgPtr.9_5->TxNSduConfigPtr;
  _7 = (unsigned int) CanTpTxSduId;
  _8 = _7 * 24;
  _9 = _6 + _8;
  _10 = CanTp_CfgPtr.8_4 + _9;
  _11 = _10->CanTpTc;
  if (_11 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IsChannelAvailable = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.10_12 = CanTp_CfgPtr;
  CanTp_CfgPtr.11_13 = CanTp_CfgPtr;
  _14 = CanTp_CfgPtr.11_13->TxNSduConfigPtr;
  _15 = (unsigned int) CanTpTxSduId;
  _16 = _15 * 24;
  _17 = _14 + _16;
  _18 = CanTp_CfgPtr.10_12 + _17;
  Channel = _18->Channel;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _19 = (int) Channel;
  ChannelPtr = &CanTp_Channel[_19];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _20 = ChannelPtr->ChannelLockFlag;
  if (_20 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ChannelLockSuccess = 0;
  # DEBUG BEGIN_STMT
  ret_result = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelLockSuccess = 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (ChannelLockSuccess != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _21 = ChannelPtr->NSduId;
  if (CanTpTxSduId == _21)
    goto <bb 12>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _22 = ChannelPtr->State;
  _23 = (int) _22;
  switch (_23) <default: <L22> [INV], case 96: <L10> [INV], case 97 ... 98: <L12> [INV], case 106: <L12> [INV], case 112 ... 114: <L18> [INV], case 122: <L12> [INV], case 228: <L18> [INV], case 232: <L10> [INV], case 233 ... 234: <L12> [INV]>

  <bb 13> :
<L10>:
  # DEBUG BEGIN_STMT
  ret_result = 1;
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 14> :
<L12>:
  # DEBUG BEGIN_STMT
  ret_result = 0;
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 15> :
<L18>:
  # DEBUG BEGIN_STMT
  ret_result = 1;
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 16> :
<L22>:
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 8, 160);
  # DEBUG BEGIN_STMT
  ret_result = 1;
  # DEBUG BEGIN_STMT

  <bb 17> :
  # DEBUG BEGIN_STMT
  if (ret_result == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 8, 160);
  # DEBUG BEGIN_STMT
  ret_result = 1;

  <bb 20> :
  # DEBUG BEGIN_STMT
  CanTp_HandlePostponedFlags (ChannelPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;

  <bb 21> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9363 = ret_result;
  return D.9363;

}


CanTp_InitChannelPtr (struct CanTp_ChannelType * ChannelPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->State = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->NSduId = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->TotalLength = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->ActualBufferSize = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->ProcessedLength = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->BlockSize = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->ProcessedBlockFrames = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->SequenceNumber = 1;
  # DEBUG BEGIN_STMT
  ChannelPtr->TempLength = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->WftCounter = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->Ticks = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->PostTicks = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ChannelPtr->PostFlag;
  _2 = _1 & 253;
  ChannelPtr->PostFlag = _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = ChannelPtr->PostFlag;
  _4 = _3 & 251;
  ChannelPtr->PostFlag = _4;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->StMin = 255;
  # DEBUG BEGIN_STMT
  ChannelPtr->MfCounterTicks = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->CanIfDLC = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->ConnectionFlags = 0;
  # DEBUG BEGIN_STMT
  ChannelPtr->ReceivedSduLength = 0;
  # DEBUG BEGIN_STMT
  CanTp_NonIdleChannelCounter.5_5 = CanTp_NonIdleChannelCounter;
  if (CanTp_NonIdleChannelCounter.5_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CanTp_NonIdleChannelCounter.6_6 = CanTp_NonIdleChannelCounter;
  _7 = CanTp_NonIdleChannelCounter.6_6 + 255;
  CanTp_NonIdleChannelCounter = _7;

  <bb 4> :
  return;

}


CanTp_Init (const struct CanTp_ConfigType * CfgPtr)
{
  boolean StopChannel;
  boolean ChannelInitFlag;
  CanTp_ChType Channel;
  struct CanTp_ChannelType * ChannelPtr;
  const struct CanTp_ConfigType * LocalConfigPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  LocalConfigPtr = CfgPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (LocalConfigPtr == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 1, 3);
  goto <bb 18>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = CanTp_IsValidConfig (LocalConfigPtr);
  if (_1 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (35, 0, 1, 1);
  goto <bb 18>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelInitFlag = 0;
  # DEBUG BEGIN_STMT
  StopChannel = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr = LocalConfigPtr;
  # DEBUG BEGIN_STMT
  _2 = CanTp_InitVars.State;
  if (_2 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  StopChannel = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_InitVars.State = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  CanTp_NonIdleChannelCounter = 0;
  # DEBUG BEGIN_STMT
  ChannelInitFlag = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_CanTp_SCHM_CANTP_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (StopChannel == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Channel = 0;
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _3 = (int) Channel;
  ChannelPtr = &CanTp_Channel[_3];
  # DEBUG BEGIN_STMT
  CanTp_StopChannel (ChannelPtr, 1, 1);
  # DEBUG BEGIN_STMT
  Channel.1_4 = Channel;
  Channel = Channel.1_4 + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.2_5 = CanTp_CfgPtr;
  _6 = CanTp_CfgPtr.2_5->NumberOfChannels;
  if (Channel < _6)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (ChannelInitFlag == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Channel = 0;
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _7 = (int) Channel;
  ChannelPtr = &CanTp_Channel[_7];
  # DEBUG BEGIN_STMT
  CanTp_InitChannelPtr (ChannelPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _8 = ChannelPtr->PostFlag;
  _9 = _8 & 254;
  ChannelPtr->PostFlag = _9;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChannelPtr->ChannelLockFlag = 0;
  # DEBUG BEGIN_STMT
  Channel.3_10 = Channel;
  Channel = Channel.3_10 + 1;

  <bb 16> :
  # DEBUG BEGIN_STMT
  CanTp_CfgPtr.4_11 = CanTp_CfgPtr;
  _12 = CanTp_CfgPtr.4_11->NumberOfChannels;
  if (Channel < _12)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CanTp_InitVars.State = 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  return;

}


CanTp_IsValidConfig (const void * voidConfigPtr)
{
  const struct CanTp_ConfigType * ConfigPtr;
  Std_ReturnType RetVal;
  Std_ReturnType D.9328;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  ConfigPtr = voidConfigPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (ConfigPtr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = ConfigPtr->PlatformSignature;
  _2 = TS_PlatformSigIsValid (_1);
  if (_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = ConfigPtr->CfgSignature;
  if (_3 == 294722855)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = ConfigPtr->LcfgSignature;
  CanTp_LcfgSignature.0_5 = CanTp_LcfgSignature;
  if (_4 == CanTp_LcfgSignature.0_5)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = ConfigPtr->PublicInfoSignature;
  if (_6 == 1190142462)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.9328 = RetVal;
  return D.9328;

}


