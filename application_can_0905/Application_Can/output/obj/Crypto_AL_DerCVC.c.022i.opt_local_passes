Crypto_AL_DerCVCGetDate (const uint8 * Encoding, struct Crypto_CVDateInfoType * CVDate)
{
  uint32 CurrentPos;
  uint32 ThingLengthPtr;
  uint8[6] * _1;
  const uint8 * _2;
  uint8[6] * _3;
  const uint8 * _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CurrentPos_8 = Crypto_AL_DerSubComponentContents (&Crypto_DerCVCCptCertificate, Encoding_6(D), &Crypto_DerCVCSubCptsTBSCert[5], &ThingLengthPtr, 0);
  # DEBUG CurrentPos => CurrentPos_8
  # DEBUG BEGIN_STMT
  _1 = &CVDate_9(D)->EffectiveDate;
  _2 = Encoding_6(D) + CurrentPos_8;
  TS_MemCpy32 (_1, _2, 6);
  # DEBUG BEGIN_STMT
  CurrentPos_12 = Crypto_AL_DerSubComponentContents (&Crypto_DerCVCCptCertificate, Encoding_6(D), &Crypto_DerCVCSubCptsTBSCert[6], &ThingLengthPtr, 0);
  # DEBUG CurrentPos => CurrentPos_12
  # DEBUG BEGIN_STMT
  _3 = &CVDate_9(D)->ExpirationDate;
  _4 = Encoding_6(D) + CurrentPos_12;
  TS_MemCpy32 (_3, _4, 6);
  ThingLengthPtr ={v} {CLOBBER};
  return;

}


Crypto_AL_DerCVCRSAPubKeyGetModulos (uint8 * Encoding, uint32 * ModulusLengthPtr)
{
  long unsigned int _1;
  uint8 * _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_AL_DerSubComponentContents (&Crypto_DerCVCCptCertificate, Encoding_3(D), &Crypto_DerCVCSubCptsSbjPbKeyRsaInfo[1], ModulusLengthPtr_4(D), 0);
  _6 = Encoding_3(D) + _1;
  return _6;

}


Crypto_AL_DerCVCRSAPubKeyGetOid (const uint8 * Encoding)
{
  uint8 RetVal;
  uint8 IdTaRsaPssSha256[10];
  uint32 OidLength;
  const uint8 * OidPtr;
  uint8 i;
  long unsigned int _1;
  long unsigned int OidLength.4_2;
  int _3;
  unsigned char _4;
  sizetype _5;
  const uint8 * _6;
  unsigned char _7;
  unsigned char i.5_8;
  uint8 _25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OidPtr_13 = 0B;
  # DEBUG OidPtr => OidPtr_13
  # DEBUG BEGIN_STMT
  OidLength = 0;
  # DEBUG BEGIN_STMT
  IdTaRsaPssSha256 = "\x04\x00\x7f\x00\x07\x02\x02\x02\x01\x04";
  # DEBUG BEGIN_STMT
  RetVal_17 = 0;
  # DEBUG RetVal => RetVal_17
  # DEBUG BEGIN_STMT
  _1 = Crypto_AL_DerSubComponentContents (&Crypto_DerCVCCptCertificate, Encoding_18(D), &Crypto_DerCVCSubCptsSbjPbKeyRsaInfo[0], &OidLength, 0);
  OidPtr_20 = Encoding_18(D) + _1;
  # DEBUG OidPtr => OidPtr_20
  # DEBUG BEGIN_STMT
  OidLength.4_2 = OidLength;
  if (OidLength.4_2 == 10)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal_21 = 1;
  # DEBUG RetVal => RetVal_21
  # DEBUG BEGIN_STMT
  i_22 = 0;
  # DEBUG i => i_22
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = (int) i_9;
  _4 = IdTaRsaPssSha256[_3];
  _5 = (sizetype) i_9;
  _6 = OidPtr_20 + _5;
  _7 = *_6;
  if (_4 != _7)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal_23 = 0;
  # DEBUG RetVal => RetVal_23

  <bb 6> :
  # RetVal_10 = PHI <RetVal_11(4), RetVal_23(5)>
  # DEBUG RetVal => RetVal_10
  # DEBUG BEGIN_STMT
  i.5_8 = i_9;
  i_24 = i.5_8 + 1;
  # DEBUG i => i_24

  <bb 7> :
  # i_9 = PHI <i_22(3), i_24(6)>
  # RetVal_11 = PHI <RetVal_21(3), RetVal_10(6)>
  # DEBUG RetVal => RetVal_11
  # DEBUG i => i_9
  # DEBUG BEGIN_STMT
  if (i_9 <= 9)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # RetVal_12 = PHI <RetVal_17(2), RetVal_11(7)>
  # DEBUG RetVal => RetVal_12
  # DEBUG BEGIN_STMT
  _25 = RetVal_12;
  OidLength ={v} {CLOBBER};
  IdTaRsaPssSha256 ={v} {CLOBBER};
  return _25;

}


Crypto_AL_DerCVCRSAPubKeyGetExponent (uint8 * Encoding, uint32 * ExponentLengthPtr)
{
  long unsigned int _1;
  uint8 * _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_AL_DerSubComponentContents (&Crypto_DerCVCCptCertificate, Encoding_3(D), &Crypto_DerCVCSubCptsSbjPbKeyRsaInfo[2], ExponentLengthPtr_4(D), 0);
  _6 = Encoding_3(D) + _1;
  return _6;

}


Crypto_AL_DerCVCGetSignedData (uint8 * Encoding, uint32 * ThingLengthPtr)
{
  uint8 * ResultPtr;
  uint32 Position;
  const struct Crypto_DerParseFunctionsType * _1;
  boolean (*<T46e>) (const struct Crypto_DerComponentStruct *, const uint8 *, const struct Crypto_DerSubComponentStruct *, uint32 *, uint32) _2;
  long unsigned int Position.1_3;
  uint8 * _4;
  long unsigned int _5;
  long unsigned int Position.2_6;
  uint8 * _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int Position.3_10;
  uint8 * _19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = &Crypto_DerParseFunctionsSequence;
  _2 = _1->FindFunction;
  _2 (&Crypto_DerCVCCptCertificate, Encoding_12(D), &Crypto_DerCVCSubCptsCertificate[0], &Position, 0);
  # DEBUG BEGIN_STMT
  Position.1_3 = Position;
  _4 = Encoding_12(D) + Position.1_3;
  _5 = Crypto_AL_DerEncGetContentsStart (_4);
  Position.2_6 = Position;
  _7 = Encoding_12(D) + Position.2_6;
  _8 = Crypto_AL_DerEncGetContentsLength (_7);
  _9 = _5 + _8;
  *ThingLengthPtr_16(D) = _9;
  # DEBUG BEGIN_STMT
  Position.3_10 = Position;
  ResultPtr_18 = Encoding_12(D) + Position.3_10;
  # DEBUG ResultPtr => ResultPtr_18
  # DEBUG BEGIN_STMT
  _19 = ResultPtr_18;
  Position ={v} {CLOBBER};
  return _19;

}


Crypto_AL_DerCVCGetSignatureValue (uint8 * Encoding, uint32 * ThingLengthPtr)
{
  long unsigned int _1;
  uint8 * _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_AL_DerSubComponentContents (&Crypto_DerCVCCptCertificate, Encoding_3(D), &Crypto_DerCVCSubCptsCertificate[1], ThingLengthPtr_4(D), 0);
  _6 = Encoding_3(D) + _1;
  return _6;

}


Crypto_AL_DerCVCCheckCertificate (const uint8 * Encoding, uint32 EncodingLength)
{
  Std_ReturnType Valid;
  uint32 CurrentPos;
  const struct Crypto_DerParseFunctionsType * _1;
  boolean (*<T473>) (const struct Crypto_DerComponentStruct *, const uint8 *, uint32, uint32 *) _2;
  unsigned char _3;
  long unsigned int CurrentPos.0_4;
  Std_ReturnType _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CurrentPos = 0;
  # DEBUG BEGIN_STMT
  Valid_8 = 1;
  # DEBUG Valid => Valid_8
  # DEBUG BEGIN_STMT
  _1 = &Crypto_DerParseFunctionsSequence;
  _2 = _1->CheckFunction;
  _3 = _2 (&Crypto_DerCVCCptCertificate, Encoding_9(D), EncodingLength_10(D), &CurrentPos);
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  CurrentPos.0_4 = CurrentPos;
  if (EncodingLength_10(D) == CurrentPos.0_4)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Valid_12 = 0;
  # DEBUG Valid => Valid_12

  <bb 5> :
  # Valid_5 = PHI <Valid_8(2), Valid_8(3), Valid_12(4)>
  # DEBUG Valid => Valid_5
  # DEBUG BEGIN_STMT
  _13 = Valid_5;
  CurrentPos ={v} {CLOBBER};
  return _13;

}


