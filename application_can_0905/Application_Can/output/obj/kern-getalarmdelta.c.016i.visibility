
Marking local functions:


Marking externally visible functions: OS_GetAlarmDelta


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_totalAlarms/3 (OS_totalAlarms) @06c33b88
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_GetAlarmDelta/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_alarmTableBase/2 (OS_alarmTableBase) @06c33b40
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_GetAlarmDelta/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_counterTableBase/1 (OS_counterTableBase) @06c33a68
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_GetAlarmDelta/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_GetAlarmDelta/0 (OS_GetAlarmDelta) @06c58b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_counterTableBase/1 (read)OS_alarmTableBase/2 (read)OS_totalAlarms/3 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
   Indirect call
__attribute__((target ("general-regs-only")))
OS_GetAlarmDelta (os_alarmid_t a, const struct os_alarm_t * as, struct os_alarmdynamic_t * ad, os_tick_t * out)
{
  os_tick_t total;
  os_alarmid_t ap;
  os_int_t result;
  struct os_counterdynamic_t * cd;
  const struct os_counter_t * cs;
  os_int_t D.7432;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  result = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_counterTableBase.0_1 = OS_counterTableBase;
  _2 = as->counter;
  _3 = (unsigned int) _2;
  _4 = _3 * 32;
  cs = OS_counterTableBase.0_1 + _4;
  # DEBUG BEGIN_STMT
  cd = cs->dynamic;
  # DEBUG BEGIN_STMT
  _5 = cs->hwt;
  if (_5 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = cd->lock;
  if (_6 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = cs->updFunc;
  _7 (cs);

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = ad->inUse;
  if (_8 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  total = ad->delta;
  # DEBUG BEGIN_STMT
  ap = cd->head;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  OS_alarmTableBase.1_9 = OS_alarmTableBase;
  _10 = (unsigned int) ap;
  _11 = _10 * 28;
  _12 = OS_alarmTableBase.1_9 + _11;
  ad = _12->dynamic;
  # DEBUG BEGIN_STMT
  _13 = ad->delta;
  total = total + _13;
  # DEBUG BEGIN_STMT
  ap = ad->next;

  <bb 8> :
  # DEBUG BEGIN_STMT
  OS_totalAlarms.2_14 = OS_totalAlarms;
  if (ap < OS_totalAlarms.2_14)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  if (ap != a)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (ap == a)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  *out = total;
  goto <bb 14>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  result = -1;
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  result = 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  D.7432 = result;
  return D.7432;

}


