__attribute__((target ("general-regs-only")))
OS_InitKernStack ()
{
  register os_stackelement_t * OS_getSpResult;
  volatile os_stackelement_t * sp;
  volatile os_stackelement_t * p;
  os_size_t numElemsUnused;
  os_size_t numElemsTotal;
  os_size_t i;
  struct os_kerneldata_t * const kernel_data;
  unsigned int _1;
  int _2;
  int _3;
  os_stackelement_t * _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data_8 = &OS_kernelData;
  # DEBUG kernel_data => kernel_data_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  p_10 = OS_kernelData.iStackBase;
  # DEBUG p => p_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  __asm__ __volatile__("mov	%0, r13" : "result" "=r" OS_getSpResult_11);
  # DEBUG OS_getSpResult => OS_getSpResult_11
  # DEBUG BEGIN_STMT
  _12 = OS_getSpResult_11;
  sp_13 = _12;
  # DEBUG sp => sp_13
  # DEBUG BEGIN_STMT
  _1 = OS_kernelData.iStackLen;
  numElemsTotal_14 = _1 / 4;
  # DEBUG numElemsTotal => numElemsTotal_14
  # DEBUG BEGIN_STMT
  _2 = sp_13 - p_10;
  _3 = _2 /[ex] 4;
  numElemsUnused_15 = (os_size_t) _3;
  # DEBUG numElemsUnused => numElemsUnused_15
  # DEBUG BEGIN_STMT
  if (numElemsTotal_14 < numElemsUnused_15)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  numElemsUnused_16 = numElemsTotal_14;
  # DEBUG numElemsUnused => numElemsUnused_16

  <bb 4> :
  # numElemsUnused_5 = PHI <numElemsUnused_15(2), numElemsUnused_16(3)>
  # DEBUG numElemsUnused => numElemsUnused_5
  # DEBUG BEGIN_STMT
  i_17 = 0;
  # DEBUG i => i_17
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  *p_6 ={v} 3958107115;
  # DEBUG BEGIN_STMT
  p_19 = p_6 + 4;
  # DEBUG p => p_19
  # DEBUG BEGIN_STMT
  i_20 = i_4 + 1;
  # DEBUG i => i_20

  <bb 6> :
  # i_4 = PHI <i_17(4), i_20(5)>
  # p_6 = PHI <p_10(4), p_19(5)>
  # DEBUG p => p_6
  # DEBUG i => i_4
  # DEBUG BEGIN_STMT
  if (i_4 < numElemsUnused_5)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}


