
Marking local functions: E2E_EB_SMAddStatus E2E_EB_CheckHandleSMInvalid E2E_EB_CheckHandleSMValid E2E_EB_CheckHandleSMInit E2E_EB_CheckHandleSMNoData E2E_EB_SMCheck E2E_EB_SMCheckProfileStatusChecks E2E_EB_SMCheckStateParamChecks E2E_EB_SMCheckConfigParamChecks E2E_EB_SMCheckNullChecks


Marking externally visible functions: E2E_SMCheckInit E2E_SMCheck


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

E2E_EB_SMAddStatus/11 (E2E_EB_SMAddStatus) @06af0b60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: E2E_EB_CheckHandleSMInvalid/10 E2E_EB_CheckHandleSMValid/9 E2E_EB_CheckHandleSMInit/8 
  Calls: 
E2E_EB_CheckHandleSMInvalid/10 (E2E_EB_CheckHandleSMInvalid) @06af09a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: E2E_EB_SMCheck/6 
  Calls: E2E_EB_SMAddStatus/11 
E2E_EB_CheckHandleSMValid/9 (E2E_EB_CheckHandleSMValid) @06af07e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: E2E_EB_SMCheck/6 
  Calls: E2E_EB_SMAddStatus/11 
E2E_EB_CheckHandleSMInit/8 (E2E_EB_CheckHandleSMInit) @06af0620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: E2E_EB_SMCheck/6 
  Calls: E2E_EB_SMAddStatus/11 
E2E_EB_CheckHandleSMNoData/7 (E2E_EB_CheckHandleSMNoData) @06af0460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: E2E_EB_SMCheck/6 
  Calls: 
E2E_EB_SMCheck/6 (E2E_EB_SMCheck) @06af02a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: E2E_SMCheck/0 
  Calls: E2E_EB_CheckHandleSMInvalid/10 E2E_EB_CheckHandleSMValid/9 E2E_EB_CheckHandleSMInit/8 E2E_EB_CheckHandleSMNoData/7 
E2E_EB_SMCheckProfileStatusChecks/5 (E2E_EB_SMCheckProfileStatusChecks) @06af00e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: E2E_SMCheck/0 
  Calls: 
E2E_EB_SMCheckStateParamChecks/4 (E2E_EB_SMCheckStateParamChecks) @06ae7ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: E2E_SMCheck/0 
  Calls: 
E2E_EB_SMCheckConfigParamChecks/3 (E2E_EB_SMCheckConfigParamChecks) @06ae7d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: E2E_SMCheckInit/1 E2E_SMCheck/0 
  Calls: 
E2E_EB_SMCheckNullChecks/2 (E2E_EB_SMCheckNullChecks) @06ae7b60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: E2E_SMCheckInit/1 E2E_SMCheck/0 
  Calls: 
E2E_SMCheckInit/1 (E2E_SMCheckInit) @06ae79a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: E2E_EB_SMCheckConfigParamChecks/3 E2E_EB_SMCheckNullChecks/2 
E2E_SMCheck/0 (E2E_SMCheck) @06ae77e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: E2E_EB_SMCheck/6 E2E_EB_SMCheckProfileStatusChecks/5 E2E_EB_SMCheckStateParamChecks/4 E2E_EB_SMCheckConfigParamChecks/3 E2E_EB_SMCheckNullChecks/2 
E2E_EB_SMAddStatus (E2E_PCheckStatusType ProfileStatus, const struct E2E_SMConfigType * ConfigPtr, struct E2E_SMCheckStateType * StatePtr)
{
  uint8 errorCountTemp;
  uint8 okCountTemp;
  uint8 Idx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  okCountTemp = 0;
  # DEBUG BEGIN_STMT
  errorCountTemp = 0;
  # DEBUG BEGIN_STMT
  _1 = StatePtr->WindowTopIndex;
  _2 = (int) _1;
  StatePtr->ProfileStatusWindowArray[_2] = ProfileStatus;
  # DEBUG BEGIN_STMT
  Idx = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = (int) Idx;
  _4 = StatePtr->ProfileStatusWindowArray[_3];
  _5 = (int) _4;
  switch (_5) <default: <L6> [INV], case 0: <L1> [INV], case 1 ... 2: <L13> [INV], case 4 ... 5: <L13> [INV]>

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  okCountTemp.0_6 = okCountTemp;
  okCountTemp = okCountTemp.0_6 + 1;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L6>:
  # DEBUG BEGIN_STMT
  errorCountTemp.1_7 = errorCountTemp;
  errorCountTemp = errorCountTemp.1_7 + 1;
  # DEBUG BEGIN_STMT

  <bb 6> :
<L13>:
  # DEBUG BEGIN_STMT
  Idx.2_8 = Idx;
  Idx = Idx.2_8 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _9 = ConfigPtr->WindowSize;
  if (Idx < _9)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  StatePtr->OkCount = okCountTemp;
  # DEBUG BEGIN_STMT
  StatePtr->ErrorCount = errorCountTemp;
  # DEBUG BEGIN_STMT
  _10 = StatePtr->WindowTopIndex;
  _11 = (unsigned int) _10;
  _12 = ConfigPtr->WindowSize;
  _13 = (unsigned int) _12;
  _14 = _13 + 4294967295;
  if (_11 == _14)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  StatePtr->WindowTopIndex = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _15 = StatePtr->WindowTopIndex;
  _16 = _15;
  _17 = _16 + 1;
  StatePtr->WindowTopIndex = _17;

  <bb 11> :
  return;

}


E2E_EB_CheckHandleSMInvalid (E2E_PCheckStatusType ProfileStatus, const struct E2E_SMConfigType * ConfigPtr, struct E2E_SMCheckStateType * StatePtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.5612;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  E2E_EB_SMAddStatus (ProfileStatus, ConfigPtr, StatePtr);
  # DEBUG BEGIN_STMT
  _1 = StatePtr->ErrorCount;
  _2 = ConfigPtr->MaxErrorStateInvalid;
  if (_1 <= _2)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = StatePtr->OkCount;
  _4 = ConfigPtr->MinOkStateInvalid;
  if (_3 >= _4)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  StatePtr->SMState = 0;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  StatePtr->SMState = 4;
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  D.5612 = RetVal;
  return D.5612;

}


E2E_EB_CheckHandleSMValid (E2E_PCheckStatusType ProfileStatus, const struct E2E_SMConfigType * ConfigPtr, struct E2E_SMCheckStateType * StatePtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.5606;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  E2E_EB_SMAddStatus (ProfileStatus, ConfigPtr, StatePtr);
  # DEBUG BEGIN_STMT
  _1 = StatePtr->ErrorCount;
  _2 = ConfigPtr->MaxErrorStateValid;
  if (_1 > _2)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _3 = StatePtr->OkCount;
  _4 = ConfigPtr->MinOkStateValid;
  if (_3 < _4)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  StatePtr->SMState = 4;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  StatePtr->SMState = 0;
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  D.5606 = RetVal;
  return D.5606;

}


E2E_EB_CheckHandleSMInit (E2E_PCheckStatusType ProfileStatus, const struct E2E_SMConfigType * ConfigPtr, struct E2E_SMCheckStateType * StatePtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.5596;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  E2E_EB_SMAddStatus (ProfileStatus, ConfigPtr, StatePtr);
  # DEBUG BEGIN_STMT
  _1 = StatePtr->ErrorCount;
  _2 = ConfigPtr->MaxErrorStateInit;
  if (_1 > _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  StatePtr->SMState = 4;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = StatePtr->OkCount;
  _4 = ConfigPtr->MinOkStateInit;
  if (_3 >= _4)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  StatePtr->SMState = 0;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  StatePtr->SMState = 3;
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.5596 = RetVal;
  return D.5596;

}


E2E_EB_CheckHandleSMNoData (E2E_PCheckStatusType ProfileStatus, struct E2E_SMCheckStateType * StatePtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.5588;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (ProfileStatus != 3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (ProfileStatus != 5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  StatePtr->SMState = 3;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  StatePtr->SMState = 2;
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  D.5588 = RetVal;
  return D.5588;

}


E2E_EB_SMCheck (E2E_PCheckStatusType ProfileStatus, const struct E2E_SMConfigType * ConfigPtr, struct E2E_SMCheckStateType * StatePtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.5582;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 25;
  # DEBUG BEGIN_STMT
  _1 = StatePtr->SMState;
  _2 = (int) _1;
  switch (_2) <default: <L4> [INV], case 0: <L2> [INV], case 2: <L0> [INV], case 3: <L1> [INV], case 4: <L3> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  RetVal = E2E_EB_CheckHandleSMNoData (ProfileStatus, StatePtr);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  RetVal = E2E_EB_CheckHandleSMInit (ProfileStatus, ConfigPtr, StatePtr);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  RetVal = E2E_EB_CheckHandleSMValid (ProfileStatus, ConfigPtr, StatePtr);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  RetVal = E2E_EB_CheckHandleSMInvalid (ProfileStatus, ConfigPtr, StatePtr);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  RetVal = 25;
  # DEBUG BEGIN_STMT

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.5582 = RetVal;
  return D.5582;

}


E2E_EB_SMCheckProfileStatusChecks (E2E_PCheckStatusType ProfileStatus)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.5580;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _1 = (int) ProfileStatus;
  switch (_1) <default: <L5> [INV], case 0 ... 3: <L0> [INV], case 5: <L0> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
<L5>:
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.5580 = RetVal;
  return D.5580;

}


E2E_EB_SMCheckStateParamChecks (const struct E2E_SMConfigType * ConfigPtr, const struct E2E_SMCheckStateType * StatePtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.5578;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _1 = StatePtr->SMState;
  _2 = (int) _1;
  switch (_2) <default: <L4> [INV], case 0: <L0> [INV], case 2 ... 4: <L0> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
<L4>:
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT

  <bb 5> :
  # DEBUG BEGIN_STMT
  _3 = StatePtr->WindowTopIndex;
  _4 = ConfigPtr->WindowSize;
  if (_3 >= _4)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.5578 = RetVal;
  return D.5578;

}


E2E_EB_SMCheckConfigParamChecks (const struct E2E_SMConfigType * ConfigPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.5574;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _1 = ConfigPtr->WindowSize;
  _2 = _1 + 255;
  if (_2 > 9)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 18>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = ConfigPtr->WindowSize;
  _4 = (int) _3;
  _5 = ConfigPtr->MinOkStateValid;
  _6 = (int) _5;
  _7 = ConfigPtr->MaxErrorStateValid;
  _8 = (int) _7;
  _9 = _6 + _8;
  if (_4 < _9)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 18>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = ConfigPtr->WindowSize;
  _11 = (int) _10;
  _12 = ConfigPtr->MinOkStateInit;
  _13 = (int) _12;
  _14 = ConfigPtr->MaxErrorStateInit;
  _15 = (int) _14;
  _16 = _13 + _15;
  if (_11 < _16)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 18>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _17 = ConfigPtr->WindowSize;
  _18 = (int) _17;
  _19 = ConfigPtr->MinOkStateInvalid;
  _20 = (int) _19;
  _21 = ConfigPtr->MaxErrorStateInvalid;
  _22 = (int) _21;
  _23 = _20 + _22;
  if (_18 < _23)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 18>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _24 = ConfigPtr->MaxErrorStateInvalid;
  _25 = ConfigPtr->MaxErrorStateInit;
  if (_24 > _25)
    goto <bb 12>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _26 = ConfigPtr->MaxErrorStateInit;
  _27 = ConfigPtr->MaxErrorStateValid;
  if (_26 > _27)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 18>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _28 = ConfigPtr->MinOkStateValid;
  if (_28 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  _29 = ConfigPtr->MinOkStateValid;
  _30 = ConfigPtr->MinOkStateInit;
  if (_29 > _30)
    goto <bb 16>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  _31 = ConfigPtr->MinOkStateInit;
  _32 = ConfigPtr->MinOkStateInvalid;
  if (_31 > _32)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 18> :
  # DEBUG BEGIN_STMT
  D.5574 = RetVal;
  return D.5574;

}


E2E_EB_SMCheckNullChecks (const struct E2E_SMConfigType * ConfigPtr, const struct E2E_SMCheckStateType * StatePtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.5551;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  if (ConfigPtr == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (StatePtr == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.5551 = RetVal;
  return D.5551;

}


E2E_SMCheckInit (struct E2E_SMCheckStateType * StatePtr, const struct E2E_SMConfigType * ConfigPtr)
{
  uint8 Idx;
  Std_ReturnType RetVal;
  Std_ReturnType D.5620;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 25;
  # DEBUG BEGIN_STMT
  _1 = E2E_EB_SMCheckNullChecks (ConfigPtr, StatePtr);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal = 19;
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = E2E_EB_SMCheckConfigParamChecks (ConfigPtr);
  if (_2 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal = 23;
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Idx = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _3 = (int) Idx;
  StatePtr->ProfileStatusWindowArray[_3] = 4;
  # DEBUG BEGIN_STMT
  Idx.3_4 = Idx;
  Idx = Idx.3_4 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _5 = ConfigPtr->WindowSize;
  if (Idx < _5)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  StatePtr->WindowTopIndex = 0;
  # DEBUG BEGIN_STMT
  StatePtr->OkCount = 0;
  # DEBUG BEGIN_STMT
  StatePtr->ErrorCount = 0;
  # DEBUG BEGIN_STMT
  StatePtr->SMState = 2;
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.5620 = RetVal;
  return D.5620;

}


E2E_SMCheck (E2E_PCheckStatusType ProfileStatus, const struct E2E_SMConfigType * ConfigPtr, struct E2E_SMCheckStateType * StatePtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.5543;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 25;
  # DEBUG BEGIN_STMT
  _1 = E2E_EB_SMCheckNullChecks (ConfigPtr, StatePtr);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal = 19;
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = E2E_EB_SMCheckConfigParamChecks (ConfigPtr);
  if (_2 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal = 23;
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _3 = E2E_EB_SMCheckStateParamChecks (ConfigPtr, StatePtr);
  if (_3 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal = 26;
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _4 = E2E_EB_SMCheckProfileStatusChecks (ProfileStatus);
  if (_4 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RetVal = 23;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal = E2E_EB_SMCheck (ProfileStatus, ConfigPtr, StatePtr);

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.5543 = RetVal;
  return D.5543;

}


