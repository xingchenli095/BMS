SecOC_Rx_ShiftLeft (uint8 * array, uint32 bitLength, uint8 shift)
{
  const uint32 byteLength_shifted;
  uint16 arrayIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) shift;
  _2 = bitLength - _1;
  byteLength_shifted = _2 / 8;
  # DEBUG BEGIN_STMT
  arrayIdx = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = (sizetype) arrayIdx;
  _4 = array + _3;
  _5 = *_4;
  _6 = (int) _5;
  _7 = (int) shift;
  _8 = _6 << _7;
  _9 = (unsigned char) _8;
  _10 = (sizetype) arrayIdx;
  _11 = _10 + 1;
  _12 = array + _11;
  _13 = *_12;
  _14 = (int) _13;
  _15 = (unsigned int) shift;
  _16 = 8 - _15;
  _17 = _14 >> _16;
  _18 = (unsigned char) _17;
  _19 = (sizetype) arrayIdx;
  _20 = array + _19;
  _21 = _9 | _18;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  arrayIdx.62_22 = arrayIdx;
  arrayIdx = arrayIdx.62_22 + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _23 = (long unsigned int) arrayIdx;
  if (byteLength_shifted > _23)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _24 = bitLength & 7;
  _25 = (long unsigned int) shift;
  if (_24 >= _25)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _26 = bitLength & 7;
  if (_26 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _27 = array + byteLength_shifted;
  _28 = *_27;
  _29 = (int) _28;
  _30 = (int) shift;
  _31 = _29 << _30;
  _32 = array + byteLength_shifted;
  _33 = (unsigned char) _31;
  *_32 = _33;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _34 = array + byteLength_shifted;
  _35 = *_34;
  _36 = (int) _35;
  _37 = (int) shift;
  _38 = _36 << _37;
  _39 = (signed char) _38;
  _40 = byteLength_shifted + 1;
  _41 = array + _40;
  _42 = *_41;
  _43 = (int) _42;
  _44 = (unsigned int) shift;
  _45 = 8 - _44;
  _46 = _43 >> _45;
  _47 = (signed char) _46;
  _48 = _39 | _47;
  _49 = array + byteLength_shifted;
  _50 = (unsigned char) _48;
  *_49 = _50;

  <bb 9> :
  return;

}


SecOC_Rx_CheckStatusOverridePostVerify (uint16 instId)
{
  uint16 pduIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  _2 = SecOC_RxData[_1].VerifyStatusOverride;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _3 = (int) instId;
  _4 = SecOC_RxData[_3].NumMsgToOverride;
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  pduIdx = 0;
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.16_5 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.17_6 = SecOC_ConfigPtr;
  _7 = SecOC_ConfigPtr.17_6->RxPduConfigPtr;
  _8 = (unsigned int) instId;
  _9 = _8 * 32;
  _10 = _7 + _9;
  _11 = SecOC_ConfigPtr.16_5 + _10;
  _12 = _11->FreshnessValueId;
  SecOC_ConfigPtr.18_13 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.19_14 = SecOC_ConfigPtr;
  _15 = SecOC_ConfigPtr.19_14->RxPduConfigPtr;
  _16 = (unsigned int) pduIdx;
  _17 = _16 * 32;
  _18 = _15 + _17;
  _19 = SecOC_ConfigPtr.18_13 + _18;
  _20 = _19->FreshnessValueId;
  if (_12 == _20)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Enter_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _21 = (int) pduIdx;
  SecOC_RxData[_21].VerifyStatusOverride = 2;
  # DEBUG BEGIN_STMT
  SchM_Exit_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();

  <bb 7> :
  # DEBUG BEGIN_STMT
  pduIdx.20_22 = pduIdx;
  pduIdx = pduIdx.20_22 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (pduIdx == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


SecOC_Rx_RenewStatusOverride (uint16 instId, boolean * passData)
{
  uint16 pduIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  _2 = SecOC_RxData[_1].VerifyStatusOverride;
  if (_2 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  *passData = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) instId;
  _4 = SecOC_RxData[_3].VerifyStatusOverride;
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (int) instId;
  SecOC_RxData[_5].RenewedVerStatus = 1;
  # DEBUG BEGIN_STMT
  pduIdx = 0;
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.28_6 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.29_7 = SecOC_ConfigPtr;
  _8 = SecOC_ConfigPtr.29_7->RxPduConfigPtr;
  _9 = (unsigned int) instId;
  _10 = _9 * 32;
  _11 = _8 + _10;
  _12 = SecOC_ConfigPtr.28_6 + _11;
  _13 = _12->FreshnessValueId;
  SecOC_ConfigPtr.30_14 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.31_15 = SecOC_ConfigPtr;
  _16 = SecOC_ConfigPtr.31_15->RxPduConfigPtr;
  _17 = (unsigned int) pduIdx;
  _18 = _17 * 32;
  _19 = _16 + _18;
  _20 = SecOC_ConfigPtr.30_14 + _19;
  _21 = _20->FreshnessValueId;
  if (_13 == _21)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Enter_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _22 = (int) pduIdx;
  _23 = SecOC_RxData[_22].NumMsgToOverride;
  _24 = _23;
  _25 = _24 + 255;
  SecOC_RxData[_22].NumMsgToOverride = _25;
  # DEBUG BEGIN_STMT
  SchM_Exit_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();

  <bb 7> :
  # DEBUG BEGIN_STMT
  pduIdx.32_26 = pduIdx;
  pduIdx = pduIdx.32_26 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (pduIdx == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


SecOC_Rx_CheckStatusOverridePreVerify (uint16 instId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  _2 = SecOC_RxData[_1].VerifyStatusOverride;
  _3 = (int) _2;
  if (_3 == 43)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _4 = (int) instId;
  SecOC_RxData[_4].CsmVerificationResult = 0;
  # DEBUG BEGIN_STMT
  _5 = (int) instId;
  SecOC_RxData[_5].State = 3;
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


SecOC_Rx_CheckFreshnessFuncResult (uint16 instId, Std_ReturnType retVal)
{
  const uint32 freshnessRemainingBitsLen;
  long unsigned int iftmp.57;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (retVal == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  SecOC_RxData[_1].ProcessingVerification = 0;
  # DEBUG BEGIN_STMT
  _2 = (int) instId;
  _3 = SecOC_RxConfig[_2].MaxAuthAttempts;
  _4 = (int) instId;
  _5 = SecOC_RxData[_4].AuthAttempts;
  if (_3 > _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = (int) instId;
  _7 = SecOC_RxData[_6].AuthAttempts;
  _8 = _7;
  _9 = _8 + 1;
  SecOC_RxData[_6].AuthAttempts = _9;
  # DEBUG BEGIN_STMT
  _10 = (int) instId;
  SecOC_RxData[_10].State = 1;
  goto <bb 14>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _11 = (int) instId;
  SecOC_RxData[_11].VerificationResult = 2;
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 0, 1);
  goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (retVal == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.51_12 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.52_13 = SecOC_ConfigPtr;
  _14 = SecOC_ConfigPtr.52_13->RxPduConfigPtr;
  _15 = (unsigned int) instId;
  _16 = _15 * 32;
  _17 = _14 + _16;
  _18 = SecOC_ConfigPtr.51_12 + _17;
  _19 = _18->FreshnessValueTxLength;
  _20 = (long unsigned int) _19;
  freshnessRemainingBitsLen = _20 & 7;
  # DEBUG BEGIN_STMT
  _21 = (int) instId;
  SecOC_RxData[_21].AuthAttempts = 0;
  # DEBUG BEGIN_STMT
  _22 = (int) instId;
  _23 = SecOC_RxData[_22].Authenticator;
  _24 = (int) instId;
  _25 = SecOC_RxData[_24].SecuredPdu.SduDataPtr;
  _26 = (int) instId;
  _27 = SecOC_RxData[_26].DataLength;
  _28 = (unsigned int) _27;
  SecOC_ConfigPtr.53_29 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.54_30 = SecOC_ConfigPtr;
  _31 = SecOC_ConfigPtr.54_30->RxPduConfigPtr;
  _32 = (unsigned int) instId;
  _33 = _32 * 32;
  _34 = _31 + _33;
  _35 = SecOC_ConfigPtr.53_29 + _34;
  _36 = _35->FreshnessValueTxLength;
  _37 = _36 / 8;
  _38 = (unsigned int) _37;
  _39 = _28 + _38;
  _40 = _25 + _39;
  SecOC_ConfigPtr.55_41 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.56_42 = SecOC_ConfigPtr;
  _43 = SecOC_ConfigPtr.56_42->RxPduConfigPtr;
  _44 = (unsigned int) instId;
  _45 = _44 * 32;
  _46 = _43 + _45;
  _47 = SecOC_ConfigPtr.55_41 + _46;
  _48 = _47->AuthInfoTxLength;
  _49 = (long unsigned int) _48;
  _50 = freshnessRemainingBitsLen + _49;
  _51 = _50 / 8;
  SecOC_ConfigPtr.58_52 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.59_53 = SecOC_ConfigPtr;
  _54 = SecOC_ConfigPtr.59_53->RxPduConfigPtr;
  _55 = (unsigned int) instId;
  _56 = _55 * 32;
  _57 = _54 + _56;
  _58 = SecOC_ConfigPtr.58_52 + _57;
  _59 = _58->AuthInfoTxLength;
  _60 = (long unsigned int) _59;
  _61 = freshnessRemainingBitsLen + _60;
  _62 = _61 & 7;
  if (_62 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.57 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.57 = 0;

  <bb 10> :
  _63 = iftmp.57 + _51;
  TS_MemCpy32 (_23, _40, _63);
  # DEBUG BEGIN_STMT
  if (freshnessRemainingBitsLen != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _64 = (int) instId;
  _65 = SecOC_RxData[_64].Authenticator;
  SecOC_ConfigPtr.60_66 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.61_67 = SecOC_ConfigPtr;
  _68 = SecOC_ConfigPtr.61_67->RxPduConfigPtr;
  _69 = (unsigned int) instId;
  _70 = _69 * 32;
  _71 = _68 + _70;
  _72 = SecOC_ConfigPtr.60_66 + _71;
  _73 = _72->AuthInfoTxLength;
  _74 = (long unsigned int) _73;
  _75 = freshnessRemainingBitsLen + _74;
  _76 = (unsigned char) freshnessRemainingBitsLen;
  SecOC_Rx_ShiftLeft (_65, _75, _76);

  <bb 12> :
  # DEBUG BEGIN_STMT
  _77 = (int) instId;
  SecOC_RxData[_77].ProcessingVerification = 1;
  # DEBUG BEGIN_STMT
  _78 = (int) instId;
  SecOC_RxData[_78].State = 2;
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _79 = (int) instId;
  SecOC_RxData[_79].VerificationResult = 2;
  # DEBUG BEGIN_STMT
  _80 = (int) instId;
  SecOC_RxData[_80].ProcessingVerification = 0;
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 0, 1);

  <bb 14> :
  return;

}


SecOC_Rx_ExtractAuthenticDataLen (uint16 instId)
{
  short unsigned int iftmp.76;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  _2 = SecOC_RxData[_1].SecuredPdu.SduLength;
  SecOC_ConfigPtr.72_3 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.73_4 = SecOC_ConfigPtr;
  _5 = SecOC_ConfigPtr.73_4->RxPduConfigPtr;
  _6 = (unsigned int) instId;
  _7 = _6 * 32;
  _8 = _5 + _7;
  _9 = SecOC_ConfigPtr.72_3 + _8;
  _10 = _9->AuthInfoTxLength;
  _11 = (long unsigned int) _10;
  SecOC_ConfigPtr.74_12 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.75_13 = SecOC_ConfigPtr;
  _14 = SecOC_ConfigPtr.75_13->RxPduConfigPtr;
  _15 = (unsigned int) instId;
  _16 = _15 * 32;
  _17 = _14 + _16;
  _18 = SecOC_ConfigPtr.74_12 + _17;
  _19 = _18->FreshnessValueTxLength;
  _20 = (long unsigned int) _19;
  _21 = _11 + _20;
  _22 = _21 / 8;
  _23 = (short unsigned int) _22;
  SecOC_ConfigPtr.77_24 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.78_25 = SecOC_ConfigPtr;
  _26 = SecOC_ConfigPtr.78_25->RxPduConfigPtr;
  _27 = (unsigned int) instId;
  _28 = _27 * 32;
  _29 = _26 + _28;
  _30 = SecOC_ConfigPtr.77_24 + _29;
  _31 = _30->AuthInfoTxLength;
  _32 = (long unsigned int) _31;
  SecOC_ConfigPtr.79_33 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.80_34 = SecOC_ConfigPtr;
  _35 = SecOC_ConfigPtr.80_34->RxPduConfigPtr;
  _36 = (unsigned int) instId;
  _37 = _36 * 32;
  _38 = _35 + _37;
  _39 = SecOC_ConfigPtr.79_33 + _38;
  _40 = _39->FreshnessValueTxLength;
  _41 = (long unsigned int) _40;
  _42 = _32 + _41;
  _43 = _42 & 7;
  if (_43 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.76 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.76 = 0;

  <bb 5> :
  _44 = iftmp.76 + _23;
  _45 = (int) instId;
  _46 = _2 - _44;
  SecOC_RxData[_45].DataLength = _46;
  # DEBUG BEGIN_STMT
  SchM_Exit_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  return;

}


SecOC_Rx_CheckSecPduContent (uint16 instId)
{
  const uint32 authInfoLen;
  Std_ReturnType retVal;
  Std_ReturnType D.6354;
  long unsigned int iftmp.67;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retVal = 1;
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.63_1 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.64_2 = SecOC_ConfigPtr;
  _3 = SecOC_ConfigPtr.64_2->RxPduConfigPtr;
  _4 = (unsigned int) instId;
  _5 = _4 * 32;
  _6 = _3 + _5;
  _7 = SecOC_ConfigPtr.63_1 + _6;
  _8 = _7->AuthInfoTxLength;
  _9 = (long unsigned int) _8;
  SecOC_ConfigPtr.65_10 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.66_11 = SecOC_ConfigPtr;
  _12 = SecOC_ConfigPtr.66_11->RxPduConfigPtr;
  _13 = (unsigned int) instId;
  _14 = _13 * 32;
  _15 = _12 + _14;
  _16 = SecOC_ConfigPtr.65_10 + _15;
  _17 = _16->FreshnessValueTxLength;
  _18 = (long unsigned int) _17;
  _19 = _9 + _18;
  _20 = _19 / 8;
  SecOC_ConfigPtr.68_21 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.69_22 = SecOC_ConfigPtr;
  _23 = SecOC_ConfigPtr.69_22->RxPduConfigPtr;
  _24 = (unsigned int) instId;
  _25 = _24 * 32;
  _26 = _23 + _25;
  _27 = SecOC_ConfigPtr.68_21 + _26;
  _28 = _27->AuthInfoTxLength;
  _29 = (long unsigned int) _28;
  SecOC_ConfigPtr.70_30 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.71_31 = SecOC_ConfigPtr;
  _32 = SecOC_ConfigPtr.71_31->RxPduConfigPtr;
  _33 = (unsigned int) instId;
  _34 = _33 * 32;
  _35 = _32 + _34;
  _36 = SecOC_ConfigPtr.70_30 + _35;
  _37 = _36->FreshnessValueTxLength;
  _38 = (long unsigned int) _37;
  _39 = _29 + _38;
  _40 = _39 & 7;
  if (_40 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.67 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.67 = 0;

  <bb 5> :
  authInfoLen = iftmp.67 + _20;
  # DEBUG BEGIN_STMT
  _41 = (int) instId;
  _42 = SecOC_RxData[_41].ReceivedSecuredPdu.SduLength;
  _43 = (long unsigned int) _42;
  if (authInfoLen < _43)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  retVal = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.6354 = retVal;
  return D.6354;

}


SecOC_Rx_CheckPduContent (uint16 instId)
{
  Std_ReturnType retVal;
  Std_ReturnType D.6346;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retVal = 1;
  # DEBUG BEGIN_STMT
  retVal = SecOC_Rx_CheckSecPduContent (instId);
  # DEBUG BEGIN_STMT
  D.6346 = retVal;
  return D.6346;

}


SecOC_Rx_PrepareSecuredPdu (uint16 instId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  _2 = SecOC_RxConfig[_1].ReceptionStrategy;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = (int) instId;
  _4 = SecOC_RxData[_3].SecuredPdu.SduDataPtr;
  _5 = (int) instId;
  _6 = SecOC_RxData[_5].ReceivedSecuredPdu.SduDataPtr;
  _7 = (int) instId;
  _8 = SecOC_RxData[_7].ReceivedSecuredPdu.SduLength;
  _9 = (long unsigned int) _8;
  TS_MemCpy32 (_4, _6, _9);

  <bb 4> :
  # DEBUG BEGIN_STMT
  _10 = (int) instId;
  _11 = (int) instId;
  _12 = SecOC_RxData[_10].ReceivedSecuredPdu.SduLength;
  SecOC_RxData[_11].SecuredPdu.SduLength = _12;
  # DEBUG BEGIN_STMT
  SchM_Exit_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  return;

}


SecOC_Rx_CheckForCsmRetry (uint16 instId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  SecOC_RxData[_1].ProcessingVerification = 0;
  # DEBUG BEGIN_STMT
  _2 = (int) instId;
  SecOC_RxData[_2].VerificationResult = 1;
  # DEBUG BEGIN_STMT
  _3 = (int) instId;
  _4 = SecOC_RxConfig[_3].MaxFVSyncAttempts;
  _5 = (int) instId;
  _6 = SecOC_RxData[_5].FVSyncAttempts;
  if (_4 > _6)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _7 = (int) instId;
  _8 = SecOC_RxData[_7].FVSyncAttempts;
  _9 = _8;
  _10 = _9 + 1;
  SecOC_RxData[_7].FVSyncAttempts = _10;
  # DEBUG BEGIN_STMT
  _11 = (int) instId;
  SecOC_RxData[_11].State = 2;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 0, 1);

  <bb 5> :
  return;

}


SecOC_Rx_ResetSm (uint16 instId, boolean continueExec, boolean notifyUpperLayer)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  SecOC_RxData[_1].State = 0;
  # DEBUG BEGIN_STMT
  _2 = (int) instId;
  SecOC_RxData[_2].AuthAttempts = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) instId;
  SecOC_RxData[_3].FVSyncAttempts = 0;
  # DEBUG BEGIN_STMT
  _4 = (int) instId;
  SecOC_RxData[_4].VerificationResult = 4;
  # DEBUG BEGIN_STMT
  _5 = (int) instId;
  SecOC_RxData[_5].CsmVerificationResult = 1;
  # DEBUG BEGIN_STMT
  _6 = (int) instId;
  _7 = SecOC_RxData[_6].RenewedVerStatus;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_CheckStatusOverridePostVerify (instId);
  # DEBUG BEGIN_STMT
  _8 = (int) instId;
  SecOC_RxData[_8].RenewedVerStatus = 0;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (continueExec == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = (int) instId;
  SecOC_RxData[_9].ProcessingVerification = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = (int) instId;
  SecOC_RxData[_10].ProcessingVerification = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _11 = (int) instId;
  SecOC_RxData[_11].PduInProcess = 0;
  # DEBUG BEGIN_STMT
  SchM_Exit_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  return;

}


SecOC_Rx_StateRetryToObtainFreshness (uint16 instId)
{
  uint32 freshnessValueLength;
  Std_ReturnType retVal;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  _2 = SecOC_RxData[_1].PduREvent;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = (int) instId;
  _4 = SecOC_RxConfig[_3].ReceptionStrategy;
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 1, 1);
  goto <bb 15>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  retVal = 1;
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.10_5 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.11_6 = SecOC_ConfigPtr;
  _7 = SecOC_ConfigPtr.11_6->RxPduConfigPtr;
  _8 = (unsigned int) instId;
  _9 = _8 * 32;
  _10 = _7 + _9;
  _11 = SecOC_ConfigPtr.10_5 + _10;
  _12 = _11->FreshnessValueLength;
  _13 = (long unsigned int) _12;
  freshnessValueLength = _13;
  # DEBUG BEGIN_STMT
  _14 = (int) instId;
  _15 = SecOC_RxConfig[_14].GetRxFreshnessFuncType;
  _16 = (int) _15;
  if (_16 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.12_17 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.13_18 = SecOC_ConfigPtr;
  _19 = SecOC_ConfigPtr.13_18->RxPduConfigPtr;
  _20 = (unsigned int) instId;
  _21 = _20 * 32;
  _22 = _19 + _21;
  _23 = SecOC_ConfigPtr.12_17 + _22;
  _24 = _23->FreshnessValueId;
  _25 = (int) instId;
  _26 = SecOC_RxData[_25].SecuredPdu.SduDataPtr;
  _27 = (int) instId;
  _28 = SecOC_RxData[_27].DataLength;
  _29 = (sizetype) _28;
  _30 = _26 + _29;
  SecOC_ConfigPtr.14_31 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.15_32 = SecOC_ConfigPtr;
  _33 = SecOC_ConfigPtr.15_32->RxPduConfigPtr;
  _34 = (unsigned int) instId;
  _35 = _34 * 32;
  _36 = _33 + _35;
  _37 = SecOC_ConfigPtr.14_31 + _36;
  _38 = _37->FreshnessValueTxLength;
  _39 = (long unsigned int) _38;
  _40 = (int) instId;
  _41 = SecOC_RxData[_40].FVSyncAttempts;
  _42 = _41 + 1;
  _43 = (int) instId;
  _44 = SecOC_RxData[_43].FreshnessVerifyValue;
  retVal = SecOC_Rx_Get_Freshness (instId, _24, _30, _39, _42, _44, &freshnessValueLength);
  # DEBUG BEGIN_STMT

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (retVal == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _45 = (int) instId;
  _46 = SecOC_RxConfig[_45].MaxAuthAttempts;
  _47 = (int) instId;
  _48 = SecOC_RxData[_47].AuthAttempts;
  if (_46 > _48)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _49 = (int) instId;
  _50 = SecOC_RxData[_49].AuthAttempts;
  _51 = _50;
  _52 = _51 + 1;
  SecOC_RxData[_49].AuthAttempts = _52;
  goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _53 = (int) instId;
  SecOC_RxData[_53].VerificationResult = 2;
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 0, 1);
  goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (retVal == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _54 = (int) instId;
  SecOC_RxData[_54].State = 2;
  # DEBUG BEGIN_STMT
  _55 = (int) instId;
  _56 = SecOC_RxData[_55].FVSyncAttempts;
  _57 = _56;
  _58 = _57 + 1;
  SecOC_RxData[_55].FVSyncAttempts = _58;
  # DEBUG BEGIN_STMT
  _59 = (int) instId;
  SecOC_RxData[_59].AuthAttempts = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _60 = (int) instId;
  SecOC_RxData[_60].VerificationResult = 2;
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 0, 1);

  <bb 14> :
  freshnessValueLength = {CLOBBER};

  <bb 15> :
  return;

}


SecOC_Rx_StateBroadcastPdu (uint16 instId)
{
  struct PduInfoType SecOC_RxPduInfo;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  _2 = SecOC_RxData[_1].PduREvent;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = (int) instId;
  _4 = SecOC_RxConfig[_3].ReceptionStrategy;
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 1, 1);
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) instId;
  _6 = SecOC_RxData[_5].DataLength;
  SecOC_RxPduInfo.SduLength = _6;
  # DEBUG BEGIN_STMT
  _7 = (int) instId;
  _8 = SecOC_RxData[_7].SecuredPdu.SduDataPtr;
  SecOC_RxPduInfo.SduDataPtr = _8;
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.21_9 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.22_10 = SecOC_ConfigPtr;
  _11 = SecOC_ConfigPtr.22_10->RxPduConfigPtr;
  _12 = (unsigned int) instId;
  _13 = _12 * 32;
  _14 = _11 + _13;
  _15 = SecOC_ConfigPtr.21_9 + _14;
  _16 = _15->AuthenticLayerPduIdAtPduR;
  PduR_SecOCRxIndication (_16, &SecOC_RxPduInfo);
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 0, 0);
  SecOC_RxPduInfo = {CLOBBER};

  <bb 6> :
  return;

}


SecOC_Rx_StateCheckVerificationResult (uint16 instId)
{
  boolean passPdu;
  SecOC_VerificationResultType iftmp.24;
  SecOC_VerificationResultType iftmp.23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  _2 = SecOC_RxData[_1].PduREvent;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = (int) instId;
  _4 = SecOC_RxConfig[_3].ReceptionStrategy;
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 1, 1);
  goto <bb 24>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) instId;
  _6 = SecOC_RxData[_5].CsmVerificationResult;
  if (_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _7 = (int) instId;
  _8 = SecOC_RxData[_7].RenewedVerStatus;
  if (_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _9 = (int) instId;
  iftmp.23 = SecOC_RxData[_9].VerificationResult;
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.23 = 0;

  <bb 9> :
  _10 = (int) instId;
  SecOC_RxData[_10].VerificationResult = iftmp.23;
  # DEBUG BEGIN_STMT
  passPdu = 1;
  goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _11 = (int) instId;
  _12 = SecOC_RxData[_11].RenewedVerStatus;
  if (_12 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _13 = (int) instId;
  iftmp.24 = SecOC_RxData[_13].VerificationResult;
  goto <bb 13>; [INV]

  <bb 12> :
  iftmp.24 = 1;

  <bb 13> :
  _14 = (int) instId;
  SecOC_RxData[_14].VerificationResult = iftmp.24;
  # DEBUG BEGIN_STMT
  passPdu = 0;

  <bb 14> :
  # DEBUG BEGIN_STMT
  _15 = (int) instId;
  _16 = SecOC_RxData[_15].RenewedVerStatus;
  if (_16 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_RenewStatusOverride (instId, &passPdu);

  <bb 16> :
  # DEBUG BEGIN_STMT
  passPdu.25_17 = passPdu;
  if (passPdu.25_17 == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _18 = (int) instId;
  SecOC_RxData[_18].ProcessingVerification = 1;
  # DEBUG BEGIN_STMT
  _19 = (int) instId;
  SecOC_RxData[_19].State = 4;
  goto <bb 23>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _20 = (int) instId;
  _21 = SecOC_RxConfig[_20].MaxFVSyncAttempts;
  _22 = (int) instId;
  _23 = SecOC_RxData[_22].FVSyncAttempts;
  if (_21 > _23)
    goto <bb 19>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 19> :
  _24 = (int) instId;
  _25 = SecOC_RxData[_24].VerifyStatusOverride;
  if (_25 == 2)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  SecOC_ConfigPtr.26_26 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.27_27 = SecOC_ConfigPtr;
  _28 = SecOC_ConfigPtr.27_27->RxPduConfigPtr;
  _29 = (unsigned int) instId;
  _30 = _29 * 32;
  _31 = _28 + _30;
  _32 = SecOC_ConfigPtr.26_26 + _31;
  _33 = _32->FreshnessValueLength;
  if (_33 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _34 = (int) instId;
  SecOC_RxData[_34].ProcessingVerification = 1;
  # DEBUG BEGIN_STMT
  _35 = (int) instId;
  SecOC_RxData[_35].State = 5;
  goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 0, 1);

  <bb 23> :
  passPdu = {CLOBBER};

  <bb 24> :
  return;

}


SecOC_Rx_StateVerification (uint16 instId)
{
  uint32 dataLength;
  Std_ReturnType retVal;
  long unsigned int iftmp.35;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  _2 = SecOC_RxData[_1].PduREvent;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = (int) instId;
  _4 = SecOC_RxConfig[_3].ReceptionStrategy;
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 1, 1);
  goto <bb 12>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  retVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) instId;
  _6 = SecOC_RxData[_5].DataLength;
  _7 = (long unsigned int) _6;
  SecOC_ConfigPtr.33_8 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.34_9 = SecOC_ConfigPtr;
  _10 = SecOC_ConfigPtr.34_9->RxPduConfigPtr;
  _11 = (unsigned int) instId;
  _12 = _11 * 32;
  _13 = _10 + _12;
  _14 = SecOC_ConfigPtr.33_8 + _13;
  _15 = _14->FreshnessValueLength;
  _16 = _15 / 8;
  _17 = (long unsigned int) _16;
  SecOC_ConfigPtr.36_18 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.37_19 = SecOC_ConfigPtr;
  _20 = SecOC_ConfigPtr.37_19->RxPduConfigPtr;
  _21 = (unsigned int) instId;
  _22 = _21 * 32;
  _23 = _20 + _22;
  _24 = SecOC_ConfigPtr.36_18 + _23;
  _25 = _24->FreshnessValueLength;
  _26 = _25 & 7;
  if (_26 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.35 = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.35 = 0;

  <bb 8> :
  _27 = iftmp.35 + _17;
  _28 = _7 + _27;
  dataLength = _28 + 2;
  # DEBUG BEGIN_STMT
  _29 = (int) instId;
  SecOC_RxData[_29].State = 3;
  # DEBUG BEGIN_STMT
  _30 = (int) instId;
  SecOC_RxData[_30].ProcessingVerification = 1;
  # DEBUG BEGIN_STMT
  _31 = (int) instId;
  _32 = SecOC_RxConfig[_31].CsmFuncType;
  _33 = (int) _32;
  if (_33 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  _34 = (int) instId;
  _35 = SecOC_RxConfig[_34].CsmJobId;
  _36 = (short unsigned int) _35;
  _37 = (long unsigned int) _36;
  _38 = (int) instId;
  _39 = SecOC_RxData[_38].DataToAuthenticator;
  _40 = (int) instId;
  _41 = SecOC_RxData[_40].Authenticator;
  SecOC_ConfigPtr.38_42 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.39_43 = SecOC_ConfigPtr;
  _44 = SecOC_ConfigPtr.39_43->RxPduConfigPtr;
  _45 = (unsigned int) instId;
  _46 = _45 * 32;
  _47 = _44 + _46;
  _48 = SecOC_ConfigPtr.38_42 + _47;
  _49 = _48->AuthInfoTxLength;
  _50 = (long unsigned int) _49;
  _51 = (int) instId;
  _52 = &SecOC_RxData[_51].CsmVerificationResult;
  retVal = Csm_MacVerify (_37, 7, _39, dataLength, _41, _50, _52);
  # DEBUG BEGIN_STMT

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (retVal != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_CheckForCsmRetry (instId);

  <bb 12> :
  return;

}


SecOC_Rx_StateConstructDataToAuthenticator (uint16 instId)
{
  uint32 freshnessValueLength;
  uint8 index;
  Std_ReturnType retVal;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  _2 = SecOC_RxData[_1].PduREvent;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = (int) instId;
  _4 = SecOC_RxConfig[_3].ReceptionStrategy;
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 1, 1);
  goto <bb 16>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  retVal = 1;
  # DEBUG BEGIN_STMT
  _5 = (int) instId;
  _6 = SecOC_RxData[_5].AuthAttempts;
  if (_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  index = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.40_7 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.41_8 = SecOC_ConfigPtr;
  _9 = SecOC_ConfigPtr.41_8->RxPduConfigPtr;
  _10 = (unsigned int) instId;
  _11 = _10 * 32;
  _12 = _9 + _11;
  _13 = SecOC_ConfigPtr.40_7 + _12;
  _14 = _13->DataId;
  _15 = (int) _14;
  _16 = (unsigned int) index;
  _17 = _16 * 8;
  _18 = _15 >> _17;
  _19 = (int) instId;
  _20 = SecOC_RxData[_19].DataToAuthenticator;
  _21 = (sizetype) index;
  _22 = 1 - _21;
  _23 = _20 + _22;
  _24 = (unsigned char) _18;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  index.42_25 = index;
  index = index.42_25 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (index <= 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _26 = (int) instId;
  _27 = SecOC_RxData[_26].DataToAuthenticator;
  _28 = _27 + 2;
  _29 = (int) instId;
  _30 = SecOC_RxData[_29].SecuredPdu.SduDataPtr;
  _31 = (int) instId;
  _32 = SecOC_RxData[_31].DataLength;
  _33 = (long unsigned int) _32;
  TS_MemCpy32 (_28, _30, _33);
  # DEBUG BEGIN_STMT
  _34 = (int) instId;
  SecOC_RxData[_34].FVSyncAttempts = 0;
  # DEBUG BEGIN_STMT
  _35 = (int) instId;
  _36 = SecOC_RxData[_35].DataToAuthenticator;
  _37 = (int) instId;
  _38 = SecOC_RxData[_37].DataLength;
  _39 = (unsigned int) _38;
  _40 = _39 + 2;
  _41 = (int) instId;
  _42 = _36 + _40;
  SecOC_RxData[_41].FreshnessVerifyValue = _42;

  <bb 10> :
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.43_43 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.44_44 = SecOC_ConfigPtr;
  _45 = SecOC_ConfigPtr.44_44->RxPduConfigPtr;
  _46 = (unsigned int) instId;
  _47 = _46 * 32;
  _48 = _45 + _47;
  _49 = SecOC_ConfigPtr.43_43 + _48;
  _50 = _49->FreshnessValueLength;
  if (_50 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.45_51 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.46_52 = SecOC_ConfigPtr;
  _53 = SecOC_ConfigPtr.46_52->RxPduConfigPtr;
  _54 = (unsigned int) instId;
  _55 = _54 * 32;
  _56 = _53 + _55;
  _57 = SecOC_ConfigPtr.45_51 + _56;
  _58 = _57->FreshnessValueLength;
  _59 = (long unsigned int) _58;
  freshnessValueLength = _59;
  # DEBUG BEGIN_STMT
  _60 = (int) instId;
  _61 = SecOC_RxConfig[_60].GetRxFreshnessFuncType;
  _62 = (int) _61;
  if (_62 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
<L9>:
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.47_63 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.48_64 = SecOC_ConfigPtr;
  _65 = SecOC_ConfigPtr.48_64->RxPduConfigPtr;
  _66 = (unsigned int) instId;
  _67 = _66 * 32;
  _68 = _65 + _67;
  _69 = SecOC_ConfigPtr.47_63 + _68;
  _70 = _69->FreshnessValueId;
  _71 = (int) instId;
  _72 = SecOC_RxData[_71].SecuredPdu.SduDataPtr;
  _73 = (int) instId;
  _74 = SecOC_RxData[_73].DataLength;
  _75 = (sizetype) _74;
  _76 = _72 + _75;
  SecOC_ConfigPtr.49_77 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.50_78 = SecOC_ConfigPtr;
  _79 = SecOC_ConfigPtr.50_78->RxPduConfigPtr;
  _80 = (unsigned int) instId;
  _81 = _80 * 32;
  _82 = _79 + _81;
  _83 = SecOC_ConfigPtr.49_77 + _82;
  _84 = _83->FreshnessValueTxLength;
  _85 = (long unsigned int) _84;
  _86 = (int) instId;
  _87 = SecOC_RxData[_86].FVSyncAttempts;
  _88 = (int) instId;
  _89 = SecOC_RxData[_88].FreshnessVerifyValue;
  retVal = SecOC_Rx_Get_Freshness (instId, _70, _76, _85, _87, _89, &freshnessValueLength);
  # DEBUG BEGIN_STMT

  <bb 13> :
  freshnessValueLength = {CLOBBER};
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  retVal = 0;

  <bb 15> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_CheckFreshnessFuncResult (instId, retVal);

  <bb 16> :
  return;

}


SecOC_Rx_StateIdle (uint16 instId)
{
  Std_ReturnType operationResult;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instId;
  _2 = SecOC_RxData[_1].PduREvent;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  operationResult = 1;
  # DEBUG BEGIN_STMT
  _3 = (int) instId;
  SecOC_RxData[_3].ProcessingVerification = 1;
  # DEBUG BEGIN_STMT
  SchM_Enter_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _4 = (int) instId;
  SecOC_RxData[_4].PduInProcess = 1;
  # DEBUG BEGIN_STMT
  _5 = (int) instId;
  SecOC_RxData[_5].PduREvent = 0;
  # DEBUG BEGIN_STMT
  operationResult = SecOC_Rx_CheckPduContent (instId);
  # DEBUG BEGIN_STMT
  SchM_Exit_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (operationResult == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_PrepareSecuredPdu (instId);
  # DEBUG BEGIN_STMT
  SecOC_Rx_ExtractAuthenticDataLen (instId);
  # DEBUG BEGIN_STMT
  _6 = (int) instId;
  SecOC_RxData[_6].State = 1;
  # DEBUG BEGIN_STMT
  SecOC_Rx_CheckStatusOverridePreVerify (instId);

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = (int) instId;
  _8 = SecOC_RxData[_7].State;
  if (_8 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SecOC_Rx_ResetSm (instId, 0, 0);

  <bb 7> :
  return;

}


SecOC_Rx_VerifyStatusOverride_43 (const uint16 * rxInstIdxList, uint16 numberOfRxPdus, uint16 freshnessValueId, uint8 overrideStatus, uint8 numberOfMessagesToOverride)
{
  Std_ReturnType idFound;
  uint16 i;
  uint16 pduIdx;
  Std_ReturnType D.6370;

  <bb 2> :
  # DEBUG BEGIN_STMT
  pduIdx = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  # DEBUG BEGIN_STMT
  idFound = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SecOC_InitStatus.81_1 = SecOC_InitStatus;
  if (SecOC_InitStatus.81_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (overrideStatus <= 2)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  pduIdx = i;
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.82_2 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.83_3 = SecOC_ConfigPtr;
  _4 = SecOC_ConfigPtr.83_3->RxPduConfigPtr;
  _5 = (unsigned int) pduIdx;
  _6 = _5 * 32;
  _7 = _4 + _6;
  _8 = SecOC_ConfigPtr.82_2 + _7;
  _9 = _8->FreshnessValueId;
  if (freshnessValueId == _9)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Enter_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (overrideStatus == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = (int) pduIdx;
  SecOC_RxData[_10].NumMsgToOverride = numberOfMessagesToOverride;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _11 = (int) pduIdx;
  SecOC_RxData[_11].VerifyStatusOverride = overrideStatus;
  # DEBUG BEGIN_STMT
  SchM_Exit_SecOC_SCHM_SECOC_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  idFound = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  i.84_12 = i;
  i = i.84_12 + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (i < numberOfRxPdus)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.6370 = idFound;
  return D.6370;

}


SecOC_Rx_ProcessPduStates (uint16 pduIdx)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) pduIdx;
  SecOC_RxData[_1].ProcessingVerification = 0;
  # DEBUG BEGIN_STMT
  _2 = (int) pduIdx;
  _3 = SecOC_RxData[_2].State;
  _4 = (int) _3;
  _5 = SecOC_Rx_StateMachine[_4];
  _5 (pduIdx);
  # DEBUG BEGIN_STMT
  _6 = (int) pduIdx;
  _7 = SecOC_RxData[_6].ProcessingVerification;
  if (_7 == 1)
    goto <bb 2>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  return;

}


SecOC_Rx_DeInit ()
{
  uint16 pduIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  pduIdx = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) pduIdx;
  SecOC_RxData[_1].ReceivedSecuredPdu.SduDataPtr = 0B;
  # DEBUG BEGIN_STMT
  _2 = (int) pduIdx;
  SecOC_RxData[_2].SecuredPdu.SduDataPtr = 0B;
  # DEBUG BEGIN_STMT
  _3 = (int) pduIdx;
  SecOC_RxData[_3].Authenticator = 0B;
  # DEBUG BEGIN_STMT
  _4 = (int) pduIdx;
  SecOC_RxData[_4].DataToAuthenticator = 0B;
  # DEBUG BEGIN_STMT
  _5 = (int) pduIdx;
  SecOC_RxData[_5].SecuredPdu.SduLength = 0;
  # DEBUG BEGIN_STMT
  _6 = (int) pduIdx;
  SecOC_RxData[_6].DataLength = 0;
  # DEBUG BEGIN_STMT
  _7 = (int) pduIdx;
  SecOC_RxData[_7].ReceivedSecuredPdu.SduLength = 0;
  # DEBUG BEGIN_STMT
  pduIdx.9_8 = pduIdx;
  pduIdx = pduIdx.9_8 + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (pduIdx == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


SecOC_Rx_Init ()
{
  uint16 pduIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  pduIdx = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) pduIdx;
  SecOC_RxData[_1].State = 0;
  # DEBUG BEGIN_STMT
  _2 = (int) pduIdx;
  SecOC_RxData[_2].PduREvent = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) pduIdx;
  SecOC_RxData[_3].PduInProcess = 0;
  # DEBUG BEGIN_STMT
  _4 = (int) pduIdx;
  SecOC_RxData[_4].ProcessingVerification = 0;
  # DEBUG BEGIN_STMT
  _5 = (int) pduIdx;
  SecOC_RxData[_5].CsmVerificationResult = 1;
  # DEBUG BEGIN_STMT
  _6 = (int) pduIdx;
  SecOC_RxData[_6].AuthAttempts = 0;
  # DEBUG BEGIN_STMT
  _7 = (int) pduIdx;
  SecOC_RxData[_7].FVSyncAttempts = 0;
  # DEBUG BEGIN_STMT
  _8 = (int) pduIdx;
  SecOC_RxData[_8].VerificationResult = 1;
  # DEBUG BEGIN_STMT
  _9 = (int) pduIdx;
  SecOC_RxData[_9].VerifyStatusOverride = 2;
  # DEBUG BEGIN_STMT
  _10 = (int) pduIdx;
  SecOC_RxData[_10].NumMsgToOverride = 0;
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.0_11 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.1_12 = SecOC_ConfigPtr;
  _13 = SecOC_ConfigPtr.1_12->RxPduConfigPtr;
  _14 = (unsigned int) pduIdx;
  _15 = _14 * 32;
  _16 = _13 + _15;
  _17 = SecOC_ConfigPtr.0_11 + _16;
  _18 = _17->BuffersConfig.ReceivedSecuredPduBufferIndex;
  _19 = (int) pduIdx;
  _20 = &SecOC_PB_PduBuffer[_18];
  SecOC_RxData[_19].ReceivedSecuredPdu.SduDataPtr = _20;
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.2_21 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.3_22 = SecOC_ConfigPtr;
  _23 = SecOC_ConfigPtr.3_22->RxPduConfigPtr;
  _24 = (unsigned int) pduIdx;
  _25 = _24 * 32;
  _26 = _23 + _25;
  _27 = SecOC_ConfigPtr.2_21 + _26;
  _28 = _27->BuffersConfig.SecuredPduBufferIndex;
  _29 = (int) pduIdx;
  _30 = &SecOC_PB_PduBuffer[_28];
  SecOC_RxData[_29].SecuredPdu.SduDataPtr = _30;
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.4_31 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.5_32 = SecOC_ConfigPtr;
  _33 = SecOC_ConfigPtr.5_32->RxPduConfigPtr;
  _34 = (unsigned int) pduIdx;
  _35 = _34 * 32;
  _36 = _33 + _35;
  _37 = SecOC_ConfigPtr.4_31 + _36;
  _38 = _37->BuffersConfig.AuthenticatorIndex;
  _39 = (int) pduIdx;
  _40 = &SecOC_PB_IntBuffer[_38];
  SecOC_RxData[_39].Authenticator = _40;
  # DEBUG BEGIN_STMT
  SecOC_ConfigPtr.6_41 = SecOC_ConfigPtr;
  SecOC_ConfigPtr.7_42 = SecOC_ConfigPtr;
  _43 = SecOC_ConfigPtr.7_42->RxPduConfigPtr;
  _44 = (unsigned int) pduIdx;
  _45 = _44 * 32;
  _46 = _43 + _45;
  _47 = SecOC_ConfigPtr.6_41 + _46;
  _48 = _47->BuffersConfig.DataToAuthenticatorIndex;
  _49 = (int) pduIdx;
  _50 = &SecOC_PB_IntBuffer[_48];
  SecOC_RxData[_49].DataToAuthenticator = _50;
  # DEBUG BEGIN_STMT
  _51 = (int) pduIdx;
  SecOC_RxData[_51].SecuredPdu.SduLength = 0;
  # DEBUG BEGIN_STMT
  _52 = (int) pduIdx;
  SecOC_RxData[_52].DataLength = 0;
  # DEBUG BEGIN_STMT
  _53 = (int) pduIdx;
  SecOC_RxData[_53].ReceivedSecuredPdu.SduLength = 0;
  # DEBUG BEGIN_STMT
  pduIdx.8_54 = pduIdx;
  pduIdx = pduIdx.8_54 + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (pduIdx == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


