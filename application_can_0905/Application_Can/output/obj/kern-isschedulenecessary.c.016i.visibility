
Marking local functions:


Marking externally visible functions: OS_IsScheduleNecessary


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_taskPtrs/3 (OS_taskPtrs) @06d38120
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_IsScheduleNecessary/0 (read)OS_IsScheduleNecessary/0 (read)OS_IsScheduleNecessary/0 (read)OS_IsScheduleNecessary/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_kernelData/2 (OS_kernelData) @06d380d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_IsScheduleNecessary/0 (read)
  Availability: not_available
  Varpool flags:
OS_taskActivations/1 (OS_taskActivations) @06d38090
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_IsScheduleNecessary/0 (addr)OS_IsScheduleNecessary/0 (addr)
  Availability: not_available
  Varpool flags:
OS_IsScheduleNecessary/0 (OS_IsScheduleNecessary) @06c9fe00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_taskActivations/1 (addr)OS_kernelData/2 (read)OS_taskActivations/1 (addr)OS_taskPtrs/3 (read)OS_taskPtrs/3 (read)OS_taskPtrs/3 (read)OS_taskPtrs/3 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
__attribute__((target ("general-regs-only")))
OS_IsScheduleNecessary ()
{
  const os_tasklink_t next;
  const os_tasklink_t link;
  struct os_taskdynamic_t * const td;
  const struct os_task_t * const current_task;
  os_tasklink_t * const taskActivations;
  os_boolean_t answer;
  os_boolean_t D.7662;
  int iftmp.1;
  int iftmp.0;

  <bb 2> :
  # DEBUG BEGIN_STMT
  answer = 1;
  # DEBUG BEGIN_STMT
  taskActivations = &OS_taskActivations;
  # DEBUG BEGIN_STMT
  current_task = OS_kernelData.taskCurrent;
  # DEBUG BEGIN_STMT
  if (current_task != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  td = current_task->dynamic;
  # DEBUG BEGIN_STMT
  _1 = current_task->linkBase;
  _2 = td->cAct;
  _3 = (short unsigned int) _2;
  link = _1 + _3;
  # DEBUG BEGIN_STMT
  _4 = (unsigned int) link;
  _5 = _4 * 2;
  _6 = &OS_taskActivations + _5;
  next = *_6;
  # DEBUG BEGIN_STMT
  if (next != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  _7 = current_task->queuePrio;
  _8 = (int) _7;
  _9 = (int) next;
  _10 = (int) next;
  _11 = OS_taskPtrs[_10];
  _12 = _11->linkBase;
  _13 = (int) _12;
  _14 = (int) next;
  _15 = OS_taskPtrs[_14];
  _16 = _15->dynamic;
  _17 = _16->cAct;
  _18 = (int) _17;
  _19 = _13 + _18;
  if (_9 == _19)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _20 = (int) next;
  _21 = OS_taskPtrs[_20];
  _22 = _21->dynamic;
  _23 = _22->prio;
  iftmp.1 = (int) _23;
  goto <bb 7>; [INV]

  <bb 6> :
  _24 = (int) next;
  _25 = OS_taskPtrs[_24];
  _26 = _25->queuePrio;
  iftmp.1 = (int) _26;

  <bb 7> :
  if (iftmp.1 > _8)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.0 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.0 = 0;

  <bb 10> :
  answer = iftmp.0;

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.7662 = answer;
  return D.7662;

}


