Dem_IsMILEvent (Dem_EventIdType EventId, Dem_IndicatorIdxType * IndicatorIdx)
{
  const uint32 IndMILEnd;
  const uint32 IndMILStart;
  Dem_IndicatorIdxType Index;
  boolean Result;
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  long unsigned int _4;
  int _5;
  short unsigned int _6;
  unsigned char Index.44_7;
  unsigned char _8;
  boolean _23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_12 = 0;
  # DEBUG Result => Result_12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Dem_GbiIndicatorUsed (EventId_14(D));
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Dem_IndicatorDesc[0].StartIdx;
  IndMILStart_16 = (const uint32) _2;
  # DEBUG IndMILStart => IndMILStart_16
  # DEBUG BEGIN_STMT
  _3 = Dem_IndicatorDesc[0].Number;
  _4 = (long unsigned int) _3;
  IndMILEnd_17 = IndMILStart_16 + _4;
  # DEBUG IndMILEnd => IndMILEnd_17
  # DEBUG BEGIN_STMT
  Index_18 = (Dem_IndicatorIdxType) IndMILStart_16;
  # DEBUG Index => Index_18
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (int) Index_10;
  _6 = Dem_IndicatorLink[_5].EventId;
  if (EventId_14(D) == _6)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  *IndicatorIdx_20(D) = Index_10;
  # DEBUG BEGIN_STMT
  Result_22 = 1;
  # DEBUG Result => Result_22
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index.44_7 = Index_10;
  Index_19 = Index.44_7 + 1;
  # DEBUG Index => Index_19

  <bb 7> :
  # Index_10 = PHI <Index_18(3), Index_19(6)>
  # DEBUG Index => Index_10
  # DEBUG BEGIN_STMT
  _8 = (unsigned char) IndMILEnd_17;
  if (Index_10 < _8)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # Result_9 = PHI <Result_12(2), Result_22(5), Result_12(7)>
  # DEBUG Result => Result_9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = Result_9;
  return _23;

}


Dem_OpCycleProcessEventCycleStart (Dem_EventIdType EventId)
{
  int _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  int _5;
  unsigned char _6;
  int _7;
  unsigned char _8;
  <unnamed type> _9;
  void (*<T710>) (Dem_EventIdType) _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) EventId_11(D);
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (int) EventId_11(D);
  _4 = _2 | 64;
  Dem_NvData.DTCStatusMask[_3] = _4;
  # DEBUG BEGIN_STMT
  _5 = (int) EventId_11(D);
  _6 = Dem_NvData.DTCStatusMask[_5];
  _7 = (int) EventId_11(D);
  _8 = _6 & 253;
  Dem_NvData.DTCStatusMask[_7] = _8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _9 = Dem_GbiDebounceAlgo (EventId_11(D));
  _10 = Dem_DebounceFctPtrTable[_9].ResetFct;
  _10 (EventId_11(D));
  # DEBUG BEGIN_STMT
  return;

}


Dem_OpCycleProcessCycleStart (Dem_OperationCycleIdType OperationCycleId)
{
  Dem_EventIdType EventId;
  unsigned char Dem_EventMemoryPermanentUpdated.40_1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  short unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EventId_12 = 1;
  # DEBUG EventId => EventId_12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ProcessIndicator (OperationCycleId_14(D));
  # DEBUG BEGIN_STMT
  if (OperationCycleId_14(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dem_PermanentMemoryStatusUpdate ();
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated.40_1 = Dem_EventMemoryPermanentUpdated;
  if (Dem_EventMemoryPermanentUpdated.40_1 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  NvM_ASR40_WriteBlock (8, 0B);

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = Dem_NvData.ReadinessEnableStatus;
  _3 = _2 | 16383;
  Dem_NvData.ReadinessEnableStatus = _3;
  # DEBUG BEGIN_STMT
  Dem_NvData.Dem_OpCycleDCYIsQualified = 0;
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 7> :
  # EventId_6 = PHI <EventId_7(6), EventId_26(11)>
  # DEBUG EventId => EventId_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = Dem_GbiOpCycleIdx (EventId_6);
  if (OperationCycleId_14(D) == _4)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Dem_OpCycleProcessEventCycleStart (EventId_6);
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Dem_UpdateFailureCounterCycleStart (EventId_6, OperationCycleId_14(D));

  <bb 10> :
  # DEBUG BEGIN_STMT
  EventId_26 = EventId_6 + 1;
  # DEBUG EventId => EventId_26
  # DEBUG BEGIN_STMT
  _5 = EventId_26 % 10;
  if (_5 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  if (EventId_26 <= 14)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 13> :
  # EventId_7 = PHI <EventId_12(5), EventId_26(12), EventId_12(2)>
  # DEBUG EventId => EventId_7
  # DEBUG BEGIN_STMT
  if (EventId_7 <= 14)
    goto <bb 6>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_OpCycleProcessEventCycleEnd (Dem_EventIdType EventId)
{
  uint8 AgingCriteriaMask;
  boolean UpdateAgingCounterCriteriaFulfilled;
  int _1;
  unsigned char _2;
  unsigned int _3;
  unsigned int _4;
  int _5;
  unsigned char _6;
  int _7;
  unsigned char _8;
  unsigned char _9;
  int _10;
  unsigned char _11;
  unsigned char _12;
  _Bool _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _1 = (int) EventId_18(D);
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (unsigned int) _2;
  _4 = _3 & 66;
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = (int) EventId_18(D);
  _6 = Dem_NvData.DTCStatusMask[_5];
  _7 = (int) EventId_18(D);
  _8 = _6 & 251;
  Dem_NvData.DTCStatusMask[_7] = _8;

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _9 = Dem_GbiNumAgingCycles (EventId_18(D));
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  UpdateAgingCounterCriteriaFulfilled_22 = 0;
  # DEBUG UpdateAgingCounterCriteriaFulfilled => UpdateAgingCounterCriteriaFulfilled_22
  # DEBUG BEGIN_STMT
  AgingCriteriaMask_23 = 2;
  # DEBUG AgingCriteriaMask => AgingCriteriaMask_23
  # DEBUG BEGIN_STMT
  AgingCriteriaMask_24 = AgingCriteriaMask_23 | 64;
  # DEBUG AgingCriteriaMask => AgingCriteriaMask_24
  # DEBUG BEGIN_STMT
  _10 = (int) EventId_18(D);
  _11 = Dem_NvData.DTCStatusMask[_10];
  _12 = AgingCriteriaMask_24 & _11;
  _13 = _12 == 0;
  UpdateAgingCounterCriteriaFulfilled_25 = (boolean) _13;
  # DEBUG UpdateAgingCounterCriteriaFulfilled => UpdateAgingCounterCriteriaFulfilled_25
  # DEBUG BEGIN_STMT
  if (UpdateAgingCounterCriteriaFulfilled_25 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Dem_UpdateAgingCounter (EventId_18(D));

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_OpCycleProcessCycleEnd (Dem_OperationCycleIdType OperationCycleId)
{
  Dem_EventIdType EventId;
  unsigned char _1;
  unsigned char Dem_EventMemoryPermanentUpdated.31_2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EventId_7 = 1;
  # DEBUG EventId => EventId_7
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Dem_GbiOpCycleIdx (EventId_3);
  if (OperationCycleId_9(D) == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Dem_OpCycleProcessEventCycleEnd (EventId_3);

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dem_ProcessFailureCounterReset (EventId_3, OperationCycleId_9(D));
  # DEBUG BEGIN_STMT
  EventId_14 = EventId_3 + 1;
  # DEBUG EventId => EventId_14

  <bb 6> :
  # EventId_3 = PHI <EventId_7(2), EventId_14(5)>
  # DEBUG EventId => EventId_3
  # DEBUG BEGIN_STMT
  if (EventId_3 <= 14)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (OperationCycleId_9(D) == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated.31_2 = Dem_EventMemoryPermanentUpdated;
  if (Dem_EventMemoryPermanentUpdated.31_2 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  NvM_ASR40_WriteBlock (8, 0B);

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_CheckWIROffCriteriaFulfilled (Dem_EventIdType EventId)
{
  const Dem_CounterDataIdxType CounterDataIdx;
  uint8 * const CycleCounterWIR;
  Dem_IndicatorIdxType LinkIdx;
  boolean Result;
  int _1;
  short unsigned int _2;
  unsigned char _3;
  sizetype _4;
  uint8 * _5;
  unsigned char _6;
  unsigned int _7;
  unsigned int _8;
  unsigned int _9;
  unsigned char _10;
  unsigned char _11;
  boolean _22;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_14 = 1;
  # DEBUG Result => Result_14
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CycleCounterWIR_15 = &Dem_NvData.IndicatorCycleCounterWIRStatus[0];
  # DEBUG CycleCounterWIR => CycleCounterWIR_15
  # DEBUG BEGIN_STMT
  LinkIdx_16 = 0;
  # DEBUG LinkIdx => LinkIdx_16
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) LinkIdx_13;
  _2 = Dem_IndicatorLink[_1].EventId;
  if (EventId_18(D) == _2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CounterDataIdx_19 = LinkIdx_13;
  # DEBUG CounterDataIdx => CounterDataIdx_19
  # DEBUG BEGIN_STMT
  _3 = CounterDataIdx_19 / 8;
  _4 = (sizetype) _3;
  _5 = &Dem_NvData.IndicatorCycleCounterWIRStatus[0] + _4;
  _6 = *_5;
  _7 = (unsigned int) CounterDataIdx_19;
  _8 = _7 & 7;
  _9 = 1 << _8;
  _10 = (unsigned char) _9;
  _11 = _6 & _10;
  if (_11 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Result_20 = 0;
  # DEBUG Result => Result_20
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  LinkIdx_21 = LinkIdx_13 + 1;
  # DEBUG LinkIdx => LinkIdx_21

  <bb 7> :
  # LinkIdx_13 = PHI <LinkIdx_16(2), LinkIdx_21(6)>
  # DEBUG LinkIdx => LinkIdx_13
  # DEBUG BEGIN_STMT
  if (LinkIdx_13 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # Result_12 = PHI <Result_20(5), Result_14(7)>
  # DEBUG Result => Result_12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _22 = Result_12;
  return _22;

}


Dem_SetCycleCounterRole (Dem_IndicatorIdType IndicatorId, Dem_CounterDataIdxType CounterDataIdx, Dem_IndicatorCounterDataRoleType CounterDataRole)
{
  uint8 * const Role;
  int _1;
  sizetype _2;
  uint8 * _3;
  unsigned char _4;
  unsigned int _5;
  unsigned int _6;
  unsigned int _7;
  unsigned char _8;
  sizetype _9;
  uint8 * _10;
  unsigned char _11;
  sizetype _12;
  uint8 * _13;
  unsigned char _14;
  unsigned int _15;
  unsigned int _16;
  unsigned int _17;
  unsigned char _18;
  unsigned char _19;
  sizetype _20;
  uint8 * _21;
  unsigned char _22;
  unsigned char _28;
  unsigned char _31;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) IndicatorId_24(D);
  Role_25 = &Dem_NvData.IndicatorCycleCounterRole[_1];
  # DEBUG Role => Role_25
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (CounterDataRole_26(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _31 = CounterDataIdx_27(D) / 8;
  _2 = (sizetype) _31;
  _3 = Role_25 + _2;
  _4 = *_3;
  _5 = (unsigned int) CounterDataIdx_27(D);
  _6 = _5 & 7;
  _7 = 1 << _6;
  _8 = (unsigned char) _7;
  _9 = (sizetype) _31;
  _10 = Role_25 + _9;
  _11 = _4 | _8;
  *_10 = _11;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _28 = CounterDataIdx_27(D) / 8;
  _12 = (sizetype) _28;
  _13 = Role_25 + _12;
  _14 = *_13;
  _15 = (unsigned int) CounterDataIdx_27(D);
  _16 = _15 & 7;
  _17 = 1 << _16;
  _18 = (unsigned char) _17;
  _19 = ~_18;
  _20 = (sizetype) _28;
  _21 = Role_25 + _20;
  _22 = _14 & _19;
  *_21 = _22;

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessIndicatorOnCriteria (Dem_IndicatorIdxType IndicatorIdx, Dem_EventIdType EventId)
{
  Dem_IndicatorCounterDataRoleType IndicatorCounterDataRole;
  Dem_IndicatorCycleCounterType * const CycleCounter;
  const Dem_IndicatorCycleCounterType FailureCycleThreshold;
  const Dem_IndicatorIdType IndicatorId;
  const Dem_FailureCycleCounterInfoIdxType FailureCycleCounterInfoIdx;
  const Dem_CounterDataIdxType CounterDataIdx;
  int _1;
  int _2;
  unsigned char _3;
  unsigned int _4;
  unsigned char _5;
  unsigned int _6;
  unsigned int _7;
  unsigned int _8;
  unsigned char _9;
  unsigned char _10;
  sizetype _11;
  Dem_IndicatorCycleCounterType * _12;
  sizetype _13;
  Dem_IndicatorCycleCounterType * _14;
  unsigned char _15;
  sizetype _16;
  Dem_IndicatorCycleCounterType * _17;
  unsigned char _18;
  unsigned char _19;
  unsigned char _20;
  Dem_IndicatorCounterDataRoleType iftmp.145_21;
  Dem_IndicatorCounterDataRoleType iftmp.145_31;
  Dem_IndicatorCounterDataRoleType iftmp.145_32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CounterDataIdx_25 = IndicatorIdx_24(D);
  # DEBUG CounterDataIdx => CounterDataIdx_25
  # DEBUG BEGIN_STMT
  _1 = (int) IndicatorIdx_24(D);
  FailureCycleCounterInfoIdx_27 = Dem_IndicatorLink[_1].FailureCycleCounterInfoIdx;
  # DEBUG FailureCycleCounterInfoIdx => FailureCycleCounterInfoIdx_27
  # DEBUG BEGIN_STMT
  IndicatorId_28 = 0;
  # DEBUG IndicatorId => IndicatorId_28
  # DEBUG BEGIN_STMT
  _2 = (int) FailureCycleCounterInfoIdx_27;
  FailureCycleThreshold_29 = Dem_FailureCycleCounterInfo[_2].Threshold;
  # DEBUG FailureCycleThreshold => FailureCycleThreshold_29
  # DEBUG BEGIN_STMT
  CycleCounter_30 = &Dem_NvData.IndicatorCycleCounter[0];
  # DEBUG CycleCounter => CycleCounter_30
  # DEBUG BEGIN_STMT
  _3 = CounterDataIdx_25 / 8;
  _4 = (unsigned int) _3;
  _5 = Dem_NvData.IndicatorCycleCounterRole[0][_4];
  _6 = (unsigned int) CounterDataIdx_25;
  _7 = _6 & 7;
  _8 = 1 << _7;
  _9 = (unsigned char) _8;
  _10 = _5 & _9;
  if (_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.145_32 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.145_31 = 0;

  <bb 5> :
  # iftmp.145_21 = PHI <iftmp.145_32(3), iftmp.145_31(4)>
  IndicatorCounterDataRole_33 = iftmp.145_21;
  # DEBUG IndicatorCounterDataRole => IndicatorCounterDataRole_33
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (IndicatorCounterDataRole_33 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  IndicatorCounterDataRole_34 = 0;
  # DEBUG IndicatorCounterDataRole => IndicatorCounterDataRole_34
  # DEBUG BEGIN_STMT
  Dem_SetCycleCounterRole (0, CounterDataIdx_25, IndicatorCounterDataRole_34);
  # DEBUG BEGIN_STMT
  _11 = (sizetype) CounterDataIdx_25;
  _12 = &Dem_NvData.IndicatorCycleCounter[0] + _11;
  *_12 = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _13 = (sizetype) CounterDataIdx_25;
  _14 = &Dem_NvData.IndicatorCycleCounter[0] + _13;
  _15 = *_14;
  if (FailureCycleThreshold_29 > _15)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _16 = (sizetype) CounterDataIdx_25;
  _17 = &Dem_NvData.IndicatorCycleCounter[0] + _16;
  _18 = *_17;
  _19 = _18;
  _20 = _19 + 1;
  *_17 = _20;

  <bb 9> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessIndicatorOffCriteria (Dem_IndicatorIdxType IndicatorIdx, Dem_EventIdType EventId)
{
  boolean IsMIL;
  const uint32 IndMILEnd;
  const uint32 IndMILStart;
  boolean IsWIRSet;
  Dem_IndicatorCounterDataRoleType IndicatorCounterDataRole;
  Dem_IndicatorCycleCounterType * CounterPtr;
  boolean Continue;
  const Dem_IndicatorCycleCounterType HealingCycleThreshold;
  const Dem_HealingCycleCounterInfoIdxType HealingCycleCounterInfoIdx;
  const Dem_IndicatorIdType IndicatorId;
  const Dem_CounterDataIdxType CounterDataIdx;
  int _1;
  unsigned char _2;
  unsigned int _3;
  unsigned int _4;
  int _5;
  int _6;
  int _7;
  unsigned char _8;
  unsigned int _9;
  unsigned char _10;
  unsigned int _11;
  unsigned int _12;
  unsigned int _13;
  unsigned char _14;
  unsigned char _15;
  _Bool _16;
  unsigned char _17;
  unsigned int _18;
  unsigned char _19;
  unsigned int _20;
  unsigned int _21;
  unsigned int _22;
  unsigned char _23;
  unsigned char _24;
  int _25;
  unsigned char _26;
  unsigned char _27;
  unsigned char _28;
  unsigned char _29;
  unsigned char _30;
  unsigned int _31;
  unsigned char _32;
  unsigned int _33;
  unsigned int _34;
  unsigned int _35;
  unsigned char _36;
  unsigned char _37;
  unsigned char _38;
  unsigned int _39;
  unsigned char _40;
  int _41;
  unsigned char _42;
  unsigned char _43;
  unsigned char _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  unsigned char _48;
  int _49;
  unsigned char _50;
  int _51;
  unsigned char _52;
  boolean iftmp.41_54;
  boolean iftmp.41_82;
  boolean iftmp.41_83;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) EventId_61(D);
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (unsigned int) _2;
  _4 = _3 & 67;
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CounterDataIdx_64 = IndicatorIdx_63(D);
  # DEBUG CounterDataIdx => CounterDataIdx_64
  # DEBUG BEGIN_STMT
  IndicatorId_65 = 0;
  # DEBUG IndicatorId => IndicatorId_65
  # DEBUG BEGIN_STMT
  _5 = (int) IndicatorIdx_63(D);
  HealingCycleCounterInfoIdx_66 = Dem_IndicatorLink[_5].HealingCycleCounterInfoIdx;
  # DEBUG HealingCycleCounterInfoIdx => HealingCycleCounterInfoIdx_66
  # DEBUG BEGIN_STMT
  _6 = (int) HealingCycleCounterInfoIdx_66;
  HealingCycleThreshold_67 = Dem_HealingCycleCounterInfo[_6].Threshold;
  # DEBUG HealingCycleThreshold => HealingCycleThreshold_67
  # DEBUG BEGIN_STMT
  Continue_68 = 0;
  # DEBUG Continue => Continue_68
  # DEBUG BEGIN_STMT
  _7 = (int) CounterDataIdx_64;
  CounterPtr_69 = &Dem_NvData.IndicatorCycleCounter[0][_7];
  # DEBUG CounterPtr => CounterPtr_69
  # DEBUG BEGIN_STMT
  IndicatorCounterDataRole_70 = 0;
  # DEBUG IndicatorCounterDataRole => IndicatorCounterDataRole_70
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _8 = CounterDataIdx_64 / 8;
  _9 = (unsigned int) _8;
  _10 = Dem_NvData.IndicatorCycleCounterWIRStatus[0][_9];
  _11 = (unsigned int) CounterDataIdx_64;
  _12 = _11 & 7;
  _13 = 1 << _12;
  _14 = (unsigned char) _13;
  _15 = _10 & _14;
  _16 = _15 != 0;
  IsWIRSet_72 = (boolean) _16;
  # DEBUG IsWIRSet => IsWIRSet_72
  # DEBUG BEGIN_STMT
  _17 = CounterDataIdx_64 / 8;
  _18 = (unsigned int) _17;
  _19 = Dem_NvData.IndicatorCycleCounterRole[0][_18];
  _20 = (unsigned int) CounterDataIdx_64;
  _21 = _20 & 7;
  _22 = 1 << _21;
  _23 = (unsigned char) _22;
  _24 = _19 & _23;
  if (_24 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  IndicatorCounterDataRole_73 = 1;
  # DEBUG IndicatorCounterDataRole => IndicatorCounterDataRole_73
  # DEBUG BEGIN_STMT
  Dem_SetCycleCounterRole (0, CounterDataIdx_64, IndicatorCounterDataRole_73);
  # DEBUG BEGIN_STMT
  _25 = (int) CounterDataIdx_64;
  Dem_NvData.IndicatorCycleCounter[0][_25] = 0;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (IsWIRSet_72 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _26 = *CounterPtr_69;
  if (HealingCycleThreshold_67 > _26)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _27 = *CounterPtr_69;
  _28 = _27 + 1;
  *CounterPtr_69 = _28;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _29 = *CounterPtr_69;
  if (HealingCycleThreshold_67 <= _29)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _30 = CounterDataIdx_64 / 8;
  _31 = (unsigned int) _30;
  _32 = Dem_NvData.IndicatorCycleCounterWIRStatus[0][_31];
  _33 = (unsigned int) CounterDataIdx_64;
  _34 = _33 & 7;
  _35 = 1 << _34;
  _36 = (unsigned char) _35;
  _37 = ~_36;
  _38 = CounterDataIdx_64 / 8;
  _39 = (unsigned int) _38;
  _40 = _32 & _37;
  Dem_NvData.IndicatorCycleCounterWIRStatus[0][_39] = _40;

  <bb 10> :
  # DEBUG BEGIN_STMT
  Continue_78 = 1;
  # DEBUG Continue => Continue_78

  <bb 11> :
  # Continue_53 = PHI <Continue_68(5), Continue_78(10)>
  # DEBUG Continue => Continue_53
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (Continue_53 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _41 = (int) CounterDataIdx_64;
  _42 = Dem_NvData.IndicatorCycleCounter[0][_41];
  if (HealingCycleThreshold_67 <= _42)
    goto <bb 13>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _43 = Dem_IndicatorDesc[0].StartIdx;
  IndMILStart_80 = (const uint32) _43;
  # DEBUG IndMILStart => IndMILStart_80
  # DEBUG BEGIN_STMT
  _44 = Dem_IndicatorDesc[0].Number;
  _45 = (long unsigned int) _44;
  IndMILEnd_81 = IndMILStart_80 + _45;
  # DEBUG IndMILEnd => IndMILEnd_81
  # DEBUG BEGIN_STMT
  _46 = (long unsigned int) IndicatorIdx_63(D);
  if (IndMILStart_80 <= _46)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _47 = (long unsigned int) IndicatorIdx_63(D);
  if (IndMILEnd_81 > _47)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.41_82 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.41_83 = 0;

  <bb 17> :
  # iftmp.41_54 = PHI <iftmp.41_82(15), iftmp.41_83(16)>
  IsMIL_84 = iftmp.41_54;
  # DEBUG IsMIL => IsMIL_84
  # DEBUG BEGIN_STMT
  if (IsMIL_84 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Dem_PermanentMemoryRemoveEntry (EventId_61(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 19> :
  # DEBUG BEGIN_STMT
  _48 = Dem_CheckWIROffCriteriaFulfilled (EventId_61(D));
  if (_48 == 1)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _49 = (int) EventId_61(D);
  _50 = Dem_NvData.DTCStatusMask[_49];
  _51 = (int) EventId_61(D);
  _52 = _50 & 127;
  Dem_NvData.DTCStatusMask[_51] = _52;
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 21> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessIndicator (Dem_OperationCycleIdType OperationCycleId)
{
  const Dem_OperationCycleIdType EventOperationCycle;
  const Dem_OperationCycleIdType HealingCycleId;
  const Dem_OperationCycleIdType FailureCycleId;
  const Dem_EventIdType EventId;
  Dem_IndicatorIdxType LinkIdx;
  int _1;
  int _2;
  unsigned char _3;
  unsigned int _4;
  unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  LinkIdx_11 = 0;
  # DEBUG LinkIdx => LinkIdx_11
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) LinkIdx_6;
  EventId_13 = Dem_IndicatorLink[_1].EventId;
  # DEBUG EventId => EventId_13
  # DEBUG BEGIN_STMT
  FailureCycleId_15 = Dem_GbiIndicatorFailureCycleIdx (EventId_13, LinkIdx_6);
  # DEBUG FailureCycleId => FailureCycleId_15
  # DEBUG BEGIN_STMT
  HealingCycleId_17 = Dem_GbiIndicatorHealingCycleIdx (EventId_13, LinkIdx_6);
  # DEBUG HealingCycleId => HealingCycleId_17
  # DEBUG BEGIN_STMT
  if (HealingCycleId_17 == OperationCycleId_18(D))
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Dem_ProcessIndicatorOffCriteria (LinkIdx_6, EventId_13);

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (FailureCycleId_15 == OperationCycleId_18(D))
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  EventOperationCycle_21 = Dem_GbiOpCycleIdx (EventId_13);
  # DEBUG EventOperationCycle => EventOperationCycle_21
  # DEBUG BEGIN_STMT
  if (FailureCycleId_15 != EventOperationCycle_21)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = (int) EventId_13;
  _3 = Dem_NvData.DTCStatusMask[_2];
  _4 = (unsigned int) _3;
  _5 = _4 & 1;
  if (_5 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Dem_ProcessIndicatorOnCriteria (LinkIdx_6, EventId_13);

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 10> :
  # DEBUG BEGIN_STMT
  LinkIdx_25 = LinkIdx_6 + 1;
  # DEBUG LinkIdx => LinkIdx_25

  <bb 11> :
  # LinkIdx_6 = PHI <LinkIdx_11(2), LinkIdx_25(10)>
  # DEBUG LinkIdx => LinkIdx_6
  # DEBUG BEGIN_STMT
  if (LinkIdx_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_IncrementFailureCounter (Dem_EventIdType EventId, boolean HandleCDTC)
{
  const Dem_FailureCycleCounterType CurrentEvThreshold;
  Dem_SizeEvMemEntryType EvMemEntryIdx;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  boolean Result;
  unsigned char _1;
  short unsigned int _2;
  int _3;
  struct Dem_EventMemoryEntryType * EvMemEntry.140_4;
  unsigned char _5;
  struct Dem_EventMemoryEntryType * EvMemEntry.141_6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  struct Dem_EventMemoryEntryType * EvMemEntry.142_10;
  unsigned char _11;
  int _12;
  unsigned char _13;
  int _14;
  unsigned char _15;
  struct Dem_EventMemoryEntryType * EvMemEntry.143_16;
  unsigned char EvMemEntryIdx.144_17;
  boolean _34;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_23 = 0;
  # DEBUG Result => Result_23
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Dem_SearchForEntry (EventId_25(D), &EvMemEntry, &EvMemEntryIdx);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiEventFailureClassIdx (EventId_25(D));
  _3 = (int) _2;
  CurrentEvThreshold_28 = Dem_EventFailureCycleCfg[_3].EventFailureCycleCounterThreshold;
  # DEBUG CurrentEvThreshold => CurrentEvThreshold_28
  # DEBUG BEGIN_STMT
  EvMemEntry.140_4 = EvMemEntry;
  _5 = EvMemEntry.140_4->EventFailureCycleCounter;
  if (CurrentEvThreshold_28 > _5)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EvMemEntry.141_6 = EvMemEntry;
  _7 = EvMemEntry.141_6->EventFailureCycleCounter;
  _8 = _7;
  _9 = _8 + 1;
  EvMemEntry.141_6->EventFailureCycleCounter = _9;
  # DEBUG BEGIN_STMT
  EvMemEntry.142_10 = EvMemEntry;
  _11 = EvMemEntry.142_10->EventFailureCycleCounter;
  if (CurrentEvThreshold_28 <= _11)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (HandleCDTC_30(D) == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _12 = (int) EventId_25(D);
  _13 = Dem_NvData.DTCStatusMask[_12];
  _14 = (int) EventId_25(D);
  _15 = _13 | 8;
  Dem_NvData.DTCStatusMask[_14] = _15;

  <bb 7> :
  # DEBUG BEGIN_STMT
  Result_32 = 1;
  # DEBUG Result => Result_32

  <bb 8> :
  # Result_18 = PHI <Result_23(4), Result_32(7)>
  # DEBUG Result => Result_18
  # DEBUG BEGIN_STMT
  EvMemEntry.143_16 = EvMemEntry;
  EvMemEntryIdx.144_17 = EvMemEntryIdx;
  Dem_CheckForImmediateEntryStorage (EventId_25(D), EvMemEntry.143_16, EvMemEntryIdx.144_17, 0);

  <bb 9> :
  # Result_19 = PHI <Result_23(2), Result_23(3), Result_18(8)>
  # DEBUG Result => Result_19
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _34 = Result_19;
  EvMemEntry ={v} {CLOBBER};
  EvMemEntryIdx ={v} {CLOBBER};
  return _34;

}


Dem_UpdateFailureCounterCycleStart (Dem_EventIdType EventId, Dem_OperationCycleIdType OperationCycleId)
{
  boolean HandleCDTC;
  const Dem_OperationCycleIdType EventOpCycleIdx;
  const Dem_OperationCycleIdType EventFailureCycleIdx;
  const uint16 EventFailureClassIdx;
  int _1;
  unsigned char _2;
  unsigned int _3;
  unsigned int _4;
  unsigned char _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EventFailureClassIdx_10 = Dem_GbiEventFailureClassIdx (EventId_8(D));
  # DEBUG EventFailureClassIdx => EventFailureClassIdx_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx_10 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  EventFailureCycleIdx_12 = Dem_GbiEventFailureCycleIdx (EventId_8(D), EventFailureClassIdx_10);
  # DEBUG EventFailureCycleIdx => EventFailureCycleIdx_12
  # DEBUG BEGIN_STMT
  EventOpCycleIdx_14 = Dem_GbiOpCycleIdx (EventId_8(D));
  # DEBUG EventOpCycleIdx => EventOpCycleIdx_14
  # DEBUG BEGIN_STMT
  if (EventFailureCycleIdx_12 == OperationCycleId_15(D))
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  if (EventFailureCycleIdx_12 != EventOpCycleIdx_14)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _1 = (int) EventId_8(D);
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (unsigned int) _2;
  _4 = _3 & 10;
  if (_4 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  HandleCDTC_16 = 0;
  # DEBUG HandleCDTC => HandleCDTC_16
  # DEBUG BEGIN_STMT
  _5 = Dem_IncrementFailureCounter (EventId_8(D), HandleCDTC_16);
  if (_5 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Dem_DoProcessFaultConfirmation = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessFailureCounterReset (Dem_EventIdType EventId, Dem_OperationCycleIdType OperationCycleId)
{
  const Dem_OperationCycleIdType EventFailureCycleIdx;
  Dem_SizeEvMemEntryType EvMemEntryIdx;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  const uint16 EventFailureClassIdx;
  int _1;
  unsigned char _2;
  unsigned int _3;
  unsigned int _4;
  unsigned char _5;
  struct Dem_EventMemoryEntryType * EvMemEntry.37_6;
  struct Dem_EventMemoryEntryType * EvMemEntry.38_7;
  unsigned char EvMemEntryIdx.39_8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EventFailureClassIdx_14 = Dem_GbiEventFailureClassIdx (EventId_12(D));
  # DEBUG EventFailureClassIdx => EventFailureClassIdx_14
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx_14 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  EventFailureCycleIdx_16 = Dem_GbiEventFailureCycleIdx (EventId_12(D), EventFailureClassIdx_14);
  # DEBUG EventFailureCycleIdx => EventFailureCycleIdx_16
  # DEBUG BEGIN_STMT
  if (EventFailureCycleIdx_16 == OperationCycleId_17(D))
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = (int) EventId_12(D);
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (unsigned int) _2;
  _4 = _3 & 74;
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _5 = Dem_SearchForEntry (EventId_12(D), &EvMemEntry, &EvMemEntryIdx);
  if (_5 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  EvMemEntry.37_6 = EvMemEntry;
  EvMemEntry.37_6->EventFailureCycleCounter = 0;
  # DEBUG BEGIN_STMT
  EvMemEntry.38_7 = EvMemEntry;
  EvMemEntryIdx.39_8 = EvMemEntryIdx;
  Dem_CheckForImmediateEntryStorage (EventId_12(D), EvMemEntry.38_7, EvMemEntryIdx.39_8, 0);

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 8> :
  # DEBUG BEGIN_STMT
  EvMemEntry ={v} {CLOBBER};
  EvMemEntryIdx ={v} {CLOBBER};
  return;

}


Dem_SetCDTCOnConfirmation ()
{
  boolean HandleCDTCPreconditions;
  uint16 EventFailureClassIdx;
  Dem_EventIdType * EventIdPtr;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr;
  Dem_EventIdType EventId;
  Dem_SizeEvMemEntryType Entry;
  uint8_least OriginIdx;
  struct Dem_EventMemoryEntryType * _1;
  unsigned int _2;
  unsigned int _3;
  int _4;
  unsigned char _5;
  unsigned int _6;
  unsigned int _7;
  unsigned char _8;
  unsigned char _9;
  struct Dem_EventMemoryEntryType * _10;
  unsigned int _11;
  unsigned int _12;
  struct Dem_EventMemoryEntryType * _13;
  unsigned char _14;
  int _15;
  unsigned char _16;
  int _17;
  unsigned char _18;
  int _19;
  unsigned char _20;
  unsigned char _21;
  boolean iftmp.81_25;
  boolean iftmp.81_42;
  boolean iftmp.81_43;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OriginIdx_29 = 0;
  # DEBUG OriginIdx => OriginIdx_29
  goto <bb 19>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Entry_31 = 0;
  # DEBUG Entry => Entry_31
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = Dem_EventMem[OriginIdx_22];
  _2 = (unsigned int) Entry_23;
  _3 = _2 * 16;
  EvMemEntryPtr_33 = _1 + _3;
  # DEBUG EvMemEntryPtr => EvMemEntryPtr_33
  # DEBUG BEGIN_STMT
  EventIdPtr_34 = &EvMemEntryPtr_33->EventId;
  # DEBUG EventIdPtr => EventIdPtr_34
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  EventId_36 = *EventIdPtr_34;
  # DEBUG EventId => EventId_36
  # DEBUG BEGIN_STMT
  if (EventId_36 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = (int) EventId_36;
  _5 = Dem_NvData.DTCStatusMask[_4];
  _6 = (unsigned int) _5;
  _7 = _6 & 8;
  if (_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = Dem_GbiOpCycleIdx (EventId_36);
  if (_8 != 1)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _9 = Dem_NvData.Dem_OpCycleDCYIsQualified;
  if (_9 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  EventFailureClassIdx_39 = Dem_GbiEventFailureClassIdx (EventId_36);
  # DEBUG EventFailureClassIdx => EventFailureClassIdx_39
  # DEBUG BEGIN_STMT
  HandleCDTCPreconditions_40 = 0;
  # DEBUG HandleCDTCPreconditions => HandleCDTCPreconditions_40
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx_39 != 1)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _10 = Dem_EventMem[OriginIdx_22];
  _11 = (unsigned int) Entry_23;
  _12 = _11 * 16;
  _13 = _10 + _12;
  _14 = _13->EventFailureCycleCounter;
  _15 = (int) EventFailureClassIdx_39;
  _16 = Dem_EventFailureCycleCfg[_15].EventFailureCycleCounterThreshold;
  if (_14 >= _16)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.81_43 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.81_42 = 0;

  <bb 12> :
  # iftmp.81_25 = PHI <iftmp.81_43(10), iftmp.81_42(11)>
  HandleCDTCPreconditions_44 = iftmp.81_25;
  # DEBUG HandleCDTCPreconditions => HandleCDTCPreconditions_44
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  HandleCDTCPreconditions_41 = 1;
  # DEBUG HandleCDTCPreconditions => HandleCDTCPreconditions_41

  <bb 14> :
  # HandleCDTCPreconditions_24 = PHI <HandleCDTCPreconditions_44(12), HandleCDTCPreconditions_41(13)>
  # DEBUG HandleCDTCPreconditions => HandleCDTCPreconditions_24
  # DEBUG BEGIN_STMT
  if (HandleCDTCPreconditions_24 == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _17 = (int) EventId_36;
  _18 = Dem_NvData.DTCStatusMask[_17];
  _19 = (int) EventId_36;
  _20 = _18 | 8;
  Dem_NvData.DTCStatusMask[_19] = _20;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_UpdateEventIdOccurKinds (EventId_36, 3, 4);
  # DEBUG BEGIN_STMT
  Dem_CheckForImmediateEntryStorage (EventId_36, EvMemEntryPtr_33, Entry_23, 0);

  <bb 16> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Entry_49 = Entry_23 + 1;
  # DEBUG Entry => Entry_49

  <bb 17> :
  # Entry_23 = PHI <Entry_31(3), Entry_49(16)>
  # DEBUG Entry => Entry_23
  # DEBUG BEGIN_STMT
  _21 = Dem_SizeEventMem[OriginIdx_22];
  if (Entry_23 < _21)
    goto <bb 4>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  OriginIdx_32 = OriginIdx_22 + 1;
  # DEBUG OriginIdx => OriginIdx_32

  <bb 19> :
  # OriginIdx_22 = PHI <OriginIdx_29(2), OriginIdx_32(18)>
  # DEBUG OriginIdx => OriginIdx_22
  # DEBUG BEGIN_STMT
  if (OriginIdx_22 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_InitMaxOBDOccOrder ()
{
  Dem_EventIdType CurrentEvId;
  Dem_SizeEvMemEntryType EntryIdx;
  struct Dem_EventMemoryEntryType * _1;
  unsigned int _2;
  unsigned int _3;
  struct Dem_EventMemoryEntryType * _4;
  unsigned char _5;
  int _6;
  short unsigned int _7;
  short unsigned int Dem_MaxOBDOccOrder.12_8;
  int _9;
  short unsigned int _10;
  unsigned char EntryIdx.13_11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_MaxOBDOccOrder = 0;
  # DEBUG BEGIN_STMT
  EntryIdx_17 = 0;
  # DEBUG EntryIdx => EntryIdx_17
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = &Dem_EventMemoryPrimary;
  _2 = (unsigned int) EntryIdx_12;
  _3 = _2 * 16;
  _4 = _1 + _3;
  CurrentEvId_18 = _4->EventId;
  # DEBUG CurrentEvId => CurrentEvId_18
  # DEBUG BEGIN_STMT
  _5 = Dem_GbiDTCKind (CurrentEvId_18);
  if (_5 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _6 = (int) EntryIdx_12;
  _7 = Dem_EntryOBDFF[_6].OBDOccOrder;
  Dem_MaxOBDOccOrder.12_8 = Dem_MaxOBDOccOrder;
  if (_7 > Dem_MaxOBDOccOrder.12_8)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = (int) EntryIdx_12;
  _10 = Dem_EntryOBDFF[_9].OBDOccOrder;
  Dem_MaxOBDOccOrder = _10;

  <bb 6> :
  # DEBUG BEGIN_STMT
  EntryIdx.13_11 = EntryIdx_12;
  EntryIdx_21 = EntryIdx.13_11 + 1;
  # DEBUG EntryIdx => EntryIdx_21

  <bb 7> :
  # EntryIdx_12 = PHI <EntryIdx_17(2), EntryIdx_21(6)>
  # DEBUG EntryIdx => EntryIdx_12
  # DEBUG BEGIN_STMT
  if (EntryIdx_12 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_RearrangeOBDOccurrenceOrder ()
{
  Dem_EventIdType CurrentEvId;
  Dem_OccOrderType NextMinOccOrder;
  Dem_EventIdType CurrentEvId;
  struct Dem_EventMemoryEntryType * const EvMemEntry;
  Dem_OccOrderType NextOccOrder;
  Dem_SizeEvMemEntryType NumValidEntries;
  Dem_SizeEvMemEntryType ValidEntryIdx;
  Dem_SizeEvMemEntryType FoundEntryIdx;
  Dem_SizeEvMemEntryType EntryIdx;
  struct Dem_EventMemoryEntryType * _1;
  unsigned int _2;
  unsigned int _3;
  struct Dem_EventMemoryEntryType * _4;
  unsigned char _5;
  unsigned char NumValidEntries.114_6;
  unsigned char EntryIdx.115_7;
  struct Dem_EventMemoryEntryType * _8;
  unsigned int _9;
  unsigned int _10;
  struct Dem_EventMemoryEntryType * _11;
  unsigned char _12;
  int _13;
  short unsigned int _14;
  int _15;
  short unsigned int _16;
  int _17;
  unsigned char EntryIdx.116_18;
  int _19;
  short unsigned int _20;
  int _21;
  unsigned int _22;
  unsigned int _23;
  struct Dem_EventMemoryEntryType * _24;
  <unnamed type> _25;
  unsigned int _26;
  unsigned int _27;
  struct Dem_EventMemoryEntryType * _28;
  short unsigned int NextOccOrder.117_29;
  unsigned char ValidEntryIdx.118_30;
  short unsigned int _31;
  short unsigned int _32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FoundEntryIdx_48 = 0;
  # DEBUG FoundEntryIdx => FoundEntryIdx_48
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NumValidEntries_49 = 0;
  # DEBUG NumValidEntries => NumValidEntries_49
  # DEBUG BEGIN_STMT
  NextOccOrder_50 = 0;
  # DEBUG NextOccOrder => NextOccOrder_50
  # DEBUG BEGIN_STMT
  EvMemEntry_51 = &Dem_EventMemoryPrimary;
  # DEBUG EvMemEntry => EvMemEntry_51
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx_52 = 0;
  # DEBUG EntryIdx => EntryIdx_52
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = &Dem_EventMemoryPrimary;
  _2 = (unsigned int) EntryIdx_33;
  _3 = _2 * 16;
  _4 = _1 + _3;
  CurrentEvId_67 = _4->EventId;
  # DEBUG CurrentEvId => CurrentEvId_67
  # DEBUG BEGIN_STMT
  _5 = Dem_GbiDTCKind (CurrentEvId_67);
  if (_5 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  if (CurrentEvId_67 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  NumValidEntries.114_6 = NumValidEntries_40;
  NumValidEntries_69 = NumValidEntries.114_6 + 1;
  # DEBUG NumValidEntries => NumValidEntries_69

  <bb 6> :
  # NumValidEntries_39 = PHI <NumValidEntries_40(3), NumValidEntries_40(4), NumValidEntries_69(5)>
  # DEBUG NumValidEntries => NumValidEntries_39
  # DEBUG BEGIN_STMT
  EntryIdx.115_7 = EntryIdx_33;
  EntryIdx_70 = EntryIdx.115_7 + 1;
  # DEBUG EntryIdx => EntryIdx_70

  <bb 7> :
  # EntryIdx_33 = PHI <EntryIdx_52(2), EntryIdx_70(6)>
  # NumValidEntries_40 = PHI <NumValidEntries_49(2), NumValidEntries_39(6)>
  # DEBUG NumValidEntries => NumValidEntries_40
  # DEBUG EntryIdx => EntryIdx_33
  # DEBUG BEGIN_STMT
  if (EntryIdx_33 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ValidEntryIdx_54 = 0;
  # DEBUG ValidEntryIdx => ValidEntryIdx_54
  goto <bb 21>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  NextMinOccOrder_56 = 65535;
  # DEBUG NextMinOccOrder => NextMinOccOrder_56
  # DEBUG BEGIN_STMT
  EntryIdx_57 = 0;
  # DEBUG EntryIdx => EntryIdx_57
  goto <bb 16>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _8 = &Dem_EventMemoryPrimary;
  _9 = (unsigned int) EntryIdx_34;
  _10 = _9 * 16;
  _11 = _8 + _10;
  CurrentEvId_62 = _11->EventId;
  # DEBUG CurrentEvId => CurrentEvId_62
  # DEBUG BEGIN_STMT
  _12 = Dem_GbiDTCKind (CurrentEvId_62);
  if (_12 == 2)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 11> :
  if (CurrentEvId_62 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  _13 = (int) EntryIdx_34;
  _14 = Dem_EntryOBDFF[_13].OBDOccOrder;
  if (NextOccOrder_41 <= _14)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _15 = (int) EntryIdx_34;
  _16 = Dem_EntryOBDFF[_15].OBDOccOrder;
  if (NextMinOccOrder_43 >= _16)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _17 = (int) EntryIdx_34;
  NextMinOccOrder_64 = Dem_EntryOBDFF[_17].OBDOccOrder;
  # DEBUG NextMinOccOrder => NextMinOccOrder_64
  # DEBUG BEGIN_STMT
  FoundEntryIdx_65 = EntryIdx_34;
  # DEBUG FoundEntryIdx => FoundEntryIdx_65

  <bb 15> :
  # FoundEntryIdx_35 = PHI <FoundEntryIdx_36(10), FoundEntryIdx_36(11), FoundEntryIdx_36(12), FoundEntryIdx_36(13), FoundEntryIdx_65(14)>
  # NextMinOccOrder_42 = PHI <NextMinOccOrder_43(10), NextMinOccOrder_43(11), NextMinOccOrder_43(12), NextMinOccOrder_43(13), NextMinOccOrder_64(14)>
  # DEBUG NextMinOccOrder => NextMinOccOrder_42
  # DEBUG FoundEntryIdx => FoundEntryIdx_35
  # DEBUG BEGIN_STMT
  EntryIdx.116_18 = EntryIdx_34;
  EntryIdx_66 = EntryIdx.116_18 + 1;
  # DEBUG EntryIdx => EntryIdx_66

  <bb 16> :
  # EntryIdx_34 = PHI <EntryIdx_57(9), EntryIdx_66(15)>
  # FoundEntryIdx_36 = PHI <FoundEntryIdx_37(9), FoundEntryIdx_35(15)>
  # NextMinOccOrder_43 = PHI <NextMinOccOrder_56(9), NextMinOccOrder_42(15)>
  # DEBUG NextMinOccOrder => NextMinOccOrder_43
  # DEBUG FoundEntryIdx => FoundEntryIdx_36
  # DEBUG EntryIdx => EntryIdx_34
  # DEBUG BEGIN_STMT
  if (EntryIdx_34 <= 1)
    goto <bb 10>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _19 = (int) FoundEntryIdx_36;
  _20 = Dem_EntryOBDFF[_19].OBDOccOrder;
  if (NextOccOrder_41 < _20)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _21 = (int) FoundEntryIdx_36;
  Dem_EntryOBDFF[_21].OBDOccOrder = NextOccOrder_41;
  # DEBUG BEGIN_STMT
  _22 = (unsigned int) FoundEntryIdx_36;
  _23 = _22 * 16;
  _24 = EvMemEntry_51 + _23;
  _25 = _24->EntryStatus;
  if (_25 != 3)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _26 = (unsigned int) FoundEntryIdx_36;
  _27 = _26 * 16;
  _28 = EvMemEntry_51 + _27;
  _28->EntryStatus = 2;

  <bb 20> :
  # DEBUG BEGIN_STMT
  NextOccOrder.117_29 = NextOccOrder_41;
  NextOccOrder_60 = NextOccOrder.117_29 + 1;
  # DEBUG NextOccOrder => NextOccOrder_60
  # DEBUG BEGIN_STMT
  ValidEntryIdx.118_30 = ValidEntryIdx_38;
  ValidEntryIdx_61 = ValidEntryIdx.118_30 + 1;
  # DEBUG ValidEntryIdx => ValidEntryIdx_61

  <bb 21> :
  # FoundEntryIdx_37 = PHI <FoundEntryIdx_48(8), FoundEntryIdx_36(20)>
  # ValidEntryIdx_38 = PHI <ValidEntryIdx_54(8), ValidEntryIdx_61(20)>
  # NextOccOrder_41 = PHI <NextOccOrder_50(8), NextOccOrder_60(20)>
  # DEBUG NextOccOrder => NextOccOrder_41
  # DEBUG ValidEntryIdx => ValidEntryIdx_38
  # DEBUG FoundEntryIdx => FoundEntryIdx_37
  # DEBUG BEGIN_STMT
  if (ValidEntryIdx_38 < NumValidEntries_40)
    goto <bb 9>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _31 = (short unsigned int) NumValidEntries_40;
  _32 = _31 + 65535;
  Dem_MaxOBDOccOrder = _32;
  # DEBUG BEGIN_STMT
  return;

}


Dem_InitMaxOccOrder ()
{
  Dem_SizeEvMemEntryType EntryIdx;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  uint8 OriginIdx;
  int _1;
  int _2;
  unsigned int _3;
  unsigned int _4;
  struct Dem_EventMemoryEntryType * _5;
  short unsigned int _6;
  unsigned int _7;
  unsigned int _8;
  struct Dem_EventMemoryEntryType * _9;
  short unsigned int _10;
  int _11;
  short unsigned int _12;
  unsigned int _13;
  unsigned int _14;
  struct Dem_EventMemoryEntryType * _15;
  int _16;
  short unsigned int _17;
  unsigned char EntryIdx.10_18;
  int _19;
  unsigned char _20;
  unsigned char OriginIdx.11_21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OriginIdx_27 = 0;
  # DEBUG OriginIdx => OriginIdx_27
  goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) OriginIdx_22;
  Dem_MaxOccOrder[_1] = 0;
  # DEBUG BEGIN_STMT
  _2 = (int) OriginIdx_22;
  EvMemEntry_30 = Dem_EventMem[_2];
  # DEBUG EvMemEntry => EvMemEntry_30
  # DEBUG BEGIN_STMT
  EntryIdx_31 = 0;
  # DEBUG EntryIdx => EntryIdx_31
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = (unsigned int) EntryIdx_23;
  _4 = _3 * 16;
  _5 = EvMemEntry_30 + _4;
  _6 = _5->EventId;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = (unsigned int) EntryIdx_23;
  _8 = _7 * 16;
  _9 = EvMemEntry_30 + _8;
  _10 = _9->OccOrder;
  _11 = (int) OriginIdx_22;
  _12 = Dem_MaxOccOrder[_11];
  if (_10 > _12)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _13 = (unsigned int) EntryIdx_23;
  _14 = _13 * 16;
  _15 = EvMemEntry_30 + _14;
  _16 = (int) OriginIdx_22;
  _17 = _15->OccOrder;
  Dem_MaxOccOrder[_16] = _17;

  <bb 7> :
  # DEBUG BEGIN_STMT
  EntryIdx.10_18 = EntryIdx_23;
  EntryIdx_34 = EntryIdx.10_18 + 1;
  # DEBUG EntryIdx => EntryIdx_34

  <bb 8> :
  # EntryIdx_23 = PHI <EntryIdx_31(3), EntryIdx_34(7)>
  # DEBUG EntryIdx => EntryIdx_23
  # DEBUG BEGIN_STMT
  _19 = (int) OriginIdx_22;
  _20 = Dem_SizeEventMem[_19];
  if (EntryIdx_23 < _20)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  OriginIdx.11_21 = OriginIdx_22;
  OriginIdx_32 = OriginIdx.11_21 + 1;
  # DEBUG OriginIdx => OriginIdx_32

  <bb 10> :
  # OriginIdx_22 = PHI <OriginIdx_27(2), OriginIdx_32(9)>
  # DEBUG OriginIdx => OriginIdx_22
  # DEBUG BEGIN_STMT
  if (OriginIdx_22 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_RearrangeOccurrenceOrder (uint8 OriginIdx)
{
  Dem_OccOrderType NextMinOccOrder;
  Dem_OccOrderType NextOccOrder;
  Dem_SizeEvMemEntryType NumValidEntries;
  Dem_SizeEvMemEntryType ValidEntryIdx;
  Dem_SizeEvMemEntryType FoundEntryIdx;
  Dem_SizeEvMemEntryType EntryIdx;
  struct Dem_EventMemoryEntryType * const EvMemEntry;
  int _1;
  unsigned int _2;
  unsigned int _3;
  struct Dem_EventMemoryEntryType * _4;
  short unsigned int _5;
  unsigned char NumValidEntries.135_6;
  unsigned char EntryIdx.136_7;
  int _8;
  unsigned char _9;
  unsigned int _10;
  unsigned int _11;
  struct Dem_EventMemoryEntryType * _12;
  short unsigned int _13;
  unsigned int _14;
  unsigned int _15;
  struct Dem_EventMemoryEntryType * _16;
  short unsigned int _17;
  unsigned int _18;
  unsigned int _19;
  struct Dem_EventMemoryEntryType * _20;
  short unsigned int _21;
  unsigned int _22;
  unsigned int _23;
  struct Dem_EventMemoryEntryType * _24;
  unsigned char EntryIdx.137_25;
  int _26;
  unsigned char _27;
  unsigned int _28;
  unsigned int _29;
  struct Dem_EventMemoryEntryType * _30;
  short unsigned int _31;
  unsigned int _32;
  unsigned int _33;
  struct Dem_EventMemoryEntryType * _34;
  unsigned int _35;
  unsigned int _36;
  struct Dem_EventMemoryEntryType * _37;
  <unnamed type> _38;
  unsigned int _39;
  unsigned int _40;
  struct Dem_EventMemoryEntryType * _41;
  short unsigned int NextOccOrder.138_42;
  unsigned char ValidEntryIdx.139_43;
  short unsigned int _44;
  int _45;
  short unsigned int _46;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) OriginIdx_60(D);
  EvMemEntry_62 = Dem_EventMem[_1];
  # DEBUG EvMemEntry => EvMemEntry_62
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FoundEntryIdx_63 = 0;
  # DEBUG FoundEntryIdx => FoundEntryIdx_63
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NumValidEntries_64 = 0;
  # DEBUG NumValidEntries => NumValidEntries_64
  # DEBUG BEGIN_STMT
  NextOccOrder_65 = 0;
  # DEBUG NextOccOrder => NextOccOrder_65
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx_66 = 0;
  # DEBUG EntryIdx => EntryIdx_66
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (unsigned int) EntryIdx_47;
  _3 = _2 * 16;
  _4 = EvMemEntry_62 + _3;
  _5 = _4->EventId;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  NumValidEntries.135_6 = NumValidEntries_54;
  NumValidEntries_78 = NumValidEntries.135_6 + 1;
  # DEBUG NumValidEntries => NumValidEntries_78

  <bb 5> :
  # NumValidEntries_53 = PHI <NumValidEntries_54(3), NumValidEntries_78(4)>
  # DEBUG NumValidEntries => NumValidEntries_53
  # DEBUG BEGIN_STMT
  EntryIdx.136_7 = EntryIdx_47;
  EntryIdx_79 = EntryIdx.136_7 + 1;
  # DEBUG EntryIdx => EntryIdx_79

  <bb 6> :
  # EntryIdx_47 = PHI <EntryIdx_66(2), EntryIdx_79(5)>
  # NumValidEntries_54 = PHI <NumValidEntries_64(2), NumValidEntries_53(5)>
  # DEBUG NumValidEntries => NumValidEntries_54
  # DEBUG EntryIdx => EntryIdx_47
  # DEBUG BEGIN_STMT
  _8 = (int) OriginIdx_60(D);
  _9 = Dem_SizeEventMem[_8];
  if (EntryIdx_47 < _9)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ValidEntryIdx_67 = 0;
  # DEBUG ValidEntryIdx => ValidEntryIdx_67
  goto <bb 19>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  NextMinOccOrder_69 = 65535;
  # DEBUG NextMinOccOrder => NextMinOccOrder_69
  # DEBUG BEGIN_STMT
  EntryIdx_70 = 0;
  # DEBUG EntryIdx => EntryIdx_70
  goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _10 = (unsigned int) EntryIdx_48;
  _11 = _10 * 16;
  _12 = EvMemEntry_62 + _11;
  _13 = _12->EventId;
  if (_13 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  _14 = (unsigned int) EntryIdx_48;
  _15 = _14 * 16;
  _16 = EvMemEntry_62 + _15;
  _17 = _16->OccOrder;
  if (NextOccOrder_55 <= _17)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _18 = (unsigned int) EntryIdx_48;
  _19 = _18 * 16;
  _20 = EvMemEntry_62 + _19;
  _21 = _20->OccOrder;
  if (NextMinOccOrder_57 >= _21)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _22 = (unsigned int) EntryIdx_48;
  _23 = _22 * 16;
  _24 = EvMemEntry_62 + _23;
  NextMinOccOrder_75 = _24->OccOrder;
  # DEBUG NextMinOccOrder => NextMinOccOrder_75
  # DEBUG BEGIN_STMT
  FoundEntryIdx_76 = EntryIdx_48;
  # DEBUG FoundEntryIdx => FoundEntryIdx_76

  <bb 13> :
  # FoundEntryIdx_49 = PHI <FoundEntryIdx_50(9), FoundEntryIdx_50(10), FoundEntryIdx_50(11), FoundEntryIdx_76(12)>
  # NextMinOccOrder_56 = PHI <NextMinOccOrder_57(9), NextMinOccOrder_57(10), NextMinOccOrder_57(11), NextMinOccOrder_75(12)>
  # DEBUG NextMinOccOrder => NextMinOccOrder_56
  # DEBUG FoundEntryIdx => FoundEntryIdx_49
  # DEBUG BEGIN_STMT
  EntryIdx.137_25 = EntryIdx_48;
  EntryIdx_77 = EntryIdx.137_25 + 1;
  # DEBUG EntryIdx => EntryIdx_77

  <bb 14> :
  # EntryIdx_48 = PHI <EntryIdx_70(8), EntryIdx_77(13)>
  # FoundEntryIdx_50 = PHI <FoundEntryIdx_51(8), FoundEntryIdx_49(13)>
  # NextMinOccOrder_57 = PHI <NextMinOccOrder_69(8), NextMinOccOrder_56(13)>
  # DEBUG NextMinOccOrder => NextMinOccOrder_57
  # DEBUG FoundEntryIdx => FoundEntryIdx_50
  # DEBUG EntryIdx => EntryIdx_48
  # DEBUG BEGIN_STMT
  _26 = (int) OriginIdx_60(D);
  _27 = Dem_SizeEventMem[_26];
  if (EntryIdx_48 < _27)
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _28 = (unsigned int) FoundEntryIdx_50;
  _29 = _28 * 16;
  _30 = EvMemEntry_62 + _29;
  _31 = _30->OccOrder;
  if (NextOccOrder_55 < _31)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _32 = (unsigned int) FoundEntryIdx_50;
  _33 = _32 * 16;
  _34 = EvMemEntry_62 + _33;
  _34->OccOrder = NextOccOrder_55;
  # DEBUG BEGIN_STMT
  _35 = (unsigned int) FoundEntryIdx_50;
  _36 = _35 * 16;
  _37 = EvMemEntry_62 + _36;
  _38 = _37->EntryStatus;
  if (_38 != 3)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _39 = (unsigned int) FoundEntryIdx_50;
  _40 = _39 * 16;
  _41 = EvMemEntry_62 + _40;
  _41->EntryStatus = 2;

  <bb 18> :
  # DEBUG BEGIN_STMT
  NextOccOrder.138_42 = NextOccOrder_55;
  NextOccOrder_73 = NextOccOrder.138_42 + 1;
  # DEBUG NextOccOrder => NextOccOrder_73
  # DEBUG BEGIN_STMT
  ValidEntryIdx.139_43 = ValidEntryIdx_52;
  ValidEntryIdx_74 = ValidEntryIdx.139_43 + 1;
  # DEBUG ValidEntryIdx => ValidEntryIdx_74

  <bb 19> :
  # FoundEntryIdx_51 = PHI <FoundEntryIdx_63(7), FoundEntryIdx_50(18)>
  # ValidEntryIdx_52 = PHI <ValidEntryIdx_67(7), ValidEntryIdx_74(18)>
  # NextOccOrder_55 = PHI <NextOccOrder_65(7), NextOccOrder_73(18)>
  # DEBUG NextOccOrder => NextOccOrder_55
  # DEBUG ValidEntryIdx => ValidEntryIdx_52
  # DEBUG FoundEntryIdx => FoundEntryIdx_51
  # DEBUG BEGIN_STMT
  if (ValidEntryIdx_52 < NumValidEntries_54)
    goto <bb 8>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _44 = (short unsigned int) NumValidEntries_54;
  _45 = (int) OriginIdx_60(D);
  _46 = _44 + 65535;
  Dem_MaxOccOrder[_45] = _46;
  # DEBUG BEGIN_STMT
  return;

}


Dem_UpdateOccurrenceOrder (struct Dem_EventMemoryEntryType * UpdatedEvMemEntry)
{
  Dem_SizeEvMemEntryType EntryIdx;
  struct Dem_EventMemoryEntryType * const EvMemEntry;
  const uint8 OriginIdx;
  boolean MaxOccOrderIncrement;
  boolean OrderRearranged;
  short unsigned int _1;
  int _2;
  int _3;
  short unsigned int _4;
  unsigned int _5;
  unsigned int _6;
  struct Dem_EventMemoryEntryType * _7;
  short unsigned int _8;
  unsigned int _9;
  unsigned int _10;
  struct Dem_EventMemoryEntryType * _11;
  short unsigned int _12;
  short unsigned int _13;
  unsigned char EntryIdx.134_14;
  int _15;
  unsigned char _16;
  int _17;
  short unsigned int _18;
  short unsigned int _19;
  short unsigned int _20;
  int _21;
  short unsigned int _22;
  short unsigned int _23;
  short unsigned int _24;
  int _25;
  short unsigned int _26;
  int _27;
  short unsigned int _28;
  boolean _49;

  <bb 2> :
  # DEBUG BEGIN_STMT
  OrderRearranged_34 = 0;
  # DEBUG OrderRearranged => OrderRearranged_34
  # DEBUG BEGIN_STMT
  MaxOccOrderIncrement_35 = 1;
  # DEBUG MaxOccOrderIncrement => MaxOccOrderIncrement_35
  # DEBUG BEGIN_STMT
  _1 = UpdatedEvMemEntry_37(D)->EventId;
  OriginIdx_39 = Dem_GbiDTCOriginIdx (_1);
  # DEBUG OriginIdx => OriginIdx_39
  # DEBUG BEGIN_STMT
  _2 = (int) OriginIdx_39;
  EvMemEntry_40 = Dem_EventMem[_2];
  # DEBUG EvMemEntry => EvMemEntry_40
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = (int) OriginIdx_39;
  _4 = Dem_MaxOccOrder[_3];
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  MaxOccOrderIncrement_41 = 0;
  # DEBUG MaxOccOrderIncrement => MaxOccOrderIncrement_41
  # DEBUG BEGIN_STMT
  EntryIdx_42 = 0;
  # DEBUG EntryIdx => EntryIdx_42
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (unsigned int) EntryIdx_31;
  _6 = _5 * 16;
  _7 = EvMemEntry_40 + _6;
  _8 = _7->EventId;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _9 = (unsigned int) EntryIdx_31;
  _10 = _9 * 16;
  _11 = EvMemEntry_40 + _10;
  _12 = _11->EventId;
  _13 = UpdatedEvMemEntry_37(D)->EventId;
  if (_12 != _13)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  MaxOccOrderIncrement_43 = 1;
  # DEBUG MaxOccOrderIncrement => MaxOccOrderIncrement_43
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EntryIdx.134_14 = EntryIdx_31;
  EntryIdx_44 = EntryIdx.134_14 + 1;
  # DEBUG EntryIdx => EntryIdx_44

  <bb 8> :
  # EntryIdx_31 = PHI <EntryIdx_42(3), EntryIdx_44(7)>
  # DEBUG EntryIdx => EntryIdx_31
  # DEBUG BEGIN_STMT
  _15 = (int) OriginIdx_39;
  _16 = Dem_SizeEventMem[_15];
  if (EntryIdx_31 < _16)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # MaxOccOrderIncrement_30 = PHI <MaxOccOrderIncrement_35(2), MaxOccOrderIncrement_43(6), MaxOccOrderIncrement_41(8)>
  # DEBUG MaxOccOrderIncrement => MaxOccOrderIncrement_30
  # DEBUG BEGIN_STMT
  _17 = (int) OriginIdx_39;
  _18 = Dem_MaxOccOrder[_17];
  _19 = UpdatedEvMemEntry_37(D)->OccOrder;
  if (_18 != _19)
    goto <bb 12>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _20 = UpdatedEvMemEntry_37(D)->OccOrder;
  if (_20 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 11> :
  if (MaxOccOrderIncrement_30 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (MaxOccOrderIncrement_30 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _21 = (int) OriginIdx_39;
  _22 = Dem_MaxOccOrder[_21];
  _23 = _22;
  _24 = _23 + 1;
  Dem_MaxOccOrder[_21] = _24;

  <bb 14> :
  # DEBUG BEGIN_STMT
  _25 = (int) OriginIdx_39;
  _26 = Dem_MaxOccOrder[_25];
  UpdatedEvMemEntry_37(D)->OccOrder = _26;
  # DEBUG BEGIN_STMT
  _27 = (int) OriginIdx_39;
  _28 = Dem_MaxOccOrder[_27];
  if (_28 == 65535)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Dem_RearrangeOccurrenceOrder (OriginIdx_39);
  # DEBUG BEGIN_STMT
  OrderRearranged_48 = 1;
  # DEBUG OrderRearranged => OrderRearranged_48

  <bb 16> :
  # OrderRearranged_29 = PHI <OrderRearranged_34(10), OrderRearranged_34(11), OrderRearranged_34(14), OrderRearranged_48(15)>
  # DEBUG OrderRearranged => OrderRearranged_29
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _49 = OrderRearranged_29;
  return _49;

}


Dem_SearchForEntryToReplace (uint8 OriginIdx, Dem_EventIdType NewEventId, Dem_FFKindType FFKind, struct Dem_EventMemoryEntryType * * FoundEntry, Dem_SizeEvMemEntryType * FoundEntryIdx)
{
  boolean IsBestEventPassive;
  boolean IsCurrentEventPassive;
  const Dem_PriorityType CurrentEvtPrioVal;
  const Dem_EventIdType CurrentEventId;
  Dem_PriorityType BestPrioVal;
  const Dem_PriorityType NewEvtPrioVal;
  Dem_SizeEvMemEntryType BestEntryIdx;
  Dem_SizeEvMemEntryType EntryIdx;
  struct Dem_EventMemoryEntryType * const EvMemEntry;
  const Dem_SizeEvMemEntryType SizeEventMem;
  Dem_EventDisplacementCriterionMatchType CriterionMatch;
  boolean Result;
  int _1;
  int _2;
  unsigned int _3;
  unsigned int _4;
  struct Dem_EventMemoryEntryType * _5;
  int _6;
  unsigned char _7;
  unsigned int _8;
  unsigned int _9;
  _Bool _10;
  unsigned int _11;
  unsigned int _12;
  struct Dem_EventMemoryEntryType * _13;
  short unsigned int _14;
  unsigned int _15;
  unsigned int _16;
  struct Dem_EventMemoryEntryType * _17;
  short unsigned int _18;
  unsigned int _19;
  unsigned int _20;
  struct Dem_EventMemoryEntryType * _21;
  short unsigned int _22;
  int _23;
  unsigned char _24;
  unsigned int _25;
  unsigned int _26;
  _Bool _27;
  unsigned int _28;
  unsigned int _29;
  struct Dem_EventMemoryEntryType * _30;
  short unsigned int _31;
  unsigned int _32;
  unsigned int _33;
  struct Dem_EventMemoryEntryType * _34;
  short unsigned int _35;
  unsigned int _36;
  unsigned int _37;
  struct Dem_EventMemoryEntryType * _38;
  boolean _66;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_49 = 0;
  # DEBUG Result => Result_49
  # DEBUG BEGIN_STMT
  CriterionMatch_50 = 4;
  # DEBUG CriterionMatch => CriterionMatch_50
  # DEBUG BEGIN_STMT
  _1 = (int) OriginIdx_51(D);
  SizeEventMem_53 = Dem_SizeEventMem[_1];
  # DEBUG SizeEventMem => SizeEventMem_53
  # DEBUG BEGIN_STMT
  _2 = (int) OriginIdx_51(D);
  EvMemEntry_54 = Dem_EventMem[_2];
  # DEBUG EvMemEntry => EvMemEntry_54
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  BestEntryIdx_55 = 0;
  # DEBUG BestEntryIdx => BestEntryIdx_55
  # DEBUG BEGIN_STMT
  NewEvtPrioVal_58 = Dem_GbiPriority (NewEventId_56(D));
  # DEBUG NewEvtPrioVal => NewEvtPrioVal_58
  # DEBUG BEGIN_STMT
  BestPrioVal_59 = NewEvtPrioVal_58;
  # DEBUG BestPrioVal => BestPrioVal_59
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx_60 = 0;
  # DEBUG EntryIdx => EntryIdx_60
  goto <bb 20>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = (unsigned int) EntryIdx_42;
  _4 = _3 * 16;
  _5 = EvMemEntry_54 + _4;
  CurrentEventId_67 = _5->EventId;
  # DEBUG CurrentEventId => CurrentEventId_67
  # DEBUG BEGIN_STMT
  CurrentEvtPrioVal_69 = Dem_GbiPriority (CurrentEventId_67);
  # DEBUG CurrentEvtPrioVal => CurrentEvtPrioVal_69
  # DEBUG BEGIN_STMT
  if (CurrentEventId_67 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 4> :
  if (CurrentEvtPrioVal_69 >= BestPrioVal_46)
    goto <bb 5>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (CurrentEvtPrioVal_69 > BestPrioVal_46)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  BestPrioVal_78 = CurrentEvtPrioVal_69;
  # DEBUG BestPrioVal => BestPrioVal_78
  # DEBUG BEGIN_STMT
  BestEntryIdx_79 = EntryIdx_42;
  # DEBUG BestEntryIdx => BestEntryIdx_79
  # DEBUG BEGIN_STMT
  CriterionMatch_80 = 1;
  # DEBUG CriterionMatch => CriterionMatch_80
  goto <bb 19>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  IsCurrentEventPassive_70 = 0;
  # DEBUG IsCurrentEventPassive => IsCurrentEventPassive_70
  # DEBUG BEGIN_STMT
  IsBestEventPassive_71 = 0;
  # DEBUG IsBestEventPassive => IsBestEventPassive_71
  # DEBUG BEGIN_STMT
  _6 = (int) CurrentEventId_67;
  _7 = Dem_NvData.DTCStatusMask[_6];
  _8 = (unsigned int) _7;
  _9 = _8 & 1;
  _10 = _9 == 0;
  IsCurrentEventPassive_72 = (boolean) _10;
  # DEBUG IsCurrentEventPassive => IsCurrentEventPassive_72
  # DEBUG BEGIN_STMT
  if (CurrentEvtPrioVal_69 == NewEvtPrioVal_58)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (IsCurrentEventPassive_72 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 9> :
  if (CriterionMatch_41 > 2)
    goto <bb 12>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (CriterionMatch_41 == 2)
    goto <bb 11>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 11> :
  _11 = (unsigned int) EntryIdx_42;
  _12 = _11 * 16;
  _13 = EvMemEntry_54 + _12;
  _14 = _13->OccOrder;
  _15 = (unsigned int) BestEntryIdx_44;
  _16 = _15 * 16;
  _17 = EvMemEntry_54 + _16;
  _18 = _17->OccOrder;
  if (_14 < _18)
    goto <bb 12>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  BestEntryIdx_76 = EntryIdx_42;
  # DEBUG BestEntryIdx => BestEntryIdx_76
  # DEBUG BEGIN_STMT
  CriterionMatch_77 = 2;
  # DEBUG CriterionMatch => CriterionMatch_77
  goto <bb 19>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _19 = (unsigned int) BestEntryIdx_44;
  _20 = _19 * 16;
  _21 = EvMemEntry_54 + _20;
  _22 = _21->EventId;
  _23 = (int) _22;
  _24 = Dem_NvData.DTCStatusMask[_23];
  _25 = (unsigned int) _24;
  _26 = _25 & 1;
  _27 = _26 == 0;
  IsBestEventPassive_73 = (boolean) _27;
  # DEBUG IsBestEventPassive => IsBestEventPassive_73
  # DEBUG BEGIN_STMT
  if (IsBestEventPassive_73 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  if (IsCurrentEventPassive_72 == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  BestEntryIdx_74 = EntryIdx_42;
  # DEBUG BestEntryIdx => BestEntryIdx_74
  goto <bb 19>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (IsBestEventPassive_73 == IsCurrentEventPassive_72)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _28 = (unsigned int) EntryIdx_42;
  _29 = _28 * 16;
  _30 = EvMemEntry_54 + _29;
  _31 = _30->OccOrder;
  _32 = (unsigned int) BestEntryIdx_44;
  _33 = _32 * 16;
  _34 = EvMemEntry_54 + _33;
  _35 = _34->OccOrder;
  if (_31 < _35)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  BestEntryIdx_75 = EntryIdx_42;
  # DEBUG BestEntryIdx => BestEntryIdx_75

  <bb 19> :
  # CriterionMatch_40 = PHI <CriterionMatch_41(3), CriterionMatch_41(4), CriterionMatch_80(6), CriterionMatch_41(10), CriterionMatch_41(15), CriterionMatch_41(16), CriterionMatch_41(18), CriterionMatch_41(8), CriterionMatch_77(12), CriterionMatch_41(11), CriterionMatch_41(17)>
  # BestEntryIdx_43 = PHI <BestEntryIdx_44(3), BestEntryIdx_44(4), BestEntryIdx_79(6), BestEntryIdx_44(10), BestEntryIdx_74(15), BestEntryIdx_44(16), BestEntryIdx_75(18), BestEntryIdx_44(8), BestEntryIdx_76(12), BestEntryIdx_44(11), BestEntryIdx_44(17)>
  # BestPrioVal_45 = PHI <BestPrioVal_46(3), BestPrioVal_46(4), BestPrioVal_78(6), BestPrioVal_46(10), BestPrioVal_46(15), BestPrioVal_46(16), BestPrioVal_46(18), BestPrioVal_46(8), BestPrioVal_46(12), BestPrioVal_46(11), BestPrioVal_46(17)>
  # DEBUG BestPrioVal => BestPrioVal_45
  # DEBUG BestEntryIdx => BestEntryIdx_43
  # DEBUG CriterionMatch => CriterionMatch_40
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx_81 = EntryIdx_42 + 1;
  # DEBUG EntryIdx => EntryIdx_81

  <bb 20> :
  # CriterionMatch_41 = PHI <CriterionMatch_50(2), CriterionMatch_40(19)>
  # EntryIdx_42 = PHI <EntryIdx_60(2), EntryIdx_81(19)>
  # BestEntryIdx_44 = PHI <BestEntryIdx_55(2), BestEntryIdx_43(19)>
  # BestPrioVal_46 = PHI <BestPrioVal_59(2), BestPrioVal_45(19)>
  # DEBUG BestPrioVal => BestPrioVal_46
  # DEBUG BestEntryIdx => BestEntryIdx_44
  # DEBUG EntryIdx => EntryIdx_42
  # DEBUG CriterionMatch => CriterionMatch_41
  # DEBUG BEGIN_STMT
  if (EntryIdx_42 < SizeEventMem_53)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  if (CriterionMatch_41 != 4)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _36 = (unsigned int) BestEntryIdx_44;
  _37 = _36 * 16;
  _38 = EvMemEntry_54 + _37;
  *FoundEntry_61(D) = _38;
  # DEBUG BEGIN_STMT
  *FoundEntryIdx_63(D) = BestEntryIdx_44;
  # DEBUG BEGIN_STMT
  Result_65 = 1;
  # DEBUG Result => Result_65

  <bb 23> :
  # Result_39 = PHI <Result_49(21), Result_65(22)>
  # DEBUG Result => Result_39
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _66 = Result_39;
  return _66;

}


Dem_SearchForEmptyEntry (uint8 OriginIdx, struct Dem_EventMemoryEntryType * * FoundEntry, Dem_SizeEvMemEntryType * FoundEntryIdx)
{
  struct Dem_EventMemoryEntryType * EvMemEntry;
  Dem_SizeEvMemEntryType EntryIdx;
  const Dem_SizeEvMemEntryType SizeEventMem;
  boolean Result;
  int _1;
  int _2;
  unsigned int _3;
  unsigned int _4;
  struct Dem_EventMemoryEntryType * _5;
  short unsigned int _6;
  unsigned int _7;
  unsigned int _8;
  struct Dem_EventMemoryEntryType * _9;
  boolean _25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_13 = 0;
  # DEBUG Result => Result_13
  # DEBUG BEGIN_STMT
  _1 = (int) OriginIdx_14(D);
  SizeEventMem_16 = Dem_SizeEventMem[_1];
  # DEBUG SizeEventMem => SizeEventMem_16
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = (int) OriginIdx_14(D);
  EvMemEntry_17 = Dem_EventMem[_2];
  # DEBUG EvMemEntry => EvMemEntry_17
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx_18 = 0;
  # DEBUG EntryIdx => EntryIdx_18
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = (unsigned int) EntryIdx_11;
  _4 = _3 * 16;
  _5 = EvMemEntry_17 + _4;
  _6 = _5->EventId;
  if (_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EntryIdx_19 = EntryIdx_11 + 1;
  # DEBUG EntryIdx => EntryIdx_19

  <bb 5> :
  # EntryIdx_11 = PHI <EntryIdx_18(2), EntryIdx_19(4)>
  # DEBUG EntryIdx => EntryIdx_11
  # DEBUG BEGIN_STMT
  if (EntryIdx_11 < SizeEventMem_16)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EntryIdx_11 < SizeEventMem_16)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  *FoundEntryIdx_20(D) = EntryIdx_11;
  # DEBUG BEGIN_STMT
  _7 = (unsigned int) EntryIdx_11;
  _8 = _7 * 16;
  _9 = EvMemEntry_17 + _8;
  *FoundEntry_22(D) = _9;
  # DEBUG BEGIN_STMT
  Result_24 = 1;
  # DEBUG Result => Result_24

  <bb 8> :
  # Result_10 = PHI <Result_13(6), Result_24(7)>
  # DEBUG Result => Result_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _25 = Result_10;
  return _25;

}


Dem_ReadExternalDataElement (uint8 * DestBuffer, Dem_DataElementIdxType DataElementIndex, Dem_EventIdType EventId)
{
  const Dem_DataElementDataType DataType;
  Std_ReturnType Result;
  int _1;
  int _2;
  int _3;
  Std_ReturnType (*<T6c8>) (uint8 *) _4;
  Std_ReturnType _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_7 = 1;
  # DEBUG Result => Result_7
  # DEBUG BEGIN_STMT
  _1 = (int) DataElementIndex_8(D);
  DataType_10 = Dem_DataElement[_1].DataType;
  # DEBUG DataType => DataType_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = (int) DataType_10;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _3 = (int) DataElementIndex_8(D);
  _4 = Dem_DataElement[_3].ReadFunction.Callback;
  Result_13 = _4 (DestBuffer_11(D));
  # DEBUG Result => Result_13
  # DEBUG BEGIN_STMT

  <bb 4> :
  # Result_5 = PHI <Result_13(3), Result_7(2)>
  # DEBUG Result => Result_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = Result_5;
  return _14;

}


Dem_StoreED (Dem_EntryDataType * EDEntryData, const struct Dem_EDClassType * EDClass, boolean EntryExists, Dem_EventIdType EventId)
{
  Dem_SizeEntryDataType StopIndex;
  Dem_SizeEntryDataType StartIndex;
  Dem_SizeEntryDataType Index;
  const Dem_SizeEntryDataType DataElementSize;
  Dem_DataElementIdxType DataElementIdx;
  Dem_NumDataElementsType DataElementIndex;
  Std_ReturnType DataPresent;
  Dem_EDStartByteType EDStartByte;
  Dem_DataElementOffsetType EDDataElemOffset;
  const struct Dem_EDSegmentType * EDSegment;
  Std_ReturnType Result;
  Dem_EDSegIdxType EDSegIdx;
  Dem_EDSegIdxType SegIdx;
  const Dem_EDSegIdxType * _1;
  sizetype _2;
  const Dem_EDSegIdxType * _3;
  int _4;
  const Dem_EDStartByteType * _5;
  unsigned int _6;
  unsigned int _7;
  const Dem_EDStartByteType * _8;
  unsigned char _9;
  const Dem_DataElementIdxType * _10;
  unsigned int _11;
  unsigned int _12;
  const Dem_DataElementIdxType * _13;
  int _14;
  unsigned char _15;
  const Dem_DataElementOffsetType * _16;
  unsigned int _17;
  unsigned int _18;
  const Dem_DataElementOffsetType * _19;
  int _20;
  int _21;
  int _22;
  sizetype _23;
  Dem_EntryDataType * _24;
  sizetype _25;
  Dem_EntryDataType * _26;
  unsigned char _27;
  unsigned char _28;
  Std_ReturnType _45;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result_41 = 51;
  # DEBUG Result => Result_41
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SegIdx_42 = 0;
  # DEBUG SegIdx => SegIdx_42
  goto <bb 16>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = EDClass_44(D)->EDSegIdx;
  _2 = (sizetype) SegIdx_29;
  _3 = _1 + _2;
  EDSegIdx_46 = *_3;
  # DEBUG EDSegIdx => EDSegIdx_46
  # DEBUG BEGIN_STMT
  _4 = (int) EDSegIdx_46;
  EDSegment_47 = &Dem_EDSegment[_4];
  # DEBUG EDSegment => EDSegment_47
  # DEBUG BEGIN_STMT
  _5 = EDClass_44(D)->StartByte;
  _6 = (unsigned int) SegIdx_29;
  _7 = _6 * 2;
  _8 = _5 + _7;
  EDStartByte_48 = *_8;
  # DEBUG EDStartByte => EDStartByte_48
  # DEBUG BEGIN_STMT
  if (EntryExists_49(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _9 = EDSegment_47->Update;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  DataPresent_50 = 1;
  # DEBUG DataPresent => DataPresent_50
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DataElementIndex_51 = 0;
  # DEBUG DataElementIndex => DataElementIndex_51
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = EDSegment_47->DataElementIdx;
  _11 = (unsigned int) DataElementIndex_34;
  _12 = _11 * 2;
  _13 = _10 + _12;
  DataElementIdx_53 = *_13;
  # DEBUG DataElementIdx => DataElementIdx_53
  # DEBUG BEGIN_STMT
  _14 = (int) DataElementIdx_53;
  _15 = Dem_DataElement[_14].Size;
  DataElementSize_54 = (const Dem_SizeEntryDataType) _15;
  # DEBUG DataElementSize => DataElementSize_54
  # DEBUG BEGIN_STMT
  _16 = EDSegment_47->DataElementOffset;
  _17 = (unsigned int) DataElementIndex_34;
  _18 = _17 * 2;
  _19 = _16 + _18;
  EDDataElemOffset_55 = *_19;
  # DEBUG EDDataElemOffset => EDDataElemOffset_55
  # DEBUG BEGIN_STMT
  _20 = (int) EDStartByte_48;
  _21 = (int) EDDataElemOffset_55;
  _22 = _20 + _21;
  _23 = (sizetype) _22;
  _24 = EDEntryData_56(D) + _23;
  DataPresent_59 = Dem_ReadExternalDataElement (_24, DataElementIdx_53, EventId_57(D));
  # DEBUG DataPresent => DataPresent_59
  # DEBUG BEGIN_STMT
  if (DataPresent_59 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartIndex_60 = EDStartByte_48 + EDDataElemOffset_55;
  # DEBUG StartIndex => StartIndex_60
  # DEBUG BEGIN_STMT
  StopIndex_61 = StartIndex_60 + DataElementSize_54;
  # DEBUG StopIndex => StopIndex_61
  # DEBUG BEGIN_STMT
  Index_62 = StartIndex_60;
  # DEBUG Index => Index_62
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _25 = (sizetype) Index_35;
  _26 = EDEntryData_56(D) + _25;
  *_26 = 255;
  # DEBUG BEGIN_STMT
  Index_65 = Index_35 + 1;
  # DEBUG Index => Index_65

  <bb 9> :
  # Index_35 = PHI <Index_62(7), Index_65(8)>
  # DEBUG Index => Index_35
  # DEBUG BEGIN_STMT
  if (Index_35 < StopIndex_61)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Result_63 = 48;
  # DEBUG Result => Result_63

  <bb 11> :
  # Result_30 = PHI <Result_31(6), Result_63(10)>
  # DEBUG Result => Result_30
  # DEBUG BEGIN_STMT
  DataElementIndex_66 = DataElementIndex_34 + 1;
  # DEBUG DataElementIndex => DataElementIndex_66

  <bb 12> :
  # Result_31 = PHI <Result_33(5), Result_30(11)>
  # DataElementIndex_34 = PHI <DataElementIndex_51(5), DataElementIndex_66(11)>
  # DEBUG DataElementIndex => DataElementIndex_34
  # DEBUG Result => Result_31
  # DEBUG BEGIN_STMT
  _27 = EDSegment_47->NumEDDataElements;
  if (DataElementIndex_34 < _27)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (Result_31 != 48)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Result_52 = 50;
  # DEBUG Result => Result_52

  <bb 15> :
  # Result_32 = PHI <Result_33(4), Result_31(13), Result_52(14)>
  # DEBUG Result => Result_32
  # DEBUG BEGIN_STMT
  SegIdx_67 = SegIdx_29 + 1;
  # DEBUG SegIdx => SegIdx_67

  <bb 16> :
  # SegIdx_29 = PHI <SegIdx_42(2), SegIdx_67(15)>
  # Result_33 = PHI <Result_41(2), Result_32(15)>
  # DEBUG Result => Result_33
  # DEBUG SegIdx => SegIdx_29
  # DEBUG BEGIN_STMT
  _28 = EDClass_44(D)->NumEDSegs;
  if (SegIdx_29 < _28)
    goto <bb 3>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _45 = Result_33;
  return _45;

}


Dem_StoreOBDFreezeFrame (Dem_EventIdType EventId, Dem_SizeEvMemEntryType EventMemoryEntryIdx)
{
  Dem_SizeEntryDataType Index;
  const Dem_SizeEntryDataType DataElementSize;
  const Dem_DataElementIdxType PidElementIdx;
  const Dem_SizeEntryDataType ObdFFDataIdx;
  const struct Dem_PidClassType * PidClass;
  uint8_least PidDataElementIterator;
  boolean DataOfOBDFFInvalid;
  Std_ReturnType ReadFuncStatus;
  Dem_SizeEntryDataType StartByte;
  uint8_least PidIterator;
  Dem_EntryDataType * const OBDFFStoredData;
  int _1;
  const Dem_OBDFFDataElementOffsetType * _2;
  const Dem_OBDFFDataElementOffsetType * _3;
  unsigned char _4;
  short unsigned int _5;
  const Dem_OBDFFDataElementIdxType * _6;
  const Dem_OBDFFDataElementIdxType * _7;
  unsigned char _8;
  int _9;
  unsigned char _10;
  sizetype _11;
  Dem_EntryDataType * _12;
  int _13;
  int _14;
  int _15;
  sizetype _16;
  Dem_EntryDataType * _17;
  short unsigned int Index.109_18;
  unsigned char _19;
  long unsigned int _20;
  unsigned char _21;
  short unsigned int _22;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) EventMemoryEntryIdx_35(D);
  OBDFFStoredData_36 = &Dem_EntryOBDFF[_1].OBDFFData;
  # DEBUG OBDFFStoredData => OBDFFStoredData_36
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartByte_37 = 0;
  # DEBUG StartByte => StartByte_37
  # DEBUG BEGIN_STMT
  ReadFuncStatus_38 = 1;
  # DEBUG ReadFuncStatus => ReadFuncStatus_38
  # DEBUG BEGIN_STMT
  DataOfOBDFFInvalid_39 = 0;
  # DEBUG DataOfOBDFFInvalid => DataOfOBDFFInvalid_39
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PidIterator_40 = 0;
  # DEBUG PidIterator => PidIterator_40
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PidClass_43 = &Dem_PidClass[PidIterator_23];
  # DEBUG PidClass => PidClass_43
  # DEBUG BEGIN_STMT
  PidDataElementIterator_44 = 0;
  # DEBUG PidDataElementIterator => PidDataElementIterator_44
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = PidClass_43->ObdFFPidDataElementOffset;
  _3 = _2 + PidDataElementIterator_28;
  _4 = *_3;
  _5 = (short unsigned int) _4;
  ObdFFDataIdx_47 = StartByte_24 + _5;
  # DEBUG ObdFFDataIdx => ObdFFDataIdx_47
  # DEBUG BEGIN_STMT
  _6 = PidClass_43->DemPidDataElementIdx;
  _7 = _6 + PidDataElementIterator_28;
  _8 = *_7;
  PidElementIdx_48 = (const Dem_DataElementIdxType) _8;
  # DEBUG PidElementIdx => PidElementIdx_48
  # DEBUG BEGIN_STMT
  _9 = (int) PidElementIdx_48;
  _10 = Dem_DataElement[_9].Size;
  DataElementSize_49 = (const Dem_SizeEntryDataType) _10;
  # DEBUG DataElementSize => DataElementSize_49
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _11 = (sizetype) ObdFFDataIdx_47;
  _12 = OBDFFStoredData_36 + _11;
  ReadFuncStatus_53 = Dem_ReadExternalDataElement (_12, PidElementIdx_48, EventId_51(D));
  # DEBUG ReadFuncStatus => ReadFuncStatus_53
  # DEBUG BEGIN_STMT
  if (ReadFuncStatus_53 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DataOfOBDFFInvalid_54 = 1;
  # DEBUG DataOfOBDFFInvalid => DataOfOBDFFInvalid_54
  # DEBUG BEGIN_STMT
  Index_55 = 0;
  # DEBUG Index => Index_55
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _13 = (int) ObdFFDataIdx_47;
  _14 = (int) Index_29;
  _15 = _13 + _14;
  _16 = (sizetype) _15;
  _17 = OBDFFStoredData_36 + _16;
  *_17 = 255;
  # DEBUG BEGIN_STMT
  Index.109_18 = Index_29;
  Index_57 = Index.109_18 + 1;
  # DEBUG Index => Index_57

  <bb 7> :
  # Index_29 = PHI <Index_55(5), Index_57(6)>
  # DEBUG Index => Index_29
  # DEBUG BEGIN_STMT
  if (Index_29 < DataElementSize_49)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DataOfOBDFFInvalid_25 = PHI <DataOfOBDFFInvalid_26(4), DataOfOBDFFInvalid_54(7)>
  # DEBUG DataOfOBDFFInvalid => DataOfOBDFFInvalid_25
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  PidDataElementIterator_59 = PidDataElementIterator_28 + 1;
  # DEBUG PidDataElementIterator => PidDataElementIterator_59

  <bb 9> :
  # DataOfOBDFFInvalid_26 = PHI <DataOfOBDFFInvalid_27(3), DataOfOBDFFInvalid_25(8)>
  # PidDataElementIterator_28 = PHI <PidDataElementIterator_44(3), PidDataElementIterator_59(8)>
  # DEBUG PidDataElementIterator => PidDataElementIterator_28
  # DEBUG DataOfOBDFFInvalid => DataOfOBDFFInvalid_26
  # DEBUG BEGIN_STMT
  _19 = PidClass_43->NumSegDataElements;
  _20 = (long unsigned int) _19;
  if (PidDataElementIterator_28 < _20)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _21 = PidClass_43->Size;
  _22 = (short unsigned int) _21;
  StartByte_45 = StartByte_24 + _22;
  # DEBUG StartByte => StartByte_45
  # DEBUG BEGIN_STMT
  PidIterator_46 = PidIterator_23 + 1;
  # DEBUG PidIterator => PidIterator_46

  <bb 11> :
  # PidIterator_23 = PHI <PidIterator_40(2), PidIterator_46(10)>
  # StartByte_24 = PHI <StartByte_37(2), StartByte_45(10)>
  # DataOfOBDFFInvalid_27 = PHI <DataOfOBDFFInvalid_39(2), DataOfOBDFFInvalid_26(10)>
  # DEBUG DataOfOBDFFInvalid => DataOfOBDFFInvalid_27
  # DEBUG StartByte => StartByte_24
  # DEBUG PidIterator => PidIterator_23
  # DEBUG BEGIN_STMT
  if (PidIterator_23 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (DataOfOBDFFInvalid_27 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 255, 48);

  <bb 14> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_StoreFF (Dem_FFKindType FFKind, const struct Dem_FFClassType * const IndividPartFFClass, Dem_EntryDataType * const FFEntryData, Dem_EventIdType EventId)
{
  Dem_SizeEntryDataType Index;
  Dem_SizeEntryDataType StopIndex;
  const Dem_SizeEntryDataType StartIndex;
  Dem_SizeEntryDataType DataElementSize;
  Std_ReturnType DataPresent;
  const Dem_FFSegIdxType FFSegIdx;
  const struct Dem_FFClassType * FFPartClass[1];
  uint8_least FFPartIdx;
  Dem_SizeEntryDataType FFStartByte;
  Dem_DataElementIdxType DataElementIdx;
  Dem_NumDataElementsType DataElementIndex;
  const struct Dem_FFSegmentType * FFSegment;
  Std_ReturnType Result;
  Dem_NumFFSegsType SegIdx;
  const struct Dem_FFClassType * _1;
  const Dem_FFSegIdxType * _2;
  unsigned int _3;
  unsigned int _4;
  const Dem_FFSegIdxType * _5;
  int _6;
  const Dem_DataElementIdxType * _7;
  unsigned int _8;
  unsigned int _9;
  const Dem_DataElementIdxType * _10;
  int _11;
  unsigned char _12;
  sizetype _13;
  Dem_EntryDataType * _14;
  sizetype _15;
  Dem_EntryDataType * _16;
  unsigned char _17;
  const struct Dem_FFClassType * _18;
  unsigned char _19;
  Std_ReturnType _45;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result_39 = 51;
  # DEBUG Result => Result_39
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFStartByte_40 = 0;
  # DEBUG FFStartByte => FFStartByte_40
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFPartClass[0] = IndividPartFFClass_42(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFPartIdx_44 = 0;
  # DEBUG FFPartIdx => FFPartIdx_44
  goto <bb 18>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SegIdx_47 = 0;
  # DEBUG SegIdx => SegIdx_47
  goto <bb 16>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = FFPartClass[FFPartIdx_31];
  _2 = _1->FFSegIdx;
  _3 = (unsigned int) SegIdx_20;
  _4 = _3 * 2;
  _5 = _2 + _4;
  FFSegIdx_49 = *_5;
  # DEBUG FFSegIdx => FFSegIdx_49
  # DEBUG BEGIN_STMT
  if (FFSegIdx_49 != 65535)
    goto <bb 5>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  DataPresent_50 = 1;
  # DEBUG DataPresent => DataPresent_50
  # DEBUG BEGIN_STMT
  _6 = (int) FFSegIdx_49;
  FFSegment_51 = &Dem_FFSegment[_6];
  # DEBUG FFSegment => FFSegment_51
  # DEBUG BEGIN_STMT
  DataElementIndex_52 = 0;
  # DEBUG DataElementIndex => DataElementIndex_52
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  DataElementSize_54 = 0;
  # DEBUG DataElementSize => DataElementSize_54
  # DEBUG BEGIN_STMT
  _7 = FFSegment_51->DataElementIdx;
  _8 = (unsigned int) DataElementIndex_26;
  _9 = _8 * 2;
  _10 = _7 + _9;
  DataElementIdx_55 = *_10;
  # DEBUG DataElementIdx => DataElementIdx_55
  # DEBUG BEGIN_STMT
  _11 = (int) DataElementIdx_55;
  _12 = Dem_DataElement[_11].Size;
  DataElementSize_56 = (Dem_SizeEntryDataType) _12;
  # DEBUG DataElementSize => DataElementSize_56
  # DEBUG BEGIN_STMT
  _13 = (sizetype) FFStartByte_27;
  _14 = FFEntryData_57(D) + _13;
  DataPresent_60 = Dem_ReadExternalDataElement (_14, DataElementIdx_55, EventId_58(D));
  # DEBUG DataPresent => DataPresent_60
  # DEBUG BEGIN_STMT
  if (DataPresent_60 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  StartIndex_61 = FFStartByte_27;
  # DEBUG StartIndex => StartIndex_61
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StopIndex_62 = StartIndex_61 + DataElementSize_56;
  # DEBUG StopIndex => StopIndex_62
  # DEBUG BEGIN_STMT
  Index_63 = StartIndex_61;
  # DEBUG Index => Index_63
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _15 = (sizetype) Index_32;
  _16 = FFEntryData_57(D) + _15;
  *_16 = 255;
  # DEBUG BEGIN_STMT
  Index_66 = Index_32 + 1;
  # DEBUG Index => Index_66

  <bb 9> :
  # Index_32 = PHI <Index_63(7), Index_66(8)>
  # DEBUG Index => Index_32
  # DEBUG BEGIN_STMT
  if (Index_32 < StopIndex_62)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Result_64 = 48;
  # DEBUG Result => Result_64

  <bb 11> :
  # Result_21 = PHI <Result_22(6), Result_64(10)>
  # DEBUG Result => Result_21
  # DEBUG BEGIN_STMT
  FFStartByte_67 = FFStartByte_27 + DataElementSize_56;
  # DEBUG FFStartByte => FFStartByte_67
  # DEBUG BEGIN_STMT
  DataElementIndex_68 = DataElementIndex_26 + 1;
  # DEBUG DataElementIndex => DataElementIndex_68

  <bb 12> :
  # Result_22 = PHI <Result_24(5), Result_21(11)>
  # DataElementIndex_26 = PHI <DataElementIndex_52(5), DataElementIndex_68(11)>
  # FFStartByte_27 = PHI <FFStartByte_29(5), FFStartByte_67(11)>
  # DEBUG FFStartByte => FFStartByte_27
  # DEBUG DataElementIndex => DataElementIndex_26
  # DEBUG Result => Result_22
  # DEBUG BEGIN_STMT
  _17 = FFSegment_51->NumFFDataElements;
  if (DataElementIndex_26 < _17)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (Result_22 != 48)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Result_53 = 50;
  # DEBUG Result => Result_53

  <bb 15> :
  # Result_23 = PHI <Result_24(4), Result_22(13), Result_53(14)>
  # FFStartByte_28 = PHI <FFStartByte_29(4), FFStartByte_27(13), FFStartByte_27(14)>
  # DEBUG FFStartByte => FFStartByte_28
  # DEBUG Result => Result_23
  # DEBUG BEGIN_STMT
  SegIdx_69 = SegIdx_20 + 1;
  # DEBUG SegIdx => SegIdx_69

  <bb 16> :
  # SegIdx_20 = PHI <SegIdx_47(3), SegIdx_69(15)>
  # Result_24 = PHI <Result_25(3), Result_23(15)>
  # FFStartByte_29 = PHI <FFStartByte_30(3), FFStartByte_28(15)>
  # DEBUG FFStartByte => FFStartByte_29
  # DEBUG Result => Result_24
  # DEBUG SegIdx => SegIdx_20
  # DEBUG BEGIN_STMT
  _18 = FFPartClass[FFPartIdx_31];
  _19 = _18->NumFFSegs;
  if (SegIdx_20 < _19)
    goto <bb 4>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FFPartIdx_48 = FFPartIdx_31 + 1;
  # DEBUG FFPartIdx => FFPartIdx_48

  <bb 18> :
  # Result_25 = PHI <Result_39(2), Result_24(17)>
  # FFStartByte_30 = PHI <FFStartByte_40(2), FFStartByte_29(17)>
  # FFPartIdx_31 = PHI <FFPartIdx_44(2), FFPartIdx_48(17)>
  # DEBUG FFPartIdx => FFPartIdx_31
  # DEBUG FFStartByte => FFStartByte_30
  # DEBUG Result => Result_25
  # DEBUG BEGIN_STMT
  if (FFPartIdx_31 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _45 = Result_25;
  FFPartClass ={v} {CLOBBER};
  return _45;

}


Dem_ProcessEventEntryEData (Dem_EventIdType EventId, const struct Dem_EventMemoryEntryType * EvMemEntryPtr, Dem_EventEntryAllocResultType EventEntryAllocResult)
{
  Dem_SizeEDType SizeOfED;
  Dem_SizeEntryDataType Index;
  Dem_EntryDataType * const EDEntryData;
  boolean EntryExists;
  const struct Dem_EDClassType * const EDClass;
  Std_ReturnType Result;
  unsigned char _1;
  int _2;
  unsigned char _3;
  unsigned int _4;
  sizetype _5;
  Dem_EntryDataType * _6;
  Std_ReturnType _31;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_13 = 51;
  # DEBUG Result => Result_13
  # DEBUG BEGIN_STMT
  _1 = Dem_GbiEDClassIdx (EventId_15(D));
  _2 = (int) _1;
  EDClass_17 = &Dem_EDClass[_2];
  # DEBUG EDClass => EDClass_17
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = EDClass_17->NumEDSegs;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  EntryExists_18 = 0;
  # DEBUG EntryExists => EntryExists_18
  # DEBUG BEGIN_STMT
  EDEntryData_21 = Dem_EDEntryData (EvMemEntryPtr_19(D));
  # DEBUG EDEntryData => EDEntryData_21
  # DEBUG BEGIN_STMT
  _4 = EventEntryAllocResult_22(D) + 4294967295;
  if (_4 <= 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SizeOfED_25 = Dem_SizeOfED (EDClass_17);
  # DEBUG SizeOfED => SizeOfED_25
  # DEBUG BEGIN_STMT
  Index_26 = 0;
  # DEBUG Index => Index_26
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = (sizetype) Index_9;
  _6 = EDEntryData_21 + _5;
  *_6 = 0;
  # DEBUG BEGIN_STMT
  Index_28 = Index_9 + 1;
  # DEBUG Index => Index_28

  <bb 6> :
  # Index_9 = PHI <Index_26(4), Index_28(5)>
  # DEBUG Index => Index_9
  # DEBUG BEGIN_STMT
  if (Index_9 < SizeOfED_25)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EntryExists_23 = 1;
  # DEBUG EntryExists => EntryExists_23

  <bb 8> :
  # EntryExists_8 = PHI <EntryExists_18(6), EntryExists_23(7)>
  # DEBUG EntryExists => EntryExists_8
  # DEBUG BEGIN_STMT
  Result_30 = Dem_StoreED (EDEntryData_21, EDClass_17, EntryExists_8, EventId_15(D));
  # DEBUG Result => Result_30

  <bb 9> :
  # Result_7 = PHI <Result_13(2), Result_30(8)>
  # DEBUG Result => Result_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _31 = Result_7;
  return _31;

}


Dem_ProcessEventEntryFFData (Dem_EventIdType EventId, struct Dem_EventMemoryEntryType * EvMemEntryPtr)
{
  Dem_EntryDataType * const FFEntryData;
  const Dem_FFIdxType FFIndex;
  const struct Dem_FFClassType * const FFClass;
  const Dem_FFIdxType MaxNumFF;
  Dem_FFClassIdxType IndividPartFFClassIdx;
  boolean ProcessFFStorage;
  Std_ReturnType Result;
  int _1;
  unsigned char _2;
  unsigned char _3;
  unsigned char _4;
  Std_ReturnType _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_8 = 51;
  # DEBUG Result => Result_8
  # DEBUG BEGIN_STMT
  ProcessFFStorage_9 = 1;
  # DEBUG ProcessFFStorage => ProcessFFStorage_9
  # DEBUG BEGIN_STMT
  IndividPartFFClassIdx_13 = Dem_GbiFFClassIdx (EventId_11(D));
  # DEBUG IndividPartFFClassIdx => IndividPartFFClassIdx_13
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (IndividPartFFClassIdx_13 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ProcessFFStorage_14 = 0;
  # DEBUG ProcessFFStorage => ProcessFFStorage_14

  <bb 4> :
  # ProcessFFStorage_6 = PHI <ProcessFFStorage_9(2), ProcessFFStorage_14(3)>
  # DEBUG ProcessFFStorage => ProcessFFStorage_6
  # DEBUG BEGIN_STMT
  if (ProcessFFStorage_6 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  MaxNumFF_16 = Dem_GbiMaxNumFFRecs (EventId_11(D));
  # DEBUG MaxNumFF => MaxNumFF_16
  # DEBUG BEGIN_STMT
  _1 = (int) IndividPartFFClassIdx_13;
  FFClass_17 = &Dem_FFClass[_1];
  # DEBUG FFClass => FFClass_17
  # DEBUG BEGIN_STMT
  if (MaxNumFF_16 > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _2 = EvMemEntryPtr_18(D)->OccCtr;
  if (_2 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _3 = EvMemEntryPtr_18(D)->OccCtr;
  _4 = MIN_EXPR <MaxNumFF_16, _3>;
  FFIndex_19 = _4 + 255;
  # DEBUG FFIndex => FFIndex_19
  # DEBUG BEGIN_STMT
  FFEntryData_21 = Dem_FFEntryData (EvMemEntryPtr_18(D), FFClass_17, FFIndex_19);
  # DEBUG FFEntryData => FFEntryData_21
  # DEBUG BEGIN_STMT
  Result_23 = Dem_StoreFF (2, FFClass_17, FFEntryData_21, EventId_11(D));
  # DEBUG Result => Result_23

  <bb 8> :
  # Result_5 = PHI <Result_8(4), Result_8(6), Result_23(7)>
  # DEBUG Result => Result_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _24 = Result_5;
  return _24;

}


Dem_ReplaceEventEntry (Dem_EventIdType EventId, uint8 OriginIdx, struct Dem_EventMemoryEntryType * * EvMemEntryPtr, Dem_SizeEvMemEntryType * EvMemIdxPtr, Dem_EventIdType * ReplacedEventIdPtr, struct Dem_EventStatusChangedMsgType * EventStatusChangedMsgPtr)
{
  uint8 EventStatusClearMask;
  Dem_EventIdType ReplacedEventId;
  boolean ReplaceableEntryFound;
  Dem_EventEntryAllocResultType AllocationResult;
  struct Dem_EventMemoryEntryType * _1;
  short unsigned int Dem_EvIdOfLockedMemoryEntry.133_2;
  struct Dem_EventMemoryEntryType * _3;
  int _4;
  unsigned char _5;
  unsigned char _6;
  int _7;
  unsigned char _8;
  unsigned char _9;
  int _10;
  unsigned int _11;
  unsigned char _12;
  unsigned char _13;
  long unsigned int _14;
  Dem_EventEntryAllocResultType _36;

  <bb 2> :
  # DEBUG BEGIN_STMT
  AllocationResult_18 = 0;
  # DEBUG AllocationResult => AllocationResult_18
  # DEBUG BEGIN_STMT
  ReplaceableEntryFound_19 = 0;
  # DEBUG ReplaceableEntryFound => ReplaceableEntryFound_19
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReplaceableEntryFound_26 = Dem_SearchForEntryToReplace (OriginIdx_21(D), EventId_22(D), 2, EvMemEntryPtr_23(D), EvMemIdxPtr_24(D));
  # DEBUG ReplaceableEntryFound => ReplaceableEntryFound_26
  # DEBUG BEGIN_STMT
  if (ReplaceableEntryFound_26 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = *EvMemEntryPtr_23(D);
  ReplacedEventId_27 = _1->EventId;
  # DEBUG ReplacedEventId => ReplacedEventId_27
  # DEBUG BEGIN_STMT
  Dem_EvIdOfLockedMemoryEntry.133_2 = Dem_EvIdOfLockedMemoryEntry;
  if (ReplacedEventId_27 != Dem_EvIdOfLockedMemoryEntry.133_2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EventStatusClearMask_28 = 0;
  # DEBUG EventStatusClearMask => EventStatusClearMask_28
  # DEBUG BEGIN_STMT
  _3 = *EvMemEntryPtr_23(D);
  Dem_ClearEventEntry (_3);
  # DEBUG BEGIN_STMT
  EventStatusClearMask_30 = EventStatusClearMask_28 | 8;
  # DEBUG EventStatusClearMask => EventStatusClearMask_30
  # DEBUG BEGIN_STMT
  _4 = (int) ReplacedEventId_27;
  _5 = Dem_NvData.DTCStatusMask[_4];
  _6 = ~EventStatusClearMask_30;
  _7 = (int) ReplacedEventId_27;
  _8 = _5 & _6;
  Dem_NvData.DTCStatusMask[_7] = _8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *ReplacedEventIdPtr_32(D) = ReplacedEventId_27;
  # DEBUG BEGIN_STMT
  AllocationResult_34 = 2;
  # DEBUG AllocationResult => AllocationResult_34

  <bb 5> :
  # AllocationResult_15 = PHI <AllocationResult_18(2), AllocationResult_18(3), AllocationResult_34(4)>
  # DEBUG AllocationResult => AllocationResult_15
  # DEBUG BEGIN_STMT
  _9 = Dem_NvData.EvMemOvfIndFlags;
  _10 = (int) OriginIdx_21(D);
  _11 = 1 << _10;
  _12 = (unsigned char) _11;
  _13 = _9 & _12;
  if (_13 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = (long unsigned int) OriginIdx_21(D);
  TS_AtomicSetBit_8 (&Dem_NvData.EvMemOvfIndFlags, _14);

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _36 = AllocationResult_15;
  return _36;

}


Dem_FindOrAllocateEventEntry (Dem_EventIdType EventId, Dem_EventStatusType EventStatus, struct Dem_EventMemoryEntryType * * EvMemEntryPtr, Dem_SizeEvMemEntryType * EvMemIdxPtr, Dem_EventIdType * ReplacedEventIdPtr, struct Dem_EventStatusChangedMsgType * EventStatusChangedMsgPtr)
{
  const Dem_OperationCycleIdType EventOpCycleIdx;
  const Dem_OperationCycleIdType EventFailureCycleIdx;
  const Dem_SizeEntryDataType width;
  const uint16 EventFailureClassIdx;
  const uint8 OriginIdx;
  Dem_EventEntryAllocResultType AllocationResult;
  unsigned char _1;
  unsigned char _2;
  struct Dem_EventMemoryEntryType * _3;
  struct Dem_EventMemoryEntryType * _4;
  int _5;
  unsigned char _6;
  struct Dem_EventMemoryEntryType * _7;
  struct Dem_EventMemoryEntryType * _8;
  struct Dem_EventMemoryEntryType * _9;
  int _10;
  Dem_SizeEntryDataType * _11;
  struct Dem_EventMemoryEntryType * _12;
  short unsigned int _13;
  int _14;
  Dem_SizeEntryDataType * _15;
  short unsigned int _16;
  int _17;
  Dem_SizeEntryDataType * _18;
  short unsigned int _19;
  short unsigned int Dem_EvIdOfLockedMemoryEntry.132_20;
  Dem_EventEntryAllocResultType _58;

  <bb 2> :
  # DEBUG BEGIN_STMT
  AllocationResult_26 = 0;
  # DEBUG AllocationResult => AllocationResult_26
  # DEBUG BEGIN_STMT
  OriginIdx_30 = Dem_GbiDTCOriginIdx (EventId_28(D));
  # DEBUG OriginIdx => OriginIdx_30
  # DEBUG BEGIN_STMT
  EventFailureClassIdx_32 = Dem_GbiEventFailureClassIdx (EventId_28(D));
  # DEBUG EventFailureClassIdx => EventFailureClassIdx_32
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Dem_SearchForEntry (EventId_28(D), EvMemEntryPtr_33(D), EvMemIdxPtr_34(D));
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Dem_SearchForEmptyEntry (OriginIdx_30, EvMemEntryPtr_33(D), EvMemIdxPtr_34(D));
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  AllocationResult_43 = Dem_ReplaceEventEntry (EventId_28(D), OriginIdx_30, EvMemEntryPtr_33(D), EvMemIdxPtr_34(D), ReplacedEventIdPtr_40(D), EventStatusChangedMsgPtr_41(D));
  # DEBUG AllocationResult => AllocationResult_43
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  AllocationResult_39 = 1;
  # DEBUG AllocationResult => AllocationResult_39

  <bb 6> :
  # AllocationResult_21 = PHI <AllocationResult_43(4), AllocationResult_39(5)>
  # DEBUG AllocationResult => AllocationResult_21
  # DEBUG BEGIN_STMT
  if (AllocationResult_21 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  width_45 = Dem_EvMemEntrySize (EventId_28(D), 1);
  # DEBUG width => width_45
  # DEBUG BEGIN_STMT
  _3 = *EvMemEntryPtr_33(D);
  _3->EventId = EventId_28(D);
  # DEBUG BEGIN_STMT
  _4 = *EvMemEntryPtr_33(D);
  _4->OccCtr = 0;
  # DEBUG BEGIN_STMT
  Dem_SetEvEntryExists (EventId_28(D), 1);
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx_32 != 1)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  EventFailureCycleIdx_51 = Dem_GbiEventFailureCycleIdx (EventId_28(D), EventFailureClassIdx_32);
  # DEBUG EventFailureCycleIdx => EventFailureCycleIdx_51
  # DEBUG BEGIN_STMT
  EventOpCycleIdx_53 = Dem_GbiOpCycleIdx (EventId_28(D));
  # DEBUG EventOpCycleIdx => EventOpCycleIdx_53
  # DEBUG BEGIN_STMT
  if (EventFailureCycleIdx_51 != EventOpCycleIdx_53)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _5 = (int) EventFailureCycleIdx_51;
  _6 = Dem_OpCycleState[_5];
  if (_6 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _7 = *EvMemEntryPtr_33(D);
  _7->EventFailureCycleCounter = 0;
  goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _8 = *EvMemEntryPtr_33(D);
  _8->EventFailureCycleCounter = 1;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _9 = *EvMemEntryPtr_33(D);
  _9->EventFailureCycleCounter = 0;

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (width_45 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _10 = (int) OriginIdx_30;
  _11 = Dem_EntryDataFreePos[_10];
  _12 = *EvMemEntryPtr_33(D);
  _13 = *_11;
  _12->EntryDataPos = _13;
  # DEBUG BEGIN_STMT
  _14 = (int) OriginIdx_30;
  _15 = Dem_EntryDataFreePos[_14];
  _16 = *_15;
  _17 = (int) OriginIdx_30;
  _18 = Dem_EntryDataFreePos[_17];
  _19 = width_45 + _16;
  *_18 = _19;
  goto <bb 18>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Dem_EvIdOfLockedMemoryEntry.132_20 = Dem_EvIdOfLockedMemoryEntry;
  if (EventId_28(D) == Dem_EvIdOfLockedMemoryEntry.132_20)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  AllocationResult_37 = 0;
  # DEBUG AllocationResult => AllocationResult_37
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  AllocationResult_36 = 3;
  # DEBUG AllocationResult => AllocationResult_36

  <bb 18> :
  # AllocationResult_22 = PHI <AllocationResult_21(13), AllocationResult_37(16), AllocationResult_36(17), AllocationResult_21(6), AllocationResult_21(14)>
  # DEBUG AllocationResult => AllocationResult_22
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _58 = AllocationResult_22;
  return _58;

}


Dem_UpdateEventIdOccurKinds (Dem_EventIdType EventId, Dem_DTCRequestType FirstOccurKind, Dem_DTCRequestType MostRecentOccurKind)
{
  Dem_EventIdType StoredFirstEventId;
  short unsigned int _1;
  long unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  long unsigned int _5;
  unsigned int _6;
  unsigned int _7;
  unsigned int _8;
  unsigned int _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Dem_GbiDTCOrigin (EventId_15(D));
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GetVisibleUdsDTC (EventId_15(D));
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = (unsigned int) FirstOccurKind_18(D);
  _4 = _3 + 4294967295;
  StoredFirstEventId_19 = Dem_NvData.OccurKindEventId[_4];
  # DEBUG StoredFirstEventId => StoredFirstEventId_19
  # DEBUG BEGIN_STMT
  if (StoredFirstEventId_19 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = Dem_GetVisibleUdsDTC (StoredFirstEventId_19);
  if (_5 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  StoredFirstEventId_21 = 0;
  # DEBUG StoredFirstEventId => StoredFirstEventId_21

  <bb 7> :
  # StoredFirstEventId_10 = PHI <StoredFirstEventId_19(4), StoredFirstEventId_19(5), StoredFirstEventId_21(6)>
  # DEBUG StoredFirstEventId => StoredFirstEventId_10
  # DEBUG BEGIN_STMT
  if (StoredFirstEventId_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _6 = (unsigned int) FirstOccurKind_18(D);
  _7 = _6 + 4294967295;
  Dem_NvData.OccurKindEventId[_7] = EventId_15(D);

  <bb 9> :
  # DEBUG BEGIN_STMT
  _8 = (unsigned int) MostRecentOccurKind_23(D);
  _9 = _8 + 4294967295;
  Dem_NvData.OccurKindEventId[_9] = EventId_15(D);

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessEventStatusUpdate (Dem_EventIdType EventId, Dem_EventStatusType EventStatus, boolean FirstFailed, Dem_ProcessEventJobMaskType Jobs, struct Dem_EventNotificationDataType * Notification)
{
  const Dem_ProcessEventJobMaskType RelevantJobs;
  boolean EventWIRUpdate;
  unsigned char _1;
  unsigned int _2;
  unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RelevantJobs_5 = 3;
  # DEBUG RelevantJobs => RelevantJobs_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Jobs_6(D) & 3;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (unsigned int) Jobs_6(D);
  _3 = _2 & 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EventWIRUpdate_12 = Dem_CheckForEventWIRUpdate (EventId_8(D), EventStatus_9(D), FirstFailed_10(D));
  # DEBUG EventWIRUpdate => EventWIRUpdate_12
  # DEBUG BEGIN_STMT
  Dem_UpdateEventStatusOnQualification (EventId_8(D), EventStatus_9(D), EventWIRUpdate_12, Notification_13(D));

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessEventEntry (struct Dem_EventInfoType EventInfo, Dem_EventStatusType EventStatus, struct Dem_EventNotificationDataType * Notification)
{
  const uint16 EventFailureClassIdx;
  boolean NvMForceWrite;
  Std_ReturnType ProcessEDAndFFResult;
  Dem_EventEntryAllocResultType EventEntryAllocResult;
  Dem_EventIdType ReplacedEventId;
  Dem_EventIdType EventId;
  Dem_SizeEvMemEntryType EvMemEntryIdx;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr;
  Std_ReturnType Result;
  struct Dem_EventStatusChangedMsgType * _1;
  unsigned char _2;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr.120_3;
  Dem_EntryDataType * _4;
  unsigned char _5;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr.121_6;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr.122_7;
  unsigned char _8;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr.123_9;
  unsigned char _10;
  unsigned char _11;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr.124_12;
  unsigned char _13;
  unsigned int _14;
  unsigned char EvMemEntryIdx.125_15;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr.126_16;
  short unsigned int _17;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr.127_18;
  unsigned char _19;
  int _20;
  unsigned char _21;
  unsigned char _22;
  unsigned char _23;
  int _24;
  unsigned char _25;
  int _26;
  unsigned char _27;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr.128_28;
  short unsigned int ReplacedEventId.129_29;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr.130_30;
  unsigned char EvMemEntryIdx.131_31;
  Std_ReturnType _71;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_40 = 0;
  # DEBUG Result => Result_40
  # DEBUG BEGIN_STMT
  EvMemEntryPtr = 0B;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EventId_43 = EventInfo.EventId;
  # DEBUG EventId => EventId_43
  # DEBUG BEGIN_STMT
  ReplacedEventId = EventId_43;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = &Notification_45(D)->ReplacedEventMsg;
  EventEntryAllocResult_48 = Dem_FindOrAllocateEventEntry (EventId_43, EventStatus_46(D), &EvMemEntryPtr, &EvMemEntryIdx, &ReplacedEventId, _1);
  # DEBUG EventEntryAllocResult => EventEntryAllocResult_48
  # DEBUG BEGIN_STMT
  if (EventEntryAllocResult_48 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NvMForceWrite_49 = 0;
  # DEBUG NvMForceWrite => NvMForceWrite_49
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiNumAgingCycles (EventId_43);
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.120_3 = EvMemEntryPtr;
  _4 = Dem_IntValEntryData (EvMemEntryPtr.120_3);
  _5 = Dem_GbiNumAgingCycles (EventId_43);
  *_4 = _5;

  <bb 5> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.121_6 = EvMemEntryPtr;
  ProcessEDAndFFResult_55 = Dem_ProcessEventEntryEData (EventId_43, EvMemEntryPtr.121_6, EventEntryAllocResult_48);
  # DEBUG ProcessEDAndFFResult => ProcessEDAndFFResult_55
  # DEBUG BEGIN_STMT
  if (ProcessEDAndFFResult_55 == 48)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Result_56 = 48;
  # DEBUG Result => Result_56

  <bb 7> :
  # Result_32 = PHI <Result_40(5), Result_56(6)>
  # DEBUG Result => Result_32
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.122_7 = EvMemEntryPtr;
  _8 = EvMemEntryPtr.122_7->OccCtr;
  if (_8 != 255)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.123_9 = EvMemEntryPtr;
  _10 = EvMemEntryPtr.123_9->OccCtr;
  _11 = _10 + 1;
  EvMemEntryPtr.123_9->OccCtr = _11;

  <bb 9> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.124_12 = EvMemEntryPtr;
  ProcessEDAndFFResult_59 = Dem_ProcessEventEntryFFData (EventId_43, EvMemEntryPtr.124_12);
  # DEBUG ProcessEDAndFFResult => ProcessEDAndFFResult_59
  # DEBUG BEGIN_STMT
  if (ProcessEDAndFFResult_59 == 48)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Result_60 = 48;
  # DEBUG Result => Result_60

  <bb 11> :
  # Result_33 = PHI <Result_32(9), Result_60(10)>
  # DEBUG Result => Result_33
  # DEBUG BEGIN_STMT
  _13 = Dem_GbiDTCKind (EventId_43);
  if (_13 == 2)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _14 = EventEntryAllocResult_48 + 4294967295;
  if (_14 <= 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  EvMemEntryIdx.125_15 = EvMemEntryIdx;
  Dem_ProcessMultipleOBDFreezeFrameEntry (EventId_43, EvMemEntryIdx.125_15);

  <bb 14> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.126_16 = EvMemEntryPtr;
  _17 = EvMemEntryPtr.126_16->EventId;
  if (EventId_43 == _17)
    goto <bb 15>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  EventFailureClassIdx_64 = Dem_GbiEventFailureClassIdx (EventId_43);
  # DEBUG EventFailureClassIdx => EventFailureClassIdx_64
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx_64 == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  EvMemEntryPtr.127_18 = EvMemEntryPtr;
  _19 = EvMemEntryPtr.127_18->EventFailureCycleCounter;
  _20 = (int) EventFailureClassIdx_64;
  _21 = Dem_EventFailureCycleCfg[_20].EventFailureCycleCounterThreshold;
  if (_19 >= _21)
    goto <bb 17>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _22 = Dem_GbiOpCycleIdx (EventId_43);
  if (_22 != 1)
    goto <bb 19>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _23 = Dem_NvData.Dem_OpCycleDCYIsQualified;
  if (_23 == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _24 = (int) EventId_43;
  _25 = Dem_NvData.DTCStatusMask[_24];
  _26 = (int) EventId_43;
  _27 = _25 | 8;
  Dem_NvData.DTCStatusMask[_26] = _27;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_UpdateEventIdOccurKinds (EventId_43, 3, 4);

  <bb 20> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.128_28 = EvMemEntryPtr;
  NvMForceWrite_69 = Dem_UpdateOccurrenceOrder (EvMemEntryPtr.128_28);
  # DEBUG NvMForceWrite => NvMForceWrite_69
  # DEBUG BEGIN_STMT
  ReplacedEventId.129_29 = ReplacedEventId;
  EvMemEntryPtr.130_30 = EvMemEntryPtr;
  EvMemEntryIdx.131_31 = EvMemEntryIdx;
  Dem_CheckForImmediateEntryStorage (ReplacedEventId.129_29, EvMemEntryPtr.130_30, EvMemEntryIdx.131_31, NvMForceWrite_69);

  <bb 21> :
  # Result_34 = PHI <Result_40(2), Result_33(20)>
  # DEBUG Result => Result_34
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _71 = Result_34;
  EvMemEntryPtr ={v} {CLOBBER};
  EvMemEntryIdx ={v} {CLOBBER};
  ReplacedEventId ={v} {CLOBBER};
  return _71;

}


Dem_ProcessEvent (uint8 ServiceId, struct Dem_EventInfoType EventInfo, Dem_EventStatusType EventStatus, boolean FirstFailed, Dem_ProcessEventJobMaskType Jobs, struct Dem_EventNotificationDataType * Notification)
{
  Std_ReturnType ProcessEntryResult;
  const Dem_EventIdType EventId;
  unsigned int _1;
  unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EventId_7 = EventInfo.EventId;
  # DEBUG EventId => EventId_7
  # DEBUG BEGIN_STMT
  ProcessEntryResult_8 = 0;
  # DEBUG ProcessEntryResult => ProcessEntryResult_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Dem_ProcessEventStatusUpdate (EventId_7, EventStatus_10(D), FirstFailed_11(D), Jobs_12(D), Notification_13(D));
  # DEBUG BEGIN_STMT
  _1 = (unsigned int) Jobs_12(D);
  _2 = _1 & 4;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ProcessEntryResult_16 = Dem_ProcessEventEntry (EventInfo, EventStatus_10(D), Notification_13(D));
  # DEBUG ProcessEntryResult => ProcessEntryResult_16

  <bb 4> :
  # ProcessEntryResult_3 = PHI <ProcessEntryResult_8(2), ProcessEntryResult_16(3)>
  # DEBUG ProcessEntryResult => ProcessEntryResult_3
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (ProcessEntryResult_3 == 48)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, ServiceId_18(D), 48);

  <bb 6> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_SetOBDFFOccurrenceOrder (Dem_SizeEvMemEntryType EventMemoryEntryIdx)
{
  boolean OccurrenceOrderUpdated;
  int _1;
  short unsigned int Dem_MaxOBDOccOrder.110_2;
  short unsigned int Dem_MaxOBDOccOrder.111_3;
  short unsigned int Dem_MaxOBDOccOrder.112_4;
  short unsigned int Dem_MaxOBDOccOrder.113_5;
  short unsigned int _6;
  boolean _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  OccurrenceOrderUpdated_9 = 0;
  # DEBUG OccurrenceOrderUpdated => OccurrenceOrderUpdated_9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) EventMemoryEntryIdx_10(D);
  Dem_MaxOBDOccOrder.110_2 = Dem_MaxOBDOccOrder;
  Dem_EntryOBDFF[_1].OBDOccOrder = Dem_MaxOBDOccOrder.110_2;
  # DEBUG BEGIN_STMT
  Dem_MaxOBDOccOrder.111_3 = Dem_MaxOBDOccOrder;
  if (Dem_MaxOBDOccOrder.111_3 == 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dem_RearrangeOBDOccurrenceOrder ();
  # DEBUG BEGIN_STMT
  OccurrenceOrderUpdated_14 = 1;
  # DEBUG OccurrenceOrderUpdated => OccurrenceOrderUpdated_14

  <bb 4> :
  # OccurrenceOrderUpdated_7 = PHI <OccurrenceOrderUpdated_9(2), OccurrenceOrderUpdated_14(3)>
  # DEBUG OccurrenceOrderUpdated => OccurrenceOrderUpdated_7
  # DEBUG BEGIN_STMT
  Dem_MaxOBDOccOrder.112_4 = Dem_MaxOBDOccOrder;
  Dem_MaxOBDOccOrder.113_5 = Dem_MaxOBDOccOrder.112_4;
  _6 = Dem_MaxOBDOccOrder.113_5 + 1;
  Dem_MaxOBDOccOrder = _6;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = OccurrenceOrderUpdated_7;
  return _16;

}


Dem_SelectEntryOfOBDFreezeFrameEvent (Dem_SizeEvMemEntryType * SelectedEntryIndex, boolean SelectForReport)
{
  Dem_OccOrderType SelectedOccOrder;
  Dem_OccOrderType CurrentOccOrder;
  uint8 SelectedEventPrio;
  uint8 CurrentEventPrio;
  Dem_DTCKindType DtcKind;
  uint32 ObdDTC;
  uint32 VisibleDTC;
  Dem_EventIdType CurrentEvId;
  boolean IdentifiedOBDEventForReport;
  uint8 EntryIdx;
  Dem_SizeEvMemEntryType TemporaryEntryIdx;
  Dem_EventIdType SelectedEvId;
  struct Dem_EventMemoryEntryType * _1;
  unsigned int _2;
  unsigned int _3;
  struct Dem_EventMemoryEntryType * _4;
  int _5;
  unsigned char _6;
  unsigned int _7;
  unsigned int _8;
  int _9;
  int _10;
  struct Dem_EventMemoryEntryType * _11;
  unsigned int _12;
  unsigned int _13;
  struct Dem_EventMemoryEntryType * _14;
  struct Dem_EventMemoryEntryType * _15;
  unsigned int _16;
  unsigned int _17;
  struct Dem_EventMemoryEntryType * _18;
  unsigned char EntryIdx.119_19;
  boolean _37;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SelectedEvId_30 = 0;
  # DEBUG SelectedEvId => SelectedEvId_30
  # DEBUG BEGIN_STMT
  TemporaryEntryIdx_31 = 0;
  # DEBUG TemporaryEntryIdx => TemporaryEntryIdx_31
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IdentifiedOBDEventForReport_32 = 0;
  # DEBUG IdentifiedOBDEventForReport => IdentifiedOBDEventForReport_32
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx_33 = 0;
  # DEBUG EntryIdx => EntryIdx_33
  goto <bb 16>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = &Dem_EventMemoryPrimary;
  _2 = (unsigned int) EntryIdx_24;
  _3 = _2 * 16;
  _4 = _1 + _3;
  CurrentEvId_38 = _4->EventId;
  # DEBUG CurrentEvId => CurrentEvId_38
  # DEBUG BEGIN_STMT
  VisibleDTC_40 = Dem_GetVisibleCmbDTC (0, CurrentEvId_38);
  # DEBUG VisibleDTC => VisibleDTC_40
  # DEBUG BEGIN_STMT
  ObdDTC_42 = Dem_GetObdDTC (CurrentEvId_38);
  # DEBUG ObdDTC => ObdDTC_42
  # DEBUG BEGIN_STMT
  DtcKind_44 = Dem_GbiDTCKind (CurrentEvId_38);
  # DEBUG DtcKind => DtcKind_44
  # DEBUG BEGIN_STMT
  if (DtcKind_44 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 4> :
  if (SelectForReport_45(D) == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (VisibleDTC_40 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (SelectForReport_45(D) == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 7> :
  if (ObdDTC_42 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 8> :
  _5 = (int) CurrentEvId_38;
  _6 = Dem_NvData.DTCStatusMask[_5];
  _7 = (unsigned int) _6;
  _8 = _7 & 8;
  if (_8 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (IdentifiedOBDEventForReport_26 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  CurrentEventPrio_50 = Dem_GbiPriority (CurrentEvId_38);
  # DEBUG CurrentEventPrio => CurrentEventPrio_50
  # DEBUG BEGIN_STMT
  SelectedEventPrio_52 = Dem_GbiPriority (SelectedEvId_21);
  # DEBUG SelectedEventPrio => SelectedEventPrio_52
  # DEBUG BEGIN_STMT
  _9 = (int) EntryIdx_24;
  CurrentOccOrder_53 = Dem_EntryOBDFF[_9].OBDOccOrder;
  # DEBUG CurrentOccOrder => CurrentOccOrder_53
  # DEBUG BEGIN_STMT
  _10 = (int) TemporaryEntryIdx_23;
  SelectedOccOrder_54 = Dem_EntryOBDFF[_10].OBDOccOrder;
  # DEBUG SelectedOccOrder => SelectedOccOrder_54
  # DEBUG BEGIN_STMT
  if (CurrentEventPrio_50 < SelectedEventPrio_52)
    goto <bb 13>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (CurrentEventPrio_50 == SelectedEventPrio_52)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  if (CurrentOccOrder_53 < SelectedOccOrder_54)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _11 = &Dem_EventMemoryPrimary;
  _12 = (unsigned int) EntryIdx_24;
  _13 = _12 * 16;
  _14 = _11 + _13;
  SelectedEvId_55 = _14->EventId;
  # DEBUG SelectedEvId => SelectedEvId_55
  # DEBUG BEGIN_STMT
  TemporaryEntryIdx_56 = EntryIdx_24;
  # DEBUG TemporaryEntryIdx => TemporaryEntryIdx_56
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _15 = &Dem_EventMemoryPrimary;
  _16 = (unsigned int) EntryIdx_24;
  _17 = _16 * 16;
  _18 = _15 + _17;
  SelectedEvId_46 = _18->EventId;
  # DEBUG SelectedEvId => SelectedEvId_46
  # DEBUG BEGIN_STMT
  TemporaryEntryIdx_47 = EntryIdx_24;
  # DEBUG TemporaryEntryIdx => TemporaryEntryIdx_47
  # DEBUG BEGIN_STMT
  IdentifiedOBDEventForReport_48 = 1;
  # DEBUG IdentifiedOBDEventForReport => IdentifiedOBDEventForReport_48

  <bb 15> :
  # SelectedEvId_20 = PHI <SelectedEvId_21(3), SelectedEvId_21(6), SelectedEvId_21(7), SelectedEvId_21(8), SelectedEvId_21(12), SelectedEvId_46(14), SelectedEvId_21(11), SelectedEvId_55(13)>
  # TemporaryEntryIdx_22 = PHI <TemporaryEntryIdx_23(3), TemporaryEntryIdx_23(6), TemporaryEntryIdx_23(7), TemporaryEntryIdx_23(8), TemporaryEntryIdx_23(12), TemporaryEntryIdx_47(14), TemporaryEntryIdx_23(11), TemporaryEntryIdx_56(13)>
  # IdentifiedOBDEventForReport_25 = PHI <IdentifiedOBDEventForReport_26(3), IdentifiedOBDEventForReport_26(6), IdentifiedOBDEventForReport_26(7), IdentifiedOBDEventForReport_26(8), IdentifiedOBDEventForReport_26(12), IdentifiedOBDEventForReport_48(14), IdentifiedOBDEventForReport_26(11), IdentifiedOBDEventForReport_26(13)>
  # DEBUG IdentifiedOBDEventForReport => IdentifiedOBDEventForReport_25
  # DEBUG TemporaryEntryIdx => TemporaryEntryIdx_22
  # DEBUG SelectedEvId => SelectedEvId_20
  # DEBUG BEGIN_STMT
  EntryIdx.119_19 = EntryIdx_24;
  EntryIdx_57 = EntryIdx.119_19 + 1;
  # DEBUG EntryIdx => EntryIdx_57

  <bb 16> :
  # SelectedEvId_21 = PHI <SelectedEvId_30(2), SelectedEvId_20(15)>
  # TemporaryEntryIdx_23 = PHI <TemporaryEntryIdx_31(2), TemporaryEntryIdx_22(15)>
  # EntryIdx_24 = PHI <EntryIdx_33(2), EntryIdx_57(15)>
  # IdentifiedOBDEventForReport_26 = PHI <IdentifiedOBDEventForReport_32(2), IdentifiedOBDEventForReport_25(15)>
  # DEBUG IdentifiedOBDEventForReport => IdentifiedOBDEventForReport_26
  # DEBUG EntryIdx => EntryIdx_24
  # DEBUG TemporaryEntryIdx => TemporaryEntryIdx_23
  # DEBUG SelectedEvId => SelectedEvId_21
  # DEBUG BEGIN_STMT
  if (EntryIdx_24 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  if (IdentifiedOBDEventForReport_26 == 1)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  *SelectedEntryIndex_35(D) = TemporaryEntryIdx_23;

  <bb 19> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _37 = IdentifiedOBDEventForReport_26;
  return _37;

}


Dem_ProcessMultipleOBDFreezeFrameEntry (Dem_EventIdType EventId, Dem_SizeEvMemEntryType EventMemoryEntryIdx)
{
  struct Dem_EventMemoryEntryType * const PrimMemEntry;
  boolean ReorderingWasPerformed;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReorderingWasPerformed_2 = 0;
  # DEBUG ReorderingWasPerformed => ReorderingWasPerformed_2
  # DEBUG BEGIN_STMT
  PrimMemEntry_3 = &Dem_EventMemoryPrimary;
  # DEBUG PrimMemEntry => PrimMemEntry_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_StoreOBDFreezeFrame (EventId_5(D), EventMemoryEntryIdx_6(D));
  # DEBUG BEGIN_STMT
  ReorderingWasPerformed_9 = Dem_SetOBDFFOccurrenceOrder (EventMemoryEntryIdx_6(D));
  # DEBUG ReorderingWasPerformed => ReorderingWasPerformed_9
  # DEBUG BEGIN_STMT
  if (ReorderingWasPerformed_9 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dem_CheckForImmediateEntryStorage (EventId_5(D), PrimMemEntry_3, EventMemoryEntryIdx_6(D), 0);

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_UpdateAgingCounter (Dem_EventIdType EventId)
{
  Dem_EntryDataType * const AgingCounterPtr;
  boolean ClearAgedEventFlag;
  Dem_EventIdType CurrentEvent;
  Dem_SizeEvMemEntryType EvMemEntryIdx;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  boolean SearchResult;
  struct Dem_EventMemoryEntryType * EvMemEntry.32_1;
  unsigned char _2;
  unsigned char _3;
  unsigned char _4;
  short unsigned int Dem_EvIdOfLockedMemoryEntry.33_5;
  unsigned char _6;
  struct Dem_EventMemoryEntryType * EvMemEntry.34_7;
  unsigned char _8;
  struct Dem_EventMemoryEntryType * EvMemEntry.35_9;
  unsigned char EvMemEntryIdx.36_10;
  boolean _30;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CurrentEvent_17 = EventId_16(D);
  # DEBUG CurrentEvent => CurrentEvent_17
  # DEBUG BEGIN_STMT
  ClearAgedEventFlag_18 = 0;
  # DEBUG ClearAgedEventFlag => ClearAgedEventFlag_18
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  SearchResult_22 = Dem_SearchForEntry (EventId_16(D), &EvMemEntry, &EvMemEntryIdx);
  # DEBUG SearchResult => SearchResult_22
  # DEBUG BEGIN_STMT
  if (SearchResult_22 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  EvMemEntry.32_1 = EvMemEntry;
  AgingCounterPtr_24 = Dem_IntValEntryData (EvMemEntry.32_1);
  # DEBUG AgingCounterPtr => AgingCounterPtr_24
  # DEBUG BEGIN_STMT
  _2 = *AgingCounterPtr_24;
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = *AgingCounterPtr_24;
  _4 = _3 + 255;
  *AgingCounterPtr_24 = _4;

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dem_EvIdOfLockedMemoryEntry.33_5 = Dem_EvIdOfLockedMemoryEntry;
  if (CurrentEvent_17 != Dem_EvIdOfLockedMemoryEntry.33_5)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _6 = *AgingCounterPtr_24;
  if (_6 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EvMemEntry.34_7 = EvMemEntry;
  Dem_ClearAgedEventEntry (CurrentEvent_17, EvMemEntry.34_7);
  # DEBUG BEGIN_STMT
  ClearAgedEventFlag_27 = 1;
  # DEBUG ClearAgedEventFlag => ClearAgedEventFlag_27

  <bb 8> :
  # ClearAgedEventFlag_11 = PHI <ClearAgedEventFlag_18(5), ClearAgedEventFlag_18(6), ClearAgedEventFlag_27(7)>
  # DEBUG ClearAgedEventFlag => ClearAgedEventFlag_11
  # DEBUG BEGIN_STMT
  if (ClearAgedEventFlag_11 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _8 = *AgingCounterPtr_24;
  if (_8 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  EvMemEntry.35_9 = EvMemEntry;
  EvMemEntryIdx.36_10 = EvMemEntryIdx;
  Dem_CheckForImmediateEntryStorage (CurrentEvent_17, EvMemEntry.35_9, EvMemEntryIdx.36_10, 0);

  <bb 11> :
  # ClearAgedEventFlag_12 = PHI <ClearAgedEventFlag_18(2), ClearAgedEventFlag_11(9), ClearAgedEventFlag_11(10)>
  # DEBUG ClearAgedEventFlag => ClearAgedEventFlag_12
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _30 = ClearAgedEventFlag_12;
  EvMemEntry ={v} {CLOBBER};
  EvMemEntryIdx ={v} {CLOBBER};
  return _30;

}


Dem_FindFFSegIdx (Dem_FFKindType FFKind, const struct Dem_FFClassType * IndividPartFFClass, uint16 DataId, Dem_SizeFFType * Offset)
{
  Dem_NumFFSegsType SegIdx;
  const struct Dem_FFClassType * FFPartClass[1];
  uint8_least FFPartIdx;
  boolean IsDidFound;
  Dem_FFSegIdxType FFSegIdx;
  Dem_SizeFFType StartByte;
  const struct Dem_FFClassType * _1;
  const Dem_FFSegIdxType * _2;
  unsigned int _3;
  unsigned int _4;
  const Dem_FFSegIdxType * _5;
  int _6;
  short unsigned int _7;
  int _8;
  const struct Dem_FFSegmentType * _9;
  const struct Dem_FFClassType * _10;
  unsigned char _11;
  short unsigned int _42;
  Dem_FFSegIdxType _50;

  <bb 2> :
  # DEBUG BEGIN_STMT
  StartByte_31 = 0;
  # DEBUG StartByte => StartByte_31
  # DEBUG BEGIN_STMT
  FFSegIdx_32 = 0;
  # DEBUG FFSegIdx => FFSegIdx_32
  # DEBUG BEGIN_STMT
  IsDidFound_33 = 0;
  # DEBUG IsDidFound => IsDidFound_33
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFPartClass[0] = IndividPartFFClass_35(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFPartIdx_37 = 0;
  # DEBUG FFPartIdx => FFPartIdx_37
  goto <bb 12>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SegIdx_38 = 0;
  # DEBUG SegIdx => SegIdx_38
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = FFPartClass[FFPartIdx_24];
  _2 = _1->FFSegIdx;
  _3 = (unsigned int) SegIdx_25;
  _4 = _3 * 2;
  _5 = _2 + _4;
  FFSegIdx_39 = *_5;
  # DEBUG FFSegIdx => FFSegIdx_39
  # DEBUG BEGIN_STMT
  if (FFSegIdx_39 != 65535)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = (int) FFSegIdx_39;
  _7 = Dem_FFSegment[_6].DataId;
  if (DataId_40(D) == _7)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  IsDidFound_44 = 1;
  # DEBUG IsDidFound => IsDidFound_44
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _8 = (int) FFSegIdx_39;
  _9 = &Dem_FFSegment[_8];
  _42 = Dem_SizeOfFFSegment (_9);
  StartByte_43 = _42 + StartByte_13;
  # DEBUG StartByte => StartByte_43

  <bb 8> :
  # StartByte_12 = PHI <StartByte_13(4), StartByte_43(7)>
  # DEBUG StartByte => StartByte_12
  # DEBUG BEGIN_STMT
  SegIdx_45 = SegIdx_25 + 1;
  # DEBUG SegIdx => SegIdx_45

  <bb 9> :
  # StartByte_13 = PHI <StartByte_14(3), StartByte_12(8)>
  # FFSegIdx_16 = PHI <FFSegIdx_18(3), FFSegIdx_39(8)>
  # SegIdx_25 = PHI <SegIdx_38(3), SegIdx_45(8)>
  # DEBUG SegIdx => SegIdx_25
  # DEBUG FFSegIdx => FFSegIdx_16
  # DEBUG StartByte => StartByte_13
  # DEBUG BEGIN_STMT
  _10 = FFPartClass[FFPartIdx_24];
  _11 = _10->NumFFSegs;
  if (SegIdx_25 < _11)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # FFSegIdx_17 = PHI <FFSegIdx_39(6), FFSegIdx_16(9)>
  # IsDidFound_21 = PHI <IsDidFound_44(6), IsDidFound_22(9)>
  # DEBUG IsDidFound => IsDidFound_21
  # DEBUG FFSegIdx => FFSegIdx_17
  # DEBUG BEGIN_STMT
  if (IsDidFound_21 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  FFPartIdx_46 = FFPartIdx_24 + 1;
  # DEBUG FFPartIdx => FFPartIdx_46

  <bb 12> :
  # StartByte_14 = PHI <StartByte_31(2), StartByte_13(11)>
  # FFSegIdx_18 = PHI <FFSegIdx_32(2), FFSegIdx_17(11)>
  # IsDidFound_22 = PHI <IsDidFound_33(2), IsDidFound_21(11)>
  # FFPartIdx_24 = PHI <FFPartIdx_37(2), FFPartIdx_46(11)>
  # DEBUG FFPartIdx => FFPartIdx_24
  # DEBUG IsDidFound => IsDidFound_22
  # DEBUG FFSegIdx => FFSegIdx_18
  # DEBUG StartByte => StartByte_14
  # DEBUG BEGIN_STMT
  if (FFPartIdx_24 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # StartByte_15 = PHI <StartByte_13(10), StartByte_14(12)>
  # FFSegIdx_19 = PHI <FFSegIdx_17(10), FFSegIdx_18(12)>
  # IsDidFound_23 = PHI <IsDidFound_21(10), IsDidFound_22(12)>
  # DEBUG IsDidFound => IsDidFound_23
  # DEBUG FFSegIdx => FFSegIdx_19
  # DEBUG StartByte => StartByte_15
  # DEBUG BEGIN_STMT
  if (IsDidFound_23 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  FFSegIdx_49 = 65535;
  # DEBUG FFSegIdx => FFSegIdx_49
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  *Offset_47(D) = StartByte_15;

  <bb 16> :
  # FFSegIdx_20 = PHI <FFSegIdx_49(14), FFSegIdx_19(15)>
  # DEBUG FFSegIdx => FFSegIdx_20
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _50 = FFSegIdx_20;
  FFPartClass ={v} {CLOBBER};
  return _50;

}


Dem_CheckErrorQueueEntryForStatus (Dem_EventIdType EventId, Dem_EventStatusType EntryStatus)
{
  uint8 Index;
  Dem_ErrorQueueEntryType QueueEntry;
  boolean Result;
  unsigned char Dem_ErrorQueueReadIdx.103_1;
  int _2;
  short unsigned int _3;
  unsigned char Index.104_4;
  int _5;
  int _6;
  int _7;
  int _8;
  unsigned int _9;
  unsigned int _10;
  unsigned int _11;
  unsigned int _12;
  unsigned int _13;
  unsigned int _14;
  unsigned int _15;
  unsigned char Dem_ErrorQueueReadIdx.108_16;
  unsigned int iftmp.105_22;
  unsigned int iftmp.106_23;
  unsigned int iftmp.107_24;
  unsigned int iftmp.105_33;
  unsigned int iftmp.106_34;
  unsigned int iftmp.107_35;
  unsigned int iftmp.107_36;
  unsigned int iftmp.106_37;
  unsigned int iftmp.105_38;
  boolean _40;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_25 = 0;
  # DEBUG Result => Result_25
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.103_1 = Dem_ErrorQueueReadIdx;
  _2 = (int) Dem_ErrorQueueReadIdx.103_1;
  _3 = Dem_ErrorQueue[_2];
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Index_27 = Dem_ErrorQueueWriteIdx;
  # DEBUG Index => Index_27

  <bb 4> :
  # Result_17 = PHI <Result_25(3), Result_18(20)>
  # Index_20 = PHI <Index_27(3), Index_21(20)>
  # DEBUG Index => Index_20
  # DEBUG Result => Result_17
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Index_20 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Index_29 = 9;
  # DEBUG Index => Index_29
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index.104_4 = Index_20;
  Index_28 = Index.104_4 + 255;
  # DEBUG Index => Index_28

  <bb 7> :
  # Index_21 = PHI <Index_29(5), Index_28(6)>
  # DEBUG Index => Index_21
  # DEBUG BEGIN_STMT
  _5 = (int) Index_21;
  QueueEntry_30 = Dem_ErrorQueue[_5];
  # DEBUG QueueEntry => QueueEntry_30
  # DEBUG BEGIN_STMT
  _6 = (int) EventId_31(D);
  _7 = (int) QueueEntry_30;
  _8 = _7 & 8191;
  if (_6 == _8)
    goto <bb 8>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 8> :
  _9 = (unsigned int) EntryStatus_32(D);
  _10 = (unsigned int) QueueEntry_30;
  _11 = _10 & 49152;
  if (_11 != 32768)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  _12 = (unsigned int) QueueEntry_30;
  _13 = _12 & 49152;
  if (_13 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  _14 = (unsigned int) QueueEntry_30;
  _15 = _14 & 49152;
  if (_15 == 16384)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  iftmp.107_36 = 5;
  goto <bb 13>; [INV]

  <bb 12> :
  iftmp.107_35 = 4;

  <bb 13> :
  # iftmp.107_24 = PHI <iftmp.107_36(11), iftmp.107_35(12)>
  iftmp.106_37 = iftmp.107_24;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.106_34 = 0;

  <bb 15> :
  # iftmp.106_23 = PHI <iftmp.106_37(13), iftmp.106_34(14)>
  iftmp.105_38 = iftmp.106_23;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.105_33 = 1;

  <bb 17> :
  # iftmp.105_22 = PHI <iftmp.105_38(15), iftmp.105_33(16)>
  if (iftmp.105_22 == _9)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Result_39 = 1;
  # DEBUG Result => Result_39

  <bb 19> :
  # Result_18 = PHI <Result_17(7), Result_17(17), Result_39(18)>
  # DEBUG Result => Result_18
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.108_16 = Dem_ErrorQueueReadIdx;
  if (Index_21 != Dem_ErrorQueueReadIdx.108_16)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  if (Result_18 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  # Result_19 = PHI <Result_25(2), Result_18(19), Result_18(20)>
  # DEBUG Result => Result_19
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _40 = Result_19;
  return _40;

}


Dem_CheckErrorReQueueEntry (struct Dem_EventInfoType EventInfo, Dem_EventStatusType EventStatus, Dem_EventStatusExtendedType OldDTCStatusMask, Std_ReturnType * SetBswEventStatusResult)
{
  const Dem_ErrorQueueEntryType Entry;
  const Dem_ErrorQueueIdxType EndIdx;
  Dem_ErrorQueueIdxType QueueIdx;
  const Dem_EventIdType EventId;
  boolean FirstFailed;
  boolean EntryIsWritten;
  unsigned int _1;
  unsigned int _2;
  int _3;
  int _4;
  int _5;
  int _6;
  unsigned int _7;
  unsigned int _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FirstFailed_12 = 0;
  # DEBUG FirstFailed => FirstFailed_12
  # DEBUG BEGIN_STMT
  EventId_14 = EventInfo.EventId;
  # DEBUG EventId => EventId_14
  # DEBUG BEGIN_STMT
  _1 = (unsigned int) OldDTCStatusMask_15(D);
  _2 = _1 & 2;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  if (EventStatus_16(D) == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (EventStatus_16(D) == 5)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  QueueIdx_17 = Dem_ErrorQueueReadIdx;
  # DEBUG QueueIdx => QueueIdx_17
  # DEBUG BEGIN_STMT
  EndIdx_18 = Dem_ErrorQueueWriteIdx;
  # DEBUG EndIdx => EndIdx_18
  # DEBUG BEGIN_STMT
  FirstFailed_19 = 1;
  # DEBUG FirstFailed => FirstFailed_19
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _3 = (int) QueueIdx_10;
  Entry_20 = Dem_ErrorQueue[_3];
  # DEBUG Entry => Entry_20
  # DEBUG BEGIN_STMT
  _4 = (int) Entry_20;
  _5 = _4 & 8191;
  _6 = (int) EventId_14;
  if (_5 == _6)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _7 = (unsigned int) Entry_20;
  _8 = _7 & 8192;
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FirstFailed_21 = 0;
  # DEBUG FirstFailed => FirstFailed_21
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  QueueIdx_22 = QueueIdx_10 + 1;
  # DEBUG QueueIdx => QueueIdx_22
  # DEBUG BEGIN_STMT
  QueueIdx_23 = QueueIdx_22 % 10;
  # DEBUG QueueIdx => QueueIdx_23

  <bb 10> :
  # QueueIdx_10 = PHI <QueueIdx_17(5), QueueIdx_23(9)>
  # DEBUG QueueIdx => QueueIdx_10
  # DEBUG BEGIN_STMT
  if (QueueIdx_10 != EndIdx_18)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # FirstFailed_9 = PHI <FirstFailed_12(2), FirstFailed_12(4), FirstFailed_21(8), FirstFailed_19(10)>
  # DEBUG FirstFailed => FirstFailed_9
  # DEBUG BEGIN_STMT
  EntryIsWritten_25 = Dem_WriteErrorQueueEntry (EventInfo, EventStatus_16(D), FirstFailed_9);
  # DEBUG EntryIsWritten => EntryIsWritten_25
  # DEBUG BEGIN_STMT
  if (EntryIsWritten_25 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  *SetBswEventStatusResult_26(D) = 3;

  <bb 13> :
  return;

}


Dem_CheckErrorQueueEntry (Dem_EventIdType EventId, Dem_EventStatusType * PreviousEntryStatus)
{
  uint8 Index;
  Dem_ErrorQueueEntryType QueueEntry;
  boolean Result;
  unsigned char Dem_ErrorQueueReadIdx.97_1;
  int _2;
  short unsigned int _3;
  unsigned char Index.98_4;
  int _5;
  int _6;
  int _7;
  int _8;
  unsigned int _9;
  unsigned int _10;
  unsigned int _11;
  unsigned int _12;
  unsigned int _13;
  unsigned int _14;
  unsigned char Dem_ErrorQueueReadIdx.102_15;
  Dem_EventStatusType iftmp.99_21;
  Dem_EventStatusType iftmp.100_22;
  Dem_EventStatusType iftmp.101_23;
  Dem_EventStatusType iftmp.99_34;
  Dem_EventStatusType iftmp.100_35;
  Dem_EventStatusType iftmp.101_36;
  Dem_EventStatusType iftmp.101_37;
  Dem_EventStatusType iftmp.100_38;
  Dem_EventStatusType iftmp.99_39;
  boolean _43;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_27 = 0;
  # DEBUG Result => Result_27
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.97_1 = Dem_ErrorQueueReadIdx;
  _2 = (int) Dem_ErrorQueueReadIdx.97_1;
  _3 = Dem_ErrorQueue[_2];
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Index_29 = Dem_ErrorQueueWriteIdx;
  # DEBUG Index => Index_29

  <bb 4> :
  # Result_16 = PHI <Result_27(3), Result_17(19)>
  # Index_19 = PHI <Index_29(3), Index_20(19)>
  # DEBUG Index => Index_19
  # DEBUG Result => Result_16
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Index_19 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Index_31 = 9;
  # DEBUG Index => Index_31
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index.98_4 = Index_19;
  Index_30 = Index.98_4 + 255;
  # DEBUG Index => Index_30

  <bb 7> :
  # Index_20 = PHI <Index_31(5), Index_30(6)>
  # DEBUG Index => Index_20
  # DEBUG BEGIN_STMT
  _5 = (int) Index_20;
  QueueEntry_32 = Dem_ErrorQueue[_5];
  # DEBUG QueueEntry => QueueEntry_32
  # DEBUG BEGIN_STMT
  _6 = (int) EventId_33(D);
  _7 = (int) QueueEntry_32;
  _8 = _7 & 8191;
  if (_6 == _8)
    goto <bb 8>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _9 = (unsigned int) QueueEntry_32;
  _10 = _9 & 49152;
  if (_10 != 32768)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  _11 = (unsigned int) QueueEntry_32;
  _12 = _11 & 49152;
  if (_12 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  _13 = (unsigned int) QueueEntry_32;
  _14 = _13 & 49152;
  if (_14 == 16384)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  iftmp.101_37 = 5;
  goto <bb 13>; [INV]

  <bb 12> :
  iftmp.101_36 = 4;

  <bb 13> :
  # iftmp.101_23 = PHI <iftmp.101_37(11), iftmp.101_36(12)>
  iftmp.100_38 = iftmp.101_23;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.100_35 = 0;

  <bb 15> :
  # iftmp.100_22 = PHI <iftmp.100_38(13), iftmp.100_35(14)>
  iftmp.99_39 = iftmp.100_22;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.99_34 = 1;

  <bb 17> :
  # iftmp.99_21 = PHI <iftmp.99_39(15), iftmp.99_34(16)>
  *PreviousEntryStatus_40(D) = iftmp.99_21;
  # DEBUG BEGIN_STMT
  Result_42 = 1;
  # DEBUG Result => Result_42

  <bb 18> :
  # Result_17 = PHI <Result_16(7), Result_42(17)>
  # DEBUG Result => Result_17
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.102_15 = Dem_ErrorQueueReadIdx;
  if (Index_20 != Dem_ErrorQueueReadIdx.102_15)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  if (Result_17 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # Result_18 = PHI <Result_27(2), Result_17(18), Result_17(19)>
  # DEBUG Result => Result_18
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _43 = Result_18;
  return _43;

}


Dem_WriteErrorQueueEntry (struct Dem_EventInfoType EventInfo, Dem_EventStatusType EventStatus, boolean FirstFailed)
{
  Dem_ErrorQueueEntryType QueueEntry;
  Dem_EventIdType EventId;
  boolean Result;
  unsigned char Dem_ErrorQueueWriteIdx.93_1;
  int _2;
  short unsigned int _3;
  int _4;
  unsigned char Dem_ErrorQueueWriteIdx.94_5;
  int _6;
  unsigned char Dem_ErrorQueueWriteIdx.95_7;
  unsigned char _8;
  unsigned char Dem_ErrorQueueWriteIdx.96_9;
  unsigned char _10;
  boolean _28;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_15 = 0;
  # DEBUG Result => Result_15
  # DEBUG BEGIN_STMT
  EventId_17 = EventInfo.EventId;
  # DEBUG EventId => EventId_17
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.93_1 = Dem_ErrorQueueWriteIdx;
  _2 = (int) Dem_ErrorQueueWriteIdx.93_1;
  _3 = Dem_ErrorQueue[_2];
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  QueueEntry_18 = EventId_17;
  # DEBUG QueueEntry => QueueEntry_18
  # DEBUG BEGIN_STMT
  _4 = (int) EventStatus_19(D);
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  QueueEntry_20 = QueueEntry_18 | 32768;
  # DEBUG QueueEntry => QueueEntry_20
  # DEBUG BEGIN_STMT

  <bb 5> :
  # QueueEntry_12 = PHI <QueueEntry_20(4), QueueEntry_18(3)>
  # DEBUG QueueEntry => QueueEntry_12
  # DEBUG BEGIN_STMT
  if (FirstFailed_21(D) == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  QueueEntry_23 = QueueEntry_12 | 8192;
  # DEBUG QueueEntry => QueueEntry_23
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  QueueEntry_22 = QueueEntry_12 & 57343;
  # DEBUG QueueEntry => QueueEntry_22

  <bb 8> :
  # QueueEntry_13 = PHI <QueueEntry_23(6), QueueEntry_22(7)>
  # DEBUG QueueEntry => QueueEntry_13
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.94_5 = Dem_ErrorQueueWriteIdx;
  _6 = (int) Dem_ErrorQueueWriteIdx.94_5;
  Dem_ErrorQueue[_6] = QueueEntry_13;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.95_7 = Dem_ErrorQueueWriteIdx;
  _8 = Dem_ErrorQueueWriteIdx.95_7 + 1;
  Dem_ErrorQueueWriteIdx = _8;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.96_9 = Dem_ErrorQueueWriteIdx;
  _10 = Dem_ErrorQueueWriteIdx.96_9 % 10;
  Dem_ErrorQueueWriteIdx = _10;
  # DEBUG BEGIN_STMT
  Result_27 = 1;
  # DEBUG Result => Result_27

  <bb 9> :
  # Result_11 = PHI <Result_15(2), Result_27(8)>
  # DEBUG Result => Result_11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _28 = Result_11;
  return _28;

}


Dem_ReadErrorQueueEntry (Dem_ErrorQueueEntryType * QueueEntry)
{
  struct Dem_ReadErrorQueueReturnType RetVal;
  struct Dem_ReadErrorQueueReturnType D.8674;
  unsigned char Dem_ErrorQueueReadIdx.84_1;
  int _2;
  unsigned char Dem_ErrorQueueReadIdx.85_3;
  unsigned char _4;
  unsigned char Dem_ErrorQueueReadIdx.86_5;
  unsigned char _6;
  unsigned char Dem_ErrorQueueReadIdx.87_7;
  int _8;
  short unsigned int _9;
  unsigned char Dem_ErrorQueueReadIdx.88_10;
  int _11;
  short unsigned int _12;
  unsigned char Dem_ErrorQueueReadIdx.89_13;
  int _14;
  short unsigned int _15;
  unsigned char Dem_ErrorQueueReadIdx.90_16;
  int _17;
  unsigned char Dem_ErrorQueueReadIdx.91_18;
  unsigned char _19;
  unsigned char Dem_ErrorQueueReadIdx.92_20;
  unsigned char _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal.Result = 0;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.84_1 = Dem_ErrorQueueReadIdx;
  _2 = (int) Dem_ErrorQueueReadIdx.84_1;
  Dem_ErrorQueue[_2] = 0;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.85_3 = Dem_ErrorQueueReadIdx;
  _4 = Dem_ErrorQueueReadIdx.85_3 + 1;
  Dem_ErrorQueueReadIdx = _4;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.86_5 = Dem_ErrorQueueReadIdx;
  _6 = Dem_ErrorQueueReadIdx.86_5 % 10;
  Dem_ErrorQueueReadIdx = _6;

  <bb 4> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.87_7 = Dem_ErrorQueueReadIdx;
  _8 = (int) Dem_ErrorQueueReadIdx.87_7;
  _9 = Dem_ErrorQueue[_8];
  if (_9 == 8191)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.88_10 = Dem_ErrorQueueReadIdx;
  _11 = (int) Dem_ErrorQueueReadIdx.88_10;
  _12 = Dem_ErrorQueue[_11];
  if (_12 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.89_13 = Dem_ErrorQueueReadIdx;
  _14 = (int) Dem_ErrorQueueReadIdx.89_13;
  _15 = Dem_ErrorQueue[_14];
  *QueueEntry_26(D) = _15;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.90_16 = Dem_ErrorQueueReadIdx;
  _17 = (int) Dem_ErrorQueueReadIdx.90_16;
  Dem_ErrorQueue[_17] = 0;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.91_18 = Dem_ErrorQueueReadIdx;
  _19 = Dem_ErrorQueueReadIdx.91_18 + 1;
  Dem_ErrorQueueReadIdx = _19;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.92_20 = Dem_ErrorQueueReadIdx;
  _21 = Dem_ErrorQueueReadIdx.92_20 % 10;
  Dem_ErrorQueueReadIdx = _21;
  # DEBUG BEGIN_STMT
  RetVal.Result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8674 = RetVal;
  RetVal ={v} {CLOBBER};
  return D.8674;

}


Dem_InvalidateErrorQueueEntry (Dem_EventIdType EventId)
{
  const Dem_EventIdType ErrorQueueEventId;
  boolean ProcessFirstEntryOfFullQueue;
  Dem_ErrorQueueIdxType ErrorQueueIndex;
  unsigned char Dem_ErrorQueueWriteIdx.82_1;
  int _2;
  short unsigned int _3;
  int _4;
  short unsigned int _5;
  int _6;
  unsigned char Dem_ErrorQueueWriteIdx.83_7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ErrorQueueIndex_13 = Dem_ErrorQueueReadIdx;
  # DEBUG ErrorQueueIndex => ErrorQueueIndex_13
  # DEBUG BEGIN_STMT
  ProcessFirstEntryOfFullQueue_14 = 0;
  # DEBUG ProcessFirstEntryOfFullQueue => ProcessFirstEntryOfFullQueue_14
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.82_1 = Dem_ErrorQueueWriteIdx;
  if (ErrorQueueIndex_13 == Dem_ErrorQueueWriteIdx.82_1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = (int) ErrorQueueIndex_13;
  _3 = Dem_ErrorQueue[_2];
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  ProcessFirstEntryOfFullQueue_15 = 1;
  # DEBUG ProcessFirstEntryOfFullQueue => ProcessFirstEntryOfFullQueue_15
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = (int) ErrorQueueIndex_8;
  _5 = Dem_ErrorQueue[_4];
  ErrorQueueEventId_16 = _5 & 8191;
  # DEBUG ErrorQueueEventId => ErrorQueueEventId_16
  # DEBUG BEGIN_STMT
  if (ErrorQueueEventId_16 == EventId_17(D))
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = (int) ErrorQueueIndex_8;
  Dem_ErrorQueue[_6] = 8191;

  <bb 7> :
  # DEBUG BEGIN_STMT
  ErrorQueueIndex_19 = ErrorQueueIndex_8 + 1;
  # DEBUG ErrorQueueIndex => ErrorQueueIndex_19
  # DEBUG BEGIN_STMT
  ErrorQueueIndex_20 = ErrorQueueIndex_19 % 10;
  # DEBUG ErrorQueueIndex => ErrorQueueIndex_20
  # DEBUG BEGIN_STMT
  ProcessFirstEntryOfFullQueue_21 = 0;
  # DEBUG ProcessFirstEntryOfFullQueue => ProcessFirstEntryOfFullQueue_21

  <bb 8> :
  # ErrorQueueIndex_8 = PHI <ErrorQueueIndex_13(3), ErrorQueueIndex_20(7), ErrorQueueIndex_13(2), ErrorQueueIndex_13(4)>
  # ProcessFirstEntryOfFullQueue_9 = PHI <ProcessFirstEntryOfFullQueue_14(3), ProcessFirstEntryOfFullQueue_21(7), ProcessFirstEntryOfFullQueue_14(2), ProcessFirstEntryOfFullQueue_15(4)>
  # DEBUG ProcessFirstEntryOfFullQueue => ProcessFirstEntryOfFullQueue_9
  # DEBUG ErrorQueueIndex => ErrorQueueIndex_8
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.83_7 = Dem_ErrorQueueWriteIdx;
  if (ErrorQueueIndex_8 != Dem_ErrorQueueWriteIdx.83_7)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (ProcessFirstEntryOfFullQueue_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_PermanentMemoryInit (boolean ResetPermanentNvData)
{
  Dem_PermanentMemoryEntryType Entry;
  uint8_least EntryIdx;
  unsigned char _1;
  unsigned char Dem_EventMemoryPermanentUpdated.9_2;
  short unsigned int _3;
  unsigned int _4;
  unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (ResetPermanentNvData_10(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated = 1;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = Dem_NvMGetNvRAMBlockStatus (8);
  if (_1 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  EntryIdx_16 = 0;
  # DEBUG EntryIdx => EntryIdx_16
  goto <bb 14>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated.9_2 = Dem_EventMemoryPermanentUpdated;
  if (Dem_EventMemoryPermanentUpdated.9_2 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Entry_19 = 0;
  # DEBUG Entry => Entry_19
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Entry_20 = Entry_19 & 57344;
  # DEBUG Entry => Entry_20
  # DEBUG BEGIN_STMT
  Entry_21 = Entry_20;
  # DEBUG Entry => Entry_21
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Entry_22 = Entry_21 & 57343;
  # DEBUG Entry => Entry_22
  # DEBUG BEGIN_STMT
  Entry_23 = Entry_22 & 49151;
  # DEBUG Entry => Entry_23
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanent[EntryIdx_6] = Entry_23;
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentNonVolatileStored[EntryIdx_6] = 0;
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _3 = Dem_EventMemoryPermanent[EntryIdx_6];
  _4 = (unsigned int) _3;
  _5 = _4 & 8191;
  if (_5 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentNonVolatileStored[EntryIdx_6] = 2;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentNonVolatileStored[EntryIdx_6] = 0;

  <bb 13> :
  # DEBUG BEGIN_STMT
  EntryIdx_26 = EntryIdx_6 + 1;
  # DEBUG EntryIdx => EntryIdx_26

  <bb 14> :
  # EntryIdx_6 = PHI <EntryIdx_16(7), EntryIdx_26(13)>
  # DEBUG EntryIdx => EntryIdx_6
  # DEBUG BEGIN_STMT
  if (EntryIdx_6 <= 3)
    goto <bb 8>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_RestoreDerivedEventStatus (struct Dem_GateEntryBaseType * const GateEntryBase, struct Dem_EventMemoryEntryType * const EvMemEntry, Dem_EventIdType EventId)
{
  uint16 EventFailureClassIdx;
  int _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  int _5;
  unsigned char _6;
  int _7;
  unsigned char _8;
  unsigned char _9;
  int _10;
  unsigned char _11;
  unsigned char _12;
  int _13;
  unsigned char _14;
  int _15;
  unsigned char _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EventFailureClassIdx_21 = Dem_GbiEventFailureClassIdx (EventId_19(D));
  # DEBUG EventFailureClassIdx => EventFailureClassIdx_21
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) EventId_19(D);
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (int) EventId_19(D);
  _4 = _2 & 239;
  Dem_NvData.DTCStatusMask[_3] = _4;
  # DEBUG BEGIN_STMT
  _5 = (int) EventId_19(D);
  _6 = Dem_NvData.DTCStatusMask[_5];
  _7 = (int) EventId_19(D);
  _8 = _6 | 32;
  Dem_NvData.DTCStatusMask[_7] = _8;
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx_21 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _9 = EvMemEntry_24(D)->EventFailureCycleCounter;
  _10 = (int) EventFailureClassIdx_21;
  _11 = Dem_EventFailureCycleCfg[_10].EventFailureCycleCounterThreshold;
  if (_9 >= _11)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _12 = GateEntryBase_25(D)->EntryBase.CDTCFlag;
  if (_12 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _13 = (int) EventId_19(D);
  _14 = Dem_NvData.DTCStatusMask[_13];
  _15 = (int) EventId_19(D);
  _16 = _14 | 8;
  Dem_NvData.DTCStatusMask[_15] = _16;

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Dem_RestoreImmediateData (boolean ResetImmediateNvData)
{
  const Dem_SizeEntryDataType sizeEntryData;
  Dem_SizeEntryDataType EntryDataFreePos;
  Std_ReturnType Result;
  struct Dem_EventMemoryEntryType * const EvMemEntry;
  const NvM_BlockIdType NvDataBlockId;
  struct Dem_GateEntryBaseType * const GateEntryBase;
  const Dem_SizeEvMemEntryType SizeEventMem;
  struct Dem_GateEntryOBDFFPrimaryFragmentType * GateOBDFFEntry;
  NvM_RequestResultType reqResult;
  Std_ReturnType ReadBlockResult;
  Dem_EventIdType EvId;
  Dem_SizeEvMemEntryType EntryIdx;
  uint8_least OriginIdx;
  int _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  Dem_SizeEntryDataType * _5;
  Dem_SizeEntryDataType * _6;
  struct Dem_EventMemoryEntryType * _7;
  unsigned int _8;
  unsigned int _9;
  unsigned char reqResult.8_10;
  short unsigned int _11;
  unsigned int _12;
  unsigned char _13;
  unsigned int _14;
  unsigned int _15;
  unsigned int _16;
  unsigned char _17;
  unsigned char _18;
  Dem_SizeEntryDataType * _19;
  Dem_SizeEntryDataType * _20;
  unsigned char _21;
  short unsigned int _22;
  unsigned char _23;
  unsigned char _24;
  int _25;
  short unsigned int _26;
  int _27;
  Dem_EntryDataType[35] * _28;
  Dem_EntryDataType[35] * _29;
  Dem_EntryDataType * _30;
  sizetype _31;
  Dem_EntryDataType * _32;
  Dem_GateEntryDataVoidType * _33;
  long unsigned int _34;
  Dem_SizeEntryDataType * _35;
  short unsigned int _36;
  Dem_SizeEntryDataType * _37;
  short unsigned int _38;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReadBlockResult_59 = 1;
  # DEBUG ReadBlockResult => ReadBlockResult_59
  # DEBUG BEGIN_STMT
  reqResult = 1;
  # DEBUG BEGIN_STMT
  GateOBDFFEntry_62 = &Dem_NvGateEntryPrimaryData.OBDFFEntry;
  # DEBUG GateOBDFFEntry => GateOBDFFEntry_62
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EvId_63 = 0;
  # DEBUG EvId => EvId_63
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) EvId_41;
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (int) EvId_41;
  _4 = _2 & 247;
  Dem_NvData.DTCStatusMask[_3] = _4;
  # DEBUG BEGIN_STMT
  EvId_109 = EvId_41 + 1;
  # DEBUG EvId => EvId_109

  <bb 4> :
  # EvId_41 = PHI <EvId_63(2), EvId_109(3)>
  # DEBUG EvId => EvId_41
  # DEBUG BEGIN_STMT
  if (EvId_41 <= 14)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  OriginIdx_64 = 0;
  # DEBUG OriginIdx => OriginIdx_64
  goto <bb 34>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SizeEventMem_66 = Dem_SizeEventMem[OriginIdx_39];
  # DEBUG SizeEventMem => SizeEventMem_66
  # DEBUG BEGIN_STMT
  if (SizeEventMem_66 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  GateEntryBase_67 = Dem_NvGateEntryData[OriginIdx_39];
  # DEBUG GateEntryBase => GateEntryBase_67
  # DEBUG BEGIN_STMT
  NvDataBlockId_68 = Dem_NvDataBlockId[OriginIdx_39];
  # DEBUG NvDataBlockId => NvDataBlockId_68
  # DEBUG BEGIN_STMT
  if (OriginIdx_39 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  GateOBDFFEntry_69 = &Dem_NvGateEntryPrimaryData.OBDFFEntry;
  # DEBUG GateOBDFFEntry => GateOBDFFEntry_69

  <bb 9> :
  # GateOBDFFEntry_46 = PHI <GateOBDFFEntry_48(7), GateOBDFFEntry_69(8)>
  # DEBUG GateOBDFFEntry => GateOBDFFEntry_46
  # DEBUG BEGIN_STMT
  GateEntryBase_67->EntryBase.EventId = 0;
  # DEBUG BEGIN_STMT
  _5 = Dem_EntryDataFreePos[OriginIdx_39];
  if (_5 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _6 = Dem_EntryDataFreePos[OriginIdx_39];
  *_6 = 0;

  <bb 11> :
  # DEBUG BEGIN_STMT
  EntryIdx_72 = 0;
  # DEBUG EntryIdx => EntryIdx_72
  goto <bb 32>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _7 = Dem_EventMem[OriginIdx_39];
  _8 = (unsigned int) EntryIdx_40;
  _9 = _8 * 16;
  EvMemEntry_73 = _7 + _9;
  # DEBUG EvMemEntry => EvMemEntry_73
  # DEBUG BEGIN_STMT
  if (ResetImmediateNvData_74(D) == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  ReadBlockResult_76 = NvM_ASR40_SetDataIndex (NvDataBlockId_68, EntryIdx_40);
  # DEBUG ReadBlockResult => ReadBlockResult_76
  # DEBUG BEGIN_STMT
  if (ReadBlockResult_76 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  ReadBlockResult_78 = NvM_ASR40_ReadBlock (NvDataBlockId_68, 0B);
  # DEBUG ReadBlockResult => ReadBlockResult_78

  <bb 15> :
  # ReadBlockResult_42 = PHI <ReadBlockResult_43(12), ReadBlockResult_76(13), ReadBlockResult_78(14)>
  # DEBUG ReadBlockResult => ReadBlockResult_42
  # DEBUG BEGIN_STMT
  if (ReadBlockResult_42 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Eb_Intgr_BswM_TriggerMemoryStack (NvDataBlockId_68);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result_83 = NvM_ASR40_GetErrorStatus (NvDataBlockId_68, &reqResult);
  # DEBUG Result => Result_83
  # DEBUG BEGIN_STMT
  if (Result_83 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 17> :
  reqResult.8_10 = reqResult;
  if (reqResult.8_10 == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  EvId_84 = GateEntryBase_67->EntryBase.EventId;
  # DEBUG EvId => EvId_84
  # DEBUG BEGIN_STMT
  EvMemEntry_73->EventId = EvId_84;
  # DEBUG BEGIN_STMT
  EvMemEntry_73->EntryStatus = 0;
  # DEBUG BEGIN_STMT
  if (EvId_84 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _11 = EvId_84 / 8;
  _12 = (unsigned int) _11;
  _13 = Dem_EvMemEntryExists[_12];
  _14 = (unsigned int) EvId_84;
  _15 = _14 & 7;
  _16 = 1 << _15;
  _17 = (unsigned char) _16;
  _18 = _13 & _17;
  if (_18 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  EvMemEntry_73->EventId = 0;
  # DEBUG BEGIN_STMT
  EvMemEntry_73->EntryStatus = 1;
  goto <bb 31>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  EntryDataFreePos_87 = 0;
  # DEBUG EntryDataFreePos => EntryDataFreePos_87
  # DEBUG BEGIN_STMT
  sizeEntryData_89 = Dem_EvMemEntrySize (EvId_84, 1);
  # DEBUG sizeEntryData => sizeEntryData_89
  # DEBUG BEGIN_STMT
  _19 = Dem_EntryDataFreePos[OriginIdx_39];
  if (_19 != 0B)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _20 = Dem_EntryDataFreePos[OriginIdx_39];
  EntryDataFreePos_90 = *_20;
  # DEBUG EntryDataFreePos => EntryDataFreePos_90

  <bb 23> :
  # EntryDataFreePos_49 = PHI <EntryDataFreePos_87(21), EntryDataFreePos_90(22)>
  # DEBUG EntryDataFreePos => EntryDataFreePos_49
  # DEBUG BEGIN_STMT
  EvMemEntry_73->EntryDataPos = EntryDataFreePos_49;
  # DEBUG BEGIN_STMT
  _21 = GateEntryBase_67->EntryBase.OccCtr;
  EvMemEntry_73->OccCtr = _21;
  # DEBUG BEGIN_STMT
  _22 = GateEntryBase_67->EntryBase.OccOrder;
  EvMemEntry_73->OccOrder = _22;
  # DEBUG BEGIN_STMT
  _23 = GateEntryBase_67->EntryBase.EventFailureCycleCounter;
  EvMemEntry_73->EventFailureCycleCounter = _23;
  # DEBUG BEGIN_STMT
  if (OriginIdx_39 == 0)
    goto <bb 24>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  _24 = Dem_GbiDTCKind (EvId_84);
  if (_24 == 2)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _25 = (int) EntryIdx_40;
  _26 = GateOBDFFEntry_46->OBDFF.OBDOccOrder;
  Dem_EntryOBDFF[_25].OBDOccOrder = _26;
  # DEBUG BEGIN_STMT
  _27 = (int) EntryIdx_40;
  _28 = &Dem_EntryOBDFF[_27].OBDFFData;
  _29 = &GateOBDFFEntry_46->OBDFF.OBDFFData;
  TS_MemCpy32 (_28, _29, 35);

  <bb 26> :
  # DEBUG BEGIN_STMT
  Dem_RestoreDerivedEventStatus (GateEntryBase_67, EvMemEntry_73, EvId_84);
  # DEBUG BEGIN_STMT
  if (sizeEntryData_89 != 0)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  _30 = Dem_EntryData[OriginIdx_39];
  _31 = (sizetype) EntryDataFreePos_49;
  _32 = _30 + _31;
  _33 = Dem_GateEntryData[OriginIdx_39];
  _34 = (long unsigned int) sizeEntryData_89;
  TS_MemCpy32 (_32, _33, _34);
  # DEBUG BEGIN_STMT
  _35 = Dem_EntryDataFreePos[OriginIdx_39];
  _36 = *_35;
  _37 = Dem_EntryDataFreePos[OriginIdx_39];
  _38 = sizeEntryData_89 + _36;
  *_37 = _38;

  <bb 28> :
  # DEBUG BEGIN_STMT
  Dem_SetEvEntryExists (EvId_84, 1);
  goto <bb 31>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  EvMemEntry_73->EventId = 0;
  # DEBUG BEGIN_STMT
  EvMemEntry_73->EntryStatus = 1;
  goto <bb 31>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  EvMemEntry_73->EventId = 0;
  # DEBUG BEGIN_STMT
  EvMemEntry_73->EntryStatus = 1;

  <bb 31> :
  # DEBUG BEGIN_STMT
  EntryIdx_106 = EntryIdx_40 + 1;
  # DEBUG EntryIdx => EntryIdx_106

  <bb 32> :
  # EntryIdx_40 = PHI <EntryIdx_72(11), EntryIdx_106(31)>
  # ReadBlockResult_43 = PHI <ReadBlockResult_45(11), ReadBlockResult_42(31)>
  # DEBUG ReadBlockResult => ReadBlockResult_43
  # DEBUG EntryIdx => EntryIdx_40
  # DEBUG BEGIN_STMT
  if (EntryIdx_40 < SizeEventMem_66)
    goto <bb 12>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  # ReadBlockResult_44 = PHI <ReadBlockResult_45(6), ReadBlockResult_43(32)>
  # GateOBDFFEntry_47 = PHI <GateOBDFFEntry_48(6), GateOBDFFEntry_46(32)>
  # DEBUG GateOBDFFEntry => GateOBDFFEntry_47
  # DEBUG ReadBlockResult => ReadBlockResult_44
  # DEBUG BEGIN_STMT
  OriginIdx_107 = OriginIdx_39 + 1;
  # DEBUG OriginIdx => OriginIdx_107

  <bb 34> :
  # OriginIdx_39 = PHI <OriginIdx_64(5), OriginIdx_107(33)>
  # ReadBlockResult_45 = PHI <ReadBlockResult_59(5), ReadBlockResult_44(33)>
  # GateOBDFFEntry_48 = PHI <GateOBDFFEntry_62(5), GateOBDFFEntry_47(33)>
  # DEBUG GateOBDFFEntry => GateOBDFFEntry_48
  # DEBUG ReadBlockResult => ReadBlockResult_45
  # DEBUG OriginIdx => OriginIdx_39
  # DEBUG BEGIN_STMT
  if (OriginIdx_39 <= 3)
    goto <bb 6>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 35> :
  # DEBUG BEGIN_STMT
  reqResult ={v} {CLOBBER};
  return;

}


Dem_ResetNvData ()
{
  Dem_DTCRequestType OccurKindRequest;
  Dem_CounterDataIdxType ByteIdx;
  Dem_CounterDataIdxType LinkIdx;
  Dem_IndicatorIdType IndicatorId;
  Dem_EventIdType EvId;
  int _1;
  int _2;
  int _3;
  int _4;
  int _5;
  int _6;
  int _7;
  unsigned char IndicatorId.6_8;
  unsigned int _9;
  unsigned int _10;
  unsigned char OccurKindRequest.7_11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EvId_22 = 0;
  # DEBUG EvId => EvId_22
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) EvId_12;
  Dem_NvData.DTCStatusMask[_1] = 80;
  # DEBUG BEGIN_STMT
  EvId_40 = EvId_12 + 1;
  # DEBUG EvId => EvId_40

  <bb 4> :
  # EvId_12 = PHI <EvId_22(2), EvId_40(3)>
  # DEBUG EvId => EvId_12
  # DEBUG BEGIN_STMT
  if (EvId_12 <= 14)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dem_NvData.EvMemOvfIndFlags = 0;
  # DEBUG BEGIN_STMT
  Dem_NvData.PfcStatus = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IndicatorId_26 = 0;
  # DEBUG IndicatorId => IndicatorId_26
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  LinkIdx_31 = 0;
  # DEBUG LinkIdx => LinkIdx_31
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _2 = (int) IndicatorId_13;
  _3 = (int) LinkIdx_14;
  Dem_NvData.IndicatorCycleCounter[_2][_3] = 0;
  # DEBUG BEGIN_STMT
  LinkIdx_38 = LinkIdx_14 + 1;
  # DEBUG LinkIdx => LinkIdx_38

  <bb 8> :
  # LinkIdx_14 = PHI <LinkIdx_31(6), LinkIdx_38(7)>
  # DEBUG LinkIdx => LinkIdx_14
  # DEBUG BEGIN_STMT
  if (LinkIdx_14 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ByteIdx_32 = 0;
  # DEBUG ByteIdx => ByteIdx_32
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _4 = (int) IndicatorId_13;
  _5 = (int) ByteIdx_15;
  Dem_NvData.IndicatorCycleCounterRole[_4][_5] = 255;
  # DEBUG BEGIN_STMT
  _6 = (int) IndicatorId_13;
  _7 = (int) ByteIdx_15;
  Dem_NvData.IndicatorCycleCounterWIRStatus[_6][_7] = 0;
  # DEBUG BEGIN_STMT
  ByteIdx_36 = ByteIdx_15 + 1;
  # DEBUG ByteIdx => ByteIdx_36

  <bb 11> :
  # ByteIdx_15 = PHI <ByteIdx_32(9), ByteIdx_36(10)>
  # DEBUG ByteIdx => ByteIdx_15
  # DEBUG BEGIN_STMT
  if (ByteIdx_15 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  IndicatorId.6_8 = IndicatorId_13;
  IndicatorId_33 = IndicatorId.6_8 + 1;
  # DEBUG IndicatorId => IndicatorId_33

  <bb 13> :
  # IndicatorId_13 = PHI <IndicatorId_26(5), IndicatorId_33(12)>
  # DEBUG IndicatorId => IndicatorId_13
  # DEBUG BEGIN_STMT
  if (IndicatorId_13 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Dem_NvData.Dem_OpCycleDCYIsQualified = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OccurKindRequest_28 = 1;
  # DEBUG OccurKindRequest => OccurKindRequest_28
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _9 = (unsigned int) OccurKindRequest_16;
  _10 = _9 + 4294967295;
  Dem_NvData.OccurKindEventId[_10] = 0;
  # DEBUG BEGIN_STMT
  OccurKindRequest.7_11 = OccurKindRequest_16;
  OccurKindRequest_30 = OccurKindRequest.7_11 + 1;
  # DEBUG OccurKindRequest => OccurKindRequest_30

  <bb 16> :
  # OccurKindRequest_16 = PHI <OccurKindRequest_28(14), OccurKindRequest_30(15)>
  # DEBUG OccurKindRequest => OccurKindRequest_16
  # DEBUG BEGIN_STMT
  if (OccurKindRequest_16 <= 4)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_NvMGetNvRAMBlockStatus (NvM_BlockIdType NvDataBlockId)
{
  NvM_RequestResultType RestoredNvData;
  Std_ReturnType Result;
  unsigned char RestoredNvData.5_1;
  Std_ReturnType _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result_6 = NvM_ASR40_GetErrorStatus (NvDataBlockId_4(D), &RestoredNvData);
  # DEBUG Result => Result_6
  # DEBUG BEGIN_STMT
  if (Result_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  RestoredNvData.5_1 = RestoredNvData;
  if (RestoredNvData.5_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Result_7 = 1;
  # DEBUG Result => Result_7

  <bb 5> :
  # Result_2 = PHI <Result_6(2), Result_6(3), Result_7(4)>
  # DEBUG Result => Result_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _8 = Result_2;
  RestoredNvData ={v} {CLOBBER};
  return _8;

}


Dem_MainFunction ()
{
  boolean ErrorReenterPrecondition;
  Dem_ProcessEventJobMaskType ProcessEventJobs;
  struct Dem_EventNotificationDataType Notification;
  struct Dem_EventInfoType EventInfo;
  const Dem_EventKindType eventKind;
  const boolean FirstFailed;
  const Dem_EventStatusType EventStatus;
  const Dem_EventIdType EventId;
  struct Dem_ReadErrorQueueReturnType ReadQueueRetVal;
  Dem_ErrorQueueEntryType QueueEntry;
  boolean TriggerNvMWrite;
  boolean QueueEntryIsFetched;
  <unnamed type> Dem_InitializationState.70_1;
  short unsigned int QueueEntry.71_2;
  short unsigned int QueueEntry.73_3;
  unsigned int _4;
  unsigned int _5;
  short unsigned int QueueEntry.75_6;
  unsigned int _7;
  unsigned int _8;
  short unsigned int QueueEntry.77_9;
  unsigned int _10;
  unsigned int _11;
  short unsigned int QueueEntry.78_12;
  unsigned int _13;
  unsigned int _14;
  unsigned char _15;
  int _16;
  unsigned char _17;
  unsigned int _18;
  unsigned int _19;
  unsigned char _20;
  unsigned char Dem_DoProcessFaultConfirmation.80_21;
  unsigned char iftmp.72_26;
  unsigned char iftmp.74_27;
  unsigned char iftmp.76_28;
  boolean iftmp.79_29;
  unsigned char iftmp.72_43;
  unsigned char iftmp.74_44;
  unsigned char iftmp.76_45;
  unsigned char iftmp.76_46;
  unsigned char iftmp.74_47;
  unsigned char iftmp.72_48;
  boolean iftmp.79_58;
  boolean iftmp.79_59;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.70_1 = Dem_InitializationState;
  if (Dem_InitializationState.70_1 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TriggerNvMWrite_36 = 0;
  # DEBUG TriggerNvMWrite => TriggerNvMWrite_36

  <bb 4> :
  # TriggerNvMWrite_22 = PHI <TriggerNvMWrite_36(3), TriggerNvMWrite_23(24)>
  # DEBUG TriggerNvMWrite => TriggerNvMWrite_22
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  QueueEntry = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  ReadQueueRetVal = Dem_ReadErrorQueueEntry (&QueueEntry);
  # DEBUG BEGIN_STMT
  QueueEntryIsFetched_40 = ReadQueueRetVal.Result;
  # DEBUG QueueEntryIsFetched => QueueEntryIsFetched_40
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (QueueEntryIsFetched_40 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  QueueEntry.71_2 = QueueEntry;
  EventId_42 = QueueEntry.71_2 & 8191;
  # DEBUG EventId => EventId_42
  # DEBUG BEGIN_STMT
  QueueEntry.73_3 = QueueEntry;
  _4 = (unsigned int) QueueEntry.73_3;
  _5 = _4 & 49152;
  if (_5 != 32768)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  QueueEntry.75_6 = QueueEntry;
  _7 = (unsigned int) QueueEntry.75_6;
  _8 = _7 & 49152;
  if (_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  QueueEntry.77_9 = QueueEntry;
  _10 = (unsigned int) QueueEntry.77_9;
  _11 = _10 & 49152;
  if (_11 == 16384)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.76_46 = 5;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.76_45 = 4;

  <bb 10> :
  # iftmp.76_28 = PHI <iftmp.76_46(8), iftmp.76_45(9)>
  iftmp.74_47 = iftmp.76_28;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.74_44 = 0;

  <bb 12> :
  # iftmp.74_27 = PHI <iftmp.74_47(10), iftmp.74_44(11)>
  iftmp.72_48 = iftmp.74_27;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.72_43 = 1;

  <bb 14> :
  # iftmp.72_26 = PHI <iftmp.72_48(12), iftmp.72_43(13)>
  EventStatus_49 = iftmp.72_26;
  # DEBUG EventStatus => EventStatus_49
  # DEBUG BEGIN_STMT
  QueueEntry.78_12 = QueueEntry;
  _13 = (unsigned int) QueueEntry.78_12;
  _14 = _13 >> 13;
  _15 = (unsigned char) _14;
  FirstFailed_50 = _15 & 1;
  # DEBUG FirstFailed => FirstFailed_50
  # DEBUG BEGIN_STMT
  eventKind_52 = Dem_GbiEventKind (EventId_42);
  # DEBUG eventKind => eventKind_52
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Notification.ReplacedEventMsg.EventId = 0;
  Notification.ReplacedEventMsg.OldStatusMask = 0;
  Notification.ReplacedEventMsg.NewStatusMask = 0;
  # DEBUG BEGIN_STMT
  ProcessEventJobs_56 = 0;
  # DEBUG ProcessEventJobs => ProcessEventJobs_56
  # DEBUG BEGIN_STMT
  ErrorReenterPrecondition_57 = 0;
  # DEBUG ErrorReenterPrecondition => ErrorReenterPrecondition_57
  # DEBUG BEGIN_STMT
  _16 = (int) EventId_42;
  _17 = Dem_NvData.DTCStatusMask[_16];
  _18 = (unsigned int) _17;
  _19 = _18 & 1;
  if (_19 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.79_59 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.79_58 = 0;

  <bb 17> :
  # iftmp.79_29 = PHI <iftmp.79_59(15), iftmp.79_58(16)>
  ErrorReenterPrecondition_60 = iftmp.79_29;
  # DEBUG ErrorReenterPrecondition => ErrorReenterPrecondition_60
  # DEBUG BEGIN_STMT
  if (eventKind_52 == 1)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  ProcessEventJobs_64 = ProcessEventJobs_56 | 4;
  # DEBUG ProcessEventJobs => ProcessEventJobs_64
  # DEBUG BEGIN_STMT
  ProcessEventJobs_65 = ProcessEventJobs_64 | 8;
  # DEBUG ProcessEventJobs => ProcessEventJobs_65
  goto <bb 23>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  ProcessEventJobs_61 = ProcessEventJobs_56 | 1;
  # DEBUG ProcessEventJobs => ProcessEventJobs_61
  # DEBUG BEGIN_STMT
  if (EventStatus_49 == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  if (EventStatus_49 == 5)
    goto <bb 21>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 21> :
  if (ErrorReenterPrecondition_60 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  ProcessEventJobs_62 = ProcessEventJobs_61 | 4;
  # DEBUG ProcessEventJobs => ProcessEventJobs_62
  # DEBUG BEGIN_STMT
  ProcessEventJobs_63 = ProcessEventJobs_62 | 8;
  # DEBUG ProcessEventJobs => ProcessEventJobs_63

  <bb 23> :
  # ProcessEventJobs_25 = PHI <ProcessEventJobs_65(18), ProcessEventJobs_61(20), ProcessEventJobs_61(21), ProcessEventJobs_63(22)>
  # DEBUG ProcessEventJobs => ProcessEventJobs_25
  # DEBUG BEGIN_STMT
  EventInfo.EventId = EventId_42;
  # DEBUG BEGIN_STMT
  Dem_ProcessEvent (85, EventInfo, EventStatus_49, FirstFailed_50, ProcessEventJobs_25, &Notification);
  # DEBUG BEGIN_STMT
  TriggerNvMWrite_68 = 1;
  # DEBUG TriggerNvMWrite => TriggerNvMWrite_68
  EventInfo ={v} {CLOBBER};
  Notification ={v} {CLOBBER};

  <bb 24> :
  # TriggerNvMWrite_23 = PHI <TriggerNvMWrite_22(4), TriggerNvMWrite_68(23)>
  # DEBUG TriggerNvMWrite => TriggerNvMWrite_23
  QueueEntry ={v} {CLOBBER};
  ReadQueueRetVal ={v} {CLOBBER};
  # DEBUG BEGIN_STMT
  if (QueueEntryIsFetched_40 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _20 = Dem_ClearDtcAsyncStatus.RunState;
  if (_20 == 1)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  Dem_ProcessClearDTC ();

  <bb 27> :
  # DEBUG BEGIN_STMT
  Dem_DoProcessFaultConfirmation.80_21 = Dem_DoProcessFaultConfirmation;
  if (Dem_DoProcessFaultConfirmation.80_21 != 0)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  Dem_DoProcessFaultConfirmation = 0;
  # DEBUG BEGIN_STMT
  TriggerNvMWrite_75 = 1;
  # DEBUG TriggerNvMWrite => TriggerNvMWrite_75
  # DEBUG BEGIN_STMT
  Dem_SetCDTCOnConfirmation ();

  <bb 29> :
  # TriggerNvMWrite_24 = PHI <TriggerNvMWrite_23(27), TriggerNvMWrite_75(28)>
  # DEBUG TriggerNvMWrite => TriggerNvMWrite_24
  # DEBUG BEGIN_STMT
  if (TriggerNvMWrite_24 != 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  Dem_CheckForTriggerNvmWriteGateEntry ();

  <bb 31> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_SetDTCSuppression (uint32 DTC, Dem_DTCFormatType DTCFormat, boolean SuppressionStatus)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.69_1;
  long unsigned int _2;
  long unsigned int _3;
  Std_ReturnType _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_6 = 1;
  # DEBUG Result => Result_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.69_1 = Dem_InitializationState;
  if (Dem_InitializationState.69_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 51, 32);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = DTC_8(D) + 4294967295;
  if (_2 > 16777214)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (DTCFormat_9(D) == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _3 = DTC_8(D) & 255;
  if (_3 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 51, 18);
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DTCFormat_9(D) > 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 51, 18);
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (SuppressionStatus_10(D) > 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 51, 18);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Result_12 = Dem_InternalSetDTCSuppression (DTC_8(D), DTCFormat_9(D), SuppressionStatus_10(D));
  # DEBUG Result => Result_12

  <bb 13> :
  # Result_4 = PHI <Result_6(3), Result_6(7), Result_6(9), Result_6(11), Result_12(12)>
  # DEBUG Result => Result_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _17 = Result_4;
  return _17;

}


Dem_GetNumberOfEventMemoryEntries (Dem_DTCOriginType DTCOrigin, uint8 * NumberOfEventMemoryEntries)
{
  const Dem_PermanentMemoryEntryType Entry;
  Dem_DTCOriginType MappedDTCOrigin;
  uint8 EventCtr;
  Dem_SizeEvMemEntryType EntryIdx;
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.64_1;
  int _2;
  unsigned int _3;
  unsigned int _4;
  unsigned char EventCtr.65_5;
  unsigned char EntryIdx.66_6;
  unsigned int _7;
  unsigned int _8;
  struct Dem_EventMemoryEntryType * _9;
  unsigned int _10;
  unsigned int _11;
  struct Dem_EventMemoryEntryType * _12;
  short unsigned int _13;
  unsigned char EventCtr.67_14;
  unsigned char EntryIdx.68_15;
  unsigned int _16;
  unsigned int _17;
  unsigned char _18;
  Std_ReturnType _47;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_28 = 1;
  # DEBUG Result => Result_28
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EventCtr_29 = 0;
  # DEBUG EventCtr => EventCtr_29
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.64_1 = Dem_InitializationState;
  if (Dem_InitializationState.64_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 53, 32);
  goto <bb 26>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (DTCOrigin_31(D) > 511)
    goto <bb 10>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (DTCOrigin_31(D) <= 255)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  if (DTCOrigin_31(D) != 1)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  if (DTCOrigin_31(D) != 2)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  if (DTCOrigin_31(D) != 3)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (DTCOrigin_31(D) != 4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 53, 18);
  goto <bb 26>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (NumberOfEventMemoryEntries_32(D) == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 53, 17);
  goto <bb 26>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  MappedDTCOrigin_34 = Dem_GetMappedDTCOrigin (DTCOrigin_31(D), 1);
  # DEBUG MappedDTCOrigin => MappedDTCOrigin_34
  # DEBUG BEGIN_STMT
  if (MappedDTCOrigin_34 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (MappedDTCOrigin_34 == 3)
    goto <bb 15>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  EntryIdx_38 = 0;
  # DEBUG EntryIdx => EntryIdx_38
  goto <bb 19>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _2 = (int) EntryIdx_20;
  Entry_39 = Dem_EventMemoryPermanent[_2];
  # DEBUG Entry => Entry_39
  # DEBUG BEGIN_STMT
  _3 = (unsigned int) Entry_39;
  _4 = _3 & 8191;
  if (_4 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  EventCtr.65_5 = EventCtr_23;
  EventCtr_40 = EventCtr.65_5 + 1;
  # DEBUG EventCtr => EventCtr_40

  <bb 18> :
  # EventCtr_22 = PHI <EventCtr_23(16), EventCtr_40(17)>
  # DEBUG EventCtr => EventCtr_22
  # DEBUG BEGIN_STMT
  EntryIdx.66_6 = EntryIdx_20;
  EntryIdx_41 = EntryIdx.66_6 + 1;
  # DEBUG EntryIdx => EntryIdx_41

  <bb 19> :
  # EntryIdx_20 = PHI <EntryIdx_38(15), EntryIdx_41(18)>
  # EventCtr_23 = PHI <EventCtr_29(15), EventCtr_22(18)>
  # DEBUG EventCtr => EventCtr_23
  # DEBUG EntryIdx => EntryIdx_20
  # DEBUG BEGIN_STMT
  if (EntryIdx_20 <= 3)
    goto <bb 16>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  EntryIdx_35 = 0;
  # DEBUG EntryIdx => EntryIdx_35
  goto <bb 24>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _7 = (unsigned int) MappedDTCOrigin_34;
  _8 = _7 + 4294967295;
  _9 = Dem_EventMem[_8];
  _10 = (unsigned int) EntryIdx_21;
  _11 = _10 * 16;
  _12 = _9 + _11;
  _13 = _12->EventId;
  if (_13 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  EventCtr.67_14 = EventCtr_25;
  EventCtr_36 = EventCtr.67_14 + 1;
  # DEBUG EventCtr => EventCtr_36

  <bb 23> :
  # EventCtr_24 = PHI <EventCtr_25(21), EventCtr_36(22)>
  # DEBUG EventCtr => EventCtr_24
  # DEBUG BEGIN_STMT
  EntryIdx.68_15 = EntryIdx_21;
  EntryIdx_37 = EntryIdx.68_15 + 1;
  # DEBUG EntryIdx => EntryIdx_37

  <bb 24> :
  # EntryIdx_21 = PHI <EntryIdx_35(20), EntryIdx_37(23)>
  # EventCtr_25 = PHI <EventCtr_29(20), EventCtr_24(23)>
  # DEBUG EventCtr => EventCtr_25
  # DEBUG EntryIdx => EntryIdx_21
  # DEBUG BEGIN_STMT
  _16 = (unsigned int) MappedDTCOrigin_34;
  _17 = _16 + 4294967295;
  _18 = Dem_SizeEventMem[_17];
  if (EntryIdx_21 < _18)
    goto <bb 21>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  # EventCtr_26 = PHI <EventCtr_23(19), EventCtr_25(24)>
  # DEBUG EventCtr => EventCtr_26
  # DEBUG BEGIN_STMT
  *NumberOfEventMemoryEntries_32(D) = EventCtr_26;
  # DEBUG BEGIN_STMT
  Result_43 = 0;
  # DEBUG Result => Result_43

  <bb 26> :
  # Result_19 = PHI <Result_28(3), Result_28(10), Result_28(12), Result_28(13), Result_43(25)>
  # DEBUG Result => Result_19
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _47 = Result_19;
  return _47;

}


Dem_GetEventMemoryOverflow (Dem_DTCOriginType DTCOrigin, boolean * OverflowIndication)
{
  Dem_DTCOriginType MappedDTCOrigin;
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.62_1;
  unsigned char _2;
  unsigned int _3;
  unsigned int _4;
  unsigned int _5;
  unsigned char _6;
  unsigned char _7;
  boolean iftmp.63_9;
  boolean iftmp.63_17;
  boolean iftmp.63_18;
  Std_ReturnType _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_11 = 1;
  # DEBUG Result => Result_11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.62_1 = Dem_InitializationState;
  if (Dem_InitializationState.62_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 50, 32);
  goto <bb 18>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (DTCOrigin_13(D) > 511)
    goto <bb 10>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (DTCOrigin_13(D) <= 255)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  if (DTCOrigin_13(D) != 1)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  if (DTCOrigin_13(D) != 2)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  if (DTCOrigin_13(D) != 3)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (DTCOrigin_13(D) != 4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 50, 18);
  goto <bb 18>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (OverflowIndication_14(D) == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 50, 17);
  goto <bb 18>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  MappedDTCOrigin_16 = Dem_GetMappedDTCOrigin (DTCOrigin_13(D), 1);
  # DEBUG MappedDTCOrigin => MappedDTCOrigin_16
  # DEBUG BEGIN_STMT
  if (MappedDTCOrigin_16 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _2 = Dem_NvData.EvMemOvfIndFlags;
  _3 = (unsigned int) MappedDTCOrigin_16;
  _4 = _3 + 4294967295;
  _5 = 1 << _4;
  _6 = (unsigned char) _5;
  _7 = _2 & _6;
  if (_7 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.63_18 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.63_17 = 0;

  <bb 17> :
  # iftmp.63_9 = PHI <iftmp.63_18(15), iftmp.63_17(16)>
  *OverflowIndication_14(D) = iftmp.63_9;
  # DEBUG BEGIN_STMT
  Result_20 = 0;
  # DEBUG Result => Result_20

  <bb 18> :
  # Result_8 = PHI <Result_11(3), Result_11(10), Result_11(12), Result_11(13), Result_20(17)>
  # DEBUG Result => Result_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _24 = Result_8;
  return _24;

}


Dem_GetEventExtendedDataRecord (Dem_EventIdType EventId, uint8 RecordNumber, uint8 * DestBuffer)
{
  const Dem_EDStartByteType EDStartByte;
  const struct Dem_EDSegmentType * const EDSegment;
  Dem_SizeEntryDataType EDSegSize;
  boolean EventMemEntryAvail;
  const struct Dem_EDClassType * const EDClass;
  Dem_EDSegIdxType SegIdxStop;
  Dem_EDSegIdxType SegIdxStart;
  Dem_EDSegIdxType SegIdx;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.60_1;
  unsigned char _2;
  unsigned char _3;
  int _4;
  unsigned char _5;
  const Dem_EDSegIdxType * _6;
  sizetype _7;
  const Dem_EDSegIdxType * _8;
  unsigned char _9;
  int _10;
  const Dem_EDStartByteType * _11;
  unsigned int _12;
  unsigned int _13;
  const Dem_EDStartByteType * _14;
  unsigned char _15;
  sizetype _16;
  uint8 * _17;
  struct Dem_EventMemoryEntryType * EvMemEntry.61_18;
  short unsigned int _53;
  Std_ReturnType _62;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_31 = 1;
  # DEBUG Result => Result_31
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.60_1 = Dem_InitializationState;
  if (Dem_InitializationState.60_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 48, 32);
  goto <bb 27>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_33(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 48, 18);
  goto <bb 27>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_33(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 48, 16);
  goto <bb 27>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (RecordNumber_34(D) == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _2 = RecordNumber_34(D) + 16;
  if (_2 <= 14)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 48, 18);
  goto <bb 27>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (DestBuffer_35(D) == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 48, 17);
  goto <bb 27>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = Dem_GbiEDClassIdx (EventId_33(D));
  _4 = (int) _3;
  EDClass_37 = &Dem_EDClass[_4];
  # DEBUG EDClass => EDClass_37
  # DEBUG BEGIN_STMT
  if (RecordNumber_34(D) != 255)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  SegIdxStart_41 = Dem_FindEDNumIndex (EDClass_37, RecordNumber_34(D));
  # DEBUG SegIdxStart => SegIdxStart_41
  # DEBUG BEGIN_STMT
  SegIdxStop_42 = SegIdxStart_41 + 1;
  # DEBUG SegIdxStop => SegIdxStop_42
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  SegIdxStart_38 = 0;
  # DEBUG SegIdxStart => SegIdxStart_38
  # DEBUG BEGIN_STMT
  SegIdxStop_39 = EDClass_37->NumEDSegs;
  # DEBUG SegIdxStop => SegIdxStop_39

  <bb 16> :
  # SegIdxStart_22 = PHI <SegIdxStart_41(14), SegIdxStart_38(15)>
  # SegIdxStop_23 = PHI <SegIdxStop_42(14), SegIdxStop_39(15)>
  # DEBUG SegIdxStop => SegIdxStop_23
  # DEBUG SegIdxStart => SegIdxStart_22
  # DEBUG BEGIN_STMT
  if (RecordNumber_34(D) == 255)
    goto <bb 18>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _5 = EDClass_37->NumEDSegs;
  if (SegIdxStart_22 < _5)
    goto <bb 18>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EDSegSize_43 = 0;
  # DEBUG EDSegSize => EDSegSize_43
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  EventMemEntryAvail_46 = Dem_SearchForEntry (EventId_33(D), &EvMemEntry, 0B);
  # DEBUG EventMemEntryAvail => EventMemEntryAvail_46
  # DEBUG BEGIN_STMT
  SegIdx_47 = SegIdxStart_22;
  # DEBUG SegIdx => SegIdx_47
  goto <bb 23>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _6 = EDClass_37->EDSegIdx;
  _7 = (sizetype) SegIdx_21;
  _8 = _6 + _7;
  _9 = *_8;
  _10 = (int) _9;
  EDSegment_50 = &Dem_EDSegment[_10];
  # DEBUG EDSegment => EDSegment_50
  # DEBUG BEGIN_STMT
  _11 = EDClass_37->StartByte;
  _12 = (unsigned int) SegIdx_21;
  _13 = _12 * 2;
  _14 = _11 + _13;
  EDStartByte_51 = *_14;
  # DEBUG EDStartByte => EDStartByte_51
  # DEBUG BEGIN_STMT
  if (EventMemEntryAvail_46 == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  _15 = EDSegment_50->AlwaysAvailable;
  if (_15 == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _16 = (sizetype) EDSegSize_25;
  _17 = DestBuffer_35(D) + _16;
  EvMemEntry.61_18 = EvMemEntry;
  _53 = Dem_AssembleExtendedDataSeg (EventId_33(D), EDSegment_50, EDStartByte_51, _17, EvMemEntry.61_18);
  EDSegSize_54 = _53 + EDSegSize_25;
  # DEBUG EDSegSize => EDSegSize_54

  <bb 22> :
  # EDSegSize_24 = PHI <EDSegSize_25(20), EDSegSize_54(21)>
  # DEBUG EDSegSize => EDSegSize_24
  # DEBUG BEGIN_STMT
  SegIdx_55 = SegIdx_21 + 1;
  # DEBUG SegIdx => SegIdx_55

  <bb 23> :
  # SegIdx_21 = PHI <SegIdx_47(18), SegIdx_55(22)>
  # EDSegSize_25 = PHI <EDSegSize_43(18), EDSegSize_24(22)>
  # DEBUG EDSegSize => EDSegSize_25
  # DEBUG SegIdx => SegIdx_21
  # DEBUG BEGIN_STMT
  if (SegIdx_21 < SegIdxStop_23)
    goto <bb 19>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (EDSegSize_25 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  Result_49 = 0;
  # DEBUG Result => Result_49

  <bb 26> :
  # Result_19 = PHI <Result_31(17), Result_31(24), Result_49(25)>
  # DEBUG Result => Result_19
  EvMemEntry ={v} {CLOBBER};

  <bb 27> :
  # Result_20 = PHI <Result_31(3), Result_31(5), Result_31(7), Result_31(10), Result_31(12), Result_19(26)>
  # DEBUG Result => Result_20
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _62 = Result_20;
  return _62;

}


Dem_ASR42_GetEventFreezeFrameData (Dem_EventIdType EventId, uint8 RecordNumber, boolean ReportTotalRecord, uint16 DataId, uint8 * DestBuffer)
{
  const Dem_SizeFFType FFSegSize;
  const Dem_SizeFFType SizeOfFF;
  const Dem_EntryDataType * const FFEntryData;
  Dem_FFIdxType FFIndex;
  const Dem_FFIdxType NumFF;
  Dem_FFSegIdxType FFSegIdx;
  Dem_SizeFFType StartByte;
  const struct Dem_FFClassType * const FFClass;
  const Dem_FFIdxType MaxNumFF;
  boolean FFRecNumValid;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.55_1;
  short unsigned int _2;
  int _3;
  unsigned char _4;
  struct Dem_EventMemoryEntryType * EvMemEntry.56_5;
  unsigned char _6;
  struct Dem_EventMemoryEntryType * EvMemEntry.57_7;
  struct Dem_EventMemoryEntryType * EvMemEntry.58_8;
  long unsigned int _9;
  int _10;
  const struct Dem_FFSegmentType * _11;
  short unsigned int StartByte.59_12;
  sizetype _13;
  const Dem_EntryDataType * _14;
  long unsigned int _15;
  Std_ReturnType _72;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_29 = 48;
  # DEBUG Result => Result_29
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.55_1 = Dem_InitializationState;
  if (Dem_InitializationState.55_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 49, 32);
  goto <bb 33>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_31(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 49, 18);
  goto <bb 33>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_31(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 49, 16);
  goto <bb 33>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ReportTotalRecord_32(D) > 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 49, 18);
  goto <bb 33>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (DestBuffer_33(D) == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 49, 17);
  goto <bb 33>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFRecNumValid_34 = 0;
  # DEBUG FFRecNumValid => FFRecNumValid_34
  # DEBUG BEGIN_STMT
  MaxNumFF_36 = Dem_GbiMaxNumFFRecs (EventId_31(D));
  # DEBUG MaxNumFF => MaxNumFF_36
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (RecordNumber_38(D) != 255)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  FFRecNumValid_40 = Dem_CheckFFRecNumValid (EventId_31(D), RecordNumber_38(D));
  # DEBUG FFRecNumValid => FFRecNumValid_40

  <bb 14> :
  # FFRecNumValid_19 = PHI <FFRecNumValid_34(12), FFRecNumValid_40(13)>
  # DEBUG FFRecNumValid => FFRecNumValid_19
  # DEBUG BEGIN_STMT
  if (RecordNumber_38(D) == 255)
    goto <bb 16>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  if (FFRecNumValid_19 == 1)
    goto <bb 16>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiFFClassIdx (EventId_31(D));
  _3 = (int) _2;
  FFClass_43 = &Dem_FFClass[_3];
  # DEBUG FFClass => FFClass_43
  # DEBUG BEGIN_STMT
  StartByte = 0;
  # DEBUG BEGIN_STMT
  FFSegIdx_45 = 65535;
  # DEBUG FFSegIdx => FFSegIdx_45
  # DEBUG BEGIN_STMT
  if (ReportTotalRecord_32(D) == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FFSegIdx_48 = Dem_FindFFSegIdx (2, FFClass_43, DataId_46(D), &StartByte);
  # DEBUG FFSegIdx => FFSegIdx_48

  <bb 18> :
  # FFSegIdx_20 = PHI <FFSegIdx_45(16), FFSegIdx_48(17)>
  # DEBUG FFSegIdx => FFSegIdx_20
  # DEBUG BEGIN_STMT
  if (ReportTotalRecord_32(D) == 1)
    goto <bb 20>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  if (FFSegIdx_20 != 65535)
    goto <bb 20>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _4 = Dem_SearchForEntry (EventId_31(D), &EvMemEntry, 0B);
  if (_4 == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  EvMemEntry.56_5 = EvMemEntry;
  _6 = EvMemEntry.56_5->OccCtr;
  NumFF_51 = MIN_EXPR <MaxNumFF_36, _6>;
  # DEBUG NumFF => NumFF_51
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (RecordNumber_38(D) == 255)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  FFIndex_54 = NumFF_51 + 255;
  # DEBUG FFIndex => FFIndex_54
  goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  EvMemEntry.57_7 = EvMemEntry;
  FFIndex_53 = Dem_CheckFFRecNumStored (EvMemEntry.57_7, RecordNumber_38(D));
  # DEBUG FFIndex => FFIndex_53

  <bb 24> :
  # FFIndex_21 = PHI <FFIndex_54(22), FFIndex_53(23)>
  # DEBUG FFIndex => FFIndex_21
  # DEBUG BEGIN_STMT
  if (FFIndex_21 < NumFF_51)
    goto <bb 25>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  EvMemEntry.58_8 = EvMemEntry;
  FFEntryData_56 = Dem_FFEntryData (EvMemEntry.58_8, FFClass_43, FFIndex_21);
  # DEBUG FFEntryData => FFEntryData_56
  # DEBUG BEGIN_STMT
  if (ReportTotalRecord_32(D) == 1)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  SizeOfFF_61 = Dem_SizeOfFF (2, FFClass_43);
  # DEBUG SizeOfFF => SizeOfFF_61
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) SizeOfFF_61;
  TS_MemCpy32 (DestBuffer_33(D), FFEntryData_56, _9);
  goto <bb 28>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  _10 = (int) FFSegIdx_20;
  _11 = &Dem_FFSegment[_10];
  FFSegSize_58 = Dem_SizeOfFFSegment (_11);
  # DEBUG FFSegSize => FFSegSize_58
  # DEBUG BEGIN_STMT
  StartByte.59_12 = StartByte;
  _13 = (sizetype) StartByte.59_12;
  _14 = FFEntryData_56 + _13;
  _15 = (long unsigned int) FFSegSize_58;
  TS_MemCpy32 (DestBuffer_33(D), _14, _15);

  <bb 28> :
  # DEBUG BEGIN_STMT
  Result_63 = 0;
  # DEBUG Result => Result_63
  goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  Result_49 = 50;
  # DEBUG Result => Result_49

  <bb 30> :
  # Result_16 = PHI <Result_29(24), Result_49(29), Result_29(20), Result_63(28)>
  # DEBUG Result => Result_16
  StartByte ={v} {CLOBBER};
  goto <bb 32>; [INV]

  <bb 31> :
  # DEBUG BEGIN_STMT
  Result_41 = 49;
  # DEBUG Result => Result_41

  <bb 32> :
  # Result_17 = PHI <Result_16(30), Result_41(31)>
  # DEBUG Result => Result_17
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  EvMemEntry ={v} {CLOBBER};

  <bb 33> :
  # Result_18 = PHI <Result_29(3), Result_29(5), Result_29(7), Result_29(9), Result_29(11), Result_17(32)>
  # DEBUG Result => Result_18
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _72 = Result_18;
  return _72;

}


Dem_GetEventFreezeFrameData (Dem_EventIdType EventId, uint8 RecordNumber, boolean ReportTotalRecord, uint16 DataId, uint8 * DestBuffer)
{
  Std_ReturnType Result;
  Std_ReturnType _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_2 = 1;
  # DEBUG Result => Result_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result_10 = Dem_ASR42_GetEventFreezeFrameData (EventId_4(D), RecordNumber_5(D), ReportTotalRecord_6(D), DataId_7(D), DestBuffer_8(D));
  # DEBUG Result => Result_10
  # DEBUG BEGIN_STMT
  if (Result_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Result_11 = 1;
  # DEBUG Result => Result_11

  <bb 4> :
  # Result_1 = PHI <Result_10(2), Result_11(3)>
  # DEBUG Result => Result_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = Result_1;
  return _12;

}


Dem_GetIndicatorStatus (Dem_IndicatorIdType IndicatorId, Dem_IndicatorStatusType * IndicatorStatus)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.54_1;
  unsigned char _2;
  Std_ReturnType _15;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_5 = 1;
  # DEBUG Result => Result_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.54_1 = Dem_InitializationState;
  if (Dem_InitializationState.54_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 41, 32);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (IndicatorId_7(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 41, 18);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (IndicatorStatus_8(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 41, 17);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = Dem_InternalGetIndicatorStatus (IndicatorId_7(D), 0);
  *IndicatorStatus_8(D) = _2;
  # DEBUG BEGIN_STMT
  Result_11 = 0;
  # DEBUG Result => Result_11

  <bb 9> :
  # Result_3 = PHI <Result_5(3), Result_5(5), Result_5(7), Result_11(8)>
  # DEBUG Result => Result_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = Result_3;
  return _15;

}


Dem_GetFaultDetectionCounter (Dem_EventIdType EventId, sint8 * FaultDetectionCounter)
{
  const Dem_DebounceType Algorithm;
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.53_1;
  Std_ReturnType (*<T726>) (Dem_EventIdType, sint8 *) _2;
  Std_ReturnType (*<T726>) (Dem_EventIdType, sint8 *) _3;
  Std_ReturnType _18;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_6 = 1;
  # DEBUG Result => Result_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.53_1 = Dem_InitializationState;
  if (Dem_InitializationState.53_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 62, 32);
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_8(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 62, 18);
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_8(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 62, 16);
  goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (FaultDetectionCounter_9(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 62, 17);
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Algorithm_11 = Dem_GbiDebounceAlgo (EventId_8(D));
  # DEBUG Algorithm => Algorithm_11
  # DEBUG BEGIN_STMT
  _2 = Dem_DebounceFctPtrTable[Algorithm_11].GetFDCFct;
  if (_2 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _3 = Dem_DebounceFctPtrTable[Algorithm_11].GetFDCFct;
  Result_13 = _3 (EventId_8(D), FaultDetectionCounter_9(D));
  # DEBUG Result => Result_13

  <bb 12> :
  # Result_4 = PHI <Result_6(3), Result_6(5), Result_6(7), Result_6(9), Result_6(10), Result_13(11)>
  # DEBUG Result => Result_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _18 = Result_4;
  return _18;

}


Dem_GetEventFreezeFrameDataEx (Dem_EventIdType EventId, uint8 RecordNumber, uint16 DataId, uint8 * DestBuffer, uint16 * BufSize)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.52_1;
  Std_ReturnType _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_3 = 1;
  # DEBUG Result => Result_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.52_1 = Dem_InitializationState;
  if (Dem_InitializationState.52_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 110, 32);
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_5(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 110, 18);
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_5(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 110, 16);
  goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DestBuffer_6(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 110, 17);
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (BufSize_7(D) == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 110, 17);

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = Result_3;
  return _13;

}


Dem_GetEventExtendedDataRecordEx (Dem_EventIdType EventId, uint8 RecordNumber, uint8 * DestBuffer, uint16 * BufSize)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.51_1;
  Std_ReturnType _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_3 = 1;
  # DEBUG Result => Result_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.51_1 = Dem_InitializationState;
  if (Dem_InitializationState.51_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 109, 32);
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_5(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 109, 18);
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_5(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 109, 16);
  goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DestBuffer_6(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 109, 17);
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (BufSize_7(D) == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 109, 17);

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = Result_3;
  return _13;

}


Dem_GetDebouncingOfEvent (Dem_EventIdType EventId, Dem_DebouncingStateType * DebouncingState)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.50_1;
  Std_ReturnType _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_3 = 1;
  # DEBUG Result => Result_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.50_1 = Dem_InitializationState;
  if (Dem_InitializationState.50_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 159, 32);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_5(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 159, 18);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_5(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 159, 16);
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DebouncingState_6(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 159, 17);

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = Result_3;
  return _11;

}


Dem_SetEnableCondition (uint8 EnableConditionID, boolean ConditionFulfilled)
{
  const Dem_EnCondLnkType GrpLnkNextIdx;
  const Dem_EnCondLnkType GrpLnkStartIdx;
  Dem_EnCondLnkType GrpIdx;
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.48_1;
  int _2;
  unsigned char _3;
  int _4;
  unsigned int _5;
  unsigned int _6;
  int _7;
  unsigned char _8;
  int _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  int _13;
  unsigned char _14;
  int _15;
  unsigned char _16;
  unsigned char _17;
  unsigned char _18;
  unsigned char GrpIdx.49_19;
  int _20;
  Std_ReturnType _44;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_27 = 1;
  # DEBUG Result => Result_27
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.48_1 = Dem_InitializationState;
  if (Dem_InitializationState.48_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 57, 32);
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EnableConditionID_29(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 57, 16);
  goto <bb 17>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ConditionFulfilled_30(D) > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 57, 18);
  goto <bb 17>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = (int) EnableConditionID_29(D);
  _3 = Dem_EnCondStatus[_2];
  if (ConditionFulfilled_30(D) != _3)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = (int) EnableConditionID_29(D);
  GrpLnkStartIdx_32 = Dem_EnCondToEvIdLink[_4];
  # DEBUG GrpLnkStartIdx => GrpLnkStartIdx_32
  # DEBUG BEGIN_STMT
  _5 = (unsigned int) EnableConditionID_29(D);
  _6 = _5 + 1;
  GrpLnkNextIdx_33 = Dem_EnCondToEvIdLink[_6];
  # DEBUG GrpLnkNextIdx => GrpLnkNextIdx_33
  # DEBUG BEGIN_STMT
  GrpIdx_34 = GrpLnkStartIdx_32;
  # DEBUG GrpIdx => GrpIdx_34
  goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (ConditionFulfilled_30(D) == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _7 = (int) GrpIdx_22;
  _8 = Dem_EnCondGrpLink[_7];
  _9 = (int) _8;
  _10 = Dem_EnCondGrpStatusCounter[_9];
  _11 = _10;
  _12 = _11 + 1;
  Dem_EnCondGrpStatusCounter[_9] = _12;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _13 = (int) GrpIdx_22;
  _14 = Dem_EnCondGrpLink[_13];
  _15 = (int) _14;
  _16 = Dem_EnCondGrpStatusCounter[_15];
  _17 = _16;
  _18 = _17 + 255;
  Dem_EnCondGrpStatusCounter[_15] = _18;

  <bb 13> :
  # DEBUG BEGIN_STMT
  GrpIdx.49_19 = GrpIdx_22;
  GrpIdx_38 = GrpIdx.49_19 + 1;
  # DEBUG GrpIdx => GrpIdx_38

  <bb 14> :
  # GrpIdx_22 = PHI <GrpIdx_34(9), GrpIdx_38(13)>
  # DEBUG GrpIdx => GrpIdx_22
  # DEBUG BEGIN_STMT
  if (GrpIdx_22 < GrpLnkNextIdx_33)
    goto <bb 10>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _20 = (int) EnableConditionID_29(D);
  Dem_EnCondStatus[_20] = ConditionFulfilled_30(D);

  <bb 16> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Result_40 = 0;
  # DEBUG Result => Result_40

  <bb 17> :
  # Result_21 = PHI <Result_27(3), Result_27(5), Result_27(7), Result_40(16)>
  # DEBUG Result => Result_21
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _44 = Result_21;
  return _44;

}


Dem_GetDTCOfEvent (Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32 * DTCOfEvent)
{
  uint32 DTCValue;
  Std_ReturnType Result;
  Std_ReturnType _23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_6 = 1;
  # DEBUG Result => Result_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (EventId_7(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 13, 18);
  goto <bb 19>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_7(D) > 14)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 13, 16);
  goto <bb 19>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (DTCFormat_8(D) > 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 13, 18);
  goto <bb 19>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DTCOfEvent_9(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 13, 17);
  goto <bb 19>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (DTCFormat_8(D) == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  DTCValue_15 = Dem_GetObdDTC (EventId_7(D));
  # DEBUG DTCValue => DTCValue_15
  goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (DTCFormat_8(D) == 2)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  DTCValue_13 = 0;
  # DEBUG DTCValue => DTCValue_13
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  DTCValue_12 = Dem_GetUdsDTC (EventId_7(D));
  # DEBUG DTCValue => DTCValue_12

  <bb 15> :
  # DTCValue_3 = PHI <DTCValue_15(11), DTCValue_13(13), DTCValue_12(14)>
  # DEBUG DTCValue => DTCValue_3
  # DEBUG BEGIN_STMT
  if (DTCValue_3 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Result_17 = 2;
  # DEBUG Result => Result_17
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Result_16 = 0;
  # DEBUG Result => Result_16

  <bb 18> :
  # Result_1 = PHI <Result_17(16), Result_16(17)>
  # DEBUG Result => Result_1
  # DEBUG BEGIN_STMT
  *DTCOfEvent_9(D) = DTCValue_3;

  <bb 19> :
  # Result_2 = PHI <Result_6(3), Result_6(5), Result_6(7), Result_6(9), Result_1(18)>
  # DEBUG Result => Result_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = Result_2;
  return _23;

}


Dem_GetEventTested (Dem_EventIdType EventId, boolean * EventTested)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.47_1;
  int _2;
  unsigned char _3;
  unsigned int _4;
  unsigned int _5;
  Std_ReturnType _20;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_9 = 1;
  # DEBUG Result => Result_9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.47_1 = Dem_InitializationState;
  if (Dem_InitializationState.47_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 12, 32);
  goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_11(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 12, 18);
  goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_11(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 12, 16);
  goto <bb 14>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EventTested_12(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 12, 17);
  goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = (int) EventId_11(D);
  _3 = Dem_NvData.DTCStatusMask[_2];
  _4 = (unsigned int) _3;
  _5 = _4 & 64;
  if (_5 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  *EventTested_12(D) = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  *EventTested_12(D) = 1;

  <bb 13> :
  # DEBUG BEGIN_STMT
  Result_15 = 0;
  # DEBUG Result => Result_15

  <bb 14> :
  # Result_6 = PHI <Result_9(3), Result_9(5), Result_9(7), Result_9(9), Result_15(13)>
  # DEBUG Result => Result_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _20 = Result_6;
  return _20;

}


Dem_GetEventFailed (Dem_EventIdType EventId, boolean * EventFailed)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.46_1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  Std_ReturnType _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_7 = 1;
  # DEBUG Result => Result_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.46_1 = Dem_InitializationState;
  if (Dem_InitializationState.46_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 11, 32);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_9(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 11, 18);
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_9(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 11, 16);
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EventFailed_10(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 11, 17);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = (int) EventId_9(D);
  _3 = Dem_NvData.DTCStatusMask[_2];
  _4 = _3 & 1;
  *EventFailed_10(D) = _4;
  # DEBUG BEGIN_STMT
  Result_12 = 0;
  # DEBUG Result => Result_12

  <bb 11> :
  # Result_5 = PHI <Result_7(3), Result_7(5), Result_7(7), Result_7(9), Result_12(10)>
  # DEBUG Result => Result_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _17 = Result_5;
  return _17;

}


Dem_GetEventStatus (Dem_EventIdType EventId, Dem_EventStatusExtendedType * EventStatusExtended)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.45_1;
  int _2;
  unsigned char _3;
  Std_ReturnType _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_6 = 1;
  # DEBUG Result => Result_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.45_1 = Dem_InitializationState;
  if (Dem_InitializationState.45_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 10, 32);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_8(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 10, 18);
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_8(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 10, 16);
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EventStatusExtended_9(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 10, 17);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = (int) EventId_8(D);
  _3 = Dem_NvData.DTCStatusMask[_2];
  *EventStatusExtended_9(D) = _3;
  # DEBUG BEGIN_STMT
  Result_11 = 0;
  # DEBUG Result => Result_11

  <bb 11> :
  # Result_4 = PHI <Result_6(3), Result_6(5), Result_6(7), Result_6(9), Result_11(10)>
  # DEBUG Result => Result_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = Result_4;
  return _16;

}


Dem_SetCycleQualified (Dem_OperationCycleIdType OperationCycleId)
{
  const Dem_IndicatorIdType IndicatorId;
  const Dem_CounterDataIdxType CounterDataIdx;
  Dem_IndicatorIdxType IndicatorIdx;
  Dem_EventIdType EventId;
  boolean ProcessEvents;
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.42_1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;
  unsigned char _6;
  unsigned char _7;
  unsigned int _8;
  unsigned char _9;
  unsigned int _10;
  unsigned int _11;
  unsigned int _12;
  unsigned char _13;
  unsigned char _14;
  unsigned char IndicatorIdx.43_15;
  unsigned char _16;
  int _17;
  unsigned char _18;
  int _19;
  unsigned char _20;
  short unsigned int _21;
  Std_ReturnType _58;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_33 = 1;
  # DEBUG Result => Result_33
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.42_1 = Dem_InitializationState;
  if (Dem_InitializationState.42_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 86, 32);
  goto <bb 24>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (OperationCycleId_35(D) != 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 86, 16);
  goto <bb 24>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = (int) OperationCycleId_35(D);
  _3 = Dem_OpCycleState[_2];
  if (_3 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 86, 64);
  goto <bb 24>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ProcessEvents_36 = 0;
  # DEBUG ProcessEvents => ProcessEvents_36
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _4 = Dem_NvData.Dem_OpCycleDCYIsQualified;
  if (_4 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ProcessEvents_38 = 1;
  # DEBUG ProcessEvents => ProcessEvents_38
  # DEBUG BEGIN_STMT
  Dem_NvData.Dem_OpCycleDCYIsQualified = 1;
  # DEBUG BEGIN_STMT
  Dem_DoProcessFaultConfirmation = 1;

  <bb 10> :
  # ProcessEvents_23 = PHI <ProcessEvents_36(8), ProcessEvents_38(9)>
  # DEBUG ProcessEvents => ProcessEvents_23
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (ProcessEvents_23 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  EventId_42 = 1;
  # DEBUG EventId => EventId_42
  # DEBUG BEGIN_STMT
  goto <bb 22>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 13> :
  # EventId_24 = PHI <EventId_25(12), EventId_52(20)>
  # DEBUG EventId => EventId_24
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Dem_GbiOpCycleIdx (EventId_24);
  if (_5 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _6 = Dem_IsMILEvent (EventId_24, &IndicatorIdx);
  if (_6 == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  CounterDataIdx_46 = IndicatorIdx;
  # DEBUG CounterDataIdx => CounterDataIdx_46
  # DEBUG BEGIN_STMT
  IndicatorId_47 = 0;
  # DEBUG IndicatorId => IndicatorId_47
  # DEBUG BEGIN_STMT
  _7 = CounterDataIdx_46 / 8;
  _8 = (unsigned int) _7;
  _9 = Dem_NvData.IndicatorCycleCounterRole[0][_8];
  _10 = (unsigned int) CounterDataIdx_46;
  _11 = _10 & 7;
  _12 = 1 << _11;
  _13 = (unsigned char) _12;
  _14 = _9 & _13;
  if (_14 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  IndicatorIdx.43_15 = IndicatorIdx;
  _16 = Dem_ProcessIndicatorFailureCycleCounter (IndicatorIdx.43_15, EventId_24, 0);
  if (_16 == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _17 = (int) EventId_24;
  _18 = Dem_NvData.DTCStatusMask[_17];
  _19 = (int) EventId_24;
  _20 = _18 | 128;
  Dem_NvData.DTCStatusMask[_19] = _20;
  # DEBUG BEGIN_STMT
  Dem_PermanentMemoryAddEntry (EventId_24);

  <bb 18> :
  IndicatorIdx ={v} {CLOBBER};

  <bb 19> :
  # DEBUG BEGIN_STMT
  EventId_52 = EventId_24 + 1;
  # DEBUG EventId => EventId_52
  # DEBUG BEGIN_STMT
  _21 = EventId_52 % 10;
  if (_21 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  if (EventId_52 <= 14)
    goto <bb 13>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 22> :
  # EventId_25 = PHI <EventId_42(11), EventId_52(21)>
  # DEBUG EventId => EventId_25
  # DEBUG BEGIN_STMT
  if (EventId_25 <= 14)
    goto <bb 12>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  Result_54 = 0;
  # DEBUG Result => Result_54

  <bb 24> :
  # Result_22 = PHI <Result_33(3), Result_33(5), Result_33(7), Result_54(23)>
  # DEBUG Result => Result_22
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _58 = Result_22;
  return _58;

}


Dem_SetOperationCycleState (Dem_OperationCycleIdType OperationCycleId, Dem_OperationCycleStateType CycleState)
{
  Dem_OperationCycleStateType * const StoredCycleState;
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.30_1;
  int _2;
  unsigned char _3;
  Std_ReturnType _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_8 = 1;
  # DEBUG Result => Result_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.30_1 = Dem_InitializationState;
  if (Dem_InitializationState.30_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 8, 32);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (OperationCycleId_10(D) > 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 8, 16);
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (CycleState_11(D) > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 8, 18);
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = (int) OperationCycleId_10(D);
  StoredCycleState_12 = &Dem_OpCycleState[_2];
  # DEBUG StoredCycleState => StoredCycleState_12
  # DEBUG BEGIN_STMT
  _3 = *StoredCycleState_12;
  if (_3 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Dem_OpCycleProcessCycleEnd (OperationCycleId_10(D));

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (CycleState_11(D) == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Dem_OpCycleProcessCycleStart (OperationCycleId_10(D));

  <bb 12> :
  # DEBUG BEGIN_STMT
  *StoredCycleState_12 = CycleState_11(D);
  # DEBUG BEGIN_STMT
  Dem_CheckForTriggerNvmWriteGateEntry ();
  # DEBUG BEGIN_STMT
  Result_17 = 0;
  # DEBUG Result => Result_17

  <bb 13> :
  # Result_4 = PHI <Result_8(3), Result_8(5), Result_8(7), Result_17(12)>
  # DEBUG Result => Result_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _21 = Result_4;
  return _21;

}


Dem_ClearPrestoredFreezeFrame (Dem_EventIdType EventId)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.29_1;
  unsigned char _2;
  Std_ReturnType _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_4 = 1;
  # DEBUG Result => Result_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.29_1 = Dem_InitializationState;
  if (Dem_InitializationState.29_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 7, 32);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_6(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 7, 18);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_6(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 7, 16);
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiEnablePrestorage (EventId_6(D));
  if (_2 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 7, 16);

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = Result_4;
  return _12;

}


Dem_PrestoreFreezeFrame (Dem_EventIdType EventId)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.28_1;
  unsigned char _2;
  Std_ReturnType _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_4 = 1;
  # DEBUG Result => Result_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.28_1 = Dem_InitializationState;
  if (Dem_InitializationState.28_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 6, 32);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_6(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 6, 18);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_6(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 6, 16);
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiEnablePrestorage (EventId_6(D));
  if (_2 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 6, 16);

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = Result_4;
  return _12;

}


Dem_ResetEventDebounceStatus (Dem_EventIdType EventId, Dem_DebounceResetStatusType DebounceResetStatus)
{
  Dem_DebounceType DebounceAlgo;
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.27_1;
  <unnamed type> _2;
  void (*<T710>) (Dem_EventIdType) _3;
  void (*<T710>) (Dem_EventIdType) _4;
  void (*<T710>) (Dem_EventIdType) _5;
  Std_ReturnType _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_9 = 1;
  # DEBUG Result => Result_9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.27_1 = Dem_InitializationState;
  if (Dem_InitializationState.27_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 9, 32);
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_11(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 9, 18);
  goto <bb 17>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_11(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 9, 16);
  goto <bb 17>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DebounceResetStatus_12(D) > 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 9, 18);
  goto <bb 17>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiDebounceAlgo (EventId_11(D));
  if (_2 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 9, 16);
  goto <bb 17>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  DebounceAlgo_15 = Dem_GbiDebounceAlgo (EventId_11(D));
  # DEBUG DebounceAlgo => DebounceAlgo_15
  # DEBUG BEGIN_STMT
  if (DebounceResetStatus_12(D) == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _3 = Dem_DebounceFctPtrTable[DebounceAlgo_15].ResetFct;
  _3 (EventId_11(D));
  goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _4 = Dem_DebounceFctPtrTable[DebounceAlgo_15].FreezeFct;
  if (_4 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _5 = Dem_DebounceFctPtrTable[DebounceAlgo_15].FreezeFct;
  _5 (EventId_11(D));

  <bb 16> :
  # DEBUG BEGIN_STMT
  Result_18 = 0;
  # DEBUG Result => Result_18

  <bb 17> :
  # Result_6 = PHI <Result_9(3), Result_9(5), Result_9(7), Result_9(9), Result_9(11), Result_18(16)>
  # DEBUG Result => Result_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _24 = Result_6;
  return _24;

}


Dem_ResetEventStatus (Dem_EventIdType EventId)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.26_1;
  int _2;
  unsigned char _3;
  unsigned int _4;
  unsigned int _5;
  int _6;
  unsigned char _7;
  unsigned int _8;
  unsigned int _9;
  int _10;
  unsigned char _11;
  int _12;
  unsigned char _13;
  <unnamed type> _14;
  void (*<T710>) (Dem_EventIdType) _15;
  Std_ReturnType _33;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_21 = 1;
  # DEBUG Result => Result_21
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.26_1 = Dem_InitializationState;
  if (Dem_InitializationState.26_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 5, 32);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_23(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 5, 18);
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_23(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 5, 16);
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = (int) EventId_23(D);
  _3 = Dem_NvData.DTCStatusMask[_2];
  _4 = (unsigned int) _3;
  _5 = _4 & 64;
  if (_5 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _6 = (int) EventId_23(D);
  _7 = Dem_NvData.DTCStatusMask[_6];
  _8 = (unsigned int) _7;
  _9 = _8 & 1;
  if (_9 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _10 = (int) EventId_23(D);
  _11 = Dem_NvData.DTCStatusMask[_10];
  _12 = (int) EventId_23(D);
  _13 = _11 & 254;
  Dem_NvData.DTCStatusMask[_12] = _13;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _14 = Dem_GbiDebounceAlgo (EventId_23(D));
  _15 = Dem_DebounceFctPtrTable[_14].ResetFct;
  _15 (EventId_23(D));
  # DEBUG BEGIN_STMT
  Result_28 = 0;
  # DEBUG Result => Result_28

  <bb 12> :
  # Result_16 = PHI <Result_21(8), Result_28(11)>
  # DEBUG Result => Result_16
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 13> :
  # Result_17 = PHI <Result_21(3), Result_21(5), Result_21(7), Result_16(12)>
  # DEBUG Result => Result_17
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _33 = Result_17;
  return _33;

}


Dem_SetEventStatus (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
{
  Std_ReturnType Result;
  <unnamed type> Dem_InitializationState.25_1;
  unsigned char _2;
  Std_ReturnType _19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result_5 = 1;
  # DEBUG Result => Result_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.25_1 = Dem_InitializationState;
  if (Dem_InitializationState.25_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 32);
  goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_7(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 18);
  goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_7(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 16);
  goto <bb 14>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EventStatus_8(D) > 3)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 18);
  goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiEventKind (EventId_7(D));
  if (_2 != 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 18);
  goto <bb 14>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Result_11 = Dem_InternalProcessEventReport (EventId_7(D), EventStatus_8(D), 1);
  # DEBUG Result => Result_11
  # DEBUG BEGIN_STMT
  if (Result_11 == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 16);
  # DEBUG BEGIN_STMT
  Result_13 = 1;
  # DEBUG Result => Result_13

  <bb 14> :
  # Result_3 = PHI <Result_5(3), Result_5(5), Result_5(7), Result_5(9), Result_5(11), Result_11(12), Result_13(13)>
  # DEBUG Result => Result_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _19 = Result_3;
  return _19;

}


Dem_ReportErrorStatusCore (Dem_EventIdType EventId, Dem_EventStatusType EventStatus, boolean QueuedInPreinitPhase)
{
  <unnamed type> Dem_InitializationState.19_1;
  unsigned char _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.19_1 = Dem_InitializationState;
  if (Dem_InitializationState.19_1 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (QueuedInPreinitPhase_5(D) == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Dem_InternalProcessEventReport (EventId_6(D), EventStatus_7(D), 2);
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Dem_InternalProcessEventReport (EventId_6(D), EventStatus_7(D), 1);
  if (_2 == 3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 16);

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ReportErrorStatusPreInit (struct Dem_EventInfoType EventInfo, Dem_EventStatusType EventStatus)
{
  boolean FirstFailed;
  boolean queueWriteSuccess;
  Dem_EventIdType EventId;
  Std_ReturnType debounceResult;
  Dem_EventStatusType PreviousEntryStatus;
  boolean EntryPresent;
  unsigned char _1;
  unsigned char debounceResult.20_2;
  unsigned char EventStatus.21_3;
  unsigned char EventStatus.22_4;
  unsigned char PreviousEntryStatus.23_5;
  int _6;
  unsigned char _7;
  unsigned int _8;
  unsigned int _9;
  _Bool _10;
  unsigned char EventStatus.24_11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EntryPresent_16 = 0;
  # DEBUG EntryPresent => EntryPresent_16
  # DEBUG BEGIN_STMT
  PreviousEntryStatus = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EventId_19 = EventInfo.EventId;
  # DEBUG EventId => EventId_19
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Dem_DebounceEvent (EventId_19, &EventStatus, &debounceResult);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  debounceResult.20_2 = debounceResult;
  if (debounceResult.20_2 == 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 18);

  <bb 5> :
  # DEBUG BEGIN_STMT
  EventStatus.21_3 = EventStatus;
  if (EventStatus.21_3 <= 1)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  queueWriteSuccess_22 = 1;
  # DEBUG queueWriteSuccess => queueWriteSuccess_22
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  EntryPresent_25 = Dem_CheckErrorQueueEntry (EventId_19, &PreviousEntryStatus);
  # DEBUG EntryPresent => EntryPresent_25
  # DEBUG BEGIN_STMT
  if (EntryPresent_25 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  EventStatus.22_4 = EventStatus;
  PreviousEntryStatus.23_5 = PreviousEntryStatus;
  if (EventStatus.22_4 != PreviousEntryStatus.23_5)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _6 = (int) EventId_19;
  _7 = Dem_NvData.DTCStatusMask[_6];
  _8 = (unsigned int) _7;
  _9 = _8 & 2;
  _10 = _9 != 0;
  FirstFailed_26 = (boolean) _10;
  # DEBUG FirstFailed => FirstFailed_26
  # DEBUG BEGIN_STMT
  EventStatus.24_11 = EventStatus;
  queueWriteSuccess_28 = Dem_WriteErrorQueueEntry (EventInfo, EventStatus.24_11, FirstFailed_26);
  # DEBUG queueWriteSuccess => queueWriteSuccess_28

  <bb 9> :
  # queueWriteSuccess_12 = PHI <queueWriteSuccess_22(7), queueWriteSuccess_28(8)>
  # DEBUG queueWriteSuccess => queueWriteSuccess_12
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (queueWriteSuccess_12 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 16);

  <bb 11> :
  # DEBUG BEGIN_STMT
  PreviousEntryStatus ={v} {CLOBBER};
  debounceResult ={v} {CLOBBER};
  return;

}


Dem_ReportErrorStatus (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
{
  <unnamed type> Dem_InitializationState.18_1;
  unsigned char _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.18_1 = Dem_InitializationState;
  if (Dem_InitializationState.18_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 32);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId_5(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 18);
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId_5(D) > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 16);
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EventStatus_6(D) > 3)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 18);
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiEventKind (EventId_5(D));
  if (_2 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 18);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Dem_ReportErrorStatusCore (EventId_5(D), EventStatus_6(D), 0);

  <bb 13> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_Shutdown ()
{
  const NvM_BlockIdType NvDataBlockId;
  Dem_EntryDataType * const AgingCounterPtr;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  Dem_SizeEvMemEntryType EntryIdx;
  uint8 OriginIdx;
  Dem_EventIdType LockedEvId;
  <unnamed type> Dem_InitializationState.14_1;
  unsigned char _2;
  unsigned char _3;
  struct Dem_EventMemoryEntryType * EvMemEntry.15_4;
  unsigned char _5;
  struct Dem_EventMemoryEntryType * EvMemEntry.16_6;
  struct Dem_EventMemoryEntryType * EvMemEntry.17_7;
  int _8;
  short unsigned int _9;
  int _10;
  short unsigned int _11;
  int _12;
  struct Dem_EventMemoryEntryType * _13;
  unsigned int _14;
  unsigned int _15;
  struct Dem_EventMemoryEntryType * _16;
  <unnamed type> _17;
  int _18;
  unsigned char _19;
  int _20;
  short unsigned int _21;
  int _22;
  unsigned char _23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.14_1 = Dem_InitializationState;
  if (Dem_InitializationState.14_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 3, 32);
  goto <bb 21>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_MainFunction ();
  # DEBUG BEGIN_STMT
  Dem_InitializationState = 3;
  # DEBUG BEGIN_STMT
  LockedEvId_36 = Dem_EvIdOfLockedMemoryEntry;
  # DEBUG LockedEvId => LockedEvId_36
  # DEBUG BEGIN_STMT
  if (LockedEvId_36 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiNumAgingCycles (LockedEvId_36);
  if (_2 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = Dem_SearchForEntry (LockedEvId_36, &EvMemEntry, 0B);
  if (_3 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EvMemEntry.15_4 = EvMemEntry;
  AgingCounterPtr_40 = Dem_IntValEntryData (EvMemEntry.15_4);
  # DEBUG AgingCounterPtr => AgingCounterPtr_40
  # DEBUG BEGIN_STMT
  _5 = *AgingCounterPtr_40;
  if (_5 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  EvMemEntry.16_6 = EvMemEntry;
  Dem_ClearAgedEventEntry (LockedEvId_36, EvMemEntry.16_6);
  # DEBUG BEGIN_STMT
  EvMemEntry.17_7 = EvMemEntry;
  EvMemEntry.17_7->EntryStatus = 1;

  <bb 9> :
  EvMemEntry ={v} {CLOBBER};

  <bb 10> :
  # DEBUG BEGIN_STMT
  OriginIdx_44 = 0;
  # DEBUG OriginIdx => OriginIdx_44
  goto <bb 19>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _8 = (int) OriginIdx_24;
  _9 = Dem_NvDataBlockId[_8];
  if (_9 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _10 = (int) OriginIdx_24;
  _11 = Dem_NvDataBlockId[_10];
  Eb_Intgr_BswM_TriggerMemoryStack (_11);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx_47 = 0;
  # DEBUG EntryIdx => EntryIdx_47
  goto <bb 17>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _12 = (int) OriginIdx_24;
  _13 = Dem_EventMem[_12];
  _14 = (unsigned int) EntryIdx_25;
  _15 = _14 * 16;
  _16 = _13 + _15;
  _17 = _16->EntryStatus;
  if (_17 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _18 = (int) OriginIdx_24;
  NvDataBlockId_48 = Dem_NvDataBlockId[_18];
  # DEBUG NvDataBlockId => NvDataBlockId_48
  # DEBUG BEGIN_STMT
  _19 = NvM_ASR40_SetDataIndex (NvDataBlockId_48, EntryIdx_25);
  if (_19 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Dem_StoreImmediately (OriginIdx_24, EntryIdx_25);
  # DEBUG BEGIN_STMT
  NvM_ASR40_WriteBlock (NvDataBlockId_48, 0B);
  # DEBUG BEGIN_STMT
  _20 = (int) OriginIdx_24;
  _21 = Dem_NvDataBlockId[_20];
  Eb_Intgr_BswM_TriggerMemoryStack (_21);

  <bb 16> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx_53 = EntryIdx_25 + 1;
  # DEBUG EntryIdx => EntryIdx_53

  <bb 17> :
  # EntryIdx_25 = PHI <EntryIdx_47(12), EntryIdx_53(16)>
  # DEBUG EntryIdx => EntryIdx_25
  # DEBUG BEGIN_STMT
  _22 = (int) OriginIdx_24;
  _23 = Dem_SizeEventMem[_22];
  if (EntryIdx_25 < _23)
    goto <bb 13>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  OriginIdx_54 = OriginIdx_24 + 1;
  # DEBUG OriginIdx => OriginIdx_54

  <bb 19> :
  # OriginIdx_24 = PHI <OriginIdx_44(10), OriginIdx_54(18)>
  # DEBUG OriginIdx => OriginIdx_24
  # DEBUG BEGIN_STMT
  if (OriginIdx_24 <= 3)
    goto <bb 11>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  NvM_ASR40_SetRamBlockStatus (4, 1);

  <bb 21> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_Init ()
{
  boolean ResetNvData;
  uint8 OriginIdx;
  Dem_OperationCycleIdType OpCycleId;
  uint8 SwUnitIdx;
  <unnamed type> Dem_InitializationState.1_1;
  <unnamed type> Dem_InitializationState.2_2;
  <unnamed type> Dem_InitializationState.3_3;
  int _4;
  unsigned char _5;
  int _6;
  int _7;
  void (*<T577>) (void) _8;
  unsigned char SwUnitIdx.4_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.1_1 = Dem_InitializationState;
  if (Dem_InitializationState.1_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  Dem_InitializationState.2_2 = Dem_InitializationState;
  if (Dem_InitializationState.2_2 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 2, 64);
  goto <bb 19>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.3_3 = Dem_InitializationState;
  if (Dem_InitializationState.3_3 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ResetNvData_21 = 0;
  # DEBUG ResetNvData => ResetNvData_21
  # DEBUG BEGIN_STMT
  OpCycleId_22 = 0;
  # DEBUG OpCycleId => OpCycleId_22
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _4 = (int) OpCycleId_11;
  Dem_OpCycleState[_4] = 1;
  # DEBUG BEGIN_STMT
  OpCycleId_38 = OpCycleId_11 + 1;
  # DEBUG OpCycleId => OpCycleId_38

  <bb 8> :
  # OpCycleId_11 = PHI <OpCycleId_22(6), OpCycleId_38(7)>
  # DEBUG OpCycleId => OpCycleId_11
  # DEBUG BEGIN_STMT
  if (OpCycleId_11 <= 2)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _5 = Dem_NvMGetNvRAMBlockStatus (4);
  if (_5 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Dem_ResetNvData ();

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitEvEntryExists ();
  # DEBUG BEGIN_STMT
  Dem_RestoreImmediateData (ResetNvData_21);
  # DEBUG BEGIN_STMT
  OriginIdx_27 = 0;
  # DEBUG OriginIdx => OriginIdx_27
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _6 = (int) OriginIdx_12;
  Dem_NvMGateEntryInfo[_6].Status = 0;
  # DEBUG BEGIN_STMT
  OriginIdx_36 = OriginIdx_12 + 1;
  # DEBUG OriginIdx => OriginIdx_36

  <bb 13> :
  # OriginIdx_12 = PHI <OriginIdx_27(11), OriginIdx_36(12)>
  # DEBUG OriginIdx => OriginIdx_12
  # DEBUG BEGIN_STMT
  if (OriginIdx_12 <= 3)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Dem_PermanentMemoryInit (ResetNvData_21);
  # DEBUG BEGIN_STMT
  Dem_ClearDtcAsyncStatus.EventStatusWrite = 0;
  # DEBUG BEGIN_STMT
  Dem_ClearDtcAsyncStatus.EventMemWrite = 0;
  # DEBUG BEGIN_STMT
  Dem_ClearDtcAsyncStatus.RunState = 0;
  # DEBUG BEGIN_STMT
  Dem_ClearDtcAsyncStatus.ClientId = 4;
  # DEBUG BEGIN_STMT
  Dem_InitMaxOccOrder ();
  # DEBUG BEGIN_STMT
  Dem_InitMaxOBDOccOrder ();

  <bb 15> :
  # DEBUG BEGIN_STMT
  SwUnitIdx_39 = 0;
  # DEBUG SwUnitIdx => SwUnitIdx_39
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _7 = (int) SwUnitIdx_10;
  _8 = Dem_InitSwUnitFncPtr[_7];
  _8 ();
  # DEBUG BEGIN_STMT
  SwUnitIdx.4_9 = SwUnitIdx_10;
  SwUnitIdx_42 = SwUnitIdx.4_9 + 1;
  # DEBUG SwUnitIdx => SwUnitIdx_42

  <bb 17> :
  # SwUnitIdx_10 = PHI <SwUnitIdx_39(15), SwUnitIdx_42(16)>
  # DEBUG SwUnitIdx => SwUnitIdx_10
  # DEBUG BEGIN_STMT
  if (SwUnitIdx_10 <= 6)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Dem_InitializationState = 2;

  <bb 19> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_PreInit (const Dem_ConfigType * ConfigPtr)
{
  Dem_EventIdType EvId;
  Dem_ErrorQueueIdxType QueueIdx;
  <unnamed type> Dem_InitializationState.0_1;
  int _2;
  <unnamed type> _3;
  void (*<T710>) (Dem_EventIdType) _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.0_1 = Dem_InitializationState;
  if (Dem_InitializationState.0_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 1, 64);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx = 0;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx = 0;
  # DEBUG BEGIN_STMT
  QueueIdx_13 = 0;
  # DEBUG QueueIdx => QueueIdx_13
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = (int) QueueIdx_5;
  Dem_ErrorQueue[_2] = 0;
  # DEBUG BEGIN_STMT
  QueueIdx_20 = QueueIdx_5 + 1;
  # DEBUG QueueIdx => QueueIdx_20

  <bb 6> :
  # QueueIdx_5 = PHI <QueueIdx_13(4), QueueIdx_20(5)>
  # DEBUG QueueIdx => QueueIdx_5
  # DEBUG BEGIN_STMT
  if (QueueIdx_5 <= 9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EvId_14 = 1;
  # DEBUG EvId => EvId_14
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _3 = Dem_GbiDebounceAlgo (EvId_6);
  _4 = Dem_DebounceFctPtrTable[_3].ResetFct;
  _4 (EvId_6);
  # DEBUG BEGIN_STMT
  EvId_18 = EvId_6 + 1;
  # DEBUG EvId => EvId_18

  <bb 9> :
  # EvId_6 = PHI <EvId_14(7), EvId_18(8)>
  # DEBUG EvId => EvId_6
  # DEBUG BEGIN_STMT
  if (EvId_6 <= 14)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Dem_InitializationState = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  return;

}


