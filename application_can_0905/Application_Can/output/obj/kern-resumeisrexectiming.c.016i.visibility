
Marking local functions:


Marking externally visible functions: OS_ResumeIsrExecTiming


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_executionTimer/3 (OS_executionTimer) @06c8e990
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_ResumeIsrExecTiming/0 (read)OS_ResumeIsrExecTiming/0 (read)OS_ResumeIsrExecTiming/0 (read)OS_ResumeIsrExecTiming/0 (read)OS_ResumeIsrExecTiming/0 (read)OS_ResumeIsrExecTiming/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_ExceedExecTime/2 (OS_ExceedExecTime) @06cafd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_ResumeIsrExecTiming/0 
  Calls: 
OS_kernelData/1 (OS_kernelData) @06c8e900
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_ResumeIsrExecTiming/0 (addr)OS_ResumeIsrExecTiming/0 (write)OS_ResumeIsrExecTiming/0 (write)OS_ResumeIsrExecTiming/0 (write)OS_ResumeIsrExecTiming/0 (write)OS_ResumeIsrExecTiming/0 (read)OS_ResumeIsrExecTiming/0 (read)OS_ResumeIsrExecTiming/0 (read)OS_ResumeIsrExecTiming/0 (write)OS_ResumeIsrExecTiming/0 (read)OS_ResumeIsrExecTiming/0 (read)OS_ResumeIsrExecTiming/0 (read)OS_ResumeIsrExecTiming/0 (read)
  Availability: not_available
  Varpool flags:
OS_ResumeIsrExecTiming/0 (OS_ResumeIsrExecTiming) @06cafa80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_kernelData/1 (addr)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_executionTimer/3 (read)OS_executionTimer/3 (read)OS_kernelData/1 (write)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_executionTimer/3 (read)OS_executionTimer/3 (read)OS_executionTimer/3 (read)OS_executionTimer/3 (read)OS_kernelData/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_ExceedExecTime/2 
   Indirect call
   Indirect call
__attribute__((target ("general-regs-only")))
OS_ResumeIsrExecTiming (struct os_accountingsave_t * save)
{
  os_tick_t OS_hwtStartDelta;
  struct os_kerneldata_t * const kernel_data;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  _1 = save->inFunction;
  OS_kernelData.accounting.inFunction = _1;
  # DEBUG BEGIN_STMT
  _2 = save->etType;
  OS_kernelData.accounting.etType = _2;
  # DEBUG BEGIN_STMT
  _3 = save->etUsed;
  OS_kernelData.accounting.etUsed = _3;
  # DEBUG BEGIN_STMT
  _4 = save->etLimit;
  OS_kernelData.accounting.etLimit = _4;
  # DEBUG BEGIN_STMT
  _5 = OS_kernelData.accounting.etLimit;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _6 = OS_kernelData.accounting.etUsed;
  _7 = OS_kernelData.accounting.etLimit;
  if (_6 >= _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  OS_ExceedExecTime ();
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = OS_executionTimer[0];
  _9 = _8->driver;
  _10 = _9->hwtRead;
  _11 = OS_executionTimer[0];
  _12 = _10 (_11);
  OS_kernelData.accounting.frc = _12;
  # DEBUG BEGIN_STMT
  _13 = OS_kernelData.accounting.etLimit;
  if (_13 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = OS_kernelData.accounting.etLimit;
  _15 = OS_kernelData.accounting.etUsed;
  OS_hwtStartDelta = _14 - _15;
  # DEBUG BEGIN_STMT
  _16 = OS_executionTimer[0];
  _17 = _16->maxDelta;
  if (OS_hwtStartDelta > _17)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _18 = OS_executionTimer[0];
  OS_hwtStartDelta = _18->defDelta;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _19 = OS_executionTimer[0];
  _20 = _19->driver;
  _21 = _20->hwtStart;
  _22 = OS_executionTimer[0];
  _23 = OS_kernelData.accounting.frc;
  _21 (_22, _23, OS_hwtStartDelta);

  <bb 9> :
  # DEBUG BEGIN_STMT
  return;

}


