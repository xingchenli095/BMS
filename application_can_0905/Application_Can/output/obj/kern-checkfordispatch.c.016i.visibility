
Marking local functions:


Marking externally visible functions: OS_CheckForDispatch


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_Panic/3 (OS_Panic) @06c1fe00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_CheckForDispatch/0 
  Calls: 
OS_configMode/2 (OS_configMode) @06bffcf0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_CheckForDispatch/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_kernelData/1 (OS_kernelData) @06bffca8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_CheckForDispatch/0 (addr)OS_CheckForDispatch/0 (read)OS_CheckForDispatch/0 (read)OS_CheckForDispatch/0 (read)OS_CheckForDispatch/0 (read)OS_CheckForDispatch/0 (read)
  Availability: not_available
  Varpool flags:
OS_CheckForDispatch/0 (OS_CheckForDispatch) @06c1fb60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_kernelData/1 (addr)OS_configMode/2 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_Panic/3 
__attribute__((target ("general-regs-only")))
OS_CheckForDispatch (os_uint8_t old_inKernel)
{
  const struct os_task_t * const current_task;
  os_unsigned_t disp;
  struct os_kerneldata_t * const kernel_data;
  os_unsigned_t D.7438;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  disp = 0;
  # DEBUG BEGIN_STMT
  OS_configMode.0_1 = OS_configMode;
  _2 = OS_configMode.0_1 & 32;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = OS_kernelData.inKernel;
  if (_3 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  OS_Panic (14);
  goto <bb 19>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (old_inKernel == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  current_task = OS_kernelData.taskCurrent;
  # DEBUG BEGIN_STMT
  _4 = OS_kernelData.taskQueueHead;
  if (current_task == _4)
    goto <bb 7>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (current_task == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  disp = 1;
  goto <bb 19>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _5 = current_task->dynamic;
  _6 = _5->state;
  if (_6 == 5)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _7 = current_task->dynamic;
  _8 = _7->prio;
  _9 = OS_kernelData.taskCurrent;
  _10 = _9->runPrio;
  _11 = (short unsigned int) _10;
  if (_8 < _11)
    goto <bb 11>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _12 = OS_kernelData.taskCurrent;
  _13 = _12->runPrio;
  _14 = current_task->dynamic;
  _15 = (short unsigned int) _13;
  _14->prio = _15;
  goto <bb 19>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _16 = current_task->dynamic;
  _17 = _16->state;
  if (_17 > 2)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  disp = 2;
  goto <bb 19>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  disp = 1;
  goto <bb 19>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (current_task == 0B)
    goto <bb 17>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _18 = current_task->dynamic;
  _19 = _18->state;
  if (_19 <= 2)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  disp = 1;
  goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  disp = 2;

  <bb 19> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7438 = disp;
  return D.7438;

}


