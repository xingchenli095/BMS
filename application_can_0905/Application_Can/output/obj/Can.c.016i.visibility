
Marking local functions: Can_DeInitControllers Can_ValidatePdu Can_ValidateHth Can_ValidateController Can_InitControllers Can_IsControllersBusy


Marking externally visible functions: Can_ProcessBusOffInterrupt Can_ProcessMesgBufferCommonInterrupt Can_MainFunction_Mode Can_MainFunction_BusOff Can_MainFunction_Read Can_MainFunction_Write Can_Write Can_GetControllerTxErrorCounter Can_GetControllerRxErrorCounter Can_GetControllerMode Can_GetControllerErrorState Can_EnableControllerInterrupts Can_DisableControllerInterrupts Can_SetControllerMode Can_DeInit Can_Init


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

CanIf_ControllerBusOff/46 (CanIf_ControllerBusOff) @07fb97e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_ProcessBusOffInterrupt/26 
  Calls: 
Can_Ipw_ProcessRxMesgBuffer/45 (Can_Ipw_ProcessRxMesgBuffer) @07fb9540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_ProcessMesgBufferCommonInterrupt/25 Can_ProcessMesgBufferCommonInterrupt/25 
  Calls: 
Can_Ipw_ProcessTxMesgBuffer/44 (Can_Ipw_ProcessTxMesgBuffer) @07fb9460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_ProcessMesgBufferCommonInterrupt/25 
  Calls: 
Can_Ipw_MainFunction_Mode/43 (Can_Ipw_MainFunction_Mode) @07fb92a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_MainFunction_Mode/24 
  Calls: 
Can_Ipw_Write/42 (Can_Ipw_Write) @07fa9c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_Write/20 
  Calls: 
Can_Ipw_GetControllerTxErrorCounter/41 (Can_Ipw_GetControllerTxErrorCounter) @07fa9a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_GetControllerTxErrorCounter/19 
  Calls: 
Can_Ipw_GetControllerRxErrorCounter/40 (Can_Ipw_GetControllerRxErrorCounter) @07fa98c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_GetControllerRxErrorCounter/18 
  Calls: 
Can_Ipw_GetControllerErrorState/39 (Can_Ipw_GetControllerErrorState) @07fa9620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_GetControllerErrorState/16 
  Calls: 
Can_Ipw_EnableControllerInterrupts/38 (Can_Ipw_EnableControllerInterrupts) @07fa9460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_EnableControllerInterrupts/15 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_01/37 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_01) @07fa92a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_EnableControllerInterrupts/15 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_01/36 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_01) @07fa91c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_EnableControllerInterrupts/15 
  Calls: 
Can_Ipw_DisableControllerInterrupts/35 (Can_Ipw_DisableControllerInterrupts) @07fa9000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_DisableControllerInterrupts/14 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_00/34 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_00) @07f9bee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_DisableControllerInterrupts/14 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_00/33 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_00) @07f9be00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_DisableControllerInterrupts/14 
  Calls: 
Can_Ipw_SetControllerToStopMode/32 (Can_Ipw_SetControllerToStopMode) @07f9ba80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_ProcessBusOffInterrupt/26 Can_SetControllerMode/13 
  Calls: 
CanIf_ControllerModeIndication/31 (CanIf_ControllerModeIndication) @07f9b9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_SetControllerMode/13 Can_SetControllerMode/13 Can_SetControllerMode/13 Can_SetControllerMode/13 
  Calls: 
Can_Ipw_SetControllerToStartMode/30 (Can_Ipw_SetControllerToStartMode) @07f9b8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_SetControllerMode/13 
  Calls: 
Can_Ipw_DeInit/29 (Can_Ipw_DeInit) @07f9b620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_DeInitControllers/10 
  Calls: 
Can_Ipw_Init/28 (Can_Ipw_Init) @07f9b2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_InitControllers/6 
  Calls: 
Det_ASR40_ReportError/27 (Det_ASR40_ReportError) @07f9b000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Can_ValidatePdu/9 Can_ValidatePdu/9 Can_ValidateHth/8 Can_ValidateHth/8 Can_Write/20 Can_GetControllerTxErrorCounter/19 Can_GetControllerTxErrorCounter/19 Can_GetControllerTxErrorCounter/19 Can_GetControllerRxErrorCounter/18 Can_GetControllerRxErrorCounter/18 Can_GetControllerRxErrorCounter/18 Can_GetControllerMode/17 Can_GetControllerMode/17 Can_GetControllerMode/17 Can_GetControllerErrorState/16 Can_EnableControllerInterrupts/15 Can_EnableControllerInterrupts/15 Can_DisableControllerInterrupts/14 Can_DisableControllerInterrupts/14 Can_ValidateController/7 Can_ValidateController/7 Can_SetControllerMode/13 Can_SetControllerMode/13 Can_SetControllerMode/13 Can_DeInit/12 Can_DeInit/12 Can_InitControllers/6 Can_IsControllersBusy/5 Can_Init/11 Can_Init/11 
  Calls: 
Can_ProcessBusOffInterrupt/26 (Can_ProcessBusOffInterrupt) @07f91e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_apxConfig/4 (read)Can_apxConfig/4 (read)Can_apxConfig/4 (read)Can_eControllerState/2 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: CanIf_ControllerBusOff/46 Can_Ipw_SetControllerToStopMode/32 
Can_ProcessMesgBufferCommonInterrupt/25 (Can_ProcessMesgBufferCommonInterrupt) @07f91c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_apxConfig/4 (read)Can_apxConfig/4 (read)Can_apxConfig/4 (read)Can_apxConfig/4 (read)Can_apxConfig/4 (read)Can_apxConfig/4 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Can_Ipw_ProcessRxMesgBuffer/45 Can_Ipw_ProcessRxMesgBuffer/45 Can_Ipw_ProcessTxMesgBuffer/44 
Can_MainFunction_Mode/24 (Can_MainFunction_Mode) @07f91a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_apxConfig/4 (read)Can_apxConfig/4 (read)Can_eControllerState/2 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Can_Ipw_MainFunction_Mode/43 
Can_MainFunction_BusOff/23 (Can_MainFunction_BusOff) @07f918c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Can_MainFunction_Read/22 (Can_MainFunction_Read) @07f91700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Can_MainFunction_Write/21 (Can_MainFunction_Write) @07f91540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Can_Write/20 (Can_Write) @07f91380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_apxConfig/4 (read)Can_apxConfig/4 (read)Can_apxConfig/4 (read)Can_eControllerState/2 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Can_Ipw_Write/42 Can_ValidatePdu/9 Det_ASR40_ReportError/27 Can_ValidateHth/8 
Can_GetControllerTxErrorCounter/19 (Can_GetControllerTxErrorCounter) @07f911c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_eDriverStatus/3 (read)Can_apxConfig/4 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Can_Ipw_GetControllerTxErrorCounter/41 Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 
Can_GetControllerRxErrorCounter/18 (Can_GetControllerRxErrorCounter) @07f91000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_eDriverStatus/3 (read)Can_apxConfig/4 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Can_Ipw_GetControllerRxErrorCounter/40 Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 
Can_GetControllerMode/17 (Can_GetControllerMode) @07f84e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_eDriverStatus/3 (read)Can_eControllerState/2 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 
Can_GetControllerErrorState/16 (Can_GetControllerErrorState) @07f84c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_apxConfig/4 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Can_Ipw_GetControllerErrorState/39 Det_ASR40_ReportError/27 Can_ValidateController/7 
Can_EnableControllerInterrupts/15 (Can_EnableControllerInterrupts) @07f84a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_eDriverStatus/3 (read)Can_apxConfig/4 (read)Can_au8DisableInterruptLevel/1 (read)Can_au8DisableInterruptLevel/1 (read)Can_au8DisableInterruptLevel/1 (write)Can_au8DisableInterruptLevel/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Can_Ipw_EnableControllerInterrupts/38 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_01/37 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_01/36 Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 
Can_DisableControllerInterrupts/14 (Can_DisableControllerInterrupts) @07f848c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_eDriverStatus/3 (read)Can_apxConfig/4 (read)Can_au8DisableInterruptLevel/1 (read)Can_au8DisableInterruptLevel/1 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Can_Ipw_DisableControllerInterrupts/35 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_00/34 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_00/33 Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 
Can_SetControllerMode/13 (Can_SetControllerMode) @07f84700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_apxConfig/4 (read)Can_eControllerState/2 (read)Can_eControllerState/2 (write)Can_eControllerState/2 (read)Can_eControllerState/2 (write)Can_eControllerState/2 (write)Can_eControllerState/2 (read)Can_eControllerState/2 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 CanIf_ControllerModeIndication/31 CanIf_ControllerModeIndication/31 CanIf_ControllerModeIndication/31 Can_Ipw_SetControllerToStopMode/32 Det_ASR40_ReportError/27 CanIf_ControllerModeIndication/31 Can_Ipw_SetControllerToStartMode/30 Can_ValidateController/7 
Can_DeInit/12 (Can_DeInit) @07f84540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_eDriverStatus/3 (read)Can_apxConfig/4 (read)Can_eControllerState/2 (read)Can_eDriverStatus/3 (write)Can_apxConfig/4 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Can_DeInitControllers/10 Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 
Can_Init/11 (Can_Init) @07f84380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Can_eDriverStatus/3 (read)Can_apxConfig/4 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Can_InitControllers/6 Can_IsControllersBusy/5 Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 
Can_DeInitControllers/10 (Can_DeInitControllers) @07f841c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Can_apxConfig/4 (read)Can_apxConfig/4 (read)Can_eControllerState/2 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Can_DeInit/12 
  Calls: Can_Ipw_DeInit/29 
Can_ValidatePdu/9 (Can_ValidatePdu) @07f84000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Can_au16BaudrateIDConfig/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Can_Write/20 
  Calls: Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 
Can_ValidateHth/8 (Can_ValidateHth) @07f75e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Can_eDriverStatus/3 (read)Can_apxConfig/4 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Can_Write/20 
  Calls: Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 
Can_ValidateController/7 (Can_ValidateController) @07f75c40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Can_eDriverStatus/3 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Can_GetControllerErrorState/16 Can_SetControllerMode/13 
  Calls: Det_ASR40_ReportError/27 Det_ASR40_ReportError/27 
Can_InitControllers/6 (Can_InitControllers) @07f75a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Can_apxConfig/4 (read)Can_apxConfig/4 (read)Can_au16BaudrateIDConfig/0 (write)Can_au8DisableInterruptLevel/1 (write)Can_eControllerState/2 (write)Can_apxConfig/4 (read)Can_eControllerState/2 (write)Can_eDriverStatus/3 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Can_Init/11 
  Calls: Det_ASR40_ReportError/27 Can_Ipw_Init/28 
Can_IsControllersBusy/5 (Can_IsControllersBusy) @07f758c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Can_apxConfig/4 (read)Can_eControllerState/2 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Can_Init/11 
  Calls: Det_ASR40_ReportError/27 
Can_apxConfig/4 (Can_apxConfig) @07f28d38
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Can_Init/11 (write)Can_IsControllersBusy/5 (read)Can_InitControllers/6 (read)Can_InitControllers/6 (read)Can_InitControllers/6 (read)Can_DeInit/12 (read)Can_DeInit/12 (write)Can_DeInitControllers/10 (read)Can_DeInitControllers/10 (read)Can_SetControllerMode/13 (read)Can_DisableControllerInterrupts/14 (read)Can_EnableControllerInterrupts/15 (read)Can_GetControllerErrorState/16 (read)Can_GetControllerRxErrorCounter/18 (read)Can_GetControllerTxErrorCounter/19 (read)Can_Write/20 (read)Can_Write/20 (read)Can_Write/20 (read)Can_ValidateHth/8 (read)Can_MainFunction_Mode/24 (read)Can_MainFunction_Mode/24 (read)Can_ProcessMesgBufferCommonInterrupt/25 (read)Can_ProcessMesgBufferCommonInterrupt/25 (read)Can_ProcessMesgBufferCommonInterrupt/25 (read)Can_ProcessMesgBufferCommonInterrupt/25 (read)Can_ProcessMesgBufferCommonInterrupt/25 (read)Can_ProcessMesgBufferCommonInterrupt/25 (read)Can_ProcessBusOffInterrupt/26 (read)Can_ProcessBusOffInterrupt/26 (read)Can_ProcessBusOffInterrupt/26 (read)
  Availability: available
  Varpool flags:
Can_eDriverStatus/3 (Can_eDriverStatus) @07f28cf0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Can_Init/11 (read)Can_InitControllers/6 (write)Can_DeInit/12 (read)Can_DeInit/12 (write)Can_ValidateController/7 (read)Can_DisableControllerInterrupts/14 (read)Can_EnableControllerInterrupts/15 (read)Can_GetControllerMode/17 (read)Can_GetControllerRxErrorCounter/18 (read)Can_GetControllerTxErrorCounter/19 (read)Can_ValidateHth/8 (read)
  Availability: available
  Varpool flags:
Can_eControllerState/2 (Can_eControllerState) @07f28ca8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Can_IsControllersBusy/5 (read)Can_InitControllers/6 (write)Can_InitControllers/6 (write)Can_DeInit/12 (read)Can_DeInitControllers/10 (write)Can_SetControllerMode/13 (read)Can_SetControllerMode/13 (write)Can_SetControllerMode/13 (read)Can_SetControllerMode/13 (write)Can_SetControllerMode/13 (write)Can_SetControllerMode/13 (read)Can_SetControllerMode/13 (write)Can_GetControllerMode/17 (read)Can_Write/20 (read)Can_MainFunction_Mode/24 (addr)Can_ProcessBusOffInterrupt/26 (write)
  Availability: available
  Varpool flags:
Can_au8DisableInterruptLevel/1 (Can_au8DisableInterruptLevel) @07f28c60
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Can_InitControllers/6 (write)Can_DisableControllerInterrupts/14 (read)Can_DisableControllerInterrupts/14 (write)Can_EnableControllerInterrupts/15 (read)Can_EnableControllerInterrupts/15 (read)Can_EnableControllerInterrupts/15 (write)Can_EnableControllerInterrupts/15 (read)
  Availability: available
  Varpool flags:
Can_au16BaudrateIDConfig/0 (Can_au16BaudrateIDConfig) @07f28c18
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Can_InitControllers/6 (write)Can_ValidatePdu/9 (read)
  Availability: available
  Varpool flags:
Can_ProcessBusOffInterrupt (uint8 u8CtrlOffset)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_pCtrlOffsetToCtrlIDMap;
  _4 = (sizetype) u8CtrlOffset;
  _5 = _3 + _4;
  u8ControllerID = *_5;
  # DEBUG BEGIN_STMT
  _6 = Can_apxConfig[u32CoreId];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController = *_10;
  # DEBUG BEGIN_STMT
  if (Can_pController != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _11 = Can_Ipw_SetControllerToStopMode (Can_pController);
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _12 = (int) u8ControllerID;
  Can_eControllerState[_12] = 2;
  # DEBUG BEGIN_STMT
  _13 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerBusOff (_13);

  <bb 6> :
  return;

}


Can_ProcessMesgBufferCommonInterrupt (uint8 u8CtrlOffset, uint8 u8MbIdx, Can_MbType mbType)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_pCtrlOffsetToCtrlIDMap;
  _4 = (sizetype) u8CtrlOffset;
  _5 = _3 + _4;
  u8ControllerID = *_5;
  # DEBUG BEGIN_STMT
  _6 = Can_apxConfig[u32CoreId];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController = *_10;
  # DEBUG BEGIN_STMT
  if (Can_pController != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  switch (mbType) <default: <L9> [INV], case 0: <L3> [INV], case 1: <L4> [INV], case 3: <L2> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _11 = Can_apxConfig[u32CoreId];
  _12 = _11->Can_pHwObjectConfig;
  Can_Ipw_ProcessTxMesgBuffer (Can_pController, _12, u8MbIdx);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _13 = Can_apxConfig[u32CoreId];
  _14 = _13->Can_pHwObjectConfig;
  Can_Ipw_ProcessRxMesgBuffer (Can_pController, _14, u8MbIdx);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _15 = Can_apxConfig[u32CoreId];
  _16 = _15->Can_pHwObjectConfig;
  Can_Ipw_ProcessRxMesgBuffer (Can_pController, _16, u8MbIdx);
  # DEBUG BEGIN_STMT

  <bb 8> :
<L9>:
  return;

}


Can_MainFunction_Mode ()
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId];
  if (_1 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) u8ControllerID;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  # DEBUG BEGIN_STMT
  if (Can_pController != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = Can_pController->Can_bActivation;
  if (_7 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = (int) u8ControllerID;
  _9 = &Can_eControllerState[_8];
  Can_Ipw_MainFunction_Mode (Can_pController, _9);

  <bb 6> :
  # DEBUG BEGIN_STMT
  u8ControllerID.5_10 = u8ControllerID;
  u8ControllerID = u8ControllerID.5_10 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (u8ControllerID == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Can_MainFunction_BusOff ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Can_MainFunction_Read ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Can_MainFunction_Write ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Can_Write (Can_HwHandleType Hth, const struct Can_PduType * PduInfo)
{
  const struct Can_HwObjectConfigType * Can_pHwObject;
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;
  Std_ReturnType eRetVal;
  Std_ReturnType D.12616;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal = 1;
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  Can_pHwObject = 0B;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_ValidateHth (u32CoreId, Hth);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (PduInfo == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 6, 1);
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_pHwObjIDToCtrlIDMap;
  _4 = (sizetype) Hth;
  _5 = _3 + _4;
  u8ControllerID = *_5;
  # DEBUG BEGIN_STMT
  _6 = Can_apxConfig[u32CoreId];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController = *_10;
  # DEBUG BEGIN_STMT
  if (Can_pController != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _11 = Can_apxConfig[u32CoreId];
  _12 = _11->Can_pHwObjectConfig;
  _13 = (unsigned int) Hth;
  _14 = _13 * 36;
  Can_pHwObject = _12 + _14;
  # DEBUG BEGIN_STMT
  _15 = Can_ValidatePdu (Can_pController, Can_pHwObject, PduInfo);
  if (_15 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _16 = (int) u8ControllerID;
  _17 = Can_eControllerState[_16];
  if (_17 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  eRetVal = Can_Ipw_Write (Can_pController, Can_pHwObject, PduInfo);

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.12616 = eRetVal;
  return D.12616;

}


Can_GetControllerTxErrorCounter (uint8 ControllerId, uint8 * TxErrorCounterPtr)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.12603;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal = 1;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 49, 5);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ControllerId != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 49, 4);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TxErrorCounterPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 49, 1);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) ControllerId;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  # DEBUG BEGIN_STMT
  _7 = Can_Ipw_GetControllerTxErrorCounter (Can_pController);
  *TxErrorCounterPtr = _7;
  # DEBUG BEGIN_STMT
  eRetVal = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.12603 = eRetVal;
  return D.12603;

}


Can_GetControllerRxErrorCounter (uint8 ControllerId, uint8 * RxErrorCounterPtr)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.12592;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal = 1;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 48, 5);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ControllerId != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 48, 4);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (RxErrorCounterPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 48, 1);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) ControllerId;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  # DEBUG BEGIN_STMT
  _7 = Can_Ipw_GetControllerRxErrorCounter (Can_pController);
  *RxErrorCounterPtr = _7;
  # DEBUG BEGIN_STMT
  eRetVal = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.12592 = eRetVal;
  return D.12592;

}


Can_GetControllerMode (uint8 Controller, Can_ControllerStateType * ControllerModePtr)
{
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.12581;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal = 1;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 18, 5);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Controller != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 18, 4);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ControllerModePtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 18, 1);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = (int) Controller;
  _3 = Can_eControllerState[_2];
  *ControllerModePtr = _3;
  # DEBUG BEGIN_STMT
  eRetVal = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.12581 = eRetVal;
  return D.12581;

}


Can_GetControllerErrorState (uint8 ControllerId, Can_ErrorStateType * ErrorStatePtr)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.12570;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal = 1;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_ValidateController (u32CoreId, ControllerId, 17);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (ErrorStatePtr == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 17, 1);
  goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) ControllerId;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  # DEBUG BEGIN_STMT
  _7 = Can_Ipw_GetControllerErrorState (Can_pController);
  _8 = (int) _7;
  switch (_8) <default: <L5> [INV], case 0: <L3> [INV], case 1: <L4> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  *ErrorStatePtr = 0;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  *ErrorStatePtr = 1;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  *ErrorStatePtr = 2;
  # DEBUG BEGIN_STMT

  <bb 9> :
  # DEBUG BEGIN_STMT
  eRetVal = 0;

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.12570 = eRetVal;
  return D.12570;

}


Can_EnableControllerInterrupts (uint8 Controller)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 5, 5);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Controller != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 5, 4);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) Controller;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_01 ();
  # DEBUG BEGIN_STMT
  _7 = (int) Controller;
  _8 = Can_au8DisableInterruptLevel[_7];
  if (_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _9 = (int) Controller;
  _10 = Can_au8DisableInterruptLevel[_9];
  _11 = (int) Controller;
  _12 = _10 + 255;
  Can_au8DisableInterruptLevel[_11] = _12;

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_01 ();
  # DEBUG BEGIN_STMT
  _13 = (int) Controller;
  _14 = Can_au8DisableInterruptLevel[_13];
  if (_14 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Can_Ipw_EnableControllerInterrupts (Can_pController);

  <bb 10> :
  return;

}


Can_DisableControllerInterrupts (uint8 Controller)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 4, 5);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Controller != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 4, 4);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) Controller;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  _7 = (int) Controller;
  _8 = Can_au8DisableInterruptLevel[_7];
  _9 = (int) Controller;
  _10 = _8 + 1;
  Can_au8DisableInterruptLevel[_9] = _10;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  Can_Ipw_DisableControllerInterrupts (Can_pController);

  <bb 7> :
  return;

}


Can_SetControllerMode (uint8 Controller, Can_ControllerStateType Transition)
{
  unsigned int D.12538;
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.12536;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal = 1;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_ValidateController (u32CoreId, Controller, 3);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) Controller;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  # DEBUG BEGIN_STMT
  switch (Transition) <default: <L20> [INV], case 1: <L1> [INV], case 2: <L7> [INV], case 3: <L15> [INV]>

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _7 = (int) Controller;
  _8 = Can_eControllerState[_7];
  if (_8 == 2)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = Can_Ipw_SetControllerToStartMode (Can_pController);
  if (_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = (int) Controller;
  Can_eControllerState[_10] = 1;
  # DEBUG BEGIN_STMT
  _11 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_11, 1);
  # DEBUG BEGIN_STMT
  eRetVal = 0;
  goto <bb 16>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 3, 6);
  goto <bb 16>; [INV]

  <bb 8> :
<L7>:
  # DEBUG BEGIN_STMT
  _12 = (int) Controller;
  _13 = Can_eControllerState[_12];
  switch (_13) <default: <L25> [INV], case 1: <L8> [INV], case 2 ... 3: <L11> [INV]>

  <bb 9> :
<L8>:
  # DEBUG BEGIN_STMT
  _14 = Can_Ipw_SetControllerToStopMode (Can_pController);
  if (_14 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _15 = (int) Controller;
  Can_eControllerState[_15] = 2;
  # DEBUG BEGIN_STMT
  _16 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_16, 2);
  # DEBUG BEGIN_STMT
  eRetVal = 0;
  goto <bb 16>; [INV]

  <bb 11> :
<L11>:
  # DEBUG BEGIN_STMT
  _17 = (int) Controller;
  Can_eControllerState[_17] = 2;
  # DEBUG BEGIN_STMT
  _18 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_18, 2);
  # DEBUG BEGIN_STMT
  eRetVal = 0;
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 12> :
<L15>:
  # DEBUG BEGIN_STMT
  _19 = (int) Controller;
  _20 = Can_eControllerState[_19];
  D.12538 = _20 + 4294967294;
  if (D.12538 <= 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
<L16>:
  # DEBUG BEGIN_STMT
  _21 = (int) Controller;
  Can_eControllerState[_21] = 3;
  # DEBUG BEGIN_STMT
  _22 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_22, 3);
  # DEBUG BEGIN_STMT
  eRetVal = 0;
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 14> :
<L18>:
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 3, 6);
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 15> :
<L20>:
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 3, 6);
  # DEBUG BEGIN_STMT

  <bb 16> :
<L25>:
  # DEBUG BEGIN_STMT
  D.12536 = eRetVal;
  return D.12536;

}


Can_DeInit ()
{
  uint32 u32CoreId;
  boolean bCtrlBusy;
  uint8 u8ControllerID;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  # DEBUG BEGIN_STMT
  bCtrlBusy = 0;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 16, 6);
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) u8ControllerID;
  _5 = _4 * 4;
  _6 = _3 + _5;
  _7 = *_6;
  if (_7 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = (int) u8ControllerID;
  _9 = Can_eControllerState[_8];
  if (_9 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 16, 6);
  # DEBUG BEGIN_STMT
  bCtrlBusy = 1;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  u8ControllerID.3_10 = u8ControllerID;
  u8ControllerID = u8ControllerID.3_10 + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (u8ControllerID == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (bCtrlBusy == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Can_eDriverStatus[u32CoreId] = 0;
  # DEBUG BEGIN_STMT
  Can_DeInitControllers (u32CoreId);
  # DEBUG BEGIN_STMT
  Can_apxConfig[u32CoreId] = 0B;

  <bb 12> :
  return;

}


Can_Init (const struct Can_ConfigType * Config)
{
  boolean bCtrlBusy;
  uint32 u32CoreId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  bCtrlBusy = 0;
  # DEBUG BEGIN_STMT
  u32CoreId = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 0, 6);
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Config == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 0, 9);
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Can_apxConfig[u32CoreId] = Config;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  bCtrlBusy = Can_IsControllersBusy (u32CoreId);
  # DEBUG BEGIN_STMT
  if (bCtrlBusy == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Can_InitControllers (u32CoreId);

  <bb 8> :
  return;

}


Can_DeInitControllers (uint32 u32CoreId)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint8 u8ControllerID;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = Can_apxConfig[u32CoreId];
  _8 = _7->Can_ppController;
  _9 = (unsigned int) u8ControllerID;
  _10 = _9 * 4;
  _11 = _8 + _10;
  Can_pController = *_11;
  # DEBUG BEGIN_STMT
  _12 = Can_pController->Can_bActivation;
  if (_12 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _13 = (int) u8ControllerID;
  Can_eControllerState[_13] = 0;
  # DEBUG BEGIN_STMT
  Can_Ipw_DeInit (Can_pController);

  <bb 6> :
  # DEBUG BEGIN_STMT
  u8ControllerID.4_14 = u8ControllerID;
  u8ControllerID = u8ControllerID.4_14 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (u8ControllerID == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Can_ValidatePdu (const struct Can_ControllerConfigType * Can_pController, const struct Can_HwObjectConfigType * Can_pHwObject, const struct Can_PduType * PduInfo)
{
  boolean bInvalidDataLength;
  boolean bResult;
  uint16 u16BaudrateID;
  boolean D.12643;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u16BaudrateID = 0;
  # DEBUG BEGIN_STMT
  bResult = 0;
  # DEBUG BEGIN_STMT
  bInvalidDataLength = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_pController->Can_u8ControllerID;
  _2 = (int) _1;
  u16BaudrateID = Can_au16BaudrateIDConfig[_2];
  # DEBUG BEGIN_STMT
  _3 = Can_pController->Can_pBaudrateConfig;
  _4 = (unsigned int) u16BaudrateID;
  _5 = _4 * 24;
  _6 = _3 + _5;
  _7 = _6->Can_bFDFrame;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _8 = PduInfo->length;
  _9 = Can_pHwObject->Can_u8PayloadLength;
  if (_8 > _9)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _10 = PduInfo->length;
  if (_10 > 8)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _11 = PduInfo->id;
  _12 = _11 & 1073741824;
  if (_12 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  bInvalidDataLength = 1;
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _13 = PduInfo->length;
  if (_13 > 8)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  bInvalidDataLength = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (bInvalidDataLength == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 6, 3);
  goto <bb 15>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _14 = PduInfo->sdu;
  if (_14 == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _15 = Can_pHwObject->Can_bTriggerTransmit;
  if (_15 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 6, 1);
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  bResult = 1;

  <bb 15> :
  # DEBUG BEGIN_STMT
  D.12643 = bResult;
  return D.12643;

}


Can_ValidateHth (uint32 u32CoreId, Can_HwHandleType Hth)
{
  boolean bResult;
  boolean D.12625;

  <bb 2> :
  # DEBUG BEGIN_STMT
  bResult = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 6, 5);
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Hth > 14)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_uHthFirstIndex;
  if (Hth < _3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 6, 2);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  bResult = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.12625 = bResult;
  return D.12625;

}


Can_ValidateController (uint32 u32CoreId, uint8 u8ControllerID, uint8 u8Sid)
{
  boolean bResult;
  boolean D.12547;

  <bb 2> :
  # DEBUG BEGIN_STMT
  bResult = 0;
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, u8Sid, 5);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (u8ControllerID != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, u8Sid, 4);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  bResult = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.12547 = bResult;
  return D.12547;

}


Can_InitControllers (uint32 u32CoreId)
{
  const struct Can_ControllerConfigType * Can_pController;
  Std_ReturnType RetVal;
  uint8 u8ControllerID;
  boolean bCtrlBusy;

  <bb 2> :
  # DEBUG BEGIN_STMT
  bCtrlBusy = 0;
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Can_pController = 0B;
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = Can_apxConfig[u32CoreId];
  _8 = _7->Can_ppController;
  _9 = (unsigned int) u8ControllerID;
  _10 = _9 * 4;
  _11 = _8 + _10;
  Can_pController = *_11;
  # DEBUG BEGIN_STMT
  _12 = Can_pController->Can_bActivation;
  if (_12 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _13 = (int) u8ControllerID;
  _14 = Can_pController->Can_u16DefaultBaudrateID;
  Can_au16BaudrateIDConfig[_13] = _14;
  # DEBUG BEGIN_STMT
  _15 = (int) u8ControllerID;
  Can_au8DisableInterruptLevel[_15] = 0;
  # DEBUG BEGIN_STMT
  RetVal = Can_Ipw_Init (Can_pController);
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _16 = (int) u8ControllerID;
  Can_eControllerState[_16] = 2;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 0, 9);
  # DEBUG BEGIN_STMT
  bCtrlBusy = 1;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  u8ControllerID.1_17 = u8ControllerID;
  u8ControllerID = u8ControllerID.1_17 + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (u8ControllerID == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (bCtrlBusy == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _18 = Can_apxConfig[u32CoreId];
  _19 = _18->Can_ppController;
  _20 = (unsigned int) u8ControllerID;
  _21 = _20 * 4;
  _22 = _19 + _21;
  _23 = *_22;
  if (_23 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _24 = (int) u8ControllerID;
  Can_eControllerState[_24] = 0;

  <bb 14> :
  # DEBUG BEGIN_STMT
  u8ControllerID.2_25 = u8ControllerID;
  u8ControllerID = u8ControllerID.2_25 + 1;

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (u8ControllerID == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Can_eDriverStatus[u32CoreId] = 1;

  <bb 17> :
  return;

}


Can_IsControllersBusy (uint32 u32CoreId)
{
  uint8 u8ControllerID;
  boolean bCtrlBusy;
  boolean D.12500;

  <bb 2> :
  # DEBUG BEGIN_STMT
  bCtrlBusy = 0;
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  # DEBUG BEGIN_STMT
  u8ControllerID = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = (int) u8ControllerID;
  _8 = Can_eControllerState[_7];
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 0, 6);
  # DEBUG BEGIN_STMT
  bCtrlBusy = 1;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  u8ControllerID.0_9 = u8ControllerID;
  u8ControllerID = u8ControllerID.0_9 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (u8ControllerID == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.12500 = bCtrlBusy;
  return D.12500;

}


