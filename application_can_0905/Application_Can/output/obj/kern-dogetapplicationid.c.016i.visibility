
Marking local functions:


Marking externally visible functions: OS_DoGetApplicationId


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_isrTableBase/3 (OS_isrTableBase) @06d0bab0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_DoGetApplicationId/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_nInterrupts/2 (OS_nInterrupts) @06d0ba68
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_DoGetApplicationId/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_kernelData/1 (OS_kernelData) @06d0ba20
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_DoGetApplicationId/0 (addr)OS_DoGetApplicationId/0 (read)OS_DoGetApplicationId/0 (read)OS_DoGetApplicationId/0 (read)OS_DoGetApplicationId/0 (read)OS_DoGetApplicationId/0 (read)OS_DoGetApplicationId/0 (read)
  Availability: not_available
  Varpool flags:
OS_DoGetApplicationId/0 (OS_DoGetApplicationId) @06d2ba80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_kernelData/1 (addr)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_nInterrupts/2 (read)OS_isrTableBase/3 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
__attribute__((target ("general-regs-only")))
OS_DoGetApplicationId ()
{
  const struct os_appcontext_t * app;
  os_applicationid_t a;
  os_uint8_t inFunction;
  struct os_kerneldata_t * const kernel_data;
  os_applicationid_t D.7428;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  inFunction = OS_kernelData.inFunction;
  # DEBUG BEGIN_STMT
  a = 255;
  # DEBUG BEGIN_STMT
  app = 0B;
  # DEBUG BEGIN_STMT
  _1 = (int) inFunction;
  switch (_1) <default: <L15> [INV], case 1: <L0> [INV], case 2 ... 3: <L3> [INV], case 8 ... 10: <L7> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _2 = OS_kernelData.taskCurrent;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = OS_kernelData.taskCurrent;
  app = _3->app;
  goto <bb 8>; [INV]

  <bb 5> :
<L3>:
  # DEBUG BEGIN_STMT
  _4 = OS_kernelData.isrCurrent;
  OS_nInterrupts.0_5 = OS_nInterrupts;
  if (_4 < OS_nInterrupts.0_5)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  OS_isrTableBase.1_6 = OS_isrTableBase;
  _7 = OS_kernelData.isrCurrent;
  _8 = (unsigned int) _7;
  _9 = _8 * 68;
  _10 = OS_isrTableBase.1_6 + _9;
  app = _10->app;
  goto <bb 8>; [INV]

  <bb 7> :
<L7>:
  # DEBUG BEGIN_STMT
  app = OS_kernelData.hookApp;
  # DEBUG BEGIN_STMT

  <bb 8> :
<L15>:
  # DEBUG BEGIN_STMT
  if (app != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  a = app->appId;

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.7428 = a;
  return D.7428;

}


