ComM_HsmDispatchEvent (const struct ComM_HsmStatechartType * const sc, const uint16 instIdx, const ComM_HsmEventType event)
{
  boolean guardCond;
  const struct ComM_HsmStateType * const state;
  uint8_least i;
  boolean triggerFound;
  boolean transitionFired;
  const struct ComM_HsmTranType * trans;
  struct ComM_HsmInstType * const inst;
  boolean D.6716;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = sc->instances;
  _2 = (unsigned int) instIdx;
  _3 = _2 * 4;
  inst = _1 + _3;
  # DEBUG BEGIN_STMT
  trans = 0B;
  # DEBUG BEGIN_STMT
  transitionFired = 0;
  # DEBUG BEGIN_STMT
  triggerFound = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = inst->stateId;
  inst->sourceId = _4;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = sc->states;
  _6 = inst->sourceId;
  _7 = (unsigned int) _6;
  _8 = _7 * 20;
  state = _5 + _8;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _9 = state->trans;
  _10 = i * 8;
  trans = _9 + _10;
  # DEBUG BEGIN_STMT
  _11 = trans->event;
  if (event == _11)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  guardCond = 1;
  # DEBUG BEGIN_STMT
  _12 = trans->guardFnIdx;
  if (_12 != 255)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _13 = sc->guards;
  _14 = trans->guardFnIdx;
  _15 = (unsigned int) _14;
  _16 = _15 * 4;
  _17 = _13 + _16;
  _18 = *_17;
  guardCond = _18 (instIdx);

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (guardCond == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  triggerFound = 1;
  # DEBUG BEGIN_STMT
  transitionFired = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _19 = state->numTrans;
  _20 = (long unsigned int) _19;
  if (i < _20)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  if (triggerFound == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (triggerFound == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _21 = state->parentId;
  inst->sourceId = _21;

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (triggerFound == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _22 = inst->sourceId;
  if (_22 != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (triggerFound == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  ComM_HsmTran (sc, instIdx, trans);

  <bb 18> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6716 = transitionFired;
  return D.6716;

}


ComM_HsmFindEvToDispatch (const struct ComM_HsmStatechartType * const sc, const uint16 instIdx, ComM_HsmEventType * const event, uint8 * const queueEntryNo)
{
  ComM_HsmEventMaskType eventMask;
  uint8 entryNo;
  ComM_HsmEventType ev;
  boolean foundEventToDispatch;
  const struct ComM_HsmStateType * const state;
  struct ComM_HsmInstType * const inst;
  boolean D.6732;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = sc->instances;
  _2 = (unsigned int) instIdx;
  _3 = _2 * 4;
  inst = _1 + _3;
  # DEBUG BEGIN_STMT
  _4 = sc->states;
  _5 = inst->stateId;
  _6 = (unsigned int) _5;
  _7 = _6 * 20;
  state = _4 + _7;
  # DEBUG BEGIN_STMT
  foundEventToDispatch = 0;
  # DEBUG BEGIN_STMT
  ev = 255;
  # DEBUG BEGIN_STMT
  entryNo = 0;
  # DEBUG BEGIN_STMT
  ComM_Enter_SCHM_COMM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _8 = sc->events;
  _9 = (int) instIdx;
  _10 = sc->numEvents;
  _11 = (int) _10;
  _12 = _9 * _11;
  _13 = (int) entryNo;
  _14 = _12 + _13;
  _15 = (sizetype) _14;
  _16 = _8 + _15;
  ev = *_16;
  # DEBUG BEGIN_STMT
  _17 = (int) ev;
  eventMask = 1 << _17;
  # DEBUG BEGIN_STMT
  _18 = state->ignoredEventMask;
  _19 = eventMask & _18;
  if (_19 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ComM_HsmDelFromQueue (sc, instIdx, entryNo);
  goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _20 = state->actionEventMask;
  _21 = eventMask & _20;
  if (_21 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _22 = inst->evQueueInsertEvNo;
  if (entryNo >= _22)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _23 = entryNo + 1;
  inst->evQueueInsertEvNo = _23;

  <bb 8> :
  # DEBUG BEGIN_STMT
  foundEventToDispatch = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  entryNo = entryNo + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _24 = inst->evQueueFill;
  if (entryNo < _24)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  if (foundEventToDispatch == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  ComM_Exit_SCHM_COMM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  *event = ev;
  # DEBUG BEGIN_STMT
  *queueEntryNo = entryNo;
  # DEBUG BEGIN_STMT
  D.6732 = foundEventToDispatch;
  return D.6732;

}


ComM_HsmInitSubstates (const struct ComM_HsmStatechartType * const sc, const uint16 instIdx)
{
  const struct ComM_HsmStateType * state;
  ComM_HsmStateIdxType stateIdx;
  struct ComM_HsmInstType * const inst;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = sc->instances;
  _2 = (unsigned int) instIdx;
  _3 = _2 * 4;
  inst = _1 + _3;
  # DEBUG BEGIN_STMT
  _4 = sc->states;
  _5 = inst->stateId;
  _6 = (unsigned int) _5;
  _7 = _6 * 20;
  _8 = _4 + _7;
  stateIdx = _8->initId;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _9 = sc->states;
  _10 = (unsigned int) stateIdx;
  _11 = _10 * 20;
  state = _9 + _11;
  # DEBUG BEGIN_STMT
  inst->stateId = stateIdx;
  # DEBUG BEGIN_STMT
  _12 = state->entryFnIdx;
  if (_12 != 255)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = sc->actions;
  _14 = state->entryFnIdx;
  _15 = (unsigned int) _14;
  _16 = _15 * 4;
  _17 = _13 + _16;
  _18 = *_17;
  _18 (instIdx);

  <bb 5> :
  # DEBUG BEGIN_STMT
  stateIdx = state->initId;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (stateIdx != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}


ComM_HsmTran (const struct ComM_HsmStatechartType * const sc, const uint16 instIdx, const struct ComM_HsmTranType * const tran)
{
  uint8_least i;
  struct ComM_HsmInstType * const inst;
  const struct ComM_HsmStateType * state;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = sc->instances;
  _2 = (unsigned int) instIdx;
  _3 = _2 * 4;
  inst = _1 + _3;
  # DEBUG BEGIN_STMT
  _4 = tran->target;
  if (_4 == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = sc->actions;
  _6 = tran->steps;
  _7 = *_6;
  _8 = (unsigned int) _7;
  _9 = _8 * 4;
  _10 = _5 + _9;
  _11 = *_10;
  _11 (instIdx);
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _12 = sc->states;
  _13 = inst->stateId;
  _14 = (unsigned int) _13;
  _15 = _14 * 20;
  state = _12 + _15;
  # DEBUG BEGIN_STMT
  _16 = state->exitFnIdx;
  if (_16 != 255)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _17 = sc->actions;
  _18 = state->exitFnIdx;
  _19 = (unsigned int) _18;
  _20 = _19 * 4;
  _21 = _17 + _20;
  _22 = *_21;
  _22 (instIdx);

  <bb 6> :
  # DEBUG BEGIN_STMT
  _23 = state->parentId;
  inst->stateId = _23;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _24 = inst->stateId;
  _25 = inst->sourceId;
  if (_24 != _25)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = sc->actions;
  _27 = tran->steps;
  _28 = _27 + i;
  _29 = *_28;
  _30 = (unsigned int) _29;
  _31 = _30 * 4;
  _32 = _26 + _31;
  _33 = *_32;
  _33 (instIdx);
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _34 = tran->numSteps;
  _35 = (long unsigned int) _34;
  if (i < _35)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _36 = tran->target;
  inst->stateId = _36;
  # DEBUG BEGIN_STMT
  ComM_HsmInitSubstates (sc, instIdx);

  <bb 12> :
  # DEBUG BEGIN_STMT
  return;

}


ComM_HsmDelFromQueue (const struct ComM_HsmStatechartType * const sc, const uint16 instIdx, const uint8 queueEntryNo)
{
  ComM_HsmEventType event;
  uint16 j;
  struct ComM_HsmInstType * const inst;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = sc->instances;
  _2 = (unsigned int) instIdx;
  _3 = _2 * 4;
  inst = _1 + _3;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = sc->events;
  _5 = (int) instIdx;
  _6 = sc->numEvents;
  _7 = (int) _6;
  _8 = _5 * _7;
  _9 = (int) queueEntryNo;
  _10 = _8 + _9;
  _11 = (sizetype) _10;
  _12 = _4 + _11;
  event = *_12;
  # DEBUG BEGIN_STMT
  _13 = sc->evCounters;
  _14 = (int) instIdx;
  _15 = sc->numEvents;
  _16 = (int) _15;
  _17 = _14 * _16;
  _18 = (int) event;
  _19 = _17 + _18;
  _20 = (sizetype) _19;
  _21 = _13 + _20;
  _22 = *_21;
  _23 = _22 + 255;
  *_21 = _23;
  # DEBUG BEGIN_STMT
  j = (uint16) queueEntryNo;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _24 = sc->events;
  _25 = (int) instIdx;
  _26 = sc->numEvents;
  _27 = (int) _26;
  _28 = _25 * _27;
  _29 = (unsigned int) _28;
  _30 = (unsigned int) j;
  _31 = _29 + _30;
  _32 = _31 + 1;
  _33 = _24 + _32;
  _34 = sc->events;
  _35 = (int) instIdx;
  _36 = sc->numEvents;
  _37 = (int) _36;
  _38 = _35 * _37;
  _39 = (int) j;
  _40 = _38 + _39;
  _41 = (sizetype) _40;
  _42 = _34 + _41;
  _43 = *_33;
  *_42 = _43;
  # DEBUG BEGIN_STMT
  j = j + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _44 = (unsigned int) j;
  _45 = _44 + 1;
  _46 = inst->evQueueFill;
  _47 = (unsigned int) _46;
  if (_45 < _47)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _48 = inst->evQueueFill;
  _49 = _48 + 255;
  inst->evQueueFill = _49;
  # DEBUG BEGIN_STMT
  _50 = inst->evQueueInsertEvNo;
  if (queueEntryNo < _50)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _51 = inst->evQueueInsertEvNo;
  _52 = _51 + 255;
  inst->evQueueInsertEvNo = _52;

  <bb 7> :
  return;

}


ComM_HsmMainInst (const struct ComM_HsmStatechartType * const sc, const uint16 instIdx)
{
  boolean retVal;
  boolean eventPending;
  uint8 queueEntryNo;
  ComM_HsmEventType event;
  boolean transitionFired;
  struct ComM_HsmInstType * const inst;
  boolean D.6698;
  int iftmp.2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = sc->instances;
  _2 = (unsigned int) instIdx;
  _3 = _2 * 4;
  inst = _1 + _3;
  # DEBUG BEGIN_STMT
  transitionFired = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  inst->evQueueInsertEvNo = 0;
  # DEBUG BEGIN_STMT
  eventPending = ComM_HsmFindEvToDispatch (sc, instIdx, &event, &queueEntryNo);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ComM_Enter_SCHM_COMM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  queueEntryNo.0_4 = queueEntryNo;
  ComM_HsmDelFromQueue (sc, instIdx, queueEntryNo.0_4);
  # DEBUG BEGIN_STMT
  ComM_Exit_SCHM_COMM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  event.1_5 = event;
  retVal = ComM_HsmDispatchEvent (sc, instIdx, event.1_5);
  # DEBUG BEGIN_STMT
  if (retVal != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (transitionFired != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.2 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.2 = 0;

  <bb 7> :
  transitionFired = (boolean) iftmp.2;
  # DEBUG BEGIN_STMT
  eventPending = ComM_HsmFindEvToDispatch (sc, instIdx, &event, &queueEntryNo);

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (eventPending == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.6698 = transitionFired;
  event = {CLOBBER};
  queueEntryNo = {CLOBBER};
  return D.6698;

}


ComM_HsmEmitToSelfInst (const struct ComM_HsmStatechartType * const sc, const uint16 instIdx, const ComM_HsmEventType event)
{
  uint16 j;
  struct ComM_HsmInstType * const inst;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = sc->instances;
  _2 = (unsigned int) instIdx;
  _3 = _2 * 4;
  inst = _1 + _3;
  # DEBUG BEGIN_STMT
  ComM_Enter_SCHM_COMM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _4 = sc->evCounters;
  _5 = (int) instIdx;
  _6 = sc->numEvents;
  _7 = (int) _6;
  _8 = _5 * _7;
  _9 = (int) event;
  _10 = _8 + _9;
  _11 = (sizetype) _10;
  _12 = _4 + _11;
  _13 = *_12;
  if (_13 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = inst->evQueueFill;
  j = (uint16) _14;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _15 = sc->events;
  _16 = (int) instIdx;
  _17 = sc->numEvents;
  _18 = (int) _17;
  _19 = _16 * _18;
  _20 = (unsigned int) _19;
  _21 = (unsigned int) j;
  _22 = _20 + _21;
  _23 = _22 + 4294967295;
  _24 = _15 + _23;
  _25 = sc->events;
  _26 = (int) instIdx;
  _27 = sc->numEvents;
  _28 = (int) _27;
  _29 = _26 * _28;
  _30 = (int) j;
  _31 = _29 + _30;
  _32 = (sizetype) _31;
  _33 = _25 + _32;
  _34 = *_24;
  *_33 = _34;
  # DEBUG BEGIN_STMT
  j = j + 65535;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _35 = inst->evQueueInsertEvNo;
  _36 = (short unsigned int) _35;
  if (j > _36)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _37 = inst->evQueueFill;
  _38 = _37 + 1;
  inst->evQueueFill = _38;
  # DEBUG BEGIN_STMT
  _39 = sc->evCounters;
  _40 = (int) instIdx;
  _41 = sc->numEvents;
  _42 = (int) _41;
  _43 = _40 * _42;
  _44 = (int) event;
  _45 = _43 + _44;
  _46 = (sizetype) _45;
  _47 = _39 + _46;
  _48 = *_47;
  _49 = _48 + 1;
  *_47 = _49;
  # DEBUG BEGIN_STMT
  _50 = sc->events;
  _51 = (int) instIdx;
  _52 = sc->numEvents;
  _53 = (int) _52;
  _54 = _51 * _53;
  _55 = inst->evQueueInsertEvNo;
  _56 = (int) _55;
  _57 = _54 + _56;
  _58 = (sizetype) _57;
  _59 = _50 + _58;
  *_59 = event;
  # DEBUG BEGIN_STMT
  _60 = inst->evQueueInsertEvNo;
  _61 = _60;
  _62 = _61 + 1;
  inst->evQueueInsertEvNo = _62;

  <bb 7> :
  # DEBUG BEGIN_STMT
  ComM_Exit_SCHM_COMM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


ComM_HsmEmitInst (const struct ComM_HsmStatechartType * const sc, const uint16 instIdx, const ComM_HsmEventType event)
{
  struct ComM_HsmInstType * const inst;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = sc->instances;
  _2 = (unsigned int) instIdx;
  _3 = _2 * 4;
  inst = _1 + _3;
  # DEBUG BEGIN_STMT
  ComM_Enter_SCHM_COMM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _4 = sc->evCounters;
  _5 = (int) instIdx;
  _6 = sc->numEvents;
  _7 = (int) _6;
  _8 = _5 * _7;
  _9 = (int) event;
  _10 = _8 + _9;
  _11 = (sizetype) _10;
  _12 = _4 + _11;
  _13 = *_12;
  if (_13 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _14 = sc->events;
  _15 = (int) instIdx;
  _16 = sc->numEvents;
  _17 = (int) _16;
  _18 = _15 * _17;
  _19 = inst->evQueueFill;
  _20 = (int) _19;
  _21 = _18 + _20;
  _22 = (sizetype) _21;
  _23 = _14 + _22;
  *_23 = event;
  # DEBUG BEGIN_STMT
  _24 = inst->evQueueFill;
  _25 = _24;
  _26 = _25 + 1;
  inst->evQueueFill = _26;
  # DEBUG BEGIN_STMT
  _27 = sc->evCounters;
  _28 = (int) instIdx;
  _29 = sc->numEvents;
  _30 = (int) _29;
  _31 = _28 * _30;
  _32 = (int) event;
  _33 = _31 + _32;
  _34 = (sizetype) _33;
  _35 = _27 + _34;
  _36 = *_35;
  _37 = _36 + 1;
  *_35 = _37;

  <bb 4> :
  # DEBUG BEGIN_STMT
  ComM_Exit_SCHM_COMM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


ComM_HsmEmit (const struct ComM_HsmStatechartType * const sc, const ComM_HsmEventType event)
{
  uint16 instIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  instIdx = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ComM_HsmEmitInst (sc, instIdx, event);
  # DEBUG BEGIN_STMT
  instIdx = instIdx + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = sc->numInstances;
  if (instIdx < _1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


ComM_HsmInitInst (const struct ComM_HsmStatechartType * const sc, const uint16 instIdx)
{
  uint16 i;
  struct ComM_HsmInstType * const inst;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = sc->instances;
  _2 = (unsigned int) instIdx;
  _3 = _2 * 4;
  inst = _1 + _3;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = sc->topStateId;
  inst->stateId = _4;
  # DEBUG BEGIN_STMT
  inst->sourceId = 255;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = sc->events;
  _6 = (int) instIdx;
  _7 = sc->numEvents;
  _8 = (int) _7;
  _9 = _6 * _8;
  _10 = (int) i;
  _11 = _9 + _10;
  _12 = (sizetype) _11;
  _13 = _5 + _12;
  *_13 = 0;
  # DEBUG BEGIN_STMT
  _14 = sc->evCounters;
  _15 = (int) instIdx;
  _16 = sc->numEvents;
  _17 = (int) _16;
  _18 = _15 * _17;
  _19 = (int) i;
  _20 = _18 + _19;
  _21 = (sizetype) _20;
  _22 = _14 + _21;
  *_22 = 0;
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _23 = sc->numEvents;
  _24 = (short unsigned int) _23;
  if (i < _24)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  inst->evQueueFill = 0;
  # DEBUG BEGIN_STMT
  inst->evQueueInsertEvNo = 0;
  # DEBUG BEGIN_STMT
  _25 = sc->states;
  _26 = inst->stateId;
  _27 = (unsigned int) _26;
  _28 = _27 * 20;
  _29 = _25 + _28;
  _30 = _29->entryFnIdx;
  if (_30 != 255)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _31 = sc->actions;
  _32 = sc->states;
  _33 = inst->stateId;
  _34 = (unsigned int) _33;
  _35 = _34 * 20;
  _36 = _32 + _35;
  _37 = _36->entryFnIdx;
  _38 = (unsigned int) _37;
  _39 = _38 * 4;
  _40 = _31 + _39;
  _41 = *_40;
  _41 (instIdx);

  <bb 7> :
  # DEBUG BEGIN_STMT
  ComM_HsmInitSubstates (sc, instIdx);
  return;

}


ComM_HsmInit (const struct ComM_HsmStatechartType * const sc)
{
  uint16 instIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  instIdx = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ComM_HsmInitInst (sc, instIdx);
  # DEBUG BEGIN_STMT
  instIdx = instIdx + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = sc->numInstances;
  if (instIdx < _1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


