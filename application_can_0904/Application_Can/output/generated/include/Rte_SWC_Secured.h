#ifndef RTE_SWC_SECURED_H
#define RTE_SWC_SECURED_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.8.4
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2022 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type SWC_Secured
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.8.4
 * on Tue Aug 29 10:19:27 CST 2023. !!!IGNORE-LINE!!!
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <TSMem.h>
#include <Rte_SWC_Secured_Type.h>
#include <Rte_SWC_Secured_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if !defined(RTE_RUNNABLEAPI_UpdateSecureData)
#define RTE_RUNNABLEAPI_UpdateSecureData
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#define Rte_Read_R_SecuredData_CounterValue Rte_Read_SWC_Secured_R_SecuredData_CounterValue
#define Rte_IWrite_UpdateSecureData_P_SecuredData_CounterValue(data) (Rte_IWriteHook_SWC_Secured_P_SecuredData_CounterValue_Start(data), Rte_Inst_SWC_Secured->UpdateSecureData_P_SecuredData_CounterValue->value = (data), Rte_IWriteHook_SWC_Secured_P_SecuredData_CounterValue_Return(data))
#define Rte_IWriteRef_UpdateSecureData_P_SecuredData_CounterValue() ((P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA))&Rte_Inst_SWC_Secured->UpdateSecureData_P_SecuredData_CounterValue->value)
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_SWC_Secured, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_SWC_Secured, RTE_CONST) Rte_Instance_SWC_Secured;
extern CONSTP2CONST(Rte_CDS_SWC_Secured, RTE_CONST, RTE_CONST) Rte_Inst_SWC_Secured;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define SWC_Secured_START_SEC_CODE
#include <SWC_Secured_MemMap.h>
extern FUNC(void, RTE_CODE) SWC_Secured_Data_Received (void);

#define SWC_Secured_STOP_SEC_CODE
#include <SWC_Secured_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SWC_Secured_R_SecuredData_CounterValue (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) data);

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
