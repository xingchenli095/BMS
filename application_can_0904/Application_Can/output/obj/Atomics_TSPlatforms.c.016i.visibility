
Marking local functions:


Marking externally visible functions: TS_IntRestore TS_IntDisable TS_AtomicClearBit_32 TS_AtomicSetBit_32 TS_AtomicClearBit_16 TS_AtomicSetBit_16 TS_AtomicClearBit_8 TS_AtomicSetBit_8


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_UserResumeInterrupts/9 (OS_UserResumeInterrupts) @06cd1e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: TS_IntRestore/7 TS_AtomicClearBit_32/5 TS_AtomicSetBit_32/4 TS_AtomicClearBit_16/3 TS_AtomicSetBit_16/2 TS_AtomicClearBit_8/1 TS_AtomicSetBit_8/0 
  Calls: 
OS_UserSuspendInterrupts/8 (OS_UserSuspendInterrupts) @06cd1d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: TS_IntDisable/6 TS_AtomicClearBit_32/5 TS_AtomicSetBit_32/4 TS_AtomicClearBit_16/3 TS_AtomicSetBit_16/2 TS_AtomicClearBit_8/1 TS_AtomicSetBit_8/0 
  Calls: 
TS_IntRestore/7 (TS_IntRestore) @06cd1b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_UserResumeInterrupts/9 
TS_IntDisable/6 (TS_IntDisable) @06cd19a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_UserSuspendInterrupts/8 
TS_AtomicClearBit_32/5 (TS_AtomicClearBit_32) @06cd17e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_UserResumeInterrupts/9 OS_UserSuspendInterrupts/8 
TS_AtomicSetBit_32/4 (TS_AtomicSetBit_32) @06cd1460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_UserResumeInterrupts/9 OS_UserSuspendInterrupts/8 
TS_AtomicClearBit_16/3 (TS_AtomicClearBit_16) @06cd10e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_UserResumeInterrupts/9 OS_UserSuspendInterrupts/8 
TS_AtomicSetBit_16/2 (TS_AtomicSetBit_16) @06ccad20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_UserResumeInterrupts/9 OS_UserSuspendInterrupts/8 
TS_AtomicClearBit_8/1 (TS_AtomicClearBit_8) @06cca9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_UserResumeInterrupts/9 OS_UserSuspendInterrupts/8 
TS_AtomicSetBit_8/0 (TS_AtomicSetBit_8) @06cca620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_UserResumeInterrupts/9 OS_UserSuspendInterrupts/8 
TS_IntRestore (TS_IntStatusType intStatus)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  return;

}


TS_IntDisable ()
{
  TS_IntStatusType D.7888;

  <bb 2> :
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  D.7888 = 0;
  return D.7888;

}


TS_AtomicClearBit_32 (volatile uint32 * addr, uint32 bitIdx)
{
  boolean success;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.5_1 = success;
  if (success.5_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = *addr;
  _3 = 1 << bitIdx;
  _4 = ~_3;
  _5 = _2 & _4;
  *addr = _5;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success = {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


TS_AtomicSetBit_32 (volatile uint32 * addr, uint32 bitIdx)
{
  boolean success;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.4_1 = success;
  if (success.4_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = *addr;
  _3 = 1 << bitIdx;
  _4 = _2 | _3;
  *addr = _4;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success = {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


TS_AtomicClearBit_16 (volatile uint16 * addr, uint32 bitIdx)
{
  boolean success;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.3_1 = success;
  if (success.3_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = *addr;
  _3 = 1 << bitIdx;
  _4 = (short unsigned int) _3;
  _5 = ~_4;
  _6 = _2 & _5;
  *addr = _6;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success = {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


TS_AtomicSetBit_16 (volatile uint16 * addr, uint32 bitIdx)
{
  boolean success;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.2_1 = success;
  if (success.2_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = *addr;
  _3 = 1 << bitIdx;
  _4 = (short unsigned int) _3;
  _5 = _2 | _4;
  *addr = _5;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success = {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


TS_AtomicClearBit_8 (volatile uint8 * addr, uint32 bitIdx)
{
  boolean success;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.1_1 = success;
  if (success.1_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = *addr;
  _3 = 1 << bitIdx;
  _4 = (unsigned char) _3;
  _5 = ~_4;
  _6 = _2 & _5;
  *addr = _6;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success = {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


TS_AtomicSetBit_8 (volatile uint8 * addr, uint32 bitIdx)
{
  boolean success;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.0_1 = success;
  if (success.0_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = *addr;
  _3 = 1 << bitIdx;
  _4 = (unsigned char) _3;
  _5 = _2 | _4;
  *addr = _5;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success = {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


