
Marking local functions: Crypto_AESHelperEncryptSynchronousMainCall Crypto_AESCommonUnmapState Crypto_AESCommonMapState Crypto_AESCommonCalculateKeySchedule Crypto_AESEncryptCalculateRounds Crypto_AES_EncryptCalculateKeySchedule Crypto_AESEncryptMainFunction Crypto_AESEncryptFinish Crypto_AESEncryptUpdate Crypto_AESEncryptStart


Marking externally visible functions: Crypto_AL_AESPreCalculateKeySchedule Crypto_AL_ENCRYPT_AES_ECB_MainFunction Crypto_AL_ENCRYPT_AES_ECB_Cancel Crypto_AL_ENCRYPT_AES_ECB_Finish Crypto_AL_ENCRYPT_AES_ECB_Update Crypto_AL_ENCRYPT_AES_ECB_Start Crypto_AL_ENCRYPT_AES_ECB_Reset Crypto_AES_Helper_Encrypt_MainFunction Crypto_AL_AES_EncryptPreCalc Crypto_AES_Helper_Encrypt_SyncSingleCall Crypto_AES_Helper_Encrypt_Finish Crypto_AES_Helper_Encrypt_Update Crypto_AES_Helper_Encrypt_Start


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

CryIf_CallbackNotification/42 (CryIf_CallbackNotification) @06d49700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 
  Calls: 
Crypto_DriverObjects/41 (Crypto_DriverObjects) @06d4aca8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (write)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (write)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (write)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (write)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (write)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (write)
  Availability: not_available
  Varpool flags:
Crypto_AL_KeyElementGet/40 (Crypto_AL_KeyElementGet) @06d49380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_Start/16 
  Calls: 
SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/39 (SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT) @06d490e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 Crypto_AL_ENCRYPT_AES_ECB_Reset/15 
  Calls: 
TS_MemBZero32/38 (TS_MemBZero32) @06d49000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_Reset/15 
  Calls: 
SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/37 (SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT) @06849ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 Crypto_AL_ENCRYPT_AES_ECB_Reset/15 
  Calls: 
*.LC0/36 (*.LC0) @068524c8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: Crypto_AESCommonCalculateKeySchedule/29 (read)Crypto_AL_AESPreCalculateKeySchedule/21 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Crypto_CheckSkipMain/35 (Crypto_CheckSkipMain) @068498c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_AESEncryptMainFunction/26 
  Calls: 
TS_MemCpy32/34 (TS_MemCpy32) @068491c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_AL_AESPreCalculateKeySchedule/21 Crypto_AL_AES_EncryptPreCalc/13 Crypto_AL_AES_EncryptPreCalc/13 Crypto_AL_AES_EncryptPreCalc/13 Crypto_AES_Helper_Encrypt_SyncSingleCall/12 Crypto_AES_Helper_Encrypt_SyncSingleCall/12 Crypto_AES_Helper_Encrypt_SyncSingleCall/12 Crypto_AES_Helper_Encrypt_SyncSingleCall/12 Crypto_AESEncryptMainFunction/26 Crypto_AESEncryptUpdate/24 Crypto_AESEncryptStart/23 
  Calls: 
Crypto_AES_Helper_Encrypt_CallbackNotification/33 (Crypto_AES_Helper_Encrypt_CallbackNotification) @06c8cd20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: Crypto_HelperEncryptFlgCallbackNotification/5 (write)Crypto_ModeEncryptCallBack/8 (read)
  Referring: Crypto_AES_Helper_Encrypt_Start/9 (addr)
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
   Indirect call
Crypto_AESHelperEncryptSynchronousMainCall/32 (Crypto_AESHelperEncryptSynchronousMainCall) @06c8cb60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Crypto_HelperEncryptFlgCallbackNotification/5 (write)Crypto_HelperEncryptResult/7 (addr)Crypto_HelperEncryptBusy/4 (addr)Crypto_HelperEncryptFlgCallbackNotification/5 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_AES_Helper_Encrypt_Finish/11 Crypto_AES_Helper_Encrypt_Update/10 
  Calls: Crypto_AESEncryptMainFunction/26 
Crypto_AESCommonUnmapState/31 (Crypto_AESCommonUnmapState) @06c8c9a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_AESEncryptCalculateRounds/28 
  Calls: 
Crypto_AESCommonMapState/30 (Crypto_AESCommonMapState) @06c8c7e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_AESEncryptCalculateRounds/28 
  Calls: 
Crypto_AESCommonCalculateKeySchedule/29 (Crypto_AESCommonCalculateKeySchedule) @06c8c620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: *.LC0/36 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_AES_Helper_Encrypt_SyncSingleCall/12 Crypto_AES_EncryptCalculateKeySchedule/27 
  Calls: 
Crypto_AESEncryptCalculateRounds/28 (Crypto_AESEncryptCalculateRounds) @06c8c380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_Te0/1 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_AL_AES_EncryptPreCalc/13 Crypto_AES_Helper_Encrypt_SyncSingleCall/12 Crypto_AESEncryptMainFunction/26 
  Calls: Crypto_AESCommonUnmapState/31 Crypto_AESCommonMapState/30 
Crypto_AES_EncryptCalculateKeySchedule/27 (Crypto_AES_EncryptCalculateKeySchedule) @06c8c1c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Crypto_AESEncryptContext/3 (addr)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_AESEncryptMainFunction/26 
  Calls: Crypto_AESCommonCalculateKeySchedule/29 
Crypto_AESEncryptMainFunction/26 (Crypto_AESEncryptMainFunction) @06c8c000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (addr)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (addr)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_MainFunction/20 Crypto_AES_Helper_Encrypt_MainFunction/14 Crypto_AESHelperEncryptSynchronousMainCall/32 
  Calls: TS_MemCpy32/34 Crypto_AESEncryptCalculateRounds/28 Crypto_AES_EncryptCalculateKeySchedule/27 Crypto_CheckSkipMain/35 
   Indirect call
   Indirect call
   Indirect call
   Indirect call
Crypto_AESEncryptFinish/25 (Crypto_AESEncryptFinish) @06c7ed20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_Finish/18 Crypto_AES_Helper_Encrypt_Finish/11 
  Calls: 
Crypto_AESEncryptUpdate/24 (Crypto_AESEncryptUpdate) @06c7eb60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (addr)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_Update/17 Crypto_AES_Helper_Encrypt_Update/10 
  Calls: TS_MemCpy32/34 
Crypto_AESEncryptStart/23 (Crypto_AESEncryptStart) @06c7e8c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AesEncryptExpKey/2 (addr)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (addr)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_Start/16 Crypto_AES_Helper_Encrypt_Start/9 
  Calls: TS_MemCpy32/34 
   Indirect call
Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (Crypto_AL_ENCRYPT_AES_ECB_CallBack) @06c7e620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (read)Crypto_DriverObjects/41 (write)Crypto_AESEncryptContext/3 (read)Crypto_DriverObjects/41 (write)Crypto_AESEncryptContext/3 (read)Crypto_DriverObjects/41 (write)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (read)Crypto_DriverObjects/41 (write)Crypto_AESEncryptContext/3 (read)Crypto_DriverObjects/41 (write)Crypto_AESEncryptContext/3 (read)Crypto_DriverObjects/41 (write)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (read)
  Referring: Crypto_AL_ENCRYPT_AES_ECB_Start/16 (addr)
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_AL_ENCRYPT_AES_ECB_Finish/18 Crypto_AL_ENCRYPT_AES_ECB_Reset/15 CryIf_CallbackNotification/42 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/39 SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/37 Crypto_AL_ENCRYPT_AES_ECB_Update/17 CryIf_CallbackNotification/42 Crypto_AL_ENCRYPT_AES_ECB_Reset/15 CryIf_CallbackNotification/42 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/39 SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/37 
Crypto_AL_AESPreCalculateKeySchedule/21 (Crypto_AL_AESPreCalculateKeySchedule) @06c7e460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: *.LC0/36 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)Crypto_AES_SboxNrm/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: TS_MemCpy32/34 
Crypto_AL_ENCRYPT_AES_ECB_MainFunction/20 (Crypto_AL_ENCRYPT_AES_ECB_MainFunction) @06c7e0e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_AESEncryptMainFunction/26 
Crypto_AL_ENCRYPT_AES_ECB_Cancel/19 (Crypto_AL_ENCRYPT_AES_ECB_Cancel) @06c77ee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_AL_ENCRYPT_AES_ECB_Reset/15 
Crypto_AL_ENCRYPT_AES_ECB_Finish/18 (Crypto_AL_ENCRYPT_AES_ECB_Finish) @06c77d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_AESEncryptContext/3 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 
  Calls: Crypto_AESEncryptFinish/25 
Crypto_AL_ENCRYPT_AES_ECB_Update/17 (Crypto_AL_ENCRYPT_AES_ECB_Update) @06c77b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_AESEncryptContext/3 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 
  Calls: Crypto_AESEncryptUpdate/24 
Crypto_AL_ENCRYPT_AES_ECB_Start/16 (Crypto_AL_ENCRYPT_AES_ECB_Start) @06c779a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_AesKey/6 (write)Crypto_AesKey/6 (read)Crypto_AesKey/6 (read)Crypto_AesKey/6 (read)Crypto_AesKey/6 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (addr)Crypto_AesKey/6 (addr)Crypto_AesKey/6 (addr)Crypto_AesKey/6 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_AESEncryptStart/23 Crypto_AL_KeyElementGet/40 Crypto_AL_ENCRYPT_AES_ECB_Reset/15 
Crypto_AL_ENCRYPT_AES_ECB_Reset/15 (Crypto_AL_ENCRYPT_AES_ECB_Reset) @06c777e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_AESEncryptContext/3 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Crypto_AL_ENCRYPT_AES_ECB_Cancel/19 Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 Crypto_AL_ENCRYPT_AES_ECB_Start/16 
  Calls: SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/39 TS_MemBZero32/38 SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/37 
Crypto_AES_Helper_Encrypt_MainFunction/14 (Crypto_AES_Helper_Encrypt_MainFunction) @06c77540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_HelperEncryptResult/7 (addr)Crypto_HelperEncryptBusy/4 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_AESEncryptMainFunction/26 
Crypto_AL_AES_EncryptPreCalc/13 (Crypto_AL_AES_EncryptPreCalc) @06c77380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: TS_MemCpy32/34 TS_MemCpy32/34 Crypto_AESEncryptCalculateRounds/28 TS_MemCpy32/34 
Crypto_AES_Helper_Encrypt_SyncSingleCall/12 (Crypto_AES_Helper_Encrypt_SyncSingleCall) @06c3dee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_AesEncryptExpKey/2 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: TS_MemCpy32/34 TS_MemCpy32/34 Crypto_AESEncryptCalculateRounds/28 Crypto_AESCommonCalculateKeySchedule/29 TS_MemCpy32/34 TS_MemCpy32/34 
Crypto_AES_Helper_Encrypt_Finish/11 (Crypto_AES_Helper_Encrypt_Finish) @06c3d9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (write)Crypto_AESEncryptContext/3 (read)Crypto_AESEncryptContext/3 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_AESHelperEncryptSynchronousMainCall/32 Crypto_AESEncryptFinish/25 
Crypto_AES_Helper_Encrypt_Update/10 (Crypto_AES_Helper_Encrypt_Update) @06c3d7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_AESHelperEncryptSynchronousMainCall/32 Crypto_AESEncryptUpdate/24 
Crypto_AES_Helper_Encrypt_Start/9 (Crypto_AES_Helper_Encrypt_Start) @06c3d620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_ModeEncryptCallBack/8 (write)Crypto_AES_Helper_Encrypt_CallbackNotification/33 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_AESEncryptStart/23 
Crypto_ModeEncryptCallBack/8 (Crypto_ModeEncryptCallBack) @06be5d38
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Crypto_AES_Helper_Encrypt_Start/9 (write)Crypto_AES_Helper_Encrypt_CallbackNotification/33 (read)
  Availability: available
  Varpool flags:
Crypto_HelperEncryptResult/7 (Crypto_HelperEncryptResult) @06be5ca8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Crypto_AESHelperEncryptSynchronousMainCall/32 (addr)Crypto_AES_Helper_Encrypt_MainFunction/14 (addr)
  Availability: available
  Varpool flags: initialized
Crypto_AesKey/6 (Crypto_AesKey) @06be5c60
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Crypto_AL_ENCRYPT_AES_ECB_Start/16 (write)Crypto_AL_ENCRYPT_AES_ECB_Start/16 (read)Crypto_AL_ENCRYPT_AES_ECB_Start/16 (read)Crypto_AL_ENCRYPT_AES_ECB_Start/16 (read)Crypto_AL_ENCRYPT_AES_ECB_Start/16 (read)Crypto_AL_ENCRYPT_AES_ECB_Start/16 (addr)Crypto_AL_ENCRYPT_AES_ECB_Start/16 (addr)Crypto_AL_ENCRYPT_AES_ECB_Start/16 (addr)
  Availability: available
  Varpool flags: initialized
Crypto_HelperEncryptFlgCallbackNotification/5 (Crypto_HelperEncryptFlgCallbackNotification) @06be5c18
  Type: variable definition analyzed
  Visibility: force_output prevailing_def_ironly
  References: 
  Referring: Crypto_AES_Helper_Encrypt_CallbackNotification/33 (write)Crypto_AESHelperEncryptSynchronousMainCall/32 (write)Crypto_AESHelperEncryptSynchronousMainCall/32 (read)
  Availability: available
  Varpool flags: initialized
Crypto_HelperEncryptBusy/4 (Crypto_HelperEncryptBusy) @06be5bd0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Crypto_AESHelperEncryptSynchronousMainCall/32 (addr)Crypto_AES_Helper_Encrypt_MainFunction/14 (addr)
  Availability: available
  Varpool flags: initialized
Crypto_AESEncryptContext/3 (Crypto_AESEncryptContext) @06be5b88
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (addr)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (write)Crypto_AESEncryptStart/23 (read)Crypto_AESEncryptStart/23 (read)Crypto_AESEncryptStart/23 (read)Crypto_AESEncryptUpdate/24 (write)Crypto_AESEncryptUpdate/24 (write)Crypto_AESEncryptUpdate/24 (write)Crypto_AESEncryptUpdate/24 (write)Crypto_AESEncryptUpdate/24 (write)Crypto_AESEncryptUpdate/24 (write)Crypto_AESEncryptUpdate/24 (read)Crypto_AESEncryptUpdate/24 (addr)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (write)Crypto_AESEncryptMainFunction/26 (write)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (addr)Crypto_AESEncryptMainFunction/26 (write)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (addr)Crypto_AESEncryptMainFunction/26 (write)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (write)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (read)Crypto_AESEncryptMainFunction/26 (write)Crypto_AESEncryptMainFunction/26 (write)Crypto_AES_EncryptCalculateKeySchedule/27 (addr)Crypto_AES_Helper_Encrypt_Finish/11 (read)Crypto_AES_Helper_Encrypt_Finish/11 (write)Crypto_AES_Helper_Encrypt_Finish/11 (read)Crypto_AES_Helper_Encrypt_Finish/11 (addr)Crypto_AESEncryptFinish/25 (write)Crypto_AESEncryptFinish/25 (write)Crypto_AL_ENCRYPT_AES_ECB_Reset/15 (addr)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (write)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (write)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_CallBack/22 (read)Crypto_AL_ENCRYPT_AES_ECB_Update/17 (read)Crypto_AL_ENCRYPT_AES_ECB_Finish/18 (read)Crypto_AL_ENCRYPT_AES_ECB_Cancel/19 (read)Crypto_AL_ENCRYPT_AES_ECB_Cancel/19 (write)
  Availability: available
  Varpool flags:
Crypto_AesEncryptExpKey/2 (Crypto_AesEncryptExpKey) @06be5b40
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Crypto_AESEncryptStart/23 (addr)Crypto_AES_Helper_Encrypt_SyncSingleCall/12 (addr)
  Availability: available
  Varpool flags:
Crypto_AES_Te0/1 (Crypto_AES_Te0) @06be5af8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Crypto_AES_SboxNrm/0 (Crypto_AES_SboxNrm) @06be5a68
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Crypto_AESCommonCalculateKeySchedule/29 (read)Crypto_AESCommonCalculateKeySchedule/29 (read)Crypto_AESCommonCalculateKeySchedule/29 (read)Crypto_AESCommonCalculateKeySchedule/29 (read)Crypto_AESCommonCalculateKeySchedule/29 (read)Crypto_AESCommonCalculateKeySchedule/29 (read)Crypto_AESCommonCalculateKeySchedule/29 (read)Crypto_AESCommonCalculateKeySchedule/29 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AESEncryptCalculateRounds/28 (read)Crypto_AL_AESPreCalculateKeySchedule/21 (read)Crypto_AL_AESPreCalculateKeySchedule/21 (read)Crypto_AL_AESPreCalculateKeySchedule/21 (read)Crypto_AL_AESPreCalculateKeySchedule/21 (read)Crypto_AL_AESPreCalculateKeySchedule/21 (read)Crypto_AL_AESPreCalculateKeySchedule/21 (read)Crypto_AL_AESPreCalculateKeySchedule/21 (read)Crypto_AL_AESPreCalculateKeySchedule/21 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Crypto_AES_Helper_Encrypt_CallbackNotification (struct Crypto_JobType * Job, Std_ReturnType Result)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_HelperEncryptFlgCallbackNotification = 1;
  # DEBUG BEGIN_STMT
  Crypto_ModeEncryptCallBack.0_1 = Crypto_ModeEncryptCallBack;
  Crypto_ModeEncryptCallBack.0_1 (Job, Result);
  return;

}


Crypto_AESHelperEncryptSynchronousMainCall ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_HelperEncryptFlgCallbackNotification = 0;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptMainFunction (&Crypto_HelperEncryptResult, &Crypto_HelperEncryptBusy);

  <bb 4> :
  # DEBUG BEGIN_STMT
  Crypto_HelperEncryptFlgCallbackNotification.1_1 = Crypto_HelperEncryptFlgCallbackNotification;
  if (Crypto_HelperEncryptFlgCallbackNotification.1_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Crypto_AESCommonUnmapState (const uint32 * FirstCol, const uint32 * SecondCol, const uint32 * ThirdCol, const uint32 * FourthCol, struct Crypto_AES_ContextType * Context)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = *FirstCol;
  _2 = _1 >> 24;
  _3 = (unsigned char) _2;
  Context->AesState[0] = _3;
  # DEBUG BEGIN_STMT
  _4 = *FirstCol;
  _5 = _4 >> 16;
  _6 = &Context->AesState[0];
  _7 = _6 + 1;
  _8 = (unsigned char) _5;
  *_7 = _8;
  # DEBUG BEGIN_STMT
  _9 = *FirstCol;
  _10 = _9 >> 8;
  _11 = &Context->AesState[0];
  _12 = _11 + 2;
  _13 = (unsigned char) _10;
  *_12 = _13;
  # DEBUG BEGIN_STMT
  _14 = *FirstCol;
  _15 = &Context->AesState[0];
  _16 = _15 + 3;
  _17 = (unsigned char) _14;
  *_16 = _17;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _18 = *SecondCol;
  _19 = _18 >> 24;
  _20 = (unsigned char) _19;
  Context->AesState[4] = _20;
  # DEBUG BEGIN_STMT
  _21 = *SecondCol;
  _22 = _21 >> 16;
  _23 = &Context->AesState[4];
  _24 = _23 + 1;
  _25 = (unsigned char) _22;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  _26 = *SecondCol;
  _27 = _26 >> 8;
  _28 = &Context->AesState[4];
  _29 = _28 + 2;
  _30 = (unsigned char) _27;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  _31 = *SecondCol;
  _32 = &Context->AesState[4];
  _33 = _32 + 3;
  _34 = (unsigned char) _31;
  *_33 = _34;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _35 = *ThirdCol;
  _36 = _35 >> 24;
  _37 = (unsigned char) _36;
  Context->AesState[8] = _37;
  # DEBUG BEGIN_STMT
  _38 = *ThirdCol;
  _39 = _38 >> 16;
  _40 = &Context->AesState[8];
  _41 = _40 + 1;
  _42 = (unsigned char) _39;
  *_41 = _42;
  # DEBUG BEGIN_STMT
  _43 = *ThirdCol;
  _44 = _43 >> 8;
  _45 = &Context->AesState[8];
  _46 = _45 + 2;
  _47 = (unsigned char) _44;
  *_46 = _47;
  # DEBUG BEGIN_STMT
  _48 = *ThirdCol;
  _49 = &Context->AesState[8];
  _50 = _49 + 3;
  _51 = (unsigned char) _48;
  *_50 = _51;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _52 = *FourthCol;
  _53 = _52 >> 24;
  _54 = (unsigned char) _53;
  Context->AesState[12] = _54;
  # DEBUG BEGIN_STMT
  _55 = *FourthCol;
  _56 = _55 >> 16;
  _57 = &Context->AesState[12];
  _58 = _57 + 1;
  _59 = (unsigned char) _56;
  *_58 = _59;
  # DEBUG BEGIN_STMT
  _60 = *FourthCol;
  _61 = _60 >> 8;
  _62 = &Context->AesState[12];
  _63 = _62 + 2;
  _64 = (unsigned char) _61;
  *_63 = _64;
  # DEBUG BEGIN_STMT
  _65 = *FourthCol;
  _66 = &Context->AesState[12];
  _67 = _66 + 3;
  _68 = (unsigned char) _65;
  *_67 = _68;
  # DEBUG BEGIN_STMT
  return;

}


Crypto_AESCommonMapState (uint32 * FirstCol, uint32 * SecondCol, uint32 * ThirdCol, uint32 * FourthCol, const struct Crypto_AES_ContextType * Context)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Context->AesState[0];
  _2 = (long unsigned int) _1;
  _3 = _2 << 24;
  _4 = &Context->AesState[0];
  _5 = _4 + 1;
  _6 = *_5;
  _7 = (long unsigned int) _6;
  _8 = _7 << 16;
  _9 = _3 | _8;
  _10 = &Context->AesState[0];
  _11 = _10 + 2;
  _12 = *_11;
  _13 = (long unsigned int) _12;
  _14 = _13 << 8;
  _15 = _9 | _14;
  _16 = &Context->AesState[0];
  _17 = _16 + 3;
  _18 = *_17;
  _19 = (long unsigned int) _18;
  _20 = _15 | _19;
  *FirstCol = _20;
  # DEBUG BEGIN_STMT
  _21 = Context->AesState[4];
  _22 = (long unsigned int) _21;
  _23 = _22 << 24;
  _24 = &Context->AesState[4];
  _25 = _24 + 1;
  _26 = *_25;
  _27 = (long unsigned int) _26;
  _28 = _27 << 16;
  _29 = _23 | _28;
  _30 = &Context->AesState[4];
  _31 = _30 + 2;
  _32 = *_31;
  _33 = (long unsigned int) _32;
  _34 = _33 << 8;
  _35 = _29 | _34;
  _36 = &Context->AesState[4];
  _37 = _36 + 3;
  _38 = *_37;
  _39 = (long unsigned int) _38;
  _40 = _35 | _39;
  *SecondCol = _40;
  # DEBUG BEGIN_STMT
  _41 = Context->AesState[8];
  _42 = (long unsigned int) _41;
  _43 = _42 << 24;
  _44 = &Context->AesState[8];
  _45 = _44 + 1;
  _46 = *_45;
  _47 = (long unsigned int) _46;
  _48 = _47 << 16;
  _49 = _43 | _48;
  _50 = &Context->AesState[8];
  _51 = _50 + 2;
  _52 = *_51;
  _53 = (long unsigned int) _52;
  _54 = _53 << 8;
  _55 = _49 | _54;
  _56 = &Context->AesState[8];
  _57 = _56 + 3;
  _58 = *_57;
  _59 = (long unsigned int) _58;
  _60 = _55 | _59;
  *ThirdCol = _60;
  # DEBUG BEGIN_STMT
  _61 = Context->AesState[12];
  _62 = (long unsigned int) _61;
  _63 = _62 << 24;
  _64 = &Context->AesState[12];
  _65 = _64 + 1;
  _66 = *_65;
  _67 = (long unsigned int) _66;
  _68 = _67 << 16;
  _69 = _63 | _68;
  _70 = &Context->AesState[12];
  _71 = _70 + 2;
  _72 = *_71;
  _73 = (long unsigned int) _72;
  _74 = _73 << 8;
  _75 = _69 | _74;
  _76 = &Context->AesState[12];
  _77 = _76 + 3;
  _78 = *_77;
  _79 = (long unsigned int) _78;
  _80 = _75 | _79;
  *FourthCol = _80;
  return;

}


Crypto_AESCommonCalculateKeySchedule (struct Crypto_AES_ContextType * Context)
{
  const uint32 Crypto_AES_Rcon_Fast[10];
  uint32 temp;
  uint8 Index;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Crypto_AES_Rcon_Fast = *.LC0;
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (unsigned int) Index;
  _2 = _1 * 4;
  _3 = Context->KeySeed[_2];
  _4 = (long unsigned int) _3;
  _5 = _4 << 24;
  _6 = (unsigned int) Index;
  _7 = _6 * 4;
  _8 = &Context->KeySeed[_7];
  _9 = _8 + 1;
  _10 = *_9;
  _11 = (long unsigned int) _10;
  _12 = _11 << 16;
  _13 = _5 | _12;
  _14 = (unsigned int) Index;
  _15 = _14 * 4;
  _16 = &Context->KeySeed[_15];
  _17 = _16 + 2;
  _18 = *_17;
  _19 = (long unsigned int) _18;
  _20 = _19 << 8;
  _21 = _13 | _20;
  _22 = (unsigned int) Index;
  _23 = _22 * 4;
  _24 = &Context->KeySeed[_23];
  _25 = _24 + 3;
  _26 = *_25;
  _27 = (long unsigned int) _26;
  _28 = Context->KeyExpdFast;
  _29 = (unsigned int) Index;
  _30 = _29 * 4;
  _31 = _28 + _30;
  _32 = _21 | _27;
  *_31 = _32;
  # DEBUG BEGIN_STMT
  Index.2_33 = Index;
  Index = Index.2_33 + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _34 = Context->SzeKey;
  if (Index < _34)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Index = Context->SzeKey;
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _35 = Context->KeyExpdFast;
  _36 = (sizetype) Index;
  _37 = _36 + 1073741823;
  _38 = _37 * 4;
  _39 = _35 + _38;
  temp = *_39;
  # DEBUG BEGIN_STMT
  _40 = Context->SzeKey;
  _41 = Index % _40;
  if (_41 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _42 = temp >> 16;
  _43 = _42 & 255;
  _44 = Crypto_AES_SboxNrm[_43];
  _45 = (long unsigned int) _44;
  _46 = _45 << 24;
  _47 = temp >> 8;
  _48 = _47 & 255;
  _49 = Crypto_AES_SboxNrm[_48];
  _50 = (long unsigned int) _49;
  _51 = _50 << 16;
  _52 = _46 ^ _51;
  _53 = temp & 255;
  _54 = Crypto_AES_SboxNrm[_53];
  _55 = (long unsigned int) _54;
  _56 = _55 << 8;
  _57 = _52 ^ _56;
  _58 = temp >> 24;
  _59 = Crypto_AES_SboxNrm[_58];
  _60 = (long unsigned int) _59;
  _61 = _57 ^ _60;
  _62 = Context->SzeKey;
  _63 = Index / _62;
  _64 = (unsigned int) _63;
  _65 = _64 + 4294967295;
  _66 = Crypto_AES_Rcon_Fast[_65];
  temp = _61 ^ _66;
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _67 = Context->SzeKey;
  if (_67 > 6)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _68 = Context->SzeKey;
  _69 = Index % _68;
  if (_69 == 4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _70 = temp >> 24;
  _71 = Crypto_AES_SboxNrm[_70];
  _72 = (long unsigned int) _71;
  _73 = _72 << 24;
  _74 = temp >> 16;
  _75 = _74 & 255;
  _76 = Crypto_AES_SboxNrm[_75];
  _77 = (long unsigned int) _76;
  _78 = _77 << 16;
  _79 = _73 ^ _78;
  _80 = temp >> 8;
  _81 = _80 & 255;
  _82 = Crypto_AES_SboxNrm[_81];
  _83 = (long unsigned int) _82;
  _84 = _83 << 8;
  _85 = _79 ^ _84;
  _86 = temp & 255;
  _87 = Crypto_AES_SboxNrm[_86];
  _88 = (long unsigned int) _87;
  temp = _85 ^ _88;

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _89 = Context->KeyExpdFast;
  _90 = (int) Index;
  _91 = Context->SzeKey;
  _92 = (int) _91;
  _93 = _90 - _92;
  _94 = (unsigned int) _93;
  _95 = _94 * 4;
  _96 = _89 + _95;
  _97 = *_96;
  _98 = Context->KeyExpdFast;
  _99 = (unsigned int) Index;
  _100 = _99 * 4;
  _101 = _98 + _100;
  _102 = temp ^ _97;
  *_101 = _102;
  # DEBUG BEGIN_STMT
  Index.3_103 = Index;
  Index = Index.3_103 + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  _104 = (long unsigned int) Index;
  _105 = Context->SzeTurn;
  _106 = _105 + 1;
  _107 = _106 * 4;
  if (_104 < _107)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  Crypto_AES_Rcon_Fast = {CLOBBER};
  return;

}


Crypto_AESEncryptCalculateRounds (struct Crypto_AES_ContextType * Context)
{
  const uint8 keyExpdFastLoopOffset;
  const uint8 keyExpdFastOffset;
  const uint8 numberOfLoops;
  uint8 Index;
  uint32 S3;
  uint32 S2;
  uint32 S1;
  uint32 S0;
  uint32 T3;
  uint32 T2;
  uint32 T1;
  uint32 T0;

  <bb 2> :
  # DEBUG BEGIN_STMT
  T0 = 0;
  # DEBUG BEGIN_STMT
  T1 = 0;
  # DEBUG BEGIN_STMT
  T2 = 0;
  # DEBUG BEGIN_STMT
  T3 = 0;
  # DEBUG BEGIN_STMT
  S0 = 0;
  # DEBUG BEGIN_STMT
  S1 = 0;
  # DEBUG BEGIN_STMT
  S2 = 0;
  # DEBUG BEGIN_STMT
  S3 = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Context->SzeTurn;
  _2 = _1 / 2;
  numberOfLoops = (const uint8) _2;
  # DEBUG BEGIN_STMT
  _3 = Context->SzeTurn;
  _4 = (unsigned char) _3;
  keyExpdFastOffset = _4 * 4;
  # DEBUG BEGIN_STMT
  Crypto_AESCommonMapState (&S0, &S1, &S2, &S3, Context);
  # DEBUG BEGIN_STMT
  _5 = Context->KeyExpdFast;
  _6 = *_5;
  S0.4_7 = S0;
  _8 = _6 ^ S0.4_7;
  S0 = _8;
  # DEBUG BEGIN_STMT
  _9 = Context->KeyExpdFast;
  _10 = _9 + 4;
  _11 = *_10;
  S1.5_12 = S1;
  _13 = _11 ^ S1.5_12;
  S1 = _13;
  # DEBUG BEGIN_STMT
  _14 = Context->KeyExpdFast;
  _15 = _14 + 8;
  _16 = *_15;
  S2.6_17 = S2;
  _18 = _16 ^ S2.6_17;
  S2 = _18;
  # DEBUG BEGIN_STMT
  _19 = Context->KeyExpdFast;
  _20 = _19 + 12;
  _21 = *_20;
  S3.7_22 = S3;
  _23 = _21 ^ S3.7_22;
  S3 = _23;
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  keyExpdFastLoopOffset = Index * 8;
  # DEBUG BEGIN_STMT
  S0.8_24 = S0;
  _25 = S0.8_24 >> 24;
  _26 = Crypto_AES_Te0[_25];
  S1.9_27 = S1;
  _28 = S1.9_27 >> 16;
  _29 = _28 & 255;
  _30 = Crypto_AES_Te0[_29];
  _31 = _30 r>> 8;
  _32 = _26 ^ _31;
  S2.10_33 = S2;
  _34 = S2.10_33 >> 8;
  _35 = _34 & 255;
  _36 = Crypto_AES_Te0[_35];
  _37 = _36 r>> 16;
  _38 = _32 ^ _37;
  S3.11_39 = S3;
  _40 = S3.11_39 & 255;
  _41 = Crypto_AES_Te0[_40];
  _42 = _41 r>> 24;
  _43 = _38 ^ _42;
  _44 = Context->KeyExpdFast;
  _45 = (sizetype) keyExpdFastLoopOffset;
  _46 = _45 + 4;
  _47 = _46 * 4;
  _48 = _44 + _47;
  _49 = *_48;
  T0 = _43 ^ _49;
  # DEBUG BEGIN_STMT
  S1.12_50 = S1;
  _51 = S1.12_50 >> 24;
  _52 = Crypto_AES_Te0[_51];
  S2.13_53 = S2;
  _54 = S2.13_53 >> 16;
  _55 = _54 & 255;
  _56 = Crypto_AES_Te0[_55];
  _57 = _56 r>> 8;
  _58 = _52 ^ _57;
  S3.14_59 = S3;
  _60 = S3.14_59 >> 8;
  _61 = _60 & 255;
  _62 = Crypto_AES_Te0[_61];
  _63 = _62 r>> 16;
  _64 = _58 ^ _63;
  S0.15_65 = S0;
  _66 = S0.15_65 & 255;
  _67 = Crypto_AES_Te0[_66];
  _68 = _67 r>> 24;
  _69 = _64 ^ _68;
  _70 = Context->KeyExpdFast;
  _71 = (sizetype) keyExpdFastLoopOffset;
  _72 = _71 + 5;
  _73 = _72 * 4;
  _74 = _70 + _73;
  _75 = *_74;
  T1 = _69 ^ _75;
  # DEBUG BEGIN_STMT
  S2.16_76 = S2;
  _77 = S2.16_76 >> 24;
  _78 = Crypto_AES_Te0[_77];
  S3.17_79 = S3;
  _80 = S3.17_79 >> 16;
  _81 = _80 & 255;
  _82 = Crypto_AES_Te0[_81];
  _83 = _82 r>> 8;
  _84 = _78 ^ _83;
  S0.18_85 = S0;
  _86 = S0.18_85 >> 8;
  _87 = _86 & 255;
  _88 = Crypto_AES_Te0[_87];
  _89 = _88 r>> 16;
  _90 = _84 ^ _89;
  S1.19_91 = S1;
  _92 = S1.19_91 & 255;
  _93 = Crypto_AES_Te0[_92];
  _94 = _93 r>> 24;
  _95 = _90 ^ _94;
  _96 = Context->KeyExpdFast;
  _97 = (sizetype) keyExpdFastLoopOffset;
  _98 = _97 + 6;
  _99 = _98 * 4;
  _100 = _96 + _99;
  _101 = *_100;
  T2 = _95 ^ _101;
  # DEBUG BEGIN_STMT
  S3.20_102 = S3;
  _103 = S3.20_102 >> 24;
  _104 = Crypto_AES_Te0[_103];
  S0.21_105 = S0;
  _106 = S0.21_105 >> 16;
  _107 = _106 & 255;
  _108 = Crypto_AES_Te0[_107];
  _109 = _108 r>> 8;
  _110 = _104 ^ _109;
  S1.22_111 = S1;
  _112 = S1.22_111 >> 8;
  _113 = _112 & 255;
  _114 = Crypto_AES_Te0[_113];
  _115 = _114 r>> 16;
  _116 = _110 ^ _115;
  S2.23_117 = S2;
  _118 = S2.23_117 & 255;
  _119 = Crypto_AES_Te0[_118];
  _120 = _119 r>> 24;
  _121 = _116 ^ _120;
  _122 = Context->KeyExpdFast;
  _123 = (sizetype) keyExpdFastLoopOffset;
  _124 = _123 + 7;
  _125 = _124 * 4;
  _126 = _122 + _125;
  _127 = *_126;
  T3 = _121 ^ _127;
  # DEBUG BEGIN_STMT
  _128 = (unsigned int) Index;
  _129 = (unsigned int) numberOfLoops;
  _130 = _129 + 4294967295;
  if (_128 < _130)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _131 = T0 >> 24;
  _132 = Crypto_AES_Te0[_131];
  _133 = T1 >> 16;
  _134 = _133 & 255;
  _135 = Crypto_AES_Te0[_134];
  _136 = _135 r>> 8;
  _137 = _132 ^ _136;
  _138 = T2 >> 8;
  _139 = _138 & 255;
  _140 = Crypto_AES_Te0[_139];
  _141 = _140 r>> 16;
  _142 = _137 ^ _141;
  _143 = T3 & 255;
  _144 = Crypto_AES_Te0[_143];
  _145 = _144 r>> 24;
  _146 = _142 ^ _145;
  _147 = Context->KeyExpdFast;
  _148 = (sizetype) keyExpdFastLoopOffset;
  _149 = _148 + 8;
  _150 = _149 * 4;
  _151 = _147 + _150;
  _152 = *_151;
  _153 = _146 ^ _152;
  S0 = _153;
  # DEBUG BEGIN_STMT
  _154 = T1 >> 24;
  _155 = Crypto_AES_Te0[_154];
  _156 = T2 >> 16;
  _157 = _156 & 255;
  _158 = Crypto_AES_Te0[_157];
  _159 = _158 r>> 8;
  _160 = _155 ^ _159;
  _161 = T3 >> 8;
  _162 = _161 & 255;
  _163 = Crypto_AES_Te0[_162];
  _164 = _163 r>> 16;
  _165 = _160 ^ _164;
  _166 = T0 & 255;
  _167 = Crypto_AES_Te0[_166];
  _168 = _167 r>> 24;
  _169 = _165 ^ _168;
  _170 = Context->KeyExpdFast;
  _171 = (sizetype) keyExpdFastLoopOffset;
  _172 = _171 + 9;
  _173 = _172 * 4;
  _174 = _170 + _173;
  _175 = *_174;
  _176 = _169 ^ _175;
  S1 = _176;
  # DEBUG BEGIN_STMT
  _177 = T2 >> 24;
  _178 = Crypto_AES_Te0[_177];
  _179 = T3 >> 16;
  _180 = _179 & 255;
  _181 = Crypto_AES_Te0[_180];
  _182 = _181 r>> 8;
  _183 = _178 ^ _182;
  _184 = T0 >> 8;
  _185 = _184 & 255;
  _186 = Crypto_AES_Te0[_185];
  _187 = _186 r>> 16;
  _188 = _183 ^ _187;
  _189 = T1 & 255;
  _190 = Crypto_AES_Te0[_189];
  _191 = _190 r>> 24;
  _192 = _188 ^ _191;
  _193 = Context->KeyExpdFast;
  _194 = (sizetype) keyExpdFastLoopOffset;
  _195 = _194 + 10;
  _196 = _195 * 4;
  _197 = _193 + _196;
  _198 = *_197;
  _199 = _192 ^ _198;
  S2 = _199;
  # DEBUG BEGIN_STMT
  _200 = T3 >> 24;
  _201 = Crypto_AES_Te0[_200];
  _202 = T0 >> 16;
  _203 = _202 & 255;
  _204 = Crypto_AES_Te0[_203];
  _205 = _204 r>> 8;
  _206 = _201 ^ _205;
  _207 = T1 >> 8;
  _208 = _207 & 255;
  _209 = Crypto_AES_Te0[_208];
  _210 = _209 r>> 16;
  _211 = _206 ^ _210;
  _212 = T2 & 255;
  _213 = Crypto_AES_Te0[_212];
  _214 = _213 r>> 24;
  _215 = _211 ^ _214;
  _216 = Context->KeyExpdFast;
  _217 = (sizetype) keyExpdFastLoopOffset;
  _218 = _217 + 11;
  _219 = _218 * 4;
  _220 = _216 + _219;
  _221 = *_220;
  _222 = _215 ^ _221;
  S3 = _222;

  <bb 5> :
  # DEBUG BEGIN_STMT
  Index.24_223 = Index;
  Index = Index.24_223 + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (Index < numberOfLoops)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _224 = T0 >> 24;
  _225 = Crypto_AES_SboxNrm[_224];
  _226 = (long unsigned int) _225;
  _227 = _226 << 24;
  _228 = T1 >> 16;
  _229 = _228 & 255;
  _230 = Crypto_AES_SboxNrm[_229];
  _231 = (long unsigned int) _230;
  _232 = _231 << 16;
  _233 = _227 ^ _232;
  _234 = T2 >> 8;
  _235 = _234 & 255;
  _236 = Crypto_AES_SboxNrm[_235];
  _237 = (long unsigned int) _236;
  _238 = _237 << 8;
  _239 = _233 ^ _238;
  _240 = T3 & 255;
  _241 = Crypto_AES_SboxNrm[_240];
  _242 = (long unsigned int) _241;
  _243 = _239 ^ _242;
  _244 = Context->KeyExpdFast;
  _245 = (unsigned int) keyExpdFastOffset;
  _246 = _245 * 4;
  _247 = _244 + _246;
  _248 = *_247;
  _249 = _243 ^ _248;
  S0 = _249;
  # DEBUG BEGIN_STMT
  _250 = T1 >> 24;
  _251 = Crypto_AES_SboxNrm[_250];
  _252 = (long unsigned int) _251;
  _253 = _252 << 24;
  _254 = T2 >> 16;
  _255 = _254 & 255;
  _256 = Crypto_AES_SboxNrm[_255];
  _257 = (long unsigned int) _256;
  _258 = _257 << 16;
  _259 = _253 ^ _258;
  _260 = T3 >> 8;
  _261 = _260 & 255;
  _262 = Crypto_AES_SboxNrm[_261];
  _263 = (long unsigned int) _262;
  _264 = _263 << 8;
  _265 = _259 ^ _264;
  _266 = T0 & 255;
  _267 = Crypto_AES_SboxNrm[_266];
  _268 = (long unsigned int) _267;
  _269 = _265 ^ _268;
  _270 = Context->KeyExpdFast;
  _271 = (sizetype) keyExpdFastOffset;
  _272 = _271 + 1;
  _273 = _272 * 4;
  _274 = _270 + _273;
  _275 = *_274;
  _276 = _269 ^ _275;
  S1 = _276;
  # DEBUG BEGIN_STMT
  _277 = T2 >> 24;
  _278 = Crypto_AES_SboxNrm[_277];
  _279 = (long unsigned int) _278;
  _280 = _279 << 24;
  _281 = T3 >> 16;
  _282 = _281 & 255;
  _283 = Crypto_AES_SboxNrm[_282];
  _284 = (long unsigned int) _283;
  _285 = _284 << 16;
  _286 = _280 ^ _285;
  _287 = T0 >> 8;
  _288 = _287 & 255;
  _289 = Crypto_AES_SboxNrm[_288];
  _290 = (long unsigned int) _289;
  _291 = _290 << 8;
  _292 = _286 ^ _291;
  _293 = T1 & 255;
  _294 = Crypto_AES_SboxNrm[_293];
  _295 = (long unsigned int) _294;
  _296 = _292 ^ _295;
  _297 = Context->KeyExpdFast;
  _298 = (sizetype) keyExpdFastOffset;
  _299 = _298 + 2;
  _300 = _299 * 4;
  _301 = _297 + _300;
  _302 = *_301;
  _303 = _296 ^ _302;
  S2 = _303;
  # DEBUG BEGIN_STMT
  _304 = T3 >> 24;
  _305 = Crypto_AES_SboxNrm[_304];
  _306 = (long unsigned int) _305;
  _307 = _306 << 24;
  _308 = T0 >> 16;
  _309 = _308 & 255;
  _310 = Crypto_AES_SboxNrm[_309];
  _311 = (long unsigned int) _310;
  _312 = _311 << 16;
  _313 = _307 ^ _312;
  _314 = T1 >> 8;
  _315 = _314 & 255;
  _316 = Crypto_AES_SboxNrm[_315];
  _317 = (long unsigned int) _316;
  _318 = _317 << 8;
  _319 = _313 ^ _318;
  _320 = T2 & 255;
  _321 = Crypto_AES_SboxNrm[_320];
  _322 = (long unsigned int) _321;
  _323 = _319 ^ _322;
  _324 = Context->KeyExpdFast;
  _325 = (sizetype) keyExpdFastOffset;
  _326 = _325 + 3;
  _327 = _326 * 4;
  _328 = _324 + _327;
  _329 = *_328;
  _330 = _323 ^ _329;
  S3 = _330;
  # DEBUG BEGIN_STMT
  Crypto_AESCommonUnmapState (&S0, &S1, &S2, &S3, Context);
  S0 = {CLOBBER};
  S1 = {CLOBBER};
  S2 = {CLOBBER};
  S3 = {CLOBBER};
  return;

}


Crypto_AES_EncryptCalculateKeySchedule ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESCommonCalculateKeySchedule (&Crypto_AESEncryptContext);
  return;

}


Crypto_AESEncryptMainFunction (Std_ReturnType * Result, boolean * Busy)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_AESEncryptContext.ObjId;
  _2 = Crypto_CheckSkipMain (Result, Busy, _1);
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.IsBusy = Busy;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.Result = Result;
  # DEBUG BEGIN_STMT
  if (Result != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  if (Busy != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _3 = Crypto_AESEncryptContext.IsBusy;
  *_3 = 1;
  # DEBUG BEGIN_STMT
  _4 = Crypto_AESEncryptContext.Result;
  *_4 = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _5 = Crypto_AESEncryptContext.CtxState;
  _6 = (int) _5;
  switch (_6) <default: <L41> [INV], case 0: <L44> [INV], case 2: <L6> [INV], case 4: <L9> [INV], case 5: <L21> [INV]>

  <bb 7> :
<L6>:
  # DEBUG BEGIN_STMT
  if (Busy != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _7 = Crypto_AESEncryptContext.IsBusy;
  *_7 = 0;
  goto <bb 32>; [INV]

  <bb 9> :
<L9>:
  # DEBUG BEGIN_STMT
  Crypto_AES_EncryptCalculateKeySchedule ();
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptCalculateRounds (&Crypto_AESEncryptContext);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 2;
  # DEBUG BEGIN_STMT
  _8 = Crypto_AESEncryptContext.TxtOput;
  TS_MemCpy32 (_8, &Crypto_AESEncryptContext.AesState, 16);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.TxtOputLen = 16;
  # DEBUG BEGIN_STMT
  _9 = Crypto_AESEncryptContext.CancelFlag;
  if (_9 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _10 = Crypto_AESEncryptContext.Crypto_Generic_Callback;
  _11 = Crypto_AESEncryptContext.Job;
  _10 (_11, 12);
  # DEBUG BEGIN_STMT
  _12 = Crypto_AESEncryptContext.Result;
  if (_12 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 11> :
  _13 = Crypto_AESEncryptContext.IsBusy;
  if (_13 != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _14 = Crypto_AESEncryptContext.IsBusy;
  *_14 = 0;
  # DEBUG BEGIN_STMT
  _15 = Crypto_AESEncryptContext.Result;
  *_15 = 12;
  goto <bb 32>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _16 = Crypto_AESEncryptContext.Crypto_Generic_Callback;
  _17 = Crypto_AESEncryptContext.Job;
  _18 = Crypto_AESEncryptContext.CtxError;
  _16 (_17, _18);
  # DEBUG BEGIN_STMT
  _19 = Crypto_AESEncryptContext.Result;
  if (_19 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 14> :
  _20 = Crypto_AESEncryptContext.IsBusy;
  if (_20 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _21 = Crypto_AESEncryptContext.IsBusy;
  *_21 = 0;
  # DEBUG BEGIN_STMT
  _22 = Crypto_AESEncryptContext.Result;
  _23 = Crypto_AESEncryptContext.CtxError;
  *_22 = _23;
  goto <bb 32>; [INV]

  <bb 16> :
<L21>:
  # DEBUG BEGIN_STMT
  _24 = Crypto_AESEncryptContext.IsBusy;
  if (_24 != 0B)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _25 = Crypto_AESEncryptContext.IsBusy;
  *_25 = 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  _26 = Crypto_AESEncryptContext.Job;
  _27 = _26->jobPrimitiveInputOutput.mode;
  _28 = (int) _27;
  _29 = _28 & 7;
  if (_29 == 7)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _30 = Crypto_AESEncryptContext.Job;
  _31 = _30->jobPrimitiveInfo;
  _32 = _31->processingType;
  if (_32 == 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _33 = Crypto_AESEncryptContext.Job;
  _34 = _33->jobPrimitiveInputOutput.outputLengthPtr;
  *_34 = 16;
  goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _35 = Crypto_AESEncryptContext.Job;
  _36 = _35->jobPrimitiveInputOutput.outputLengthPtr;
  *_36 = 0;

  <bb 22> :
  # DEBUG BEGIN_STMT
  _37 = Crypto_AESEncryptContext.TmpOutputLengthPtr;
  if (_37 != 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  _38 = Crypto_AESEncryptContext.Job;
  _39 = Crypto_AESEncryptContext.TmpOutputLengthPtr;
  _38->jobPrimitiveInputOutput.outputLengthPtr = _39;

  <bb 24> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 0;
  # DEBUG BEGIN_STMT
  _40 = Crypto_AESEncryptContext.CancelFlag;
  if (_40 == 1)
    goto <bb 25>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _41 = Crypto_AESEncryptContext.Crypto_Generic_Callback;
  _42 = Crypto_AESEncryptContext.Job;
  _41 (_42, 12);
  # DEBUG BEGIN_STMT
  _43 = Crypto_AESEncryptContext.Result;
  if (_43 != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 26> :
  _44 = Crypto_AESEncryptContext.IsBusy;
  if (_44 != 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  _45 = Crypto_AESEncryptContext.IsBusy;
  *_45 = 0;
  # DEBUG BEGIN_STMT
  _46 = Crypto_AESEncryptContext.Result;
  *_46 = 12;
  goto <bb 32>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  _47 = Crypto_AESEncryptContext.Crypto_Generic_Callback;
  _48 = Crypto_AESEncryptContext.Job;
  _49 = Crypto_AESEncryptContext.CtxError;
  _47 (_48, _49);
  # DEBUG BEGIN_STMT
  _50 = Crypto_AESEncryptContext.Result;
  if (_50 != 0B)
    goto <bb 29>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 29> :
  _51 = Crypto_AESEncryptContext.IsBusy;
  if (_51 != 0B)
    goto <bb 30>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  _52 = Crypto_AESEncryptContext.IsBusy;
  *_52 = 0;
  # DEBUG BEGIN_STMT
  _53 = Crypto_AESEncryptContext.Result;
  _54 = Crypto_AESEncryptContext.CtxError;
  *_53 = _54;
  goto <bb 32>; [INV]

  <bb 31> :
<L41>:
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 6;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxError = 1;
  # DEBUG BEGIN_STMT

  <bb 32> :
<L44>:
  return;

}


Crypto_AESEncryptFinish ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 5;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CurrentMode = 4;
  return;

}


Crypto_AESEncryptUpdate (const uint8 * IputTextPtr, uint32 IputTextLength, uint8 * OputTextPtr, uint32 * OputTextLengthPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CurrentMode = 2;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.TxtIput = IputTextPtr;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.TxtIputLen = IputTextLength;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.TxtOput = OputTextPtr;
  # DEBUG BEGIN_STMT
  _1 = *OputTextLengthPtr;
  Crypto_AESEncryptContext.TxtOputLen = _1;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 4;
  # DEBUG BEGIN_STMT
  _2 = Crypto_AESEncryptContext.TxtIput;
  TS_MemCpy32 (&Crypto_AESEncryptContext.AesState, _2, 16);
  return;

}


Crypto_AESEncryptStart (const void * CfgPtr, const struct Crypto_SymKeyType * KeyPtr)
{
  const struct Crypto_AES_ConfigType * LocCfgPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  LocCfgPtr = CfgPtr;
  # DEBUG BEGIN_STMT
  _1 = LocCfgPtr->Crypto_Generic_Callback;
  Crypto_AESEncryptContext.Crypto_Generic_Callback = _1;
  # DEBUG BEGIN_STMT
  _2 = LocCfgPtr->Job;
  Crypto_AESEncryptContext.Job = _2;
  # DEBUG BEGIN_STMT
  _3 = LocCfgPtr->ObjId;
  Crypto_AESEncryptContext.ObjId = _3;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CurrentMode = 1;
  # DEBUG BEGIN_STMT
  _4 = LocCfgPtr->TypeKey;
  switch (_4) <default: <L5> [INV], case 16: <L0> [INV], case 24: <L1> [INV], case 32: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeKey = 4;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeTurn = 10;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeKey = 6;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeTurn = 12;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeKey = 8;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.SzeTurn = 14;
  # DEBUG BEGIN_STMT

  <bb 6> :
<L5>:
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.KeyExpdFast = &Crypto_AesEncryptExpKey;
  # DEBUG BEGIN_STMT
  _5 = KeyPtr->length;
  Crypto_AESEncryptContext.KeySeedLen = _5;
  # DEBUG BEGIN_STMT
  _6 = &KeyPtr->data;
  _7 = KeyPtr->length;
  TS_MemCpy32 (&Crypto_AESEncryptContext.KeySeed, _6, _7);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxError = 0;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CtxState = 2;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CntTurn = 0;
  # DEBUG BEGIN_STMT
  _8 = Crypto_AESEncryptContext.Crypto_Generic_Callback;
  _9 = Crypto_AESEncryptContext.Job;
  _10 = Crypto_AESEncryptContext.CtxError;
  _8 (_9, _10);
  return;

}


Crypto_AL_ENCRYPT_AES_ECB_CallBack (struct Crypto_JobType * Job, uint8 Result)
{
  Std_ReturnType RetVal;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _1 = Job->jobPrimitiveInfo;
  _2 = _1->processingType;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = Crypto_AESEncryptContext.CurrentMode;
  _4 = _3 & 4;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (Result != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CurrentMode = 0;
  # DEBUG BEGIN_STMT
  _5 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_5].DriverObjectState = 0;
  # DEBUG BEGIN_STMT
  _6 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_6].CurrentJob = 0B;
  # DEBUG BEGIN_STMT
  _7 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_7].SkipPeriodicMainFunction = 1;
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Job->jobState = 0;
  # DEBUG BEGIN_STMT
  CryIf_CallbackNotification (Job, Result);
  # DEBUG BEGIN_STMT
  Crypto_AL_ENCRYPT_AES_ECB_Reset ();
  goto <bb 17>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = Crypto_AESEncryptContext.CurrentMode;
  _9 = _8 & 2;
  if (_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _10 = Crypto_AESEncryptContext.Job;
  _11 = _10->jobPrimitiveInputOutput.mode;
  _12 = (int) _11;
  _13 = _12 & 7;
  if (_13 != 7)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  CryIf_CallbackNotification (Job, Result);
  goto <bb 17>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _14 = Crypto_AESEncryptContext.Job;
  _15 = _14->jobPrimitiveInputOutput.mode;
  _16 = (int) _15;
  _17 = _16 & 7;
  if (_17 == 3)
    goto <bb 11>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _18 = Crypto_AESEncryptContext.Job;
  _19 = _18->jobPrimitiveInputOutput.mode;
  _20 = (int) _19;
  _21 = _20 & 7;
  if (_21 == 7)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  _22 = Crypto_AESEncryptContext.CurrentMode;
  _23 = _22 & 1;
  if (_23 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _24 = Crypto_AESEncryptContext.ObjId;
  RetVal = Crypto_AL_ENCRYPT_AES_ECB_Update (_24, Job);
  # DEBUG BEGIN_STMT
  if (RetVal != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CurrentMode = 0;
  # DEBUG BEGIN_STMT
  _25 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_25].DriverObjectState = 0;
  # DEBUG BEGIN_STMT
  _26 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_26].CurrentJob = 0B;
  # DEBUG BEGIN_STMT
  _27 = Crypto_AESEncryptContext.ObjId;
  Crypto_DriverObjects[_27].SkipPeriodicMainFunction = 1;
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Job->jobState = 0;
  # DEBUG BEGIN_STMT
  CryIf_CallbackNotification (Job, RetVal);
  # DEBUG BEGIN_STMT
  Crypto_AL_ENCRYPT_AES_ECB_Reset ();
  goto <bb 17>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _28 = Crypto_AESEncryptContext.Job;
  _29 = _28->jobPrimitiveInputOutput.mode;
  _30 = (int) _29;
  _31 = _30 & 7;
  if (_31 == 7)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  _32 = Crypto_AESEncryptContext.CurrentMode;
  _33 = _32 & 2;
  if (_33 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _34 = Crypto_AESEncryptContext.ObjId;
  Crypto_AL_ENCRYPT_AES_ECB_Finish (_34, Job);

  <bb 17> :
  return;

}


Crypto_AL_AESPreCalculateKeySchedule (uint8 SzeKey, uint32 SzeTurn, uint8 * KeySeed, void * KeyExpdFastPtr)
{
  uint32 temp;
  uint32 ExpandedKey[60];
  const uint32 Crypto_AES_Rcon_Fast[10];
  uint8 Index;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Crypto_AES_Rcon_Fast = *.LC0;
  # DEBUG BEGIN_STMT
  ExpandedKey = {};
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (unsigned int) Index;
  _2 = _1 * 4;
  _3 = KeySeed + _2;
  _4 = *_3;
  _5 = (long unsigned int) _4;
  _6 = _5 << 24;
  _7 = (unsigned int) Index;
  _8 = _7 * 4;
  _9 = _8 + 1;
  _10 = KeySeed + _9;
  _11 = *_10;
  _12 = (long unsigned int) _11;
  _13 = _12 << 16;
  _14 = _6 | _13;
  _15 = (unsigned int) Index;
  _16 = _15 * 4;
  _17 = _16 + 2;
  _18 = KeySeed + _17;
  _19 = *_18;
  _20 = (long unsigned int) _19;
  _21 = _20 << 8;
  _22 = _14 | _21;
  _23 = (unsigned int) Index;
  _24 = _23 * 4;
  _25 = _24 + 3;
  _26 = KeySeed + _25;
  _27 = *_26;
  _28 = (long unsigned int) _27;
  _29 = (int) Index;
  _30 = _22 | _28;
  ExpandedKey[_29] = _30;
  # DEBUG BEGIN_STMT
  Index.25_31 = Index;
  Index = Index.25_31 + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Index < SzeKey)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Index = SzeKey;
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _32 = (unsigned int) Index;
  _33 = _32 + 4294967295;
  temp = ExpandedKey[_33];
  # DEBUG BEGIN_STMT
  _34 = Index % SzeKey;
  if (_34 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _35 = temp >> 16;
  _36 = _35 & 255;
  _37 = Crypto_AES_SboxNrm[_36];
  _38 = (long unsigned int) _37;
  _39 = _38 << 24;
  _40 = temp >> 8;
  _41 = _40 & 255;
  _42 = Crypto_AES_SboxNrm[_41];
  _43 = (long unsigned int) _42;
  _44 = _43 << 16;
  _45 = _39 ^ _44;
  _46 = temp & 255;
  _47 = Crypto_AES_SboxNrm[_46];
  _48 = (long unsigned int) _47;
  _49 = _48 << 8;
  _50 = _45 ^ _49;
  _51 = temp >> 24;
  _52 = Crypto_AES_SboxNrm[_51];
  _53 = (long unsigned int) _52;
  _54 = _50 ^ _53;
  _55 = Index / SzeKey;
  _56 = (unsigned int) _55;
  _57 = _56 + 4294967295;
  _58 = Crypto_AES_Rcon_Fast[_57];
  temp = _54 ^ _58;
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (SzeKey > 6)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _59 = Index % SzeKey;
  if (_59 == 4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _60 = temp >> 24;
  _61 = Crypto_AES_SboxNrm[_60];
  _62 = (long unsigned int) _61;
  _63 = _62 << 24;
  _64 = temp >> 16;
  _65 = _64 & 255;
  _66 = Crypto_AES_SboxNrm[_65];
  _67 = (long unsigned int) _66;
  _68 = _67 << 16;
  _69 = _63 ^ _68;
  _70 = temp >> 8;
  _71 = _70 & 255;
  _72 = Crypto_AES_SboxNrm[_71];
  _73 = (long unsigned int) _72;
  _74 = _73 << 8;
  _75 = _69 ^ _74;
  _76 = temp & 255;
  _77 = Crypto_AES_SboxNrm[_76];
  _78 = (long unsigned int) _77;
  temp = _75 ^ _78;

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _79 = (int) Index;
  _80 = (int) SzeKey;
  _81 = _79 - _80;
  _82 = ExpandedKey[_81];
  _83 = (int) Index;
  _84 = temp ^ _82;
  ExpandedKey[_83] = _84;
  # DEBUG BEGIN_STMT
  Index.26_85 = Index;
  Index = Index.26_85 + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  _86 = (long unsigned int) Index;
  _87 = SzeTurn + 1;
  _88 = _87 * 4;
  if (_86 < _88)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  TS_MemCpy32 (KeyExpdFastPtr, &ExpandedKey, 240);
  Crypto_AES_Rcon_Fast = {CLOBBER};
  ExpandedKey = {CLOBBER};
  return;

}


Crypto_AL_ENCRYPT_AES_ECB_MainFunction (Std_ReturnType * Result, boolean * Busy)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptMainFunction (Result, Busy);
  return;

}


Crypto_AL_ENCRYPT_AES_ECB_Cancel (uint32 ObjectId, const struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6889;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _1 = Crypto_AESEncryptContext.CtxState;
  if (_1 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AL_ENCRYPT_AES_ECB_Reset ();
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptContext.CancelFlag = 1;
  # DEBUG BEGIN_STMT
  RetVal = 12;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6889 = RetVal;
  return D.6889;

}


Crypto_AL_ENCRYPT_AES_ECB_Finish (uint32 ObjectId, const struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6884;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Crypto_AESEncryptContext.CtxState;
  if (_1 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptFinish ();
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetVal = 2;

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.6884 = RetVal;
  return D.6884;

}


Crypto_AL_ENCRYPT_AES_ECB_Update (uint32 ObjectId, const struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6879;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Crypto_AESEncryptContext.CtxState;
  if (_1 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Job->jobPrimitiveInputOutput.inputLength;
  if (_2 == 16)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = Job->jobPrimitiveInputOutput.outputLengthPtr;
  _4 = *_3;
  if (_4 == 16)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = Job->jobPrimitiveInputOutput.inputPtr;
  _6 = Job->jobPrimitiveInputOutput.inputLength;
  _7 = Job->jobPrimitiveInputOutput.outputPtr;
  _8 = Job->jobPrimitiveInputOutput.outputLengthPtr;
  Crypto_AESEncryptUpdate (_5, _6, _7, _8);
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal = 2;

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.6879 = RetVal;
  return D.6879;

}


Crypto_AL_ENCRYPT_AES_ECB_Start (uint32 ObjectId, struct Crypto_JobType * Job)
{
  struct Crypto_AES_ConfigType Crypto_AES_ECB_ENCRYPT_Cfg;
  Std_ReturnType RetVal;
  Std_ReturnType D.6848;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Crypto_AES_ECB_ENCRYPT_Cfg.Crypto_Generic_Callback = 0B;
  Crypto_AES_ECB_ENCRYPT_Cfg.TypeKey = 16;
  Crypto_AES_ECB_ENCRYPT_Cfg.ValuPrio = 0;
  Crypto_AES_ECB_ENCRYPT_Cfg.ObjId = 0;
  Crypto_AES_ECB_ENCRYPT_Cfg.Job = 0B;
  # DEBUG BEGIN_STMT
  Crypto_AL_ENCRYPT_AES_ECB_Reset ();
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _1 = Job->jobPrimitiveInfo;
  _2 = _1->primitiveInfo;
  _3 = _2->algorithm.keyLength;
  Crypto_AesKey.length = _3;
  # DEBUG BEGIN_STMT
  _4 = Crypto_AesKey.length;
  Crypto_AES_ECB_ENCRYPT_Cfg.TypeKey = _4;
  # DEBUG BEGIN_STMT
  _5 = Crypto_AesKey.length;
  if (_5 == 16)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _6 = Crypto_AesKey.length;
  if (_6 == 24)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _7 = Crypto_AesKey.length;
  if (_7 == 32)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Crypto_AES_ECB_ENCRYPT_Cfg.Crypto_Generic_Callback = Crypto_AL_ENCRYPT_AES_ECB_CallBack;
  # DEBUG BEGIN_STMT
  Crypto_AES_ECB_ENCRYPT_Cfg.Job = Job;
  # DEBUG BEGIN_STMT
  Crypto_AES_ECB_ENCRYPT_Cfg.ObjId = ObjectId;
  # DEBUG BEGIN_STMT
  _8 = Job->cryptoKeyId;
  RetVal = Crypto_AL_KeyElementGet (_8, 1, &Crypto_AesKey.data, &Crypto_AesKey.length);
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptStart (&Crypto_AES_ECB_ENCRYPT_Cfg, &Crypto_AesKey);

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.6848 = RetVal;
  Crypto_AES_ECB_ENCRYPT_Cfg = {CLOBBER};
  return D.6848;

}


Crypto_AL_ENCRYPT_AES_ECB_Reset ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  TS_MemBZero32 (&Crypto_AESEncryptContext, 120);
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  return;

}


Crypto_AES_Helper_Encrypt_MainFunction ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptMainFunction (&Crypto_HelperEncryptResult, &Crypto_HelperEncryptBusy);
  return;

}


Crypto_AL_AES_EncryptPreCalc (const uint8 * InputPtr, uint8 * OutputPtr, uint32 * OutputLengthPtr, uint32 KeyLength, uint32 * expKey)
{
  struct Crypto_AES_ContextType Context;
  Std_ReturnType RetVal;
  Std_ReturnType D.6837;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Context.KeyExpdLen = 60;
  # DEBUG BEGIN_STMT
  Context.KeyExpdFast = expKey;
  # DEBUG BEGIN_STMT
  if (KeyLength == 16)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 4;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 10;
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (KeyLength == 24)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 6;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 12;
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (KeyLength == 32)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 8;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 14;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Context.KeySeedLen = KeyLength;
  # DEBUG BEGIN_STMT
  TS_MemCpy32 (&Context.AesState, InputPtr, 16);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptCalculateRounds (&Context);
  # DEBUG BEGIN_STMT
  _1 = *OutputLengthPtr;
  if (_1 <= 16)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _2 = *OutputLengthPtr;
  TS_MemCpy32 (OutputPtr, &Context.AesState, _2);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  TS_MemCpy32 (OutputPtr, &Context.AesState, 16);
  # DEBUG BEGIN_STMT
  *OutputLengthPtr = 16;

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.6837 = RetVal;
  Context = {CLOBBER};
  return D.6837;

}


Crypto_AES_Helper_Encrypt_SyncSingleCall (const uint8 * InputPtr, uint32 InputLength, uint8 * OutputPtr, uint32 * OutputLengthPtr, const struct Crypto_SymKeyType * KeyPtr)
{
  struct Crypto_AES_ContextType Context;
  Std_ReturnType RetVal;
  Std_ReturnType D.6820;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Context.KeyExpdFast = &Crypto_AesEncryptExpKey;
  # DEBUG BEGIN_STMT
  _1 = KeyPtr->length;
  if (_1 == 16)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 4;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 10;
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = KeyPtr->length;
  if (_2 == 24)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 6;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 12;
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _3 = KeyPtr->length;
  if (_3 == 32)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Context.SzeKey = 8;
  # DEBUG BEGIN_STMT
  Context.SzeTurn = 14;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _4 = KeyPtr->length;
  Context.KeySeedLen = _4;
  # DEBUG BEGIN_STMT
  _5 = &KeyPtr->data;
  _6 = KeyPtr->length;
  TS_MemCpy32 (&Context.KeySeed, _5, _6);
  # DEBUG BEGIN_STMT
  TS_MemCpy32 (&Context.AesState, InputPtr, 16);
  # DEBUG BEGIN_STMT
  Crypto_AESCommonCalculateKeySchedule (&Context);
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptCalculateRounds (&Context);
  # DEBUG BEGIN_STMT
  _7 = *OutputLengthPtr;
  if (_7 <= 16)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _8 = *OutputLengthPtr;
  TS_MemCpy32 (OutputPtr, &Context.AesState, _8);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  TS_MemCpy32 (OutputPtr, &Context.AesState, 16);
  # DEBUG BEGIN_STMT
  *OutputLengthPtr = 16;

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.6820 = RetVal;
  Context = {CLOBBER};
  return D.6820;

}


Crypto_AES_Helper_Encrypt_Finish (Crypto_ProcessingType IsSync)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_AESEncryptContext.Job;
  _2 = _1->jobPrimitiveInputOutput.outputLengthPtr;
  Crypto_AESEncryptContext.TmpOutputLengthPtr = _2;
  # DEBUG BEGIN_STMT
  _3 = Crypto_AESEncryptContext.Job;
  _3->jobPrimitiveInputOutput.outputLengthPtr = &Crypto_AESEncryptContext.KeySeedLen;
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptFinish ();
  # DEBUG BEGIN_STMT
  if (IsSync == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AESHelperEncryptSynchronousMainCall ();

  <bb 4> :
  return;

}


Crypto_AES_Helper_Encrypt_Update (Crypto_ProcessingType IsSync, const uint8 * CipherTextPtr, uint32 CipherTextLength, uint8 * PlainTextPtr, uint32 * PlainTextLengthPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptUpdate (CipherTextPtr, CipherTextLength, PlainTextPtr, PlainTextLengthPtr);
  # DEBUG BEGIN_STMT
  if (IsSync == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_AESHelperEncryptSynchronousMainCall ();

  <bb 4> :
  return;

}


Crypto_AES_Helper_Encrypt_Start (const uint32 ObjId, void (*<T542>) (struct Crypto_JobType *, uint8) Crypto_Generic_Callback, struct Crypto_JobType * Job, Crypto_ProcessingType IsSync, const struct Crypto_SymKeyType * KeyPtr)
{
  struct Crypto_AES_ConfigType Temp;
  Std_ReturnType RetVal;
  Std_ReturnType D.6748;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = KeyPtr->length;
  if (_1 == 16)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Temp.TypeKey = 16;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = KeyPtr->length;
  if (_2 == 24)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Temp.TypeKey = 24;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _3 = KeyPtr->length;
  if (_3 == 32)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Temp.TypeKey = 32;
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Temp.Job = Job;
  # DEBUG BEGIN_STMT
  Temp.ObjId = ObjId;
  # DEBUG BEGIN_STMT
  Crypto_ModeEncryptCallBack = Crypto_Generic_Callback;
  # DEBUG BEGIN_STMT
  if (IsSync == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Temp.Crypto_Generic_Callback = Crypto_Generic_Callback;
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Temp.Crypto_Generic_Callback = Crypto_AES_Helper_Encrypt_CallbackNotification;

  <bb 12> :
  # DEBUG BEGIN_STMT
  Crypto_AESEncryptStart (&Temp, KeyPtr);

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.6748 = RetVal;
  Temp = {CLOBBER};
  return D.6748;

}


