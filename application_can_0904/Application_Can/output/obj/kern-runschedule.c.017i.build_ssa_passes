__attribute__((target ("general-regs-only")))
OS_FinalExpiry (const struct os_schedule_t * ss, struct os_scheduledynamic_t * sd, const struct os_scheduleentry_t * currp)
{
  os_boolean_t repeat;
  os_tick_t delta;
  const struct os_scheduleentry_t * nextp;
  os_boolean_t D.7489;
  os_tick_t iftmp.13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  repeat = 0;
  # DEBUG BEGIN_STMT
  sd->next = 0;
  # DEBUG BEGIN_STMT
  _1 = ss->period;
  _2 = currp->offset;
  delta = _1 - _2;
  # DEBUG BEGIN_STMT
  _3 = sd->chain;
  if (_3 != 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = sd->status;
  _5 = _4 | 128;
  sd->status = _5;
  # DEBUG BEGIN_STMT
  repeat = OS_ResetScheduleAlarm (ss, sd, delta);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = ss->flags;
  _7 = (unsigned int) _6;
  _8 = _7 & 1;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  nextp = ss->table;
  # DEBUG BEGIN_STMT
  _9 = nextp->offset;
  delta = delta + _9;
  # DEBUG BEGIN_STMT
  OS_synchronizeFunc.14_10 = OS_synchronizeFunc;
  if (OS_synchronizeFunc.14_10 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  OS_synchronizeFunc.15_11 = OS_synchronizeFunc;
  iftmp.13 = OS_synchronizeFunc.15_11 (sd, nextp, delta);
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.13 = delta;

  <bb 8> :
  delta = iftmp.13;
  # DEBUG BEGIN_STMT
  repeat = OS_ResetScheduleAlarm (ss, sd, delta);
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _12 = sd->status;
  _13 = _12 | 128;
  sd->status = _13;
  # DEBUG BEGIN_STMT
  repeat = OS_ResetScheduleAlarm (ss, sd, delta);

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.7489 = repeat;
  return D.7489;

}


__attribute__((target ("general-regs-only")))
OS_Chain (struct os_scheduledynamic_t * sd)
{
  os_boolean_t repeat;
  const struct os_scheduleentry_t * nextp;
  struct os_scheduledynamic_t * scd;
  const struct os_schedule_t * scs;
  os_scheduleid_t sc;
  os_boolean_t D.7477;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  repeat = 0;
  # DEBUG BEGIN_STMT
  sc = sd->chain;
  # DEBUG BEGIN_STMT
  sd->chain = 255;
  # DEBUG BEGIN_STMT
  sd->status = 0;
  # DEBUG BEGIN_STMT
  OS_scheduleTableBase.12_1 = OS_scheduleTableBase;
  _2 = (unsigned int) sc;
  _3 = _2 * 36;
  scs = OS_scheduleTableBase.12_1 + _3;
  # DEBUG BEGIN_STMT
  scd = scs->dynamic;
  # DEBUG BEGIN_STMT
  _4 = scd->status;
  if (_4 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  scd->status = 3;
  # DEBUG BEGIN_STMT
  scd->next = 0;
  # DEBUG BEGIN_STMT
  nextp = scs->table;
  # DEBUG BEGIN_STMT
  _5 = sd->ctrAbs;
  scd->ctrAbs = _5;
  # DEBUG BEGIN_STMT
  _6 = nextp->offset;
  repeat = OS_ResetScheduleAlarm (scs, scd, _6);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  OS_Error (&OS_svc_RunSchedule, 49, 0B);

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.7477 = repeat;
  return D.7477;

}


__attribute__((target ("general-regs-only")))
OS_RunSchedule (os_scheduleid_t s)
{
  os_tick_t maxallowedvalue;
  os_counterid_t counter;
  os_boolean_t looping;
  os_intstatus_t is;
  os_tick_t delta;
  const struct os_scheduleentry_t * nextp;
  const struct os_scheduleentry_t * currp;
  struct os_scheduledynamic_t * sd;
  const struct os_schedule_t * ss;
  os_tick_t iftmp.9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  looping = 0;
  # DEBUG BEGIN_STMT
  OS_scheduleTableBase.0_1 = OS_scheduleTableBase;
  _2 = (unsigned int) s;
  _3 = _2 * 36;
  ss = OS_scheduleTableBase.0_1 + _3;
  # DEBUG BEGIN_STMT
  sd = ss->dynamic;
  # DEBUG BEGIN_STMT
  OS_kernDisableLevel.1_4 = OS_kernDisableLevel;
  is = OS_CORTEXM_IntSetDisablingLevel (OS_kernDisableLevel.1_4);
  # DEBUG BEGIN_STMT
  _5 = sd->status;
  if (_5 == 9)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_alarmTableBase.2_6 = OS_alarmTableBase;
  _7 = ss->alarm;
  _8 = (unsigned int) _7;
  _9 = _8 * 28;
  _10 = OS_alarmTableBase.2_6 + _9;
  counter = _10->counter;
  # DEBUG BEGIN_STMT
  OS_counterTableBase.3_11 = OS_counterTableBase;
  _12 = (unsigned int) counter;
  _13 = _12 * 32;
  _14 = OS_counterTableBase.3_11 + _13;
  maxallowedvalue = _14->maxallowedvalue;
  # DEBUG BEGIN_STMT
  _15 = sd->adjRemaining;
  if (maxallowedvalue < _15)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  delta = maxallowedvalue;
  # DEBUG BEGIN_STMT
  _16 = sd->adjRemaining;
  _17 = _16 - maxallowedvalue;
  sd->adjRemaining = _17;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  delta = sd->adjRemaining;
  # DEBUG BEGIN_STMT
  sd->adjRemaining = 0;
  # DEBUG BEGIN_STMT
  sd->status = 11;

  <bb 6> :
  # DEBUG BEGIN_STMT
  OS_SetScheduleAlarm (ss, sd, delta, 1);
  goto <bb 26>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _18 = sd->status;
  _19 = (unsigned int) _18;
  _20 = _19 & 7;
  if (_20 != 3)
    goto <bb 26>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _21 = sd->status;
  _22 = (signed char) _21;
  if (_22 < 0)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  sd->status = 0;
  # DEBUG BEGIN_STMT
  _23 = sd->chain;
  if (_23 == 255)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  looping = 0;
  goto <bb 25>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  OS_alarmTableBase.4_24 = OS_alarmTableBase;
  _25 = ss->alarm;
  _26 = (unsigned int) _25;
  _27 = _26 * 28;
  _28 = OS_alarmTableBase.4_24 + _27;
  _29 = _28->counter;
  OS_alarmTableBase.5_30 = OS_alarmTableBase;
  OS_scheduleTableBase.6_31 = OS_scheduleTableBase;
  _32 = sd->chain;
  _33 = (unsigned int) _32;
  _34 = _33 * 36;
  _35 = OS_scheduleTableBase.6_31 + _34;
  _36 = _35->alarm;
  _37 = (unsigned int) _36;
  _38 = _37 * 28;
  _39 = OS_alarmTableBase.5_30 + _38;
  _40 = _39->counter;
  if (_29 != _40)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  OS_Panic (68);
  goto <bb 25>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  s = sd->chain;
  # DEBUG BEGIN_STMT
  looping = OS_Chain (sd);
  # DEBUG BEGIN_STMT
  OS_scheduleTableBase.7_41 = OS_scheduleTableBase;
  _42 = (unsigned int) s;
  _43 = _42 * 36;
  ss = OS_scheduleTableBase.7_41 + _43;
  # DEBUG BEGIN_STMT
  sd = ss->dynamic;
  goto <bb 25>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _44 = ss->table;
  _45 = sd->next;
  _46 = (unsigned int) _45;
  _47 = _46 * 20;
  currp = _44 + _47;
  # DEBUG BEGIN_STMT
  OS_CORTEXM_IntSetDisablingLevel (is);
  # DEBUG BEGIN_STMT
  _48 = currp->event;
  if (_48 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _49 = currp->task;
  OS_KernActivateTask (_49);
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _50 = currp->task;
  _51 = currp->event;
  OS_KernSetEvent (_50, _51);

  <bb 17> :
  # DEBUG BEGIN_STMT
  OS_kernDisableLevel.8_52 = OS_kernDisableLevel;
  OS_CORTEXM_IntSetDisablingLevel (OS_kernDisableLevel.8_52);
  # DEBUG BEGIN_STMT
  _53 = sd->next;
  _54 = _53;
  _55 = _54 + 1;
  sd->next = _55;
  # DEBUG BEGIN_STMT
  _56 = sd->next;
  _57 = ss->nEntries;
  if (_56 >= _57)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  looping = OS_FinalExpiry (ss, sd, currp);
  goto <bb 25>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _58 = ss->table;
  _59 = sd->next;
  _60 = (unsigned int) _59;
  _61 = _60 * 20;
  nextp = _58 + _61;
  # DEBUG BEGIN_STMT
  _62 = nextp->offset;
  _63 = currp->offset;
  delta = _62 - _63;
  # DEBUG BEGIN_STMT
  if (delta == 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  looping = 1;
  goto <bb 25>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  OS_synchronizeFunc.10_64 = OS_synchronizeFunc;
  if (OS_synchronizeFunc.10_64 != 0B)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  OS_synchronizeFunc.11_65 = OS_synchronizeFunc;
  iftmp.9 = OS_synchronizeFunc.11_65 (sd, nextp, delta);
  goto <bb 24>; [INV]

  <bb 23> :
  iftmp.9 = delta;

  <bb 24> :
  delta = iftmp.9;
  # DEBUG BEGIN_STMT
  looping = OS_ResetScheduleAlarm (ss, sd, delta);

  <bb 25> :
  # DEBUG BEGIN_STMT
  if (looping != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  OS_CORTEXM_IntSetDisablingLevel (is);
  return;

}


