FlexCAN_Ip_ManualBusOffRecovery (uint8 Instance)
{
  Flexcan_Ip_StatusType RetVal;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * Base;
  int _1;
  _Bool _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _36;
  Flexcan_Ip_StatusType _39;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) Instance_19(D);
  Base_21 = Flexcan_Ip_apxBase[_1];
  # DEBUG Base => Base_21
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed_23 = 0;
  # DEBUG timeElapsed => timeElapsed_23
  # DEBUG BEGIN_STMT
  uS2Ticks_25 = OsIf_MicrosToTicks (1000000, 0);
  # DEBUG uS2Ticks => uS2Ticks_25
  # DEBUG BEGIN_STMT
  RetVal_26 = 1;
  # DEBUG RetVal => RetVal_26
  # DEBUG BEGIN_STMT
  _2 = Instance_19(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 ={v} Base_21->CTRL1;
  _5 = _4 & 64;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal_28 = 0;
  # DEBUG RetVal => RetVal_28
  # DEBUG BEGIN_STMT
  _6 ={v} Base_21->ESR1;
  _7 = _6 & 32;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20 ();
  # DEBUG BEGIN_STMT
  _8 ={v} Base_21->CTRL1;
  _9 = _8 & 4294967231;
  Base_21->CTRL1 ={v} _9;
  # DEBUG BEGIN_STMT
  _10 ={v} Base_21->CTRL1;
  _11 = _10 | 64;
  Base_21->CTRL1 ={v} _11;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20 ();
  # DEBUG BEGIN_STMT
  _12 = OsIf_GetCounter (0);
  timeStart = _12;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _36 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_37 = _36 + timeElapsed_15;
  # DEBUG timeElapsed => timeElapsed_37
  # DEBUG BEGIN_STMT
  if (timeElapsed_37 >= uS2Ticks_25)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal_38 = 3;
  # DEBUG RetVal => RetVal_38
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
  # timeElapsed_15 = PHI <timeElapsed_23(4), timeElapsed_37(5)>
  # DEBUG timeElapsed => timeElapsed_15
  # DEBUG BEGIN_STMT
  _13 ={v} Base_21->ESR1;
  _14 = _13 & 32;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # RetVal_16 = PHI <RetVal_26(2), RetVal_28(3), RetVal_38(6), RetVal_28(7)>
  # DEBUG RetVal => RetVal_16
  # DEBUG BEGIN_STMT
  _39 = RetVal_16;
  timeStart ={v} {CLOBBER};
  return _39;

}


FlexCAN_Ip_GetListenOnlyMode (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  boolean _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_4
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_IsListenOnlyModeEnabled (base_4);
  return _6;

}


FlexCAN_Ip_SetListenOnlyMode_Privileged (uint8 instance, const boolean enable)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  _Bool _5;
  Flexcan_Ip_StatusType _32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_12(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_15 = 0;
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  status_16 = 0;
  # DEBUG status => status_16
  # DEBUG BEGIN_STMT
  _3 = (int) instance_12(D);
  pBase_17 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_17
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_17);
  _5 = _4 == 0;
  disabled_19 = (boolean) _5;
  # DEBUG disabled => disabled_19
  # DEBUG BEGIN_STMT
  if (disabled_19 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_21 = FlexCAN_Enable (pBase_17);
  # DEBUG result => result_21

  <bb 4> :
  # result_6 = PHI <result_15(2), result_21(3)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  freeze_23 = FlexCAN_IsFreezeMode (pBase_17);
  # DEBUG freeze => freeze_23
  # DEBUG BEGIN_STMT
  if (freeze_23 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_24 = 1;
  # DEBUG result => result_24

  <bb 7> :
  # result_7 = PHI <result_6(4), result_6(5), result_24(6)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  if (result_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetListenOnlyMode (pBase_17, enable_26(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_19 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_30 = FlexCAN_Disable (pBase_17);
  # DEBUG status => status_30
  # DEBUG BEGIN_STMT
  if (status_30 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_31 = status_30;
  # DEBUG result => result_31

  <bb 12> :
  # result_8 = PHI <result_7(9), result_7(10), result_31(11)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _32 = result_8;
  return _32;

}


FlexCAN_Ip_SetRxMb15Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  _Bool _5;
  Flexcan_Ip_StatusType _31;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_12(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_15 = 0;
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  status_16 = 0;
  # DEBUG status => status_16
  # DEBUG BEGIN_STMT
  _3 = (int) instance_12(D);
  pBase_17 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_17
  # DEBUG BEGIN_STMT
  freeze_18 = 0;
  # DEBUG freeze => freeze_18
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_17);
  _5 = _4 == 0;
  disabled_20 = (boolean) _5;
  # DEBUG disabled => disabled_20
  # DEBUG BEGIN_STMT
  if (disabled_20 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_22 = FlexCAN_Enable (pBase_17);
  # DEBUG result => result_22

  <bb 4> :
  # result_6 = PHI <result_15(2), result_22(3)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  freeze_24 = FlexCAN_IsFreezeMode (pBase_17);
  # DEBUG freeze => freeze_24
  # DEBUG BEGIN_STMT
  if (freeze_24 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_25 = 1;
  # DEBUG result => result_25

  <bb 7> :
  # result_7 = PHI <result_6(4), result_6(5), result_25(6)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  if (result_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  pBase_17->RX15MASK ={v} mask_26(D);

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_20 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_29 = FlexCAN_Disable (pBase_17);
  # DEBUG status => status_29
  # DEBUG BEGIN_STMT
  if (status_29 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_30 = status_29;
  # DEBUG result => result_30

  <bb 12> :
  # result_8 = PHI <result_7(9), result_7(10), result_30(11)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _31 = result_8;
  return _31;

}


FlexCAN_Ip_SetRxMb14Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  _Bool _5;
  Flexcan_Ip_StatusType _31;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_12(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_15 = 0;
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  status_16 = 0;
  # DEBUG status => status_16
  # DEBUG BEGIN_STMT
  _3 = (int) instance_12(D);
  pBase_17 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_17
  # DEBUG BEGIN_STMT
  freeze_18 = 0;
  # DEBUG freeze => freeze_18
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_17);
  _5 = _4 == 0;
  disabled_20 = (boolean) _5;
  # DEBUG disabled => disabled_20
  # DEBUG BEGIN_STMT
  if (disabled_20 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_22 = FlexCAN_Enable (pBase_17);
  # DEBUG result => result_22

  <bb 4> :
  # result_6 = PHI <result_15(2), result_22(3)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  freeze_24 = FlexCAN_IsFreezeMode (pBase_17);
  # DEBUG freeze => freeze_24
  # DEBUG BEGIN_STMT
  if (freeze_24 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_25 = 1;
  # DEBUG result => result_25

  <bb 7> :
  # result_7 = PHI <result_6(4), result_6(5), result_25(6)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  if (result_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  pBase_17->RX14MASK ={v} mask_26(D);

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_20 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_29 = FlexCAN_Disable (pBase_17);
  # DEBUG status => status_29
  # DEBUG BEGIN_STMT
  if (status_29 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_30 = status_29;
  # DEBUG result => result_30

  <bb 12> :
  # result_8 = PHI <result_7(9), result_7(10), result_30(11)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _31 = result_8;
  return _31;

}


FlexCAN_Ip_AbortTransfer (uint8 u8Instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType result;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  unsigned char _2;
  unsigned char _3;
  _Bool _4;
  unsigned char _5;
  int _6;
  int _7;
  int _8;
  <unnamed type> _9;
  long unsigned int _10;
  unsigned char _11;
  int _12;
  <unnamed type> _13;
  int _14;
  <unnamed type> _15;
  Flexcan_Ip_StatusType _33;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = u8Instance_20(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = mb_idx_23(D) + 192;
  _4 = _3 > 190;
  _5 = (unsigned char) _4;
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  _6 = (int) u8Instance_20(D);
  pBase_25 = Flexcan_Ip_apxBase[_6];
  # DEBUG pBase => pBase_25
  # DEBUG BEGIN_STMT
  _7 = (int) u8Instance_20(D);
  state_26 = Flexcan_Ip_apxState[_7];
  # DEBUG state => state_26
  # DEBUG BEGIN_STMT
  result_27 = 0;
  # DEBUG result => result_27
  # DEBUG BEGIN_STMT
  if (mb_idx_23(D) <= 63)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _8 = (int) mb_idx_23(D);
  _9 ={v} state_26->mbs[_8].state;
  if (_9 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result_32 = 5;
  # DEBUG result => result_32
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = (long unsigned int) mb_idx_23(D);
  _11 = state_26->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase_25, u8Instance_20(D), _10, _11);
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx_23(D);
  _13 ={v} state_26->mbs[_12].state;
  if (_13 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_30 = FlexCAN_AbortTxTransfer (u8Instance_20(D), mb_idx_23(D));
  # DEBUG result => result_30

  <bb 7> :
  # result_16 = PHI <result_27(5), result_30(6)>
  # DEBUG result => result_16
  # DEBUG BEGIN_STMT
  _14 = (int) mb_idx_23(D);
  _15 ={v} state_26->mbs[_14].state;
  if (_15 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_AbortRxTransfer (u8Instance_20(D), mb_idx_23(D));

  <bb 9> :
  # result_17 = PHI <result_27(2), result_32(4), result_16(7), result_16(8)>
  # DEBUG result => result_17
  # DEBUG BEGIN_STMT
  _33 = result_17;
  return _33;

}


FlexCAN_Ip_SetErrorInt_Privileged (uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  _Bool _5;
  unsigned char _6;
  unsigned char _7;
  Flexcan_Ip_StatusType _39;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = u8Instance_14(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_17 = 0;
  # DEBUG result => result_17
  # DEBUG BEGIN_STMT
  status_18 = 0;
  # DEBUG status => status_18
  # DEBUG BEGIN_STMT
  _3 = (int) u8Instance_14(D);
  pBase_19 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_19
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_19);
  _5 = _4 == 0;
  disabled_21 = (boolean) _5;
  # DEBUG disabled => disabled_21
  # DEBUG BEGIN_STMT
  if (disabled_21 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_23 = FlexCAN_Enable (pBase_19);
  # DEBUG result => result_23

  <bb 4> :
  # result_8 = PHI <result_17(2), result_23(3)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  if (result_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  switch (type_24(D)) <default: <L14> [INV], case 0: <L6> [INV], case 1: <L10> [INV], case 2: <L4> [INV], case 3: <L5> [INV], case 4: <L3> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_19, 32768, enable_25(D));
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_19, 16384, enable_25(D));
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_19, 16385, enable_25(D));
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_IsFreezeMode (pBase_19);
  if (_6 != 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  result_34 = 1;
  # DEBUG result => result_34
  goto <bb 16>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_19, 1024, enable_25(D));
  goto <bb 16>; [INV]

  <bb 12> :
<L10>:
  # DEBUG BEGIN_STMT
  _7 = FlexCAN_IsFreezeMode (pBase_19);
  if (_7 != 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  result_31 = 1;
  # DEBUG result => result_31
  goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_19, 2048, enable_25(D));
  goto <bb 16>; [INV]

  <bb 15> :
<L14>:
  # DEBUG BEGIN_STMT
  DevAssert (0);
  # DEBUG BEGIN_STMT

  <bb 16> :
  # result_9 = PHI <result_8(4), result_8(6), result_8(7), result_8(8), result_8(11), result_8(14), result_8(15), result_34(10), result_31(13)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  if (disabled_21 == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  status_37 = FlexCAN_Disable (pBase_19);
  # DEBUG status => status_37
  # DEBUG BEGIN_STMT
  if (status_37 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  result_38 = status_37;
  # DEBUG result => result_38

  <bb 19> :
  # result_10 = PHI <result_9(16), result_9(17), result_38(18)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  _39 = result_10;
  return _39;

}


FlexCAN_Ip_DisableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  unsigned char _5;
  unsigned char _6;
  unsigned char _7;
  Flexcan_Ip_StatusType _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_11(D);
  pBase_13 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_13
  # DEBUG BEGIN_STMT
  result_14 = 1;
  # DEBUG result => result_14
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_11(D);
  state_15 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_15
  # DEBUG BEGIN_STMT
  _3 = u8Instance_11(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsEnabled (pBase_13);
  if (_5 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_DisableInterrupts (pBase_13);
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_IsEnhancedRxFifoAvailable (pBase_13);
  if (_6 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = FlexCAN_IsEnhancedRxFifoEnabled (pBase_13);
  if (_7 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoIntAll (pBase_13, 0);

  <bb 6> :
  # DEBUG BEGIN_STMT
  state_15->isIntActive = 0;
  # DEBUG BEGIN_STMT
  result_23 = 0;
  # DEBUG result => result_23

  <bb 7> :
  # result_8 = PHI <result_14(2), result_23(6)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _24 = result_8;
  return _24;

}


FlexCAN_Ip_EnableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  unsigned char _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;
  Flexcan_Ip_StatusType _25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_12(D);
  pBase_14 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_14
  # DEBUG BEGIN_STMT
  result_15 = 1;
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_12(D);
  state_16 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_16
  # DEBUG BEGIN_STMT
  _3 = u8Instance_12(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsEnabled (pBase_14);
  if (_5 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnableInterrupts (pBase_14, u8Instance_12(D));
  # DEBUG BEGIN_STMT
  _6 = state_16->enhancedFifoOutput.isPolling;
  if (_6 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _7 = FlexCAN_IsEnhancedRxFifoAvailable (pBase_14);
  if (_7 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_IsEnhancedRxFifoEnabled (pBase_14);
  if (_8 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoIntAll (pBase_14, 1);

  <bb 7> :
  # DEBUG BEGIN_STMT
  state_16->isIntActive = 1;
  # DEBUG BEGIN_STMT
  result_24 = 0;
  # DEBUG result => result_24

  <bb 8> :
  # result_9 = PHI <result_15(2), result_24(7)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  _25 = result_9;
  return _25;

}


FlexCAN_Ip_ClearBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  unsigned char _2;
  int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_6(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance_6(D);
  pBase_9 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_9
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_10(D) == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (pBase_9, 30);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _4 = (long unsigned int) msgBuffIdx_10(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_9, _4);

  <bb 5> :
  return;

}


FlexCAN_Ip_GetBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  const struct FLEXCAN_Type * pBase;
  boolean returnResult;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  long unsigned int _5;
  unsigned char _6;
  boolean iftmp.18_8;
  boolean iftmp.19_9;
  boolean iftmp.19_18;
  boolean iftmp.19_19;
  boolean iftmp.18_22;
  boolean iftmp.18_23;
  boolean _25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  returnResult_11 = 1;
  # DEBUG returnResult => returnResult_11
  # DEBUG BEGIN_STMT
  _1 = instance_12(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance_12(D);
  pBase_15 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_15
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_16(D) == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_GetEnhancedRxFIFOStatusFlag (pBase_15, 30);
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.18_23 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.18_22 = 0;

  <bb 6> :
  # iftmp.18_8 = PHI <iftmp.18_23(4), iftmp.18_22(5)>
  returnResult_24 = iftmp.18_8;
  # DEBUG returnResult => returnResult_24
  goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) msgBuffIdx_16(D);
  _6 = FlexCAN_GetBuffStatusFlag (pBase_15, _5);
  if (_6 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.19_19 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.19_18 = 0;

  <bb 10> :
  # iftmp.19_9 = PHI <iftmp.19_19(8), iftmp.19_18(9)>
  returnResult_20 = iftmp.19_9;
  # DEBUG returnResult => returnResult_20

  <bb 11> :
  # returnResult_7 = PHI <returnResult_24(6), returnResult_20(10)>
  # DEBUG returnResult => returnResult_7
  # DEBUG BEGIN_STMT
  _25 = returnResult_7;
  return _25;

}


FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (uint8 instance, uint8 value)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  _Bool _5;
  Flexcan_Ip_StatusType _32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_12(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_15 = 0;
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  status_16 = 0;
  # DEBUG status => status_16
  # DEBUG BEGIN_STMT
  _3 = (int) instance_12(D);
  pBase_17 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_17
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_17);
  _5 = _4 == 0;
  disabled_19 = (boolean) _5;
  # DEBUG disabled => disabled_19
  # DEBUG BEGIN_STMT
  if (disabled_19 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_21 = FlexCAN_Enable (pBase_17);
  # DEBUG result => result_21

  <bb 4> :
  # result_6 = PHI <result_15(2), result_21(3)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  freeze_23 = FlexCAN_IsFreezeMode (pBase_17);
  # DEBUG freeze => freeze_23
  # DEBUG BEGIN_STMT
  if (freeze_23 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_24 = 1;
  # DEBUG result => result_24

  <bb 7> :
  # result_7 = PHI <result_6(4), result_6(5), result_24(6)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  if (result_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetTxArbitrationStartDelay (pBase_17, value_26(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_19 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_30 = FlexCAN_Disable (pBase_17);
  # DEBUG status => status_30
  # DEBUG BEGIN_STMT
  if (status_30 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_31 = status_30;
  # DEBUG result => result_31

  <bb 12> :
  # result_8 = PHI <result_7(9), result_7(10), result_31(11)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _32 = result_8;
  return _32;

}


FlexCAN_Ip_SetTDCOffset_Privileged (uint8 instance, boolean enable, uint8 offset)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  _Bool _5;
  long unsigned int _6;
  long unsigned int _7;
  Flexcan_Ip_StatusType _37;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_15(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_18 = 0;
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  status_19 = 0;
  # DEBUG status => status_19
  # DEBUG BEGIN_STMT
  _3 = (int) instance_15(D);
  pBase_20 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_20
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_20);
  _5 = _4 == 0;
  disabled_22 = (boolean) _5;
  # DEBUG disabled => disabled_22
  # DEBUG BEGIN_STMT
  if (disabled_22 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_24 = FlexCAN_Enable (pBase_20);
  # DEBUG result => result_24

  <bb 4> :
  # result_8 = PHI <result_18(2), result_24(3)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  freeze_26 = FlexCAN_IsFreezeMode (pBase_20);
  # DEBUG freeze => freeze_26
  # DEBUG BEGIN_STMT
  if (freeze_26 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_8 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_27 = 1;
  # DEBUG result => result_27

  <bb 7> :
  # result_9 = PHI <result_8(4), result_8(5), result_27(6)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  if (result_9 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16 ();
  # DEBUG BEGIN_STMT
  _6 ={v} pBase_20->CTRL2;
  _7 = _6 & 8192;
  if (_7 == 8192)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedTDCOffset (pBase_20, enable_29(D), offset_30(D));
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetTDCOffset (pBase_20, enable_29(D), offset_30(D));

  <bb 11> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16 ();

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (disabled_22 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  status_35 = FlexCAN_Disable (pBase_20);
  # DEBUG status => status_35
  # DEBUG BEGIN_STMT
  if (status_35 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  result_36 = status_35;
  # DEBUG result => result_36

  <bb 15> :
  # result_10 = PHI <result_9(12), result_9(13), result_36(14)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  _37 = result_10;
  return _37;

}


FlexCAN_Ip_GetBitrateFD (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  _Bool _1;
  unsigned char _2;
  _Bool _3;
  unsigned char _4;
  int _5;
  boolean _18;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_7(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = bitrate_10(D) != 0B;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = (int) instance_7(D);
  pBase_12 = Flexcan_Ip_apxBase[_5];
  # DEBUG pBase => pBase_12
  # DEBUG BEGIN_STMT
  enhCbt_13 = 0;
  # DEBUG enhCbt => enhCbt_13
  # DEBUG BEGIN_STMT
  enhCbt_15 = FlexCAN_IsEnhCbtEnabled (pBase_12);
  # DEBUG enhCbt => enhCbt_15
  # DEBUG BEGIN_STMT
  if (enhCbt_15 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetEnhancedDataTimeSegments (pBase_12, bitrate_10(D));
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetFDTimeSegments (pBase_12, bitrate_10(D));

  <bb 5> :
  # DEBUG BEGIN_STMT
  _18 = enhCbt_15;
  return _18;

}


FlexCAN_Ip_SetBitrateCbt_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
  boolean enhCbt;
  boolean freeze;
  boolean disabled;
  boolean fd_enable;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  _Bool _3;
  unsigned char _4;
  int _5;
  long unsigned int _6;
  signed int _7;
  long unsigned int _8;
  long unsigned int _9;
  boolean iftmp.16_13;
  boolean iftmp.17_14;
  boolean iftmp.16_29;
  boolean iftmp.16_30;
  boolean iftmp.17_34;
  boolean iftmp.17_35;
  Flexcan_Ip_StatusType _49;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_19(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = bitrate_22(D) != 0B;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  result_24 = 0;
  # DEBUG result => result_24
  # DEBUG BEGIN_STMT
  status_25 = 0;
  # DEBUG status => status_25
  # DEBUG BEGIN_STMT
  _5 = (int) instance_19(D);
  pBase_26 = Flexcan_Ip_apxBase[_5];
  # DEBUG pBase => pBase_26
  # DEBUG BEGIN_STMT
  fd_enable_28 = FlexCAN_IsFDEnabled (pBase_26);
  # DEBUG fd_enable => fd_enable_28
  # DEBUG BEGIN_STMT
  _6 ={v} pBase_26->MCR;
  _7 = (signed int) _6;
  if (_7 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.16_30 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.16_29 = 0;

  <bb 5> :
  # iftmp.16_13 = PHI <iftmp.16_30(3), iftmp.16_29(4)>
  disabled_31 = iftmp.16_13;
  # DEBUG disabled => disabled_31
  # DEBUG BEGIN_STMT
  if (disabled_31 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_33 = FlexCAN_Enable (pBase_26);
  # DEBUG result => result_33

  <bb 7> :
  # result_10 = PHI <result_24(5), result_33(6)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  _8 ={v} pBase_26->MCR;
  _9 = _8 & 16777216;
  if (_9 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.17_35 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.17_34 = 0;

  <bb 10> :
  # iftmp.17_14 = PHI <iftmp.17_35(8), iftmp.17_34(9)>
  freeze_36 = iftmp.17_14;
  # DEBUG freeze => freeze_36
  # DEBUG BEGIN_STMT
  if (fd_enable_28 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (freeze_36 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  if (result_10 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  result_37 = 1;
  # DEBUG result => result_37

  <bb 14> :
  # result_11 = PHI <result_10(11), result_10(12), result_37(13)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  if (result_11 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  enhCbt_39 = FlexCAN_IsEnhCbtEnabled (pBase_26);
  # DEBUG enhCbt => enhCbt_39
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetFDEnabled (pBase_26, fd_enable_28, bitRateSwitch_41(D));
  # DEBUG BEGIN_STMT
  if (enhCbt_39 == 1)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedDataTimeSegments (pBase_26, bitrate_22(D));
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetFDTimeSegments (pBase_26, bitrate_22(D));

  <bb 18> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15 ();

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (disabled_31 == 1)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  status_47 = FlexCAN_Disable (pBase_26);
  # DEBUG status => status_47
  # DEBUG BEGIN_STMT
  if (status_47 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  result_48 = status_47;
  # DEBUG result => result_48

  <bb 22> :
  # result_12 = PHI <result_11(19), result_11(20), result_48(21)>
  # DEBUG result => result_12
  # DEBUG BEGIN_STMT
  _49 = result_12;
  return _49;

}


FlexCAN_Ip_GetTDCValue (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  uint8 value;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned char _7;
  uint8 _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  value_9 = 0;
  # DEBUG value => value_9
  # DEBUG BEGIN_STMT
  _1 = u8Instance_10(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) u8Instance_10(D);
  pBase_13 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_13
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnhCbtEnabled (pBase_13);
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 ={v} pBase_13->ETDC;
  value_16 = (uint8) _5;
  # DEBUG value => value_16
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 ={v} pBase_13->FDCTRL;
  _7 = (unsigned char) _6;
  value_15 = _7 & 63;
  # DEBUG value => value_15

  <bb 5> :
  # value_8 = PHI <value_16(3), value_15(4)>
  # DEBUG value => value_8
  # DEBUG BEGIN_STMT
  _17 = value_8;
  return _17;

}


FlexCAN_Ip_GetTDCFail (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  boolean value;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  boolean iftmp.14_10;
  boolean iftmp.15_11;
  boolean iftmp.15_18;
  boolean iftmp.15_19;
  boolean iftmp.14_21;
  boolean iftmp.14_22;
  boolean _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  value_12 = 0;
  # DEBUG value => value_12
  # DEBUG BEGIN_STMT
  _1 = u8Instance_13(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) u8Instance_13(D);
  pBase_16 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_16
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnhCbtEnabled (pBase_16);
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 ={v} pBase_16->ETDC;
  _6 = _5 & 32768;
  if (_6 == 32768)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.14_22 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.14_21 = 0;

  <bb 6> :
  # iftmp.14_10 = PHI <iftmp.14_22(4), iftmp.14_21(5)>
  value_23 = iftmp.14_10;
  # DEBUG value => value_23
  goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 ={v} pBase_16->FDCTRL;
  _8 = _7 & 16384;
  if (_8 == 16384)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.15_19 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.15_18 = 0;

  <bb 10> :
  # iftmp.15_11 = PHI <iftmp.15_19(8), iftmp.15_18(9)>
  value_20 = iftmp.15_11;
  # DEBUG value => value_20

  <bb 11> :
  # value_9 = PHI <value_23(6), value_20(10)>
  # DEBUG value => value_9
  # DEBUG BEGIN_STMT
  _24 = value_9;
  return _24;

}


FlexCAN_Ip_ClearTDCFail (uint8 u8Instance)
{
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = u8Instance_10(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) u8Instance_10(D);
  pBase_13 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_13
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09 ();
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnhCbtEnabled (pBase_13);
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 ={v} pBase_13->ETDC;
  _6 = _5 | 32768;
  pBase_13->ETDC ={v} _6;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 ={v} pBase_13->FDCTRL;
  _8 = _7 | 16384;
  pBase_13->FDCTRL ={v} _8;

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09 ();
  return;

}


FlexCAN_Ip_GetBitrate (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  _Bool _1;
  unsigned char _2;
  _Bool _3;
  unsigned char _4;
  int _5;
  unsigned char _6;
  boolean _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_8(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = bitrate_11(D) != 0B;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = (int) instance_8(D);
  pBase_13 = Flexcan_Ip_apxBase[_5];
  # DEBUG pBase => pBase_13
  # DEBUG BEGIN_STMT
  enhCbt_14 = 0;
  # DEBUG enhCbt => enhCbt_14
  # DEBUG BEGIN_STMT
  enhCbt_16 = FlexCAN_IsEnhCbtEnabled (pBase_13);
  # DEBUG enhCbt => enhCbt_16
  # DEBUG BEGIN_STMT
  if (enhCbt_16 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetEnhancedNominalTimeSegments (pBase_13, bitrate_11(D));
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_IsExCbtEnabled (pBase_13);
  if (_6 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetExtendedTimeSegments (pBase_13, bitrate_11(D));
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetTimeSegments (pBase_13, bitrate_11(D));

  <bb 7> :
  # DEBUG BEGIN_STMT
  _21 = enhCbt_16;
  return _21;

}


FlexCAN_Ip_SetBitrate_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  _Bool _3;
  unsigned char _4;
  int _5;
  long unsigned int _6;
  signed int _7;
  long unsigned int _8;
  long unsigned int _9;
  unsigned char _10;
  boolean iftmp.11_14;
  boolean iftmp.12_15;
  boolean iftmp.11_28;
  boolean iftmp.11_29;
  boolean iftmp.12_33;
  boolean iftmp.12_34;
  Flexcan_Ip_StatusType _48;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_20(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = bitrate_23(D) != 0B;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  result_25 = 0;
  # DEBUG result => result_25
  # DEBUG BEGIN_STMT
  status_26 = 0;
  # DEBUG status => status_26
  # DEBUG BEGIN_STMT
  _5 = (int) instance_20(D);
  pBase_27 = Flexcan_Ip_apxBase[_5];
  # DEBUG pBase => pBase_27
  # DEBUG BEGIN_STMT
  _6 ={v} pBase_27->MCR;
  _7 = (signed int) _6;
  if (_7 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.11_29 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.11_28 = 0;

  <bb 5> :
  # iftmp.11_14 = PHI <iftmp.11_29(3), iftmp.11_28(4)>
  disabled_30 = iftmp.11_14;
  # DEBUG disabled => disabled_30
  # DEBUG BEGIN_STMT
  if (disabled_30 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_32 = FlexCAN_Enable (pBase_27);
  # DEBUG result => result_32

  <bb 7> :
  # result_11 = PHI <result_25(5), result_32(6)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _8 ={v} pBase_27->MCR;
  _9 = _8 & 16777216;
  if (_9 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.12_34 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.12_33 = 0;

  <bb 10> :
  # iftmp.12_15 = PHI <iftmp.12_34(8), iftmp.12_33(9)>
  freeze_35 = iftmp.12_15;
  # DEBUG freeze => freeze_35
  # DEBUG BEGIN_STMT
  if (freeze_35 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  if (result_11 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  result_36 = 1;
  # DEBUG result => result_36

  <bb 13> :
  # result_12 = PHI <result_11(10), result_11(11), result_36(12)>
  # DEBUG result => result_12
  # DEBUG BEGIN_STMT
  if (result_12 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14 ();
  # DEBUG BEGIN_STMT
  FlexCAN_EnhCbtEnable (pBase_27, enhExt_38(D));
  # DEBUG BEGIN_STMT
  if (enhExt_38(D) == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedNominalTimeSegments (pBase_27, bitrate_23(D));
  goto <bb 19>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _10 = FlexCAN_IsExCbtEnabled (pBase_27);
  if (_10 == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetExtendedTimeSegments (pBase_27, bitrate_23(D));
  goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetTimeSegments (pBase_27, bitrate_23(D));

  <bb 19> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14 ();

  <bb 20> :
  # DEBUG BEGIN_STMT
  if (disabled_30 == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  status_46 = FlexCAN_Disable (pBase_27);
  # DEBUG status => status_46
  # DEBUG BEGIN_STMT
  if (status_46 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  result_47 = status_46;
  # DEBUG result => result_47

  <bb 23> :
  # result_13 = PHI <result_12(20), result_12(21), result_47(22)>
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  _48 = result_13;
  return _48;

}


FlexCAN_Ip_SetRxMaskType_Privileged (uint8 instance, Flexcan_Ip_RxMaskType type)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  _Bool _5;
  Flexcan_Ip_StatusType _32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_12(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_15 = 0;
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  status_16 = 0;
  # DEBUG status => status_16
  # DEBUG BEGIN_STMT
  _3 = (int) instance_12(D);
  pBase_17 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_17
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_17);
  _5 = _4 == 0;
  disabled_19 = (boolean) _5;
  # DEBUG disabled => disabled_19
  # DEBUG BEGIN_STMT
  if (disabled_19 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_21 = FlexCAN_Enable (pBase_17);
  # DEBUG result => result_21

  <bb 4> :
  # result_6 = PHI <result_15(2), result_21(3)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  freeze_23 = FlexCAN_IsFreezeMode (pBase_17);
  # DEBUG freeze => freeze_23
  # DEBUG BEGIN_STMT
  if (freeze_23 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_24 = 1;
  # DEBUG result => result_24

  <bb 7> :
  # result_7 = PHI <result_6(4), result_6(5), result_24(6)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  if (result_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxMaskType (pBase_17, type_26(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_19 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_30 = FlexCAN_Disable (pBase_17);
  # DEBUG status => status_30
  # DEBUG BEGIN_STMT
  if (status_30 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_31 = status_30;
  # DEBUG result => result_31

  <bb 12> :
  # result_8 = PHI <result_7(9), result_7(10), result_31(11)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _32 = result_8;
  return _32;

}


FlexCAN_Ip_SetStopMode_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType status;
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  unsigned char _2;
  int _3;
  Flexcan_Ip_StatusType _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_6(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance_6(D);
  pBase_9 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  status_11 = FlexCAN_EnterFreezeMode (pBase_9);
  # DEBUG status => status_11
  # DEBUG BEGIN_STMT
  if (status_11 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  status_13 = FlexCAN_Disable (pBase_9);
  # DEBUG status => status_13

  <bb 4> :
  # status_4 = PHI <status_11(2), status_13(3)>
  # DEBUG status => status_4
  # DEBUG BEGIN_STMT
  _14 = status_4;
  return _14;

}


FlexCAN_Ip_SetStartMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  unsigned char _2;
  int _3;
  long unsigned int _4;
  long unsigned int _5;
  Flexcan_Ip_StatusType _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_6(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance_6(D);
  pBase_9 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_9
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07 ();
  # DEBUG BEGIN_STMT
  _4 ={v} pBase_9->MCR;
  _5 = _4 & 2147483647;
  pBase_9->MCR ={v} _5;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07 ();
  # DEBUG BEGIN_STMT
  _14 = FlexCAN_ExitFreezeMode (pBase_9);
  return _14;

}


FlexCAN_Ip_GetStartMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean iftmp.10_4;
  boolean iftmp.10_8;
  boolean iftmp.10_9;
  boolean _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_5(D);
  base_7 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_7
  # DEBUG BEGIN_STMT
  _2 ={v} base_7->MCR;
  _3 = _2 & 17825792;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.10_9 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.10_8 = 0;

  <bb 5> :
  # iftmp.10_4 = PHI <iftmp.10_9(3), iftmp.10_8(4)>
  _10 = iftmp.10_4;
  return _10;

}


FlexCAN_Ip_GetStopMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean iftmp.9_4;
  boolean iftmp.9_8;
  boolean iftmp.9_9;
  boolean _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_5(D);
  base_7 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_7
  # DEBUG BEGIN_STMT
  _2 ={v} base_7->MCR;
  _3 = _2 & 1048576;
  if (_3 == 1048576)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.9_9 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.9_8 = 0;

  <bb 5> :
  # iftmp.9_4 = PHI <iftmp.9_9(3), iftmp.9_8(4)>
  _10 = iftmp.9_4;
  return _10;

}


FlexCAN_Ip_MainFunctionWrite (uint8 instance, uint8 mb_idx)
{
  struct Flexcan_Ip_MsgBuffType mb;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  long unsigned int _5;
  unsigned char _6;
  int _7;
  <unnamed type> _8;
  int _9;
  unsigned char _10;
  long unsigned int _11;
  long unsigned int _12;
  int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  int _20;
  long unsigned int _21;
  long unsigned int _22;
  int _23;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _24;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _25;
  long unsigned int _26;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_30(D);
  base_32 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_32
  # DEBUG BEGIN_STMT
  _2 = (int) instance_30(D);
  state_33 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_33
  # DEBUG BEGIN_STMT
  _3 = instance_30(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) mb_idx_35(D);
  _6 = FlexCAN_GetBuffStatusFlag (base_32, _5);
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _7 = (int) mb_idx_35(D);
  _8 ={v} state_33->mbs[_7].state;
  if (_8 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _9 = (int) mb_idx_35(D);
  _10 = state_33->mbs[_9].isRemote;
  if (_10 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx_35(D);
  FlexCAN_LockRxMsgBuff (base_32, _11);
  # DEBUG BEGIN_STMT
  _12 = (long unsigned int) mb_idx_35(D);
  FlexCAN_GetMsgBuff (base_32, _12, &mb);
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (base_32);
  # DEBUG BEGIN_STMT
  _13 = (int) mb_idx_35(D);
  _14 = mb.time_stamp;
  state_33->mbs[_13].time_stamp = _14;
  # DEBUG BEGIN_STMT
  _15 = mb.cs;
  _16 = _15 >> 24;
  _17 = _16 & 15;
  if (_17 == 4)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _18 = (long unsigned int) mb_idx_35(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_32, _18);

  <bb 7> :
  mb ={v} {CLOBBER};
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _19 = (long unsigned int) mb_idx_35(D);
  _20 = (int) mb_idx_35(D);
  _21 = FlexCAN_GetMsgBuffTimestamp (base_32, _19);
  state_33->mbs[_20].time_stamp = _21;
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (base_32);
  # DEBUG BEGIN_STMT
  _22 = (long unsigned int) mb_idx_35(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_32, _22);

  <bb 9> :
  # DEBUG BEGIN_STMT
  _23 = (int) mb_idx_35(D);
  state_33->mbs[_23].state ={v} 0;
  # DEBUG BEGIN_STMT
  _24 = state_33->callback;
  if (_24 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _25 = state_33->callback;
  _26 = (long unsigned int) mb_idx_35(D);
  _25 (instance_30(D), 4, _26, state_33);

  <bb 11> :
  return;

}


FlexCAN_Ip_MainFunctionBusOff_Privileged (uint8 instance)
{
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType eRetVal;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  long unsigned int _5;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  Flexcan_Ip_StatusType _22;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal_11 = 1;
  # DEBUG eRetVal => eRetVal_11
  # DEBUG BEGIN_STMT
  _1 = (int) instance_12(D);
  base_14 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_14
  # DEBUG BEGIN_STMT
  _2 = (int) instance_12(D);
  state_15 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_15
  # DEBUG BEGIN_STMT
  u32ErrStatus_16 = 0;
  # DEBUG u32ErrStatus => u32ErrStatus_16
  # DEBUG BEGIN_STMT
  _3 = instance_12(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  u32ErrStatus_18 ={v} base_14->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_18
  # DEBUG BEGIN_STMT
  _5 = u32ErrStatus_18 & 4;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = state_15->error_callback;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = state_15->error_callback;
  _7 (instance_12(D), 11, u32ErrStatus_18, state_15);

  <bb 5> :
  # DEBUG BEGIN_STMT
  base_14->ESR1 ={v} 4;
  # DEBUG BEGIN_STMT
  eRetVal_21 = 0;
  # DEBUG eRetVal => eRetVal_21

  <bb 6> :
  # eRetVal_8 = PHI <eRetVal_11(2), eRetVal_21(5)>
  # DEBUG eRetVal => eRetVal_8
  # DEBUG BEGIN_STMT
  _22 = eRetVal_8;
  return _22;

}


FlexCAN_Ip_MainFunctionRead (uint8 instance, uint8 mb_idx)
{
  const struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  unsigned char _5;
  _Bool _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  long unsigned int _13;
  unsigned char _14;
  int _15;
  <unnamed type> _16;
  long unsigned int _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_19(D);
  base_21 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_21
  # DEBUG BEGIN_STMT
  _2 = (int) instance_19(D);
  state_22 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_22
  # DEBUG BEGIN_STMT
  _3 = instance_19(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = mb_idx_24(D) + 192;
  _6 = _5 > 190;
  _7 = (unsigned char) _6;
  DevAssert (_7);
  # DEBUG BEGIN_STMT
  if (mb_idx_24(D) == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_IsEnhancedRxFifoAvailable (base_21);
  if (_8 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _9 = FlexCAN_IsEnhancedRxFifoEnabled (base_21);
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = FlexCAN_GetEnhancedRxFIFOStatusFlag (base_21, 28);
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerEnhancedRxFIFO (instance_19(D), 28);
  goto <bb 15>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _11 = state_22->bIsLegacyFifoEn;
  if (_11 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  if (mb_idx_24(D) <= 7)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (mb_idx_24(D) == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _12 = FlexCAN_GetBuffStatusFlag (base_21, 5);
  if (_12 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (instance_19(D), 5);
  goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _13 = (long unsigned int) mb_idx_24(D);
  _14 = FlexCAN_GetBuffStatusFlag (base_21, _13);
  if (_14 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _15 = (int) mb_idx_24(D);
  _16 ={v} state_22->mbs[_15].state;
  if (_16 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _17 = (long unsigned int) mb_idx_24(D);
  FlexCAN_IRQHandlerRxMB (instance_19(D), _17);

  <bb 15> :
  return;

}


FlexCAN_Ip_Deinit_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  unsigned char _3;
  int _4;
  Flexcan_Ip_StatusType _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_6(D);
  base_8 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_8
  # DEBUG BEGIN_STMT
  result_9 = 1;
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  _2 = instance_6(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  result_12 = FlexCAN_EnterFreezeMode (base_8);
  # DEBUG result => result_12
  # DEBUG BEGIN_STMT
  if (result_12 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRegDefaultVal (base_8);
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (base_8);
  # DEBUG BEGIN_STMT
  _4 = (int) instance_6(D);
  Flexcan_Ip_apxState[_4] = 0B;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _16 = result_12;
  return _16;

}


FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  _Bool _5;
  Flexcan_Ip_StatusType _30;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_12(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_15 = 0;
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  status_16 = 0;
  # DEBUG status => status_16
  # DEBUG BEGIN_STMT
  _3 = (int) instance_12(D);
  pBase_17 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_17
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_17);
  _5 = _4 == 0;
  disabled_19 = (boolean) _5;
  # DEBUG disabled => disabled_19
  # DEBUG BEGIN_STMT
  if (disabled_19 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_21 = FlexCAN_Enable (pBase_17);
  # DEBUG result => result_21

  <bb 4> :
  # result_6 = PHI <result_15(2), result_21(3)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  freeze_23 = FlexCAN_IsFreezeMode (pBase_17);
  # DEBUG freeze => freeze_23
  # DEBUG BEGIN_STMT
  if (freeze_23 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_24 = 1;
  # DEBUG result => result_24

  <bb 7> :
  # result_7 = PHI <result_6(4), result_6(5), result_24(6)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  if (result_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxFifoGlobalMask (pBase_17, mask_25(D));

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_19 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_28 = FlexCAN_Disable (pBase_17);
  # DEBUG status => status_28
  # DEBUG BEGIN_STMT
  if (status_28 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_29 = status_28;
  # DEBUG result => result_29

  <bb 12> :
  # result_8 = PHI <result_7(9), result_7(10), result_29(11)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _30 = result_8;
  return _30;

}


FlexCAN_Ip_SetRxIndividualMask_Privileged (uint8 instance, uint8 mb_idx, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  int _1;
  _Bool _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned char _7;
  _Bool _8;
  long unsigned int _9;
  Flexcan_Ip_StatusType _37;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_16 = 0;
  # DEBUG result => result_16
  # DEBUG BEGIN_STMT
  status_17 = 0;
  # DEBUG status => status_17
  # DEBUG BEGIN_STMT
  _1 = (int) instance_18(D);
  pBase_20 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_20
  # DEBUG BEGIN_STMT
  freeze_21 = 0;
  # DEBUG freeze => freeze_21
  # DEBUG BEGIN_STMT
  _2 = instance_18(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = (long unsigned int) mb_idx_23(D);
  _5 ={v} pBase_20->MCR;
  _6 = _5 & 127;
  if (_4 > _6)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (mb_idx_23(D) > 63)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result_36 = 4;
  # DEBUG result => result_36
  goto <bb 15>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = FlexCAN_IsEnabled (pBase_20);
  _8 = _7 == 0;
  disabled_25 = (boolean) _8;
  # DEBUG disabled => disabled_25
  # DEBUG BEGIN_STMT
  if (disabled_25 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_27 = FlexCAN_Enable (pBase_20);
  # DEBUG result => result_27

  <bb 7> :
  # result_10 = PHI <result_16(5), result_27(6)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  freeze_29 = FlexCAN_IsFreezeMode (pBase_20);
  # DEBUG freeze => freeze_29
  # DEBUG BEGIN_STMT
  if (freeze_29 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  if (result_10 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  result_30 = 1;
  # DEBUG result => result_30

  <bb 10> :
  # result_11 = PHI <result_10(7), result_10(8), result_30(9)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  if (result_11 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) mb_idx_23(D);
  FlexCAN_SetRxIndividualMask (pBase_20, _9, mask_31(D));

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (disabled_25 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  status_34 = FlexCAN_Disable (pBase_20);
  # DEBUG status => status_34
  # DEBUG BEGIN_STMT
  if (status_34 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  result_35 = status_34;
  # DEBUG result => result_35

  <bb 15> :
  # result_12 = PHI <result_36(4), result_11(12), result_11(13), result_35(14)>
  # DEBUG result => result_12
  # DEBUG BEGIN_STMT
  _37 = result_12;
  return _37;

}


FlexCAN_Ip_ExitFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  int _1;
  Flexcan_Ip_StatusType _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_4
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_ExitFreezeMode (base_4);
  return _6;

}


FlexCAN_Ip_EnterFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  int _1;
  Flexcan_Ip_StatusType _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_4
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_EnterFreezeMode (base_4);
  return _6;

}


FlexCAN_Ip_SetRxMbGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  int _1;
  _Bool _2;
  unsigned char _3;
  unsigned char _4;
  _Bool _5;
  Flexcan_Ip_StatusType _31;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_12 = 0;
  # DEBUG result => result_12
  # DEBUG BEGIN_STMT
  status_13 = 0;
  # DEBUG status => status_13
  # DEBUG BEGIN_STMT
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_16
  # DEBUG BEGIN_STMT
  freeze_17 = 0;
  # DEBUG freeze => freeze_17
  # DEBUG BEGIN_STMT
  _2 = instance_14(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_16);
  _5 = _4 == 0;
  disabled_20 = (boolean) _5;
  # DEBUG disabled => disabled_20
  # DEBUG BEGIN_STMT
  if (disabled_20 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_22 = FlexCAN_Enable (pBase_16);
  # DEBUG result => result_22

  <bb 4> :
  # result_6 = PHI <result_12(2), result_22(3)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  freeze_24 = FlexCAN_IsFreezeMode (pBase_16);
  # DEBUG freeze => freeze_24
  # DEBUG BEGIN_STMT
  if (freeze_24 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_25 = 1;
  # DEBUG result => result_25

  <bb 7> :
  # result_7 = PHI <result_6(4), result_6(5), result_25(6)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  if (result_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxMsgBuffGlobalMask (pBase_16, mask_26(D));

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_20 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_29 = FlexCAN_Disable (pBase_16);
  # DEBUG status => status_29
  # DEBUG BEGIN_STMT
  if (status_29 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_30 = status_29;
  # DEBUG result => result_30

  <bb 12> :
  # result_8 = PHI <result_7(9), result_7(10), result_30(11)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _31 = result_8;
  return _31;

}


FlexCAN_Ip_SendBlocking (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data, uint32 timeout_ms)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 uS2Ticks;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  int _2;
  long unsigned int _3;
  _Bool _4;
  unsigned char _5;
  _Bool _6;
  unsigned char _7;
  long unsigned int _8;
  long unsigned int _9;
  unsigned char _10;
  int _11;
  <unnamed type> _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  unsigned char _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  int _23;
  long unsigned int _61;
  long unsigned int _78;
  Flexcan_Ip_StatusType _86;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_37(D);
  base_39 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_39
  # DEBUG BEGIN_STMT
  _2 = (int) instance_37(D);
  state_40 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_40
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed_42 = 0;
  # DEBUG timeElapsed => timeElapsed_42
  # DEBUG BEGIN_STMT
  _3 = timeout_ms_43(D) * 1000;
  mS2Ticks_45 = OsIf_MicrosToTicks (_3, 0);
  # DEBUG mS2Ticks => mS2Ticks_45
  # DEBUG BEGIN_STMT
  uS2Ticks_46 = 0;
  # DEBUG uS2Ticks => uS2Ticks_46
  # DEBUG BEGIN_STMT
  flexcan_mb_config_47 = 0;
  # DEBUG flexcan_mb_config => flexcan_mb_config_47
  # DEBUG BEGIN_STMT
  flexcan_mb_48 = 0B;
  # DEBUG flexcan_mb => flexcan_mb_48
  # DEBUG BEGIN_STMT
  _4 = instance_37(D) <= 3;
  _5 = (unsigned char) _4;
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  _6 = tx_info_50(D) != 0B;
  _7 = (unsigned char) _6;
  DevAssert (_7);
  # DEBUG BEGIN_STMT
  result_56 = FlexCAN_StartSendData (instance_37(D), mb_idx_52(D), tx_info_50(D), msg_id_53(D), mb_data_54(D));
  # DEBUG result => result_56
  # DEBUG BEGIN_STMT
  if (result_56 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _8 = OsIf_GetCounter (0);
  timeStart = _8;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _61 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_62 = _61 + timeElapsed_29;
  # DEBUG timeElapsed => timeElapsed_62
  # DEBUG BEGIN_STMT
  if (timeElapsed_62 >= mS2Ticks_45)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  result_63 = 3;
  # DEBUG result => result_63
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 6> :
  # timeElapsed_29 = PHI <timeElapsed_42(3), timeElapsed_62(4)>
  # DEBUG timeElapsed => timeElapsed_29
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) mb_idx_52(D);
  _10 = FlexCAN_GetBuffStatusFlag (base_39, _9);
  if (_10 != 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # result_24 = PHI <result_63(5), result_56(6)>
  # DEBUG result => result_24
  # DEBUG BEGIN_STMT
  if (result_24 == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 8> :
  _11 = (int) mb_idx_52(D);
  _12 ={v} state_40->mbs[_11].state;
  if (_12 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _13 = (long unsigned int) mb_idx_52(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_39, _13);
  # DEBUG BEGIN_STMT
  _14 = (long unsigned int) mb_idx_52(D);
  flexcan_mb_66 = FlexCAN_GetMsgBuffRegion (base_39, _14);
  # DEBUG flexcan_mb => flexcan_mb_66
  # DEBUG BEGIN_STMT
  flexcan_mb_config_67 ={v} *flexcan_mb_66;
  # DEBUG flexcan_mb_config => flexcan_mb_config_67
  # DEBUG BEGIN_STMT
  flexcan_mb_config_68 = flexcan_mb_config_67 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_68
  # DEBUG BEGIN_STMT
  flexcan_mb_config_69 = flexcan_mb_config_68 | 150994944;
  # DEBUG flexcan_mb_config => flexcan_mb_config_69
  # DEBUG BEGIN_STMT
  *flexcan_mb_66 ={v} flexcan_mb_config_69;
  # DEBUG BEGIN_STMT
  uS2Ticks_72 = OsIf_MicrosToTicks (1000000, 0);
  # DEBUG uS2Ticks => uS2Ticks_72
  # DEBUG BEGIN_STMT
  _15 = OsIf_GetCounter (0);
  timeStart = _15;
  # DEBUG BEGIN_STMT
  timeElapsed_75 = 0;
  # DEBUG timeElapsed => timeElapsed_75
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _78 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_79 = _78 + timeElapsed_30;
  # DEBUG timeElapsed => timeElapsed_79
  # DEBUG BEGIN_STMT
  if (timeElapsed_79 >= uS2Ticks_72)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_80 = 3;
  # DEBUG result => result_80
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 12> :
  # timeElapsed_30 = PHI <timeElapsed_75(9), timeElapsed_79(10)>
  # DEBUG timeElapsed => timeElapsed_30
  # DEBUG BEGIN_STMT
  _16 = (long unsigned int) mb_idx_52(D);
  _17 = FlexCAN_GetBuffStatusFlag (base_39, _16);
  if (_17 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # result_25 = PHI <result_80(11), result_24(12)>
  # DEBUG result => result_25
  # DEBUG BEGIN_STMT
  flexcan_mb_config_81 ={v} *flexcan_mb_66;
  # DEBUG flexcan_mb_config => flexcan_mb_config_81
  # DEBUG BEGIN_STMT
  _18 = flexcan_mb_config_81 >> 24;
  _19 = _18 & 15;
  if (_19 == 8)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  result_82 = 0;
  # DEBUG result => result_82

  <bb 15> :
  # result_26 = PHI <result_25(13), result_82(14)>
  # DEBUG result => result_26
  # DEBUG BEGIN_STMT
  _20 = flexcan_mb_config_81 >> 24;
  _21 = _20 & 15;
  if (_21 == 9)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  result_83 = 3;
  # DEBUG result => result_83

  <bb 17> :
  # result_27 = PHI <result_24(7), result_24(8), result_26(15), result_83(16)>
  # DEBUG result => result_27
  # DEBUG BEGIN_STMT
  _22 = (long unsigned int) mb_idx_52(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_39, _22);
  # DEBUG BEGIN_STMT
  _23 = (int) mb_idx_52(D);
  state_40->mbs[_23].state ={v} 0;

  <bb 18> :
  # result_28 = PHI <result_56(2), result_27(17)>
  # DEBUG result => result_28
  # DEBUG BEGIN_STMT
  _86 = result_28;
  timeStart ={v} {CLOBBER};
  return _86;

}


FlexCAN_Busoff_Error_IRQHandler (uint8 instance)
{
  boolean isSpuriousInt;
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _8;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _9;
  long unsigned int _10;
  long unsigned int _11;
  signed int _12;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _13;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _18;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _23;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _28;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _29;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_54(D);
  pBase_56 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_56
  # DEBUG BEGIN_STMT
  _2 = (int) instance_54(D);
  state_57 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_57
  # DEBUG BEGIN_STMT
  u32ErrStatus_58 = 0;
  # DEBUG u32ErrStatus => u32ErrStatus_58
  # DEBUG BEGIN_STMT
  isSpuriousInt_59 = 1;
  # DEBUG isSpuriousInt => isSpuriousInt_59
  # DEBUG BEGIN_STMT
  _3 = instance_54(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  if (state_57 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  u32ErrStatus_61 ={v} pBase_56->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_61
  # DEBUG BEGIN_STMT
  _5 = u32ErrStatus_61 & 2;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _6 ={v} pBase_56->CTRL1;
  _7 = _6 & 16384;
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  pBase_56->ESR1 ={v} 2;
  # DEBUG BEGIN_STMT
  _8 = state_57->error_callback;
  if (_8 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = state_57->error_callback;
  _9 (instance_54(D), 9, u32ErrStatus_61, state_57);
  # DEBUG BEGIN_STMT
  u32ErrStatus_64 ={v} pBase_56->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_64

  <bb 7> :
  # u32ErrStatus_30 = PHI <u32ErrStatus_61(5), u32ErrStatus_64(6)>
  # DEBUG u32ErrStatus => u32ErrStatus_30
  # DEBUG BEGIN_STMT
  isSpuriousInt_65 = 0;
  # DEBUG isSpuriousInt => isSpuriousInt_65

  <bb 8> :
  # u32ErrStatus_31 = PHI <u32ErrStatus_61(3), u32ErrStatus_61(4), u32ErrStatus_30(7)>
  # isSpuriousInt_38 = PHI <isSpuriousInt_59(3), isSpuriousInt_59(4), isSpuriousInt_65(7)>
  # DEBUG isSpuriousInt => isSpuriousInt_38
  # DEBUG u32ErrStatus => u32ErrStatus_31
  # DEBUG BEGIN_STMT
  _10 = u32ErrStatus_31 & 1048576;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  _11 ={v} pBase_56->CTRL2;
  _12 = (signed int) _11;
  if (_12 < 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  pBase_56->ESR1 ={v} 1048576;
  # DEBUG BEGIN_STMT
  _13 = state_57->error_callback;
  if (_13 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _14 = state_57->error_callback;
  _14 (instance_54(D), 10, u32ErrStatus_31, state_57);
  # DEBUG BEGIN_STMT
  u32ErrStatus_68 ={v} pBase_56->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_68

  <bb 12> :
  # u32ErrStatus_32 = PHI <u32ErrStatus_31(10), u32ErrStatus_68(11)>
  # DEBUG u32ErrStatus => u32ErrStatus_32
  # DEBUG BEGIN_STMT
  isSpuriousInt_69 = 0;
  # DEBUG isSpuriousInt => isSpuriousInt_69

  <bb 13> :
  # u32ErrStatus_33 = PHI <u32ErrStatus_31(8), u32ErrStatus_31(9), u32ErrStatus_32(12)>
  # isSpuriousInt_39 = PHI <isSpuriousInt_38(8), isSpuriousInt_38(9), isSpuriousInt_69(12)>
  # DEBUG isSpuriousInt => isSpuriousInt_39
  # DEBUG u32ErrStatus => u32ErrStatus_33
  # DEBUG BEGIN_STMT
  _15 = u32ErrStatus_33 & 131072;
  if (_15 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  _16 ={v} pBase_56->CTRL1;
  _17 = _16 & 2048;
  if (_17 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  pBase_56->ESR1 ={v} 131072;
  # DEBUG BEGIN_STMT
  _18 = state_57->error_callback;
  if (_18 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _19 = state_57->error_callback;
  _19 (instance_54(D), 13, u32ErrStatus_33, state_57);
  # DEBUG BEGIN_STMT
  u32ErrStatus_72 ={v} pBase_56->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_72

  <bb 17> :
  # u32ErrStatus_34 = PHI <u32ErrStatus_33(15), u32ErrStatus_72(16)>
  # DEBUG u32ErrStatus => u32ErrStatus_34
  # DEBUG BEGIN_STMT
  isSpuriousInt_73 = 0;
  # DEBUG isSpuriousInt => isSpuriousInt_73

  <bb 18> :
  # u32ErrStatus_35 = PHI <u32ErrStatus_33(13), u32ErrStatus_33(14), u32ErrStatus_34(17)>
  # isSpuriousInt_40 = PHI <isSpuriousInt_39(13), isSpuriousInt_39(14), isSpuriousInt_73(17)>
  # DEBUG isSpuriousInt => isSpuriousInt_40
  # DEBUG u32ErrStatus => u32ErrStatus_35
  # DEBUG BEGIN_STMT
  _20 = u32ErrStatus_35 & 65536;
  if (_20 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 19> :
  _21 ={v} pBase_56->CTRL1;
  _22 = _21 & 1024;
  if (_22 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  pBase_56->ESR1 ={v} 65536;
  # DEBUG BEGIN_STMT
  _23 = state_57->error_callback;
  if (_23 != 0B)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _24 = state_57->error_callback;
  _24 (instance_54(D), 12, u32ErrStatus_35, state_57);
  # DEBUG BEGIN_STMT
  u32ErrStatus_76 ={v} pBase_56->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_76

  <bb 22> :
  # u32ErrStatus_36 = PHI <u32ErrStatus_35(20), u32ErrStatus_76(21)>
  # DEBUG u32ErrStatus => u32ErrStatus_36
  # DEBUG BEGIN_STMT
  isSpuriousInt_77 = 0;
  # DEBUG isSpuriousInt => isSpuriousInt_77

  <bb 23> :
  # u32ErrStatus_37 = PHI <u32ErrStatus_35(18), u32ErrStatus_35(19), u32ErrStatus_36(22)>
  # isSpuriousInt_41 = PHI <isSpuriousInt_40(18), isSpuriousInt_40(19), isSpuriousInt_77(22)>
  # DEBUG isSpuriousInt => isSpuriousInt_41
  # DEBUG u32ErrStatus => u32ErrStatus_37
  # DEBUG BEGIN_STMT
  _25 = u32ErrStatus_37 & 4;
  if (_25 != 0)
    goto <bb 24>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 24> :
  _26 ={v} pBase_56->CTRL1;
  _27 = _26 & 32768;
  if (_27 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  pBase_56->ESR1 ={v} 4;
  # DEBUG BEGIN_STMT
  _28 = state_57->error_callback;
  if (_28 != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  _29 = state_57->error_callback;
  _29 (instance_54(D), 11, u32ErrStatus_37, state_57);

  <bb 27> :
  # DEBUG BEGIN_STMT
  isSpuriousInt_80 = 0;
  # DEBUG isSpuriousInt => isSpuriousInt_80

  <bb 28> :
  # isSpuriousInt_42 = PHI <isSpuriousInt_59(2), isSpuriousInt_41(23), isSpuriousInt_41(24), isSpuriousInt_80(27)>
  # DEBUG isSpuriousInt => isSpuriousInt_42
  # DEBUG BEGIN_STMT
  if (isSpuriousInt_42 == 1)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  pBase_56->ESR1 ={v} 3866630;

  <bb 30> :
  return;

}


FlexCAN_Ip_GetControllerRxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  uint8 _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_6(D);
  base_8 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_8
  # DEBUG BEGIN_STMT
  _2 = instance_6(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 ={v} base_8->ECR;
  _5 = _4 >> 8;
  _10 = (uint8) _5;
  return _10;

}


FlexCAN_Ip_GetControllerTxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  unsigned char _3;
  long unsigned int _4;
  uint8 _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_5(D);
  base_7 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_7
  # DEBUG BEGIN_STMT
  _2 = instance_5(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 ={v} base_7->ECR;
  _9 = (uint8) _4;
  return _9;

}


FlexCAN_Ip_GetErrorStatus (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  unsigned char _3;
  uint32 _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_6
  # DEBUG BEGIN_STMT
  _2 = instance_4(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _8 ={v} base_6->ESR1;
  return _8;

}


FlexCAN_Ip_ClearErrorStatus (uint8 instance, uint32 error)
{
  struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  unsigned char _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_6
  # DEBUG BEGIN_STMT
  _2 = instance_4(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  base_6->ESR1 ={v} error_8(D);
  return;

}


FlexCAN_IRQHandler (uint8 instance, uint32 startMbIdx, uint32 endMbIdx, boolean bEnhancedFifoExisted)
{
  uint32 mb_idx;
  boolean bIsSpuriousInt;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  uint32 flag_reg;
  uint32 u32MbHandle;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  _Bool _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  <unnamed type> _10;
  <unnamed type> _11;
  unsigned char _12;
  <unnamed type> _13;
  unsigned char _14;
  <unnamed type> _15;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32MbHandle_29 = 0;
  # DEBUG u32MbHandle => u32MbHandle_29
  # DEBUG BEGIN_STMT
  flag_reg_30 = 0;
  # DEBUG flag_reg => flag_reg_30
  # DEBUG BEGIN_STMT
  _1 = (int) instance_31(D);
  base_33 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_33
  # DEBUG BEGIN_STMT
  _2 = (int) instance_31(D);
  state_34 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_34
  # DEBUG BEGIN_STMT
  bIsSpuriousInt_35 = 1;
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_35
  # DEBUG BEGIN_STMT
  mb_idx_37 = endMbIdx_36(D);
  # DEBUG mb_idx => mb_idx_37
  # DEBUG BEGIN_STMT
  _3 = instance_31(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = endMbIdx_36(D) <= 63;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  if (state_34 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _7 = FlexCAN_GetMsgBuffIntStatusFlag (base_33, mb_idx_37);
  flag_reg_50 = (uint32) _7;
  # DEBUG flag_reg => flag_reg_50
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  mb_idx_51 = mb_idx_20 + 4294967295;
  # DEBUG mb_idx => mb_idx_51
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_GetMsgBuffIntStatusFlag (base_33, mb_idx_51);
  flag_reg_53 = (uint32) _8;
  # DEBUG flag_reg => flag_reg_53

  <bb 5> :
  # flag_reg_17 = PHI <flag_reg_50(3), flag_reg_53(4)>
  # mb_idx_20 = PHI <mb_idx_37(3), mb_idx_51(4)>
  # DEBUG mb_idx => mb_idx_20
  # DEBUG flag_reg => flag_reg_17
  # DEBUG BEGIN_STMT
  if (flag_reg_17 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  if (mb_idx_20 > startMbIdx_40(D))
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (flag_reg_17 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  bIsSpuriousInt_54 = 0;
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_54
  # DEBUG BEGIN_STMT
  u32MbHandle_55 = mb_idx_20;
  # DEBUG u32MbHandle => u32MbHandle_55
  # DEBUG BEGIN_STMT
  _9 = state_34->bIsLegacyFifoEn;
  if (_9 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (mb_idx_20 <= 7)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (instance_31(D), mb_idx_20);
  # DEBUG BEGIN_STMT
  u32MbHandle_57 = 0;
  # DEBUG u32MbHandle => u32MbHandle_57
  goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _10 ={v} state_34->mbs[u32MbHandle_55].state;
  if (_10 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxMB (instance_31(D), mb_idx_20);

  <bb 13> :
  # u32MbHandle_16 = PHI <u32MbHandle_57(10), u32MbHandle_55(11), u32MbHandle_55(12)>
  # DEBUG u32MbHandle => u32MbHandle_16
  # DEBUG BEGIN_STMT
  _11 ={v} state_34->mbs[u32MbHandle_16].state;
  if (_11 == 2)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerTxMB (instance_31(D), mb_idx_20);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _12 = FlexCAN_GetMsgBuffIntStatusFlag (base_33, mb_idx_20);
  if (_12 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _13 ={v} state_34->mbs[u32MbHandle_16].state;
  if (_13 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_33, mb_idx_20);

  <bb 18> :
  # bIsSpuriousInt_18 = PHI <bIsSpuriousInt_35(7), bIsSpuriousInt_54(15), bIsSpuriousInt_54(16), bIsSpuriousInt_54(17)>
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_18
  # DEBUG BEGIN_STMT
  if (bEnhancedFifoExisted_42(D) == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _14 = FlexCAN_IsEnhancedRxFifoEnabled (base_33);
  if (_14 == 1)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  _15 = state_34->transferType;
  if (_15 == 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  bIsSpuriousInt_64 = FlexCAN_ProcessIRQHandlerEnhancedRxFIFO (instance_31(D), bIsSpuriousInt_18);
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_64

  <bb 22> :
  # bIsSpuriousInt_19 = PHI <bIsSpuriousInt_18(18), bIsSpuriousInt_18(19), bIsSpuriousInt_18(20), bIsSpuriousInt_64(21)>
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_19
  # DEBUG BEGIN_STMT
  if (bIsSpuriousInt_19 == 1)
    goto <bb 23>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  FlexCAN_ProcessSpuriousInterruptMB (instance_31(D), startMbIdx_40(D), endMbIdx_36(D));
  goto <bb 29>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  mb_idx_41 = startMbIdx_40(D);
  # DEBUG mb_idx => mb_idx_41
  goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_33, mb_idx_21);
  # DEBUG BEGIN_STMT
  mb_idx_48 = mb_idx_21 + 1;
  # DEBUG mb_idx => mb_idx_48

  <bb 26> :
  # mb_idx_21 = PHI <mb_idx_41(24), mb_idx_48(25)>
  # DEBUG mb_idx => mb_idx_21
  # DEBUG BEGIN_STMT
  if (mb_idx_21 <= endMbIdx_36(D))
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  if (bEnhancedFifoExisted_42(D) == 1)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_33, 28);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_33, 29);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_33, 30);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_33, 31);

  <bb 29> :
  return;

}


FlexCAN_CompleteRxMessageFifoData (uint8 instance)
{
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  <unnamed type> _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_10(D);
  base_12 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_12
  # DEBUG BEGIN_STMT
  _2 = (int) instance_10(D);
  state_13 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_13
  # DEBUG BEGIN_STMT
  _3 = instance_10(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = state_13->transferType;
  if (_5 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = state_13->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_12, instance_10(D), 5, 0, _6);
  # DEBUG BEGIN_STMT
  _7 = state_13->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_12, instance_10(D), 6, 0, _7);
  # DEBUG BEGIN_STMT
  _8 = state_13->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_12, instance_10(D), 7, 0, _8);

  <bb 4> :
  # DEBUG BEGIN_STMT
  state_13->mbs[0].pMBmessage = 0B;
  # DEBUG BEGIN_STMT
  state_13->mbs[0].state ={v} 0;
  return;

}


FlexCAN_Ip_GetTransferStatus (uint8 instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType status;
  const struct Flexcan_Ip_StateType * state;
  int _1;
  _Bool _2;
  unsigned char _3;
  unsigned char _4;
  _Bool _5;
  unsigned char _6;
  int _7;
  <unnamed type> _8;
  <unnamed type> _9;
  Flexcan_Ip_StatusType _22;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_11(D);
  state_13 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_13
  # DEBUG BEGIN_STMT
  status_14 = 1;
  # DEBUG status => status_14
  # DEBUG BEGIN_STMT
  _2 = instance_11(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = mb_idx_16(D) + 192;
  _5 = _4 > 190;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  if (mb_idx_16(D) <= 63)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _7 = (int) mb_idx_16(D);
  _8 ={v} state_13->mbs[_7].state;
  if (_8 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  status_21 = 0;
  # DEBUG status => status_21
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  status_20 = 2;
  # DEBUG status => status_20
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 ={v} state_13->enhancedFifoOutput.state;
  if (_9 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  status_19 = 0;
  # DEBUG status => status_19
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  status_18 = 2;
  # DEBUG status => status_18

  <bb 9> :
  # status_10 = PHI <status_20(5), status_19(7), status_18(8), status_21(4)>
  # DEBUG status => status_10
  # DEBUG BEGIN_STMT
  _22 = status_10;
  return _22;

}


FlexCAN_Ip_ConfigRemoteResponseMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  const struct Flexcan_Ip_StateType * const state;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType result;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  _Bool _5;
  unsigned char _6;
  long unsigned int _7;
  long unsigned int _8;
  _Bool _9;
  unsigned char _10;
  long unsigned int _11;
  unsigned char _12;
  long unsigned int _13;
  unsigned char _14;
  _Bool _15;
  unsigned char _16;
  unsigned char _17;
  long unsigned int _18;
  unsigned char _19;
  long unsigned int _20;
  <unnamed type> _21;
  long unsigned int _22;
  long unsigned int _23;
  unsigned char _24;
  unsigned char _25;
  long unsigned int _26;
  unsigned char _27;
  Flexcan_Ip_StatusType _60;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_31 = 0;
  # DEBUG result => result_31
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_32(D);
  pBase_34 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_34
  # DEBUG BEGIN_STMT
  _2 = (int) instance_32(D);
  state_35 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_35
  # DEBUG BEGIN_STMT
  pMbAddr_36 = 0B;
  # DEBUG pMbAddr => pMbAddr_36
  # DEBUG BEGIN_STMT
  _3 = instance_32(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = tx_info_38(D) != 0B;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  _7 ={v} pBase_34->CTRL2;
  _8 = _7 & 131072;
  _9 = _8 == 0;
  _10 = (unsigned char) _9;
  DevAssert (_10);
  # DEBUG BEGIN_STMT
  _11 = tx_info_38(D)->data_length;
  _12 = (unsigned char) _11;
  _13 = (long unsigned int) mb_idx_41(D);
  _14 = FlexCAN_GetMbPayloadSize (pBase_34, _13);
  _15 = _12 <= _14;
  _16 = (unsigned char) _15;
  DevAssert (_16);
  # DEBUG BEGIN_STMT
  _17 = state_35->bIsLegacyFifoEn;
  _18 = state_35->u32MaxMbNum;
  _19 = FlexCAN_IsMbOutOfRange (pBase_34, mb_idx_41(D), _17, _18);
  if (_19 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_45 = 4;
  # DEBUG result => result_45

  <bb 4> :
  # result_28 = PHI <result_31(2), result_45(3)>
  # DEBUG result => result_28
  # DEBUG BEGIN_STMT
  if (result_28 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _20 = tx_info_38(D)->data_length;
  cs.dataLen = _20;
  # DEBUG BEGIN_STMT
  _21 = tx_info_38(D)->msg_id_type;
  cs.msgIdType = _21;
  # DEBUG BEGIN_STMT
  cs.code = 10;
  # DEBUG BEGIN_STMT
  cs.fd_enable = 0;
  # DEBUG BEGIN_STMT
  cs.enable_brs = 0;
  # DEBUG BEGIN_STMT
  cs.fd_padding = 0;
  # DEBUG BEGIN_STMT
  _22 = (long unsigned int) mb_idx_41(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_34, _22);
  # DEBUG BEGIN_STMT
  _23 = (long unsigned int) mb_idx_41(D);
  pMbAddr_54 = FlexCAN_GetMsgBuffRegion (pBase_34, _23);
  # DEBUG pMbAddr => pMbAddr_54
  # DEBUG BEGIN_STMT
  _24 = tx_info_38(D)->is_remote;
  FlexCAN_SetTxMsgBuff (pMbAddr_54, &cs, msg_id_55(D), mb_data_56(D), _24);
  # DEBUG BEGIN_STMT
  _25 = tx_info_38(D)->is_polling;
  if (_25 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _26 = (long unsigned int) mb_idx_41(D);
  _27 = state_35->isIntActive;
  result_59 = FlexCAN_SetMsgBuffIntCmd (pBase_34, instance_32(D), _26, 1, _27);
  # DEBUG result => result_59

  <bb 7> :
  # result_29 = PHI <result_28(4), result_28(5), result_59(6)>
  # DEBUG result => result_29
  # DEBUG BEGIN_STMT
  _60 = result_29;
  cs ={v} {CLOBBER};
  return _60;

}


FlexCAN_Ip_ConfigEnhancedRxFifo_Privileged (uint8 instance, const struct Flexcan_Ip_EnhancedIdTableType * id_filter_table)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  int _1;
  unsigned char _2;
  _Bool _3;
  _Bool _4;
  unsigned char _5;
  unsigned char _6;
  _Bool _7;
  unsigned char _8;
  Flexcan_Ip_StatusType _36;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_15 = 0;
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  status_16 = 0;
  # DEBUG status => status_16
  # DEBUG BEGIN_STMT
  _1 = (int) instance_17(D);
  pBase_19 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_19
  # DEBUG BEGIN_STMT
  _2 = FlexCAN_IsEnabled (pBase_19);
  _3 = _2 == 0;
  disabled_21 = (boolean) _3;
  # DEBUG disabled => disabled_21
  # DEBUG BEGIN_STMT
  _4 = instance_17(D) <= 3;
  _5 = (unsigned char) _4;
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_IsEnhancedRxFifoAvailable (pBase_19);
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  _7 = id_filter_table_25(D) != 0B;
  _8 = (unsigned char) _7;
  DevAssert (_8);
  # DEBUG BEGIN_STMT
  if (disabled_21 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_28 = FlexCAN_Enable (pBase_19);
  # DEBUG result => result_28

  <bb 4> :
  # result_9 = PHI <result_15(2), result_28(3)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  freeze_30 = FlexCAN_IsFreezeMode (pBase_19);
  # DEBUG freeze => freeze_30
  # DEBUG BEGIN_STMT
  if (freeze_30 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_31 = 1;
  # DEBUG result => result_31

  <bb 7> :
  # result_10 = PHI <result_9(4), result_9(5), result_31(6)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  if (result_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoFilter (pBase_19, id_filter_table_25(D));

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_21 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_34 = FlexCAN_Disable (pBase_19);
  # DEBUG status => status_34
  # DEBUG BEGIN_STMT
  if (status_34 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_35 = status_34;
  # DEBUG result => result_35

  <bb 12> :
  # result_11 = PHI <result_10(9), result_10(10), result_35(11)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _36 = result_11;
  return _36;

}


FlexCAN_Ip_ConfigRxFifo_Privileged (uint8 instance, Flexcan_Ip_RxFifoIdElementFormatType id_format, const struct Flexcan_Ip_IdTableType * id_filter_table)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  _Bool _5;
  Flexcan_Ip_StatusType _31;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_12(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_15 = 0;
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  status_16 = 0;
  # DEBUG status => status_16
  # DEBUG BEGIN_STMT
  _3 = (int) instance_12(D);
  pBase_17 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_17
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_17);
  _5 = _4 == 0;
  disabled_19 = (boolean) _5;
  # DEBUG disabled => disabled_19
  # DEBUG BEGIN_STMT
  if (disabled_19 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_21 = FlexCAN_Enable (pBase_17);
  # DEBUG result => result_21

  <bb 4> :
  # result_6 = PHI <result_15(2), result_21(3)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  freeze_23 = FlexCAN_IsFreezeMode (pBase_17);
  # DEBUG freeze => freeze_23
  # DEBUG BEGIN_STMT
  if (freeze_23 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_24 = 1;
  # DEBUG result => result_24

  <bb 7> :
  # result_7 = PHI <result_6(4), result_6(5), result_24(6)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  if (result_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxFifoFilter (pBase_17, id_format_25(D), id_filter_table_26(D));

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_19 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_29 = FlexCAN_Disable (pBase_17);
  # DEBUG status => status_29
  # DEBUG BEGIN_STMT
  if (status_29 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_30 = status_29;
  # DEBUG result => result_30

  <bb 12> :
  # result_8 = PHI <result_7(9), result_7(10), result_30(11)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _31 = result_8;
  return _31;

}


FlexCAN_Ip_RxFifoBlocking (uint8 instance, struct Flexcan_Ip_MsgBuffType * data, uint32 timeout)
{
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  _Bool _2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;
  Flexcan_Ip_StatusType _29;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_8 = 0;
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _1 = (int) instance_9(D);
  base_11 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_11
  # DEBUG BEGIN_STMT
  _2 = instance_9(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnhancedRxFifoAvailable (base_11);
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsEnhancedRxFifoEnabled (base_11);
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result_26 = FlexCAN_StartRxMessageEnhancedFifoData (instance_9(D), data_14(D));
  # DEBUG result => result_26
  # DEBUG BEGIN_STMT
  if (result_26 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  result_28 = FlexCAN_ProccessEnhancedRxFifo (instance_9(D), timeout_17(D));
  # DEBUG result => result_28
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_22 = FlexCAN_StartRxMessageFifoData (instance_9(D), data_14(D));
  # DEBUG result => result_22
  # DEBUG BEGIN_STMT
  if (result_22 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  result_24 = FlexCAN_ProccessLegacyRxFIFO (instance_9(D), timeout_17(D));
  # DEBUG result => result_24
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  result_16 = FlexCAN_StartRxMessageFifoData (instance_9(D), data_14(D));
  # DEBUG result => result_16
  # DEBUG BEGIN_STMT
  if (result_16 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  result_19 = FlexCAN_ProccessLegacyRxFIFO (instance_9(D), timeout_17(D));
  # DEBUG result => result_19

  <bb 10> :
  # result_6 = PHI <result_22(6), result_16(8), result_19(9), result_28(5), result_26(4), result_24(7)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  _29 = result_6;
  return _29;

}


FlexCAN_Ip_RxFifo (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  unsigned char _5;
  Flexcan_Ip_StatusType _22;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_8 = 0;
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _1 = instance_9(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance_9(D);
  base_12 = Flexcan_Ip_apxBase[_3];
  # DEBUG base => base_12
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnhancedRxFifoAvailable (base_12);
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsEnhancedRxFifoEnabled (base_12);
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result_21 = FlexCAN_StartRxMessageEnhancedFifoData (instance_9(D), data_14(D));
  # DEBUG result => result_21
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  result_19 = FlexCAN_StartRxMessageFifoData (instance_9(D), data_14(D));
  # DEBUG result => result_19
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_16 = FlexCAN_StartRxMessageFifoData (instance_9(D), data_14(D));
  # DEBUG result => result_16

  <bb 7> :
  # result_6 = PHI <result_19(5), result_16(6), result_21(4)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  _22 = result_6;
  return _22;

}


FlexCAN_Ip_ReceiveBlocking (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling, uint32 u32TimeoutMs)
{
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  long unsigned int _1;
  _Bool _2;
  unsigned char _3;
  int _4;
  int _5;
  long unsigned int _6;
  unsigned char _7;
  long unsigned int _8;
  long unsigned int _9;
  unsigned char _10;
  long unsigned int _11;
  int _12;
  <unnamed type> _13;
  long unsigned int _14;
  unsigned char _15;
  int _16;
  <unnamed type> _17;
  int _18;
  long unsigned int _51;
  Flexcan_Ip_StatusType _58;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed_31 = 0;
  # DEBUG timeElapsed => timeElapsed_31
  # DEBUG BEGIN_STMT
  _1 = u32TimeoutMs_32(D) * 1000;
  mS2Ticks_34 = OsIf_MicrosToTicks (_1, 0);
  # DEBUG mS2Ticks => mS2Ticks_34
  # DEBUG BEGIN_STMT
  _2 = instance_35(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = (int) instance_35(D);
  state_37 = Flexcan_Ip_apxState[_4];
  # DEBUG state => state_37
  # DEBUG BEGIN_STMT
  _5 = (int) instance_35(D);
  base_38 = Flexcan_Ip_apxBase[_5];
  # DEBUG base => base_38
  # DEBUG BEGIN_STMT
  result_43 = FlexCAN_StartRxMessageBufferData (instance_35(D), mb_idx_39(D), data_40(D), isPolling_41(D));
  # DEBUG result => result_43
  # DEBUG BEGIN_STMT
  if (result_43 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (isPolling_41(D) == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = (long unsigned int) mb_idx_39(D);
  _7 = state_37->isIntActive;
  result_45 = FlexCAN_SetMsgBuffIntCmd (base_38, instance_35(D), _6, 1, _7);
  # DEBUG result => result_45

  <bb 5> :
  # result_19 = PHI <result_43(2), result_43(3), result_45(4)>
  # DEBUG result => result_19
  # DEBUG BEGIN_STMT
  if (result_19 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = OsIf_GetCounter (0);
  timeStart = _8;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (isPolling_41(D) == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) mb_idx_39(D);
  _10 = FlexCAN_GetBuffStatusFlag (base_38, _9);
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx_39(D);
  FlexCAN_IRQHandlerRxMB (instance_35(D), _11);

  <bb 10> :
  # DEBUG BEGIN_STMT
  _51 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_52 = _51 + timeElapsed_22;
  # DEBUG timeElapsed => timeElapsed_52
  # DEBUG BEGIN_STMT
  if (timeElapsed_52 >= mS2Ticks_34)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_53 = 3;
  # DEBUG result => result_53
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 12> :
  # timeElapsed_22 = PHI <timeElapsed_31(6), timeElapsed_52(10)>
  # DEBUG timeElapsed => timeElapsed_22
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx_39(D);
  _13 ={v} state_37->mbs[_12].state;
  if (_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # result_20 = PHI <result_19(5), result_53(11), result_19(12)>
  # DEBUG result => result_20
  # DEBUG BEGIN_STMT
  if (result_20 == 3)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  if (isPolling_41(D) == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _14 = (long unsigned int) mb_idx_39(D);
  _15 = state_37->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_38, instance_35(D), _14, 0, _15);

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (result_20 != 4)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  if (result_20 != 2)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _16 = (int) mb_idx_39(D);
  _17 ={v} state_37->mbs[_16].state;
  if (_17 == 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  result_57 = 0;
  # DEBUG result => result_57
  goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _18 = (int) mb_idx_39(D);
  state_37->mbs[_18].state ={v} 0;
  # DEBUG BEGIN_STMT
  result_56 = 3;
  # DEBUG result => result_56

  <bb 21> :
  # result_21 = PHI <result_20(16), result_20(17), result_57(19), result_56(20)>
  # DEBUG result => result_21
  # DEBUG BEGIN_STMT
  _58 = result_21;
  timeStart ={v} {CLOBBER};
  return _58;

}


FlexCAN_Ip_Receive (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  long unsigned int _5;
  unsigned char _6;
  Flexcan_Ip_StatusType _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_9(D);
  base_11 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_11
  # DEBUG BEGIN_STMT
  _2 = (int) instance_9(D);
  state_12 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_12
  # DEBUG BEGIN_STMT
  _3 = instance_9(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  result_18 = FlexCAN_StartRxMessageBufferData (instance_9(D), mb_idx_14(D), data_15(D), isPolling_16(D));
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  if (result_18 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (isPolling_16(D) == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) mb_idx_14(D);
  _6 = state_12->isIntActive;
  result_20 = FlexCAN_SetMsgBuffIntCmd (base_11, instance_9(D), _5, 1, _6);
  # DEBUG result => result_20

  <bb 5> :
  # result_7 = PHI <result_18(2), result_18(3), result_20(4)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  _21 = result_7;
  return _21;

}


FlexCAN_Ip_ConfigRxMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * rx_info, uint32 msg_id)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  _Bool _5;
  unsigned char _6;
  unsigned char _7;
  long unsigned int _8;
  unsigned char _9;
  long unsigned int _10;
  long unsigned int _11;
  <unnamed type> _12;
  unsigned char _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  Flexcan_Ip_StatusType _41;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_19 = 0;
  # DEBUG eResult => eResult_19
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_20(D);
  base_22 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_22
  # DEBUG BEGIN_STMT
  _2 = (int) instance_20(D);
  state_23 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_23
  # DEBUG BEGIN_STMT
  _3 = instance_20(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = rx_info_25(D) != 0B;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  _7 = state_23->bIsLegacyFifoEn;
  _8 = state_23->u32MaxMbNum;
  _9 = FlexCAN_IsMbOutOfRange (base_22, mb_idx_27(D), _7, _8);
  if (_9 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult_40 = 4;
  # DEBUG eResult => eResult_40
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _10 = (long unsigned int) mb_idx_27(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_22, _10);
  # DEBUG BEGIN_STMT
  _11 = rx_info_25(D)->data_length;
  cs.dataLen = _11;
  # DEBUG BEGIN_STMT
  _12 = rx_info_25(D)->msg_id_type;
  cs.msgIdType = _12;
  # DEBUG BEGIN_STMT
  _13 = rx_info_25(D)->fd_enable;
  cs.fd_enable = _13;
  # DEBUG BEGIN_STMT
  cs.code = 15;
  # DEBUG BEGIN_STMT
  _14 = (long unsigned int) mb_idx_27(D);
  FlexCAN_SetRxMsgBuff (base_22, _14, &cs, msg_id_34(D));
  # DEBUG BEGIN_STMT
  cs.code = 0;
  # DEBUG BEGIN_STMT
  _15 = (long unsigned int) mb_idx_27(D);
  FlexCAN_SetRxMsgBuff (base_22, _15, &cs, msg_id_34(D));
  # DEBUG BEGIN_STMT
  cs.code = 4;
  # DEBUG BEGIN_STMT
  _16 = (long unsigned int) mb_idx_27(D);
  FlexCAN_SetRxMsgBuff (base_22, _16, &cs, msg_id_34(D));

  <bb 5> :
  # eResult_17 = PHI <eResult_40(3), eResult_19(4)>
  # DEBUG eResult => eResult_17
  # DEBUG BEGIN_STMT
  _41 = eResult_17;
  cs ={v} {CLOBBER};
  return _41;

}


FlexCAN_Ip_Send (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  _Bool _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;
  long unsigned int _9;
  unsigned char _10;
  Flexcan_Ip_StatusType _29;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_13 = 1;
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  _1 = (int) instance_14(D);
  base_16 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_16
  # DEBUG BEGIN_STMT
  _2 = (int) instance_14(D);
  state_17 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_17
  # DEBUG BEGIN_STMT
  _3 = instance_14(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = tx_info_19(D) != 0B;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  _7 = FlexCAN_IsListenOnlyModeEnabled (base_16);
  if (_7 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_26 = FlexCAN_StartSendData (instance_14(D), mb_idx_22(D), tx_info_19(D), msg_id_23(D), mb_data_24(D));
  # DEBUG result => result_26
  # DEBUG BEGIN_STMT
  if (result_26 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _8 = tx_info_19(D)->is_polling;
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) mb_idx_22(D);
  _10 = state_17->isIntActive;
  result_28 = FlexCAN_SetMsgBuffIntCmd (base_16, instance_14(D), _9, 1, _10);
  # DEBUG result => result_28

  <bb 6> :
  # result_11 = PHI <result_13(2), result_26(3), result_26(4), result_28(5)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _29 = result_11;
  return _29;

}


FlexCAN_Ip_Init_Privileged (uint8 Flexcan_Ip_u8Instance, struct Flexcan_Ip_StateType * Flexcan_Ip_pState, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  uint32 i;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType eResult;
  int _1;
  _Bool _2;
  unsigned char _3;
  _Bool _4;
  unsigned char _5;
  <unnamed type> _6;
  <unnamed type> _7;
  void (*<Tb98>) (uint8, Flexcan_Ip_EventType, uint32, const struct Flexcan_Ip_StateType *) _8;
  void (*<Tb98>) (uint8, Flexcan_Ip_EventType, uint32, const struct Flexcan_Ip_StateType *) _9;
  unsigned char _10;
  unsigned char _11;
  long unsigned int _12;
  int _13;
  Flexcan_Ip_StatusType _47;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_17 = 0;
  # DEBUG eResult => eResult_17
  # DEBUG BEGIN_STMT
  _1 = (int) Flexcan_Ip_u8Instance_18(D);
  pBase_20 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_20
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = Flexcan_Ip_u8Instance_18(D) <= 3;
  _3 = (unsigned char) _2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = Flexcan_Ip_pData_22(D) != 0B;
  _5 = (unsigned char) _4;
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  eResult_25 = FlexCAN_InitController (Flexcan_Ip_u8Instance_18(D), pBase_20, Flexcan_Ip_pData_22(D));
  # DEBUG eResult => eResult_25
  # DEBUG BEGIN_STMT
  if (eResult_25 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_InitBaudrate (pBase_20, Flexcan_Ip_pData_22(D));
  # DEBUG BEGIN_STMT
  _6 = Flexcan_Ip_pData_22(D)->flexcanMode;
  FlexCAN_SetOperationMode (pBase_20, _6);
  # DEBUG BEGIN_STMT
  i_28 = 0;
  # DEBUG i => i_28
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_29(D)->mbs[i_14].isPolling = 1;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_29(D)->mbs[i_14].pMBmessage = 0B;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_29(D)->mbs[i_14].state ={v} 0;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_29(D)->mbs[i_14].time_stamp = 0;
  # DEBUG BEGIN_STMT
  i_46 = i_14 + 1;
  # DEBUG i => i_46

  <bb 5> :
  # i_14 = PHI <i_28(3), i_46(4)>
  # DEBUG i => i_14
  # DEBUG BEGIN_STMT
  if (i_14 <= 63)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_29(D)->enhancedFifoOutput.isPolling = 1;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_29(D)->enhancedFifoOutput.state ={v} 0;
  # DEBUG BEGIN_STMT
  _7 = Flexcan_Ip_pData_22(D)->transfer_type;
  Flexcan_Ip_pState_29(D)->transferType = _7;
  # DEBUG BEGIN_STMT
  _8 = Flexcan_Ip_pData_22(D)->Callback;
  Flexcan_Ip_pState_29(D)->callback = _8;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_29(D)->callbackParam = 0B;
  # DEBUG BEGIN_STMT
  _9 = Flexcan_Ip_pData_22(D)->ErrorCallback;
  Flexcan_Ip_pState_29(D)->error_callback = _9;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_29(D)->errorCallbackParam = 0B;
  # DEBUG BEGIN_STMT
  _10 = Flexcan_Ip_pData_22(D)->is_rx_fifo_needed;
  Flexcan_Ip_pState_29(D)->bIsLegacyFifoEn = _10;
  # DEBUG BEGIN_STMT
  _11 = Flexcan_Ip_pData_22(D)->is_enhanced_rx_fifo_needed;
  Flexcan_Ip_pState_29(D)->bIsEnhancedFifoEn = _11;
  # DEBUG BEGIN_STMT
  _12 = Flexcan_Ip_pData_22(D)->max_num_mb;
  Flexcan_Ip_pState_29(D)->u32MaxMbNum = _12;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_29(D)->isIntActive = 1;
  # DEBUG BEGIN_STMT
  _13 = (int) Flexcan_Ip_u8Instance_18(D);
  Flexcan_Ip_apxState[_13] = Flexcan_Ip_pState_29(D);

  <bb 7> :
  # DEBUG BEGIN_STMT
  _47 = eResult_25;
  return _47;

}


FlexCAN_AbortRxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 val2;
  uint32 val1;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  unsigned char _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_16
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_14(D);
  state_17 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_17
  # DEBUG BEGIN_STMT
  val1_18 = 0;
  # DEBUG val1 => val1_18
  # DEBUG BEGIN_STMT
  val2_19 = 0;
  # DEBUG val2 => val2_19
  # DEBUG BEGIN_STMT
  flexcan_mb_config_20 = 0;
  # DEBUG flexcan_mb_config => flexcan_mb_config_20
  # DEBUG BEGIN_STMT
  flexcan_mb_21 = 0B;
  # DEBUG flexcan_mb => flexcan_mb_21
  # DEBUG BEGIN_STMT
  _3 = (int) mb_idx_22(D);
  state_17->mbs[_3].state ={v} 0;
  # DEBUG BEGIN_STMT
  _4 = state_17->bIsLegacyFifoEn;
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 ={v} pBase_16->CTRL2;
  _6 = _5 >> 24;
  val1_33 = _6 & 15;
  # DEBUG val1 => val1_33
  # DEBUG BEGIN_STMT
  val2_35 = RxFifoOcuppiedLastMsgBuff (val1_33);
  # DEBUG val2 => val2_35
  # DEBUG BEGIN_STMT
  _7 = (long unsigned int) mb_idx_22(D);
  if (val2_35 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = (long unsigned int) mb_idx_22(D);
  flexcan_mb_37 = FlexCAN_GetMsgBuffRegion (pBase_16, _8);
  # DEBUG flexcan_mb => flexcan_mb_37
  # DEBUG BEGIN_STMT
  flexcan_mb_config_38 ={v} *flexcan_mb_37;
  # DEBUG flexcan_mb_config => flexcan_mb_config_38
  # DEBUG BEGIN_STMT
  flexcan_mb_config_39 = flexcan_mb_config_38 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_39
  # DEBUG BEGIN_STMT
  flexcan_mb_config_40 = flexcan_mb_config_39;
  # DEBUG flexcan_mb_config => flexcan_mb_config_40
  # DEBUG BEGIN_STMT
  *flexcan_mb_37 ={v} flexcan_mb_config_40;
  # DEBUG BEGIN_STMT
  flexcan_mb_config_42 = flexcan_mb_config_40 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_42
  # DEBUG BEGIN_STMT
  flexcan_mb_config_43 = flexcan_mb_config_42 | 67108864;
  # DEBUG flexcan_mb_config => flexcan_mb_config_43
  # DEBUG BEGIN_STMT
  *flexcan_mb_37 ={v} flexcan_mb_config_43;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (mb_idx_22(D) == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = state_17->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase_16, u8Instance_14(D), 5, _9);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = (long unsigned int) mb_idx_22(D);
  flexcan_mb_25 = FlexCAN_GetMsgBuffRegion (pBase_16, _10);
  # DEBUG flexcan_mb => flexcan_mb_25
  # DEBUG BEGIN_STMT
  flexcan_mb_config_26 ={v} *flexcan_mb_25;
  # DEBUG flexcan_mb_config => flexcan_mb_config_26
  # DEBUG BEGIN_STMT
  flexcan_mb_config_27 = flexcan_mb_config_26 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_27
  # DEBUG BEGIN_STMT
  flexcan_mb_config_28 = flexcan_mb_config_27;
  # DEBUG flexcan_mb_config => flexcan_mb_config_28
  # DEBUG BEGIN_STMT
  *flexcan_mb_25 ={v} flexcan_mb_config_28;
  # DEBUG BEGIN_STMT
  flexcan_mb_config_30 = flexcan_mb_config_28 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_30
  # DEBUG BEGIN_STMT
  flexcan_mb_config_31 = flexcan_mb_config_30 | 67108864;
  # DEBUG flexcan_mb_config => flexcan_mb_config_31
  # DEBUG BEGIN_STMT
  *flexcan_mb_25 ={v} flexcan_mb_config_31;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx_22(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_16, _11);
  return;

}


FlexCAN_AbortTxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 uS2Ticks;
  uint32 flexcan_mb_config;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  int _12;
  long unsigned int _42;
  Flexcan_Ip_StatusType _50;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_19(D);
  pBase_21 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_21
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_19(D);
  state_22 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_22
  # DEBUG BEGIN_STMT
  result_23 = 0;
  # DEBUG result => result_23
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed_25 = 0;
  # DEBUG timeElapsed => timeElapsed_25
  # DEBUG BEGIN_STMT
  flexcan_mb_config_26 = 0;
  # DEBUG flexcan_mb_config => flexcan_mb_config_26
  # DEBUG BEGIN_STMT
  uS2Ticks_27 = 0;
  # DEBUG uS2Ticks => uS2Ticks_27
  # DEBUG BEGIN_STMT
  flexcan_mb_28 = 0B;
  # DEBUG flexcan_mb => flexcan_mb_28
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) mb_idx_29(D);
  flexcan_mb_31 = FlexCAN_GetMsgBuffRegion (pBase_21, _3);
  # DEBUG flexcan_mb => flexcan_mb_31
  # DEBUG BEGIN_STMT
  flexcan_mb_config_32 ={v} *flexcan_mb_31;
  # DEBUG flexcan_mb_config => flexcan_mb_config_32
  # DEBUG BEGIN_STMT
  flexcan_mb_config_33 = flexcan_mb_config_32 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_33
  # DEBUG BEGIN_STMT
  flexcan_mb_config_34 = flexcan_mb_config_33 | 150994944;
  # DEBUG flexcan_mb_config => flexcan_mb_config_34
  # DEBUG BEGIN_STMT
  *flexcan_mb_31 ={v} flexcan_mb_config_34;
  # DEBUG BEGIN_STMT
  uS2Ticks_37 = OsIf_MicrosToTicks (1000000, 0);
  # DEBUG uS2Ticks => uS2Ticks_37
  # DEBUG BEGIN_STMT
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _42 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_43 = _42 + timeElapsed_16;
  # DEBUG timeElapsed => timeElapsed_43
  # DEBUG BEGIN_STMT
  if (timeElapsed_43 >= uS2Ticks_37)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result_44 = 3;
  # DEBUG result => result_44
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
  # timeElapsed_16 = PHI <timeElapsed_25(2), timeElapsed_43(3)>
  # DEBUG timeElapsed => timeElapsed_16
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) mb_idx_29(D);
  _6 = FlexCAN_GetBuffStatusFlag (pBase_21, _5);
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # result_13 = PHI <result_44(4), result_23(5)>
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  if (result_13 != 3)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  flexcan_mb_config_45 ={v} *flexcan_mb_31;
  # DEBUG flexcan_mb_config => flexcan_mb_config_45
  # DEBUG BEGIN_STMT
  _7 = flexcan_mb_config_45 >> 24;
  _8 = _7 & 15;
  if (_8 == 8)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  result_46 = 5;
  # DEBUG result => result_46

  <bb 9> :
  # result_14 = PHI <result_13(7), result_46(8)>
  # DEBUG result => result_14
  # DEBUG BEGIN_STMT
  _9 = flexcan_mb_config_45 >> 24;
  _10 = _9 & 15;
  if (_10 == 9)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  result_47 = 0;
  # DEBUG result => result_47

  <bb 11> :
  # result_15 = PHI <result_13(6), result_14(9), result_47(10)>
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx_29(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_21, _11);
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx_29(D);
  state_22->mbs[_12].state ={v} 0;
  # DEBUG BEGIN_STMT
  _50 = result_15;
  timeStart ={v} {CLOBBER};
  return _50;

}


FlexCAN_IRQHandlerEnhancedRxFIFO (uint8 instance, uint32 intType)
{
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  <unnamed type> _3;
  struct Flexcan_Ip_MsgBuffType * _4;
  struct Flexcan_Ip_MsgBuffType * _5;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  <unnamed type> _8;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _9;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _11;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _12;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _13;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_18(D);
  base_20 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_20
  # DEBUG BEGIN_STMT
  _2 = (int) instance_18(D);
  state_21 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_21
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  switch (intType_22(D)) <default: <L20> [INV], case 28: <L0> [INV], case 29: <L9> [INV], case 30: <L12> [INV], case 31: <L15> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _3 ={v} state_21->enhancedFifoOutput.state;
  if (_3 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _4 = state_21->enhancedFifoOutput.pMBmessage;
  if (_4 == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  state_21->enhancedFifoOutput.pMBmessage = &data;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _5 = state_21->enhancedFifoOutput.pMBmessage;
  FlexCAN_ReadEnhancedRxFifo (base_20, _5);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_20, intType_22(D));
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_20, 29);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_20, 30);
  # DEBUG BEGIN_STMT
  state_21->enhancedFifoOutput.state ={v} 0;
  # DEBUG BEGIN_STMT
  _6 = state_21->callback;
  if (_6 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 = state_21->callback;
  _7 (instance_18(D), 5, 255, state_21);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _8 ={v} state_21->enhancedFifoOutput.state;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  FlexCAN_CompleteRxMessageEnhancedFifoData (instance_18(D));
  goto <bb 16>; [INV]

  <bb 10> :
<L9>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_20, intType_22(D));
  # DEBUG BEGIN_STMT
  _9 = state_21->callback;
  if (_9 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _10 = state_21->callback;
  _10 (instance_18(D), 6, 255, state_21);
  goto <bb 16>; [INV]

  <bb 12> :
<L12>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_20, intType_22(D));
  # DEBUG BEGIN_STMT
  _11 = state_21->callback;
  if (_11 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _12 = state_21->callback;
  _12 (instance_18(D), 7, 255, state_21);
  goto <bb 16>; [INV]

  <bb 14> :
<L15>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_20, intType_22(D));
  # DEBUG BEGIN_STMT
  _13 = state_21->callback;
  if (_13 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _14 = state_21->callback;
  _14 (instance_18(D), 8, 255, state_21);

  <bb 16> :
<L20>:
  data ={v} {CLOBBER};
  return;

}


FlexCAN_ProcessIRQHandlerEnhancedRxFIFO (uint8 u8Instance, boolean bIsSpuriousIntPrevious)
{
  boolean bIsSpuriousInt;
  uint32 u32intType;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;
  boolean _19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_11(D);
  base_13 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_13
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_11(D);
  state_14 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_14
  # DEBUG BEGIN_STMT
  u32intType_15 = 0;
  # DEBUG u32intType => u32intType_15
  # DEBUG BEGIN_STMT
  bIsSpuriousInt_17 = bIsSpuriousIntPrevious_16(D);
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_17
  # DEBUG BEGIN_STMT
  u32intType_18 = 31;
  # DEBUG u32intType => u32intType_18
  goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_GetEnhancedRxFIFOStatusFlag (base_13, u32intType_6);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_GetEnhancedRxFIFOIntStatusFlag (base_13, u32intType_6);
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerEnhancedRxFIFO (u8Instance_11(D), u32intType_6);
  # DEBUG BEGIN_STMT
  bIsSpuriousInt_24 = 0;
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_24
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (bIsSpuriousInt_8 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _5 = state_14->enhancedFifoOutput.isPolling;
  if (_5 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_13, u32intType_6);

  <bb 9> :
  # bIsSpuriousInt_7 = PHI <bIsSpuriousInt_8(3), bIsSpuriousInt_24(5), bIsSpuriousInt_8(6), bIsSpuriousInt_8(7), bIsSpuriousInt_8(8)>
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  u32intType_25 = u32intType_6 + 4294967295;
  # DEBUG u32intType => u32intType_25

  <bb 10> :
  # u32intType_6 = PHI <u32intType_18(2), u32intType_25(9)>
  # bIsSpuriousInt_8 = PHI <bIsSpuriousInt_17(2), bIsSpuriousInt_7(9)>
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_8
  # DEBUG u32intType => u32intType_6
  # DEBUG BEGIN_STMT
  if (u32intType_6 > 27)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _19 = bIsSpuriousInt_8;
  return _19;

}


FlexCAN_ProcessSpuriousInterruptMB (uint8 instance, uint32 startMbIdx, uint32 endMbIdx)
{
  uint32 u32MbHandle;
  uint32 mb_idx;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;
  unsigned char _6;
  <unnamed type> _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_12(D);
  base_14 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_14
  # DEBUG BEGIN_STMT
  _2 = (int) instance_12(D);
  state_15 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_15
  # DEBUG BEGIN_STMT
  mb_idx_16 = 0;
  # DEBUG mb_idx => mb_idx_16
  # DEBUG BEGIN_STMT
  u32MbHandle_17 = 0;
  # DEBUG u32MbHandle => u32MbHandle_17
  # DEBUG BEGIN_STMT
  mb_idx_19 = startMbIdx_18(D);
  # DEBUG mb_idx => mb_idx_19
  goto <bb 12>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_GetBuffStatusFlag (base_14, mb_idx_8);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  _4 = FlexCAN_GetBuffStatusImask (base_14, mb_idx_8);
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  u32MbHandle_23 = mb_idx_8;
  # DEBUG u32MbHandle => u32MbHandle_23
  # DEBUG BEGIN_STMT
  _5 = state_15->bIsLegacyFifoEn;
  if (_5 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (mb_idx_8 <= 7)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  u32MbHandle_24 = 0;
  # DEBUG u32MbHandle => u32MbHandle_24

  <bb 8> :
  # u32MbHandle_9 = PHI <u32MbHandle_23(5), u32MbHandle_23(6), u32MbHandle_24(7)>
  # DEBUG u32MbHandle => u32MbHandle_9
  # DEBUG BEGIN_STMT
  _6 = state_15->mbs[u32MbHandle_9].isPolling;
  if (_6 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_14, mb_idx_8);
  # DEBUG BEGIN_STMT
  _7 ={v} state_15->mbs[u32MbHandle_9].state;
  if (_7 == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  state_15->mbs[u32MbHandle_9].state ={v} 0;
  # DEBUG BEGIN_STMT
  state_15->mbs[u32MbHandle_9].isPolling = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  mb_idx_28 = mb_idx_8 + 1;
  # DEBUG mb_idx => mb_idx_28

  <bb 12> :
  # mb_idx_8 = PHI <mb_idx_19(2), mb_idx_28(11)>
  # DEBUG mb_idx => mb_idx_8
  # DEBUG BEGIN_STMT
  if (mb_idx_8 <= endMbIdx_20(D))
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  return;

}


FlexCAN_IRQHandlerRxFIFO (uint8 instance, uint32 mb_idx)
{
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  struct Flexcan_Ip_MsgBuffType * _3;
  <unnamed type> _4;
  struct Flexcan_Ip_MsgBuffType * _5;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  <unnamed type> _8;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _9;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _11;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_16(D);
  base_18 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_18
  # DEBUG BEGIN_STMT
  _2 = (int) instance_16(D);
  state_19 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_19
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = state_19->mbs[0].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  state_19->mbs[0].pMBmessage = &data;

  <bb 4> :
  # DEBUG BEGIN_STMT
  switch (mb_idx_21(D)) <default: <L17> [INV], case 5: <L2> [INV], case 6: <L9> [INV], case 7: <L12> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _4 ={v} state_19->mbs[0].state;
  if (_4 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _5 = state_19->mbs[0].pMBmessage;
  FlexCAN_ReadRxFifo (base_18, _5);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_18, mb_idx_21(D));
  # DEBUG BEGIN_STMT
  state_19->mbs[0].state ={v} 0;
  # DEBUG BEGIN_STMT
  _6 = state_19->callback;
  if (_6 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 = state_19->callback;
  _7 (instance_16(D), 1, 0, state_19);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _8 ={v} state_19->mbs[0].state;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  state_19->mbs[0].isPolling = 1;
  # DEBUG BEGIN_STMT
  FlexCAN_CompleteRxMessageFifoData (instance_16(D));
  goto <bb 14>; [INV]

  <bb 10> :
<L9>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_18, mb_idx_21(D));
  # DEBUG BEGIN_STMT
  _9 = state_19->callback;
  if (_9 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _10 = state_19->callback;
  _10 (instance_16(D), 2, 0, state_19);
  goto <bb 14>; [INV]

  <bb 12> :
<L12>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_18, mb_idx_21(D));
  # DEBUG BEGIN_STMT
  _11 = state_19->callback;
  if (_11 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _12 = state_19->callback;
  _12 (instance_16(D), 3, 0, state_19);

  <bb 14> :
<L17>:
  data ={v} {CLOBBER};
  return;

}


FlexCAN_IRQHandlerTxMB (uint8 u8Instance, uint32 u32MbIdx)
{
  struct Flexcan_Ip_MsgBuffType mb;
  struct Flexcan_Ip_StateType * pState;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _9;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  <unnamed type> _11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_18(D);
  pBase_20 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_20
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_18(D);
  pState_21 = Flexcan_Ip_apxState[_2];
  # DEBUG pState => pState_21
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = pState_21->mbs[u32MbIdx_22(D)].isRemote;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_LockRxMsgBuff (pBase_20, u32MbIdx_22(D));
  # DEBUG BEGIN_STMT
  FlexCAN_GetMsgBuff (pBase_20, u32MbIdx_22(D), &mb);
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (pBase_20);
  # DEBUG BEGIN_STMT
  _4 = mb.time_stamp;
  pState_21->mbs[u32MbIdx_22(D)].time_stamp = _4;
  # DEBUG BEGIN_STMT
  _5 = mb.cs;
  _6 = _5 >> 24;
  _7 = _6 & 15;
  if (_7 == 4)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_20, u32MbIdx_22(D));
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_GetMsgBuffTimestamp (pBase_20, u32MbIdx_22(D));
  pState_21->mbs[u32MbIdx_22(D)].time_stamp = _8;
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (pBase_20);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_20, u32MbIdx_22(D));

  <bb 6> :
  # DEBUG BEGIN_STMT
  pState_21->mbs[u32MbIdx_22(D)].state ={v} 0;
  # DEBUG BEGIN_STMT
  _9 = pState_21->callback;
  if (_9 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = pState_21->callback;
  _10 (u8Instance_18(D), 4, u32MbIdx_22(D), pState_21);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _11 ={v} pState_21->mbs[u32MbIdx_22(D)].state;
  if (_11 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  pState_21->mbs[u32MbIdx_22(D)].isPolling = 1;
  # DEBUG BEGIN_STMT
  _12 = pState_21->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_20, u8Instance_18(D), u32MbIdx_22(D), 0, _12);
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _13 = pState_21->mbs[u32MbIdx_22(D)].isPolling;
  if (_13 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _14 = pState_21->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_20, u8Instance_18(D), u32MbIdx_22(D), 0, _14);

  <bb 12> :
  # DEBUG BEGIN_STMT
  mb ={v} {CLOBBER};
  return;

}


FlexCAN_IRQHandlerRxMB (uint8 instance, uint32 mb_idx)
{
  boolean bCurrentIntStat;
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  struct Flexcan_Ip_MsgBuffType * _3;
  struct Flexcan_Ip_MsgBuffType * _4;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _5;
  void (*<Tb92>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  <unnamed type> _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_15(D);
  base_17 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_17
  # DEBUG BEGIN_STMT
  _2 = (int) instance_15(D);
  state_18 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_18
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  bCurrentIntStat_19 = 0;
  # DEBUG bCurrentIntStat => bCurrentIntStat_19
  # DEBUG BEGIN_STMT
  _3 = state_18->mbs[mb_idx_20(D)].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  state_18->mbs[mb_idx_20(D)].pMBmessage = &data;

  <bb 4> :
  # DEBUG BEGIN_STMT
  FlexCAN_LockRxMsgBuff (base_17, mb_idx_20(D));
  # DEBUG BEGIN_STMT
  _4 = state_18->mbs[mb_idx_20(D)].pMBmessage;
  FlexCAN_GetMsgBuff (base_17, mb_idx_20(D), _4);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_17, mb_idx_20(D));
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (base_17);
  # DEBUG BEGIN_STMT
  state_18->mbs[mb_idx_20(D)].state ={v} 0;
  # DEBUG BEGIN_STMT
  bCurrentIntStat_27 = state_18->mbs[mb_idx_20(D)].isPolling;
  # DEBUG bCurrentIntStat => bCurrentIntStat_27
  # DEBUG BEGIN_STMT
  _5 = state_18->callback;
  if (_5 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = state_18->callback;
  _6 (instance_15(D), 0, mb_idx_20(D), state_18);

  <bb 6> :
  # DEBUG BEGIN_STMT
  _7 ={v} state_18->mbs[mb_idx_20(D)].state;
  if (_7 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _8 = state_18->mbs[mb_idx_20(D)].isPolling;
  if (_8 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  state_18->mbs[mb_idx_20(D)].isPolling = 1;
  # DEBUG BEGIN_STMT
  _9 = state_18->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_17, instance_15(D), mb_idx_20(D), 0, _9);
  goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (bCurrentIntStat_27 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _10 = state_18->mbs[mb_idx_20(D)].isPolling;
  if (_10 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _11 = state_18->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_17, instance_15(D), mb_idx_20(D), 0, _11);

  <bb 12> :
  # DEBUG BEGIN_STMT
  data ={v} {CLOBBER};
  return;

}


FlexCAN_StartRxMessageFifoData (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType eResult;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  _Bool _1;
  unsigned char _2;
  int _3;
  int _4;
  unsigned char _5;
  <unnamed type> _6;
  <unnamed type> _7;
  <unnamed type> _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  Flexcan_Ip_StatusType _33;

  <bb 2> :
  # DEBUG BEGIN_STMT
  base_15 = 0B;
  # DEBUG base => base_15
  # DEBUG BEGIN_STMT
  state_16 = 0B;
  # DEBUG state => state_16
  # DEBUG BEGIN_STMT
  eResult_17 = 0;
  # DEBUG eResult => eResult_17
  # DEBUG BEGIN_STMT
  _1 = instance_18(D) <= 3;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance_18(D);
  base_21 = Flexcan_Ip_apxBase[_3];
  # DEBUG base => base_21
  # DEBUG BEGIN_STMT
  _4 = (int) instance_18(D);
  state_22 = Flexcan_Ip_apxState[_4];
  # DEBUG state => state_22
  # DEBUG BEGIN_STMT
  _5 = state_22->bIsLegacyFifoEn;
  if (_5 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult_32 = 1;
  # DEBUG eResult => eResult_32
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 ={v} state_22->mbs[0].state;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  eResult_31 = 2;
  # DEBUG eResult => eResult_31
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  state_22->mbs[0].state ={v} 1;
  # DEBUG BEGIN_STMT
  _7 = state_22->transferType;
  if (_7 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  state_22->mbs[0].isPolling = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  state_22->mbs[0].pMBmessage = data_25(D);
  # DEBUG BEGIN_STMT
  _8 = state_22->transferType;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  state_22->mbs[0].isPolling = 0;
  # DEBUG BEGIN_STMT
  _9 = state_22->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_21, instance_18(D), 6, 1, _9);
  # DEBUG BEGIN_STMT
  _10 = state_22->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_21, instance_18(D), 7, 1, _10);
  # DEBUG BEGIN_STMT
  _11 = state_22->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_21, instance_18(D), 5, 1, _11);

  <bb 10> :
  # eResult_12 = PHI <eResult_32(3), eResult_31(5), eResult_17(8), eResult_17(9)>
  # DEBUG eResult => eResult_12
  # DEBUG BEGIN_STMT
  _33 = eResult_12;
  return _33;

}


FlexCAN_StartSendData (uint8 Flexcan_Ip_u8Instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  _Bool _5;
  unsigned char _6;
  long unsigned int _7;
  unsigned char _8;
  long unsigned int _9;
  unsigned char _10;
  _Bool _11;
  unsigned char _12;
  unsigned char _13;
  long unsigned int _14;
  unsigned char _15;
  int _16;
  <unnamed type> _17;
  long unsigned int _18;
  int _19;
  int _20;
  int _21;
  unsigned char _22;
  int _23;
  unsigned char _24;
  long unsigned int _25;
  <unnamed type> _26;
  unsigned char _27;
  unsigned char _28;
  unsigned char _29;
  unsigned char _30;
  long unsigned int _31;
  Flexcan_Ip_StatusType _67;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_35 = 0;
  # DEBUG eResult => eResult_35
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) Flexcan_Ip_u8Instance_36(D);
  state_38 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_38
  # DEBUG BEGIN_STMT
  _2 = (int) Flexcan_Ip_u8Instance_36(D);
  base_39 = Flexcan_Ip_apxBase[_2];
  # DEBUG base => base_39
  # DEBUG BEGIN_STMT
  pMbAddr_40 = 0B;
  # DEBUG pMbAddr => pMbAddr_40
  # DEBUG BEGIN_STMT
  _3 = Flexcan_Ip_u8Instance_36(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = tx_info_42(D) != 0B;
  _6 = (unsigned char) _5;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  _7 = tx_info_42(D)->data_length;
  _8 = (unsigned char) _7;
  _9 = (long unsigned int) mb_idx_44(D);
  _10 = FlexCAN_GetMbPayloadSize (base_39, _9);
  _11 = _8 <= _10;
  _12 = (unsigned char) _11;
  DevAssert (_12);
  # DEBUG BEGIN_STMT
  _13 = state_38->bIsLegacyFifoEn;
  _14 = state_38->u32MaxMbNum;
  _15 = FlexCAN_IsMbOutOfRange (base_39, mb_idx_44(D), _13, _14);
  if (_15 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult_66 = 4;
  # DEBUG eResult => eResult_66
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _16 = (int) mb_idx_44(D);
  _17 ={v} state_38->mbs[_16].state;
  if (_17 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  eResult_65 = 2;
  # DEBUG eResult => eResult_65
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _18 = (long unsigned int) mb_idx_44(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_39, _18);
  # DEBUG BEGIN_STMT
  _19 = (int) mb_idx_44(D);
  state_38->mbs[_19].state ={v} 2;
  # DEBUG BEGIN_STMT
  _20 = (int) mb_idx_44(D);
  state_38->mbs[_20].time_stamp = 0;
  # DEBUG BEGIN_STMT
  _21 = (int) mb_idx_44(D);
  _22 = tx_info_42(D)->is_polling;
  state_38->mbs[_21].isPolling = _22;
  # DEBUG BEGIN_STMT
  _23 = (int) mb_idx_44(D);
  _24 = tx_info_42(D)->is_remote;
  state_38->mbs[_23].isRemote = _24;
  # DEBUG BEGIN_STMT
  _25 = tx_info_42(D)->data_length;
  cs.dataLen = _25;
  # DEBUG BEGIN_STMT
  _26 = tx_info_42(D)->msg_id_type;
  cs.msgIdType = _26;
  # DEBUG BEGIN_STMT
  _27 = tx_info_42(D)->fd_enable;
  cs.fd_enable = _27;
  # DEBUG BEGIN_STMT
  _28 = tx_info_42(D)->fd_padding;
  cs.fd_padding = _28;
  # DEBUG BEGIN_STMT
  _29 = tx_info_42(D)->enable_brs;
  cs.enable_brs = _29;
  # DEBUG BEGIN_STMT
  _30 = tx_info_42(D)->is_remote;
  if (_30 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  cs.code = 28;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  cs.code = 12;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _31 = (long unsigned int) mb_idx_44(D);
  pMbAddr_61 = FlexCAN_GetMsgBuffRegion (base_39, _31);
  # DEBUG pMbAddr => pMbAddr_61
  # DEBUG BEGIN_STMT
  FlexCAN_SetTxMsgBuff (pMbAddr_61, &cs, msg_id_62(D), mb_data_63(D), 0);

  <bb 10> :
  # eResult_32 = PHI <eResult_66(3), eResult_65(5), eResult_35(9)>
  # DEBUG eResult => eResult_32
  # DEBUG BEGIN_STMT
  _67 = eResult_32;
  cs ={v} {CLOBBER};
  return _67;

}


FlexCAN_StartRxMessageBufferData (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  unsigned char _5;
  long unsigned int _6;
  unsigned char _7;
  int _8;
  <unnamed type> _9;
  int _10;
  int _11;
  int _12;
  Flexcan_Ip_StatusType _30;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_15 = 0;
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  _1 = (int) instance_16(D);
  base_18 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_18
  # DEBUG BEGIN_STMT
  _2 = (int) instance_16(D);
  state_19 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_19
  # DEBUG BEGIN_STMT
  _3 = instance_16(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = state_19->bIsLegacyFifoEn;
  _6 = state_19->u32MaxMbNum;
  _7 = FlexCAN_IsMbOutOfRange (base_18, mb_idx_21(D), _5, _6);
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_29 = 4;
  # DEBUG result => result_29
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = (int) mb_idx_21(D);
  _9 ={v} state_19->mbs[_8].state;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  result_28 = 2;
  # DEBUG result => result_28
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = (int) mb_idx_21(D);
  state_19->mbs[_10].state ={v} 1;
  # DEBUG BEGIN_STMT
  _11 = (int) mb_idx_21(D);
  state_19->mbs[_11].pMBmessage = data_24(D);
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx_21(D);
  state_19->mbs[_12].isPolling = isPolling_26(D);

  <bb 7> :
  # result_13 = PHI <result_29(3), result_28(5), result_15(6)>
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  _30 = result_13;
  return _30;

}


FlexCAN_ProccessLegacyRxFIFO (uint8 u8Instance, uint32 u32TimeoutMs)
{
  uint32 u32intType;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * pState;
  Flexcan_Ip_StatusType eResult;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  <unnamed type> _5;
  unsigned char _6;
  <unnamed type> _7;
  <unnamed type> _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  <unnamed type> _12;
  long unsigned int _42;
  Flexcan_Ip_StatusType _51;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_24 = 0;
  # DEBUG eResult => eResult_24
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_25(D);
  pState_27 = Flexcan_Ip_apxState[_1];
  # DEBUG pState => pState_27
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_25(D);
  pBase_28 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_28
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed_30 = 0;
  # DEBUG timeElapsed => timeElapsed_30
  # DEBUG BEGIN_STMT
  _3 = u32TimeoutMs_31(D) * 1000;
  mS2Ticks_33 = OsIf_MicrosToTicks (_3, 0);
  # DEBUG mS2Ticks => mS2Ticks_33
  # DEBUG BEGIN_STMT
  u32intType_34 = 0;
  # DEBUG u32intType => u32intType_34
  # DEBUG BEGIN_STMT
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = pState_27->transferType;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  u32intType_37 = 7;
  # DEBUG u32intType => u32intType_37
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_GetBuffStatusFlag (pBase_28, u32intType_16);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (u8Instance_25(D), u32intType_16);

  <bb 7> :
  # DEBUG BEGIN_STMT
  u32intType_40 = u32intType_16 + 4294967295;
  # DEBUG u32intType => u32intType_40

  <bb 8> :
  # u32intType_16 = PHI <u32intType_37(4), u32intType_40(7)>
  # DEBUG u32intType => u32intType_16
  # DEBUG BEGIN_STMT
  if (u32intType_16 > 4)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _42 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_43 = _42 + timeElapsed_15;
  # DEBUG timeElapsed => timeElapsed_43
  # DEBUG BEGIN_STMT
  if (timeElapsed_43 >= mS2Ticks_33)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  eResult_44 = 3;
  # DEBUG eResult => eResult_44
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 11> :
  # timeElapsed_15 = PHI <timeElapsed_30(2), timeElapsed_43(9)>
  # DEBUG timeElapsed => timeElapsed_15
  # DEBUG BEGIN_STMT
  _7 ={v} pState_27->mbs[0].state;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # eResult_13 = PHI <eResult_44(10), eResult_24(11)>
  # DEBUG eResult => eResult_13
  # DEBUG BEGIN_STMT
  if (eResult_13 == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _8 = pState_27->transferType;
  if (_8 != 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _9 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 5, 0, _9);
  # DEBUG BEGIN_STMT
  _10 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 6, 0, _10);
  # DEBUG BEGIN_STMT
  _11 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 7, 0, _11);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _12 ={v} pState_27->mbs[0].state;
  switch (_12) <default: <L18> [INV], case 0: <L17> [INV], case 1: <L16> [INV]>

  <bb 16> :
<L16>:
  # DEBUG BEGIN_STMT
  pState_27->mbs[0].state ={v} 0;
  # DEBUG BEGIN_STMT
  goto <bb 19>; [INV]

  <bb 17> :
<L17>:
  # DEBUG BEGIN_STMT
  eResult_49 = 0;
  # DEBUG eResult => eResult_49
  # DEBUG BEGIN_STMT
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:
  # DEBUG BEGIN_STMT
  eResult_50 = 1;
  # DEBUG eResult => eResult_50
  # DEBUG BEGIN_STMT

  <bb 19> :
  # eResult_14 = PHI <eResult_13(16), eResult_49(17), eResult_50(18)>
  # DEBUG eResult => eResult_14
  # DEBUG BEGIN_STMT
  _51 = eResult_14;
  timeStart ={v} {CLOBBER};
  return _51;

}


FlexCAN_ProccessEnhancedRxFifo (uint8 u8Instance, uint32 u32TimeoutMs)
{
  uint32 u32intType;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * pState;
  Flexcan_Ip_StatusType eResult;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  <unnamed type> _5;
  unsigned char _6;
  <unnamed type> _7;
  <unnamed type> _8;
  <unnamed type> _9;
  long unsigned int _39;
  Flexcan_Ip_StatusType _46;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_21 = 0;
  # DEBUG eResult => eResult_21
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_22(D);
  pState_24 = Flexcan_Ip_apxState[_1];
  # DEBUG pState => pState_24
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_22(D);
  pBase_25 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_25
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed_27 = 0;
  # DEBUG timeElapsed => timeElapsed_27
  # DEBUG BEGIN_STMT
  _3 = u32TimeoutMs_28(D) * 1000;
  mS2Ticks_30 = OsIf_MicrosToTicks (_3, 0);
  # DEBUG mS2Ticks => mS2Ticks_30
  # DEBUG BEGIN_STMT
  u32intType_31 = 0;
  # DEBUG u32intType => u32intType_31
  # DEBUG BEGIN_STMT
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = pState_24->transferType;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  u32intType_34 = 31;
  # DEBUG u32intType => u32intType_34
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_GetEnhancedRxFIFOStatusFlag (pBase_25, u32intType_13);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerEnhancedRxFIFO (u8Instance_22(D), u32intType_13);

  <bb 7> :
  # DEBUG BEGIN_STMT
  u32intType_37 = u32intType_13 + 4294967295;
  # DEBUG u32intType => u32intType_37

  <bb 8> :
  # u32intType_13 = PHI <u32intType_34(4), u32intType_37(7)>
  # DEBUG u32intType => u32intType_13
  # DEBUG BEGIN_STMT
  if (u32intType_13 > 27)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _39 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_40 = _39 + timeElapsed_12;
  # DEBUG timeElapsed => timeElapsed_40
  # DEBUG BEGIN_STMT
  if (timeElapsed_40 >= mS2Ticks_30)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  eResult_41 = 3;
  # DEBUG eResult => eResult_41
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 11> :
  # timeElapsed_12 = PHI <timeElapsed_27(2), timeElapsed_40(9)>
  # DEBUG timeElapsed => timeElapsed_12
  # DEBUG BEGIN_STMT
  _7 ={v} pState_24->enhancedFifoOutput.state;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # eResult_10 = PHI <eResult_41(10), eResult_21(11)>
  # DEBUG eResult => eResult_10
  # DEBUG BEGIN_STMT
  if (eResult_10 == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _8 = pState_24->transferType;
  if (_8 != 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoIntAll (pBase_25, 0);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _9 ={v} pState_24->enhancedFifoOutput.state;
  switch (_9) <default: <L18> [INV], case 0: <L17> [INV], case 1: <L16> [INV]>

  <bb 16> :
<L16>:
  # DEBUG BEGIN_STMT
  pState_24->enhancedFifoOutput.state ={v} 0;
  # DEBUG BEGIN_STMT
  goto <bb 19>; [INV]

  <bb 17> :
<L17>:
  # DEBUG BEGIN_STMT
  eResult_44 = 0;
  # DEBUG eResult => eResult_44
  # DEBUG BEGIN_STMT
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:
  # DEBUG BEGIN_STMT
  eResult_45 = 1;
  # DEBUG eResult => eResult_45
  # DEBUG BEGIN_STMT

  <bb 19> :
  # eResult_11 = PHI <eResult_10(16), eResult_44(17), eResult_45(18)>
  # DEBUG eResult => eResult_11
  # DEBUG BEGIN_STMT
  _46 = eResult_11;
  timeStart ={v} {CLOBBER};
  return _46;

}


FlexCAN_StartRxMessageEnhancedFifoData (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType eResult;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  <unnamed type> _5;
  <unnamed type> _6;
  unsigned char _7;
  <unnamed type> _8;
  Flexcan_Ip_StatusType _25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_12(D);
  base_14 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_14
  # DEBUG BEGIN_STMT
  _2 = (int) instance_12(D);
  state_15 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_15
  # DEBUG BEGIN_STMT
  eResult_16 = 0;
  # DEBUG eResult => eResult_16
  # DEBUG BEGIN_STMT
  _3 = instance_12(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 ={v} state_15->enhancedFifoOutput.state;
  if (_5 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult_24 = 2;
  # DEBUG eResult => eResult_24
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  state_15->enhancedFifoOutput.state ={v} 1;
  # DEBUG BEGIN_STMT
  state_15->enhancedFifoOutput.pMBmessage = data_19(D);
  # DEBUG BEGIN_STMT
  _6 = state_15->transferType;
  if (_6 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  state_15->enhancedFifoOutput.isPolling = 0;
  # DEBUG BEGIN_STMT
  _7 = state_15->isIntActive;
  if (_7 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoIntAll (base_14, 1);

  <bb 7> :
  # DEBUG BEGIN_STMT
  _8 = state_15->transferType;
  if (_8 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  state_15->enhancedFifoOutput.isPolling = 1;

  <bb 9> :
  # eResult_9 = PHI <eResult_24(3), eResult_16(7), eResult_16(8)>
  # DEBUG eResult => eResult_9
  # DEBUG BEGIN_STMT
  _25 = eResult_9;
  return _25;

}


FlexCAN_CompleteRxMessageEnhancedFifoData (uint8 instance)
{
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  unsigned char _5;
  unsigned char _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_8(D);
  base_10 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_10
  # DEBUG BEGIN_STMT
  _2 = (int) instance_8(D);
  state_11 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_11
  # DEBUG BEGIN_STMT
  _3 = instance_8(D) <= 3;
  _4 = (unsigned char) _3;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsEnhancedRxFifoAvailable (base_10);
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  _6 = state_11->enhancedFifoOutput.isPolling;
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  state_11->enhancedFifoOutput.isPolling = 1;
  # DEBUG BEGIN_STMT
  FlexCAN_SetEnhancedRxFifoIntAll (base_10, 0);

  <bb 4> :
  # DEBUG BEGIN_STMT
  state_11->enhancedFifoOutput.pMBmessage = 0B;
  # DEBUG BEGIN_STMT
  state_11->enhancedFifoOutput.state ={v} 0;
  return;

}


FlexCAN_InitBaudrate (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  unsigned char _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  const struct Flexcan_Ip_TimeSegmentType * _5;
  unsigned char _6;
  const struct Flexcan_Ip_TimeSegmentType * _7;
  long unsigned int _8;
  long unsigned int _9;
  unsigned char _10;
  const struct Flexcan_Ip_TimeSegmentType * _11;
  const struct Flexcan_Ip_TimeSegmentType * _12;
  const struct Flexcan_Ip_TimeSegmentType * _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Flexcan_Ip_pData_16(D)->fd_enable;
  FlexCAN_EnableExtCbt (pBase_17(D), _1);
  # DEBUG BEGIN_STMT
  _2 = Flexcan_Ip_pData_16(D)->enhCbtEnable;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 ={v} pBase_17(D)->CTRL2;
  _4 = _3 | 8192;
  pBase_17(D)->CTRL2 ={v} _4;
  # DEBUG BEGIN_STMT
  _5 = &Flexcan_Ip_pData_16(D)->bitrate;
  FlexCAN_SetEnhancedNominalTimeSegments (pBase_17(D), _5);
  # DEBUG BEGIN_STMT
  _6 = Flexcan_Ip_pData_16(D)->fd_enable;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = &Flexcan_Ip_pData_16(D)->bitrate_cbt;
  FlexCAN_SetEnhancedDataTimeSegments (pBase_17(D), _7);
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 ={v} pBase_17(D)->CTRL2;
  _9 = _8 & 4294959103;
  pBase_17(D)->CTRL2 ={v} _9;
  # DEBUG BEGIN_STMT
  _10 = Flexcan_Ip_pData_16(D)->fd_enable;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _11 = &Flexcan_Ip_pData_16(D)->bitrate;
  FlexCAN_SetExtendedTimeSegments (pBase_17(D), _11);
  # DEBUG BEGIN_STMT
  _12 = &Flexcan_Ip_pData_16(D)->bitrate_cbt;
  FlexCAN_SetFDTimeSegments (pBase_17(D), _12);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _13 = &Flexcan_Ip_pData_16(D)->bitrate;
  FlexCAN_SetTimeSegments (pBase_17(D), _13);

  <bb 8> :
  return;

}


FlexCAN_InitController (uint8 Instance, struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  unsigned char _5;
  long unsigned int _6;
  Flexcan_Ip_StatusType _32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_11 = 0;
  # DEBUG eResult => eResult_11
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_IsEnabled (pBase_13(D));
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult_16 = FlexCAN_EnterFreezeMode (pBase_13(D));
  # DEBUG eResult => eResult_16
  # DEBUG BEGIN_STMT
  if (eResult_16 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  eResult_18 = FlexCAN_Disable (pBase_13(D));
  # DEBUG eResult => eResult_18

  <bb 5> :
  # eResult_7 = PHI <eResult_11(2), eResult_16(3), eResult_18(4)>
  # DEBUG eResult => eResult_7
  # DEBUG BEGIN_STMT
  if (eResult_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 ={v} pBase_13(D)->MCR;
  _3 = _2 & 2147483647;
  pBase_13(D)->MCR ={v} _3;
  # DEBUG BEGIN_STMT
  eResult_21 = FlexCAN_Init (pBase_13(D));
  # DEBUG eResult => eResult_21
  # DEBUG BEGIN_STMT
  if (eResult_21 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase_13(D));
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase_13(D));
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_DisableMemErrorDetection (pBase_13(D));
  # DEBUG BEGIN_STMT
  _4 = Flexcan_Ip_pData_23(D)->fd_enable;
  _5 = Flexcan_Ip_pData_23(D)->bitRateSwitch;
  FlexCAN_SetFDEnabled (pBase_13(D), _4, _5);
  # DEBUG BEGIN_STMT
  _6 = Flexcan_Ip_pData_23(D)->ctrlOptions;
  FlexCAN_ConfigCtrlOptions (pBase_13(D), _6);
  # DEBUG BEGIN_STMT
  FlexCAN_ResetImaskBuff (Instance_26(D));
  # DEBUG BEGIN_STMT
  eResult_29 = FlexCAN_InitCtroll (pBase_13(D), Flexcan_Ip_pData_23(D));
  # DEBUG eResult => eResult_29

  <bb 9> :
  # eResult_8 = PHI <eResult_7(5), eResult_21(7), eResult_29(8)>
  # DEBUG eResult => eResult_8
  # DEBUG BEGIN_STMT
  _32 = eResult_8;
  return _32;

}


FlexCAN_InitCtroll (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  <unnamed type> _1;
  const struct Flexcan_Ip_PayloadSizeType * _2;
  long unsigned int _3;
  Flexcan_Ip_StatusType _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_7 = 0;
  # DEBUG eResult => eResult_7
  # DEBUG BEGIN_STMT
  _1 = Flexcan_Ip_pData_9(D)->flexcanMode;
  if (_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetSelfReception (pBase_10(D), 0);

  <bb 4> :
  # DEBUG BEGIN_STMT
  eResult_13 = FlexCAN_InitRxFifo (pBase_10(D), Flexcan_Ip_pData_9(D));
  # DEBUG eResult => eResult_13
  # DEBUG BEGIN_STMT
  if (eResult_13 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase_10(D));
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase_10(D));
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = &Flexcan_Ip_pData_9(D)->payload;
  FlexCAN_SetPayloadSize (pBase_10(D), _2);
  # DEBUG BEGIN_STMT
  _3 = Flexcan_Ip_pData_9(D)->max_num_mb;
  eResult_16 = FlexCAN_SetMaxMsgBuffNum (pBase_10(D), _3);
  # DEBUG eResult => eResult_16
  # DEBUG BEGIN_STMT
  if (eResult_16 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase_10(D));
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase_10(D));

  <bb 8> :
  # eResult_4 = PHI <eResult_13(5), eResult_16(6), eResult_16(7)>
  # DEBUG eResult => eResult_4
  # DEBUG BEGIN_STMT
  _21 = eResult_4;
  return _21;

}


FlexCAN_InitRxFifo (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  unsigned char _1;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  Flexcan_Ip_StatusType _19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_11 = 0;
  # DEBUG eResult => eResult_11
  # DEBUG BEGIN_STMT
  _1 = Flexcan_Ip_pData_13(D)->is_rx_fifo_needed;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Flexcan_Ip_pData_13(D)->num_id_filters;
  eResult_16 = FlexCAN_EnableRxFifo (pBase_14(D), _2);
  # DEBUG eResult => eResult_16

  <bb 4> :
  # eResult_7 = PHI <eResult_11(2), eResult_16(3)>
  # DEBUG eResult => eResult_7
  # DEBUG BEGIN_STMT
  if (eResult_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _3 = Flexcan_Ip_pData_13(D)->is_enhanced_rx_fifo_needed;
  if (_3 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _4 = Flexcan_Ip_pData_13(D)->num_enhanced_std_id_filters;
  _5 = Flexcan_Ip_pData_13(D)->num_enhanced_ext_id_filters;
  _6 = Flexcan_Ip_pData_13(D)->num_enhanced_watermark;
  eResult_18 = FlexCAN_EnableEnhancedRxFifo (pBase_14(D), _4, _5, _6);
  # DEBUG eResult => eResult_18

  <bb 7> :
  # eResult_8 = PHI <eResult_7(4), eResult_7(5), eResult_18(6)>
  # DEBUG eResult => eResult_8
  # DEBUG BEGIN_STMT
  _19 = eResult_8;
  return _19;

}


FlexCAN_SetRegDefaultVal (struct FLEXCAN_Type * base)
{
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_IsEnhancedRxFifoAvailable (base_14(D));
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  base_14(D)->ERFSR ={v} 4160749568;
  # DEBUG BEGIN_STMT
  base_14(D)->ERFIER ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->ERFCR ={v} 0;

  <bb 4> :
  # DEBUG BEGIN_STMT
  base_14(D)->FDCBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->FDCTRL ={v} 2147500288;
  # DEBUG BEGIN_STMT
  base_14(D)->ERRSR ={v} 851981;
  # DEBUG BEGIN_STMT
  base_14(D)->ERRIPPR ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->ERRIDPR ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->ERRIAR ={v} 0;
  # DEBUG BEGIN_STMT
  _2 ={v} base_14(D)->CTRL2;
  _3 = _2 | 536870912;
  base_14(D)->CTRL2 ={v} _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_14(D)->MECR;
  _5 = _4 & 2147483647;
  base_14(D)->MECR ={v} _5;
  # DEBUG BEGIN_STMT
  base_14(D)->MECR ={v} 786560;
  # DEBUG BEGIN_STMT
  _6 ={v} base_14(D)->MECR;
  _7 = _6 | 2147483648;
  base_14(D)->MECR ={v} _7;
  # DEBUG BEGIN_STMT
  _8 ={v} base_14(D)->CTRL2;
  _9 = _8 & 3758096383;
  base_14(D)->CTRL2 ={v} _9;
  # DEBUG BEGIN_STMT
  _10 = FlexCAN_GetMaxMbNum (base_14(D));
  if (_10 > 32)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  base_14(D)->IFLAG2 ={v} 4294967295;
  # DEBUG BEGIN_STMT
  base_14(D)->IMASK2 ={v} 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  base_14(D)->IFLAG1 ={v} 4294967295;
  # DEBUG BEGIN_STMT
  base_14(D)->IMASK1 ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->CBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->CTRL2 ={v} 1048576;
  # DEBUG BEGIN_STMT
  base_14(D)->ESR1 ={v} 241670;
  # DEBUG BEGIN_STMT
  base_14(D)->ECR ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->TIMER ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->CTRL1 ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->EPRS ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->ENCBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->EDCBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->ETDC ={v} 0;
  # DEBUG BEGIN_STMT
  base_14(D)->MCR ={v} 3633315855;
  return;

}


FlexCAN_GetEnhancedRxFIFOIntStatusFlag (const struct FLEXCAN_Type * base, uint32 intFlag)
{
  long unsigned int _1;
  unsigned char _2;
  int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned char _7;
  int _8;
  int _9;
  long unsigned int _10;
  uint8 _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_12(D)->ERFIER;
  _2 = (unsigned char) intFlag_13(D);
  _3 = (int) _2;
  _4 = _3 & 31;
  _5 = 1 << _4;
  _6 = _1 & _5;
  _7 = (unsigned char) intFlag_13(D);
  _8 = (int) _7;
  _9 = _8 & 31;
  _10 = _6 >> _9;
  _14 = (uint8) _10;
  return _14;

}


FlexCAN_ClearEnhancedRxFifoIntStatusFlag (struct FLEXCAN_Type * base, uint32 intFlag)
{
  long unsigned int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = 1 << intFlag_2(D);
  base_4(D)->ERFSR ={v} _1;
  return;

}


FlexCAN_GetEnhancedRxFIFOStatusFlag (const struct FLEXCAN_Type * base, uint32 intFlag)
{
  long unsigned int _1;
  unsigned char _2;
  int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned char _7;
  int _8;
  int _9;
  long unsigned int _10;
  uint8 _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_12(D)->ERFSR;
  _2 = (unsigned char) intFlag_13(D);
  _3 = (int) _2;
  _4 = _3 & 31;
  _5 = 1 << _4;
  _6 = _1 & _5;
  _7 = (unsigned char) intFlag_13(D);
  _8 = (int) _7;
  _9 = _8 & 31;
  _10 = _6 >> _9;
  _14 = (uint8) _10;
  return _14;

}


FlexCAN_SetEnhancedRxFifoIntAll (struct FLEXCAN_Type * base, boolean enable)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (enable_2(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  base_4(D)->ERFIER ={v} 4026531840;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  base_4(D)->ERFIER ={v} 0;

  <bb 5> :
  return;

}


FlexCAN_IsEnhancedRxFifoEnabled (const struct FLEXCAN_Type * base)
{
  long unsigned int _1;
  signed int _2;
  boolean iftmp.7_3;
  boolean iftmp.7_6;
  boolean iftmp.7_7;
  boolean _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_5(D)->ERFCR;
  _2 = (signed int) _1;
  if (_2 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7_7 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7_6 = 0;

  <bb 5> :
  # iftmp.7_3 = PHI <iftmp.7_7(3), iftmp.7_6(4)>
  _8 = iftmp.7_3;
  return _8;

}


FlexCAN_SetRxMaskType (struct FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (type_6(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_8(D)->MCR;
  _2 = _1 & 4294901759;
  base_8(D)->MCR ={v} _2;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 ={v} base_8(D)->MCR;
  _4 = _3 | 65536;
  base_8(D)->MCR ={v} _4;

  <bb 5> :
  return;

}


FlexCAN_SetTxArbitrationStartDelay (struct FLEXCAN_Type * base, uint8 tasd)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_8(D)->CTRL2;
  _2 = _1 & 4278714367;
  _3 = (long unsigned int) tasd_9(D);
  _4 = _3 << 19;
  _5 = _4 & 16252928;
  _6 = _2 | _5;
  base_8(D)->CTRL2 ={v} _6;
  return;

}


FlexCAN_IsFreezeMode (const struct FLEXCAN_Type * base)
{
  long unsigned int _1;
  long unsigned int _2;
  boolean iftmp.8_3;
  boolean iftmp.8_6;
  boolean iftmp.8_7;
  boolean _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_5(D)->MCR;
  _2 = _1 & 16777216;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.8_7 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.8_6 = 0;

  <bb 5> :
  # iftmp.8_3 = PHI <iftmp.8_7(3), iftmp.8_6(4)>
  _8 = iftmp.8_3;
  return _8;

}


FlexCAN_SetRxIndividualMask (struct FLEXCAN_Type * base, uint32 msgBuffIdx, uint32 mask)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  base_2(D)->RXIMR[msgBuffIdx_3(D)] ={v} mask_4(D);
  return;

}


FlexCAN_SetRxMsgBuffGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  base_2(D)->RXMGMASK ={v} Mask_3(D);
  return;

}


FlexCAN_GetMsgBuffIntStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 mask;
  uint8 flag;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  unsigned char _10;
  uint8 _20;

  <bb 2> :
  # DEBUG BEGIN_STMT
  flag_12 = 0;
  # DEBUG flag => flag_12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_13(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  mask_18 ={v} base_15(D)->IMASK1;
  # DEBUG mask => mask_18
  # DEBUG BEGIN_STMT
  _1 ={v} base_15(D)->IFLAG1;
  _2 = mask_18 & _1;
  _3 = msgBuffIdx_13(D) & 31;
  _4 = _2 >> _3;
  _5 = (unsigned char) _4;
  flag_19 = _5 & 1;
  # DEBUG flag => flag_19
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_13(D) <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  mask_16 ={v} base_15(D)->IMASK2;
  # DEBUG mask => mask_16
  # DEBUG BEGIN_STMT
  _6 ={v} base_15(D)->IFLAG2;
  _7 = mask_16 & _6;
  _8 = msgBuffIdx_13(D) & 31;
  _9 = _7 >> _8;
  _10 = (unsigned char) _9;
  flag_17 = _10 & 1;
  # DEBUG flag => flag_17

  <bb 6> :
  # flag_11 = PHI <flag_19(3), flag_12(4), flag_17(5)>
  # DEBUG flag => flag_11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _20 = flag_11;
  return _20;

}


RxFifoOcuppiedLastMsgBuff (uint32 x)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  uint32 _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = x_4(D) + 1;
  _2 = _1 * 8;
  _3 = _2 / 4;
  _5 = _3 + 5;
  return _5;

}


FlexCAN_IsListenOnlyModeEnabled (const struct FLEXCAN_Type * base)
{
  long unsigned int _1;
  long unsigned int _2;
  boolean iftmp.5_3;
  boolean iftmp.5_6;
  boolean iftmp.5_7;
  boolean _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_5(D)->CTRL1;
  _2 = _1 & 8;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5_7 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5_6 = 0;

  <bb 5> :
  # iftmp.5_3 = PHI <iftmp.5_7(3), iftmp.5_6(4)>
  _8 = iftmp.5_3;
  return _8;

}


FlexCAN_IsFDEnabled (const struct FLEXCAN_Type * base)
{
  long unsigned int _1;
  long unsigned int _2;
  _Bool _3;
  boolean _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_5(D)->MCR;
  _2 = _1 & 2048;
  _3 = _2 != 0;
  _6 = (boolean) _3;
  return _6;

}


FlexCAN_SetSelfReception (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.3_4;
  long unsigned int iftmp.3_8;
  long unsigned int iftmp.3_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_6(D)->MCR;
  _2 = _1 & 4294836223;
  if (enable_7(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.3_9 = 131072;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3_8 = 0;

  <bb 5> :
  # iftmp.3_4 = PHI <iftmp.3_9(3), iftmp.3_8(4)>
  _3 = iftmp.3_4 | _2;
  base_6(D)->MCR ={v} _3;
  return;

}


FlexCAN_EnableExtCbt (struct FLEXCAN_Type * base, boolean enableCBT)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.4_4;
  long unsigned int iftmp.4_8;
  long unsigned int iftmp.4_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_6(D)->CBT;
  _2 = _1 & 2147483647;
  if (enableCBT_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.4_9 = 2147483648;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4_8 = 0;

  <bb 5> :
  # iftmp.4_4 = PHI <iftmp.4_9(3), iftmp.4_8(4)>
  _3 = iftmp.4_4 | _2;
  base_6(D)->CBT ={v} _3;
  return;

}


FlexCAN_EnhCbtEnable (struct FLEXCAN_Type * base, boolean enableCBT)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.13_4;
  long unsigned int iftmp.13_8;
  long unsigned int iftmp.13_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_6(D)->CTRL2;
  _2 = _1 & 4294959103;
  if (enableCBT_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.13_9 = 8192;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.13_8 = 0;

  <bb 5> :
  # iftmp.13_4 = PHI <iftmp.13_9(3), iftmp.13_8(4)>
  _3 = iftmp.13_4 | _2;
  base_6(D)->CTRL2 ={v} _3;
  return;

}


FlexCAN_IsEnhCbtEnabled (const struct FLEXCAN_Type * pBase)
{
  long unsigned int _1;
  long unsigned int _2;
  _Bool _3;
  boolean _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} pBase_5(D)->CTRL2;
  _2 = _1 & 8192;
  _3 = _2 != 0;
  _6 = (boolean) _3;
  return _6;

}


FlexCAN_IsExCbtEnabled (const struct FLEXCAN_Type * pBase)
{
  long unsigned int _1;
  signed int _2;
  _Bool _3;
  boolean _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} pBase_5(D)->CBT;
  _2 = (signed int) _1;
  _3 = _2 < 0;
  _6 = (boolean) _3;
  return _6;

}


FlexCAN_GetFDTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_16(D)->FDCBT;
  _2 = _1 >> 20;
  _3 = _2 & 1023;
  timeSeg_17(D)->preDivider = _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_16(D)->FDCBT;
  _5 = _4 >> 10;
  _6 = _5 & 31;
  timeSeg_17(D)->propSeg = _6;
  # DEBUG BEGIN_STMT
  _7 ={v} base_16(D)->FDCBT;
  _8 = _7 >> 5;
  _9 = _8 & 7;
  timeSeg_17(D)->phaseSeg1 = _9;
  # DEBUG BEGIN_STMT
  _10 ={v} base_16(D)->FDCBT;
  _11 = _10 & 7;
  timeSeg_17(D)->phaseSeg2 = _11;
  # DEBUG BEGIN_STMT
  _12 ={v} base_16(D)->FDCBT;
  _13 = _12 >> 16;
  _14 = _13 & 7;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}


FlexCAN_GetTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_16(D)->CTRL1;
  _2 = _1 >> 24;
  _3 = _2 & 255;
  timeSeg_17(D)->preDivider = _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_16(D)->CTRL1;
  _5 = _4 & 7;
  timeSeg_17(D)->propSeg = _5;
  # DEBUG BEGIN_STMT
  _6 ={v} base_16(D)->CTRL1;
  _7 = _6 >> 19;
  _8 = _7 & 7;
  timeSeg_17(D)->phaseSeg1 = _8;
  # DEBUG BEGIN_STMT
  _9 ={v} base_16(D)->CTRL1;
  _10 = _9 >> 16;
  _11 = _10 & 7;
  timeSeg_17(D)->phaseSeg2 = _11;
  # DEBUG BEGIN_STMT
  _12 ={v} base_16(D)->CTRL1;
  _13 = _12 >> 22;
  _14 = _13 & 3;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}


FlexCAN_GetExtendedTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_16(D)->CBT;
  _2 = _1 >> 21;
  _3 = _2 & 1023;
  timeSeg_17(D)->preDivider = _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_16(D)->CBT;
  _5 = _4 >> 10;
  _6 = _5 & 63;
  timeSeg_17(D)->propSeg = _6;
  # DEBUG BEGIN_STMT
  _7 ={v} base_16(D)->CBT;
  _8 = _7 >> 5;
  _9 = _8 & 31;
  timeSeg_17(D)->phaseSeg1 = _9;
  # DEBUG BEGIN_STMT
  _10 ={v} base_16(D)->CBT;
  _11 = _10 & 31;
  timeSeg_17(D)->phaseSeg2 = _11;
  # DEBUG BEGIN_STMT
  _12 ={v} base_16(D)->CBT;
  _13 = _12 >> 16;
  _14 = _13 & 31;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}


FlexCAN_GetEnhancedDataTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  _Bool _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg_14(D) != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  timeSeg_14(D)->propSeg = 0;
  # DEBUG BEGIN_STMT
  _3 ={v} base_18(D)->EDCBT;
  _4 = _3 & 31;
  timeSeg_14(D)->phaseSeg1 = _4;
  # DEBUG BEGIN_STMT
  _5 ={v} base_18(D)->EDCBT;
  _6 = _5 >> 12;
  _7 = _6 & 15;
  timeSeg_14(D)->phaseSeg2 = _7;
  # DEBUG BEGIN_STMT
  _8 ={v} base_18(D)->EDCBT;
  _9 = _8 >> 22;
  _10 = _9 & 15;
  timeSeg_14(D)->rJumpwidth = _10;
  # DEBUG BEGIN_STMT
  _11 ={v} base_18(D)->EPRS;
  _12 = _11 >> 16;
  _13 = _12 & 1023;
  timeSeg_14(D)->preDivider = _13;
  return;

}


FlexCAN_SetEnhancedDataTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  _Bool _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg_26(D) != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 ={v} base_29(D)->EDCBT;
  _4 = _3 & 4231991264;
  base_29(D)->EDCBT ={v} _4;
  # DEBUG BEGIN_STMT
  _5 ={v} base_29(D)->EDCBT;
  _6 = timeSeg_26(D)->phaseSeg1;
  _7 = timeSeg_26(D)->propSeg;
  _8 = _6 + _7;
  _9 = _8 & 31;
  _10 = timeSeg_26(D)->phaseSeg2;
  _11 = _10 << 12;
  _12 = _11 & 65535;
  _13 = _9 | _12;
  _14 = timeSeg_26(D)->rJumpwidth;
  _15 = _14 << 22;
  _16 = _15 & 62914560;
  _17 = _13 | _16;
  _18 = _5 | _17;
  base_29(D)->EDCBT ={v} _18;
  # DEBUG BEGIN_STMT
  _19 ={v} base_29(D)->EPRS;
  _20 = _19 & 4227923967;
  base_29(D)->EPRS ={v} _20;
  # DEBUG BEGIN_STMT
  _21 ={v} base_29(D)->EPRS;
  _22 = timeSeg_26(D)->preDivider;
  _23 = _22 << 16;
  _24 = _23 & 67043328;
  _25 = _21 | _24;
  base_29(D)->EPRS ={v} _25;
  return;

}


FlexCAN_GetEnhancedNominalTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  timeSeg_12(D)->propSeg = 0;
  # DEBUG BEGIN_STMT
  _1 ={v} base_14(D)->EPRS;
  _2 = _1 & 1023;
  timeSeg_12(D)->preDivider = _2;
  # DEBUG BEGIN_STMT
  _3 ={v} base_14(D)->ENCBT;
  _4 = _3 & 255;
  timeSeg_12(D)->phaseSeg1 = _4;
  # DEBUG BEGIN_STMT
  _5 ={v} base_14(D)->ENCBT;
  _6 = _5 >> 12;
  _7 = _6 & 127;
  timeSeg_12(D)->phaseSeg2 = _7;
  # DEBUG BEGIN_STMT
  _8 ={v} base_14(D)->ENCBT;
  _9 = _8 >> 22;
  _10 = _9 & 127;
  timeSeg_12(D)->rJumpwidth = _10;
  return;

}


FlexCAN_SetEnhancedNominalTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  _Bool _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg_26(D) != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 ={v} base_29(D)->ENCBT;
  _4 = _3 & 3761770240;
  base_29(D)->ENCBT ={v} _4;
  # DEBUG BEGIN_STMT
  _5 ={v} base_29(D)->ENCBT;
  _6 = timeSeg_26(D)->phaseSeg1;
  _7 = timeSeg_26(D)->propSeg;
  _8 = _6 + _7;
  _9 = _8 + 1;
  _10 = _9 & 255;
  _11 = timeSeg_26(D)->phaseSeg2;
  _12 = _11 << 12;
  _13 = _12 & 520192;
  _14 = _10 | _13;
  _15 = timeSeg_26(D)->rJumpwidth;
  _16 = _15 << 22;
  _17 = _16 & 532676608;
  _18 = _14 | _17;
  _19 = _5 | _18;
  base_29(D)->ENCBT ={v} _19;
  # DEBUG BEGIN_STMT
  _20 ={v} base_29(D)->EPRS;
  _21 = _20 & 4294966272;
  base_29(D)->EPRS ={v} _21;
  # DEBUG BEGIN_STMT
  _22 ={v} base_29(D)->EPRS;
  _23 = timeSeg_26(D)->preDivider;
  _24 = _23 & 1023;
  _25 = _22 | _24;
  base_29(D)->EPRS ={v} _25;
  return;

}


FlexCAN_SetExtendedTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  _Bool _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg_25(D) != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 ={v} base_28(D)->CBT;
  _4 = _3 & 2147483648;
  base_28(D)->CBT ={v} _4;
  # DEBUG BEGIN_STMT
  _5 ={v} base_28(D)->CBT;
  _6 = timeSeg_25(D)->propSeg;
  _7 = _6 << 10;
  _8 = _7 & 65535;
  _9 = timeSeg_25(D)->phaseSeg2;
  _10 = _9 & 31;
  _11 = _8 | _10;
  _12 = timeSeg_25(D)->phaseSeg1;
  _13 = _12 << 5;
  _14 = _13 & 992;
  _15 = _11 | _14;
  _16 = timeSeg_25(D)->preDivider;
  _17 = _16 << 21;
  _18 = _17 & 2145386496;
  _19 = _15 | _18;
  _20 = timeSeg_25(D)->rJumpwidth;
  _21 = _20 << 16;
  _22 = _21 & 2031616;
  _23 = _19 | _22;
  _24 = _5 | _23;
  base_28(D)->CBT ={v} _24;
  return;

}


FlexCAN_SetTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  _Bool _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg_24(D) != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 ={v} base_27(D)->CTRL1;
  _4 = _3 & 65528;
  base_27(D)->CTRL1 ={v} _4;
  # DEBUG BEGIN_STMT
  _5 ={v} base_27(D)->CTRL1;
  _6 = timeSeg_24(D)->propSeg;
  _7 = _6 & 7;
  _8 = timeSeg_24(D)->phaseSeg2;
  _9 = _8 << 16;
  _10 = _9 & 458752;
  _11 = _7 | _10;
  _12 = timeSeg_24(D)->phaseSeg1;
  _13 = _12 << 19;
  _14 = _13 & 3670016;
  _15 = _11 | _14;
  _16 = timeSeg_24(D)->preDivider;
  _17 = _16 << 24;
  _18 = _15 | _17;
  _19 = timeSeg_24(D)->rJumpwidth;
  _20 = _19 << 22;
  _21 = _20 & 12582912;
  _22 = _18 | _21;
  _23 = _5 | _22;
  base_27(D)->CTRL1 ={v} _23;
  return;

}


FlexCAN_SetFDTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  _Bool _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg_25(D) != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 ={v} base_28(D)->FDCBT;
  _4 = _3 & 3221783320;
  base_28(D)->FDCBT ={v} _4;
  # DEBUG BEGIN_STMT
  _5 ={v} base_28(D)->FDCBT;
  _6 = timeSeg_25(D)->propSeg;
  _7 = _6 << 10;
  _8 = _7 & 31744;
  _9 = timeSeg_25(D)->phaseSeg2;
  _10 = _9 & 7;
  _11 = _8 | _10;
  _12 = timeSeg_25(D)->phaseSeg1;
  _13 = _12 << 5;
  _14 = _13 & 255;
  _15 = _11 | _14;
  _16 = timeSeg_25(D)->preDivider;
  _17 = _16 << 20;
  _18 = _17 & 1072693248;
  _19 = _15 | _18;
  _20 = timeSeg_25(D)->rJumpwidth;
  _21 = _20 << 16;
  _22 = _21 & 458752;
  _23 = _19 | _22;
  _24 = _5 | _23;
  base_28(D)->FDCBT ={v} _24;
  return;

}


FlexCAN_GetBuffStatusImask (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 u32Imask;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  uint8 _18;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32Imask_12 = 0;
  # DEBUG u32Imask => u32Imask_12
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_13(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_15(D)->IMASK1;
  _2 = msgBuffIdx_13(D) & 31;
  _3 = 1 << _2;
  _4 = _1 & _3;
  _5 = msgBuffIdx_13(D) & 31;
  u32Imask_17 = _4 >> _5;
  # DEBUG u32Imask => u32Imask_17
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_13(D) <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 ={v} base_15(D)->IMASK2;
  _7 = msgBuffIdx_13(D) & 31;
  _8 = 1 << _7;
  _9 = _6 & _8;
  _10 = msgBuffIdx_13(D) & 31;
  u32Imask_16 = _9 >> _10;
  # DEBUG u32Imask => u32Imask_16

  <bb 6> :
  # u32Imask_11 = PHI <u32Imask_17(3), u32Imask_12(4), u32Imask_16(5)>
  # DEBUG u32Imask => u32Imask_11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _18 = (uint8) u32Imask_11;
  return _18;

}


FlexCAN_GetBuffStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  uint8 _18;

  <bb 2> :
  # DEBUG BEGIN_STMT
  flag_12 = 0;
  # DEBUG flag => flag_12
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_13(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_15(D)->IFLAG1;
  _2 = msgBuffIdx_13(D) & 31;
  _3 = 1 << _2;
  _4 = _1 & _3;
  _5 = msgBuffIdx_13(D) & 31;
  flag_17 = _4 >> _5;
  # DEBUG flag => flag_17
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_13(D) <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 ={v} base_15(D)->IFLAG2;
  _7 = msgBuffIdx_13(D) & 31;
  _8 = 1 << _7;
  _9 = _6 & _8;
  _10 = msgBuffIdx_13(D) & 31;
  flag_16 = _9 >> _10;
  # DEBUG flag => flag_16

  <bb 6> :
  # flag_11 = PHI <flag_17(3), flag_12(4), flag_16(5)>
  # DEBUG flag => flag_11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _18 = (uint8) flag_11;
  return _18;

}


FlexCAN_ClearMsgBuffIntStatusFlag (struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  long unsigned int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = msgBuffIdx_3(D) & 31;
  flag_4 = 1 << _1;
  # DEBUG flag => flag_4
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_3(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  base_6(D)->IFLAG1 ={v} flag_4;
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_3(D) <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  base_6(D)->IFLAG2 ={v} flag_4;

  <bb 6> :
  # DEBUG BEGIN_STMT
  return;

}


FlexCAN_UnlockRxMsgBuff (const struct FLEXCAN_Type * base)
{
  long unsigned int vol.6_3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  vol.6_3 ={v} base_2(D)->TIMER;
  return;

}


FlexCAN_SetListenOnlyMode (struct FLEXCAN_Type * base, boolean enableListenOnly)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.20_4;
  long unsigned int iftmp.20_8;
  long unsigned int iftmp.20_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_6(D)->CTRL1;
  _2 = _1 & 4294967287;
  if (enableListenOnly_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.20_9 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.20_8 = 0;

  <bb 5> :
  # iftmp.20_4 = PHI <iftmp.20_9(3), iftmp.20_8(4)>
  _3 = iftmp.20_4 | _2;
  base_6(D)->CTRL1 ={v} _3;
  return;

}


FlexCAN_SetFDEnabled (struct FLEXCAN_Type * base, boolean enableFD, boolean enableBRS)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int iftmp.1_9;
  long unsigned int iftmp.2_10;
  long unsigned int iftmp.1_14;
  long unsigned int iftmp.1_15;
  long unsigned int iftmp.2_18;
  long unsigned int iftmp.2_19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_12(D)->MCR;
  _2 = _1 & 4294965247;
  if (enableFD_13(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.1_15 = 2048;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1_14 = 0;

  <bb 5> :
  # iftmp.1_9 = PHI <iftmp.1_15(3), iftmp.1_14(4)>
  _3 = iftmp.1_9 | _2;
  base_12(D)->MCR ={v} _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_12(D)->FDCTRL;
  _5 = _4 & 2147483647;
  if (enableBRS_17(D) != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.2_19 = 2147483648;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.2_18 = 0;

  <bb 8> :
  # iftmp.2_10 = PHI <iftmp.2_19(6), iftmp.2_18(7)>
  _6 = iftmp.2_10 | _5;
  base_12(D)->FDCTRL ={v} _6;
  # DEBUG BEGIN_STMT
  _7 ={v} base_12(D)->FDCTRL;
  _8 = _7 & 4294926591;
  base_12(D)->FDCTRL ={v} _8;
  return;

}


FlexCAN_DisableMemErrorDetection (struct FLEXCAN_Type * base)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_8(D)->CTRL2;
  _2 = _1 | 536870912;
  base_8(D)->CTRL2 ={v} _2;
  # DEBUG BEGIN_STMT
  base_8(D)->MECR ={v} 0;
  # DEBUG BEGIN_STMT
  base_8(D)->MECR ={v} 0;
  # DEBUG BEGIN_STMT
  _3 ={v} base_8(D)->MECR;
  _4 = _3 | 256;
  base_8(D)->MECR ={v} _4;
  # DEBUG BEGIN_STMT
  _5 ={v} base_8(D)->CTRL2;
  _6 = _5 & 3758096383;
  base_8(D)->CTRL2 ={v} _6;
  return;

}


FlexCAN_IsEnabled (const struct FLEXCAN_Type * pBase)
{
  long unsigned int _1;
  signed int _2;
  _Bool _3;
  boolean _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} pBase_5(D)->MCR;
  _2 = (signed int) _1;
  _3 = _2 >= 0;
  _6 = (boolean) _3;
  return _6;

}


FlexCAN_SetEnhancedTDCOffset (struct FLEXCAN_Type * base, boolean enable, uint8 offset)
{
  uint32 tmp;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  tmp_7 ={v} base_6(D)->ETDC;
  # DEBUG tmp => tmp_7
  # DEBUG BEGIN_STMT
  tmp_8 = tmp_7 & 2139160575;
  # DEBUG tmp => tmp_8
  # DEBUG BEGIN_STMT
  if (enable_9(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  tmp_10 = tmp_8 | 2147483648;
  # DEBUG tmp => tmp_10
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) offset_11(D);
  _2 = _1 << 16;
  _3 = _2 & 8323072;
  tmp_12 = tmp_10 | _3;
  # DEBUG tmp => tmp_12

  <bb 4> :
  # tmp_4 = PHI <tmp_8(2), tmp_12(3)>
  # DEBUG tmp => tmp_4
  # DEBUG BEGIN_STMT
  base_6(D)->ETDC ={v} tmp_4;
  return;

}


FlexCAN_SetTDCOffset (struct FLEXCAN_Type * base, boolean enable, uint8 offset)
{
  uint32 tmp;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  tmp_7 ={v} base_6(D)->FDCTRL;
  # DEBUG tmp => tmp_7
  # DEBUG BEGIN_STMT
  tmp_8 = tmp_7 & 4294926591;
  # DEBUG tmp => tmp_8
  # DEBUG BEGIN_STMT
  if (enable_9(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  tmp_10 = tmp_8 | 32768;
  # DEBUG tmp => tmp_10
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) offset_11(D);
  _2 = _1 << 8;
  _3 = _2 & 7936;
  tmp_12 = tmp_10 | _3;
  # DEBUG tmp => tmp_12

  <bb 4> :
  # tmp_4 = PHI <tmp_8(2), tmp_12(3)>
  # DEBUG tmp => tmp_4
  # DEBUG BEGIN_STMT
  base_6(D)->FDCTRL ={v} tmp_4;
  return;

}


FlexCAN_SetRxFifoGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  base_2(D)->RXFGMASK ={v} Mask_3(D);
  return;

}


DevAssert (volatile boolean x)
{
  unsigned char x.0_1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  x.0_1 ={v} x;
  if (x.0_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  __asm__ __volatile__("BKPT #0");
  # DEBUG BEGIN_STMT
  goto <bb 3>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


