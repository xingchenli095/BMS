Clock_Ip_SetRtcRtccClksel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config->Value;
  _2 = Clock_Ip_au16SelectorEntryRtcHardwareValue[_1];
  SelectorValue = (uint32) _2;
  # DEBUG BEGIN_STMT
  _3 = 1076396032B;
  RegValue = _3->RTCC;
  # DEBUG BEGIN_STMT
  RegValue = RegValue & 4294955007;
  # DEBUG BEGIN_STMT
  _4 = SelectorValue << 12;
  _5 = _4 & 12288;
  RegValue = RegValue | _5;
  # DEBUG BEGIN_STMT
  _6 = 1076396032B;
  _6->RTCC = RegValue;
  return;

}


Clock_Ip_SetRtcRtccClksel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_SetRtcRtccClksel_TrustedCall (Config);
  return;

}


Clock_Ip_SetCgmXCscCssCsGrip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorValue;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance = (uint32) _2;
  # DEBUG BEGIN_STMT
  _3 = Config->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex = (uint32) _4;
  # DEBUG BEGIN_STMT
  _5 = Config->Value;
  _6 = Clock_Ip_au16SelectorEntryHardwareValue[_5];
  SelectorValue = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->Name;
  _8 = Clock_Ip_au8ClockFeatures[_7][2];
  _9 = (int) _8;
  SelectorMask = Clock_Ip_axFeatureExtensions[_9].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _10 = Config->Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][2];
  _12 = (int) _11;
  SelectorShift = Clock_Ip_axFeatureExtensions[_12].SelectorValueShift;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _14 = _13->CSC;
  _15 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _16 = _14 | 12;
  _15->CSC = _16;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.0_17 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_17);
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _19 = _18->CSS;
  _20 = _19 & 131072;
  if (_20 == 131072)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  if (TimeoutOccurred == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _21 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  RegValue = _21->CSC;
  # DEBUG BEGIN_STMT
  _22 = ~SelectorMask;
  RegValue = RegValue & _22;
  # DEBUG BEGIN_STMT
  _23 = SelectorValue << SelectorShift;
  _24 = SelectorMask & _23;
  RegValue = RegValue | _24;
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _25->CSC = RegValue;
  # DEBUG BEGIN_STMT
  _26 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _27 = _26->CSC;
  _28 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _29 = _27 & 4294967283;
  _28->CSC = _29;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.1_30 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_30);
  # DEBUG BEGIN_STMT
  _31 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _32 = _31->CSS;
  _33 = _32 & 131072;
  if (_33 != 131072)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  if (TimeoutOccurred == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _34 = Config->Name;
  Clock_Ip_ReportClockErrors (3, _34);
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _35 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _35);

  <bb 12> :
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_ResetCgmXCscCssCsGrip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorResetValue;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance = (uint32) _2;
  # DEBUG BEGIN_STMT
  _3 = Config->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex = (uint32) _4;
  # DEBUG BEGIN_STMT
  _5 = Config->Name;
  _6 = Clock_Ip_au8SoftwareMuxResetValue[_5];
  SelectorResetValue = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->Name;
  _8 = Clock_Ip_au8ClockFeatures[_7][2];
  _9 = (int) _8;
  SelectorMask = Clock_Ip_axFeatureExtensions[_9].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _10 = Config->Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][2];
  _12 = (int) _11;
  SelectorShift = Clock_Ip_axFeatureExtensions[_12].SelectorValueShift;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _14 = _13->CSC;
  _15 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _16 = _14 | 12;
  _15->CSC = _16;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.2_17 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.2_17);
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _19 = _18->CSS;
  _20 = _19 & 131072;
  if (_20 == 131072)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  if (TimeoutOccurred == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _21 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  RegValue = _21->CSC;
  # DEBUG BEGIN_STMT
  _22 = ~SelectorMask;
  RegValue = RegValue & _22;
  # DEBUG BEGIN_STMT
  _23 = SelectorResetValue << SelectorShift;
  _24 = SelectorMask & _23;
  RegValue = RegValue | _24;
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _25->CSC = RegValue;
  # DEBUG BEGIN_STMT
  _26 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _27 = _26->CSC;
  _28 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _29 = _27 & 4294967283;
  _28->CSC = _29;

  <bb 7> :
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_SetCgmXCscCssClkswRampupRampdownSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorValue;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance = (uint32) _2;
  # DEBUG BEGIN_STMT
  _3 = Config->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex = (uint32) _4;
  # DEBUG BEGIN_STMT
  _5 = Config->Value;
  _6 = Clock_Ip_au16SelectorEntryHardwareValue[_5];
  SelectorValue = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->Name;
  _8 = Clock_Ip_au8ClockFeatures[_7][2];
  _9 = (int) _8;
  SelectorMask = Clock_Ip_axFeatureExtensions[_9].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _10 = Config->Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][2];
  _12 = (int) _11;
  SelectorShift = Clock_Ip_axFeatureExtensions[_12].SelectorValueShift;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _14 = _13->CSS;
  _15 = SelectorMask & _14;
  _16 = _15 >> SelectorShift;
  if (SelectorValue != _16)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.3_17 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.3_17);
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _19 = _18->CSS;
  _20 = _19 & 65536;
  if (_20 == 65536)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (TimeoutOccurred == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _21 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  RegValue = _21->CSC;
  # DEBUG BEGIN_STMT
  _22 = ~SelectorMask;
  RegValue = RegValue & _22;
  # DEBUG BEGIN_STMT
  _23 = SelectorValue << SelectorShift;
  _24 = SelectorMask & _23;
  RegValue = RegValue | _24;
  # DEBUG BEGIN_STMT
  RegValue = RegValue | 7;
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _25->CSC = RegValue;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.4_26 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.4_26);
  # DEBUG BEGIN_STMT
  _27 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _28 = _27->CSS;
  _29 = _28 & 4;
  if (_29 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  if (TimeoutOccurred == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.5_30 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.5_30);
  # DEBUG BEGIN_STMT
  _31 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _32 = _31->CSS;
  _33 = _32 & 65536;
  if (_33 == 65536)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  if (TimeoutOccurred == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _34 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _35 = _34->CSS;
  _36 = _35 >> 17;
  _37 = _36 & 7;
  if (_37 != 1)
    goto <bb 16>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _38 = Config->Name;
  Clock_Ip_ReportClockErrors (3, _38);
  goto <bb 20>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _39 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _39);
  goto <bb 20>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _40 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _40);
  goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _41 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _41);

  <bb 20> :
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_ResetCgmXCscCssClkswRampupRampdownSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorMask;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance = (uint32) _2;
  # DEBUG BEGIN_STMT
  _3 = Config->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex = (uint32) _4;
  # DEBUG BEGIN_STMT
  _5 = Config->Name;
  _6 = Clock_Ip_au8ClockFeatures[_5][2];
  _7 = (int) _6;
  SelectorMask = Clock_Ip_axFeatureExtensions[_7].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _9 = _8->CSC;
  _10 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _11 = _9 | 8;
  _10->CSC = _11;
  # DEBUG BEGIN_STMT
  _12 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _13 = _12->CSC;
  _14 = ~SelectorMask;
  _15 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _16 = _13 & _14;
  _15->CSC = _16;
  return;

}


Clock_Ip_SetCgmXCscCssClkswSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorValue;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance = (uint32) _2;
  # DEBUG BEGIN_STMT
  _3 = Config->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex = (uint32) _4;
  # DEBUG BEGIN_STMT
  _5 = Config->Value;
  _6 = Clock_Ip_au16SelectorEntryHardwareValue[_5];
  SelectorValue = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->Name;
  _8 = Clock_Ip_au8ClockFeatures[_7][2];
  _9 = (int) _8;
  SelectorMask = Clock_Ip_axFeatureExtensions[_9].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _10 = Config->Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][2];
  _12 = (int) _11;
  SelectorShift = Clock_Ip_axFeatureExtensions[_12].SelectorValueShift;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _14 = _13->CSS;
  _15 = SelectorMask & _14;
  _16 = _15 >> SelectorShift;
  if (SelectorValue != _16)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.6_17 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.6_17);
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _19 = _18->CSS;
  _20 = _19 & 65536;
  if (_20 == 65536)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (TimeoutOccurred == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _21 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  RegValue = _21->CSC;
  # DEBUG BEGIN_STMT
  _22 = ~SelectorMask;
  RegValue = RegValue & _22;
  # DEBUG BEGIN_STMT
  _23 = SelectorValue << SelectorShift;
  _24 = SelectorMask & _23;
  RegValue = RegValue | _24;
  # DEBUG BEGIN_STMT
  RegValue = RegValue | 4;
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _25->CSC = RegValue;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.7_26 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.7_26);
  # DEBUG BEGIN_STMT
  _27 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _28 = _27->CSS;
  _29 = _28 & 4;
  if (_29 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  if (TimeoutOccurred == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.8_30 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.8_30);
  # DEBUG BEGIN_STMT
  _31 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _32 = _31->CSS;
  _33 = _32 & 65536;
  if (_33 == 65536)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  if (TimeoutOccurred == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _34 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _35 = _34->CSS;
  _36 = _35 >> 17;
  _37 = _36 & 7;
  if (_37 != 1)
    goto <bb 16>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _38 = Config->Name;
  Clock_Ip_ReportClockErrors (3, _38);
  goto <bb 20>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _39 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _39);
  goto <bb 20>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _40 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _40);
  goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _41 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _41);

  <bb 20> :
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_ResetCgmXCscCssClkswSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorMask;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance = (uint32) _2;
  # DEBUG BEGIN_STMT
  _3 = Config->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex = (uint32) _4;
  # DEBUG BEGIN_STMT
  _5 = Config->Name;
  _6 = Clock_Ip_au8ClockFeatures[_5][2];
  _7 = (int) _6;
  SelectorMask = Clock_Ip_axFeatureExtensions[_7].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _9 = _8->CSC;
  _10 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _11 = _9 | 8;
  _10->CSC = _11;
  # DEBUG BEGIN_STMT
  _12 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _13 = _12->CSC;
  _14 = ~SelectorMask;
  _15 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _16 = _13 & _14;
  _15->CSC = _16;
  return;

}


Clock_Ip_CallbackSelectorEmpty (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


