Crypto_PL_CertificateVerify (uint32 CryptoKeyId, uint32 VerifyCryptoKeyId, Crypto_VerifyResultType * VerifyPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_7 = Crypto_AL_CertificateVerify (CryptoKeyId_3(D), VerifyCryptoKeyId_4(D), VerifyPtr_5(D));
  # DEBUG RetVal => RetVal_7
  # DEBUG BEGIN_STMT
  _8 = RetVal_7;
  return _8;

}


Crypto_PL_CertificateParse (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_5 = Crypto_AL_CertificateParse (CryptoKeyId_3(D));
  # DEBUG RetVal => RetVal_5
  # DEBUG BEGIN_STMT
  _6 = RetVal_5;
  return _6;

}


Crypto_PL_KeyExchangeCalcSecret (uint32 CryptoKeyId, const uint8 * PartnerPublicValuePtr, uint32 PartnerPublicValueLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_7 = Crypto_AL_KeyExchangeCalcSecret (CryptoKeyId_3(D), PartnerPublicValuePtr_4(D), PartnerPublicValueLength_5(D));
  # DEBUG RetVal => RetVal_7
  # DEBUG BEGIN_STMT
  _8 = RetVal_7;
  return _8;

}


Crypto_PL_KeyExchangeCalcPubVal (uint32 CryptoKeyId, uint8 * PublicValuePtr, uint32 * PublicValueLengthPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_7 = Crypto_AL_KeyExchangeCalcPubVal (CryptoKeyId_3(D), PublicValuePtr_4(D), PublicValueLengthPtr_5(D));
  # DEBUG RetVal => RetVal_7
  # DEBUG BEGIN_STMT
  _8 = RetVal_7;
  return _8;

}


Crypto_PL_KeyDerive (uint32 CryptoKeyId, uint32 TargetCryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_6 = Crypto_AL_KeyDerive (CryptoKeyId_3(D), TargetCryptoKeyId_4(D));
  # DEBUG RetVal => RetVal_6
  # DEBUG BEGIN_STMT
  _7 = RetVal_6;
  return _7;

}


Crypto_PL_KeyGenerate (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_5 = Crypto_AL_KeyGenerate (CryptoKeyId_3(D));
  # DEBUG RetVal => RetVal_5
  # DEBUG BEGIN_STMT
  _6 = RetVal_5;
  return _6;

}


Crypto_PL_RandomSeed (uint32 CryptoKeyId, const uint8 * EntropyPtr, uint32 EntropyLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_7 = Crypto_AL_RandomSeed (CryptoKeyId_3(D), EntropyPtr_4(D), EntropyLength_5(D));
  # DEBUG RetVal => RetVal_7
  # DEBUG BEGIN_STMT
  _8 = RetVal_7;
  return _8;

}


Crypto_PL_KeyCopy (uint32 CryptoKeyId, uint32 TargetCryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_6 = Crypto_AL_KeyCopy (CryptoKeyId_3(D), TargetCryptoKeyId_4(D));
  # DEBUG RetVal => RetVal_6
  # DEBUG BEGIN_STMT
  _7 = RetVal_6;
  return _7;

}


Crypto_PL_KeyElementCopy (uint32 CryptoKeyId, uint32 KeyElementId, uint32 TargetCryptoKeyId, uint32 TargetKeyElementId)
{
  Std_ReturnType RetVal;
  Std_ReturnType _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_8 = Crypto_AL_KeyElementCopy (CryptoKeyId_3(D), KeyElementId_4(D), TargetCryptoKeyId_5(D), TargetKeyElementId_6(D));
  # DEBUG RetVal => RetVal_8
  # DEBUG BEGIN_STMT
  _9 = RetVal_8;
  return _9;

}


Crypto_PL_KeyElementGet (uint32 CryptoKeyId, uint32 KeyElementId, uint8 * ResultPtr, uint32 * ResultLengthPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_8 = Crypto_AL_KeyElementGet (CryptoKeyId_3(D), KeyElementId_4(D), ResultPtr_5(D), ResultLengthPtr_6(D));
  # DEBUG RetVal => RetVal_8
  # DEBUG BEGIN_STMT
  _9 = RetVal_8;
  return _9;

}


Crypto_PL_KeyValidSet (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_5 = Crypto_AL_KeyValidSet (CryptoKeyId_3(D));
  # DEBUG RetVal => RetVal_5
  # DEBUG BEGIN_STMT
  _6 = RetVal_5;
  return _6;

}


Crypto_PL_KeyElementSet (uint32 CryptoKeyId, uint32 KeyElementId, const uint8 * KeyPtr, uint32 KeyLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  RetVal_8 = Crypto_AL_KeyElementSet (CryptoKeyId_3(D), KeyElementId_4(D), KeyPtr_5(D), KeyLength_6(D));
  # DEBUG RetVal => RetVal_8
  # DEBUG BEGIN_STMT
  _9 = RetVal_8;
  return _9;

}


Crypto_PL_Init ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_AL_Init ();
  return;

}


