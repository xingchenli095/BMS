
Marking local functions: Dio_Ipw_ReadChannelValue Dio_Ipw_ReverseBits


Marking externally visible functions: Dio_Ipw_WriteChannelGroup Dio_Ipw_ReadChannelGroup Dio_Ipw_WritePort Dio_Ipw_ReadPort Dio_Ipw_WriteChannel Dio_Ipw_ReadChannel


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Siul2_Dio_Ip_MaskedWritePins/13 (Siul2_Dio_Ip_MaskedWritePins) @06d2d380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dio_Ipw_WriteChannelGroup/7 
  Calls: 
Siul2_Dio_Ip_WritePins/12 (Siul2_Dio_Ip_WritePins) @06d2d000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dio_Ipw_WritePort/5 
  Calls: 
Siul2_Dio_Ip_ReadPins/11 (Siul2_Dio_Ip_ReadPins) @06d1ce00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dio_Ipw_ReadChannelGroup/6 Dio_Ipw_ReadPort/4 
  Calls: 
Siul2_Dio_Ip_au32BaseAdresses/10 (Siul2_Dio_Ip_au32BaseAdresses) @06b4aca8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dio_Ipw_ReadChannelValue/1 (read)Dio_Ipw_WriteChannel/3 (read)Dio_Ipw_ReadPort/4 (read)Dio_Ipw_WritePort/5 (read)Dio_Ipw_ReadChannelGroup/6 (read)
  Availability: not_available
  Varpool flags:
Dio_au8Port0OffsetInSiul2Instance/9 (Dio_au8Port0OffsetInSiul2Instance) @06b4aaf8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dio_Ipw_ReadChannel/2 (read)Dio_Ipw_WriteChannel/3 (read)Dio_Ipw_ReadPort/4 (read)Dio_Ipw_WritePort/5 (read)Dio_Ipw_ReadChannelGroup/6 (read)
  Availability: not_available
  Varpool flags: read-only
Dio_au8PortSiul2Instance/8 (Dio_au8PortSiul2Instance) @06b4aab0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dio_Ipw_ReadChannel/2 (read)Dio_Ipw_WriteChannel/3 (read)Dio_Ipw_ReadPort/4 (read)Dio_Ipw_WritePort/5 (read)Dio_Ipw_ReadChannelGroup/6 (read)Dio_Ipw_WriteChannelGroup/7 (read)
  Availability: not_available
  Varpool flags: read-only
Dio_Ipw_WriteChannelGroup/7 (Dio_Ipw_WriteChannelGroup) @06d1c9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dio_au8PortSiul2Instance/8 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Siul2_Dio_Ip_MaskedWritePins/13 Dio_Ipw_ReverseBits/0 
Dio_Ipw_ReadChannelGroup/6 (Dio_Ipw_ReadChannelGroup) @06d1c7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dio_au8PortSiul2Instance/8 (read)Dio_au8Port0OffsetInSiul2Instance/9 (read)Siul2_Dio_Ip_au32BaseAdresses/10 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dio_Ipw_ReverseBits/0 Siul2_Dio_Ip_ReadPins/11 
Dio_Ipw_WritePort/5 (Dio_Ipw_WritePort) @06d1c620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dio_au8PortSiul2Instance/8 (read)Dio_au8Port0OffsetInSiul2Instance/9 (read)Siul2_Dio_Ip_au32BaseAdresses/10 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Siul2_Dio_Ip_WritePins/12 
Dio_Ipw_ReadPort/4 (Dio_Ipw_ReadPort) @06d1c460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dio_au8PortSiul2Instance/8 (read)Dio_au8Port0OffsetInSiul2Instance/9 (read)Siul2_Dio_Ip_au32BaseAdresses/10 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Siul2_Dio_Ip_ReadPins/11 
Dio_Ipw_WriteChannel/3 (Dio_Ipw_WriteChannel) @06d1c2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dio_au8PortSiul2Instance/8 (read)Dio_au8Port0OffsetInSiul2Instance/9 (read)Siul2_Dio_Ip_au32BaseAdresses/10 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Dio_Ipw_ReadChannel/2 (Dio_Ipw_ReadChannel) @06d1c0e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dio_au8PortSiul2Instance/8 (read)Dio_au8Port0OffsetInSiul2Instance/9 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dio_Ipw_ReadChannelValue/1 
Dio_Ipw_ReadChannelValue/1 (Dio_Ipw_ReadChannelValue) @06d16ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Siul2_Dio_Ip_au32BaseAdresses/10 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dio_Ipw_ReadChannel/2 
  Calls: 
Dio_Ipw_ReverseBits/0 (Dio_Ipw_ReverseBits) @06d16d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dio_Ipw_WriteChannelGroup/7 Dio_Ipw_ReadChannelGroup/6 
  Calls: 
Dio_Ipw_WriteChannelGroup (const struct Dio_ChannelGroupType * pChannelGroupIdPtr, Dio_PortLevelType Level)
{
  uint8 u8Siul2Instance;
  Dio_PortType PortId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PortId = pChannelGroupIdPtr->port;
  # DEBUG BEGIN_STMT
  _1 = (int) PortId;
  u8Siul2Instance = Dio_au8PortSiul2Instance[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) Level;
  _3 = pChannelGroupIdPtr->u8offset;
  _4 = (int) _3;
  _5 = _2 << _4;
  _6 = (short unsigned int) _5;
  _7 = pChannelGroupIdPtr->mask;
  _8 = Dio_Ipw_ReverseBits (_7);
  Siul2_Dio_Ip_MaskedWritePins (u8Siul2Instance, PortId, _6, _8);
  return;

}


Dio_Ipw_ReadChannelGroup (const struct Dio_ChannelGroupType * pChannelGroupIdPtr)
{
  Dio_PortLevelType maskRevValue;
  Dio_PortLevelType pinsValue;
  uint32 u32PGPDOAdrress;
  Dio_PortType PortOffset;
  Dio_PortType PortId;
  uint8 u8Siul2Instance;
  Dio_PortLevelType PortLevel;
  Dio_PortLevelType D.6350;

  <bb 2> :
  # DEBUG BEGIN_STMT
  PortLevel = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PortId = pChannelGroupIdPtr->port;
  # DEBUG BEGIN_STMT
  _1 = (int) PortId;
  u8Siul2Instance = Dio_au8PortSiul2Instance[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) u8Siul2Instance;
  PortOffset = Dio_au8Port0OffsetInSiul2Instance[_2];
  # DEBUG BEGIN_STMT
  _3 = (int) u8Siul2Instance;
  _4 = Siul2_Dio_Ip_au32BaseAdresses[_3];
  _5 = (long unsigned int) PortId;
  _6 = (long unsigned int) PortOffset;
  _7 = _5 - _6;
  _8 = _7 / 2;
  _9 = _8 + 1;
  _10 = _9 * 2;
  _11 = PortId - PortOffset;
  _12 = (long unsigned int) _11;
  _13 = _12 & 1;
  _14 = _10 - _13;
  _15 = _14 + 4294967295;
  _16 = _15 << 1;
  _17 = _4 + _16;
  u32PGPDOAdrress = _17 + 5888;
  # DEBUG BEGIN_STMT
  u32PGPDOAdrress.2_18 = (const struct Siul2_Dio_Ip_GpioType *) u32PGPDOAdrress;
  pinsValue = Siul2_Dio_Ip_ReadPins (u32PGPDOAdrress.2_18);
  # DEBUG BEGIN_STMT
  _19 = pChannelGroupIdPtr->mask;
  maskRevValue = Dio_Ipw_ReverseBits (_19);
  # DEBUG BEGIN_STMT
  _20 = pinsValue & maskRevValue;
  _21 = (int) _20;
  _22 = pChannelGroupIdPtr->u8offset;
  _23 = (int) _22;
  _24 = _21 >> _23;
  PortLevel = (Dio_PortLevelType) _24;
  # DEBUG BEGIN_STMT
  D.6350 = PortLevel;
  return D.6350;

}


Dio_Ipw_WritePort (Dio_PortType PortId, Dio_PortLevelType Level)
{
  uint8 u8Siul2Instance;
  uint32 u32PGPDOAdrress;
  Dio_PortType PortOffset;
  Dio_PortLevelType CrtLevel;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CrtLevel = Level;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) PortId;
  u8Siul2Instance = Dio_au8PortSiul2Instance[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) u8Siul2Instance;
  PortOffset = Dio_au8Port0OffsetInSiul2Instance[_2];
  # DEBUG BEGIN_STMT
  _3 = (int) u8Siul2Instance;
  _4 = Siul2_Dio_Ip_au32BaseAdresses[_3];
  _5 = (long unsigned int) PortId;
  _6 = (long unsigned int) PortOffset;
  _7 = _5 - _6;
  _8 = _7 / 2;
  _9 = _8 + 1;
  _10 = _9 * 2;
  _11 = PortId - PortOffset;
  _12 = (long unsigned int) _11;
  _13 = _12 & 1;
  _14 = _10 - _13;
  _15 = _14 + 4294967295;
  _16 = _15 << 1;
  _17 = _4 + _16;
  u32PGPDOAdrress = _17 + 5888;
  # DEBUG BEGIN_STMT
  u32PGPDOAdrress.1_18 = (struct Siul2_Dio_Ip_GpioType *) u32PGPDOAdrress;
  Siul2_Dio_Ip_WritePins (u32PGPDOAdrress.1_18, CrtLevel);
  return;

}


Dio_Ipw_ReadPort (Dio_PortType PortId)
{
  uint32 u32PGPDOAdrress;
  Dio_PortType PortOffset;
  uint8 u8Siul2Instance;
  Dio_PortLevelType PortLevel;
  Dio_PortLevelType D.6348;

  <bb 2> :
  # DEBUG BEGIN_STMT
  PortLevel = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) PortId;
  u8Siul2Instance = Dio_au8PortSiul2Instance[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) u8Siul2Instance;
  PortOffset = Dio_au8Port0OffsetInSiul2Instance[_2];
  # DEBUG BEGIN_STMT
  _3 = (int) u8Siul2Instance;
  _4 = Siul2_Dio_Ip_au32BaseAdresses[_3];
  _5 = (long unsigned int) PortId;
  _6 = (long unsigned int) PortOffset;
  _7 = _5 - _6;
  _8 = _7 / 2;
  _9 = _8 + 1;
  _10 = _9 * 2;
  _11 = PortId - PortOffset;
  _12 = (long unsigned int) _11;
  _13 = _12 & 1;
  _14 = _10 - _13;
  _15 = _14 + 4294967295;
  _16 = _15 << 1;
  _17 = _4 + _16;
  u32PGPDOAdrress = _17 + 5888;
  # DEBUG BEGIN_STMT
  u32PGPDOAdrress.0_18 = (const struct Siul2_Dio_Ip_GpioType *) u32PGPDOAdrress;
  PortLevel = Siul2_Dio_Ip_ReadPins (u32PGPDOAdrress.0_18);
  # DEBUG BEGIN_STMT
  D.6348 = PortLevel;
  return D.6348;

}


Dio_Ipw_WriteChannel (Dio_ChannelType ChannelId, Dio_LevelType Level)
{
  Dio_ChannelType ChannelIndex;
  Dio_ChannelType ChannelOffset;
  uint8 u8Siul2Instance;
  Dio_PortType PortId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ChannelId >> 4;
  PortId = (Dio_PortType) _1;
  # DEBUG BEGIN_STMT
  _2 = (int) PortId;
  u8Siul2Instance = Dio_au8PortSiul2Instance[_2];
  # DEBUG BEGIN_STMT
  _3 = (int) u8Siul2Instance;
  _4 = Dio_au8Port0OffsetInSiul2Instance[_3];
  _5 = (short unsigned int) _4;
  ChannelOffset = _5 * 16;
  # DEBUG BEGIN_STMT
  ChannelIndex = ChannelId - ChannelOffset;
  # DEBUG BEGIN_STMT
  _6 = (int) u8Siul2Instance;
  _7 = Siul2_Dio_Ip_au32BaseAdresses[_6];
  _8 = ChannelIndex ^ 3;
  _9 = (long unsigned int) _8;
  _10 = _7 + _9;
  _11 = _10 + 4864;
  _12 = (Dio_LevelType *) _11;
  *_12 = Level;
  return;

}


Dio_Ipw_ReadChannel (Dio_ChannelType ChannelId)
{
  Dio_ChannelType ChannelIndex;
  Dio_ChannelType ChannelOffset;
  uint8 u8Siul2Instance;
  Dio_PortType PortId;
  Dio_LevelType ChannelLevel;
  Dio_LevelType D.6344;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ChannelLevel = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ChannelId >> 4;
  PortId = (Dio_PortType) _1;
  # DEBUG BEGIN_STMT
  _2 = (int) PortId;
  u8Siul2Instance = Dio_au8PortSiul2Instance[_2];
  # DEBUG BEGIN_STMT
  _3 = (int) u8Siul2Instance;
  _4 = Dio_au8Port0OffsetInSiul2Instance[_3];
  _5 = (short unsigned int) _4;
  ChannelOffset = _5 * 16;
  # DEBUG BEGIN_STMT
  ChannelIndex = ChannelId - ChannelOffset;
  # DEBUG BEGIN_STMT
  ChannelLevel = Dio_Ipw_ReadChannelValue (u8Siul2Instance, ChannelIndex);
  # DEBUG BEGIN_STMT
  D.6344 = ChannelLevel;
  return D.6344;

}


Dio_Ipw_ReadChannelValue (uint8 u8Siul2Instance, Dio_ChannelType Channel)
{
  Dio_LevelType returnValue;
  Dio_LevelType D.6346;

  <bb 2> :
  # DEBUG BEGIN_STMT
  returnValue = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) u8Siul2Instance;
  _2 = Siul2_Dio_Ip_au32BaseAdresses[_1];
  _3 = Channel ^ 3;
  _4 = (long unsigned int) _3;
  _5 = _2 + _4;
  _6 = _5 + 5376;
  _7 = (Dio_LevelType *) _6;
  returnValue = *_7;
  # DEBUG BEGIN_STMT
  returnValue = returnValue & 1;
  # DEBUG BEGIN_STMT
  D.6346 = returnValue;
  return D.6346;

}


Dio_Ipw_ReverseBits (Dio_PortLevelType Level)
{
  Dio_PortLevelType NumShifts;
  Dio_PortLevelType RevLevel;
  Dio_PortLevelType TempLevel;
  Dio_PortLevelType D.6352;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TempLevel = Level;
  # DEBUG BEGIN_STMT
  RevLevel = TempLevel;
  # DEBUG BEGIN_STMT
  NumShifts = 15;
  # DEBUG BEGIN_STMT
  TempLevel = TempLevel >> 1;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RevLevel = RevLevel << 1;
  # DEBUG BEGIN_STMT
  TempLevel.3_1 = (signed short) TempLevel;
  _2 = TempLevel.3_1 & 1;
  RevLevel.4_3 = (signed short) RevLevel;
  _4 = _2 | RevLevel.4_3;
  RevLevel = (Dio_PortLevelType) _4;
  # DEBUG BEGIN_STMT
  NumShifts.5_5 = NumShifts;
  NumShifts = NumShifts.5_5 + 65535;
  # DEBUG BEGIN_STMT
  TempLevel = TempLevel >> 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (TempLevel != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = (long unsigned int) RevLevel;
  _7 = (int) NumShifts;
  _8 = _6 << _7;
  RevLevel = (Dio_PortLevelType) _8;
  # DEBUG BEGIN_STMT
  D.6352 = RevLevel;
  return D.6352;

}


