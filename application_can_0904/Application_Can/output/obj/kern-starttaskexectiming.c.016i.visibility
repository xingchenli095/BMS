
Marking local functions:


Marking externally visible functions: OS_StartTaskExecTiming


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_executionTimer/2 (OS_executionTimer) @06c48948
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_StartTaskExecTiming/0 (read)OS_StartTaskExecTiming/0 (read)OS_StartTaskExecTiming/0 (read)OS_StartTaskExecTiming/0 (read)OS_StartTaskExecTiming/0 (read)OS_StartTaskExecTiming/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_kernelData/1 (OS_kernelData) @06c48900
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_StartTaskExecTiming/0 (addr)OS_StartTaskExecTiming/0 (write)OS_StartTaskExecTiming/0 (write)OS_StartTaskExecTiming/0 (write)OS_StartTaskExecTiming/0 (write)OS_StartTaskExecTiming/0 (write)OS_StartTaskExecTiming/0 (read)OS_StartTaskExecTiming/0 (read)OS_StartTaskExecTiming/0 (read)OS_StartTaskExecTiming/0 (read)OS_StartTaskExecTiming/0 (read)OS_StartTaskExecTiming/0 (read)
  Availability: not_available
  Varpool flags:
OS_StartTaskExecTiming/0 (OS_StartTaskExecTiming) @06c68b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_kernelData/1 (addr)OS_executionTimer/2 (read)OS_executionTimer/2 (read)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_executionTimer/2 (read)OS_executionTimer/2 (read)OS_executionTimer/2 (read)OS_executionTimer/2 (read)OS_kernelData/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
   Indirect call
   Indirect call
__attribute__((target ("general-regs-only")))
OS_StartTaskExecTiming (const struct os_task_t * tp)
{
  os_tick_t OS_hwtStartDelta;
  os_tick_t remaining;
  struct os_taskaccounting_t * acc;
  struct os_kerneldata_t * const kernel_data;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  acc = tp->accounting;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (acc != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = OS_executionTimer[0];
  _2 = _1->driver;
  _3 = _2->hwtRead;
  _4 = OS_executionTimer[0];
  _5 = _3 (_4);
  OS_kernelData.accounting.frc = _5;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.inFunction = 1;
  # DEBUG BEGIN_STMT
  _6 = acc->etType;
  OS_kernelData.accounting.etType = _6;
  # DEBUG BEGIN_STMT
  _7 = acc->etUsed;
  OS_kernelData.accounting.etUsed = _7;
  # DEBUG BEGIN_STMT
  _8 = tp->execBudget;
  OS_kernelData.accounting.etLimit = _8;
  # DEBUG BEGIN_STMT
  _9 = OS_kernelData.accounting.etLimit;
  if (_9 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _10 = OS_kernelData.accounting.etUsed;
  _11 = OS_kernelData.accounting.etLimit;
  if (_10 >= _11)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  remaining = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _12 = OS_kernelData.accounting.etLimit;
  _13 = OS_kernelData.accounting.etUsed;
  remaining = _12 - _13;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_hwtStartDelta = remaining;
  # DEBUG BEGIN_STMT
  _14 = OS_executionTimer[0];
  _15 = _14->maxDelta;
  if (OS_hwtStartDelta > _15)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _16 = OS_executionTimer[0];
  OS_hwtStartDelta = _16->defDelta;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _17 = OS_executionTimer[0];
  _18 = _17->driver;
  _19 = _18->hwtStart;
  _20 = OS_executionTimer[0];
  _21 = OS_kernelData.accounting.frc;
  _19 (_20, _21, OS_hwtStartDelta);

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


