__attribute__((target ("general-regs-only")))
OS_KernStartScheduleTable (os_scheduleid_t s, os_tick_t offset, os_boolean_t rel)
{
  os_errorresult_t e;
  os_tick_t max;
  const struct os_counter_t * const cs;
  const struct os_alarm_t * const as;
  const struct os_appcontext_t * const app;
  const struct os_schedule_t * const ss;
  os_paramtype_t p[3];
  os_result_t r;
  const struct os_serviceinfo_t * const varSif;
  const os_serviceid_t varSid;
  os_result_t D.7488;
  const unsigned int iftmp.16;
  const struct os_appcontext_t * iftmp.13;
  const struct os_appcontext_t * iftmp.11;
  const struct os_appcontext_t * iftmp.10;
  int iftmp.3;
  _Bool iftmp.2;
  const struct os_serviceinfo_t * iftmp.1;
  const os_serviceid_t iftmp.0;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (rel != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.0 = 7;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0 = 8;

  <bb 5> :
  varSid = iftmp.0;
  # DEBUG BEGIN_STMT
  if (rel != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.1 = &OS_svc_StartScheduleTableRel;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.1 = &OS_svc_StartScheduleTableAbs;

  <bb 8> :
  varSif = iftmp.1;
  # DEBUG BEGIN_STMT
  r = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (unsigned int) s;
  p[0] = _1;
  # DEBUG BEGIN_STMT
  p[1] = offset;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = OS_kernelData.inFunction;
  if (_2 == 10)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  OS_permittedContext.4_3 = OS_permittedContext;
  _4 = (unsigned int) varSid;
  _5 = _4 * 2;
  _6 = OS_permittedContext.4_3 + _5;
  _7 = *_6;
  _8 = (unsigned int) _7;
  _9 = _8 & 1024;
  if (_9 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  OS_permittedContext.5_10 = OS_permittedContext;
  _11 = (unsigned int) varSid;
  _12 = _11 * 2;
  _13 = OS_permittedContext.5_10 + _12;
  _14 = *_13;
  _15 = OS_kernelData.errorStatus.calledFrom;
  _16 = (int) _15;
  _17 = 1 << _16;
  _18 = (short unsigned int) _17;
  _19 = _14 & _18;
  if (_19 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  iftmp.3 = 1;
  goto <bb 13>; [INV]

  <bb 12> :
  iftmp.3 = 0;

  <bb 13> :
  iftmp.2 = iftmp.3 == 0;
  goto <bb 15>; [INV]

  <bb 14> :
  OS_permittedContext.6_20 = OS_permittedContext;
  _21 = (unsigned int) varSid;
  _22 = _21 * 2;
  _23 = OS_permittedContext.6_20 + _22;
  _24 = *_23;
  _25 = OS_kernelData.inFunction;
  _26 = (int) _25;
  _27 = 1 << _26;
  _28 = (short unsigned int) _27;
  _29 = _24 & _28;
  iftmp.2 = _29 == 0;

  <bb 15> :
  if (iftmp.2 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  r = OS_Error (varSif, 12, &p);
  goto <bb 51>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  OS_iecMode.7_30 = OS_iecMode;
  if (OS_iecMode.7_30 > 1)
    goto <bb 18>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 18> :
  _31 = OS_kernelData.inFunction;
  if (_31 == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _32 = OS_kernelData.taskCurrent;
  _33 = _32->dynamic;
  _34 = BIT_FIELD_REF <MEM[(void *)_33], 16, 160>;
  _35 = _34;
  if (_35 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  _36 = BIT_FIELD_REF <MEM[(void *)&OS_kernelData], 16, 320>;
  _37 = _36;
  if (_37 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  r = OS_Error (varSif, 55, &p);
  goto <bb 51>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  OS_nSchedules.8_38 = OS_nSchedules;
  if (s >= OS_nSchedules.8_38)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  r = OS_Error (varSif, 40, &p);
  goto <bb 51>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  if (rel != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 25> :
  if (offset == 0)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  r = OS_Error (varSif, 19, &p);
  goto <bb 51>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  OS_scheduleTableBase.9_39 = OS_scheduleTableBase;
  _40 = (unsigned int) s;
  _41 = _40 * 36;
  ss = OS_scheduleTableBase.9_39 + _41;
  # DEBUG BEGIN_STMT
  _42 = OS_kernelData.inFunction;
  if (_42 == 1)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  _43 = OS_kernelData.taskCurrent;
  iftmp.10 = _43->app;
  goto <bb 38>; [INV]

  <bb 29> :
  _44 = OS_kernelData.inFunction;
  if (_44 == 3)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  OS_isrTableBase.12_45 = OS_isrTableBase;
  _46 = OS_kernelData.isrCurrent;
  _47 = (unsigned int) _46;
  _48 = _47 * 68;
  _49 = OS_isrTableBase.12_45 + _48;
  iftmp.11 = _49->app;
  goto <bb 37>; [INV]

  <bb 31> :
  _50 = OS_kernelData.inFunction;
  if (_50 == 10)
    goto <bb 34>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 32> :
  _51 = OS_kernelData.inFunction;
  if (_51 == 8)
    goto <bb 34>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  _52 = OS_kernelData.inFunction;
  if (_52 == 9)
    goto <bb 34>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 34> :
  iftmp.13 = OS_kernelData.hookApp;
  goto <bb 36>; [INV]

  <bb 35> :
  iftmp.13 = 0B;

  <bb 36> :
  iftmp.11 = iftmp.13;

  <bb 37> :
  iftmp.10 = iftmp.11;

  <bb 38> :
  app = iftmp.10;
  # DEBUG BEGIN_STMT
  OS_alarmTableBase.14_53 = OS_alarmTableBase;
  _54 = ss->alarm;
  _55 = (unsigned int) _54;
  _56 = _55 * 28;
  as = OS_alarmTableBase.14_53 + _56;
  # DEBUG BEGIN_STMT
  OS_counterTableBase.15_57 = OS_counterTableBase;
  _58 = as->counter;
  _59 = (unsigned int) _58;
  _60 = _59 * 32;
  cs = OS_counterTableBase.15_57 + _60;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (rel != 0)
    goto <bb 39>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 39> :
  _61 = cs->maxallowedvalue;
  _62 = ss->table;
  _63 = _62->offset;
  iftmp.16 = _61 - _63;
  goto <bb 41>; [INV]

  <bb 40> :
  iftmp.16 = cs->maxallowedvalue;

  <bb 41> :
  max = iftmp.16;
  # DEBUG BEGIN_STMT
  if (app != 0B)
    goto <bb 42>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 42> :
  _64 = app->permissionBit;
  _65 = ss->permissions;
  _66 = _64 & _65;
  if (_66 == 0)
    goto <bb 43>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 43> :
  # DEBUG BEGIN_STMT
  r = OS_Error (varSif, 37, &p);
  goto <bb 51>; [INV]

  <bb 44> :
  # DEBUG BEGIN_STMT
  if (rel != 0)
    goto <bb 45>; [INV]
  else
    goto <bb 47>; [INV]

  <bb 45> :
  _67 = ss->flags;
  _68 = (unsigned int) _67;
  _69 = _68 & 4;
  if (_69 != 0)
    goto <bb 46>; [INV]
  else
    goto <bb 47>; [INV]

  <bb 46> :
  # DEBUG BEGIN_STMT
  r = OS_Error (varSif, 38, &p);
  goto <bb 51>; [INV]

  <bb 47> :
  # DEBUG BEGIN_STMT
  if (offset > max)
    goto <bb 48>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 48> :
  # DEBUG BEGIN_STMT
  r = OS_Error (varSif, 19, &p);
  goto <bb 51>; [INV]

  <bb 49> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _70 = as->counter;
  e = OS_LocalStartScheduleTable (ss, _70, offset, rel);
  # DEBUG BEGIN_STMT
  if (e != 0)
    goto <bb 50>; [INV]
  else
    goto <bb 51>; [INV]

  <bb 50> :
  # DEBUG BEGIN_STMT
  r = OS_Error (varSif, e, &p);

  <bb 51> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7488 = r;
  p = {CLOBBER};
  return D.7488;

}


