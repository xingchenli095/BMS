__attribute__((target ("general-regs-only")))
OS_KernSuspendInterrupts (os_intlocktype_t locktype)
{
  const os_taskprio_t maxPrio;
  const os_coreid_t myCoreId;
  os_paramtype_t p[3];
  os_prio_t * pPrioBeforeSuspend;
  os_intstatus_t level;
  os_intstatus_t is;
  os_uint8_t * ncp;
  os_oldlevel_t * olp;
  struct os_taskdynamic_t * td;
  struct os_kerneldata_t * const kernel_data;
  unsigned char _1;
  const struct os_task_t * _2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;
  unsigned char _6;
  const os_callermask_t * OS_permittedContext.2_7;
  const os_callermask_t * _8;
  short unsigned int _9;
  unsigned int _10;
  unsigned int _11;
  const os_callermask_t * OS_permittedContext.3_12;
  const os_callermask_t * _13;
  short unsigned int _14;
  unsigned char _15;
  int _16;
  int _17;
  short unsigned int _18;
  short unsigned int _19;
  const os_callermask_t * OS_permittedContext.4_20;
  const os_callermask_t * _21;
  short unsigned int _22;
  unsigned char _23;
  int _24;
  int _25;
  short unsigned int _26;
  short unsigned int _27;
  unsigned int OS_configMode.5_28;
  unsigned int _29;
  short unsigned int OS_intDisableLevelMax.6_30;
  unsigned char _31;
  unsigned char _32;
  unsigned char _33;
  void (*<T636>) (const struct os_task_t *, os_intlocktype_t) OS_startTaskIntLockTimingFp.7_34;
  const struct os_task_t * _35;
  short unsigned int _36;
  short unsigned int _37;
  unsigned char _38;
  void (*<T657>) (os_isrid_t, os_intlocktype_t) OS_startIsrIntLockTimingFp.8_39;
  short unsigned int _40;
  unsigned char _41;
  unsigned char _42;
  unsigned char _43;
  unsigned char _44;
  unsigned int OS_configMode.9_45;
  unsigned int _46;
  _Bool iftmp.0_52;
  int iftmp.1_53;
  _Bool iftmp.0_66;
  int iftmp.1_67;
  int iftmp.1_68;
  _Bool iftmp.0_69;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data_57 = &OS_kernelData;
  # DEBUG kernel_data => kernel_data_57
  # DEBUG BEGIN_STMT
  td_58 = 0B;
  # DEBUG td => td_58
  # DEBUG BEGIN_STMT
  olp_59 = 0B;
  # DEBUG olp => olp_59
  # DEBUG BEGIN_STMT
  ncp_60 = 0B;
  # DEBUG ncp => ncp_60
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  level_61 = 0;
  # DEBUG level => level_61
  # DEBUG BEGIN_STMT
  pPrioBeforeSuspend_62 = 0B;
  # DEBUG pPrioBeforeSuspend => pPrioBeforeSuspend_62
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  p[0] = locktype_64(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = OS_kernelData.inFunction;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = OS_kernelData.taskCurrent;
  td_80 = _2->dynamic;
  # DEBUG td => td_80
  # DEBUG BEGIN_STMT
  if (locktype_64(D) == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = td_80->nestSuspendAll;
  if (_3 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  level_84 = OS_intDisableLevel;
  # DEBUG level => level_84
  # DEBUG BEGIN_STMT
  olp_85 = &td_80->oldSuspendOs;
  # DEBUG olp => olp_85
  # DEBUG BEGIN_STMT
  ncp_86 = &td_80->nestSuspendOs;
  # DEBUG ncp => ncp_86
  # DEBUG BEGIN_STMT
  pPrioBeforeSuspend_87 = &td_80->prioBeforeSuspendOs;
  # DEBUG pPrioBeforeSuspend => pPrioBeforeSuspend_87
  goto <bb 24>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  level_81 = OS_intDisableLevelAll;
  # DEBUG level => level_81
  # DEBUG BEGIN_STMT
  olp_82 = &td_80->oldSuspendAll;
  # DEBUG olp => olp_82
  # DEBUG BEGIN_STMT
  ncp_83 = &td_80->nestSuspendAll;
  # DEBUG ncp => ncp_83
  goto <bb 24>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _4 = OS_kernelData.inFunction;
  if (_4 == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (locktype_64(D) == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _5 = OS_kernelData.nestSuspendAll;
  if (_5 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  level_77 = OS_intDisableLevel;
  # DEBUG level => level_77
  # DEBUG BEGIN_STMT
  olp_78 = &OS_kernelData.oldSuspendOs;
  # DEBUG olp => olp_78
  # DEBUG BEGIN_STMT
  ncp_79 = &OS_kernelData.nestSuspendOs;
  # DEBUG ncp => ncp_79
  goto <bb 24>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  level_74 = OS_intDisableLevelAll;
  # DEBUG level => level_74
  # DEBUG BEGIN_STMT
  olp_75 = &OS_kernelData.oldSuspendAll;
  # DEBUG olp => olp_75
  # DEBUG BEGIN_STMT
  ncp_76 = &OS_kernelData.nestSuspendAll;
  # DEBUG ncp => ncp_76
  goto <bb 24>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _6 = OS_kernelData.inFunction;
  if (_6 == 10)
    goto <bb 13>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 13> :
  OS_permittedContext.2_7 = OS_permittedContext;
  _8 = OS_permittedContext.2_7 + 56;
  _9 = *_8;
  _10 = (unsigned int) _9;
  _11 = _10 & 1024;
  if (_11 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  OS_permittedContext.3_12 = OS_permittedContext;
  _13 = OS_permittedContext.3_12 + 56;
  _14 = *_13;
  _15 = OS_kernelData.errorStatus.calledFrom;
  _16 = (int) _15;
  _17 = 1 << _16;
  _18 = (short unsigned int) _17;
  _19 = _14 & _18;
  if (_19 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.1_67 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.1_68 = 0;

  <bb 17> :
  # iftmp.1_53 = PHI <iftmp.1_67(15), iftmp.1_68(16)>
  iftmp.0_69 = iftmp.1_53 != 0;
  goto <bb 19>; [INV]

  <bb 18> :
  OS_permittedContext.4_20 = OS_permittedContext;
  _21 = OS_permittedContext.4_20 + 56;
  _22 = *_21;
  _23 = OS_kernelData.inFunction;
  _24 = (int) _23;
  _25 = 1 << _24;
  _26 = (short unsigned int) _25;
  _27 = _22 & _26;
  iftmp.0_66 = _27 != 0;

  <bb 19> :
  # iftmp.0_52 = PHI <iftmp.0_69(17), iftmp.0_66(18)>
  if (iftmp.0_52 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  if (locktype_64(D) != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  level_71 = OS_intDisableLevelAll;
  # DEBUG level => level_71
  # DEBUG BEGIN_STMT
  olp_72 = &OS_kernelData.oldSuspendAll;
  # DEBUG olp => olp_72
  # DEBUG BEGIN_STMT
  ncp_73 = &OS_kernelData.nestSuspendAll;
  # DEBUG ncp => ncp_73
  goto <bb 24>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  OS_configMode.5_28 = OS_configMode;
  _29 = OS_configMode.5_28 & 1024;
  if (_29 != 0)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  OS_Error (&OS_svc_SuspendInterrupts, 12, &p);

  <bb 24> :
  # td_47 = PHI <td_80(6), td_58(11), td_58(21), td_58(22), td_58(23), td_80(5), td_80(4), td_58(10), td_58(9), td_58(20)>
  # olp_48 = PHI <olp_82(6), olp_75(11), olp_72(21), olp_59(22), olp_59(23), olp_85(5), olp_59(4), olp_78(10), olp_59(9), olp_59(20)>
  # ncp_49 = PHI <ncp_83(6), ncp_76(11), ncp_73(21), ncp_60(22), ncp_60(23), ncp_86(5), ncp_60(4), ncp_79(10), ncp_60(9), ncp_60(20)>
  # level_50 = PHI <level_81(6), level_74(11), level_71(21), level_61(22), level_61(23), level_84(5), level_61(4), level_77(10), level_61(9), level_61(20)>
  # pPrioBeforeSuspend_51 = PHI <pPrioBeforeSuspend_62(6), pPrioBeforeSuspend_62(11), pPrioBeforeSuspend_62(21), pPrioBeforeSuspend_62(22), pPrioBeforeSuspend_62(23), pPrioBeforeSuspend_87(5), pPrioBeforeSuspend_62(4), pPrioBeforeSuspend_62(10), pPrioBeforeSuspend_62(9), pPrioBeforeSuspend_62(20)>
  # DEBUG pPrioBeforeSuspend => pPrioBeforeSuspend_51
  # DEBUG level => level_50
  # DEBUG ncp => ncp_49
  # DEBUG olp => olp_48
  # DEBUG td => td_47
  # DEBUG BEGIN_STMT
  if (ncp_49 != 0B)
    goto <bb 25>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  OS_intDisableLevelMax.6_30 = OS_intDisableLevelMax;
  is_89 = OS_CORTEXM_IntSetDisablingLevel (OS_intDisableLevelMax.6_30);
  # DEBUG is => is_89
  # DEBUG BEGIN_STMT
  if (td_47 != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 26> :
  _31 = td_47->state;
  if (_31 != 5)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  OS_CORTEXM_IntSetDisablingLevel (is_89);
  goto <bb 40>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  _32 = *ncp_49;
  if (_32 == 0)
    goto <bb 29>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  *ncp_49 = 1;
  # DEBUG BEGIN_STMT
  _33 = OS_kernelData.inFunction;
  if (_33 == 1)
    goto <bb 30>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  OS_startTaskIntLockTimingFp.7_34 = OS_startTaskIntLockTimingFp;
  _35 = OS_kernelData.taskCurrent;
  OS_startTaskIntLockTimingFp.7_34 (_35, locktype_64(D));
  # DEBUG BEGIN_STMT
  if (pPrioBeforeSuspend_51 != 0B)
    goto <bb 31>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 31> :
  # DEBUG BEGIN_STMT
  myCoreId_98 = 0;
  # DEBUG myCoreId => myCoreId_98
  # DEBUG BEGIN_STMT
  maxPrio_99 = OS_maxPrio[0];
  # DEBUG maxPrio => maxPrio_99
  # DEBUG BEGIN_STMT
  _36 = td_47->prio;
  *pPrioBeforeSuspend_51 = _36;
  # DEBUG BEGIN_STMT
  _37 = (short unsigned int) maxPrio_99;
  OS_RaiseTaskPriority (td_47, _37);
  goto <bb 34>; [INV]

  <bb 32> :
  # DEBUG BEGIN_STMT
  _38 = OS_kernelData.inFunction;
  if (_38 == 3)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 33> :
  # DEBUG BEGIN_STMT
  OS_startIsrIntLockTimingFp.8_39 = OS_startIsrIntLockTimingFp;
  _40 = OS_kernelData.isrCurrent;
  OS_startIsrIntLockTimingFp.8_39 (_40, locktype_64(D));

  <bb 34> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *olp_48 = is_89;
  # DEBUG BEGIN_STMT
  OS_CORTEXM_IntSetDisablingLevel (level_50);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 40>; [INV]

  <bb 35> :
  # DEBUG BEGIN_STMT
  if (locktype_64(D) != 2)
    goto <bb 36>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 36> :
  _41 = *ncp_49;
  if (_41 != 255)
    goto <bb 37>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 37> :
  # DEBUG BEGIN_STMT
  _42 = *ncp_49;
  _43 = _42;
  _44 = _43 + 1;
  *ncp_49 = _44;
  # DEBUG BEGIN_STMT
  OS_CORTEXM_IntSetDisablingLevel (is_89);
  goto <bb 40>; [INV]

  <bb 38> :
  # DEBUG BEGIN_STMT
  OS_CORTEXM_IntSetDisablingLevel (is_89);
  # DEBUG BEGIN_STMT
  OS_configMode.9_45 = OS_configMode;
  _46 = OS_configMode.9_45 & 1024;
  if (_46 != 0)
    goto <bb 39>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 39> :
  # DEBUG BEGIN_STMT
  OS_Error (&OS_svc_SuspendInterrupts, 30, &p);

  <bb 40> :
  # DEBUG BEGIN_STMT
  p ={v} {CLOBBER};
  return;

}


