
Marking local functions:


Marking externally visible functions: Csm_Int_CallbackNotification Csm_QueueDelJob Csm_QueuePushJob


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Csm_JobExtraData/4 (Csm_JobExtraData) @06bb2900
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Csm_Int_CallbackNotification/2 (write)Csm_Int_CallbackNotification/2 (read)Csm_Int_CallbackNotification/2 (write)
  Availability: not_available
  Varpool flags:
Csm_JobExtraCnfg/3 (Csm_JobExtraCnfg) @06bb2828
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Csm_Int_CallbackNotification/2 (read)Csm_Int_CallbackNotification/2 (read)Csm_Int_CallbackNotification/2 (read)Csm_Int_CallbackNotification/2 (read)
  Availability: not_available
  Varpool flags: read-only
Csm_Int_CallbackNotification/2 (Csm_Int_CallbackNotification) @06b0f000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Csm_JobExtraCnfg/3 (read)Csm_JobExtraCnfg/3 (read)Csm_JobExtraData/4 (write)Csm_JobExtraCnfg/3 (read)Csm_JobExtraCnfg/3 (read)Csm_JobExtraData/4 (read)Csm_JobExtraData/4 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
   Indirect call
   Indirect call
Csm_QueueDelJob/1 (Csm_QueueDelJob) @06b04c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Csm_QueuePushJob/0 (Csm_QueuePushJob) @06b04460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Csm_Int_CallbackNotification (const struct Crypto_JobType * job, Std_ReturnType result)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (result != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = job->jobId;
  _2 = Csm_JobExtraCnfg[_1].csmSWCCallback;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = job->jobId;
  _4 = Csm_JobExtraCnfg[_3].csmSWCCallback;
  _4 (result);

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = job->jobId;
  Csm_JobExtraData[_5].csmQueueLevel = 0;
  goto <bb 15>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = job->jobPrimitiveInputOutput.mode;
  _7 = (unsigned int) _6;
  _8 = _7 & 2;
  if (_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  _9 = job->jobPrimitiveInputOutput.mode;
  _10 = (unsigned int) _9;
  _11 = _10 & 7;
  if (_11 != 7)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _12 = job->jobPrimitiveInfo;
  _13 = _12->callbackId;
  if (_13 != 4294967295)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _14 = job->jobPrimitiveInfo;
  _15 = _14->callbackUpdateNotification;

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = job->jobPrimitiveInputOutput.mode;
  _17 = (unsigned int) _16;
  _18 = _17 & 4;
  if (_18 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _19 = job->jobId;
  _20 = Csm_JobExtraCnfg[_19].csmSWCCallback;
  if (_20 != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _21 = job->jobId;
  _22 = Csm_JobExtraCnfg[_21].csmSWCCallback;
  _22 (result);

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = job->jobId;
  _24 = Csm_JobExtraData[_23].csmQueueLevel;
  if (_24 == 2)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _25 = job->jobId;
  Csm_JobExtraData[_25].csmQueueLevel = 0;

  <bb 15> :
  return;

}


Csm_QueueDelJob (struct Csm_QueueType * csmQueuePtr, struct Crypto_JobType * csmJobPtr)
{
  struct Csm_QueueElementType * previous;
  struct Csm_QueueElementType * current;
  Std_ReturnType retVal;
  Std_ReturnType D.5611;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retVal = 1;
  # DEBUG BEGIN_STMT
  current = 0B;
  # DEBUG BEGIN_STMT
  previous = 0B;
  # DEBUG BEGIN_STMT
  if (csmQueuePtr == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  retVal = 1;
  goto <bb 15>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (csmJobPtr == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  retVal = 1;
  goto <bb 15>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  current = csmQueuePtr->head;
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _1 = current->job;
  if (csmJobPtr == _1)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = csmQueuePtr->head;
  if (current == _2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _3 = current->next;
  csmQueuePtr->head = _3;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _4 = current->next;
  previous->next = _4;

  <bb 11> :
  # DEBUG BEGIN_STMT
  current->job = 0B;
  # DEBUG BEGIN_STMT
  current->next = 0B;
  # DEBUG BEGIN_STMT
  _5 = csmQueuePtr->currentSize;
  _6 = _5 + 4294967295;
  csmQueuePtr->currentSize = _6;
  # DEBUG BEGIN_STMT
  retVal = 0;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  previous = current;
  # DEBUG BEGIN_STMT
  current = current->next;

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (current != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _7 = current->job;
  _8 = _7->jobInfo;
  _9 = _8->jobPriority;
  _10 = csmJobPtr->jobInfo;
  _11 = _10->jobPriority;
  if (_9 >= _11)
    goto <bb 7>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  D.5611 = retVal;
  return D.5611;

}


Csm_QueuePushJob (struct Csm_QueueType * csmQueuePtr, struct Crypto_JobType * csmJobPtr)
{
  struct Csm_QueueElementType * newElement;
  struct Csm_QueueElementType * previous;
  struct Csm_QueueElementType * current;
  uint32 queueElementIndex;
  Std_ReturnType retVal;
  Std_ReturnType D.5597;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retVal = 1;
  # DEBUG BEGIN_STMT
  queueElementIndex = 0;
  # DEBUG BEGIN_STMT
  current = 0B;
  # DEBUG BEGIN_STMT
  previous = 0B;
  # DEBUG BEGIN_STMT
  newElement = 0B;
  # DEBUG BEGIN_STMT
  if (csmQueuePtr == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  retVal = 1;
  goto <bb 22>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (csmJobPtr == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  retVal = 1;
  goto <bb 22>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _1 = csmQueuePtr->currentSize;
  _2 = csmQueuePtr->maxSize;
  if (_1 >= _2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  retVal = 5;
  goto <bb 22>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  current = csmQueuePtr->head;
  # DEBUG BEGIN_STMT
  if (current == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _3 = csmQueuePtr->data;
  _3->job = csmJobPtr;
  # DEBUG BEGIN_STMT
  _4 = csmQueuePtr->data;
  _4->next = 0B;
  # DEBUG BEGIN_STMT
  _5 = csmQueuePtr->data;
  csmQueuePtr->head = _5;
  # DEBUG BEGIN_STMT
  _6 = csmQueuePtr->currentSize;
  _7 = _6 + 1;
  csmQueuePtr->currentSize = _7;
  # DEBUG BEGIN_STMT
  retVal = 0;
  goto <bb 22>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  queueElementIndex = 0;
  goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _8 = csmQueuePtr->data;
  _9 = queueElementIndex * 8;
  _10 = _8 + _9;
  _11 = _10->job;
  if (_11 == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _12 = csmQueuePtr->data;
  _13 = queueElementIndex * 8;
  _14 = _12 + _13;
  _14->job = csmJobPtr;
  # DEBUG BEGIN_STMT
  _15 = csmQueuePtr->data;
  _16 = queueElementIndex * 8;
  newElement = _15 + _16;
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  queueElementIndex = queueElementIndex + 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  _17 = csmQueuePtr->maxSize;
  if (queueElementIndex < _17)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  previous = current;
  # DEBUG BEGIN_STMT
  current = current->next;

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (current != 0B)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _18 = current->job;
  _19 = _18->jobInfo;
  _20 = _19->jobPriority;
  _21 = csmJobPtr->jobInfo;
  _22 = _21->jobPriority;
  if (_20 >= _22)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  if (previous == 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  csmQueuePtr->head = newElement;
  goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  previous->next = newElement;

  <bb 21> :
  # DEBUG BEGIN_STMT
  newElement->next = current;
  # DEBUG BEGIN_STMT
  _23 = csmQueuePtr->currentSize;
  _24 = _23 + 1;
  csmQueuePtr->currentSize = _24;
  # DEBUG BEGIN_STMT
  retVal = 0;

  <bb 22> :
  # DEBUG BEGIN_STMT
  D.5597 = retVal;
  return D.5597;

}


