NvM_CalcCrc_AsyncState ()
{
  uint32 Length;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Length = NvM_CalcCrc_UpdateLength ();
  # DEBUG BEGIN_STMT
  NvM_CalcCrc_Address.11_1 = NvM_CalcCrc_Address;
  NvM_CurrentBlockDescriptorPtr.12_2 = NvM_CurrentBlockDescriptorPtr;
  _3 = NvM_CurrentBlockDescriptorPtr.12_2->blockDesc;
  NvM_CalcCrc_ProcessCrc (NvM_CalcCrc_Address.11_1, &NvM_CalcCrc_CalcBuffer, Length, _3, 0);
  return;

}


NvM_CalcCrc_RemoveElement ()
{
  uint8 BlockFound;
  uint16 BlockPosition;
  const uint16 MaxIterator;

  <bb 2> :
  # DEBUG BEGIN_STMT
  MaxIterator = NvM_RamBlockCrcCalcCount;
  # DEBUG BEGIN_STMT
  BlockPosition = 0;
  # DEBUG BEGIN_STMT
  BlockFound = 0;
  # DEBUG BEGIN_STMT
  SchM_Enter_NvM_SCHM_NVM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  BlockPosition = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (BlockFound == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = (int) BlockPosition;
  _2 = (unsigned int) BlockPosition;
  _3 = _2 + 4294967295;
  _4 = NvM_CrcQueue[_1];
  NvM_CrcQueue[_3] = _4;
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = (int) BlockPosition;
  _6 = NvM_CrcQueue[_5];
  NvM_GlobalBlockNumber.16_7 = NvM_GlobalBlockNumber;
  if (_6 == NvM_GlobalBlockNumber.16_7)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  BlockFound = 1;
  # DEBUG BEGIN_STMT
  NvM_RamBlockCrcCalcCount.17_8 = NvM_RamBlockCrcCalcCount;
  NvM_RamBlockCrcCalcCount.18_9 = NvM_RamBlockCrcCalcCount.17_8;
  _10 = NvM_RamBlockCrcCalcCount.18_9 + 65535;
  NvM_RamBlockCrcCalcCount = _10;
  # DEBUG BEGIN_STMT
  NvM_GlobalBlockNumber.19_11 = NvM_GlobalBlockNumber;
  _12 = (int) NvM_GlobalBlockNumber.19_11;
  _13 = NvM_AdminBlockTable[_12].NvMExtendedStatus;
  NvM_GlobalBlockNumber.20_14 = NvM_GlobalBlockNumber;
  _15 = (int) NvM_GlobalBlockNumber.20_14;
  _16 = _13 & 253;
  NvM_AdminBlockTable[_15].NvMExtendedStatus = _16;

  <bb 7> :
  # DEBUG BEGIN_STMT
  BlockPosition.21_17 = BlockPosition;
  BlockPosition = BlockPosition.21_17 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (BlockPosition < MaxIterator)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Exit_NvM_SCHM_NVM_EXCLUSIVE_AREA_0 ();
  return;

}


NvM_CalcCrc_PeekElement ()
{
  uint16 D.7829;

  <bb 2> :
  # DEBUG BEGIN_STMT
  D.7829 = NvM_CrcQueue[0];
  return D.7829;

}


NvM_CalcCrc_EnqueueElement (uint16 BlockNumber)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  NvM_RamBlockCrcCalcCount.13_1 = NvM_RamBlockCrcCalcCount;
  _2 = (int) NvM_RamBlockCrcCalcCount.13_1;
  NvM_CrcQueue[_2] = BlockNumber;
  # DEBUG BEGIN_STMT
  NvM_RamBlockCrcCalcCount.14_3 = NvM_RamBlockCrcCalcCount;
  NvM_RamBlockCrcCalcCount.15_4 = NvM_RamBlockCrcCalcCount.14_3;
  _5 = NvM_RamBlockCrcCalcCount.15_4 + 1;
  NvM_RamBlockCrcCalcCount = _5;
  # DEBUG BEGIN_STMT
  _6 = (int) BlockNumber;
  _7 = NvM_AdminBlockTable[_6].NvMExtendedStatus;
  _8 = (int) BlockNumber;
  _9 = _7 | 2;
  NvM_AdminBlockTable[_8].NvMExtendedStatus = _9;
  return;

}


NvM_CalcCrc_ProcessCrc (uint8 * CrcDataAdress, uint8 * CalcCrcBuffer, uint32 Length, uint32 BlockDesc, boolean FirstCall)
{
  uint16 * CrcBufPtr16;
  uint32 * CrcBufPtr32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CrcBufPtr32 = CalcCrcBuffer;
  # DEBUG BEGIN_STMT
  CrcBufPtr16 = CalcCrcBuffer;
  # DEBUG BEGIN_STMT
  _1 = (unsigned char) BlockDesc;
  _2 = (unsigned int) _1;
  _3 = _2 & 7;
  if (_3 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = *CrcBufPtr32;
  _5 = Crc_CalculateCRC32 (CrcDataAdress, Length, _4, FirstCall);
  *CrcBufPtr32 = _5;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = (unsigned char) BlockDesc;
  _7 = (unsigned int) _6;
  _8 = _7 & 7;
  if (_8 == 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = *CrcBufPtr16;
  _10 = Crc_CalculateCRC16 (CrcDataAdress, Length, _9, FirstCall);
  *CrcBufPtr16 = _10;

  <bb 6> :
  return;

}


NvM_CheckCrc (const uint8 * DataAddress, uint8 * CrcCalcBuffer, uint32 BlockDesc)
{
  NvM_RequestResultType Result;
  NvM_RequestResultType D.7823;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = *CrcCalcBuffer;
  _2 = *DataAddress;
  if (_1 != _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Result = 1;
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = (unsigned char) BlockDesc;
  _4 = (unsigned int) _3;
  _5 = _4 & 6;
  if (_5 == 2)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _6 = CrcCalcBuffer + 1;
  _7 = *_6;
  _8 = DataAddress + 1;
  _9 = *_8;
  if (_7 != _9)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Result = 1;
  goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = (unsigned char) BlockDesc;
  _11 = (unsigned int) _10;
  _12 = _11 & 7;
  if (_12 == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _13 = CrcCalcBuffer + 2;
  _14 = *_13;
  _15 = DataAddress + 2;
  _16 = *_15;
  if (_14 != _16)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _17 = CrcCalcBuffer + 3;
  _18 = *_17;
  _19 = DataAddress + 3;
  _20 = *_19;
  if (_18 != _20)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Result = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.7823 = Result;
  return D.7823;

}


NvM_CopyCrc (uint8 * DataAddress, uint8 * CrcAddress, uint32 BlockDesc)
{
  uint8 * CrcBufPtr8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CrcBufPtr8 = CrcAddress;
  # DEBUG BEGIN_STMT
  _1 = *CrcBufPtr8;
  *DataAddress = _1;
  # DEBUG BEGIN_STMT
  _2 = (unsigned char) BlockDesc;
  _3 = (unsigned int) _2;
  _4 = _3 & 6;
  if (_4 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = DataAddress + 1;
  _6 = MEM[(uint8 *)CrcBufPtr8 + 1B];
  *_5 = _6;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = (unsigned char) BlockDesc;
  _8 = (unsigned int) _7;
  _9 = _8 & 7;
  if (_9 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = DataAddress + 2;
  _11 = MEM[(uint8 *)CrcBufPtr8 + 2B];
  *_10 = _11;
  # DEBUG BEGIN_STMT
  _12 = DataAddress + 3;
  _13 = MEM[(uint8 *)CrcBufPtr8 + 3B];
  *_12 = _13;

  <bb 6> :
  return;

}


NvM_CalculateCrc (uint8 * DataAddress)
{
  uint32 Length;

  <bb 2> :
  # DEBUG BEGIN_STMT
  NvM_GlobalBlockNumber.6_1 = NvM_GlobalBlockNumber;
  _2 = (int) NvM_GlobalBlockNumber.6_1;
  _3 = NvM_BlockDescriptorTable[_2].nvBlockLength;
  Length = (uint32) _3;
  # DEBUG BEGIN_STMT
  if (Length > 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = Length + 4294901761;
  NvM_CalcCrc_RemainingLength = _4;
  # DEBUG BEGIN_STMT
  Length = 65535;
  # DEBUG BEGIN_STMT
  NvM_CalcCrc_Address = DataAddress;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NvM_GlobalCallLevel.7_5 = NvM_GlobalCallLevel;
  NvM_GlobalCallLevel.8_6 = NvM_GlobalCallLevel.7_5;
  _7 = NvM_GlobalCallLevel.8_6 + 1;
  NvM_GlobalCallLevel = _7;
  # DEBUG BEGIN_STMT
  NvM_GlobalCallLevel.9_8 = NvM_GlobalCallLevel;
  _9 = (int) NvM_GlobalCallLevel.9_8;
  NvM_CurrentFunctionPtr[_9] = NvM_CalcCrc_AsyncState;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NvM_GlobalErrorStatus = 2;

  <bb 4> :
  # DEBUG BEGIN_STMT
  NvM_CurrentBlockDescriptorPtr.10_10 = NvM_CurrentBlockDescriptorPtr;
  _11 = NvM_CurrentBlockDescriptorPtr.10_10->blockDesc;
  NvM_CalcCrc_ProcessCrc (DataAddress, &NvM_CalcCrc_CalcBuffer, Length, _11, 1);
  return;

}


NvM_GetStoredRamCRCAddress ()
{
  uint8 * ret;
  uint8 * D.7803;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret = 0B;
  # DEBUG BEGIN_STMT
  NvM_GlobalBlockNumber.5_1 = NvM_GlobalBlockNumber;
  _2 = (int) NvM_GlobalBlockNumber.5_1;
  _3 = NvM_BlockDescriptorTable[_2].ramBlockCrcIndex;
  _4 = (int) _3;
  ret = &NvM_RamBlockCrcValues[_4];
  # DEBUG BEGIN_STMT
  D.7803 = ret;
  return D.7803;

}


NvM_CalcCrc_GetBlockCrcAddress ()
{
  uint8 * ret;
  uint8 * D.7801;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret = 0B;
  # DEBUG BEGIN_STMT
  _1 = NvM_GetDataAddress ();
  NvM_CurrentBlockDescriptorPtr.4_2 = NvM_CurrentBlockDescriptorPtr;
  _3 = NvM_CurrentBlockDescriptorPtr.4_2->nvBlockLength;
  _4 = (sizetype) _3;
  ret = _1 + _4;
  # DEBUG BEGIN_STMT
  D.7801 = ret;
  return D.7801;

}


NvM_CalcCrc_UpdateLength ()
{
  uint32 NvMCurrentCrcLength;
  uint32 D.7799;

  <bb 2> :
  # DEBUG BEGIN_STMT
  NvMCurrentCrcLength = 0;
  # DEBUG BEGIN_STMT
  NvM_CalcCrc_RemainingLength.0_1 = NvM_CalcCrc_RemainingLength;
  if (NvM_CalcCrc_RemainingLength.0_1 > 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  NvM_CalcCrc_RemainingLength.1_2 = NvM_CalcCrc_RemainingLength;
  _3 = NvM_CalcCrc_RemainingLength.1_2 + 4294901761;
  NvM_CalcCrc_RemainingLength = _3;
  # DEBUG BEGIN_STMT
  NvMCurrentCrcLength = 65535;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NvM_GlobalErrorStatus = 2;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  NvMCurrentCrcLength = NvM_CalcCrc_RemainingLength;
  # DEBUG BEGIN_STMT
  NvM_GlobalCallLevel.2_4 = NvM_GlobalCallLevel;
  _5 = (int) NvM_GlobalCallLevel.2_4;
  NvM_CurrentFunctionPtr[_5] = NvM_StateMachine_TerminateCurrentLevel;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NvM_GlobalErrorStatus = 0;

  <bb 5> :
  # DEBUG BEGIN_STMT
  NvM_CalcCrc_Address.3_6 = NvM_CalcCrc_Address;
  _7 = NvM_CalcCrc_Address.3_6 + 65535;
  NvM_CalcCrc_Address = _7;
  # DEBUG BEGIN_STMT
  D.7799 = NvMCurrentCrcLength;
  return D.7799;

}


