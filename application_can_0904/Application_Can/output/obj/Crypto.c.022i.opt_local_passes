Crypto_HandleQueuingAndCancellation (uint32 ObjectId, struct Crypto_JobType * Job, Std_ReturnType (*Crypto_CancelFuncPtr_t) (uint32, struct Crypto_JobType *) CancelFunction)
{
  struct Crypto_DriverObject * DriverObj;
  Std_ReturnType RetVal;
  struct Crypto_JobType * _1;
  const struct Crypto_JobPrimitiveInfoType * _2;
  unsigned char _3;
  Std_ReturnType _25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_6 = 1;
  # DEBUG RetVal => RetVal_6
  # DEBUG BEGIN_STMT
  DriverObj_8 = &Crypto_DriverObjects[ObjectId_7(D)];
  # DEBUG DriverObj => DriverObj_8
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _1 = DriverObj_8->CurrentJob;
  if (Job_11(D) == _1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal_17 = CancelFunction_15(D) (ObjectId_7(D), Job_11(D));
  # DEBUG RetVal => RetVal_17
  # DEBUG BEGIN_STMT
  if (RetVal_17 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  DriverObj_8->DriverObjectState = 0;
  # DEBUG BEGIN_STMT
  DriverObj_8->CurrentJob = 0B;
  # DEBUG BEGIN_STMT
  DriverObj_8->SkipPeriodicMainFunction = 1;
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Job_11(D)->jobState = 0;
  # DEBUG BEGIN_STMT
  _2 = Job_11(D)->jobPrimitiveInfo;
  _3 = _2->processingType;
  if (_3 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  CryIf_CallbackNotification (Job_11(D), 12);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal_13 = 1;
  # DEBUG RetVal => RetVal_13

  <bb 7> :
  # RetVal_4 = PHI <RetVal_17(4), RetVal_13(6), RetVal_17(3), RetVal_17(5)>
  # DEBUG RetVal => RetVal_4
  # DEBUG BEGIN_STMT
  _25 = RetVal_4;
  return _25;

}


Crypto_HandleQueuingAndProcessing (uint32 ObjectId, struct Crypto_JobType * Job, Std_ReturnType (*Crypto_ProcessFuncPtr_t) (uint32, struct Crypto_JobType *) ProcessFunction)
{
  boolean KeyNeeded;
  Crypto_ServiceInfoType Service;
  struct Crypto_DriverObject * DriverObj;
  Std_ReturnType RetVal;
  const struct Crypto_JobPrimitiveInfoType * _1;
  const struct Crypto_PrimitiveInfoType * _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;
  const struct Crypto_JobPrimitiveInfoType * _9;
  unsigned char _10;
  struct Crypto_JobType * _11;
  unsigned char _12;
  struct Crypto_JobType * _13;
  unsigned char _14;
  int iftmp.2_16;
  int iftmp.2_24;
  int iftmp.2_25;
  Std_ReturnType _57;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_18 = 1;
  # DEBUG RetVal => RetVal_18
  # DEBUG BEGIN_STMT
  DriverObj_20 = &Crypto_DriverObjects[ObjectId_19(D)];
  # DEBUG DriverObj => DriverObj_20
  # DEBUG BEGIN_STMT
  _1 = Job_22(D)->jobPrimitiveInfo;
  _2 = _1->primitiveInfo;
  Service_23 = _2->service;
  # DEBUG Service => Service_23
  # DEBUG BEGIN_STMT
  if (Service_23 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  if (Service_23 != 10)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  if (Service_23 != 9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (Service_23 != 11)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.2_24 = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.2_25 = 0;

  <bb 8> :
  # iftmp.2_16 = PHI <iftmp.2_24(6), iftmp.2_25(7)>
  KeyNeeded_26 = (boolean) iftmp.2_16;
  # DEBUG KeyNeeded => KeyNeeded_26
  # DEBUG BEGIN_STMT
  if (KeyNeeded_26 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _3 = Job_22(D)->cryptoKeyId;
  if (_3 > 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal_27 = 1;
  # DEBUG RetVal => RetVal_27
  goto <bb 28>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (KeyNeeded_26 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _4 = Job_22(D)->cryptoKeyId;
  _5 = Crypto_Keys[_4].KeyState;
  if (_5 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  RetVal_28 = 9;
  # DEBUG RetVal => RetVal_28
  goto <bb 28>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _6 = Job_22(D)->jobState;
  if (_6 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  _7 = Job_22(D)->jobPrimitiveInputOutput.mode;
  _8 = _7 & 1;
  if (_8 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  RetVal_29 = 1;
  # DEBUG RetVal => RetVal_29
  goto <bb 28>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _9 = Job_22(D)->jobPrimitiveInfo;
  _10 = _9->processingType;
  if (_10 == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _11 = DriverObj_20->CurrentJob;
  if (Job_22(D) == _11)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal_56 = ProcessFunction_36(D) (ObjectId_19(D), Job_22(D));
  # DEBUG RetVal => RetVal_56
  goto <bb 28>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _12 = DriverObj_20->DriverObjectState;
  if (_12 == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal_53 = 2;
  # DEBUG RetVal => RetVal_53
  goto <bb 28>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  DriverObj_20->DriverObjectState = 1;
  # DEBUG BEGIN_STMT
  DriverObj_20->CurrentJob = Job_22(D);
  # DEBUG BEGIN_STMT
  DriverObj_20->SkipPeriodicMainFunction = 0;
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Job_22(D)->jobState = 1;
  # DEBUG BEGIN_STMT
  RetVal_51 = ProcessFunction_36(D) (ObjectId_19(D), Job_22(D));
  # DEBUG RetVal => RetVal_51
  goto <bb 28>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _13 = DriverObj_20->CurrentJob;
  if (Job_22(D) == _13)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal_43 = ProcessFunction_36(D) (ObjectId_19(D), Job_22(D));
  # DEBUG RetVal => RetVal_43
  goto <bb 28>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _14 = DriverObj_20->DriverObjectState;
  if (_14 == 1)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal_40 = 2;
  # DEBUG RetVal => RetVal_40
  goto <bb 28>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  DriverObj_20->DriverObjectState = 1;
  # DEBUG BEGIN_STMT
  DriverObj_20->CurrentJob = Job_22(D);
  # DEBUG BEGIN_STMT
  DriverObj_20->SkipPeriodicMainFunction = 1;
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Job_22(D)->jobState = 1;
  # DEBUG BEGIN_STMT
  RetVal_38 = ProcessFunction_36(D) (ObjectId_19(D), Job_22(D));
  # DEBUG RetVal => RetVal_38

  <bb 28> :
  # RetVal_15 = PHI <RetVal_27(10), RetVal_28(13), RetVal_29(16), RetVal_53(21), RetVal_43(24), RetVal_40(26), RetVal_38(27), RetVal_56(19), RetVal_51(22)>
  # DEBUG RetVal => RetVal_15
  # DEBUG BEGIN_STMT
  _57 = RetVal_15;
  return _57;

}


Crypto_CheckBufferLen (struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  unsigned char _1;
  unsigned char _2;
  const struct Crypto_JobPrimitiveInfoType * _3;
  const struct Crypto_PrimitiveInfoType * _4;
  unsigned char _5;
  int _6;
  long unsigned int _7;
  unsigned char _8;
  unsigned char _9;
  const struct Crypto_JobPrimitiveInfoType * _10;
  const struct Crypto_PrimitiveInfoType * _11;
  unsigned char _12;
  int _13;
  long unsigned int _14;
  const struct Crypto_JobPrimitiveInfoType * _15;
  const struct Crypto_PrimitiveInfoType * _16;
  unsigned char _17;
  long unsigned int _18;
  unsigned int _25;
  Std_ReturnType _29;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_22 = 0;
  # DEBUG RetVal => RetVal_22
  # DEBUG BEGIN_STMT
  _1 = Job_24(D)->jobPrimitiveInputOutput.mode;
  _2 = _1 & 2;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = Job_24(D)->jobPrimitiveInfo;
  _4 = _3->primitiveInfo;
  _5 = _4->service;
  _6 = (int) _5;
  _25 = (unsigned int) _6;
  if (_25 <= 8)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _7 = Job_24(D)->jobPrimitiveInputOutput.inputLength;
  if (_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal_26 = RetVal_22 | 1;
  # DEBUG RetVal => RetVal_26

  <bb 6> :
  # RetVal_19 = PHI <RetVal_22(2), RetVal_26(5), RetVal_22(3), RetVal_22(4)>
  # DEBUG RetVal => RetVal_19
  # DEBUG BEGIN_STMT
  _8 = Job_24(D)->jobPrimitiveInputOutput.mode;
  _9 = _8 & 4;
  if (_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = Job_24(D)->jobPrimitiveInfo;
  _11 = _10->primitiveInfo;
  _12 = _11->service;
  _13 = (int) _12;
  switch (_13) <default: <L30> [INV], case 2: <L16> [INV], case 5 ... 6: <L16> [INV], case 8: <L16> [INV]>

  <bb 8> :
<L16>:
  # DEBUG BEGIN_STMT
  _14 = Job_24(D)->jobPrimitiveInputOutput.secondaryInputLength;
  if (_14 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RetVal_27 = RetVal_19 | 1;
  # DEBUG RetVal => RetVal_27

  <bb 10> :
  # RetVal_20 = PHI <RetVal_19(8), RetVal_27(9)>
  # DEBUG RetVal => RetVal_20
  # DEBUG BEGIN_STMT
  _15 = Job_24(D)->jobPrimitiveInfo;
  _16 = _15->primitiveInfo;
  _17 = _16->service;
  if (_17 == 6)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _18 = Job_24(D)->jobPrimitiveInputOutput.tertiaryInputLength;
  if (_18 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RetVal_28 = RetVal_20 | 1;
  # DEBUG RetVal => RetVal_28

  <bb 13> :
  # RetVal_21 = PHI <RetVal_19(6), RetVal_20(11), RetVal_19(7), RetVal_20(10), RetVal_28(12)>
<L30>:
  # DEBUG RetVal => RetVal_21
  # DEBUG BEGIN_STMT
  _29 = RetVal_21;
  return _29;

}


Crypto_CheckBufferPtrs (struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  unsigned char _1;
  unsigned char _2;
  const struct Crypto_JobPrimitiveInfoType * _3;
  const struct Crypto_PrimitiveInfoType * _4;
  unsigned char _5;
  int _6;
  uint8 * _7;
  uint32 * _8;
  const uint8 * _9;
  unsigned char _10;
  unsigned char _11;
  const struct Crypto_JobPrimitiveInfoType * _12;
  const struct Crypto_PrimitiveInfoType * _13;
  unsigned char _14;
  int _15;
  uint8 * _16;
  uint32 * _17;
  const uint8 * _18;
  uint8 * _19;
  uint32 * _20;
  uint8 * _21;
  uint32 * _22;
  const uint8 * _23;
  const uint8 * _24;
  Crypto_VerifyResultType * _25;
  Std_ReturnType _41;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_28 = 0;
  # DEBUG RetVal => RetVal_28
  # DEBUG BEGIN_STMT
  _1 = Job_30(D)->jobPrimitiveInputOutput.mode;
  _2 = _1 & 2;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal_31 = 1;
  # DEBUG RetVal => RetVal_31
  # DEBUG BEGIN_STMT
  _3 = Job_30(D)->jobPrimitiveInfo;
  _4 = _3->primitiveInfo;
  _5 = _4->service;
  _6 = (int) _5;
  switch (_6) <default: <L15> [INV], case 0 ... 2: <L6> [INV], case 3 ... 6: <L1> [INV], case 7 ... 8: <L6> [INV]>

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _7 = Job_30(D)->jobPrimitiveInputOutput.outputPtr;
  if (_7 == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _8 = Job_30(D)->jobPrimitiveInputOutput.outputLengthPtr;
  if (_8 == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
<L6>:
  # DEBUG BEGIN_STMT
  _9 = Job_30(D)->jobPrimitiveInputOutput.inputPtr;
  if (_9 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal_33 = 0;
  # DEBUG RetVal => RetVal_33
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal_32 = 1;
  # DEBUG RetVal => RetVal_32
  goto <bb 10>; [INV]

  <bb 9> :
<L15>:
  # DEBUG BEGIN_STMT
  RetVal_34 = 0;
  # DEBUG RetVal => RetVal_34
  # DEBUG BEGIN_STMT

  <bb 10> :
  # RetVal_26 = PHI <RetVal_28(2), RetVal_31(4), RetVal_31(5), RetVal_32(8), RetVal_34(9), RetVal_33(7)>
  # DEBUG RetVal => RetVal_26
  # DEBUG BEGIN_STMT
  _10 = Job_30(D)->jobPrimitiveInputOutput.mode;
  _11 = _10 & 4;
  if (_11 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  RetVal_35 = 1;
  # DEBUG RetVal => RetVal_35
  # DEBUG BEGIN_STMT
  _12 = Job_30(D)->jobPrimitiveInfo;
  _13 = _12->primitiveInfo;
  _14 = _13->service;
  _15 = (int) _14;
  switch (_15) <default: <L43> [INV], case 0 ... 1: <L22> [INV], case 2: <L36> [INV], case 3 ... 4: <L22> [INV], case 5: <L19> [INV], case 6: <L33> [INV], case 7: <L22> [INV], case 8: <L36> [INV], case 11: <L22> [INV]>

  <bb 12> :
<L19>:
  # DEBUG BEGIN_STMT
  _16 = Job_30(D)->jobPrimitiveInputOutput.secondaryOutputPtr;
  if (_16 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _17 = Job_30(D)->jobPrimitiveInputOutput.secondaryOutputLengthPtr;
  if (_17 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  _18 = Job_30(D)->jobPrimitiveInputOutput.secondaryInputPtr;
  if (_18 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
<L22>:
  # DEBUG BEGIN_STMT
  _19 = Job_30(D)->jobPrimitiveInputOutput.outputPtr;
  if (_19 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  _20 = Job_30(D)->jobPrimitiveInputOutput.outputLengthPtr;
  if (_20 != 0B)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  RetVal_38 = 0;
  # DEBUG RetVal => RetVal_38
  goto <bb 27>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  RetVal_39 = 1;
  # DEBUG RetVal => RetVal_39
  goto <bb 27>; [INV]

  <bb 19> :
<L33>:
  # DEBUG BEGIN_STMT
  _21 = Job_30(D)->jobPrimitiveInputOutput.outputPtr;
  if (_21 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  _22 = Job_30(D)->jobPrimitiveInputOutput.outputLengthPtr;
  if (_22 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  _23 = Job_30(D)->jobPrimitiveInputOutput.tertiaryInputPtr;
  if (_23 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
<L36>:
  # DEBUG BEGIN_STMT
  _24 = Job_30(D)->jobPrimitiveInputOutput.secondaryInputPtr;
  if (_24 != 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 23> :
  _25 = Job_30(D)->jobPrimitiveInputOutput.verifyPtr;
  if (_25 != 0B)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  RetVal_36 = 0;
  # DEBUG RetVal => RetVal_36
  goto <bb 27>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  RetVal_37 = 1;
  # DEBUG RetVal => RetVal_37
  goto <bb 27>; [INV]

  <bb 26> :
<L43>:
  # DEBUG BEGIN_STMT
  RetVal_40 = 0;
  # DEBUG RetVal => RetVal_40
  # DEBUG BEGIN_STMT

  <bb 27> :
  # RetVal_27 = PHI <RetVal_26(10), RetVal_35(12), RetVal_35(13), RetVal_35(14), RetVal_39(18), RetVal_35(19), RetVal_35(20), RetVal_35(21), RetVal_37(25), RetVal_40(26), RetVal_38(17), RetVal_36(24)>
  # DEBUG RetVal => RetVal_27
  # DEBUG BEGIN_STMT
  _41 = RetVal_27;
  return _41;

}


Crypto_CheckBufferPtrsVal (struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  unsigned char _1;
  unsigned char _2;
  const struct Crypto_JobPrimitiveInfoType * _3;
  const struct Crypto_PrimitiveInfoType * _4;
  unsigned char _5;
  int _6;
  uint32 * _7;
  long unsigned int _8;
  unsigned char _9;
  unsigned char _10;
  const struct Crypto_JobPrimitiveInfoType * _11;
  const struct Crypto_PrimitiveInfoType * _12;
  unsigned char _13;
  int _14;
  uint32 * _15;
  long unsigned int _16;
  const struct Crypto_JobPrimitiveInfoType * _17;
  const struct Crypto_PrimitiveInfoType * _18;
  unsigned char _19;
  uint32 * _20;
  long unsigned int _21;
  unsigned int _28;
  unsigned int _29;
  Std_ReturnType _33;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_25 = 0;
  # DEBUG RetVal => RetVal_25
  # DEBUG BEGIN_STMT
  _1 = Job_27(D)->jobPrimitiveInputOutput.mode;
  _2 = _1 & 2;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = Job_27(D)->jobPrimitiveInfo;
  _4 = _3->primitiveInfo;
  _5 = _4->service;
  _6 = (int) _5;
  _28 = (unsigned int) _6;
  _29 = _28 + 4294967293;
  if (_29 <= 3)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _7 = Job_27(D)->jobPrimitiveInputOutput.outputLengthPtr;
  _8 = *_7;
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal_30 = RetVal_25 | 1;
  # DEBUG RetVal => RetVal_30

  <bb 6> :
  # RetVal_22 = PHI <RetVal_25(2), RetVal_30(5), RetVal_25(3), RetVal_25(4)>
  # DEBUG RetVal => RetVal_22
  # DEBUG BEGIN_STMT
  _9 = Job_27(D)->jobPrimitiveInputOutput.mode;
  _10 = _9 & 4;
  if (_10 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _11 = Job_27(D)->jobPrimitiveInfo;
  _12 = _11->primitiveInfo;
  _13 = _12->service;
  _14 = (int) _13;
  switch (_14) <default: <L29> [INV], case 0 ... 1: <L11> [INV], case 3 ... 7: <L11> [INV], case 11: <L11> [INV]>

  <bb 8> :
<L11>:
  # DEBUG BEGIN_STMT
  _15 = Job_27(D)->jobPrimitiveInputOutput.outputLengthPtr;
  _16 = *_15;
  if (_16 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RetVal_31 = RetVal_22 | 1;
  # DEBUG RetVal => RetVal_31

  <bb 10> :
  # RetVal_23 = PHI <RetVal_22(8), RetVal_31(9)>
  # DEBUG RetVal => RetVal_23
  # DEBUG BEGIN_STMT
  _17 = Job_27(D)->jobPrimitiveInfo;
  _18 = _17->primitiveInfo;
  _19 = _18->service;
  if (_19 == 5)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _20 = Job_27(D)->jobPrimitiveInputOutput.secondaryOutputLengthPtr;
  _21 = *_20;
  if (_21 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RetVal_32 = RetVal_23 | 1;
  # DEBUG RetVal => RetVal_32

  <bb 13> :
  # RetVal_24 = PHI <RetVal_22(6), RetVal_23(11), RetVal_22(7), RetVal_23(10), RetVal_32(12)>
<L29>:
  # DEBUG RetVal => RetVal_24
  # DEBUG BEGIN_STMT
  _33 = RetVal_24;
  return _33;

}


Crypto_CheckMode (struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  const struct Crypto_JobPrimitiveInfoType * _1;
  const struct Crypto_PrimitiveInfoType * _2;
  unsigned char _3;
  int _4;
  unsigned char _5;
  unsigned char _6;
  unsigned char _7;
  Std_ReturnType _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_9 = 1;
  # DEBUG RetVal => RetVal_9
  # DEBUG BEGIN_STMT
  _1 = Job_11(D)->jobPrimitiveInfo;
  _2 = _1->primitiveInfo;
  _3 = _2->service;
  _4 = (int) _3;
  if (_4 == 9)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  RetVal_12 = 0;
  # DEBUG RetVal => RetVal_12
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _5 = Job_11(D)->jobPrimitiveInputOutput.mode;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _6 = Job_11(D)->jobPrimitiveInputOutput.mode;
  if (_6 <= 4)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _7 = Job_11(D)->jobPrimitiveInputOutput.mode;
  if (_7 == 7)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal_13 = 0;
  # DEBUG RetVal => RetVal_13

  <bb 8> :
  # RetVal_8 = PHI <RetVal_12(3), RetVal_9(6), RetVal_9(4), RetVal_13(7)>
  # DEBUG RetVal => RetVal_8
  # DEBUG BEGIN_STMT
  _14 = RetVal_8;
  return _14;

}


Crypto_MainFunction ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_PL_MainFunction ();
  return;

}


Crypto_CancelJob (uint32 objectId, struct Crypto_JobType * job)
{
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.3_1;
  const struct Crypto_JobPrimitiveInfoType * _2;
  const struct Crypto_PrimitiveInfoType * _3;
  unsigned char _4;
  const struct Crypto_JobPrimitiveInfoType * _5;
  const struct Crypto_PrimitiveInfoType * _6;
  unsigned char _7;
  const struct Crypto_JobPrimitiveInfoType * _8;
  const struct Crypto_PrimitiveInfoType * _9;
  unsigned char _10;
  const struct Crypto_JobPrimitiveInfoType * _11;
  const struct Crypto_PrimitiveInfoType * _12;
  unsigned char _13;
  const struct Crypto_JobPrimitiveInfoType * _14;
  const struct Crypto_PrimitiveInfoType * _15;
  unsigned char _16;
  const struct Crypto_JobPrimitiveInfoType * _17;
  const struct Crypto_PrimitiveInfoType * _18;
  unsigned char _19;
  Std_ReturnType _38;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_22 = 1;
  # DEBUG RetVal => RetVal_22
  # DEBUG BEGIN_STMT
  Crypto_Initialized.3_1 = Crypto_Initialized;
  if (Crypto_Initialized.3_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 14, 0);
  # DEBUG BEGIN_STMT
  RetVal_37 = 1;
  # DEBUG RetVal => RetVal_37
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (job_24(D) == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 14, 2);
  # DEBUG BEGIN_STMT
  RetVal_35 = 1;
  # DEBUG RetVal => RetVal_35
  goto <bb 17>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (objectId_25(D) == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _2 = job_24(D)->jobPrimitiveInfo;
  _3 = _2->primitiveInfo;
  _4 = _3->service;
  if (_4 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _5 = job_24(D)->jobPrimitiveInfo;
  _6 = _5->primitiveInfo;
  _7 = _6->algorithm.family;
  if (_7 == 20)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _8 = job_24(D)->jobPrimitiveInfo;
  _9 = _8->primitiveInfo;
  _10 = _9->algorithm.mode;
  if (_10 == 16)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal_27 = Crypto_HandleQueuingAndCancellation (objectId_25(D), job_24(D), Crypto_PL_MACGENERATE_AES_CMAC_Cancel);
  # DEBUG RetVal => RetVal_27
  goto <bb 17>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _11 = job_24(D)->jobPrimitiveInfo;
  _12 = _11->primitiveInfo;
  _13 = _12->service;
  if (_13 == 2)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  _14 = job_24(D)->jobPrimitiveInfo;
  _15 = _14->primitiveInfo;
  _16 = _15->algorithm.family;
  if (_16 == 20)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _17 = job_24(D)->jobPrimitiveInfo;
  _18 = _17->primitiveInfo;
  _19 = _18->algorithm.mode;
  if (_19 == 16)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  RetVal_29 = Crypto_HandleQueuingAndCancellation (objectId_25(D), job_24(D), Crypto_PL_MACVERIFY_AES_CMAC_Cancel);
  # DEBUG RetVal => RetVal_29
  goto <bb 17>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 4);
  # DEBUG BEGIN_STMT
  RetVal_31 = 1;
  # DEBUG RetVal => RetVal_31
  goto <bb 17>; [INV]

  <bb 16> :
<L15>:
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 14, 4);
  # DEBUG BEGIN_STMT
  RetVal_33 = 1;
  # DEBUG RetVal => RetVal_33
  # DEBUG BEGIN_STMT

  <bb 17> :
  # RetVal_20 = PHI <RetVal_37(3), RetVal_35(5), RetVal_29(14), RetVal_33(16), RetVal_27(10), RetVal_31(15)>
  # DEBUG RetVal => RetVal_20
  # DEBUG BEGIN_STMT
  _38 = RetVal_20;
  return _38;

}


Crypto_ProcessJob_Dispatch (uint32 objectId, Std_ReturnType RetVal, struct Crypto_JobType * job)
{
  const struct Crypto_JobPrimitiveInfoType * _1;
  const struct Crypto_PrimitiveInfoType * _2;
  unsigned char _3;
  const struct Crypto_JobPrimitiveInfoType * _4;
  const struct Crypto_PrimitiveInfoType * _5;
  unsigned char _6;
  const struct Crypto_JobPrimitiveInfoType * _7;
  const struct Crypto_PrimitiveInfoType * _8;
  unsigned char _9;
  const struct Crypto_JobPrimitiveInfoType * _10;
  const struct Crypto_PrimitiveInfoType * _11;
  unsigned char _12;
  const struct Crypto_JobPrimitiveInfoType * _13;
  const struct Crypto_PrimitiveInfoType * _14;
  unsigned char _15;
  const struct Crypto_JobPrimitiveInfoType * _16;
  const struct Crypto_PrimitiveInfoType * _17;
  unsigned char _18;
  Std_ReturnType _32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (objectId_21(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = job_23(D)->jobPrimitiveInfo;
  _2 = _1->primitiveInfo;
  _3 = _2->service;
  if (_3 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _4 = job_23(D)->jobPrimitiveInfo;
  _5 = _4->primitiveInfo;
  _6 = _5->algorithm.family;
  if (_6 == 20)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = job_23(D)->jobPrimitiveInfo;
  _8 = _7->primitiveInfo;
  _9 = _8->algorithm.mode;
  if (_9 == 16)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal_25 = Crypto_HandleQueuingAndProcessing (objectId_21(D), job_23(D), Crypto_PL_MACGENERATE_AES_CMAC_Process);
  # DEBUG RetVal => RetVal_25
  goto <bb 13>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = job_23(D)->jobPrimitiveInfo;
  _11 = _10->primitiveInfo;
  _12 = _11->service;
  if (_12 == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _13 = job_23(D)->jobPrimitiveInfo;
  _14 = _13->primitiveInfo;
  _15 = _14->algorithm.family;
  if (_15 == 20)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _16 = job_23(D)->jobPrimitiveInfo;
  _17 = _16->primitiveInfo;
  _18 = _17->algorithm.mode;
  if (_18 == 16)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal_27 = Crypto_HandleQueuingAndProcessing (objectId_21(D), job_23(D), Crypto_PL_MACVERIFY_AES_CMAC_Process);
  # DEBUG RetVal => RetVal_27
  goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 4);
  # DEBUG BEGIN_STMT
  RetVal_29 = 1;
  # DEBUG RetVal => RetVal_29
  goto <bb 13>; [INV]

  <bb 12> :
<L11>:
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 4);
  # DEBUG BEGIN_STMT
  RetVal_31 = 1;
  # DEBUG RetVal => RetVal_31
  # DEBUG BEGIN_STMT

  <bb 13> :
  # RetVal_19 = PHI <RetVal_27(10), RetVal_31(12), RetVal_25(6), RetVal_29(11)>
  # DEBUG RetVal => RetVal_19
  # DEBUG BEGIN_STMT
  _32 = RetVal_19;
  return _32;

}


Crypto_ProcessJob (uint32 objectId, struct Crypto_JobType * job)
{
  Std_ReturnType RetVal;
  unsigned char Crypto_Initialized.1_1;
  unsigned char _2;
  const struct Crypto_JobPrimitiveInfoType * _3;
  const struct Crypto_PrimitiveInfoType * _4;
  unsigned char _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;
  Std_ReturnType _36;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_13 = 1;
  # DEBUG RetVal => RetVal_13
  # DEBUG BEGIN_STMT
  Crypto_Initialized.1_1 = Crypto_Initialized;
  if (Crypto_Initialized.1_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 0);
  # DEBUG BEGIN_STMT
  RetVal_32 = 1;
  # DEBUG RetVal => RetVal_32
  goto <bb 15>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (job_15(D) == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 2);
  # DEBUG BEGIN_STMT
  RetVal_30 = 1;
  # DEBUG RetVal => RetVal_30
  goto <bb 15>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = Crypto_CheckMode (job_15(D));
  if (_2 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _3 = job_15(D)->jobPrimitiveInfo;
  _4 = _3->primitiveInfo;
  _5 = _4->service;
  if (_5 > 11)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 4);
  # DEBUG BEGIN_STMT
  RetVal_28 = 1;
  # DEBUG RetVal => RetVal_28
  goto <bb 15>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _6 = Crypto_CheckBufferPtrs (job_15(D));
  if (_6 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 2);
  # DEBUG BEGIN_STMT
  RetVal_26 = 1;
  # DEBUG RetVal => RetVal_26
  goto <bb 15>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _7 = Crypto_CheckBufferLen (job_15(D));
  if (_7 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _8 = Crypto_CheckBufferPtrsVal (job_15(D));
  if (_8 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 5);
  # DEBUG BEGIN_STMT
  RetVal_24 = 1;
  # DEBUG RetVal => RetVal_24
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  RetVal_22 = Crypto_ProcessJob_Dispatch (objectId_20(D), RetVal_13, job_15(D));
  # DEBUG RetVal => RetVal_22

  <bb 15> :
  # RetVal_9 = PHI <RetVal_32(3), RetVal_30(5), RetVal_28(8), RetVal_26(10), RetVal_24(13), RetVal_22(14)>
  # DEBUG RetVal => RetVal_9
  # DEBUG BEGIN_STMT
  if (RetVal_9 == 11)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 4);
  goto <bb 21>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  if (RetVal_9 == 4)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 3);
  goto <bb 21>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (RetVal_9 == 3)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 0);

  <bb 21> :
  # DEBUG BEGIN_STMT
  _36 = RetVal_9;
  return _36;

}


Crypto_Init ()
{
  unsigned char Crypto_Initialized.0_1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_Initialized.0_1 = Crypto_Initialized;
  if (Crypto_Initialized.0_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_PL_Init ();
  # DEBUG BEGIN_STMT
  Crypto_Initialized = 1;

  <bb 4> :
  return;

}


