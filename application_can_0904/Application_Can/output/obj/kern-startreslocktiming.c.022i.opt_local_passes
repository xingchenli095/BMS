__attribute__((target ("general-regs-only")))
OS_StartResLockTiming (struct os_resourcedynamic_t * rd, os_tick_t tLim)
{
  os_tick_t OS_hwtStartDelta;
  const struct os_isr_t * isr;
  const struct os_task_t * const taskCurrent;
  os_tick_t remaining;
  os_tick_t used;
  struct os_kerneldata_t * const kernel_data;
  const struct os_hwt_t * _1;
  const struct os_hwtdrv_t * _2;
  void (*<T521>) (const struct os_hwt_t *) _3;
  const struct os_hwt_t * _4;
  unsigned int _5;
  unsigned int _6;
  unsigned char _7;
  unsigned char _8;
  unsigned int _9;
  unsigned int _10;
  struct os_taskaccounting_t * _11;
  unsigned int _12;
  unsigned int _13;
  struct os_taskaccounting_t * _14;
  unsigned int _15;
  unsigned char _16;
  const struct os_isr_t * OS_isrTableBase.0_17;
  short unsigned int _18;
  unsigned int _19;
  unsigned int _20;
  unsigned char _21;
  unsigned int _22;
  unsigned int _23;
  struct os_israccounting_t * _24;
  unsigned int _25;
  unsigned int _26;
  struct os_israccounting_t * _27;
  unsigned int _28;
  unsigned int _29;
  unsigned int _30;
  unsigned int _31;
  unsigned int _32;
  unsigned int _33;
  unsigned int _34;
  unsigned int _35;
  unsigned int _36;
  unsigned char _37;
  unsigned char _38;
  const struct os_hwt_t * _39;
  unsigned int _40;
  const struct os_hwt_t * _41;
  const struct os_hwt_t * _42;
  const struct os_hwtdrv_t * _43;
  os_boolean_t (*<T52b>) (const struct os_hwt_t *, os_timervalue_t, os_tick_t) _44;
  const struct os_hwt_t * _45;
  unsigned int _46;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data_52 = &OS_kernelData;
  # DEBUG kernel_data => kernel_data_52
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = OS_executionTimer[0];
  _2 = _1->driver;
  _3 = _2->hwtStop;
  _4 = OS_executionTimer[0];
  _3 (_4);
  # DEBUG BEGIN_STMT
  used_56 = OS_GetTimeUsed ();
  # DEBUG used => used_56
  # DEBUG BEGIN_STMT
  _5 = OS_kernelData.accounting.etUsed;
  _6 = used_56 + _5;
  OS_kernelData.accounting.etUsed = _6;
  # DEBUG BEGIN_STMT
  _7 = OS_kernelData.accounting.inFunction;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  taskCurrent_60 = OS_kernelData.taskCurrent;
  # DEBUG taskCurrent => taskCurrent_60
  # DEBUG BEGIN_STMT
  _8 = taskCurrent_60->flags;
  _9 = (unsigned int) _8;
  _10 = _9 & 64;
  if (_10 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  _11 = taskCurrent_60->accounting;
  _12 = _11->etMax;
  _13 = OS_kernelData.accounting.etUsed;
  if (_12 < _13)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = taskCurrent_60->accounting;
  _15 = OS_kernelData.accounting.etUsed;
  _14->etMax = _15;
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _16 = OS_kernelData.accounting.inFunction;
  if (_16 == 3)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  OS_isrTableBase.0_17 = OS_isrTableBase;
  _18 = OS_kernelData.isrCurrent;
  _19 = (unsigned int) _18;
  _20 = _19 * 68;
  isr_58 = OS_isrTableBase.0_17 + _20;
  # DEBUG isr => isr_58
  # DEBUG BEGIN_STMT
  _21 = isr_58->flags;
  _22 = (unsigned int) _21;
  _23 = _22 & 64;
  if (_23 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _24 = isr_58->accounting;
  _25 = _24->etMax;
  _26 = OS_kernelData.accounting.etUsed;
  if (_25 < _26)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _27 = isr_58->accounting;
  _28 = OS_kernelData.accounting.etUsed;
  _27->etMax = _28;

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _29 = OS_kernelData.accounting.etLimit;
  if (_29 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _30 = OS_kernelData.accounting.etUsed;
  _31 = OS_kernelData.accounting.etLimit;
  if (_30 >= _31)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  OS_ExceedExecTime ();
  goto <bb 22>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _32 = OS_kernelData.accounting.etLimit;
  if (_32 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  remaining_64 = 4294967295;
  # DEBUG remaining => remaining_64
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _33 = OS_kernelData.accounting.etLimit;
  _34 = OS_kernelData.accounting.etUsed;
  remaining_63 = _33 - _34;
  # DEBUG remaining => remaining_63

  <bb 16> :
  # remaining_47 = PHI <remaining_64(14), remaining_63(15)>
  # DEBUG remaining => remaining_47
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _35 = OS_kernelData.accounting.etUsed;
  rd_65(D)->etUsed = _35;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _36 = OS_kernelData.accounting.etLimit;
  rd_65(D)->etLimit = _36;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _37 = OS_kernelData.accounting.etType;
  rd_65(D)->etType = _37;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = OS_kernelData.inFunction;
  OS_kernelData.accounting.inFunction = _38;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etUsed = 0;
  # DEBUG BEGIN_STMT
  if (tLim_71(D) >= remaining_47)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etLimit = remaining_47;
  goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etLimit = tLim_71(D);
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etType = 2;

  <bb 19> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_hwtStartDelta_75 = OS_kernelData.accounting.etLimit;
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_75
  # DEBUG BEGIN_STMT
  _39 = OS_executionTimer[0];
  _40 = _39->maxDelta;
  if (OS_hwtStartDelta_75 > _40)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _41 = OS_executionTimer[0];
  OS_hwtStartDelta_76 = _41->defDelta;
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_76

  <bb 21> :
  # OS_hwtStartDelta_48 = PHI <OS_hwtStartDelta_75(19), OS_hwtStartDelta_76(20)>
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_48
  # DEBUG BEGIN_STMT
  _42 = OS_executionTimer[0];
  _43 = _42->driver;
  _44 = _43->hwtStart;
  _45 = OS_executionTimer[0];
  _46 = OS_kernelData.accounting.frc;
  _44 (_45, _46, OS_hwtStartDelta_48);

  <bb 22> :
  # DEBUG BEGIN_STMT
  return;

}


