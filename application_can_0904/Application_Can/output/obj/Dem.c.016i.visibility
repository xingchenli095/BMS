
Marking local functions: Dem_IsMILEvent Dem_OpCycleProcessEventCycleStart Dem_OpCycleProcessCycleStart Dem_OpCycleProcessEventCycleEnd Dem_OpCycleProcessCycleEnd Dem_CheckWIROffCriteriaFulfilled Dem_SetCycleCounterRole Dem_ProcessIndicatorOffCriteria Dem_ProcessIndicator Dem_UpdateFailureCounterCycleStart Dem_ProcessFailureCounterReset Dem_SetCDTCOnConfirmation Dem_InitMaxOBDOccOrder Dem_RearrangeOBDOccurrenceOrder Dem_InitMaxOccOrder Dem_RearrangeOccurrenceOrder Dem_UpdateOccurrenceOrder Dem_SearchForEntryToReplace Dem_SearchForEmptyEntry Dem_StoreED Dem_StoreOBDFreezeFrame Dem_StoreFF Dem_ProcessEventEntryEData Dem_ProcessEventEntryFFData Dem_ReplaceEventEntry Dem_FindOrAllocateEventEntry Dem_ProcessEventStatusUpdate Dem_ProcessEventEntry Dem_SetOBDFFOccurrenceOrder Dem_UpdateAgingCounter Dem_FindFFSegIdx Dem_PermanentMemoryInit Dem_RestoreDerivedEventStatus Dem_RestoreImmediateData Dem_ResetNvData Dem_NvMGetNvRAMBlockStatus Dem_ReportErrorStatusCore


Marking externally visible functions: Dem_ProcessIndicatorOnCriteria Dem_IncrementFailureCounter Dem_ReadExternalDataElement Dem_UpdateEventIdOccurKinds Dem_ProcessEvent Dem_SelectEntryOfOBDFreezeFrameEvent Dem_ProcessMultipleOBDFreezeFrameEntry Dem_CheckErrorQueueEntryForStatus Dem_CheckErrorReQueueEntry Dem_CheckErrorQueueEntry Dem_WriteErrorQueueEntry Dem_ReadErrorQueueEntry Dem_InvalidateErrorQueueEntry Dem_MainFunction Dem_SetDTCSuppression Dem_GetNumberOfEventMemoryEntries Dem_GetEventMemoryOverflow Dem_GetEventExtendedDataRecord Dem_ASR42_GetEventFreezeFrameData Dem_GetEventFreezeFrameData Dem_GetIndicatorStatus Dem_GetFaultDetectionCounter Dem_GetEventFreezeFrameDataEx Dem_GetEventExtendedDataRecordEx Dem_GetDebouncingOfEvent Dem_SetEnableCondition Dem_GetDTCOfEvent Dem_GetEventTested Dem_GetEventFailed Dem_GetEventStatus Dem_SetCycleQualified Dem_SetOperationCycleState Dem_ClearPrestoredFreezeFrame Dem_PrestoreFreezeFrame Dem_ResetEventDebounceStatus Dem_ResetEventStatus Dem_SetEventStatus Dem_ReportErrorStatusPreInit Dem_ReportErrorStatus Dem_Shutdown Dem_Init Dem_PreInit


Marking externally visible variables: Dem_SizeEventMem Dem_NvDataBlockId Dem_GateEntryData Dem_NvGateEntryData Dem_EntryDataFreePos Dem_EntryData Dem_EventMem Dem_NvData Dem_NvGateEntrySecondaryData Dem_NvGateEntryPrimaryData Dem_ClearDtcAsyncStatus Dem_NvMGateEntryInfo Dem_ErrorQueue Dem_DoProcessFaultConfirmation


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Dem_FailureCycleCounterInfo/197 (Dem_FailureCycleCounterInfo) @0702fc60
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_ProcessIndicatorOnCriteria/96 (read)
  Availability: not_available
  Varpool flags: read-only
Dem_GetVisibleUdsDTC/196 (Dem_GetVisibleUdsDTC) @07030000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_UpdateEventIdOccurKinds/74 Dem_UpdateEventIdOccurKinds/74 
  Calls: 
Dem_GbiDTCOrigin/195 (Dem_GbiDTCOrigin) @0700fee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_UpdateEventIdOccurKinds/74 
  Calls: 
Dem_SizeOfED/194 (Dem_SizeOfED) @0700f700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEventEntryEData/78 
  Calls: 
Dem_EDEntryData/193 (Dem_EDEntryData) @0700f620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEventEntryEData/78 
  Calls: 
TS_AtomicSetBit_8/192 (TS_AtomicSetBit_8) @0700f1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ReplaceEventEntry/76 
  Calls: 
Dem_ClearEventEntry/191 (Dem_ClearEventEntry) @0700f0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ReplaceEventEntry/76 
  Calls: 
Dem_GbiDTCOriginIdx/190 (Dem_GbiDTCOriginIdx) @06ff8e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_UpdateOccurrenceOrder/85 Dem_FindOrAllocateEventEntry/75 
  Calls: 
Dem_UpdateEventStatusOnQualification/189 (Dem_UpdateEventStatusOnQualification) @06ff89a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEventStatusUpdate/73 
  Calls: 
Dem_CheckForEventWIRUpdate/188 (Dem_CheckForEventWIRUpdate) @06ff88c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEventStatusUpdate/73 
  Calls: 
Dem_GbiPriority/187 (Dem_GbiPriority) @06ff8540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_SearchForEntryToReplace/84 Dem_SearchForEntryToReplace/84 Dem_SelectEntryOfOBDFreezeFrameEvent/69 Dem_SelectEntryOfOBDFreezeFrameEvent/69 
  Calls: 
Dem_GetVisibleCmbDTC/186 (Dem_GetVisibleCmbDTC) @06ff8460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_SelectEntryOfOBDFreezeFrameEvent/69 
  Calls: 
Dem_DataElement/185 (Dem_DataElement) @06ff7120
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_StoreOBDFreezeFrame/80 (read)Dem_StoreED/81 (read)Dem_StoreFF/79 (read)Dem_ReadExternalDataElement/82 (read)Dem_ReadExternalDataElement/82 (read)
  Availability: not_available
  Varpool flags: read-only
Dem_PidClass/184 (Dem_PidClass) @06ff70d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_StoreOBDFreezeFrame/80 (addr)
  Availability: not_available
  Varpool flags: read-only
Dem_ProcessClearDTC/183 (Dem_ProcessClearDTC) @06fe11c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_MainFunction/54 
  Calls: 
Dem_InternalSetDTCSuppression/182 (Dem_InternalSetDTCSuppression) @06fa6e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_SetDTCSuppression/53 
  Calls: 
Dem_GetMappedDTCOrigin/181 (Dem_GetMappedDTCOrigin) @06fa69a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_GetNumberOfEventMemoryEntries/52 Dem_GetEventMemoryOverflow/51 
  Calls: 
Dem_AssembleExtendedDataSeg/180 (Dem_AssembleExtendedDataSeg) @06fa67e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_GetEventExtendedDataRecord/50 
  Calls: 
Dem_EDSegment/179 (Dem_EDSegment) @06fb2240
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_GetEventExtendedDataRecord/50 (addr)Dem_StoreED/81 (addr)
  Availability: not_available
  Varpool flags: read-only
Dem_FindEDNumIndex/178 (Dem_FindEDNumIndex) @06fa6700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_GetEventExtendedDataRecord/50 
  Calls: 
Dem_EDClass/177 (Dem_EDClass) @06fb2120
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_GetEventExtendedDataRecord/50 (addr)Dem_ProcessEventEntryEData/78 (addr)
  Availability: not_available
  Varpool flags: read-only
Dem_GbiEDClassIdx/176 (Dem_GbiEDClassIdx) @06fa6620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEventEntryEData/78 Dem_GetEventExtendedDataRecord/50 
  Calls: 
Dem_SizeOfFFSegment/175 (Dem_SizeOfFFSegment) @06fa61c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_FindFFSegIdx/66 Dem_ASR42_GetEventFreezeFrameData/49 
  Calls: 
Dem_FFSegment/174 (Dem_FFSegment) @06fa4f30
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_ASR42_GetEventFreezeFrameData/49 (addr)Dem_FindFFSegIdx/66 (read)Dem_FindFFSegIdx/66 (addr)Dem_StoreFF/79 (addr)
  Availability: not_available
  Varpool flags: read-only
Dem_SizeOfFF/173 (Dem_SizeOfFF) @06fa60e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ASR42_GetEventFreezeFrameData/49 
  Calls: 
Dem_FFEntryData/172 (Dem_FFEntryData) @06fa6000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEventEntryFFData/77 Dem_ASR42_GetEventFreezeFrameData/49 
  Calls: 
Dem_CheckFFRecNumStored/171 (Dem_CheckFFRecNumStored) @06969380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ASR42_GetEventFreezeFrameData/49 
  Calls: 
Dem_FFClass/170 (Dem_FFClass) @06fa4d38
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_ASR42_GetEventFreezeFrameData/49 (addr)Dem_ProcessEventEntryFFData/77 (addr)
  Availability: not_available
  Varpool flags: read-only
Dem_GbiFFClassIdx/169 (Dem_GbiFFClassIdx) @06969ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEventEntryFFData/77 Dem_ASR42_GetEventFreezeFrameData/49 
  Calls: 
Dem_CheckFFRecNumValid/168 (Dem_CheckFFRecNumValid) @06969e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ASR42_GetEventFreezeFrameData/49 
  Calls: 
Dem_GbiMaxNumFFRecs/167 (Dem_GbiMaxNumFFRecs) @06969d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEventEntryFFData/77 Dem_ASR42_GetEventFreezeFrameData/49 
  Calls: 
Dem_InternalGetIndicatorStatus/166 (Dem_InternalGetIndicatorStatus) @069698c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_GetIndicatorStatus/47 
  Calls: 
Dem_EnCondGrpStatusCounter/165 (Dem_EnCondGrpStatusCounter) @0696d360
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_SetEnableCondition/42 (read)Dem_SetEnableCondition/42 (write)Dem_SetEnableCondition/42 (read)Dem_SetEnableCondition/42 (write)
  Availability: not_available
  Varpool flags:
Dem_EnCondGrpLink/164 (Dem_EnCondGrpLink) @0696d318
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_SetEnableCondition/42 (read)Dem_SetEnableCondition/42 (read)
  Availability: not_available
  Varpool flags: read-only
Dem_EnCondToEvIdLink/163 (Dem_EnCondToEvIdLink) @0696d2d0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_SetEnableCondition/42 (read)Dem_SetEnableCondition/42 (read)
  Availability: not_available
  Varpool flags: read-only
Dem_EnCondStatus/162 (Dem_EnCondStatus) @0696d288
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_SetEnableCondition/42 (read)Dem_SetEnableCondition/42 (write)
  Availability: not_available
  Varpool flags:
Dem_GetUdsDTC/161 (Dem_GetUdsDTC) @069691c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_GetDTCOfEvent/41 
  Calls: 
Dem_GetObdDTC/160 (Dem_GetObdDTC) @069690e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_SelectEntryOfOBDFreezeFrameEvent/69 Dem_GetDTCOfEvent/41 
  Calls: 
Dem_GbiIndicatorUsed/159 (Dem_GbiIndicatorUsed) @06953c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_IsMILEvent/103 
  Calls: 
Dem_PermanentMemoryAddEntry/158 (Dem_PermanentMemoryAddEntry) @06953a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_SetCycleQualified/37 
  Calls: 
Dem_ProcessIndicatorFailureCycleCounter/157 (Dem_ProcessIndicatorFailureCycleCounter) @069539a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_SetCycleQualified/37 
  Calls: 
Dem_PermanentMemoryRemoveEntry/156 (Dem_PermanentMemoryRemoveEntry) @069531c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessIndicatorOffCriteria/95 
  Calls: 
Dem_IndicatorDesc/155 (Dem_IndicatorDesc) @069518b8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_ProcessIndicatorOffCriteria/95 (read)Dem_ProcessIndicatorOffCriteria/95 (read)Dem_IsMILEvent/103 (read)Dem_IsMILEvent/103 (read)
  Availability: not_available
  Varpool flags: read-only
Dem_HealingCycleCounterInfo/154 (Dem_HealingCycleCounterInfo) @06951798
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_ProcessIndicatorOffCriteria/95 (read)
  Availability: not_available
  Varpool flags: read-only
Dem_GbiIndicatorHealingCycleIdx/153 (Dem_GbiIndicatorHealingCycleIdx) @0693ae00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessIndicator/94 
  Calls: 
Dem_GbiIndicatorFailureCycleIdx/152 (Dem_GbiIndicatorFailureCycleIdx) @0693ad20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessIndicator/94 
  Calls: 
Dem_IndicatorLink/151 (Dem_IndicatorLink) @06949c60
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_ProcessIndicator/94 (read)Dem_ProcessIndicatorOffCriteria/95 (read)Dem_CheckWIROffCriteriaFulfilled/98 (read)Dem_IsMILEvent/103 (read)Dem_ProcessIndicatorOnCriteria/96 (read)
  Availability: not_available
  Varpool flags: read-only
Dem_PermanentMemoryStatusUpdate/150 (Dem_PermanentMemoryStatusUpdate) @0693ab60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_OpCycleProcessCycleStart/101 
  Calls: 
Dem_GbiEventFailureCycleIdx/149 (Dem_GbiEventFailureCycleIdx) @0693a9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_FindOrAllocateEventEntry/75 Dem_UpdateFailureCounterCycleStart/92 Dem_ProcessFailureCounterReset/91 
  Calls: 
Dem_CheckForImmediateEntryStorage/148 (Dem_CheckForImmediateEntryStorage) @0693a7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_IncrementFailureCounter/93 Dem_ProcessEventEntry/72 Dem_ProcessMultipleOBDFreezeFrameEntry/68 Dem_SetCDTCOnConfirmation/90 Dem_ProcessFailureCounterReset/91 Dem_UpdateAgingCounter/67 
  Calls: 
Dem_GbiOpCycleIdx/147 (Dem_GbiOpCycleIdx) @0693a540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_FindOrAllocateEventEntry/75 Dem_ProcessEventEntry/72 Dem_SetCDTCOnConfirmation/90 Dem_SetCycleQualified/37 Dem_UpdateFailureCounterCycleStart/92 Dem_ProcessIndicator/94 Dem_OpCycleProcessCycleStart/101 Dem_OpCycleProcessCycleEnd/99 
  Calls: 
Dem_CheckForTriggerNvmWriteGateEntry/146 (Dem_CheckForTriggerNvmWriteGateEntry) @0693a380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_MainFunction/54 Dem_SetOperationCycleState/36 
  Calls: 
Dem_GbiEnablePrestorage/145 (Dem_GbiEnablePrestorage) @0693a0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ClearPrestoredFreezeFrame/35 Dem_PrestoreFreezeFrame/34 
  Calls: 
SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 (SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0) @0692aa80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEvent/71 Dem_StoreOBDFreezeFrame/80 Dem_SetCDTCOnConfirmation/90 Dem_MainFunction/54 Dem_GetEventExtendedDataRecord/50 Dem_ASR42_GetEventFreezeFrameData/49 Dem_SetEnableCondition/42 Dem_SetCycleQualified/37 Dem_SetCycleQualified/37 Dem_ProcessIndicatorOffCriteria/95 Dem_ProcessIndicatorOffCriteria/95 Dem_ProcessIndicatorOffCriteria/95 Dem_ProcessIndicatorOffCriteria/95 Dem_ProcessIndicator/94 Dem_OpCycleProcessCycleStart/101 Dem_OpCycleProcessCycleStart/101 Dem_ProcessFailureCounterReset/91 Dem_UpdateAgingCounter/67 Dem_OpCycleProcessEventCycleEnd/100 Dem_ResetEventStatus/32 Dem_ReportErrorStatusPreInit/29 
  Calls: 
SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 (SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0) @0692a9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEvent/71 Dem_StoreOBDFreezeFrame/80 Dem_SetCDTCOnConfirmation/90 Dem_MainFunction/54 Dem_GetEventExtendedDataRecord/50 Dem_ASR42_GetEventFreezeFrameData/49 Dem_SetEnableCondition/42 Dem_SetCycleQualified/37 Dem_SetCycleQualified/37 Dem_ProcessIndicatorOffCriteria/95 Dem_ProcessIndicatorOffCriteria/95 Dem_ProcessIndicatorOffCriteria/95 Dem_ProcessIndicatorOffCriteria/95 Dem_ProcessIndicator/94 Dem_OpCycleProcessCycleStart/101 Dem_OpCycleProcessCycleStart/101 Dem_ProcessFailureCounterReset/91 Dem_UpdateAgingCounter/67 Dem_OpCycleProcessEventCycleEnd/100 Dem_ResetEventStatus/32 Dem_ReportErrorStatusPreInit/29 
  Calls: 
Dem_DebounceEvent/142 (Dem_DebounceEvent) @0692a8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ReportErrorStatusPreInit/29 
  Calls: 
Dem_InternalProcessEventReport/141 (Dem_InternalProcessEventReport) @0692a700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_SetEventStatus/31 Dem_ReportErrorStatusCore/30 Dem_ReportErrorStatusCore/30 
  Calls: 
Dem_GbiEventKind/140 (Dem_GbiEventKind) @0692a540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_MainFunction/54 Dem_SetEventStatus/31 Dem_ReportErrorStatus/28 
  Calls: 
NvM_ASR40_SetRamBlockStatus/139 (NvM_ASR40_SetRamBlockStatus) @0692a380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_Shutdown/27 
  Calls: 
NvM_ASR40_WriteBlock/138 (NvM_ASR40_WriteBlock) @0692a2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_OpCycleProcessCycleStart/101 Dem_OpCycleProcessCycleEnd/99 Dem_Shutdown/27 
  Calls: 
Dem_StoreImmediately/137 (Dem_StoreImmediately) @0692a1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_Shutdown/27 
  Calls: 
Dem_ClearAgedEventEntry/136 (Dem_ClearAgedEventEntry) @0692a000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_UpdateAgingCounter/67 Dem_Shutdown/27 
  Calls: 
Dem_IntValEntryData/135 (Dem_IntValEntryData) @0691fee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEventEntry/72 Dem_UpdateAgingCounter/67 Dem_Shutdown/27 
  Calls: 
Dem_SearchForEntry/134 (Dem_SearchForEntry) @0691fe00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_IncrementFailureCounter/93 Dem_FindOrAllocateEventEntry/75 Dem_GetEventExtendedDataRecord/50 Dem_ASR42_GetEventFreezeFrameData/49 Dem_ProcessFailureCounterReset/91 Dem_UpdateAgingCounter/67 Dem_Shutdown/27 
  Calls: 
Dem_GbiNumAgingCycles/133 (Dem_GbiNumAgingCycles) @0691fd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEventEntry/72 Dem_ProcessEventEntry/72 Dem_OpCycleProcessEventCycleEnd/100 Dem_Shutdown/27 
  Calls: 
Dem_EvIdOfLockedMemoryEntry/132 (Dem_EvIdOfLockedMemoryEntry) @06929318
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_Shutdown/27 (read)Dem_UpdateAgingCounter/67 (read)Dem_FindOrAllocateEventEntry/75 (read)Dem_ReplaceEventEntry/76 (read)
  Availability: not_available
  Varpool flags:
Dem_EventMemoryPermanentNonVolatileStored/131 (Dem_EventMemoryPermanentNonVolatileStored) @06921558
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_PermanentMemoryInit/59 (write)Dem_PermanentMemoryInit/59 (write)Dem_PermanentMemoryInit/59 (write)
  Availability: not_available
  Varpool flags:
Dem_EventMemoryPermanent/130 (Dem_EventMemoryPermanent) @06921510
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_PermanentMemoryInit/59 (write)Dem_PermanentMemoryInit/59 (read)Dem_GetNumberOfEventMemoryEntries/52 (read)
  Availability: not_available
  Varpool flags:
Dem_EventMemoryPermanentUpdated/129 (Dem_EventMemoryPermanentUpdated) @06921480
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_PermanentMemoryInit/59 (write)Dem_PermanentMemoryInit/59 (write)Dem_PermanentMemoryInit/59 (write)Dem_PermanentMemoryInit/59 (read)Dem_OpCycleProcessCycleEnd/99 (read)Dem_OpCycleProcessCycleStart/101 (read)
  Availability: not_available
  Varpool flags:
Dem_EventFailureCycleCfg/128 (Dem_EventFailureCycleCfg) @0691df78
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_RestoreDerivedEventStatus/58 (read)Dem_SetCDTCOnConfirmation/90 (read)Dem_ProcessEventEntry/72 (read)Dem_IncrementFailureCounter/93 (read)
  Availability: not_available
  Varpool flags: read-only
Dem_GbiEventFailureClassIdx/127 (Dem_GbiEventFailureClassIdx) @0691f540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_IncrementFailureCounter/93 Dem_FindOrAllocateEventEntry/75 Dem_ProcessEventEntry/72 Dem_SetCDTCOnConfirmation/90 Dem_UpdateFailureCounterCycleStart/92 Dem_ProcessFailureCounterReset/91 Dem_RestoreDerivedEventStatus/58 
  Calls: 
Dem_SetEvEntryExists/126 (Dem_SetEvEntryExists) @0691f380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_FindOrAllocateEventEntry/75 Dem_RestoreImmediateData/57 
  Calls: 
TS_MemCpy32/125 (TS_MemCpy32) @0691f2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ASR42_GetEventFreezeFrameData/49 Dem_ASR42_GetEventFreezeFrameData/49 Dem_RestoreImmediateData/57 Dem_RestoreImmediateData/57 
  Calls: 
Dem_EntryOBDFF/124 (Dem_EntryOBDFF) @0691dbd0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_RestoreImmediateData/57 (write)Dem_RestoreImmediateData/57 (addr)Dem_InitMaxOBDOccOrder/89 (read)Dem_InitMaxOBDOccOrder/89 (read)Dem_StoreOBDFreezeFrame/80 (addr)Dem_SetOBDFFOccurrenceOrder/70 (write)Dem_RearrangeOBDOccurrenceOrder/88 (read)Dem_RearrangeOBDOccurrenceOrder/88 (read)Dem_RearrangeOBDOccurrenceOrder/88 (read)Dem_RearrangeOBDOccurrenceOrder/88 (read)Dem_RearrangeOBDOccurrenceOrder/88 (write)Dem_SelectEntryOfOBDFreezeFrameEvent/69 (read)Dem_SelectEntryOfOBDFreezeFrameEvent/69 (read)
  Availability: not_available
  Varpool flags:
Dem_GbiDTCKind/123 (Dem_GbiDTCKind) @0691f1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEventEntry/72 Dem_SelectEntryOfOBDFreezeFrameEvent/69 Dem_RearrangeOBDOccurrenceOrder/88 Dem_RearrangeOBDOccurrenceOrder/88 Dem_InitMaxOBDOccOrder/89 Dem_RestoreImmediateData/57 
  Calls: 
Dem_EvMemEntrySize/122 (Dem_EvMemEntrySize) @0691f0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_FindOrAllocateEventEntry/75 Dem_RestoreImmediateData/57 
  Calls: 
Dem_EvMemEntryExists/121 (Dem_EvMemEntryExists) @0691daf8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_RestoreImmediateData/57 (read)
  Availability: not_available
  Varpool flags:
Eb_Intgr_BswM_TriggerMemoryStack/120 (Eb_Intgr_BswM_TriggerMemoryStack) @0691f000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_Shutdown/27 Dem_Shutdown/27 Dem_RestoreImmediateData/57 
  Calls: 
NvM_ASR40_ReadBlock/119 (NvM_ASR40_ReadBlock) @06f8cee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_RestoreImmediateData/57 
  Calls: 
NvM_ASR40_SetDataIndex/118 (NvM_ASR40_SetDataIndex) @06f8c0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_Shutdown/27 Dem_RestoreImmediateData/57 
  Calls: 
NvM_ASR40_GetErrorStatus/117 (NvM_ASR40_GetErrorStatus) @06f8c9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_RestoreImmediateData/57 Dem_NvMGetNvRAMBlockStatus/55 
  Calls: 
Dem_InitDTCMemoryFilter/116 (Dem_InitDTCMemoryFilter) @06f8c7e0
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Dem_InitSwUnitFncPtr/24 (addr)
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
Dem_InitDataRecordSelector/115 (Dem_InitDataRecordSelector) @06f8c620
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Dem_InitSwUnitFncPtr/24 (addr)
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
Dem_InitRecordFilter/114 (Dem_InitRecordFilter) @06f8c540
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Dem_InitSwUnitFncPtr/24 (addr)
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
Dem_InitEventMemoryProcessor/113 (Dem_InitEventMemoryProcessor) @06f8c460
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Dem_InitSwUnitFncPtr/24 (addr)
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
Dem_InitDTCSelector/112 (Dem_InitDTCSelector) @06f8c380
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Dem_InitSwUnitFncPtr/24 (addr)
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
Dem_InitDTCFilter/111 (Dem_InitDTCFilter) @06f8c2a0
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Dem_InitSwUnitFncPtr/24 (addr)
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
Dem_InitEventReportVerifier/110 (Dem_InitEventReportVerifier) @06f8c1c0
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Dem_InitSwUnitFncPtr/24 (addr)
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
Dem_InitEvEntryExists/109 (Dem_InitEvEntryExists) @06f8c000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_Init/26 
  Calls: 
Dem_OpCycleState/108 (Dem_OpCycleState) @06f8b438
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_Init/26 (write)Dem_SetOperationCycleState/36 (addr)Dem_SetCycleQualified/37 (read)Dem_FindOrAllocateEventEntry/75 (read)
  Availability: not_available
  Varpool flags:
Dem_DebounceFctPtrTable/107 (Dem_DebounceFctPtrTable) @06f53bd0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_PreInit/25 (read)Dem_ResetEventStatus/32 (read)Dem_ResetEventDebounceStatus/33 (read)Dem_ResetEventDebounceStatus/33 (read)Dem_ResetEventDebounceStatus/33 (read)Dem_OpCycleProcessEventCycleStart/102 (read)Dem_GetFaultDetectionCounter/46 (read)Dem_GetFaultDetectionCounter/46 (read)
  Availability: not_available
  Varpool flags: read-only
Dem_GbiDebounceAlgo/106 (Dem_GbiDebounceAlgo) @06f80d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_GetFaultDetectionCounter/46 Dem_OpCycleProcessEventCycleStart/102 Dem_ResetEventDebounceStatus/33 Dem_ResetEventDebounceStatus/33 Dem_ResetEventStatus/32 Dem_PreInit/25 
  Calls: 
Det_ASR40_ReportError/105 (Det_ASR40_ReportError) @06f80c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Dem_ProcessEvent/71 Dem_StoreOBDFreezeFrame/80 Dem_SetDTCSuppression/53 Dem_SetDTCSuppression/53 Dem_SetDTCSuppression/53 Dem_SetDTCSuppression/53 Dem_GetNumberOfEventMemoryEntries/52 Dem_GetNumberOfEventMemoryEntries/52 Dem_GetNumberOfEventMemoryEntries/52 Dem_GetEventMemoryOverflow/51 Dem_GetEventMemoryOverflow/51 Dem_GetEventMemoryOverflow/51 Dem_GetEventExtendedDataRecord/50 Dem_GetEventExtendedDataRecord/50 Dem_GetEventExtendedDataRecord/50 Dem_GetEventExtendedDataRecord/50 Dem_GetEventExtendedDataRecord/50 Dem_ASR42_GetEventFreezeFrameData/49 Dem_ASR42_GetEventFreezeFrameData/49 Dem_ASR42_GetEventFreezeFrameData/49 Dem_ASR42_GetEventFreezeFrameData/49 Dem_ASR42_GetEventFreezeFrameData/49 Dem_GetIndicatorStatus/47 Dem_GetIndicatorStatus/47 Dem_GetIndicatorStatus/47 Dem_GetFaultDetectionCounter/46 Dem_GetFaultDetectionCounter/46 Dem_GetFaultDetectionCounter/46 Dem_GetFaultDetectionCounter/46 Dem_GetEventFreezeFrameDataEx/45 Dem_GetEventFreezeFrameDataEx/45 Dem_GetEventFreezeFrameDataEx/45 Dem_GetEventFreezeFrameDataEx/45 Dem_GetEventFreezeFrameDataEx/45 Dem_GetEventExtendedDataRecordEx/44 Dem_GetEventExtendedDataRecordEx/44 Dem_GetEventExtendedDataRecordEx/44 Dem_GetEventExtendedDataRecordEx/44 Dem_GetEventExtendedDataRecordEx/44 Dem_GetDebouncingOfEvent/43 Dem_GetDebouncingOfEvent/43 Dem_GetDebouncingOfEvent/43 Dem_GetDebouncingOfEvent/43 Dem_SetEnableCondition/42 Dem_SetEnableCondition/42 Dem_SetEnableCondition/42 Dem_GetDTCOfEvent/41 Dem_GetDTCOfEvent/41 Dem_GetDTCOfEvent/41 Dem_GetDTCOfEvent/41 Dem_GetEventTested/40 Dem_GetEventTested/40 Dem_GetEventTested/40 Dem_GetEventTested/40 Dem_GetEventFailed/39 Dem_GetEventFailed/39 Dem_GetEventFailed/39 Dem_GetEventFailed/39 Dem_GetEventStatus/38 Dem_GetEventStatus/38 Dem_GetEventStatus/38 Dem_GetEventStatus/38 Dem_SetCycleQualified/37 Dem_SetCycleQualified/37 Dem_SetCycleQualified/37 Dem_SetOperationCycleState/36 Dem_SetOperationCycleState/36 Dem_SetOperationCycleState/36 Dem_ClearPrestoredFreezeFrame/35 Dem_ClearPrestoredFreezeFrame/35 Dem_ClearPrestoredFreezeFrame/35 Dem_ClearPrestoredFreezeFrame/35 Dem_PrestoreFreezeFrame/34 Dem_PrestoreFreezeFrame/34 Dem_PrestoreFreezeFrame/34 Dem_PrestoreFreezeFrame/34 Dem_ResetEventDebounceStatus/33 Dem_ResetEventDebounceStatus/33 Dem_ResetEventDebounceStatus/33 Dem_ResetEventDebounceStatus/33 Dem_ResetEventDebounceStatus/33 Dem_ResetEventStatus/32 Dem_ResetEventStatus/32 Dem_ResetEventStatus/32 Dem_SetEventStatus/31 Dem_SetEventStatus/31 Dem_SetEventStatus/31 Dem_SetEventStatus/31 Dem_SetEventStatus/31 Dem_SetEventStatus/31 Dem_ReportErrorStatusPreInit/29 Dem_ReportErrorStatusPreInit/29 Dem_ReportErrorStatusCore/30 Dem_ReportErrorStatus/28 Dem_ReportErrorStatus/28 Dem_ReportErrorStatus/28 Dem_ReportErrorStatus/28 Dem_ReportErrorStatus/28 Dem_Shutdown/27 Dem_Init/26 Dem_PreInit/25 
  Calls: 
Dem_InitializationState/104 (Dem_InitializationState) @06f53af8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dem_PreInit/25 (read)Dem_PreInit/25 (write)Dem_Init/26 (read)Dem_Init/26 (read)Dem_Init/26 (read)Dem_Init/26 (write)Dem_Shutdown/27 (read)Dem_Shutdown/27 (write)Dem_ReportErrorStatus/28 (read)Dem_ReportErrorStatusCore/30 (read)Dem_SetEventStatus/31 (read)Dem_ResetEventStatus/32 (read)Dem_ResetEventDebounceStatus/33 (read)Dem_PrestoreFreezeFrame/34 (read)Dem_ClearPrestoredFreezeFrame/35 (read)Dem_SetOperationCycleState/36 (read)Dem_SetCycleQualified/37 (read)Dem_GetEventStatus/38 (read)Dem_GetEventFailed/39 (read)Dem_GetEventTested/40 (read)Dem_SetEnableCondition/42 (read)Dem_GetDebouncingOfEvent/43 (read)Dem_GetEventExtendedDataRecordEx/44 (read)Dem_GetEventFreezeFrameDataEx/45 (read)Dem_GetFaultDetectionCounter/46 (read)Dem_GetIndicatorStatus/47 (read)Dem_ASR42_GetEventFreezeFrameData/49 (read)Dem_GetEventExtendedDataRecord/50 (read)Dem_GetEventMemoryOverflow/51 (read)Dem_GetNumberOfEventMemoryEntries/52 (read)Dem_SetDTCSuppression/53 (read)Dem_MainFunction/54 (read)
  Availability: not_available
  Varpool flags:
Dem_IsMILEvent/103 (Dem_IsMILEvent) @06f80a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_IndicatorDesc/155 (read)Dem_IndicatorDesc/155 (read)Dem_IndicatorLink/151 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_SetCycleQualified/37 
  Calls: Dem_GbiIndicatorUsed/159 
Dem_OpCycleProcessEventCycleStart/102 (Dem_OpCycleProcessEventCycleStart) @06f808c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_DebounceFctPtrTable/107 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_OpCycleProcessCycleStart/101 
  Calls: Dem_GbiDebounceAlgo/106 
   Indirect call
Dem_OpCycleProcessCycleStart/101 (Dem_OpCycleProcessCycleStart) @06f80540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EventMemoryPermanentUpdated/129 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_NvData/16 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_SetOperationCycleState/36 
  Calls: SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_UpdateFailureCounterCycleStart/92 Dem_OpCycleProcessEventCycleStart/102 Dem_GbiOpCycleIdx/147 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 NvM_ASR40_WriteBlock/138 Dem_PermanentMemoryStatusUpdate/150 Dem_ProcessIndicator/94 
Dem_OpCycleProcessEventCycleEnd/100 (Dem_OpCycleProcessEventCycleEnd) @06f80380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_NvData/16 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_NvData/16 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_OpCycleProcessCycleEnd/99 
  Calls: Dem_UpdateAgingCounter/67 Dem_GbiNumAgingCycles/133 SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 
Dem_OpCycleProcessCycleEnd/99 (Dem_OpCycleProcessCycleEnd) @06f72ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EventMemoryPermanentUpdated/129 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_SetOperationCycleState/36 
  Calls: NvM_ASR40_WriteBlock/138 Dem_ProcessFailureCounterReset/91 Dem_OpCycleProcessEventCycleEnd/100 Dem_GbiOpCycleIdx/147 
Dem_CheckWIROffCriteriaFulfilled/98 (Dem_CheckWIROffCriteriaFulfilled) @06f72d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_NvData/16 (addr)Dem_IndicatorLink/151 (read)Dem_NvData/16 (addr)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessIndicatorOffCriteria/95 
  Calls: 
Dem_SetCycleCounterRole/97 (Dem_SetCycleCounterRole) @06f72b60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_NvData/16 (addr)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessIndicatorOnCriteria/96 Dem_ProcessIndicatorOffCriteria/95 
  Calls: 
Dem_ProcessIndicatorOnCriteria/96 (Dem_ProcessIndicatorOnCriteria) @06f729a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_IndicatorLink/151 (read)Dem_FailureCycleCounterInfo/197 (read)Dem_NvData/16 (addr)Dem_NvData/16 (read)Dem_NvData/16 (addr)Dem_NvData/16 (addr)Dem_NvData/16 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Dem_ProcessIndicator/94 
  Calls: Dem_SetCycleCounterRole/97 
Dem_ProcessIndicatorOffCriteria/95 (Dem_ProcessIndicatorOffCriteria) @06f727e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_NvData/16 (read)Dem_IndicatorLink/151 (read)Dem_HealingCycleCounterInfo/154 (read)Dem_NvData/16 (addr)Dem_NvData/16 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_NvData/16 (read)Dem_IndicatorDesc/155 (read)Dem_IndicatorDesc/155 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessIndicator/94 
  Calls: SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 Dem_CheckWIROffCriteriaFulfilled/98 SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_PermanentMemoryRemoveEntry/156 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_SetCycleCounterRole/97 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 
Dem_ProcessIndicator/94 (Dem_ProcessIndicator) @06f72460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_IndicatorLink/151 (read)Dem_NvData/16 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_OpCycleProcessCycleStart/101 
  Calls: SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_ProcessIndicatorOnCriteria/96 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 Dem_GbiOpCycleIdx/147 Dem_ProcessIndicatorOffCriteria/95 Dem_GbiIndicatorHealingCycleIdx/153 Dem_GbiIndicatorFailureCycleIdx/152 
Dem_IncrementFailureCounter/93 (Dem_IncrementFailureCounter) @06f721c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_EventFailureCycleCfg/128 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Dem_UpdateFailureCounterCycleStart/92 
  Calls: Dem_CheckForImmediateEntryStorage/148 Dem_GbiEventFailureClassIdx/127 Dem_SearchForEntry/134 
Dem_UpdateFailureCounterCycleStart/92 (Dem_UpdateFailureCounterCycleStart) @06f68e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_NvData/16 (read)Dem_DoProcessFaultConfirmation/0 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_OpCycleProcessCycleStart/101 
  Calls: Dem_IncrementFailureCounter/93 Dem_GbiOpCycleIdx/147 Dem_GbiEventFailureCycleIdx/149 Dem_GbiEventFailureClassIdx/127 
Dem_ProcessFailureCounterReset/91 (Dem_ProcessFailureCounterReset) @06f68a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_NvData/16 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_OpCycleProcessCycleEnd/99 
  Calls: SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_CheckForImmediateEntryStorage/148 Dem_SearchForEntry/134 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 Dem_GbiEventFailureCycleIdx/149 Dem_GbiEventFailureClassIdx/127 
Dem_SetCDTCOnConfirmation/90 (Dem_SetCDTCOnConfirmation) @06f687e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EventMem/17 (read)Dem_NvData/16 (read)Dem_NvData/16 (read)Dem_EventMem/17 (read)Dem_EventFailureCycleCfg/128 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_SizeEventMem/23 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_MainFunction/54 
  Calls: SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_CheckForImmediateEntryStorage/148 Dem_UpdateEventIdOccurKinds/74 Dem_GbiEventFailureClassIdx/127 Dem_GbiOpCycleIdx/147 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 
Dem_InitMaxOBDOccOrder/89 (Dem_InitMaxOBDOccOrder) @06f682a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_MaxOBDOccOrder/3 (write)Dem_EventMemoryPrimary/5 (addr)Dem_EntryOBDFF/124 (read)Dem_MaxOBDOccOrder/3 (read)Dem_EntryOBDFF/124 (read)Dem_MaxOBDOccOrder/3 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_Init/26 
  Calls: Dem_GbiDTCKind/123 
Dem_RearrangeOBDOccurrenceOrder/88 (Dem_RearrangeOBDOccurrenceOrder) @06f680e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EventMemoryPrimary/5 (addr)Dem_EventMemoryPrimary/5 (addr)Dem_EventMemoryPrimary/5 (addr)Dem_EntryOBDFF/124 (read)Dem_EntryOBDFF/124 (read)Dem_EntryOBDFF/124 (read)Dem_EntryOBDFF/124 (read)Dem_EntryOBDFF/124 (write)Dem_MaxOBDOccOrder/3 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_SetOBDFFOccurrenceOrder/70 
  Calls: Dem_GbiDTCKind/123 Dem_GbiDTCKind/123 
Dem_InitMaxOccOrder/87 (Dem_InitMaxOccOrder) @06f5aee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_MaxOccOrder/4 (write)Dem_EventMem/17 (read)Dem_MaxOccOrder/4 (read)Dem_MaxOccOrder/4 (write)Dem_SizeEventMem/23 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_Init/26 
  Calls: 
Dem_RearrangeOccurrenceOrder/86 (Dem_RearrangeOccurrenceOrder) @06f5ad20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EventMem/17 (read)Dem_SizeEventMem/23 (read)Dem_SizeEventMem/23 (read)Dem_MaxOccOrder/4 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_UpdateOccurrenceOrder/85 
  Calls: 
Dem_UpdateOccurrenceOrder/85 (Dem_UpdateOccurrenceOrder) @06f5ab60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EventMem/17 (read)Dem_MaxOccOrder/4 (read)Dem_SizeEventMem/23 (read)Dem_MaxOccOrder/4 (read)Dem_MaxOccOrder/4 (read)Dem_MaxOccOrder/4 (write)Dem_MaxOccOrder/4 (read)Dem_MaxOccOrder/4 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessEventEntry/72 
  Calls: Dem_RearrangeOccurrenceOrder/86 Dem_GbiDTCOriginIdx/190 
Dem_SearchForEntryToReplace/84 (Dem_SearchForEntryToReplace) @06f5a9a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_SizeEventMem/23 (read)Dem_EventMem/17 (read)Dem_NvData/16 (read)Dem_NvData/16 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ReplaceEventEntry/76 
  Calls: Dem_GbiPriority/187 Dem_GbiPriority/187 
Dem_SearchForEmptyEntry/83 (Dem_SearchForEmptyEntry) @06f5a460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_SizeEventMem/23 (read)Dem_EventMem/17 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_FindOrAllocateEventEntry/75 
  Calls: 
Dem_ReadExternalDataElement/82 (Dem_ReadExternalDataElement) @06f5a2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_DataElement/185 (read)Dem_DataElement/185 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Dem_StoreFF/79 Dem_StoreED/81 Dem_StoreOBDFreezeFrame/80 
  Calls: 
   Indirect call
Dem_StoreED/81 (Dem_StoreED) @06f5a0e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EDSegment/179 (addr)Dem_DataElement/185 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessEventEntryEData/78 
  Calls: Dem_ReadExternalDataElement/82 
Dem_StoreOBDFreezeFrame/80 (Dem_StoreOBDFreezeFrame) @06f48ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EntryOBDFF/124 (addr)Dem_PidClass/184 (addr)Dem_DataElement/185 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessMultipleOBDFreezeFrameEntry/68 
  Calls: Det_ASR40_ReportError/105 SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_ReadExternalDataElement/82 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 
Dem_StoreFF/79 (Dem_StoreFF) @06f48c40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_FFSegment/174 (addr)Dem_DataElement/185 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessEventEntryFFData/77 
  Calls: Dem_ReadExternalDataElement/82 
Dem_ProcessEventEntryEData/78 (Dem_ProcessEventEntryEData) @06f48a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EDClass/177 (addr)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessEventEntry/72 
  Calls: Dem_StoreED/81 Dem_SizeOfED/194 Dem_EDEntryData/193 Dem_GbiEDClassIdx/176 
Dem_ProcessEventEntryFFData/77 (Dem_ProcessEventEntryFFData) @06f488c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_FFClass/170 (addr)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessEventEntry/72 
  Calls: Dem_StoreFF/79 Dem_FFEntryData/172 Dem_GbiMaxNumFFRecs/167 Dem_GbiFFClassIdx/169 
Dem_ReplaceEventEntry/76 (Dem_ReplaceEventEntry) @06f48700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EvIdOfLockedMemoryEntry/132 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_NvData/16 (read)Dem_NvData/16 (addr)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_FindOrAllocateEventEntry/75 
  Calls: TS_AtomicSetBit_8/192 Dem_ClearEventEntry/191 Dem_SearchForEntryToReplace/84 
Dem_FindOrAllocateEventEntry/75 (Dem_FindOrAllocateEventEntry) @06f482a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_OpCycleState/108 (read)Dem_EntryDataFreePos/19 (read)Dem_EntryDataFreePos/19 (read)Dem_EntryDataFreePos/19 (read)Dem_EvIdOfLockedMemoryEntry/132 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessEventEntry/72 
  Calls: Dem_GbiOpCycleIdx/147 Dem_GbiEventFailureCycleIdx/149 Dem_SetEvEntryExists/126 Dem_EvMemEntrySize/122 Dem_ReplaceEventEntry/76 Dem_SearchForEmptyEntry/83 Dem_SearchForEntry/134 Dem_GbiEventFailureClassIdx/127 Dem_GbiDTCOriginIdx/190 
Dem_UpdateEventIdOccurKinds/74 (Dem_UpdateEventIdOccurKinds) @06f480e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_NvData/16 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Dem_ProcessEventEntry/72 Dem_SetCDTCOnConfirmation/90 
  Calls: Dem_GetVisibleUdsDTC/196 Dem_GetVisibleUdsDTC/196 Dem_GbiDTCOrigin/195 
Dem_ProcessEventStatusUpdate/73 (Dem_ProcessEventStatusUpdate) @06f3dee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessEvent/71 
  Calls: Dem_UpdateEventStatusOnQualification/189 Dem_CheckForEventWIRUpdate/188 
Dem_ProcessEventEntry/72 (Dem_ProcessEventEntry) @06f3dd20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EventFailureCycleCfg/128 (read)Dem_NvData/16 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessEvent/71 
  Calls: Dem_CheckForImmediateEntryStorage/148 Dem_UpdateOccurrenceOrder/85 Dem_UpdateEventIdOccurKinds/74 Dem_GbiOpCycleIdx/147 Dem_GbiEventFailureClassIdx/127 Dem_ProcessMultipleOBDFreezeFrameEntry/68 Dem_GbiDTCKind/123 Dem_ProcessEventEntryFFData/77 Dem_ProcessEventEntryEData/78 Dem_GbiNumAgingCycles/133 Dem_IntValEntryData/135 Dem_GbiNumAgingCycles/133 Dem_FindOrAllocateEventEntry/75 
Dem_ProcessEvent/71 (Dem_ProcessEvent) @06f3d7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Dem_MainFunction/54 
  Calls: Det_ASR40_ReportError/105 SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_ProcessEventEntry/72 Dem_ProcessEventStatusUpdate/73 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 
Dem_SetOBDFFOccurrenceOrder/70 (Dem_SetOBDFFOccurrenceOrder) @06f3d540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_MaxOBDOccOrder/3 (read)Dem_EntryOBDFF/124 (write)Dem_MaxOBDOccOrder/3 (read)Dem_MaxOBDOccOrder/3 (read)Dem_MaxOBDOccOrder/3 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ProcessMultipleOBDFreezeFrameEntry/68 
  Calls: Dem_RearrangeOBDOccurrenceOrder/88 
Dem_SelectEntryOfOBDFreezeFrameEvent/69 (Dem_SelectEntryOfOBDFreezeFrameEvent) @06f3d380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_EventMemoryPrimary/5 (addr)Dem_NvData/16 (read)Dem_EntryOBDFF/124 (read)Dem_EntryOBDFF/124 (read)Dem_EventMemoryPrimary/5 (addr)Dem_EventMemoryPrimary/5 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_GbiPriority/187 Dem_GbiPriority/187 Dem_GbiDTCKind/123 Dem_GetObdDTC/160 Dem_GetVisibleCmbDTC/186 
Dem_ProcessMultipleOBDFreezeFrameEntry/68 (Dem_ProcessMultipleOBDFreezeFrameEntry) @06f3d0e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_EventMemoryPrimary/5 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Dem_ProcessEventEntry/72 
  Calls: Dem_CheckForImmediateEntryStorage/148 Dem_SetOBDFFOccurrenceOrder/70 Dem_StoreOBDFreezeFrame/80 
Dem_UpdateAgingCounter/67 (Dem_UpdateAgingCounter) @06f33ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EvIdOfLockedMemoryEntry/132 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_OpCycleProcessEventCycleEnd/100 
  Calls: SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_CheckForImmediateEntryStorage/148 Dem_ClearAgedEventEntry/136 Dem_IntValEntryData/135 Dem_SearchForEntry/134 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 
Dem_FindFFSegIdx/66 (Dem_FindFFSegIdx) @06f33d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_FFSegment/174 (read)Dem_FFSegment/174 (addr)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ASR42_GetEventFreezeFrameData/49 
  Calls: Dem_SizeOfFFSegment/175 
Dem_CheckErrorQueueEntryForStatus/65 (Dem_CheckErrorQueueEntryForStatus) @06f33b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueue/11 (read)Dem_ErrorQueueWriteIdx/2 (read)Dem_ErrorQueue/11 (read)Dem_ErrorQueueReadIdx/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Dem_CheckErrorReQueueEntry/64 (Dem_CheckErrorReQueueEntry) @06f338c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueueWriteIdx/2 (read)Dem_ErrorQueue/11 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_WriteErrorQueueEntry/62 
Dem_CheckErrorQueueEntry/63 (Dem_CheckErrorQueueEntry) @06f33460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueue/11 (read)Dem_ErrorQueueWriteIdx/2 (read)Dem_ErrorQueue/11 (read)Dem_ErrorQueueReadIdx/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Dem_ReportErrorStatusPreInit/29 
  Calls: 
Dem_WriteErrorQueueEntry/62 (Dem_WriteErrorQueueEntry) @06f331c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_ErrorQueueWriteIdx/2 (read)Dem_ErrorQueue/11 (read)Dem_ErrorQueueWriteIdx/2 (read)Dem_ErrorQueue/11 (write)Dem_ErrorQueueWriteIdx/2 (read)Dem_ErrorQueueWriteIdx/2 (write)Dem_ErrorQueueWriteIdx/2 (read)Dem_ErrorQueueWriteIdx/2 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Dem_CheckErrorReQueueEntry/64 Dem_ReportErrorStatusPreInit/29 
  Calls: 
Dem_ReadErrorQueueEntry/61 (Dem_ReadErrorQueueEntry) @06eead20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueue/11 (write)Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueueReadIdx/1 (write)Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueueReadIdx/1 (write)Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueue/11 (read)Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueue/11 (read)Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueue/11 (read)Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueue/11 (write)Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueueReadIdx/1 (write)Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueueReadIdx/1 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Dem_MainFunction/54 
  Calls: 
Dem_InvalidateErrorQueueEntry/60 (Dem_InvalidateErrorQueueEntry) @06eeab60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_ErrorQueueReadIdx/1 (read)Dem_ErrorQueueWriteIdx/2 (read)Dem_ErrorQueue/11 (read)Dem_ErrorQueue/11 (read)Dem_ErrorQueue/11 (write)Dem_ErrorQueueWriteIdx/2 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Dem_PermanentMemoryInit/59 (Dem_PermanentMemoryInit) @06eea8c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_EventMemoryPermanentUpdated/129 (write)Dem_EventMemoryPermanentUpdated/129 (write)Dem_EventMemoryPermanentUpdated/129 (write)Dem_EventMemoryPermanentUpdated/129 (read)Dem_EventMemoryPermanent/130 (write)Dem_EventMemoryPermanentNonVolatileStored/131 (write)Dem_EventMemoryPermanent/130 (read)Dem_EventMemoryPermanentNonVolatileStored/131 (write)Dem_EventMemoryPermanentNonVolatileStored/131 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_Init/26 
  Calls: Dem_NvMGetNvRAMBlockStatus/55 
Dem_RestoreDerivedEventStatus/58 (Dem_RestoreDerivedEventStatus) @06eea2a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_EventFailureCycleCfg/128 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_RestoreImmediateData/57 
  Calls: Dem_GbiEventFailureClassIdx/127 
Dem_RestoreImmediateData/57 (Dem_RestoreImmediateData) @06ec7c40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_NvGateEntryPrimaryData/14 (addr)Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_SizeEventMem/23 (read)Dem_NvGateEntryData/20 (read)Dem_NvDataBlockId/22 (read)Dem_NvGateEntryPrimaryData/14 (addr)Dem_EntryDataFreePos/19 (read)Dem_EntryDataFreePos/19 (read)Dem_EventMem/17 (read)Dem_EvMemEntryExists/121 (read)Dem_EntryDataFreePos/19 (read)Dem_EntryDataFreePos/19 (read)Dem_EntryOBDFF/124 (write)Dem_EntryOBDFF/124 (addr)Dem_EntryData/18 (read)Dem_GateEntryData/21 (read)Dem_EntryDataFreePos/19 (read)Dem_EntryDataFreePos/19 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_Init/26 
  Calls: Dem_SetEvEntryExists/126 TS_MemCpy32/125 Dem_RestoreDerivedEventStatus/58 TS_MemCpy32/125 Dem_GbiDTCKind/123 Dem_EvMemEntrySize/122 NvM_ASR40_GetErrorStatus/117 Eb_Intgr_BswM_TriggerMemoryStack/120 NvM_ASR40_ReadBlock/119 NvM_ASR40_SetDataIndex/118 
Dem_ResetNvData/56 (Dem_ResetNvData) @06ec79a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_NvData/16 (write)Dem_NvData/16 (write)Dem_NvData/16 (write)Dem_NvData/16 (write)Dem_NvData/16 (write)Dem_NvData/16 (write)Dem_NvData/16 (write)Dem_NvData/16 (write)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_Init/26 
  Calls: 
Dem_NvMGetNvRAMBlockStatus/55 (Dem_NvMGetNvRAMBlockStatus) @06ec77e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_PermanentMemoryInit/59 Dem_Init/26 
  Calls: NvM_ASR40_GetErrorStatus/117 
Dem_MainFunction/54 (Dem_MainFunction) @06ec7620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_NvData/16 (read)Dem_ClearDtcAsyncStatus/13 (read)Dem_DoProcessFaultConfirmation/0 (read)Dem_DoProcessFaultConfirmation/0 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Dem_Shutdown/27 
  Calls: Dem_CheckForTriggerNvmWriteGateEntry/146 Dem_SetCDTCOnConfirmation/90 Dem_ProcessClearDTC/183 Dem_ProcessEvent/71 Dem_GbiEventKind/140 SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_ReadErrorQueueEntry/61 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 
Dem_SetDTCSuppression/53 (Dem_SetDTCSuppression) @06ec70e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_InternalSetDTCSuppression/182 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_GetNumberOfEventMemoryEntries/52 (Dem_GetNumberOfEventMemoryEntries) @06ebfb60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_EventMemoryPermanent/130 (read)Dem_EventMem/17 (read)Dem_SizeEventMem/23 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_GetMappedDTCOrigin/181 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_GetEventMemoryOverflow/51 (Dem_GetEventMemoryOverflow) @06ebf700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_NvData/16 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_GetMappedDTCOrigin/181 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_GetEventExtendedDataRecord/50 (Dem_GetEventExtendedDataRecord) @06ebf1c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_EDClass/177 (addr)Dem_EDSegment/179 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_AssembleExtendedDataSeg/180 Dem_SearchForEntry/134 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 Dem_FindEDNumIndex/178 Dem_GbiEDClassIdx/176 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_ASR42_GetEventFreezeFrameData/49 (Dem_ASR42_GetEventFreezeFrameData) @06eb8b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_FFClass/170 (addr)Dem_FFSegment/174 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Dem_GetEventFreezeFrameData/48 
  Calls: SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 TS_MemCpy32/125 Dem_SizeOfFFSegment/175 TS_MemCpy32/125 Dem_SizeOfFF/173 Dem_FFEntryData/172 Dem_CheckFFRecNumStored/171 Dem_SearchForEntry/134 Dem_FindFFSegIdx/66 Dem_GbiFFClassIdx/169 Dem_CheckFFRecNumValid/168 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 Dem_GbiMaxNumFFRecs/167 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_GetEventFreezeFrameData/48 (Dem_GetEventFreezeFrameData) @06eb8380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_ASR42_GetEventFreezeFrameData/49 
Dem_GetIndicatorStatus/47 (Dem_GetIndicatorStatus) @06eb81c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_InternalGetIndicatorStatus/166 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_GetFaultDetectionCounter/46 (Dem_GetFaultDetectionCounter) @06eb4d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_DebounceFctPtrTable/107 (read)Dem_DebounceFctPtrTable/107 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_GbiDebounceAlgo/106 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
   Indirect call
Dem_GetEventFreezeFrameDataEx/45 (Dem_GetEventFreezeFrameDataEx) @06eb47e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_GetEventExtendedDataRecordEx/44 (Dem_GetEventExtendedDataRecordEx) @06eb41c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_GetDebouncingOfEvent/43 (Dem_GetDebouncingOfEvent) @06e8ab60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_SetEnableCondition/42 (Dem_SetEnableCondition) @06e8a620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_EnCondStatus/162 (read)Dem_EnCondToEvIdLink/163 (read)Dem_EnCondToEvIdLink/163 (read)Dem_EnCondGrpLink/164 (read)Dem_EnCondGrpStatusCounter/165 (read)Dem_EnCondGrpStatusCounter/165 (write)Dem_EnCondGrpLink/164 (read)Dem_EnCondGrpStatusCounter/165 (read)Dem_EnCondGrpStatusCounter/165 (write)Dem_EnCondStatus/162 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_GetDTCOfEvent/41 (Dem_GetDTCOfEvent) @06e8a1c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_GetUdsDTC/161 Dem_GetObdDTC/160 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_GetEventTested/40 (Dem_GetEventTested) @06e87c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_NvData/16 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_GetEventFailed/39 (Dem_GetEventFailed) @06e87620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_NvData/16 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_GetEventStatus/38 (Dem_GetEventStatus) @06e87000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_NvData/16 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_SetCycleQualified/37 (Dem_SetCycleQualified) @06e7fa80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_OpCycleState/108 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_DoProcessFaultConfirmation/0 (write)Dem_NvData/16 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_PermanentMemoryAddEntry/158 Dem_ProcessIndicatorFailureCycleCounter/157 Dem_IsMILEvent/103 Dem_GbiOpCycleIdx/147 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_SetOperationCycleState/36 (Dem_SetOperationCycleState) @06e7f380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_OpCycleState/108 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_CheckForTriggerNvmWriteGateEntry/146 Dem_OpCycleProcessCycleStart/101 Dem_OpCycleProcessCycleEnd/99 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_ClearPrestoredFreezeFrame/35 (Dem_ClearPrestoredFreezeFrame) @06e7aee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/105 Dem_GbiEnablePrestorage/145 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_PrestoreFreezeFrame/34 (Dem_PrestoreFreezeFrame) @06e7a9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/105 Dem_GbiEnablePrestorage/145 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_ResetEventDebounceStatus/33 (Dem_ResetEventDebounceStatus) @06e7a460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_DebounceFctPtrTable/107 (read)Dem_DebounceFctPtrTable/107 (read)Dem_DebounceFctPtrTable/107 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_GbiDebounceAlgo/106 Det_ASR40_ReportError/105 Dem_GbiDebounceAlgo/106 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
   Indirect call
   Indirect call
Dem_ResetEventStatus/32 (Dem_ResetEventStatus) @06e77e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_NvData/16 (read)Dem_NvData/16 (read)Dem_NvData/16 (read)Dem_NvData/16 (write)Dem_DebounceFctPtrTable/107 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_GbiDebounceAlgo/106 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
   Indirect call
Dem_SetEventStatus/31 (Dem_SetEventStatus) @06e77700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/105 Dem_InternalProcessEventReport/141 Det_ASR40_ReportError/105 Dem_GbiEventKind/140 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_ReportErrorStatusCore/30 (Dem_ReportErrorStatusCore) @06e77000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_InitializationState/104 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Dem_ReportErrorStatus/28 
  Calls: Det_ASR40_ReportError/105 Dem_InternalProcessEventReport/141 Dem_InternalProcessEventReport/141 
Dem_ReportErrorStatusPreInit/29 (Dem_ReportErrorStatusPreInit) @06e6ed20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_NvData/16 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/105 SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/144 Dem_WriteErrorQueueEntry/62 Dem_CheckErrorQueueEntry/63 SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0/143 Det_ASR40_ReportError/105 Dem_DebounceEvent/142 
Dem_ReportErrorStatus/28 (Dem_ReportErrorStatus) @06e6e8c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_ReportErrorStatusCore/30 Det_ASR40_ReportError/105 Dem_GbiEventKind/140 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 Det_ASR40_ReportError/105 
Dem_Shutdown/27 (Dem_Shutdown) @06e6e2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_InitializationState/104 (write)Dem_EvIdOfLockedMemoryEntry/132 (read)Dem_NvDataBlockId/22 (read)Dem_NvDataBlockId/22 (read)Dem_EventMem/17 (read)Dem_NvDataBlockId/22 (read)Dem_NvDataBlockId/22 (read)Dem_SizeEventMem/23 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: NvM_ASR40_SetRamBlockStatus/139 Eb_Intgr_BswM_TriggerMemoryStack/120 NvM_ASR40_WriteBlock/138 Dem_StoreImmediately/137 NvM_ASR40_SetDataIndex/118 Eb_Intgr_BswM_TriggerMemoryStack/120 Dem_ClearAgedEventEntry/136 Dem_IntValEntryData/135 Dem_SearchForEntry/134 Dem_GbiNumAgingCycles/133 Dem_MainFunction/54 Det_ASR40_ReportError/105 
Dem_Init/26 (Dem_Init) @06e6e000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_InitializationState/104 (read)Dem_InitializationState/104 (read)Dem_OpCycleState/108 (write)Dem_NvMGateEntryInfo/12 (write)Dem_ClearDtcAsyncStatus/13 (write)Dem_ClearDtcAsyncStatus/13 (write)Dem_ClearDtcAsyncStatus/13 (write)Dem_ClearDtcAsyncStatus/13 (write)Dem_InitSwUnitFncPtr/24 (read)Dem_InitializationState/104 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_InitMaxOBDOccOrder/89 Dem_InitMaxOccOrder/87 Dem_PermanentMemoryInit/59 Dem_RestoreImmediateData/57 Dem_InitEvEntryExists/109 Dem_ResetNvData/56 Dem_NvMGetNvRAMBlockStatus/55 Det_ASR40_ReportError/105 
   Indirect call
Dem_PreInit/25 (Dem_PreInit) @06c23d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Dem_InitializationState/104 (read)Dem_ErrorQueueReadIdx/1 (write)Dem_ErrorQueueWriteIdx/2 (write)Dem_ErrorQueue/11 (write)Dem_DebounceFctPtrTable/107 (read)Dem_InitializationState/104 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Dem_GbiDebounceAlgo/106 Det_ASR40_ReportError/105 
   Indirect call
Dem_InitSwUnitFncPtr/24 (Dem_InitSwUnitFncPtr) @06c25000
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: Dem_InitEventReportVerifier/110 (addr)Dem_InitDTCFilter/111 (addr)Dem_InitDTCSelector/112 (addr)Dem_InitEventMemoryProcessor/113 (addr)Dem_InitRecordFilter/114 (addr)Dem_InitDataRecordSelector/115 (addr)Dem_InitDTCMemoryFilter/116 (addr)
  Referring: Dem_Init/26 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Dem_SizeEventMem/23 (Dem_SizeEventMem) @06daff30
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Dem_RestoreImmediateData/57 (read)Dem_InitMaxOccOrder/87 (read)Dem_Shutdown/27 (read)Dem_GetNumberOfEventMemoryEntries/52 (read)Dem_SetCDTCOnConfirmation/90 (read)Dem_SearchForEmptyEntry/83 (read)Dem_SearchForEntryToReplace/84 (read)Dem_UpdateOccurrenceOrder/85 (read)Dem_RearrangeOccurrenceOrder/86 (read)Dem_RearrangeOccurrenceOrder/86 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Dem_NvDataBlockId/22 (Dem_NvDataBlockId) @06dafee8
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Dem_RestoreImmediateData/57 (read)Dem_Shutdown/27 (read)Dem_Shutdown/27 (read)Dem_Shutdown/27 (read)Dem_Shutdown/27 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Dem_GateEntryData/21 (Dem_GateEntryData) @06dafea0
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: Dem_NvGateEntryPrimaryData/14 (addr)Dem_NvGateEntrySecondaryData/15 (addr)
  Referring: Dem_RestoreImmediateData/57 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Dem_NvGateEntryData/20 (Dem_NvGateEntryData) @06dafe58
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: Dem_NvGateEntryPrimaryData/14 (addr)Dem_NvGateEntrySecondaryData/15 (addr)
  Referring: Dem_RestoreImmediateData/57 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Dem_EntryDataFreePos/19 (Dem_EntryDataFreePos) @06dafe10
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: Dem_EntryDataFreePosPrimary/9 (addr)Dem_EntryDataFreePosSecondary/10 (addr)
  Referring: Dem_RestoreImmediateData/57 (read)Dem_RestoreImmediateData/57 (read)Dem_RestoreImmediateData/57 (read)Dem_RestoreImmediateData/57 (read)Dem_RestoreImmediateData/57 (read)Dem_RestoreImmediateData/57 (read)Dem_FindOrAllocateEventEntry/75 (read)Dem_FindOrAllocateEventEntry/75 (read)Dem_FindOrAllocateEventEntry/75 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Dem_EntryData/18 (Dem_EntryData) @06dafdc8
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: Dem_EntryDataPrimary/7 (addr)Dem_EntryDataSecondary/8 (addr)
  Referring: Dem_RestoreImmediateData/57 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Dem_EventMem/17 (Dem_EventMem) @06dafd80
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: Dem_EventMemoryPrimary/5 (addr)Dem_EventMemorySecondary/6 (addr)
  Referring: Dem_RestoreImmediateData/57 (read)Dem_InitMaxOccOrder/87 (read)Dem_Shutdown/27 (read)Dem_GetNumberOfEventMemoryEntries/52 (read)Dem_SetCDTCOnConfirmation/90 (read)Dem_SetCDTCOnConfirmation/90 (read)Dem_SearchForEmptyEntry/83 (read)Dem_SearchForEntryToReplace/84 (read)Dem_UpdateOccurrenceOrder/85 (read)Dem_RearrangeOccurrenceOrder/86 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Dem_NvData/16 (Dem_NvData) @06dafd38
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Dem_ResetNvData/56 (write)Dem_ResetNvData/56 (write)Dem_ResetNvData/56 (write)Dem_ResetNvData/56 (write)Dem_ResetNvData/56 (write)Dem_ResetNvData/56 (write)Dem_ResetNvData/56 (write)Dem_ResetNvData/56 (write)Dem_RestoreImmediateData/57 (read)Dem_RestoreImmediateData/57 (write)Dem_RestoreDerivedEventStatus/58 (read)Dem_RestoreDerivedEventStatus/58 (write)Dem_RestoreDerivedEventStatus/58 (read)Dem_RestoreDerivedEventStatus/58 (write)Dem_RestoreDerivedEventStatus/58 (read)Dem_RestoreDerivedEventStatus/58 (write)Dem_ReportErrorStatusPreInit/29 (read)Dem_ResetEventStatus/32 (read)Dem_ResetEventStatus/32 (read)Dem_ResetEventStatus/32 (read)Dem_ResetEventStatus/32 (write)Dem_OpCycleProcessEventCycleEnd/100 (read)Dem_OpCycleProcessEventCycleEnd/100 (read)Dem_OpCycleProcessEventCycleEnd/100 (write)Dem_OpCycleProcessEventCycleEnd/100 (read)Dem_ProcessFailureCounterReset/91 (read)Dem_OpCycleProcessCycleStart/101 (read)Dem_OpCycleProcessCycleStart/101 (write)Dem_OpCycleProcessCycleStart/101 (write)Dem_ProcessIndicator/94 (read)Dem_ProcessIndicatorOffCriteria/95 (read)Dem_ProcessIndicatorOffCriteria/95 (addr)Dem_ProcessIndicatorOffCriteria/95 (read)Dem_ProcessIndicatorOffCriteria/95 (read)Dem_ProcessIndicatorOffCriteria/95 (write)Dem_ProcessIndicatorOffCriteria/95 (read)Dem_ProcessIndicatorOffCriteria/95 (write)Dem_ProcessIndicatorOffCriteria/95 (read)Dem_ProcessIndicatorOffCriteria/95 (read)Dem_ProcessIndicatorOffCriteria/95 (write)Dem_SetCycleCounterRole/97 (addr)Dem_CheckWIROffCriteriaFulfilled/98 (addr)Dem_CheckWIROffCriteriaFulfilled/98 (addr)Dem_OpCycleProcessEventCycleStart/102 (read)Dem_OpCycleProcessEventCycleStart/102 (write)Dem_OpCycleProcessEventCycleStart/102 (read)Dem_OpCycleProcessEventCycleStart/102 (write)Dem_UpdateFailureCounterCycleStart/92 (read)Dem_SetCycleQualified/37 (read)Dem_SetCycleQualified/37 (write)Dem_SetCycleQualified/37 (read)Dem_SetCycleQualified/37 (read)Dem_SetCycleQualified/37 (write)Dem_GetEventStatus/38 (read)Dem_GetEventFailed/39 (read)Dem_GetEventTested/40 (read)Dem_GetEventMemoryOverflow/51 (read)Dem_MainFunction/54 (read)Dem_SetCDTCOnConfirmation/90 (read)Dem_SetCDTCOnConfirmation/90 (read)Dem_SetCDTCOnConfirmation/90 (read)Dem_SetCDTCOnConfirmation/90 (write)Dem_SelectEntryOfOBDFreezeFrameEvent/69 (read)Dem_ProcessEventEntry/72 (read)Dem_ProcessEventEntry/72 (read)Dem_ProcessEventEntry/72 (write)Dem_ReplaceEventEntry/76 (read)Dem_ReplaceEventEntry/76 (write)Dem_ReplaceEventEntry/76 (read)Dem_ReplaceEventEntry/76 (addr)Dem_SearchForEntryToReplace/84 (read)Dem_SearchForEntryToReplace/84 (read)Dem_UpdateEventIdOccurKinds/74 (read)Dem_UpdateEventIdOccurKinds/74 (write)Dem_UpdateEventIdOccurKinds/74 (write)Dem_IncrementFailureCounter/93 (read)Dem_IncrementFailureCounter/93 (write)Dem_ProcessIndicatorOnCriteria/96 (addr)Dem_ProcessIndicatorOnCriteria/96 (read)Dem_ProcessIndicatorOnCriteria/96 (addr)Dem_ProcessIndicatorOnCriteria/96 (addr)Dem_ProcessIndicatorOnCriteria/96 (addr)
  Availability: available
  Varpool flags:
Dem_NvGateEntrySecondaryData/15 (Dem_NvGateEntrySecondaryData) @06dafcf0
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Dem_NvGateEntryData/20 (addr)Dem_GateEntryData/21 (addr)
  Availability: available
  Varpool flags:
Dem_NvGateEntryPrimaryData/14 (Dem_NvGateEntryPrimaryData) @06dafca8
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Dem_NvGateEntryData/20 (addr)Dem_GateEntryData/21 (addr)Dem_RestoreImmediateData/57 (addr)Dem_RestoreImmediateData/57 (addr)
  Availability: available
  Varpool flags:
Dem_ClearDtcAsyncStatus/13 (Dem_ClearDtcAsyncStatus) @06dafc60
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Dem_Init/26 (write)Dem_Init/26 (write)Dem_Init/26 (write)Dem_Init/26 (write)Dem_MainFunction/54 (read)
  Availability: available
  Varpool flags:
Dem_NvMGateEntryInfo/12 (Dem_NvMGateEntryInfo) @06dafc18
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Dem_Init/26 (write)
  Availability: available
  Varpool flags:
Dem_ErrorQueue/11 (Dem_ErrorQueue) @06dafbd0
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Dem_PreInit/25 (write)Dem_InvalidateErrorQueueEntry/60 (read)Dem_InvalidateErrorQueueEntry/60 (read)Dem_InvalidateErrorQueueEntry/60 (write)Dem_ReadErrorQueueEntry/61 (write)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (write)Dem_WriteErrorQueueEntry/62 (read)Dem_WriteErrorQueueEntry/62 (write)Dem_CheckErrorQueueEntry/63 (read)Dem_CheckErrorQueueEntry/63 (read)Dem_CheckErrorReQueueEntry/64 (read)Dem_CheckErrorQueueEntryForStatus/65 (read)Dem_CheckErrorQueueEntryForStatus/65 (read)
  Availability: available
  Varpool flags:
Dem_EntryDataFreePosSecondary/10 (Dem_EntryDataFreePosSecondary) @06dafb88
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Dem_EntryDataFreePos/19 (addr)
  Availability: available
  Varpool flags:
Dem_EntryDataFreePosPrimary/9 (Dem_EntryDataFreePosPrimary) @06dafb40
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Dem_EntryDataFreePos/19 (addr)
  Availability: available
  Varpool flags:
Dem_EntryDataSecondary/8 (Dem_EntryDataSecondary) @06dafaf8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Dem_EntryData/18 (addr)
  Availability: available
  Varpool flags:
Dem_EntryDataPrimary/7 (Dem_EntryDataPrimary) @06dafab0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Dem_EntryData/18 (addr)
  Availability: available
  Varpool flags:
Dem_EventMemorySecondary/6 (Dem_EventMemorySecondary) @06dafa68
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Dem_EventMem/17 (addr)
  Availability: available
  Varpool flags:
Dem_EventMemoryPrimary/5 (Dem_EventMemoryPrimary) @06dafa20
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Dem_EventMem/17 (addr)Dem_InitMaxOBDOccOrder/89 (addr)Dem_ProcessMultipleOBDFreezeFrameEntry/68 (addr)Dem_RearrangeOBDOccurrenceOrder/88 (addr)Dem_RearrangeOBDOccurrenceOrder/88 (addr)Dem_RearrangeOBDOccurrenceOrder/88 (addr)Dem_SelectEntryOfOBDFreezeFrameEvent/69 (addr)Dem_SelectEntryOfOBDFreezeFrameEvent/69 (addr)Dem_SelectEntryOfOBDFreezeFrameEvent/69 (addr)
  Availability: available
  Varpool flags:
Dem_MaxOccOrder/4 (Dem_MaxOccOrder) @06daf9d8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Dem_InitMaxOccOrder/87 (write)Dem_InitMaxOccOrder/87 (read)Dem_InitMaxOccOrder/87 (write)Dem_UpdateOccurrenceOrder/85 (read)Dem_UpdateOccurrenceOrder/85 (read)Dem_UpdateOccurrenceOrder/85 (read)Dem_UpdateOccurrenceOrder/85 (write)Dem_UpdateOccurrenceOrder/85 (read)Dem_UpdateOccurrenceOrder/85 (read)Dem_RearrangeOccurrenceOrder/86 (write)
  Availability: available
  Varpool flags:
Dem_MaxOBDOccOrder/3 (Dem_MaxOBDOccOrder) @06daf990
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Dem_InitMaxOBDOccOrder/89 (write)Dem_InitMaxOBDOccOrder/89 (read)Dem_InitMaxOBDOccOrder/89 (write)Dem_SetOBDFFOccurrenceOrder/70 (read)Dem_SetOBDFFOccurrenceOrder/70 (read)Dem_SetOBDFFOccurrenceOrder/70 (read)Dem_SetOBDFFOccurrenceOrder/70 (write)Dem_RearrangeOBDOccurrenceOrder/88 (write)
  Availability: available
  Varpool flags:
Dem_ErrorQueueWriteIdx/2 (Dem_ErrorQueueWriteIdx) @06daf948
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Dem_PreInit/25 (write)Dem_InvalidateErrorQueueEntry/60 (read)Dem_InvalidateErrorQueueEntry/60 (read)Dem_WriteErrorQueueEntry/62 (read)Dem_WriteErrorQueueEntry/62 (read)Dem_WriteErrorQueueEntry/62 (read)Dem_WriteErrorQueueEntry/62 (write)Dem_WriteErrorQueueEntry/62 (read)Dem_WriteErrorQueueEntry/62 (write)Dem_CheckErrorQueueEntry/63 (read)Dem_CheckErrorReQueueEntry/64 (read)Dem_CheckErrorQueueEntryForStatus/65 (read)
  Availability: available
  Varpool flags:
Dem_ErrorQueueReadIdx/1 (Dem_ErrorQueueReadIdx) @06daf900
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Dem_PreInit/25 (write)Dem_InvalidateErrorQueueEntry/60 (read)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (write)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (write)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (write)Dem_ReadErrorQueueEntry/61 (read)Dem_ReadErrorQueueEntry/61 (write)Dem_CheckErrorQueueEntry/63 (read)Dem_CheckErrorQueueEntry/63 (read)Dem_CheckErrorReQueueEntry/64 (read)Dem_CheckErrorQueueEntryForStatus/65 (read)Dem_CheckErrorQueueEntryForStatus/65 (read)
  Availability: available
  Varpool flags:
Dem_DoProcessFaultConfirmation/0 (Dem_DoProcessFaultConfirmation) @06daf8b8
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Dem_UpdateFailureCounterCycleStart/92 (write)Dem_SetCycleQualified/37 (write)Dem_MainFunction/54 (read)Dem_MainFunction/54 (write)
  Availability: available
  Varpool flags: initialized
Dem_IsMILEvent (Dem_EventIdType EventId, Dem_IndicatorIdxType * IndicatorIdx)
{
  const uint32 IndMILEnd;
  const uint32 IndMILStart;
  Dem_IndicatorIdxType Index;
  boolean Result;
  boolean D.8306;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Dem_GbiIndicatorUsed (EventId);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Dem_IndicatorDesc[0].StartIdx;
  IndMILStart = (const uint32) _2;
  # DEBUG BEGIN_STMT
  _3 = Dem_IndicatorDesc[0].Number;
  _4 = (long unsigned int) _3;
  IndMILEnd = IndMILStart + _4;
  # DEBUG BEGIN_STMT
  Index = (Dem_IndicatorIdxType) IndMILStart;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (int) Index;
  _6 = Dem_IndicatorLink[_5].EventId;
  if (EventId == _6)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  *IndicatorIdx = Index;
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index.44_7 = Index;
  Index = Index.44_7 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _8 = (unsigned char) IndMILEnd;
  if (Index < _8)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8306 = Result;
  return D.8306;

}


Dem_OpCycleProcessEventCycleStart (Dem_EventIdType EventId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) EventId;
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (int) EventId;
  _4 = _2 | 64;
  Dem_NvData.DTCStatusMask[_3] = _4;
  # DEBUG BEGIN_STMT
  _5 = (int) EventId;
  _6 = Dem_NvData.DTCStatusMask[_5];
  _7 = (int) EventId;
  _8 = _6 & 253;
  Dem_NvData.DTCStatusMask[_7] = _8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _9 = Dem_GbiDebounceAlgo (EventId);
  _10 = Dem_DebounceFctPtrTable[_9].ResetFct;
  _10 (EventId);
  # DEBUG BEGIN_STMT
  return;

}


Dem_OpCycleProcessCycleStart (Dem_OperationCycleIdType OperationCycleId)
{
  Dem_EventIdType EventId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EventId = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ProcessIndicator (OperationCycleId);
  # DEBUG BEGIN_STMT
  if (OperationCycleId == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dem_PermanentMemoryStatusUpdate ();
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated.40_1 = Dem_EventMemoryPermanentUpdated;
  if (Dem_EventMemoryPermanentUpdated.40_1 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  NvM_ASR40_WriteBlock (8, 0B);

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = Dem_NvData.ReadinessEnableStatus;
  _3 = _2 | 16383;
  Dem_NvData.ReadinessEnableStatus = _3;
  # DEBUG BEGIN_STMT
  Dem_NvData.Dem_OpCycleDCYIsQualified = 0;
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = Dem_GbiOpCycleIdx (EventId);
  if (OperationCycleId == _4)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Dem_OpCycleProcessEventCycleStart (EventId);
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Dem_UpdateFailureCounterCycleStart (EventId, OperationCycleId);

  <bb 10> :
  # DEBUG BEGIN_STMT
  EventId = EventId + 1;
  # DEBUG BEGIN_STMT
  _5 = EventId % 10;
  if (_5 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  if (EventId <= 14)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (EventId <= 14)
    goto <bb 6>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_OpCycleProcessEventCycleEnd (Dem_EventIdType EventId)
{
  uint8 AgingCriteriaMask;
  boolean UpdateAgingCounterCriteriaFulfilled;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _1 = (int) EventId;
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (unsigned int) _2;
  _4 = _3 & 66;
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = (int) EventId;
  _6 = Dem_NvData.DTCStatusMask[_5];
  _7 = (int) EventId;
  _8 = _6 & 251;
  Dem_NvData.DTCStatusMask[_7] = _8;

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _9 = Dem_GbiNumAgingCycles (EventId);
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  UpdateAgingCounterCriteriaFulfilled = 0;
  # DEBUG BEGIN_STMT
  AgingCriteriaMask = 2;
  # DEBUG BEGIN_STMT
  AgingCriteriaMask = AgingCriteriaMask | 64;
  # DEBUG BEGIN_STMT
  _10 = (int) EventId;
  _11 = Dem_NvData.DTCStatusMask[_10];
  _12 = AgingCriteriaMask & _11;
  _13 = _12 == 0;
  UpdateAgingCounterCriteriaFulfilled = (boolean) _13;
  # DEBUG BEGIN_STMT
  if (UpdateAgingCounterCriteriaFulfilled == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Dem_UpdateAgingCounter (EventId);

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_OpCycleProcessCycleEnd (Dem_OperationCycleIdType OperationCycleId)
{
  Dem_EventIdType EventId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EventId = 1;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Dem_GbiOpCycleIdx (EventId);
  if (OperationCycleId == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Dem_OpCycleProcessEventCycleEnd (EventId);

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dem_ProcessFailureCounterReset (EventId, OperationCycleId);
  # DEBUG BEGIN_STMT
  EventId = EventId + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId <= 14)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (OperationCycleId == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated.31_2 = Dem_EventMemoryPermanentUpdated;
  if (Dem_EventMemoryPermanentUpdated.31_2 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  NvM_ASR40_WriteBlock (8, 0B);

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_CheckWIROffCriteriaFulfilled (Dem_EventIdType EventId)
{
  const Dem_CounterDataIdxType CounterDataIdx;
  uint8 * const CycleCounterWIR;
  Dem_IndicatorIdxType LinkIdx;
  boolean Result;
  boolean D.8266;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CycleCounterWIR = &Dem_NvData.IndicatorCycleCounterWIRStatus[0];
  # DEBUG BEGIN_STMT
  LinkIdx = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) LinkIdx;
  _2 = Dem_IndicatorLink[_1].EventId;
  if (EventId == _2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CounterDataIdx = LinkIdx;
  # DEBUG BEGIN_STMT
  _3 = CounterDataIdx / 8;
  _4 = (sizetype) _3;
  _5 = &Dem_NvData.IndicatorCycleCounterWIRStatus[0] + _4;
  _6 = *_5;
  _7 = (unsigned int) CounterDataIdx;
  _8 = _7 & 7;
  _9 = 1 << _8;
  _10 = (unsigned char) _9;
  _11 = _6 & _10;
  if (_11 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Result = 0;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  LinkIdx = LinkIdx + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (LinkIdx == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8266 = Result;
  return D.8266;

}


Dem_SetCycleCounterRole (Dem_IndicatorIdType IndicatorId, Dem_CounterDataIdxType CounterDataIdx, Dem_IndicatorCounterDataRoleType CounterDataRole)
{
  uint8 * const Role;
  unsigned char D.8261;
  unsigned char D.8259;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) IndicatorId;
  Role = &Dem_NvData.IndicatorCycleCounterRole[_1];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (CounterDataRole == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  D.8259 = CounterDataIdx / 8;
  _2 = (sizetype) D.8259;
  _3 = Role + _2;
  _4 = *_3;
  _5 = (unsigned int) CounterDataIdx;
  _6 = _5 & 7;
  _7 = 1 << _6;
  _8 = (unsigned char) _7;
  _9 = (sizetype) D.8259;
  _10 = Role + _9;
  _11 = _4 | _8;
  *_10 = _11;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.8261 = CounterDataIdx / 8;
  _12 = (sizetype) D.8261;
  _13 = Role + _12;
  _14 = *_13;
  _15 = (unsigned int) CounterDataIdx;
  _16 = _15 & 7;
  _17 = 1 << _16;
  _18 = (unsigned char) _17;
  _19 = ~_18;
  _20 = (sizetype) D.8261;
  _21 = Role + _20;
  _22 = _14 & _19;
  *_21 = _22;

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessIndicatorOnCriteria (Dem_IndicatorIdxType IndicatorIdx, Dem_EventIdType EventId)
{
  Dem_IndicatorCounterDataRoleType IndicatorCounterDataRole;
  Dem_IndicatorCycleCounterType * const CycleCounter;
  const Dem_IndicatorCycleCounterType FailureCycleThreshold;
  const Dem_IndicatorIdType IndicatorId;
  const Dem_FailureCycleCounterInfoIdxType FailureCycleCounterInfoIdx;
  const Dem_CounterDataIdxType CounterDataIdx;
  Dem_IndicatorCounterDataRoleType iftmp.145;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CounterDataIdx = IndicatorIdx;
  # DEBUG BEGIN_STMT
  _1 = (int) IndicatorIdx;
  FailureCycleCounterInfoIdx = Dem_IndicatorLink[_1].FailureCycleCounterInfoIdx;
  # DEBUG BEGIN_STMT
  IndicatorId = 0;
  # DEBUG BEGIN_STMT
  _2 = (int) FailureCycleCounterInfoIdx;
  FailureCycleThreshold = Dem_FailureCycleCounterInfo[_2].Threshold;
  # DEBUG BEGIN_STMT
  CycleCounter = &Dem_NvData.IndicatorCycleCounter[0];
  # DEBUG BEGIN_STMT
  _3 = CounterDataIdx / 8;
  _4 = (unsigned int) _3;
  _5 = Dem_NvData.IndicatorCycleCounterRole[0][_4];
  _6 = (unsigned int) CounterDataIdx;
  _7 = _6 & 7;
  _8 = 1 << _7;
  _9 = (unsigned char) _8;
  _10 = _5 & _9;
  if (_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.145 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.145 = 0;

  <bb 5> :
  IndicatorCounterDataRole = iftmp.145;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (IndicatorCounterDataRole != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  IndicatorCounterDataRole = 0;
  # DEBUG BEGIN_STMT
  Dem_SetCycleCounterRole (0, CounterDataIdx, IndicatorCounterDataRole);
  # DEBUG BEGIN_STMT
  _11 = (sizetype) CounterDataIdx;
  _12 = &Dem_NvData.IndicatorCycleCounter[0] + _11;
  *_12 = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _13 = (sizetype) CounterDataIdx;
  _14 = &Dem_NvData.IndicatorCycleCounter[0] + _13;
  _15 = *_14;
  if (FailureCycleThreshold > _15)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _16 = (sizetype) CounterDataIdx;
  _17 = &Dem_NvData.IndicatorCycleCounter[0] + _16;
  _18 = *_17;
  _19 = _18;
  _20 = _19 + 1;
  *_17 = _20;

  <bb 9> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessIndicatorOffCriteria (Dem_IndicatorIdxType IndicatorIdx, Dem_EventIdType EventId)
{
  boolean IsMIL;
  const uint32 IndMILEnd;
  const uint32 IndMILStart;
  boolean IsWIRSet;
  Dem_IndicatorCounterDataRoleType IndicatorCounterDataRole;
  Dem_IndicatorCycleCounterType * CounterPtr;
  boolean Continue;
  const Dem_IndicatorCycleCounterType HealingCycleThreshold;
  const Dem_HealingCycleCounterInfoIdxType HealingCycleCounterInfoIdx;
  const Dem_IndicatorIdType IndicatorId;
  const Dem_CounterDataIdxType CounterDataIdx;
  boolean iftmp.41;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) EventId;
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (unsigned int) _2;
  _4 = _3 & 67;
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  CounterDataIdx = IndicatorIdx;
  # DEBUG BEGIN_STMT
  IndicatorId = 0;
  # DEBUG BEGIN_STMT
  _5 = (int) IndicatorIdx;
  HealingCycleCounterInfoIdx = Dem_IndicatorLink[_5].HealingCycleCounterInfoIdx;
  # DEBUG BEGIN_STMT
  _6 = (int) HealingCycleCounterInfoIdx;
  HealingCycleThreshold = Dem_HealingCycleCounterInfo[_6].Threshold;
  # DEBUG BEGIN_STMT
  Continue = 0;
  # DEBUG BEGIN_STMT
  _7 = (int) CounterDataIdx;
  CounterPtr = &Dem_NvData.IndicatorCycleCounter[0][_7];
  # DEBUG BEGIN_STMT
  IndicatorCounterDataRole = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _8 = CounterDataIdx / 8;
  _9 = (unsigned int) _8;
  _10 = Dem_NvData.IndicatorCycleCounterWIRStatus[0][_9];
  _11 = (unsigned int) CounterDataIdx;
  _12 = _11 & 7;
  _13 = 1 << _12;
  _14 = (unsigned char) _13;
  _15 = _10 & _14;
  _16 = _15 != 0;
  IsWIRSet = (boolean) _16;
  # DEBUG BEGIN_STMT
  _17 = CounterDataIdx / 8;
  _18 = (unsigned int) _17;
  _19 = Dem_NvData.IndicatorCycleCounterRole[0][_18];
  _20 = (unsigned int) CounterDataIdx;
  _21 = _20 & 7;
  _22 = 1 << _21;
  _23 = (unsigned char) _22;
  _24 = _19 & _23;
  if (_24 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  IndicatorCounterDataRole = 1;
  # DEBUG BEGIN_STMT
  Dem_SetCycleCounterRole (0, CounterDataIdx, IndicatorCounterDataRole);
  # DEBUG BEGIN_STMT
  _25 = (int) CounterDataIdx;
  Dem_NvData.IndicatorCycleCounter[0][_25] = 0;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (IsWIRSet != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _26 = *CounterPtr;
  if (HealingCycleThreshold > _26)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _27 = *CounterPtr;
  _28 = _27 + 1;
  *CounterPtr = _28;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _29 = *CounterPtr;
  if (HealingCycleThreshold <= _29)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _30 = CounterDataIdx / 8;
  _31 = (unsigned int) _30;
  _32 = Dem_NvData.IndicatorCycleCounterWIRStatus[0][_31];
  _33 = (unsigned int) CounterDataIdx;
  _34 = _33 & 7;
  _35 = 1 << _34;
  _36 = (unsigned char) _35;
  _37 = ~_36;
  _38 = CounterDataIdx / 8;
  _39 = (unsigned int) _38;
  _40 = _32 & _37;
  Dem_NvData.IndicatorCycleCounterWIRStatus[0][_39] = _40;

  <bb 10> :
  # DEBUG BEGIN_STMT
  Continue = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (Continue == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _41 = (int) CounterDataIdx;
  _42 = Dem_NvData.IndicatorCycleCounter[0][_41];
  if (HealingCycleThreshold <= _42)
    goto <bb 13>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _43 = Dem_IndicatorDesc[0].StartIdx;
  IndMILStart = (const uint32) _43;
  # DEBUG BEGIN_STMT
  _44 = Dem_IndicatorDesc[0].Number;
  _45 = (long unsigned int) _44;
  IndMILEnd = IndMILStart + _45;
  # DEBUG BEGIN_STMT
  _46 = (long unsigned int) IndicatorIdx;
  if (IndMILStart <= _46)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _47 = (long unsigned int) IndicatorIdx;
  if (IndMILEnd > _47)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.41 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.41 = 0;

  <bb 17> :
  IsMIL = iftmp.41;
  # DEBUG BEGIN_STMT
  if (IsMIL != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Dem_PermanentMemoryRemoveEntry (EventId);
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 19> :
  # DEBUG BEGIN_STMT
  _48 = Dem_CheckWIROffCriteriaFulfilled (EventId);
  if (_48 == 1)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _49 = (int) EventId;
  _50 = Dem_NvData.DTCStatusMask[_49];
  _51 = (int) EventId;
  _52 = _50 & 127;
  Dem_NvData.DTCStatusMask[_51] = _52;
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 21> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessIndicator (Dem_OperationCycleIdType OperationCycleId)
{
  const Dem_OperationCycleIdType EventOperationCycle;
  const Dem_OperationCycleIdType HealingCycleId;
  const Dem_OperationCycleIdType FailureCycleId;
  const Dem_EventIdType EventId;
  Dem_IndicatorIdxType LinkIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  LinkIdx = 0;
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) LinkIdx;
  EventId = Dem_IndicatorLink[_1].EventId;
  # DEBUG BEGIN_STMT
  FailureCycleId = Dem_GbiIndicatorFailureCycleIdx (EventId, LinkIdx);
  # DEBUG BEGIN_STMT
  HealingCycleId = Dem_GbiIndicatorHealingCycleIdx (EventId, LinkIdx);
  # DEBUG BEGIN_STMT
  if (HealingCycleId == OperationCycleId)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Dem_ProcessIndicatorOffCriteria (LinkIdx, EventId);

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (FailureCycleId == OperationCycleId)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  EventOperationCycle = Dem_GbiOpCycleIdx (EventId);
  # DEBUG BEGIN_STMT
  if (FailureCycleId != EventOperationCycle)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = (int) EventId;
  _3 = Dem_NvData.DTCStatusMask[_2];
  _4 = (unsigned int) _3;
  _5 = _4 & 1;
  if (_5 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Dem_ProcessIndicatorOnCriteria (LinkIdx, EventId);

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 10> :
  # DEBUG BEGIN_STMT
  LinkIdx = LinkIdx + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (LinkIdx == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_IncrementFailureCounter (Dem_EventIdType EventId, boolean HandleCDTC)
{
  const Dem_FailureCycleCounterType CurrentEvThreshold;
  Dem_SizeEvMemEntryType EvMemEntryIdx;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  boolean Result;
  boolean D.8966;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Dem_SearchForEntry (EventId, &EvMemEntry, &EvMemEntryIdx);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiEventFailureClassIdx (EventId);
  _3 = (int) _2;
  CurrentEvThreshold = Dem_EventFailureCycleCfg[_3].EventFailureCycleCounterThreshold;
  # DEBUG BEGIN_STMT
  EvMemEntry.140_4 = EvMemEntry;
  _5 = EvMemEntry.140_4->EventFailureCycleCounter;
  if (CurrentEvThreshold > _5)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EvMemEntry.141_6 = EvMemEntry;
  _7 = EvMemEntry.141_6->EventFailureCycleCounter;
  _8 = _7;
  _9 = _8 + 1;
  EvMemEntry.141_6->EventFailureCycleCounter = _9;
  # DEBUG BEGIN_STMT
  EvMemEntry.142_10 = EvMemEntry;
  _11 = EvMemEntry.142_10->EventFailureCycleCounter;
  if (CurrentEvThreshold <= _11)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (HandleCDTC == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _12 = (int) EventId;
  _13 = Dem_NvData.DTCStatusMask[_12];
  _14 = (int) EventId;
  _15 = _13 | 8;
  Dem_NvData.DTCStatusMask[_14] = _15;

  <bb 7> :
  # DEBUG BEGIN_STMT
  Result = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  EvMemEntry.143_16 = EvMemEntry;
  EvMemEntryIdx.144_17 = EvMemEntryIdx;
  Dem_CheckForImmediateEntryStorage (EventId, EvMemEntry.143_16, EvMemEntryIdx.144_17, 0);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8966 = Result;
  EvMemEntry = {CLOBBER};
  EvMemEntryIdx = {CLOBBER};
  return D.8966;

}


Dem_UpdateFailureCounterCycleStart (Dem_EventIdType EventId, Dem_OperationCycleIdType OperationCycleId)
{
  boolean HandleCDTC;
  const Dem_OperationCycleIdType EventOpCycleIdx;
  const Dem_OperationCycleIdType EventFailureCycleIdx;
  const uint16 EventFailureClassIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EventFailureClassIdx = Dem_GbiEventFailureClassIdx (EventId);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  EventFailureCycleIdx = Dem_GbiEventFailureCycleIdx (EventId, EventFailureClassIdx);
  # DEBUG BEGIN_STMT
  EventOpCycleIdx = Dem_GbiOpCycleIdx (EventId);
  # DEBUG BEGIN_STMT
  if (EventFailureCycleIdx == OperationCycleId)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  if (EventFailureCycleIdx != EventOpCycleIdx)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _1 = (int) EventId;
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (unsigned int) _2;
  _4 = _3 & 10;
  if (_4 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  HandleCDTC = 0;
  # DEBUG BEGIN_STMT
  _5 = Dem_IncrementFailureCounter (EventId, HandleCDTC);
  if (_5 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Dem_DoProcessFaultConfirmation = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessFailureCounterReset (Dem_EventIdType EventId, Dem_OperationCycleIdType OperationCycleId)
{
  const Dem_OperationCycleIdType EventFailureCycleIdx;
  Dem_SizeEvMemEntryType EvMemEntryIdx;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  const uint16 EventFailureClassIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EventFailureClassIdx = Dem_GbiEventFailureClassIdx (EventId);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  EventFailureCycleIdx = Dem_GbiEventFailureCycleIdx (EventId, EventFailureClassIdx);
  # DEBUG BEGIN_STMT
  if (EventFailureCycleIdx == OperationCycleId)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = (int) EventId;
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (unsigned int) _2;
  _4 = _3 & 74;
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _5 = Dem_SearchForEntry (EventId, &EvMemEntry, &EvMemEntryIdx);
  if (_5 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  EvMemEntry.37_6 = EvMemEntry;
  EvMemEntry.37_6->EventFailureCycleCounter = 0;
  # DEBUG BEGIN_STMT
  EvMemEntry.38_7 = EvMemEntry;
  EvMemEntryIdx.39_8 = EvMemEntryIdx;
  Dem_CheckForImmediateEntryStorage (EventId, EvMemEntry.38_7, EvMemEntryIdx.39_8, 0);

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 8> :
  # DEBUG BEGIN_STMT
  EvMemEntry = {CLOBBER};
  EvMemEntryIdx = {CLOBBER};
  return;

}


Dem_SetCDTCOnConfirmation ()
{
  boolean HandleCDTCPreconditions;
  uint16 EventFailureClassIdx;
  Dem_EventIdType * EventIdPtr;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr;
  Dem_EventIdType EventId;
  Dem_SizeEvMemEntryType Entry;
  uint8_least OriginIdx;
  boolean iftmp.81;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OriginIdx = 0;
  goto <bb 19>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Entry = 0;
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = Dem_EventMem[OriginIdx];
  _2 = (unsigned int) Entry;
  _3 = _2 * 16;
  EvMemEntryPtr = _1 + _3;
  # DEBUG BEGIN_STMT
  EventIdPtr = &EvMemEntryPtr->EventId;
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  EventId = *EventIdPtr;
  # DEBUG BEGIN_STMT
  if (EventId != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = (int) EventId;
  _5 = Dem_NvData.DTCStatusMask[_4];
  _6 = (unsigned int) _5;
  _7 = _6 & 8;
  if (_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = Dem_GbiOpCycleIdx (EventId);
  if (_8 != 1)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _9 = Dem_NvData.Dem_OpCycleDCYIsQualified;
  if (_9 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  EventFailureClassIdx = Dem_GbiEventFailureClassIdx (EventId);
  # DEBUG BEGIN_STMT
  HandleCDTCPreconditions = 0;
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx != 1)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _10 = Dem_EventMem[OriginIdx];
  _11 = (unsigned int) Entry;
  _12 = _11 * 16;
  _13 = _10 + _12;
  _14 = _13->EventFailureCycleCounter;
  _15 = (int) EventFailureClassIdx;
  _16 = Dem_EventFailureCycleCfg[_15].EventFailureCycleCounterThreshold;
  if (_14 >= _16)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.81 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.81 = 0;

  <bb 12> :
  HandleCDTCPreconditions = iftmp.81;
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  HandleCDTCPreconditions = 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (HandleCDTCPreconditions == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _17 = (int) EventId;
  _18 = Dem_NvData.DTCStatusMask[_17];
  _19 = (int) EventId;
  _20 = _18 | 8;
  Dem_NvData.DTCStatusMask[_19] = _20;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_UpdateEventIdOccurKinds (EventId, 3, 4);
  # DEBUG BEGIN_STMT
  Dem_CheckForImmediateEntryStorage (EventId, EvMemEntryPtr, Entry, 0);

  <bb 16> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Entry = Entry + 1;

  <bb 17> :
  # DEBUG BEGIN_STMT
  _21 = Dem_SizeEventMem[OriginIdx];
  if (Entry < _21)
    goto <bb 4>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  OriginIdx = OriginIdx + 1;

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (OriginIdx <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_InitMaxOBDOccOrder ()
{
  Dem_EventIdType CurrentEvId;
  Dem_SizeEvMemEntryType EntryIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_MaxOBDOccOrder = 0;
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = &Dem_EventMemoryPrimary;
  _2 = (unsigned int) EntryIdx;
  _3 = _2 * 16;
  _4 = _1 + _3;
  CurrentEvId = _4->EventId;
  # DEBUG BEGIN_STMT
  _5 = Dem_GbiDTCKind (CurrentEvId);
  if (_5 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _6 = (int) EntryIdx;
  _7 = Dem_EntryOBDFF[_6].OBDOccOrder;
  Dem_MaxOBDOccOrder.12_8 = Dem_MaxOBDOccOrder;
  if (_7 > Dem_MaxOBDOccOrder.12_8)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = (int) EntryIdx;
  _10 = Dem_EntryOBDFF[_9].OBDOccOrder;
  Dem_MaxOBDOccOrder = _10;

  <bb 6> :
  # DEBUG BEGIN_STMT
  EntryIdx.13_11 = EntryIdx;
  EntryIdx = EntryIdx.13_11 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (EntryIdx <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_RearrangeOBDOccurrenceOrder ()
{
  Dem_EventIdType CurrentEvId;
  Dem_OccOrderType NextMinOccOrder;
  Dem_EventIdType CurrentEvId;
  struct Dem_EventMemoryEntryType * const EvMemEntry;
  Dem_OccOrderType NextOccOrder;
  Dem_SizeEvMemEntryType NumValidEntries;
  Dem_SizeEvMemEntryType ValidEntryIdx;
  Dem_SizeEvMemEntryType FoundEntryIdx;
  Dem_SizeEvMemEntryType EntryIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FoundEntryIdx = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NumValidEntries = 0;
  # DEBUG BEGIN_STMT
  NextOccOrder = 0;
  # DEBUG BEGIN_STMT
  EvMemEntry = &Dem_EventMemoryPrimary;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = &Dem_EventMemoryPrimary;
  _2 = (unsigned int) EntryIdx;
  _3 = _2 * 16;
  _4 = _1 + _3;
  CurrentEvId = _4->EventId;
  # DEBUG BEGIN_STMT
  _5 = Dem_GbiDTCKind (CurrentEvId);
  if (_5 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  if (CurrentEvId != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  NumValidEntries.114_6 = NumValidEntries;
  NumValidEntries = NumValidEntries.114_6 + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  EntryIdx.115_7 = EntryIdx;
  EntryIdx = EntryIdx.115_7 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (EntryIdx <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ValidEntryIdx = 0;
  goto <bb 21>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  NextMinOccOrder = 65535;
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 16>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _8 = &Dem_EventMemoryPrimary;
  _9 = (unsigned int) EntryIdx;
  _10 = _9 * 16;
  _11 = _8 + _10;
  CurrentEvId = _11->EventId;
  # DEBUG BEGIN_STMT
  _12 = Dem_GbiDTCKind (CurrentEvId);
  if (_12 == 2)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 11> :
  if (CurrentEvId != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  _13 = (int) EntryIdx;
  _14 = Dem_EntryOBDFF[_13].OBDOccOrder;
  if (NextOccOrder <= _14)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _15 = (int) EntryIdx;
  _16 = Dem_EntryOBDFF[_15].OBDOccOrder;
  if (NextMinOccOrder >= _16)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _17 = (int) EntryIdx;
  NextMinOccOrder = Dem_EntryOBDFF[_17].OBDOccOrder;
  # DEBUG BEGIN_STMT
  FoundEntryIdx = EntryIdx;

  <bb 15> :
  # DEBUG BEGIN_STMT
  EntryIdx.116_18 = EntryIdx;
  EntryIdx = EntryIdx.116_18 + 1;

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (EntryIdx <= 1)
    goto <bb 10>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _19 = (int) FoundEntryIdx;
  _20 = Dem_EntryOBDFF[_19].OBDOccOrder;
  if (NextOccOrder < _20)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _21 = (int) FoundEntryIdx;
  Dem_EntryOBDFF[_21].OBDOccOrder = NextOccOrder;
  # DEBUG BEGIN_STMT
  _22 = (unsigned int) FoundEntryIdx;
  _23 = _22 * 16;
  _24 = EvMemEntry + _23;
  _25 = _24->EntryStatus;
  if (_25 != 3)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _26 = (unsigned int) FoundEntryIdx;
  _27 = _26 * 16;
  _28 = EvMemEntry + _27;
  _28->EntryStatus = 2;

  <bb 20> :
  # DEBUG BEGIN_STMT
  NextOccOrder.117_29 = NextOccOrder;
  NextOccOrder = NextOccOrder.117_29 + 1;
  # DEBUG BEGIN_STMT
  ValidEntryIdx.118_30 = ValidEntryIdx;
  ValidEntryIdx = ValidEntryIdx.118_30 + 1;

  <bb 21> :
  # DEBUG BEGIN_STMT
  if (ValidEntryIdx < NumValidEntries)
    goto <bb 9>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _31 = (short unsigned int) NumValidEntries;
  _32 = _31 + 65535;
  Dem_MaxOBDOccOrder = _32;
  # DEBUG BEGIN_STMT
  return;

}


Dem_InitMaxOccOrder ()
{
  Dem_SizeEvMemEntryType EntryIdx;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  uint8 OriginIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OriginIdx = 0;
  goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) OriginIdx;
  Dem_MaxOccOrder[_1] = 0;
  # DEBUG BEGIN_STMT
  _2 = (int) OriginIdx;
  EvMemEntry = Dem_EventMem[_2];
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = (unsigned int) EntryIdx;
  _4 = _3 * 16;
  _5 = EvMemEntry + _4;
  _6 = _5->EventId;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = (unsigned int) EntryIdx;
  _8 = _7 * 16;
  _9 = EvMemEntry + _8;
  _10 = _9->OccOrder;
  _11 = (int) OriginIdx;
  _12 = Dem_MaxOccOrder[_11];
  if (_10 > _12)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _13 = (unsigned int) EntryIdx;
  _14 = _13 * 16;
  _15 = EvMemEntry + _14;
  _16 = (int) OriginIdx;
  _17 = _15->OccOrder;
  Dem_MaxOccOrder[_16] = _17;

  <bb 7> :
  # DEBUG BEGIN_STMT
  EntryIdx.10_18 = EntryIdx;
  EntryIdx = EntryIdx.10_18 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _19 = (int) OriginIdx;
  _20 = Dem_SizeEventMem[_19];
  if (EntryIdx < _20)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  OriginIdx.11_21 = OriginIdx;
  OriginIdx = OriginIdx.11_21 + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (OriginIdx <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_RearrangeOccurrenceOrder (uint8 OriginIdx)
{
  Dem_OccOrderType NextMinOccOrder;
  Dem_OccOrderType NextOccOrder;
  Dem_SizeEvMemEntryType NumValidEntries;
  Dem_SizeEvMemEntryType ValidEntryIdx;
  Dem_SizeEvMemEntryType FoundEntryIdx;
  Dem_SizeEvMemEntryType EntryIdx;
  struct Dem_EventMemoryEntryType * const EvMemEntry;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) OriginIdx;
  EvMemEntry = Dem_EventMem[_1];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FoundEntryIdx = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NumValidEntries = 0;
  # DEBUG BEGIN_STMT
  NextOccOrder = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (unsigned int) EntryIdx;
  _3 = _2 * 16;
  _4 = EvMemEntry + _3;
  _5 = _4->EventId;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  NumValidEntries.135_6 = NumValidEntries;
  NumValidEntries = NumValidEntries.135_6 + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  EntryIdx.136_7 = EntryIdx;
  EntryIdx = EntryIdx.136_7 + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = (int) OriginIdx;
  _9 = Dem_SizeEventMem[_8];
  if (EntryIdx < _9)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ValidEntryIdx = 0;
  goto <bb 19>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  NextMinOccOrder = 65535;
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _10 = (unsigned int) EntryIdx;
  _11 = _10 * 16;
  _12 = EvMemEntry + _11;
  _13 = _12->EventId;
  if (_13 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  _14 = (unsigned int) EntryIdx;
  _15 = _14 * 16;
  _16 = EvMemEntry + _15;
  _17 = _16->OccOrder;
  if (NextOccOrder <= _17)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _18 = (unsigned int) EntryIdx;
  _19 = _18 * 16;
  _20 = EvMemEntry + _19;
  _21 = _20->OccOrder;
  if (NextMinOccOrder >= _21)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _22 = (unsigned int) EntryIdx;
  _23 = _22 * 16;
  _24 = EvMemEntry + _23;
  NextMinOccOrder = _24->OccOrder;
  # DEBUG BEGIN_STMT
  FoundEntryIdx = EntryIdx;

  <bb 13> :
  # DEBUG BEGIN_STMT
  EntryIdx.137_25 = EntryIdx;
  EntryIdx = EntryIdx.137_25 + 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  _26 = (int) OriginIdx;
  _27 = Dem_SizeEventMem[_26];
  if (EntryIdx < _27)
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _28 = (unsigned int) FoundEntryIdx;
  _29 = _28 * 16;
  _30 = EvMemEntry + _29;
  _31 = _30->OccOrder;
  if (NextOccOrder < _31)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _32 = (unsigned int) FoundEntryIdx;
  _33 = _32 * 16;
  _34 = EvMemEntry + _33;
  _34->OccOrder = NextOccOrder;
  # DEBUG BEGIN_STMT
  _35 = (unsigned int) FoundEntryIdx;
  _36 = _35 * 16;
  _37 = EvMemEntry + _36;
  _38 = _37->EntryStatus;
  if (_38 != 3)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _39 = (unsigned int) FoundEntryIdx;
  _40 = _39 * 16;
  _41 = EvMemEntry + _40;
  _41->EntryStatus = 2;

  <bb 18> :
  # DEBUG BEGIN_STMT
  NextOccOrder.138_42 = NextOccOrder;
  NextOccOrder = NextOccOrder.138_42 + 1;
  # DEBUG BEGIN_STMT
  ValidEntryIdx.139_43 = ValidEntryIdx;
  ValidEntryIdx = ValidEntryIdx.139_43 + 1;

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (ValidEntryIdx < NumValidEntries)
    goto <bb 8>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _44 = (short unsigned int) NumValidEntries;
  _45 = (int) OriginIdx;
  _46 = _44 + 65535;
  Dem_MaxOccOrder[_45] = _46;
  # DEBUG BEGIN_STMT
  return;

}


Dem_UpdateOccurrenceOrder (struct Dem_EventMemoryEntryType * UpdatedEvMemEntry)
{
  Dem_SizeEvMemEntryType EntryIdx;
  struct Dem_EventMemoryEntryType * const EvMemEntry;
  const uint8 OriginIdx;
  boolean MaxOccOrderIncrement;
  boolean OrderRearranged;
  boolean D.8932;

  <bb 2> :
  # DEBUG BEGIN_STMT
  OrderRearranged = 0;
  # DEBUG BEGIN_STMT
  MaxOccOrderIncrement = 1;
  # DEBUG BEGIN_STMT
  _1 = UpdatedEvMemEntry->EventId;
  OriginIdx = Dem_GbiDTCOriginIdx (_1);
  # DEBUG BEGIN_STMT
  _2 = (int) OriginIdx;
  EvMemEntry = Dem_EventMem[_2];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = (int) OriginIdx;
  _4 = Dem_MaxOccOrder[_3];
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  MaxOccOrderIncrement = 0;
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (unsigned int) EntryIdx;
  _6 = _5 * 16;
  _7 = EvMemEntry + _6;
  _8 = _7->EventId;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _9 = (unsigned int) EntryIdx;
  _10 = _9 * 16;
  _11 = EvMemEntry + _10;
  _12 = _11->EventId;
  _13 = UpdatedEvMemEntry->EventId;
  if (_12 != _13)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  MaxOccOrderIncrement = 1;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EntryIdx.134_14 = EntryIdx;
  EntryIdx = EntryIdx.134_14 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _15 = (int) OriginIdx;
  _16 = Dem_SizeEventMem[_15];
  if (EntryIdx < _16)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _17 = (int) OriginIdx;
  _18 = Dem_MaxOccOrder[_17];
  _19 = UpdatedEvMemEntry->OccOrder;
  if (_18 != _19)
    goto <bb 12>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _20 = UpdatedEvMemEntry->OccOrder;
  if (_20 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 11> :
  if (MaxOccOrderIncrement == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (MaxOccOrderIncrement == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _21 = (int) OriginIdx;
  _22 = Dem_MaxOccOrder[_21];
  _23 = _22;
  _24 = _23 + 1;
  Dem_MaxOccOrder[_21] = _24;

  <bb 14> :
  # DEBUG BEGIN_STMT
  _25 = (int) OriginIdx;
  _26 = Dem_MaxOccOrder[_25];
  UpdatedEvMemEntry->OccOrder = _26;
  # DEBUG BEGIN_STMT
  _27 = (int) OriginIdx;
  _28 = Dem_MaxOccOrder[_27];
  if (_28 == 65535)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Dem_RearrangeOccurrenceOrder (OriginIdx);
  # DEBUG BEGIN_STMT
  OrderRearranged = 1;

  <bb 16> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8932 = OrderRearranged;
  return D.8932;

}


Dem_SearchForEntryToReplace (uint8 OriginIdx, Dem_EventIdType NewEventId, Dem_FFKindType FFKind, struct Dem_EventMemoryEntryType * * FoundEntry, Dem_SizeEvMemEntryType * FoundEntryIdx)
{
  boolean IsBestEventPassive;
  boolean IsCurrentEventPassive;
  const Dem_PriorityType CurrentEvtPrioVal;
  const Dem_EventIdType CurrentEventId;
  Dem_PriorityType BestPrioVal;
  const Dem_PriorityType NewEvtPrioVal;
  Dem_SizeEvMemEntryType BestEntryIdx;
  Dem_SizeEvMemEntryType EntryIdx;
  struct Dem_EventMemoryEntryType * const EvMemEntry;
  const Dem_SizeEvMemEntryType SizeEventMem;
  Dem_EventDisplacementCriterionMatchType CriterionMatch;
  boolean Result;
  boolean D.8882;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 0;
  # DEBUG BEGIN_STMT
  CriterionMatch = 4;
  # DEBUG BEGIN_STMT
  _1 = (int) OriginIdx;
  SizeEventMem = Dem_SizeEventMem[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) OriginIdx;
  EvMemEntry = Dem_EventMem[_2];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  BestEntryIdx = 0;
  # DEBUG BEGIN_STMT
  NewEvtPrioVal = Dem_GbiPriority (NewEventId);
  # DEBUG BEGIN_STMT
  BestPrioVal = NewEvtPrioVal;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 20>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = (unsigned int) EntryIdx;
  _4 = _3 * 16;
  _5 = EvMemEntry + _4;
  CurrentEventId = _5->EventId;
  # DEBUG BEGIN_STMT
  CurrentEvtPrioVal = Dem_GbiPriority (CurrentEventId);
  # DEBUG BEGIN_STMT
  if (CurrentEventId != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 4> :
  if (CurrentEvtPrioVal >= BestPrioVal)
    goto <bb 5>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (CurrentEvtPrioVal > BestPrioVal)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  BestPrioVal = CurrentEvtPrioVal;
  # DEBUG BEGIN_STMT
  BestEntryIdx = EntryIdx;
  # DEBUG BEGIN_STMT
  CriterionMatch = 1;
  goto <bb 19>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  IsCurrentEventPassive = 0;
  # DEBUG BEGIN_STMT
  IsBestEventPassive = 0;
  # DEBUG BEGIN_STMT
  _6 = (int) CurrentEventId;
  _7 = Dem_NvData.DTCStatusMask[_6];
  _8 = (unsigned int) _7;
  _9 = _8 & 1;
  _10 = _9 == 0;
  IsCurrentEventPassive = (boolean) _10;
  # DEBUG BEGIN_STMT
  if (CurrentEvtPrioVal == NewEvtPrioVal)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (IsCurrentEventPassive == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 9> :
  if (CriterionMatch > 2)
    goto <bb 12>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (CriterionMatch == 2)
    goto <bb 11>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 11> :
  _11 = (unsigned int) EntryIdx;
  _12 = _11 * 16;
  _13 = EvMemEntry + _12;
  _14 = _13->OccOrder;
  _15 = (unsigned int) BestEntryIdx;
  _16 = _15 * 16;
  _17 = EvMemEntry + _16;
  _18 = _17->OccOrder;
  if (_14 < _18)
    goto <bb 12>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  BestEntryIdx = EntryIdx;
  # DEBUG BEGIN_STMT
  CriterionMatch = 2;
  goto <bb 19>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _19 = (unsigned int) BestEntryIdx;
  _20 = _19 * 16;
  _21 = EvMemEntry + _20;
  _22 = _21->EventId;
  _23 = (int) _22;
  _24 = Dem_NvData.DTCStatusMask[_23];
  _25 = (unsigned int) _24;
  _26 = _25 & 1;
  _27 = _26 == 0;
  IsBestEventPassive = (boolean) _27;
  # DEBUG BEGIN_STMT
  if (IsBestEventPassive == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  if (IsCurrentEventPassive == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  BestEntryIdx = EntryIdx;
  goto <bb 19>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (IsBestEventPassive == IsCurrentEventPassive)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _28 = (unsigned int) EntryIdx;
  _29 = _28 * 16;
  _30 = EvMemEntry + _29;
  _31 = _30->OccOrder;
  _32 = (unsigned int) BestEntryIdx;
  _33 = _32 * 16;
  _34 = EvMemEntry + _33;
  _35 = _34->OccOrder;
  if (_31 < _35)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  BestEntryIdx = EntryIdx;

  <bb 19> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx = EntryIdx + 1;

  <bb 20> :
  # DEBUG BEGIN_STMT
  if (EntryIdx < SizeEventMem)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  if (CriterionMatch != 4)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _36 = (unsigned int) BestEntryIdx;
  _37 = _36 * 16;
  _38 = EvMemEntry + _37;
  *FoundEntry = _38;
  # DEBUG BEGIN_STMT
  *FoundEntryIdx = BestEntryIdx;
  # DEBUG BEGIN_STMT
  Result = 1;

  <bb 23> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8882 = Result;
  return D.8882;

}


Dem_SearchForEmptyEntry (uint8 OriginIdx, struct Dem_EventMemoryEntryType * * FoundEntry, Dem_SizeEvMemEntryType * FoundEntryIdx)
{
  struct Dem_EventMemoryEntryType * EvMemEntry;
  Dem_SizeEvMemEntryType EntryIdx;
  const Dem_SizeEvMemEntryType SizeEventMem;
  boolean Result;
  boolean D.8845;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) OriginIdx;
  SizeEventMem = Dem_SizeEventMem[_1];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = (int) OriginIdx;
  EvMemEntry = Dem_EventMem[_2];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = (unsigned int) EntryIdx;
  _4 = _3 * 16;
  _5 = EvMemEntry + _4;
  _6 = _5->EventId;
  if (_6 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EntryIdx = EntryIdx + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (EntryIdx < SizeEventMem)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EntryIdx < SizeEventMem)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  *FoundEntryIdx = EntryIdx;
  # DEBUG BEGIN_STMT
  _7 = (unsigned int) EntryIdx;
  _8 = _7 * 16;
  _9 = EvMemEntry + _8;
  *FoundEntry = _9;
  # DEBUG BEGIN_STMT
  Result = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8845 = Result;
  return D.8845;

}


Dem_ReadExternalDataElement (uint8 * DestBuffer, Dem_DataElementIdxType DataElementIndex, Dem_EventIdType EventId)
{
  const Dem_DataElementDataType DataType;
  Std_ReturnType Result;
  Std_ReturnType D.8956;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  _1 = (int) DataElementIndex;
  DataType = Dem_DataElement[_1].DataType;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = (int) DataType;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _3 = (int) DataElementIndex;
  _4 = Dem_DataElement[_3].ReadFunction.Callback;
  Result = _4 (DestBuffer);
  # DEBUG BEGIN_STMT

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8956 = Result;
  return D.8956;

}


Dem_StoreED (Dem_EntryDataType * EDEntryData, const struct Dem_EDClassType * EDClass, boolean EntryExists, Dem_EventIdType EventId)
{
  Dem_SizeEntryDataType StopIndex;
  Dem_SizeEntryDataType StartIndex;
  Dem_SizeEntryDataType Index;
  const Dem_SizeEntryDataType DataElementSize;
  Dem_DataElementIdxType DataElementIdx;
  Dem_NumDataElementsType DataElementIndex;
  Std_ReturnType DataPresent;
  Dem_EDStartByteType EDStartByte;
  Dem_DataElementOffsetType EDDataElemOffset;
  const struct Dem_EDSegmentType * EDSegment;
  Std_ReturnType Result;
  Dem_EDSegIdxType EDSegIdx;
  Dem_EDSegIdxType SegIdx;
  Std_ReturnType D.8898;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result = 51;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SegIdx = 0;
  goto <bb 16>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = EDClass->EDSegIdx;
  _2 = (sizetype) SegIdx;
  _3 = _1 + _2;
  EDSegIdx = *_3;
  # DEBUG BEGIN_STMT
  _4 = (int) EDSegIdx;
  EDSegment = &Dem_EDSegment[_4];
  # DEBUG BEGIN_STMT
  _5 = EDClass->StartByte;
  _6 = (unsigned int) SegIdx;
  _7 = _6 * 2;
  _8 = _5 + _7;
  EDStartByte = *_8;
  # DEBUG BEGIN_STMT
  if (EntryExists == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _9 = EDSegment->Update;
  if (_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  DataPresent = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DataElementIndex = 0;
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = EDSegment->DataElementIdx;
  _11 = (unsigned int) DataElementIndex;
  _12 = _11 * 2;
  _13 = _10 + _12;
  DataElementIdx = *_13;
  # DEBUG BEGIN_STMT
  _14 = (int) DataElementIdx;
  _15 = Dem_DataElement[_14].Size;
  DataElementSize = (const Dem_SizeEntryDataType) _15;
  # DEBUG BEGIN_STMT
  _16 = EDSegment->DataElementOffset;
  _17 = (unsigned int) DataElementIndex;
  _18 = _17 * 2;
  _19 = _16 + _18;
  EDDataElemOffset = *_19;
  # DEBUG BEGIN_STMT
  _20 = (int) EDStartByte;
  _21 = (int) EDDataElemOffset;
  _22 = _20 + _21;
  _23 = (sizetype) _22;
  _24 = EDEntryData + _23;
  DataPresent = Dem_ReadExternalDataElement (_24, DataElementIdx, EventId);
  # DEBUG BEGIN_STMT
  if (DataPresent != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartIndex = EDStartByte + EDDataElemOffset;
  # DEBUG BEGIN_STMT
  StopIndex = StartIndex + DataElementSize;
  # DEBUG BEGIN_STMT
  Index = StartIndex;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _25 = (sizetype) Index;
  _26 = EDEntryData + _25;
  *_26 = 255;
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (Index < StopIndex)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Result = 48;

  <bb 11> :
  # DEBUG BEGIN_STMT
  DataElementIndex = DataElementIndex + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  _27 = EDSegment->NumEDDataElements;
  if (DataElementIndex < _27)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (Result != 48)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Result = 50;

  <bb 15> :
  # DEBUG BEGIN_STMT
  SegIdx = SegIdx + 1;

  <bb 16> :
  # DEBUG BEGIN_STMT
  _28 = EDClass->NumEDSegs;
  if (SegIdx < _28)
    goto <bb 3>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8898 = Result;
  return D.8898;

}


Dem_StoreOBDFreezeFrame (Dem_EventIdType EventId, Dem_SizeEvMemEntryType EventMemoryEntryIdx)
{
  Dem_SizeEntryDataType Index;
  const Dem_SizeEntryDataType DataElementSize;
  const Dem_DataElementIdxType PidElementIdx;
  const Dem_SizeEntryDataType ObdFFDataIdx;
  const struct Dem_PidClassType * PidClass;
  uint8_least PidDataElementIterator;
  boolean DataOfOBDFFInvalid;
  Std_ReturnType ReadFuncStatus;
  Dem_SizeEntryDataType StartByte;
  uint8_least PidIterator;
  Dem_EntryDataType * const OBDFFStoredData;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) EventMemoryEntryIdx;
  OBDFFStoredData = &Dem_EntryOBDFF[_1].OBDFFData;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartByte = 0;
  # DEBUG BEGIN_STMT
  ReadFuncStatus = 1;
  # DEBUG BEGIN_STMT
  DataOfOBDFFInvalid = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PidIterator = 0;
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PidClass = &Dem_PidClass[PidIterator];
  # DEBUG BEGIN_STMT
  PidDataElementIterator = 0;
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = PidClass->ObdFFPidDataElementOffset;
  _3 = _2 + PidDataElementIterator;
  _4 = *_3;
  _5 = (short unsigned int) _4;
  ObdFFDataIdx = StartByte + _5;
  # DEBUG BEGIN_STMT
  _6 = PidClass->DemPidDataElementIdx;
  _7 = _6 + PidDataElementIterator;
  _8 = *_7;
  PidElementIdx = (const Dem_DataElementIdxType) _8;
  # DEBUG BEGIN_STMT
  _9 = (int) PidElementIdx;
  _10 = Dem_DataElement[_9].Size;
  DataElementSize = (const Dem_SizeEntryDataType) _10;
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _11 = (sizetype) ObdFFDataIdx;
  _12 = OBDFFStoredData + _11;
  ReadFuncStatus = Dem_ReadExternalDataElement (_12, PidElementIdx, EventId);
  # DEBUG BEGIN_STMT
  if (ReadFuncStatus != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DataOfOBDFFInvalid = 1;
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _13 = (int) ObdFFDataIdx;
  _14 = (int) Index;
  _15 = _13 + _14;
  _16 = (sizetype) _15;
  _17 = OBDFFStoredData + _16;
  *_17 = 255;
  # DEBUG BEGIN_STMT
  Index.109_18 = Index;
  Index = Index.109_18 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (Index < DataElementSize)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  PidDataElementIterator = PidDataElementIterator + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _19 = PidClass->NumSegDataElements;
  _20 = (long unsigned int) _19;
  if (PidDataElementIterator < _20)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _21 = PidClass->Size;
  _22 = (short unsigned int) _21;
  StartByte = StartByte + _22;
  # DEBUG BEGIN_STMT
  PidIterator = PidIterator + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (PidIterator <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (DataOfOBDFFInvalid == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 255, 48);

  <bb 14> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_StoreFF (Dem_FFKindType FFKind, const struct Dem_FFClassType * const IndividPartFFClass, Dem_EntryDataType * const FFEntryData, Dem_EventIdType EventId)
{
  Dem_SizeEntryDataType Index;
  Dem_SizeEntryDataType StopIndex;
  const Dem_SizeEntryDataType StartIndex;
  Dem_SizeEntryDataType DataElementSize;
  Std_ReturnType DataPresent;
  const Dem_FFSegIdxType FFSegIdx;
  const struct Dem_FFClassType * FFPartClass[1];
  uint8_least FFPartIdx;
  Dem_SizeEntryDataType FFStartByte;
  Dem_DataElementIdxType DataElementIdx;
  Dem_NumDataElementsType DataElementIndex;
  const struct Dem_FFSegmentType * FFSegment;
  Std_ReturnType Result;
  Dem_NumFFSegsType SegIdx;
  Std_ReturnType D.8915;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result = 51;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFStartByte = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFPartClass[0] = IndividPartFFClass;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFPartIdx = 0;
  goto <bb 18>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SegIdx = 0;
  goto <bb 16>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = FFPartClass[FFPartIdx];
  _2 = _1->FFSegIdx;
  _3 = (unsigned int) SegIdx;
  _4 = _3 * 2;
  _5 = _2 + _4;
  FFSegIdx = *_5;
  # DEBUG BEGIN_STMT
  if (FFSegIdx != 65535)
    goto <bb 5>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  DataPresent = 1;
  # DEBUG BEGIN_STMT
  _6 = (int) FFSegIdx;
  FFSegment = &Dem_FFSegment[_6];
  # DEBUG BEGIN_STMT
  DataElementIndex = 0;
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  DataElementSize = 0;
  # DEBUG BEGIN_STMT
  _7 = FFSegment->DataElementIdx;
  _8 = (unsigned int) DataElementIndex;
  _9 = _8 * 2;
  _10 = _7 + _9;
  DataElementIdx = *_10;
  # DEBUG BEGIN_STMT
  _11 = (int) DataElementIdx;
  _12 = Dem_DataElement[_11].Size;
  DataElementSize = (Dem_SizeEntryDataType) _12;
  # DEBUG BEGIN_STMT
  _13 = (sizetype) FFStartByte;
  _14 = FFEntryData + _13;
  DataPresent = Dem_ReadExternalDataElement (_14, DataElementIdx, EventId);
  # DEBUG BEGIN_STMT
  if (DataPresent != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  StartIndex = FFStartByte;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StopIndex = StartIndex + DataElementSize;
  # DEBUG BEGIN_STMT
  Index = StartIndex;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _15 = (sizetype) Index;
  _16 = FFEntryData + _15;
  *_16 = 255;
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (Index < StopIndex)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Result = 48;

  <bb 11> :
  # DEBUG BEGIN_STMT
  FFStartByte = FFStartByte + DataElementSize;
  # DEBUG BEGIN_STMT
  DataElementIndex = DataElementIndex + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  _17 = FFSegment->NumFFDataElements;
  if (DataElementIndex < _17)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (Result != 48)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Result = 50;

  <bb 15> :
  # DEBUG BEGIN_STMT
  SegIdx = SegIdx + 1;

  <bb 16> :
  # DEBUG BEGIN_STMT
  _18 = FFPartClass[FFPartIdx];
  _19 = _18->NumFFSegs;
  if (SegIdx < _19)
    goto <bb 4>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FFPartIdx = FFPartIdx + 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  if (FFPartIdx == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8915 = Result;
  FFPartClass = {CLOBBER};
  return D.8915;

}


Dem_ProcessEventEntryEData (Dem_EventIdType EventId, const struct Dem_EventMemoryEntryType * EvMemEntryPtr, Dem_EventEntryAllocResultType EventEntryAllocResult)
{
  Dem_SizeEDType SizeOfED;
  Dem_SizeEntryDataType Index;
  Dem_EntryDataType * const EDEntryData;
  boolean EntryExists;
  const struct Dem_EDClassType * const EDClass;
  Std_ReturnType Result;
  Std_ReturnType D.8889;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 51;
  # DEBUG BEGIN_STMT
  _1 = Dem_GbiEDClassIdx (EventId);
  _2 = (int) _1;
  EDClass = &Dem_EDClass[_2];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = EDClass->NumEDSegs;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  EntryExists = 0;
  # DEBUG BEGIN_STMT
  EDEntryData = Dem_EDEntryData (EvMemEntryPtr);
  # DEBUG BEGIN_STMT
  _4 = EventEntryAllocResult + 4294967295;
  if (_4 <= 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SizeOfED = Dem_SizeOfED (EDClass);
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = (sizetype) Index;
  _6 = EDEntryData + _5;
  *_6 = 0;
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (Index < SizeOfED)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EntryExists = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  Result = Dem_StoreED (EDEntryData, EDClass, EntryExists, EventId);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8889 = Result;
  return D.8889;

}


Dem_ProcessEventEntryFFData (Dem_EventIdType EventId, struct Dem_EventMemoryEntryType * EvMemEntryPtr)
{
  Dem_EntryDataType * const FFEntryData;
  const Dem_FFIdxType FFIndex;
  const struct Dem_FFClassType * const FFClass;
  const Dem_FFIdxType MaxNumFF;
  Dem_FFClassIdxType IndividPartFFClassIdx;
  boolean ProcessFFStorage;
  Std_ReturnType Result;
  Std_ReturnType D.8907;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 51;
  # DEBUG BEGIN_STMT
  ProcessFFStorage = 1;
  # DEBUG BEGIN_STMT
  IndividPartFFClassIdx = Dem_GbiFFClassIdx (EventId);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (IndividPartFFClassIdx == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ProcessFFStorage = 0;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ProcessFFStorage == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  MaxNumFF = Dem_GbiMaxNumFFRecs (EventId);
  # DEBUG BEGIN_STMT
  _1 = (int) IndividPartFFClassIdx;
  FFClass = &Dem_FFClass[_1];
  # DEBUG BEGIN_STMT
  if (MaxNumFF > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _2 = EvMemEntryPtr->OccCtr;
  if (_2 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _3 = EvMemEntryPtr->OccCtr;
  _4 = MIN_EXPR <MaxNumFF, _3>;
  FFIndex = _4 + 255;
  # DEBUG BEGIN_STMT
  FFEntryData = Dem_FFEntryData (EvMemEntryPtr, FFClass, FFIndex);
  # DEBUG BEGIN_STMT
  Result = Dem_StoreFF (2, FFClass, FFEntryData, EventId);

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8907 = Result;
  return D.8907;

}


Dem_ReplaceEventEntry (Dem_EventIdType EventId, uint8 OriginIdx, struct Dem_EventMemoryEntryType * * EvMemEntryPtr, Dem_SizeEvMemEntryType * EvMemIdxPtr, Dem_EventIdType * ReplacedEventIdPtr, struct Dem_EventStatusChangedMsgType * EventStatusChangedMsgPtr)
{
  uint8 EventStatusClearMask;
  Dem_EventIdType ReplacedEventId;
  boolean ReplaceableEntryFound;
  Dem_EventEntryAllocResultType AllocationResult;
  Dem_EventEntryAllocResultType D.8853;

  <bb 2> :
  # DEBUG BEGIN_STMT
  AllocationResult = 0;
  # DEBUG BEGIN_STMT
  ReplaceableEntryFound = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReplaceableEntryFound = Dem_SearchForEntryToReplace (OriginIdx, EventId, 2, EvMemEntryPtr, EvMemIdxPtr);
  # DEBUG BEGIN_STMT
  if (ReplaceableEntryFound == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = *EvMemEntryPtr;
  ReplacedEventId = _1->EventId;
  # DEBUG BEGIN_STMT
  Dem_EvIdOfLockedMemoryEntry.133_2 = Dem_EvIdOfLockedMemoryEntry;
  if (ReplacedEventId != Dem_EvIdOfLockedMemoryEntry.133_2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EventStatusClearMask = 0;
  # DEBUG BEGIN_STMT
  _3 = *EvMemEntryPtr;
  Dem_ClearEventEntry (_3);
  # DEBUG BEGIN_STMT
  EventStatusClearMask = EventStatusClearMask | 8;
  # DEBUG BEGIN_STMT
  _4 = (int) ReplacedEventId;
  _5 = Dem_NvData.DTCStatusMask[_4];
  _6 = ~EventStatusClearMask;
  _7 = (int) ReplacedEventId;
  _8 = _5 & _6;
  Dem_NvData.DTCStatusMask[_7] = _8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *ReplacedEventIdPtr = ReplacedEventId;
  # DEBUG BEGIN_STMT
  AllocationResult = 2;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = Dem_NvData.EvMemOvfIndFlags;
  _10 = (int) OriginIdx;
  _11 = 1 << _10;
  _12 = (unsigned char) _11;
  _13 = _9 & _12;
  if (_13 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = (long unsigned int) OriginIdx;
  TS_AtomicSetBit_8 (&Dem_NvData.EvMemOvfIndFlags, _14);

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8853 = AllocationResult;
  return D.8853;

}


Dem_FindOrAllocateEventEntry (Dem_EventIdType EventId, Dem_EventStatusType EventStatus, struct Dem_EventMemoryEntryType * * EvMemEntryPtr, Dem_SizeEvMemEntryType * EvMemIdxPtr, Dem_EventIdType * ReplacedEventIdPtr, struct Dem_EventStatusChangedMsgType * EventStatusChangedMsgPtr)
{
  const Dem_OperationCycleIdType EventOpCycleIdx;
  const Dem_OperationCycleIdType EventFailureCycleIdx;
  const Dem_SizeEntryDataType width;
  const uint16 EventFailureClassIdx;
  const uint8 OriginIdx;
  Dem_EventEntryAllocResultType AllocationResult;
  Dem_EventEntryAllocResultType D.8840;

  <bb 2> :
  # DEBUG BEGIN_STMT
  AllocationResult = 0;
  # DEBUG BEGIN_STMT
  OriginIdx = Dem_GbiDTCOriginIdx (EventId);
  # DEBUG BEGIN_STMT
  EventFailureClassIdx = Dem_GbiEventFailureClassIdx (EventId);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Dem_SearchForEntry (EventId, EvMemEntryPtr, EvMemIdxPtr);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Dem_SearchForEmptyEntry (OriginIdx, EvMemEntryPtr, EvMemIdxPtr);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  AllocationResult = Dem_ReplaceEventEntry (EventId, OriginIdx, EvMemEntryPtr, EvMemIdxPtr, ReplacedEventIdPtr, EventStatusChangedMsgPtr);
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  AllocationResult = 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (AllocationResult != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  width = Dem_EvMemEntrySize (EventId, 1);
  # DEBUG BEGIN_STMT
  _3 = *EvMemEntryPtr;
  _3->EventId = EventId;
  # DEBUG BEGIN_STMT
  _4 = *EvMemEntryPtr;
  _4->OccCtr = 0;
  # DEBUG BEGIN_STMT
  Dem_SetEvEntryExists (EventId, 1);
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx != 1)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  EventFailureCycleIdx = Dem_GbiEventFailureCycleIdx (EventId, EventFailureClassIdx);
  # DEBUG BEGIN_STMT
  EventOpCycleIdx = Dem_GbiOpCycleIdx (EventId);
  # DEBUG BEGIN_STMT
  if (EventFailureCycleIdx != EventOpCycleIdx)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _5 = (int) EventFailureCycleIdx;
  _6 = Dem_OpCycleState[_5];
  if (_6 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _7 = *EvMemEntryPtr;
  _7->EventFailureCycleCounter = 0;
  goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _8 = *EvMemEntryPtr;
  _8->EventFailureCycleCounter = 1;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _9 = *EvMemEntryPtr;
  _9->EventFailureCycleCounter = 0;

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (width != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _10 = (int) OriginIdx;
  _11 = Dem_EntryDataFreePos[_10];
  _12 = *EvMemEntryPtr;
  _13 = *_11;
  _12->EntryDataPos = _13;
  # DEBUG BEGIN_STMT
  _14 = (int) OriginIdx;
  _15 = Dem_EntryDataFreePos[_14];
  _16 = *_15;
  _17 = (int) OriginIdx;
  _18 = Dem_EntryDataFreePos[_17];
  _19 = width + _16;
  *_18 = _19;
  goto <bb 18>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Dem_EvIdOfLockedMemoryEntry.132_20 = Dem_EvIdOfLockedMemoryEntry;
  if (EventId == Dem_EvIdOfLockedMemoryEntry.132_20)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  AllocationResult = 0;
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  AllocationResult = 3;

  <bb 18> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8840 = AllocationResult;
  return D.8840;

}


Dem_UpdateEventIdOccurKinds (Dem_EventIdType EventId, Dem_DTCRequestType FirstOccurKind, Dem_DTCRequestType MostRecentOccurKind)
{
  Dem_EventIdType StoredFirstEventId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Dem_GbiDTCOrigin (EventId);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GetVisibleUdsDTC (EventId);
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = (unsigned int) FirstOccurKind;
  _4 = _3 + 4294967295;
  StoredFirstEventId = Dem_NvData.OccurKindEventId[_4];
  # DEBUG BEGIN_STMT
  if (StoredFirstEventId != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = Dem_GetVisibleUdsDTC (StoredFirstEventId);
  if (_5 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  StoredFirstEventId = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (StoredFirstEventId == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _6 = (unsigned int) FirstOccurKind;
  _7 = _6 + 4294967295;
  Dem_NvData.OccurKindEventId[_7] = EventId;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _8 = (unsigned int) MostRecentOccurKind;
  _9 = _8 + 4294967295;
  Dem_NvData.OccurKindEventId[_9] = EventId;

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessEventStatusUpdate (Dem_EventIdType EventId, Dem_EventStatusType EventStatus, boolean FirstFailed, Dem_ProcessEventJobMaskType Jobs, struct Dem_EventNotificationDataType * Notification)
{
  const Dem_ProcessEventJobMaskType RelevantJobs;
  boolean EventWIRUpdate;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RelevantJobs = 3;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Jobs & 3;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (unsigned int) Jobs;
  _3 = _2 & 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EventWIRUpdate = Dem_CheckForEventWIRUpdate (EventId, EventStatus, FirstFailed);
  # DEBUG BEGIN_STMT
  Dem_UpdateEventStatusOnQualification (EventId, EventStatus, EventWIRUpdate, Notification);

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ProcessEventEntry (struct Dem_EventInfoType EventInfo, Dem_EventStatusType EventStatus, struct Dem_EventNotificationDataType * Notification)
{
  const uint16 EventFailureClassIdx;
  boolean NvMForceWrite;
  Std_ReturnType ProcessEDAndFFResult;
  Dem_EventEntryAllocResultType EventEntryAllocResult;
  Dem_EventIdType ReplacedEventId;
  Dem_EventIdType EventId;
  Dem_SizeEvMemEntryType EvMemEntryIdx;
  struct Dem_EventMemoryEntryType * EvMemEntryPtr;
  Std_ReturnType Result;
  Std_ReturnType D.8817;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 0;
  # DEBUG BEGIN_STMT
  EvMemEntryPtr = 0B;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EventId = EventInfo.EventId;
  # DEBUG BEGIN_STMT
  ReplacedEventId = EventId;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = &Notification->ReplacedEventMsg;
  EventEntryAllocResult = Dem_FindOrAllocateEventEntry (EventId, EventStatus, &EvMemEntryPtr, &EvMemEntryIdx, &ReplacedEventId, _1);
  # DEBUG BEGIN_STMT
  if (EventEntryAllocResult != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NvMForceWrite = 0;
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiNumAgingCycles (EventId);
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.120_3 = EvMemEntryPtr;
  _4 = Dem_IntValEntryData (EvMemEntryPtr.120_3);
  _5 = Dem_GbiNumAgingCycles (EventId);
  *_4 = _5;

  <bb 5> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.121_6 = EvMemEntryPtr;
  ProcessEDAndFFResult = Dem_ProcessEventEntryEData (EventId, EvMemEntryPtr.121_6, EventEntryAllocResult);
  # DEBUG BEGIN_STMT
  if (ProcessEDAndFFResult == 48)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Result = 48;

  <bb 7> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.122_7 = EvMemEntryPtr;
  _8 = EvMemEntryPtr.122_7->OccCtr;
  if (_8 != 255)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.123_9 = EvMemEntryPtr;
  _10 = EvMemEntryPtr.123_9->OccCtr;
  _11 = _10 + 1;
  EvMemEntryPtr.123_9->OccCtr = _11;

  <bb 9> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.124_12 = EvMemEntryPtr;
  ProcessEDAndFFResult = Dem_ProcessEventEntryFFData (EventId, EvMemEntryPtr.124_12);
  # DEBUG BEGIN_STMT
  if (ProcessEDAndFFResult == 48)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Result = 48;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _13 = Dem_GbiDTCKind (EventId);
  if (_13 == 2)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _14 = EventEntryAllocResult + 4294967295;
  if (_14 <= 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  EvMemEntryIdx.125_15 = EvMemEntryIdx;
  Dem_ProcessMultipleOBDFreezeFrameEntry (EventId, EvMemEntryIdx.125_15);

  <bb 14> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.126_16 = EvMemEntryPtr;
  _17 = EvMemEntryPtr.126_16->EventId;
  if (EventId == _17)
    goto <bb 15>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  EventFailureClassIdx = Dem_GbiEventFailureClassIdx (EventId);
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  EvMemEntryPtr.127_18 = EvMemEntryPtr;
  _19 = EvMemEntryPtr.127_18->EventFailureCycleCounter;
  _20 = (int) EventFailureClassIdx;
  _21 = Dem_EventFailureCycleCfg[_20].EventFailureCycleCounterThreshold;
  if (_19 >= _21)
    goto <bb 17>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _22 = Dem_GbiOpCycleIdx (EventId);
  if (_22 != 1)
    goto <bb 19>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _23 = Dem_NvData.Dem_OpCycleDCYIsQualified;
  if (_23 == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _24 = (int) EventId;
  _25 = Dem_NvData.DTCStatusMask[_24];
  _26 = (int) EventId;
  _27 = _25 | 8;
  Dem_NvData.DTCStatusMask[_26] = _27;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_UpdateEventIdOccurKinds (EventId, 3, 4);

  <bb 20> :
  # DEBUG BEGIN_STMT
  EvMemEntryPtr.128_28 = EvMemEntryPtr;
  NvMForceWrite = Dem_UpdateOccurrenceOrder (EvMemEntryPtr.128_28);
  # DEBUG BEGIN_STMT
  ReplacedEventId.129_29 = ReplacedEventId;
  EvMemEntryPtr.130_30 = EvMemEntryPtr;
  EvMemEntryIdx.131_31 = EvMemEntryIdx;
  Dem_CheckForImmediateEntryStorage (ReplacedEventId.129_29, EvMemEntryPtr.130_30, EvMemEntryIdx.131_31, NvMForceWrite);

  <bb 21> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8817 = Result;
  EvMemEntryPtr = {CLOBBER};
  EvMemEntryIdx = {CLOBBER};
  ReplacedEventId = {CLOBBER};
  return D.8817;

}


Dem_ProcessEvent (uint8 ServiceId, struct Dem_EventInfoType EventInfo, Dem_EventStatusType EventStatus, boolean FirstFailed, Dem_ProcessEventJobMaskType Jobs, struct Dem_EventNotificationDataType * Notification)
{
  Std_ReturnType ProcessEntryResult;
  const Dem_EventIdType EventId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EventId = EventInfo.EventId;
  # DEBUG BEGIN_STMT
  ProcessEntryResult = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Dem_ProcessEventStatusUpdate (EventId, EventStatus, FirstFailed, Jobs, Notification);
  # DEBUG BEGIN_STMT
  _1 = (unsigned int) Jobs;
  _2 = _1 & 4;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ProcessEntryResult = Dem_ProcessEventEntry (EventInfo, EventStatus, Notification);

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (ProcessEntryResult == 48)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, ServiceId, 48);

  <bb 6> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_SetOBDFFOccurrenceOrder (Dem_SizeEvMemEntryType EventMemoryEntryIdx)
{
  boolean OccurrenceOrderUpdated;
  boolean D.8749;

  <bb 2> :
  # DEBUG BEGIN_STMT
  OccurrenceOrderUpdated = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) EventMemoryEntryIdx;
  Dem_MaxOBDOccOrder.110_2 = Dem_MaxOBDOccOrder;
  Dem_EntryOBDFF[_1].OBDOccOrder = Dem_MaxOBDOccOrder.110_2;
  # DEBUG BEGIN_STMT
  Dem_MaxOBDOccOrder.111_3 = Dem_MaxOBDOccOrder;
  if (Dem_MaxOBDOccOrder.111_3 == 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dem_RearrangeOBDOccurrenceOrder ();
  # DEBUG BEGIN_STMT
  OccurrenceOrderUpdated = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  Dem_MaxOBDOccOrder.112_4 = Dem_MaxOBDOccOrder;
  Dem_MaxOBDOccOrder.113_5 = Dem_MaxOBDOccOrder.112_4;
  _6 = Dem_MaxOBDOccOrder.113_5 + 1;
  Dem_MaxOBDOccOrder = _6;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8749 = OccurrenceOrderUpdated;
  return D.8749;

}


Dem_SelectEntryOfOBDFreezeFrameEvent (Dem_SizeEvMemEntryType * SelectedEntryIndex, boolean SelectForReport)
{
  Dem_OccOrderType SelectedOccOrder;
  Dem_OccOrderType CurrentOccOrder;
  uint8 SelectedEventPrio;
  uint8 CurrentEventPrio;
  Dem_DTCKindType DtcKind;
  uint32 ObdDTC;
  uint32 VisibleDTC;
  Dem_EventIdType CurrentEvId;
  boolean IdentifiedOBDEventForReport;
  uint8 EntryIdx;
  Dem_SizeEvMemEntryType TemporaryEntryIdx;
  Dem_EventIdType SelectedEvId;
  boolean D.8785;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SelectedEvId = 0;
  # DEBUG BEGIN_STMT
  TemporaryEntryIdx = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IdentifiedOBDEventForReport = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 16>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = &Dem_EventMemoryPrimary;
  _2 = (unsigned int) EntryIdx;
  _3 = _2 * 16;
  _4 = _1 + _3;
  CurrentEvId = _4->EventId;
  # DEBUG BEGIN_STMT
  VisibleDTC = Dem_GetVisibleCmbDTC (0, CurrentEvId);
  # DEBUG BEGIN_STMT
  ObdDTC = Dem_GetObdDTC (CurrentEvId);
  # DEBUG BEGIN_STMT
  DtcKind = Dem_GbiDTCKind (CurrentEvId);
  # DEBUG BEGIN_STMT
  if (DtcKind == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 4> :
  if (SelectForReport == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (VisibleDTC != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (SelectForReport == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 7> :
  if (ObdDTC != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 8> :
  _5 = (int) CurrentEvId;
  _6 = Dem_NvData.DTCStatusMask[_5];
  _7 = (unsigned int) _6;
  _8 = _7 & 8;
  if (_8 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (IdentifiedOBDEventForReport == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  CurrentEventPrio = Dem_GbiPriority (CurrentEvId);
  # DEBUG BEGIN_STMT
  SelectedEventPrio = Dem_GbiPriority (SelectedEvId);
  # DEBUG BEGIN_STMT
  _9 = (int) EntryIdx;
  CurrentOccOrder = Dem_EntryOBDFF[_9].OBDOccOrder;
  # DEBUG BEGIN_STMT
  _10 = (int) TemporaryEntryIdx;
  SelectedOccOrder = Dem_EntryOBDFF[_10].OBDOccOrder;
  # DEBUG BEGIN_STMT
  if (CurrentEventPrio < SelectedEventPrio)
    goto <bb 13>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (CurrentEventPrio == SelectedEventPrio)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  if (CurrentOccOrder < SelectedOccOrder)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _11 = &Dem_EventMemoryPrimary;
  _12 = (unsigned int) EntryIdx;
  _13 = _12 * 16;
  _14 = _11 + _13;
  SelectedEvId = _14->EventId;
  # DEBUG BEGIN_STMT
  TemporaryEntryIdx = EntryIdx;
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _15 = &Dem_EventMemoryPrimary;
  _16 = (unsigned int) EntryIdx;
  _17 = _16 * 16;
  _18 = _15 + _17;
  SelectedEvId = _18->EventId;
  # DEBUG BEGIN_STMT
  TemporaryEntryIdx = EntryIdx;
  # DEBUG BEGIN_STMT
  IdentifiedOBDEventForReport = 1;

  <bb 15> :
  # DEBUG BEGIN_STMT
  EntryIdx.119_19 = EntryIdx;
  EntryIdx = EntryIdx.119_19 + 1;

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (EntryIdx <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  if (IdentifiedOBDEventForReport == 1)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  *SelectedEntryIndex = TemporaryEntryIdx;

  <bb 19> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8785 = IdentifiedOBDEventForReport;
  return D.8785;

}


Dem_ProcessMultipleOBDFreezeFrameEntry (Dem_EventIdType EventId, Dem_SizeEvMemEntryType EventMemoryEntryIdx)
{
  struct Dem_EventMemoryEntryType * const PrimMemEntry;
  boolean ReorderingWasPerformed;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReorderingWasPerformed = 0;
  # DEBUG BEGIN_STMT
  PrimMemEntry = &Dem_EventMemoryPrimary;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_StoreOBDFreezeFrame (EventId, EventMemoryEntryIdx);
  # DEBUG BEGIN_STMT
  ReorderingWasPerformed = Dem_SetOBDFFOccurrenceOrder (EventMemoryEntryIdx);
  # DEBUG BEGIN_STMT
  if (ReorderingWasPerformed == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dem_CheckForImmediateEntryStorage (EventId, PrimMemEntry, EventMemoryEntryIdx, 0);

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_UpdateAgingCounter (Dem_EventIdType EventId)
{
  Dem_EntryDataType * const AgingCounterPtr;
  boolean ClearAgedEventFlag;
  Dem_EventIdType CurrentEvent;
  Dem_SizeEvMemEntryType EvMemEntryIdx;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  boolean SearchResult;
  boolean D.8207;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CurrentEvent = EventId;
  # DEBUG BEGIN_STMT
  ClearAgedEventFlag = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  SearchResult = Dem_SearchForEntry (EventId, &EvMemEntry, &EvMemEntryIdx);
  # DEBUG BEGIN_STMT
  if (SearchResult == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  EvMemEntry.32_1 = EvMemEntry;
  AgingCounterPtr = Dem_IntValEntryData (EvMemEntry.32_1);
  # DEBUG BEGIN_STMT
  _2 = *AgingCounterPtr;
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = *AgingCounterPtr;
  _4 = _3 + 255;
  *AgingCounterPtr = _4;

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dem_EvIdOfLockedMemoryEntry.33_5 = Dem_EvIdOfLockedMemoryEntry;
  if (CurrentEvent != Dem_EvIdOfLockedMemoryEntry.33_5)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _6 = *AgingCounterPtr;
  if (_6 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EvMemEntry.34_7 = EvMemEntry;
  Dem_ClearAgedEventEntry (CurrentEvent, EvMemEntry.34_7);
  # DEBUG BEGIN_STMT
  ClearAgedEventFlag = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ClearAgedEventFlag == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _8 = *AgingCounterPtr;
  if (_8 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  EvMemEntry.35_9 = EvMemEntry;
  EvMemEntryIdx.36_10 = EvMemEntryIdx;
  Dem_CheckForImmediateEntryStorage (CurrentEvent, EvMemEntry.35_9, EvMemEntryIdx.36_10, 0);

  <bb 11> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8207 = ClearAgedEventFlag;
  EvMemEntry = {CLOBBER};
  EvMemEntryIdx = {CLOBBER};
  return D.8207;

}


Dem_FindFFSegIdx (Dem_FFKindType FFKind, const struct Dem_FFClassType * IndividPartFFClass, uint16 DataId, Dem_SizeFFType * Offset)
{
  Dem_NumFFSegsType SegIdx;
  const struct Dem_FFClassType * FFPartClass[1];
  uint8_least FFPartIdx;
  boolean IsDidFound;
  Dem_FFSegIdxType FFSegIdx;
  Dem_SizeFFType StartByte;
  Dem_FFSegIdxType D.8519;
  short unsigned int D.8514;

  <bb 2> :
  # DEBUG BEGIN_STMT
  StartByte = 0;
  # DEBUG BEGIN_STMT
  FFSegIdx = 0;
  # DEBUG BEGIN_STMT
  IsDidFound = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFPartClass[0] = IndividPartFFClass;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFPartIdx = 0;
  goto <bb 12>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SegIdx = 0;
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = FFPartClass[FFPartIdx];
  _2 = _1->FFSegIdx;
  _3 = (unsigned int) SegIdx;
  _4 = _3 * 2;
  _5 = _2 + _4;
  FFSegIdx = *_5;
  # DEBUG BEGIN_STMT
  if (FFSegIdx != 65535)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = (int) FFSegIdx;
  _7 = Dem_FFSegment[_6].DataId;
  if (DataId == _7)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  IsDidFound = 1;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _8 = (int) FFSegIdx;
  _9 = &Dem_FFSegment[_8];
  D.8514 = Dem_SizeOfFFSegment (_9);
  StartByte = D.8514 + StartByte;

  <bb 8> :
  # DEBUG BEGIN_STMT
  SegIdx = SegIdx + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _10 = FFPartClass[FFPartIdx];
  _11 = _10->NumFFSegs;
  if (SegIdx < _11)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (IsDidFound == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  FFPartIdx = FFPartIdx + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (FFPartIdx == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (IsDidFound == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  FFSegIdx = 65535;
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  *Offset = StartByte;

  <bb 16> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8519 = FFSegIdx;
  FFPartClass = {CLOBBER};
  return D.8519;

}


Dem_CheckErrorQueueEntryForStatus (Dem_EventIdType EventId, Dem_EventStatusType EntryStatus)
{
  uint8 Index;
  Dem_ErrorQueueEntryType QueueEntry;
  boolean Result;
  boolean D.8739;
  unsigned int iftmp.107;
  unsigned int iftmp.106;
  unsigned int iftmp.105;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.103_1 = Dem_ErrorQueueReadIdx;
  _2 = (int) Dem_ErrorQueueReadIdx.103_1;
  _3 = Dem_ErrorQueue[_2];
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Index = Dem_ErrorQueueWriteIdx;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Index == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Index = 9;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index.104_4 = Index;
  Index = Index.104_4 + 255;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _5 = (int) Index;
  QueueEntry = Dem_ErrorQueue[_5];
  # DEBUG BEGIN_STMT
  _6 = (int) EventId;
  _7 = (int) QueueEntry;
  _8 = _7 & 8191;
  if (_6 == _8)
    goto <bb 8>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 8> :
  _9 = (unsigned int) EntryStatus;
  _10 = (unsigned int) QueueEntry;
  _11 = _10 & 49152;
  if (_11 != 32768)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  _12 = (unsigned int) QueueEntry;
  _13 = _12 & 49152;
  if (_13 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  _14 = (unsigned int) QueueEntry;
  _15 = _14 & 49152;
  if (_15 == 16384)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  iftmp.107 = 5;
  goto <bb 13>; [INV]

  <bb 12> :
  iftmp.107 = 4;

  <bb 13> :
  iftmp.106 = iftmp.107;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.106 = 0;

  <bb 15> :
  iftmp.105 = iftmp.106;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.105 = 1;

  <bb 17> :
  if (iftmp.105 == _9)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Result = 1;

  <bb 19> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.108_16 = Dem_ErrorQueueReadIdx;
  if (Index != Dem_ErrorQueueReadIdx.108_16)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  if (Result == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8739 = Result;
  return D.8739;

}


Dem_CheckErrorReQueueEntry (struct Dem_EventInfoType EventInfo, Dem_EventStatusType EventStatus, Dem_EventStatusExtendedType OldDTCStatusMask, Std_ReturnType * SetBswEventStatusResult)
{
  const Dem_ErrorQueueEntryType Entry;
  const Dem_ErrorQueueIdxType EndIdx;
  Dem_ErrorQueueIdxType QueueIdx;
  const Dem_EventIdType EventId;
  boolean FirstFailed;
  boolean EntryIsWritten;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FirstFailed = 0;
  # DEBUG BEGIN_STMT
  EventId = EventInfo.EventId;
  # DEBUG BEGIN_STMT
  _1 = (unsigned int) OldDTCStatusMask;
  _2 = _1 & 2;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  if (EventStatus == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (EventStatus == 5)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  QueueIdx = Dem_ErrorQueueReadIdx;
  # DEBUG BEGIN_STMT
  EndIdx = Dem_ErrorQueueWriteIdx;
  # DEBUG BEGIN_STMT
  FirstFailed = 1;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _3 = (int) QueueIdx;
  Entry = Dem_ErrorQueue[_3];
  # DEBUG BEGIN_STMT
  _4 = (int) Entry;
  _5 = _4 & 8191;
  _6 = (int) EventId;
  if (_5 == _6)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _7 = (unsigned int) Entry;
  _8 = _7 & 8192;
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FirstFailed = 0;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  QueueIdx = QueueIdx + 1;
  # DEBUG BEGIN_STMT
  QueueIdx = QueueIdx % 10;

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (QueueIdx != EndIdx)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  EntryIsWritten = Dem_WriteErrorQueueEntry (EventInfo, EventStatus, FirstFailed);
  # DEBUG BEGIN_STMT
  if (EntryIsWritten == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  *SetBswEventStatusResult = 3;

  <bb 13> :
  return;

}


Dem_CheckErrorQueueEntry (Dem_EventIdType EventId, Dem_EventStatusType * PreviousEntryStatus)
{
  uint8 Index;
  Dem_ErrorQueueEntryType QueueEntry;
  boolean Result;
  boolean D.8704;
  Dem_EventStatusType iftmp.101;
  Dem_EventStatusType iftmp.100;
  Dem_EventStatusType iftmp.99;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.97_1 = Dem_ErrorQueueReadIdx;
  _2 = (int) Dem_ErrorQueueReadIdx.97_1;
  _3 = Dem_ErrorQueue[_2];
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Index = Dem_ErrorQueueWriteIdx;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Index == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Index = 9;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index.98_4 = Index;
  Index = Index.98_4 + 255;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _5 = (int) Index;
  QueueEntry = Dem_ErrorQueue[_5];
  # DEBUG BEGIN_STMT
  _6 = (int) EventId;
  _7 = (int) QueueEntry;
  _8 = _7 & 8191;
  if (_6 == _8)
    goto <bb 8>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _9 = (unsigned int) QueueEntry;
  _10 = _9 & 49152;
  if (_10 != 32768)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  _11 = (unsigned int) QueueEntry;
  _12 = _11 & 49152;
  if (_12 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  _13 = (unsigned int) QueueEntry;
  _14 = _13 & 49152;
  if (_14 == 16384)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  iftmp.101 = 5;
  goto <bb 13>; [INV]

  <bb 12> :
  iftmp.101 = 4;

  <bb 13> :
  iftmp.100 = iftmp.101;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.100 = 0;

  <bb 15> :
  iftmp.99 = iftmp.100;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.99 = 1;

  <bb 17> :
  *PreviousEntryStatus = iftmp.99;
  # DEBUG BEGIN_STMT
  Result = 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.102_15 = Dem_ErrorQueueReadIdx;
  if (Index != Dem_ErrorQueueReadIdx.102_15)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  if (Result == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8704 = Result;
  return D.8704;

}


Dem_WriteErrorQueueEntry (struct Dem_EventInfoType EventInfo, Dem_EventStatusType EventStatus, boolean FirstFailed)
{
  Dem_ErrorQueueEntryType QueueEntry;
  Dem_EventIdType EventId;
  boolean Result;
  boolean D.8682;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 0;
  # DEBUG BEGIN_STMT
  EventId = EventInfo.EventId;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.93_1 = Dem_ErrorQueueWriteIdx;
  _2 = (int) Dem_ErrorQueueWriteIdx.93_1;
  _3 = Dem_ErrorQueue[_2];
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  QueueEntry = EventId;
  # DEBUG BEGIN_STMT
  _4 = (int) EventStatus;
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  QueueEntry = QueueEntry | 32768;
  # DEBUG BEGIN_STMT

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (FirstFailed == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  QueueEntry = QueueEntry | 8192;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  QueueEntry = QueueEntry & 57343;

  <bb 8> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.94_5 = Dem_ErrorQueueWriteIdx;
  _6 = (int) Dem_ErrorQueueWriteIdx.94_5;
  Dem_ErrorQueue[_6] = QueueEntry;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.95_7 = Dem_ErrorQueueWriteIdx;
  _8 = Dem_ErrorQueueWriteIdx.95_7 + 1;
  Dem_ErrorQueueWriteIdx = _8;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.96_9 = Dem_ErrorQueueWriteIdx;
  _10 = Dem_ErrorQueueWriteIdx.96_9 % 10;
  Dem_ErrorQueueWriteIdx = _10;
  # DEBUG BEGIN_STMT
  Result = 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8682 = Result;
  return D.8682;

}


Dem_ReadErrorQueueEntry (Dem_ErrorQueueEntryType * QueueEntry)
{
  struct Dem_ReadErrorQueueReturnType RetVal;
  struct Dem_ReadErrorQueueReturnType D.8674;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal.Result = 0;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.84_1 = Dem_ErrorQueueReadIdx;
  _2 = (int) Dem_ErrorQueueReadIdx.84_1;
  Dem_ErrorQueue[_2] = 0;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.85_3 = Dem_ErrorQueueReadIdx;
  _4 = Dem_ErrorQueueReadIdx.85_3 + 1;
  Dem_ErrorQueueReadIdx = _4;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.86_5 = Dem_ErrorQueueReadIdx;
  _6 = Dem_ErrorQueueReadIdx.86_5 % 10;
  Dem_ErrorQueueReadIdx = _6;

  <bb 4> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.87_7 = Dem_ErrorQueueReadIdx;
  _8 = (int) Dem_ErrorQueueReadIdx.87_7;
  _9 = Dem_ErrorQueue[_8];
  if (_9 == 8191)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.88_10 = Dem_ErrorQueueReadIdx;
  _11 = (int) Dem_ErrorQueueReadIdx.88_10;
  _12 = Dem_ErrorQueue[_11];
  if (_12 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.89_13 = Dem_ErrorQueueReadIdx;
  _14 = (int) Dem_ErrorQueueReadIdx.89_13;
  _15 = Dem_ErrorQueue[_14];
  *QueueEntry = _15;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.90_16 = Dem_ErrorQueueReadIdx;
  _17 = (int) Dem_ErrorQueueReadIdx.90_16;
  Dem_ErrorQueue[_17] = 0;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.91_18 = Dem_ErrorQueueReadIdx;
  _19 = Dem_ErrorQueueReadIdx.91_18 + 1;
  Dem_ErrorQueueReadIdx = _19;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx.92_20 = Dem_ErrorQueueReadIdx;
  _21 = Dem_ErrorQueueReadIdx.92_20 % 10;
  Dem_ErrorQueueReadIdx = _21;
  # DEBUG BEGIN_STMT
  RetVal.Result = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8674 = RetVal;
  RetVal = {CLOBBER};
  return D.8674;

}


Dem_InvalidateErrorQueueEntry (Dem_EventIdType EventId)
{
  const Dem_EventIdType ErrorQueueEventId;
  boolean ProcessFirstEntryOfFullQueue;
  Dem_ErrorQueueIdxType ErrorQueueIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ErrorQueueIndex = Dem_ErrorQueueReadIdx;
  # DEBUG BEGIN_STMT
  ProcessFirstEntryOfFullQueue = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.82_1 = Dem_ErrorQueueWriteIdx;
  if (ErrorQueueIndex == Dem_ErrorQueueWriteIdx.82_1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = (int) ErrorQueueIndex;
  _3 = Dem_ErrorQueue[_2];
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  ProcessFirstEntryOfFullQueue = 1;
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = (int) ErrorQueueIndex;
  _5 = Dem_ErrorQueue[_4];
  ErrorQueueEventId = _5 & 8191;
  # DEBUG BEGIN_STMT
  if (ErrorQueueEventId == EventId)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = (int) ErrorQueueIndex;
  Dem_ErrorQueue[_6] = 8191;

  <bb 7> :
  # DEBUG BEGIN_STMT
  ErrorQueueIndex = ErrorQueueIndex + 1;
  # DEBUG BEGIN_STMT
  ErrorQueueIndex = ErrorQueueIndex % 10;
  # DEBUG BEGIN_STMT
  ProcessFirstEntryOfFullQueue = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx.83_7 = Dem_ErrorQueueWriteIdx;
  if (ErrorQueueIndex != Dem_ErrorQueueWriteIdx.83_7)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (ProcessFirstEntryOfFullQueue == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_PermanentMemoryInit (boolean ResetPermanentNvData)
{
  Dem_PermanentMemoryEntryType Entry;
  uint8_least EntryIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (ResetPermanentNvData == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated = 1;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = Dem_NvMGetNvRAMBlockStatus (8);
  if (_1 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 14>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentUpdated.9_2 = Dem_EventMemoryPermanentUpdated;
  if (Dem_EventMemoryPermanentUpdated.9_2 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Entry = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Entry = Entry & 57344;
  # DEBUG BEGIN_STMT
  Entry = Entry;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Entry = Entry & 57343;
  # DEBUG BEGIN_STMT
  Entry = Entry & 49151;
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanent[EntryIdx] = Entry;
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentNonVolatileStored[EntryIdx] = 0;
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _3 = Dem_EventMemoryPermanent[EntryIdx];
  _4 = (unsigned int) _3;
  _5 = _4 & 8191;
  if (_5 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentNonVolatileStored[EntryIdx] = 2;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Dem_EventMemoryPermanentNonVolatileStored[EntryIdx] = 0;

  <bb 13> :
  # DEBUG BEGIN_STMT
  EntryIdx = EntryIdx + 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (EntryIdx <= 3)
    goto <bb 8>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_RestoreDerivedEventStatus (struct Dem_GateEntryBaseType * const GateEntryBase, struct Dem_EventMemoryEntryType * const EvMemEntry, Dem_EventIdType EventId)
{
  uint16 EventFailureClassIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EventFailureClassIdx = Dem_GbiEventFailureClassIdx (EventId);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) EventId;
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (int) EventId;
  _4 = _2 & 239;
  Dem_NvData.DTCStatusMask[_3] = _4;
  # DEBUG BEGIN_STMT
  _5 = (int) EventId;
  _6 = Dem_NvData.DTCStatusMask[_5];
  _7 = (int) EventId;
  _8 = _6 | 32;
  Dem_NvData.DTCStatusMask[_7] = _8;
  # DEBUG BEGIN_STMT
  if (EventFailureClassIdx == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _9 = EvMemEntry->EventFailureCycleCounter;
  _10 = (int) EventFailureClassIdx;
  _11 = Dem_EventFailureCycleCfg[_10].EventFailureCycleCounterThreshold;
  if (_9 >= _11)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _12 = GateEntryBase->EntryBase.CDTCFlag;
  if (_12 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _13 = (int) EventId;
  _14 = Dem_NvData.DTCStatusMask[_13];
  _15 = (int) EventId;
  _16 = _14 | 8;
  Dem_NvData.DTCStatusMask[_15] = _16;

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Dem_RestoreImmediateData (boolean ResetImmediateNvData)
{
  const Dem_SizeEntryDataType sizeEntryData;
  Dem_SizeEntryDataType EntryDataFreePos;
  Std_ReturnType Result;
  struct Dem_EventMemoryEntryType * const EvMemEntry;
  const NvM_BlockIdType NvDataBlockId;
  struct Dem_GateEntryBaseType * const GateEntryBase;
  const Dem_SizeEvMemEntryType SizeEventMem;
  struct Dem_GateEntryOBDFFPrimaryFragmentType * GateOBDFFEntry;
  NvM_RequestResultType reqResult;
  Std_ReturnType ReadBlockResult;
  Dem_EventIdType EvId;
  Dem_SizeEvMemEntryType EntryIdx;
  uint8_least OriginIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReadBlockResult = 1;
  # DEBUG BEGIN_STMT
  reqResult = 1;
  # DEBUG BEGIN_STMT
  GateOBDFFEntry = &Dem_NvGateEntryPrimaryData.OBDFFEntry;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EvId = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) EvId;
  _2 = Dem_NvData.DTCStatusMask[_1];
  _3 = (int) EvId;
  _4 = _2 & 247;
  Dem_NvData.DTCStatusMask[_3] = _4;
  # DEBUG BEGIN_STMT
  EvId = EvId + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EvId <= 14)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  OriginIdx = 0;
  goto <bb 34>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SizeEventMem = Dem_SizeEventMem[OriginIdx];
  # DEBUG BEGIN_STMT
  if (SizeEventMem != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  GateEntryBase = Dem_NvGateEntryData[OriginIdx];
  # DEBUG BEGIN_STMT
  NvDataBlockId = Dem_NvDataBlockId[OriginIdx];
  # DEBUG BEGIN_STMT
  if (OriginIdx == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  GateOBDFFEntry = &Dem_NvGateEntryPrimaryData.OBDFFEntry;

  <bb 9> :
  # DEBUG BEGIN_STMT
  GateEntryBase->EntryBase.EventId = 0;
  # DEBUG BEGIN_STMT
  _5 = Dem_EntryDataFreePos[OriginIdx];
  if (_5 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _6 = Dem_EntryDataFreePos[OriginIdx];
  *_6 = 0;

  <bb 11> :
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 32>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _7 = Dem_EventMem[OriginIdx];
  _8 = (unsigned int) EntryIdx;
  _9 = _8 * 16;
  EvMemEntry = _7 + _9;
  # DEBUG BEGIN_STMT
  if (ResetImmediateNvData == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  ReadBlockResult = NvM_ASR40_SetDataIndex (NvDataBlockId, EntryIdx);
  # DEBUG BEGIN_STMT
  if (ReadBlockResult == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  ReadBlockResult = NvM_ASR40_ReadBlock (NvDataBlockId, 0B);

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (ReadBlockResult == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Eb_Intgr_BswM_TriggerMemoryStack (NvDataBlockId);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result = NvM_ASR40_GetErrorStatus (NvDataBlockId, &reqResult);
  # DEBUG BEGIN_STMT
  if (Result == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 17> :
  reqResult.8_10 = reqResult;
  if (reqResult.8_10 == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  EvId = GateEntryBase->EntryBase.EventId;
  # DEBUG BEGIN_STMT
  EvMemEntry->EventId = EvId;
  # DEBUG BEGIN_STMT
  EvMemEntry->EntryStatus = 0;
  # DEBUG BEGIN_STMT
  if (EvId != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _11 = EvId / 8;
  _12 = (unsigned int) _11;
  _13 = Dem_EvMemEntryExists[_12];
  _14 = (unsigned int) EvId;
  _15 = _14 & 7;
  _16 = 1 << _15;
  _17 = (unsigned char) _16;
  _18 = _13 & _17;
  if (_18 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  EvMemEntry->EventId = 0;
  # DEBUG BEGIN_STMT
  EvMemEntry->EntryStatus = 1;
  goto <bb 31>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  EntryDataFreePos = 0;
  # DEBUG BEGIN_STMT
  sizeEntryData = Dem_EvMemEntrySize (EvId, 1);
  # DEBUG BEGIN_STMT
  _19 = Dem_EntryDataFreePos[OriginIdx];
  if (_19 != 0B)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _20 = Dem_EntryDataFreePos[OriginIdx];
  EntryDataFreePos = *_20;

  <bb 23> :
  # DEBUG BEGIN_STMT
  EvMemEntry->EntryDataPos = EntryDataFreePos;
  # DEBUG BEGIN_STMT
  _21 = GateEntryBase->EntryBase.OccCtr;
  EvMemEntry->OccCtr = _21;
  # DEBUG BEGIN_STMT
  _22 = GateEntryBase->EntryBase.OccOrder;
  EvMemEntry->OccOrder = _22;
  # DEBUG BEGIN_STMT
  _23 = GateEntryBase->EntryBase.EventFailureCycleCounter;
  EvMemEntry->EventFailureCycleCounter = _23;
  # DEBUG BEGIN_STMT
  if (OriginIdx == 0)
    goto <bb 24>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  _24 = Dem_GbiDTCKind (EvId);
  if (_24 == 2)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _25 = (int) EntryIdx;
  _26 = GateOBDFFEntry->OBDFF.OBDOccOrder;
  Dem_EntryOBDFF[_25].OBDOccOrder = _26;
  # DEBUG BEGIN_STMT
  _27 = (int) EntryIdx;
  _28 = &Dem_EntryOBDFF[_27].OBDFFData;
  _29 = &GateOBDFFEntry->OBDFF.OBDFFData;
  TS_MemCpy32 (_28, _29, 35);

  <bb 26> :
  # DEBUG BEGIN_STMT
  Dem_RestoreDerivedEventStatus (GateEntryBase, EvMemEntry, EvId);
  # DEBUG BEGIN_STMT
  if (sizeEntryData != 0)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  _30 = Dem_EntryData[OriginIdx];
  _31 = (sizetype) EntryDataFreePos;
  _32 = _30 + _31;
  _33 = Dem_GateEntryData[OriginIdx];
  _34 = (long unsigned int) sizeEntryData;
  TS_MemCpy32 (_32, _33, _34);
  # DEBUG BEGIN_STMT
  _35 = Dem_EntryDataFreePos[OriginIdx];
  _36 = *_35;
  _37 = Dem_EntryDataFreePos[OriginIdx];
  _38 = sizeEntryData + _36;
  *_37 = _38;

  <bb 28> :
  # DEBUG BEGIN_STMT
  Dem_SetEvEntryExists (EvId, 1);
  goto <bb 31>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  EvMemEntry->EventId = 0;
  # DEBUG BEGIN_STMT
  EvMemEntry->EntryStatus = 1;
  goto <bb 31>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  EvMemEntry->EventId = 0;
  # DEBUG BEGIN_STMT
  EvMemEntry->EntryStatus = 1;

  <bb 31> :
  # DEBUG BEGIN_STMT
  EntryIdx = EntryIdx + 1;

  <bb 32> :
  # DEBUG BEGIN_STMT
  if (EntryIdx < SizeEventMem)
    goto <bb 12>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  # DEBUG BEGIN_STMT
  OriginIdx = OriginIdx + 1;

  <bb 34> :
  # DEBUG BEGIN_STMT
  if (OriginIdx <= 3)
    goto <bb 6>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 35> :
  # DEBUG BEGIN_STMT
  reqResult = {CLOBBER};
  return;

}


Dem_ResetNvData ()
{
  Dem_DTCRequestType OccurKindRequest;
  Dem_CounterDataIdxType ByteIdx;
  Dem_CounterDataIdxType LinkIdx;
  Dem_IndicatorIdType IndicatorId;
  Dem_EventIdType EvId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EvId = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) EvId;
  Dem_NvData.DTCStatusMask[_1] = 80;
  # DEBUG BEGIN_STMT
  EvId = EvId + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EvId <= 14)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dem_NvData.EvMemOvfIndFlags = 0;
  # DEBUG BEGIN_STMT
  Dem_NvData.PfcStatus = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IndicatorId = 0;
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  LinkIdx = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _2 = (int) IndicatorId;
  _3 = (int) LinkIdx;
  Dem_NvData.IndicatorCycleCounter[_2][_3] = 0;
  # DEBUG BEGIN_STMT
  LinkIdx = LinkIdx + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (LinkIdx == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ByteIdx = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _4 = (int) IndicatorId;
  _5 = (int) ByteIdx;
  Dem_NvData.IndicatorCycleCounterRole[_4][_5] = 255;
  # DEBUG BEGIN_STMT
  _6 = (int) IndicatorId;
  _7 = (int) ByteIdx;
  Dem_NvData.IndicatorCycleCounterWIRStatus[_6][_7] = 0;
  # DEBUG BEGIN_STMT
  ByteIdx = ByteIdx + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (ByteIdx == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  IndicatorId.6_8 = IndicatorId;
  IndicatorId = IndicatorId.6_8 + 1;

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (IndicatorId == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Dem_NvData.Dem_OpCycleDCYIsQualified = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OccurKindRequest = 1;
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _9 = (unsigned int) OccurKindRequest;
  _10 = _9 + 4294967295;
  Dem_NvData.OccurKindEventId[_10] = 0;
  # DEBUG BEGIN_STMT
  OccurKindRequest.7_11 = OccurKindRequest;
  OccurKindRequest = OccurKindRequest.7_11 + 1;

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (OccurKindRequest <= 4)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_NvMGetNvRAMBlockStatus (NvM_BlockIdType NvDataBlockId)
{
  NvM_RequestResultType RestoredNvData;
  Std_ReturnType Result;
  Std_ReturnType D.7978;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result = NvM_ASR40_GetErrorStatus (NvDataBlockId, &RestoredNvData);
  # DEBUG BEGIN_STMT
  if (Result == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  RestoredNvData.5_1 = RestoredNvData;
  if (RestoredNvData.5_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Result = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7978 = Result;
  RestoredNvData = {CLOBBER};
  return D.7978;

}


Dem_MainFunction ()
{
  boolean ErrorReenterPrecondition;
  Dem_ProcessEventJobMaskType ProcessEventJobs;
  struct Dem_EventNotificationDataType Notification;
  struct Dem_EventInfoType EventInfo;
  const Dem_EventKindType eventKind;
  const boolean FirstFailed;
  const Dem_EventStatusType EventStatus;
  const Dem_EventIdType EventId;
  struct Dem_ReadErrorQueueReturnType ReadQueueRetVal;
  Dem_ErrorQueueEntryType QueueEntry;
  boolean TriggerNvMWrite;
  boolean QueueEntryIsFetched;
  boolean iftmp.79;
  unsigned char iftmp.76;
  unsigned char iftmp.74;
  unsigned char iftmp.72;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.70_1 = Dem_InitializationState;
  if (Dem_InitializationState.70_1 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TriggerNvMWrite = 0;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  QueueEntry = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  ReadQueueRetVal = Dem_ReadErrorQueueEntry (&QueueEntry);
  # DEBUG BEGIN_STMT
  QueueEntryIsFetched = ReadQueueRetVal.Result;
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (QueueEntryIsFetched != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  QueueEntry.71_2 = QueueEntry;
  EventId = QueueEntry.71_2 & 8191;
  # DEBUG BEGIN_STMT
  QueueEntry.73_3 = QueueEntry;
  _4 = (unsigned int) QueueEntry.73_3;
  _5 = _4 & 49152;
  if (_5 != 32768)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  QueueEntry.75_6 = QueueEntry;
  _7 = (unsigned int) QueueEntry.75_6;
  _8 = _7 & 49152;
  if (_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  QueueEntry.77_9 = QueueEntry;
  _10 = (unsigned int) QueueEntry.77_9;
  _11 = _10 & 49152;
  if (_11 == 16384)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.76 = 5;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.76 = 4;

  <bb 10> :
  iftmp.74 = iftmp.76;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.74 = 0;

  <bb 12> :
  iftmp.72 = iftmp.74;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.72 = 1;

  <bb 14> :
  EventStatus = iftmp.72;
  # DEBUG BEGIN_STMT
  QueueEntry.78_12 = QueueEntry;
  _13 = (unsigned int) QueueEntry.78_12;
  _14 = _13 >> 13;
  _15 = (unsigned char) _14;
  FirstFailed = _15 & 1;
  # DEBUG BEGIN_STMT
  eventKind = Dem_GbiEventKind (EventId);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Notification.ReplacedEventMsg.EventId = 0;
  Notification.ReplacedEventMsg.OldStatusMask = 0;
  Notification.ReplacedEventMsg.NewStatusMask = 0;
  # DEBUG BEGIN_STMT
  ProcessEventJobs = 0;
  # DEBUG BEGIN_STMT
  ErrorReenterPrecondition = 0;
  # DEBUG BEGIN_STMT
  _16 = (int) EventId;
  _17 = Dem_NvData.DTCStatusMask[_16];
  _18 = (unsigned int) _17;
  _19 = _18 & 1;
  if (_19 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.79 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.79 = 0;

  <bb 17> :
  ErrorReenterPrecondition = iftmp.79;
  # DEBUG BEGIN_STMT
  if (eventKind == 1)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  ProcessEventJobs = ProcessEventJobs | 4;
  # DEBUG BEGIN_STMT
  ProcessEventJobs = ProcessEventJobs | 8;
  goto <bb 23>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  ProcessEventJobs = ProcessEventJobs | 1;
  # DEBUG BEGIN_STMT
  if (EventStatus == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  if (EventStatus == 5)
    goto <bb 21>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 21> :
  if (ErrorReenterPrecondition != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  ProcessEventJobs = ProcessEventJobs | 4;
  # DEBUG BEGIN_STMT
  ProcessEventJobs = ProcessEventJobs | 8;

  <bb 23> :
  # DEBUG BEGIN_STMT
  EventInfo.EventId = EventId;
  # DEBUG BEGIN_STMT
  Dem_ProcessEvent (85, EventInfo, EventStatus, FirstFailed, ProcessEventJobs, &Notification);
  # DEBUG BEGIN_STMT
  TriggerNvMWrite = 1;
  EventInfo = {CLOBBER};
  Notification = {CLOBBER};

  <bb 24> :
  QueueEntry = {CLOBBER};
  ReadQueueRetVal = {CLOBBER};
  # DEBUG BEGIN_STMT
  if (QueueEntryIsFetched != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _20 = Dem_ClearDtcAsyncStatus.RunState;
  if (_20 == 1)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  Dem_ProcessClearDTC ();

  <bb 27> :
  # DEBUG BEGIN_STMT
  Dem_DoProcessFaultConfirmation.80_21 = Dem_DoProcessFaultConfirmation;
  if (Dem_DoProcessFaultConfirmation.80_21 != 0)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  Dem_DoProcessFaultConfirmation = 0;
  # DEBUG BEGIN_STMT
  TriggerNvMWrite = 1;
  # DEBUG BEGIN_STMT
  Dem_SetCDTCOnConfirmation ();

  <bb 29> :
  # DEBUG BEGIN_STMT
  if (TriggerNvMWrite != 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  Dem_CheckForTriggerNvmWriteGateEntry ();

  <bb 31> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_SetDTCSuppression (uint32 DTC, Dem_DTCFormatType DTCFormat, boolean SuppressionStatus)
{
  Std_ReturnType Result;
  Std_ReturnType D.8613;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.69_1 = Dem_InitializationState;
  if (Dem_InitializationState.69_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 51, 32);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = DTC + 4294967295;
  if (_2 > 16777214)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (DTCFormat == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _3 = DTC & 255;
  if (_3 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 51, 18);
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DTCFormat > 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 51, 18);
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (SuppressionStatus > 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 51, 18);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Result = Dem_InternalSetDTCSuppression (DTC, DTCFormat, SuppressionStatus);

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8613 = Result;
  return D.8613;

}


Dem_GetNumberOfEventMemoryEntries (Dem_DTCOriginType DTCOrigin, uint8 * NumberOfEventMemoryEntries)
{
  const Dem_PermanentMemoryEntryType Entry;
  Dem_DTCOriginType MappedDTCOrigin;
  uint8 EventCtr;
  Dem_SizeEvMemEntryType EntryIdx;
  Std_ReturnType Result;
  Std_ReturnType D.8597;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EventCtr = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.64_1 = Dem_InitializationState;
  if (Dem_InitializationState.64_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 53, 32);
  goto <bb 26>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (DTCOrigin > 511)
    goto <bb 10>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (DTCOrigin <= 255)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  if (DTCOrigin != 1)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  if (DTCOrigin != 2)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  if (DTCOrigin != 3)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (DTCOrigin != 4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 53, 18);
  goto <bb 26>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (NumberOfEventMemoryEntries == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 53, 17);
  goto <bb 26>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  MappedDTCOrigin = Dem_GetMappedDTCOrigin (DTCOrigin, 1);
  # DEBUG BEGIN_STMT
  if (MappedDTCOrigin != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (MappedDTCOrigin == 3)
    goto <bb 15>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 19>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _2 = (int) EntryIdx;
  Entry = Dem_EventMemoryPermanent[_2];
  # DEBUG BEGIN_STMT
  _3 = (unsigned int) Entry;
  _4 = _3 & 8191;
  if (_4 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  EventCtr.65_5 = EventCtr;
  EventCtr = EventCtr.65_5 + 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  EntryIdx.66_6 = EntryIdx;
  EntryIdx = EntryIdx.66_6 + 1;

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (EntryIdx <= 3)
    goto <bb 16>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 24>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _7 = (unsigned int) MappedDTCOrigin;
  _8 = _7 + 4294967295;
  _9 = Dem_EventMem[_8];
  _10 = (unsigned int) EntryIdx;
  _11 = _10 * 16;
  _12 = _9 + _11;
  _13 = _12->EventId;
  if (_13 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  EventCtr.67_14 = EventCtr;
  EventCtr = EventCtr.67_14 + 1;

  <bb 23> :
  # DEBUG BEGIN_STMT
  EntryIdx.68_15 = EntryIdx;
  EntryIdx = EntryIdx.68_15 + 1;

  <bb 24> :
  # DEBUG BEGIN_STMT
  _16 = (unsigned int) MappedDTCOrigin;
  _17 = _16 + 4294967295;
  _18 = Dem_SizeEventMem[_17];
  if (EntryIdx < _18)
    goto <bb 21>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  *NumberOfEventMemoryEntries = EventCtr;
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 26> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8597 = Result;
  return D.8597;

}


Dem_GetEventMemoryOverflow (Dem_DTCOriginType DTCOrigin, boolean * OverflowIndication)
{
  Dem_DTCOriginType MappedDTCOrigin;
  Std_ReturnType Result;
  Std_ReturnType D.8572;
  boolean iftmp.63;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.62_1 = Dem_InitializationState;
  if (Dem_InitializationState.62_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 50, 32);
  goto <bb 18>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (DTCOrigin > 511)
    goto <bb 10>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (DTCOrigin <= 255)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  if (DTCOrigin != 1)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  if (DTCOrigin != 2)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  if (DTCOrigin != 3)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (DTCOrigin != 4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 50, 18);
  goto <bb 18>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (OverflowIndication == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 50, 17);
  goto <bb 18>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  MappedDTCOrigin = Dem_GetMappedDTCOrigin (DTCOrigin, 1);
  # DEBUG BEGIN_STMT
  if (MappedDTCOrigin != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _2 = Dem_NvData.EvMemOvfIndFlags;
  _3 = (unsigned int) MappedDTCOrigin;
  _4 = _3 + 4294967295;
  _5 = 1 << _4;
  _6 = (unsigned char) _5;
  _7 = _2 & _6;
  if (_7 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.63 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.63 = 0;

  <bb 17> :
  *OverflowIndication = iftmp.63;
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 18> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8572 = Result;
  return D.8572;

}


Dem_GetEventExtendedDataRecord (Dem_EventIdType EventId, uint8 RecordNumber, uint8 * DestBuffer)
{
  const Dem_EDStartByteType EDStartByte;
  const struct Dem_EDSegmentType * const EDSegment;
  Dem_SizeEntryDataType EDSegSize;
  boolean EventMemEntryAvail;
  const struct Dem_EDClassType * const EDClass;
  Dem_EDSegIdxType SegIdxStop;
  Dem_EDSegIdxType SegIdxStart;
  Dem_EDSegIdxType SegIdx;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  Std_ReturnType Result;
  Std_ReturnType D.8550;
  short unsigned int D.8547;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.60_1 = Dem_InitializationState;
  if (Dem_InitializationState.60_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 48, 32);
  goto <bb 27>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 48, 18);
  goto <bb 27>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 48, 16);
  goto <bb 27>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (RecordNumber == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _2 = RecordNumber + 16;
  if (_2 <= 14)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 48, 18);
  goto <bb 27>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (DestBuffer == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 48, 17);
  goto <bb 27>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = Dem_GbiEDClassIdx (EventId);
  _4 = (int) _3;
  EDClass = &Dem_EDClass[_4];
  # DEBUG BEGIN_STMT
  if (RecordNumber != 255)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  SegIdxStart = Dem_FindEDNumIndex (EDClass, RecordNumber);
  # DEBUG BEGIN_STMT
  SegIdxStop = SegIdxStart + 1;
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  SegIdxStart = 0;
  # DEBUG BEGIN_STMT
  SegIdxStop = EDClass->NumEDSegs;

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (RecordNumber == 255)
    goto <bb 18>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _5 = EDClass->NumEDSegs;
  if (SegIdxStart < _5)
    goto <bb 18>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EDSegSize = 0;
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  EventMemEntryAvail = Dem_SearchForEntry (EventId, &EvMemEntry, 0B);
  # DEBUG BEGIN_STMT
  SegIdx = SegIdxStart;
  goto <bb 23>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _6 = EDClass->EDSegIdx;
  _7 = (sizetype) SegIdx;
  _8 = _6 + _7;
  _9 = *_8;
  _10 = (int) _9;
  EDSegment = &Dem_EDSegment[_10];
  # DEBUG BEGIN_STMT
  _11 = EDClass->StartByte;
  _12 = (unsigned int) SegIdx;
  _13 = _12 * 2;
  _14 = _11 + _13;
  EDStartByte = *_14;
  # DEBUG BEGIN_STMT
  if (EventMemEntryAvail == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  _15 = EDSegment->AlwaysAvailable;
  if (_15 == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _16 = (sizetype) EDSegSize;
  _17 = DestBuffer + _16;
  EvMemEntry.61_18 = EvMemEntry;
  D.8547 = Dem_AssembleExtendedDataSeg (EventId, EDSegment, EDStartByte, _17, EvMemEntry.61_18);
  EDSegSize = D.8547 + EDSegSize;

  <bb 22> :
  # DEBUG BEGIN_STMT
  SegIdx = SegIdx + 1;

  <bb 23> :
  # DEBUG BEGIN_STMT
  if (SegIdx < SegIdxStop)
    goto <bb 19>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (EDSegSize != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 26> :
  EvMemEntry = {CLOBBER};

  <bb 27> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8550 = Result;
  return D.8550;

}


Dem_ASR42_GetEventFreezeFrameData (Dem_EventIdType EventId, uint8 RecordNumber, boolean ReportTotalRecord, uint16 DataId, uint8 * DestBuffer)
{
  const Dem_SizeFFType FFSegSize;
  const Dem_SizeFFType SizeOfFF;
  const Dem_EntryDataType * const FFEntryData;
  Dem_FFIdxType FFIndex;
  const Dem_FFIdxType NumFF;
  Dem_FFSegIdxType FFSegIdx;
  Dem_SizeFFType StartByte;
  const struct Dem_FFClassType * const FFClass;
  const Dem_FFIdxType MaxNumFF;
  boolean FFRecNumValid;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  Std_ReturnType Result;
  Std_ReturnType D.8508;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 48;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.55_1 = Dem_InitializationState;
  if (Dem_InitializationState.55_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 49, 32);
  goto <bb 33>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 49, 18);
  goto <bb 33>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 49, 16);
  goto <bb 33>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ReportTotalRecord > 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 49, 18);
  goto <bb 33>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (DestBuffer == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 49, 17);
  goto <bb 33>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FFRecNumValid = 0;
  # DEBUG BEGIN_STMT
  MaxNumFF = Dem_GbiMaxNumFFRecs (EventId);
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (RecordNumber != 255)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  FFRecNumValid = Dem_CheckFFRecNumValid (EventId, RecordNumber);

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (RecordNumber == 255)
    goto <bb 16>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  if (FFRecNumValid == 1)
    goto <bb 16>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiFFClassIdx (EventId);
  _3 = (int) _2;
  FFClass = &Dem_FFClass[_3];
  # DEBUG BEGIN_STMT
  StartByte = 0;
  # DEBUG BEGIN_STMT
  FFSegIdx = 65535;
  # DEBUG BEGIN_STMT
  if (ReportTotalRecord == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FFSegIdx = Dem_FindFFSegIdx (2, FFClass, DataId, &StartByte);

  <bb 18> :
  # DEBUG BEGIN_STMT
  if (ReportTotalRecord == 1)
    goto <bb 20>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  if (FFSegIdx != 65535)
    goto <bb 20>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _4 = Dem_SearchForEntry (EventId, &EvMemEntry, 0B);
  if (_4 == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  EvMemEntry.56_5 = EvMemEntry;
  _6 = EvMemEntry.56_5->OccCtr;
  NumFF = MIN_EXPR <MaxNumFF, _6>;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (RecordNumber == 255)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  FFIndex = NumFF + 255;
  goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  EvMemEntry.57_7 = EvMemEntry;
  FFIndex = Dem_CheckFFRecNumStored (EvMemEntry.57_7, RecordNumber);

  <bb 24> :
  # DEBUG BEGIN_STMT
  if (FFIndex < NumFF)
    goto <bb 25>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  EvMemEntry.58_8 = EvMemEntry;
  FFEntryData = Dem_FFEntryData (EvMemEntry.58_8, FFClass, FFIndex);
  # DEBUG BEGIN_STMT
  if (ReportTotalRecord == 1)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  SizeOfFF = Dem_SizeOfFF (2, FFClass);
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) SizeOfFF;
  TS_MemCpy32 (DestBuffer, FFEntryData, _9);
  goto <bb 28>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  _10 = (int) FFSegIdx;
  _11 = &Dem_FFSegment[_10];
  FFSegSize = Dem_SizeOfFFSegment (_11);
  # DEBUG BEGIN_STMT
  StartByte.59_12 = StartByte;
  _13 = (sizetype) StartByte.59_12;
  _14 = FFEntryData + _13;
  _15 = (long unsigned int) FFSegSize;
  TS_MemCpy32 (DestBuffer, _14, _15);

  <bb 28> :
  # DEBUG BEGIN_STMT
  Result = 0;
  goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  Result = 50;

  <bb 30> :
  StartByte = {CLOBBER};
  goto <bb 32>; [INV]

  <bb 31> :
  # DEBUG BEGIN_STMT
  Result = 49;

  <bb 32> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  EvMemEntry = {CLOBBER};

  <bb 33> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8508 = Result;
  return D.8508;

}


Dem_GetEventFreezeFrameData (Dem_EventIdType EventId, uint8 RecordNumber, boolean ReportTotalRecord, uint16 DataId, uint8 * DestBuffer)
{
  Std_ReturnType Result;
  Std_ReturnType D.8469;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result = Dem_ASR42_GetEventFreezeFrameData (EventId, RecordNumber, ReportTotalRecord, DataId, DestBuffer);
  # DEBUG BEGIN_STMT
  if (Result != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Result = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8469 = Result;
  return D.8469;

}


Dem_GetIndicatorStatus (Dem_IndicatorIdType IndicatorId, Dem_IndicatorStatusType * IndicatorStatus)
{
  Std_ReturnType Result;
  Std_ReturnType D.8465;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.54_1 = Dem_InitializationState;
  if (Dem_InitializationState.54_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 41, 32);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (IndicatorId != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 41, 18);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (IndicatorStatus == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 41, 17);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = Dem_InternalGetIndicatorStatus (IndicatorId, 0);
  *IndicatorStatus = _2;
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8465 = Result;
  return D.8465;

}


Dem_GetFaultDetectionCounter (Dem_EventIdType EventId, sint8 * FaultDetectionCounter)
{
  const Dem_DebounceType Algorithm;
  Std_ReturnType Result;
  Std_ReturnType D.8454;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.53_1 = Dem_InitializationState;
  if (Dem_InitializationState.53_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 62, 32);
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 62, 18);
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 62, 16);
  goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (FaultDetectionCounter == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 62, 17);
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Algorithm = Dem_GbiDebounceAlgo (EventId);
  # DEBUG BEGIN_STMT
  _2 = Dem_DebounceFctPtrTable[Algorithm].GetFDCFct;
  if (_2 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _3 = Dem_DebounceFctPtrTable[Algorithm].GetFDCFct;
  Result = _3 (EventId, FaultDetectionCounter);

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8454 = Result;
  return D.8454;

}


Dem_GetEventFreezeFrameDataEx (Dem_EventIdType EventId, uint8 RecordNumber, uint16 DataId, uint8 * DestBuffer, uint16 * BufSize)
{
  Std_ReturnType Result;
  Std_ReturnType D.8438;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.52_1 = Dem_InitializationState;
  if (Dem_InitializationState.52_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 110, 32);
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 110, 18);
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 110, 16);
  goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DestBuffer == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 110, 17);
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (BufSize == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 110, 17);

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8438 = Result;
  return D.8438;

}


Dem_GetEventExtendedDataRecordEx (Dem_EventIdType EventId, uint8 RecordNumber, uint8 * DestBuffer, uint16 * BufSize)
{
  Std_ReturnType Result;
  Std_ReturnType D.8421;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.51_1 = Dem_InitializationState;
  if (Dem_InitializationState.51_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 109, 32);
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 109, 18);
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 109, 16);
  goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DestBuffer == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 109, 17);
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (BufSize == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 109, 17);

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8421 = Result;
  return D.8421;

}


Dem_GetDebouncingOfEvent (Dem_EventIdType EventId, Dem_DebouncingStateType * DebouncingState)
{
  Std_ReturnType Result;
  Std_ReturnType D.8404;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.50_1 = Dem_InitializationState;
  if (Dem_InitializationState.50_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 159, 32);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 159, 18);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 159, 16);
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DebouncingState == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 159, 17);

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8404 = Result;
  return D.8404;

}


Dem_SetEnableCondition (uint8 EnableConditionID, boolean ConditionFulfilled)
{
  const Dem_EnCondLnkType GrpLnkNextIdx;
  const Dem_EnCondLnkType GrpLnkStartIdx;
  Dem_EnCondLnkType GrpIdx;
  Std_ReturnType Result;
  Std_ReturnType D.8390;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.48_1 = Dem_InitializationState;
  if (Dem_InitializationState.48_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 57, 32);
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EnableConditionID != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 57, 16);
  goto <bb 17>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ConditionFulfilled > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 57, 18);
  goto <bb 17>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = (int) EnableConditionID;
  _3 = Dem_EnCondStatus[_2];
  if (ConditionFulfilled != _3)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = (int) EnableConditionID;
  GrpLnkStartIdx = Dem_EnCondToEvIdLink[_4];
  # DEBUG BEGIN_STMT
  _5 = (unsigned int) EnableConditionID;
  _6 = _5 + 1;
  GrpLnkNextIdx = Dem_EnCondToEvIdLink[_6];
  # DEBUG BEGIN_STMT
  GrpIdx = GrpLnkStartIdx;
  goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (ConditionFulfilled == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _7 = (int) GrpIdx;
  _8 = Dem_EnCondGrpLink[_7];
  _9 = (int) _8;
  _10 = Dem_EnCondGrpStatusCounter[_9];
  _11 = _10;
  _12 = _11 + 1;
  Dem_EnCondGrpStatusCounter[_9] = _12;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _13 = (int) GrpIdx;
  _14 = Dem_EnCondGrpLink[_13];
  _15 = (int) _14;
  _16 = Dem_EnCondGrpStatusCounter[_15];
  _17 = _16;
  _18 = _17 + 255;
  Dem_EnCondGrpStatusCounter[_15] = _18;

  <bb 13> :
  # DEBUG BEGIN_STMT
  GrpIdx.49_19 = GrpIdx;
  GrpIdx = GrpIdx.49_19 + 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (GrpIdx < GrpLnkNextIdx)
    goto <bb 10>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _20 = (int) EnableConditionID;
  Dem_EnCondStatus[_20] = ConditionFulfilled;

  <bb 16> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 17> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8390 = Result;
  return D.8390;

}


Dem_GetDTCOfEvent (Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32 * DTCOfEvent)
{
  uint32 DTCValue;
  Std_ReturnType Result;
  Std_ReturnType D.8374;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 13, 18);
  goto <bb 19>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 13, 16);
  goto <bb 19>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (DTCFormat > 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 13, 18);
  goto <bb 19>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DTCOfEvent == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 13, 17);
  goto <bb 19>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (DTCFormat == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  DTCValue = Dem_GetObdDTC (EventId);
  goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (DTCFormat == 2)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  DTCValue = 0;
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  DTCValue = Dem_GetUdsDTC (EventId);

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (DTCValue == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Result = 2;
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 18> :
  # DEBUG BEGIN_STMT
  *DTCOfEvent = DTCValue;

  <bb 19> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8374 = Result;
  return D.8374;

}


Dem_GetEventTested (Dem_EventIdType EventId, boolean * EventTested)
{
  Std_ReturnType Result;
  Std_ReturnType D.8351;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.47_1 = Dem_InitializationState;
  if (Dem_InitializationState.47_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 12, 32);
  goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 12, 18);
  goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 12, 16);
  goto <bb 14>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EventTested == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 12, 17);
  goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = (int) EventId;
  _3 = Dem_NvData.DTCStatusMask[_2];
  _4 = (unsigned int) _3;
  _5 = _4 & 64;
  if (_5 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  *EventTested = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  *EventTested = 1;

  <bb 13> :
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 14> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8351 = Result;
  return D.8351;

}


Dem_GetEventFailed (Dem_EventIdType EventId, boolean * EventFailed)
{
  Std_ReturnType Result;
  Std_ReturnType D.8334;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.46_1 = Dem_InitializationState;
  if (Dem_InitializationState.46_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 11, 32);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 11, 18);
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 11, 16);
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EventFailed == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 11, 17);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = (int) EventId;
  _3 = Dem_NvData.DTCStatusMask[_2];
  _4 = _3 & 1;
  *EventFailed = _4;
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8334 = Result;
  return D.8334;

}


Dem_GetEventStatus (Dem_EventIdType EventId, Dem_EventStatusExtendedType * EventStatusExtended)
{
  Std_ReturnType Result;
  Std_ReturnType D.8320;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.45_1 = Dem_InitializationState;
  if (Dem_InitializationState.45_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 10, 32);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 10, 18);
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 10, 16);
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EventStatusExtended == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 10, 17);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = (int) EventId;
  _3 = Dem_NvData.DTCStatusMask[_2];
  *EventStatusExtended = _3;
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8320 = Result;
  return D.8320;

}


Dem_SetCycleQualified (Dem_OperationCycleIdType OperationCycleId)
{
  const Dem_IndicatorIdType IndicatorId;
  const Dem_CounterDataIdxType CounterDataIdx;
  Dem_IndicatorIdxType IndicatorIdx;
  Dem_EventIdType EventId;
  boolean ProcessEvents;
  Std_ReturnType Result;
  Std_ReturnType D.8300;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.42_1 = Dem_InitializationState;
  if (Dem_InitializationState.42_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 86, 32);
  goto <bb 24>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (OperationCycleId != 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 86, 16);
  goto <bb 24>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = (int) OperationCycleId;
  _3 = Dem_OpCycleState[_2];
  if (_3 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 86, 64);
  goto <bb 24>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ProcessEvents = 0;
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _4 = Dem_NvData.Dem_OpCycleDCYIsQualified;
  if (_4 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ProcessEvents = 1;
  # DEBUG BEGIN_STMT
  Dem_NvData.Dem_OpCycleDCYIsQualified = 1;
  # DEBUG BEGIN_STMT
  Dem_DoProcessFaultConfirmation = 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (ProcessEvents == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  EventId = 1;
  # DEBUG BEGIN_STMT
  goto <bb 22>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Dem_GbiOpCycleIdx (EventId);
  if (_5 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _6 = Dem_IsMILEvent (EventId, &IndicatorIdx);
  if (_6 == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  CounterDataIdx = IndicatorIdx;
  # DEBUG BEGIN_STMT
  IndicatorId = 0;
  # DEBUG BEGIN_STMT
  _7 = CounterDataIdx / 8;
  _8 = (unsigned int) _7;
  _9 = Dem_NvData.IndicatorCycleCounterRole[0][_8];
  _10 = (unsigned int) CounterDataIdx;
  _11 = _10 & 7;
  _12 = 1 << _11;
  _13 = (unsigned char) _12;
  _14 = _9 & _13;
  if (_14 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  IndicatorIdx.43_15 = IndicatorIdx;
  _16 = Dem_ProcessIndicatorFailureCycleCounter (IndicatorIdx.43_15, EventId, 0);
  if (_16 == 1)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _17 = (int) EventId;
  _18 = Dem_NvData.DTCStatusMask[_17];
  _19 = (int) EventId;
  _20 = _18 | 128;
  Dem_NvData.DTCStatusMask[_19] = _20;
  # DEBUG BEGIN_STMT
  Dem_PermanentMemoryAddEntry (EventId);

  <bb 18> :
  IndicatorIdx = {CLOBBER};

  <bb 19> :
  # DEBUG BEGIN_STMT
  EventId = EventId + 1;
  # DEBUG BEGIN_STMT
  _21 = EventId % 10;
  if (_21 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  if (EventId <= 14)
    goto <bb 13>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 22> :
  # DEBUG BEGIN_STMT
  if (EventId <= 14)
    goto <bb 12>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 24> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8300 = Result;
  return D.8300;

}


Dem_SetOperationCycleState (Dem_OperationCycleIdType OperationCycleId, Dem_OperationCycleStateType CycleState)
{
  Dem_OperationCycleStateType * const StoredCycleState;
  Std_ReturnType Result;
  Std_ReturnType D.8182;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.30_1 = Dem_InitializationState;
  if (Dem_InitializationState.30_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 8, 32);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (OperationCycleId > 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 8, 16);
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (CycleState > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 8, 18);
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = (int) OperationCycleId;
  StoredCycleState = &Dem_OpCycleState[_2];
  # DEBUG BEGIN_STMT
  _3 = *StoredCycleState;
  if (_3 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Dem_OpCycleProcessCycleEnd (OperationCycleId);

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (CycleState == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Dem_OpCycleProcessCycleStart (OperationCycleId);

  <bb 12> :
  # DEBUG BEGIN_STMT
  *StoredCycleState = CycleState;
  # DEBUG BEGIN_STMT
  Dem_CheckForTriggerNvmWriteGateEntry ();
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8182 = Result;
  return D.8182;

}


Dem_ClearPrestoredFreezeFrame (Dem_EventIdType EventId)
{
  Std_ReturnType Result;
  Std_ReturnType D.8167;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.29_1 = Dem_InitializationState;
  if (Dem_InitializationState.29_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 7, 32);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 7, 18);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 7, 16);
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiEnablePrestorage (EventId);
  if (_2 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 7, 16);

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8167 = Result;
  return D.8167;

}


Dem_PrestoreFreezeFrame (Dem_EventIdType EventId)
{
  Std_ReturnType Result;
  Std_ReturnType D.8153;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.28_1 = Dem_InitializationState;
  if (Dem_InitializationState.28_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 6, 32);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 6, 18);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 6, 16);
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiEnablePrestorage (EventId);
  if (_2 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 6, 16);

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8153 = Result;
  return D.8153;

}


Dem_ResetEventDebounceStatus (Dem_EventIdType EventId, Dem_DebounceResetStatusType DebounceResetStatus)
{
  Dem_DebounceType DebounceAlgo;
  Std_ReturnType Result;
  Std_ReturnType D.8139;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.27_1 = Dem_InitializationState;
  if (Dem_InitializationState.27_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 9, 32);
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 9, 18);
  goto <bb 17>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 9, 16);
  goto <bb 17>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (DebounceResetStatus > 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 9, 18);
  goto <bb 17>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiDebounceAlgo (EventId);
  if (_2 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 9, 16);
  goto <bb 17>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  DebounceAlgo = Dem_GbiDebounceAlgo (EventId);
  # DEBUG BEGIN_STMT
  if (DebounceResetStatus == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _3 = Dem_DebounceFctPtrTable[DebounceAlgo].ResetFct;
  _3 (EventId);
  goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _4 = Dem_DebounceFctPtrTable[DebounceAlgo].FreezeFct;
  if (_4 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _5 = Dem_DebounceFctPtrTable[DebounceAlgo].FreezeFct;
  _5 (EventId);

  <bb 16> :
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 17> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8139 = Result;
  return D.8139;

}


Dem_ResetEventStatus (Dem_EventIdType EventId)
{
  Std_ReturnType Result;
  Std_ReturnType D.8117;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.26_1 = Dem_InitializationState;
  if (Dem_InitializationState.26_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 5, 32);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 5, 18);
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 5, 16);
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = (int) EventId;
  _3 = Dem_NvData.DTCStatusMask[_2];
  _4 = (unsigned int) _3;
  _5 = _4 & 64;
  if (_5 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _6 = (int) EventId;
  _7 = Dem_NvData.DTCStatusMask[_6];
  _8 = (unsigned int) _7;
  _9 = _8 & 1;
  if (_9 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _10 = (int) EventId;
  _11 = Dem_NvData.DTCStatusMask[_10];
  _12 = (int) EventId;
  _13 = _11 & 254;
  Dem_NvData.DTCStatusMask[_12] = _13;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _14 = Dem_GbiDebounceAlgo (EventId);
  _15 = Dem_DebounceFctPtrTable[_14].ResetFct;
  _15 (EventId);
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 12> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8117 = Result;
  return D.8117;

}


Dem_SetEventStatus (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
{
  Std_ReturnType Result;
  Std_ReturnType D.8102;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.25_1 = Dem_InitializationState;
  if (Dem_InitializationState.25_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 32);
  goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 18);
  goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 16);
  goto <bb 14>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EventStatus > 3)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 18);
  goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiEventKind (EventId);
  if (_2 != 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 18);
  goto <bb 14>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Result = Dem_InternalProcessEventReport (EventId, EventStatus, 1);
  # DEBUG BEGIN_STMT
  if (Result == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 4, 16);
  # DEBUG BEGIN_STMT
  Result = 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.8102 = Result;
  return D.8102;

}


Dem_ReportErrorStatusCore (Dem_EventIdType EventId, Dem_EventStatusType EventStatus, boolean QueuedInPreinitPhase)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.19_1 = Dem_InitializationState;
  if (Dem_InitializationState.19_1 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (QueuedInPreinitPhase == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Dem_InternalProcessEventReport (EventId, EventStatus, 2);
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Dem_InternalProcessEventReport (EventId, EventStatus, 1);
  if (_2 == 3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 16);

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_ReportErrorStatusPreInit (struct Dem_EventInfoType EventInfo, Dem_EventStatusType EventStatus)
{
  boolean FirstFailed;
  boolean queueWriteSuccess;
  Dem_EventIdType EventId;
  Std_ReturnType debounceResult;
  Dem_EventStatusType PreviousEntryStatus;
  boolean EntryPresent;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EntryPresent = 0;
  # DEBUG BEGIN_STMT
  PreviousEntryStatus = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EventId = EventInfo.EventId;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Dem_DebounceEvent (EventId, &EventStatus, &debounceResult);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  debounceResult.20_2 = debounceResult;
  if (debounceResult.20_2 == 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 18);

  <bb 5> :
  # DEBUG BEGIN_STMT
  EventStatus.21_3 = EventStatus;
  if (EventStatus.21_3 <= 1)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  queueWriteSuccess = 1;
  # DEBUG BEGIN_STMT
  SchM_Enter_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  EntryPresent = Dem_CheckErrorQueueEntry (EventId, &PreviousEntryStatus);
  # DEBUG BEGIN_STMT
  if (EntryPresent == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  EventStatus.22_4 = EventStatus;
  PreviousEntryStatus.23_5 = PreviousEntryStatus;
  if (EventStatus.22_4 != PreviousEntryStatus.23_5)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _6 = (int) EventId;
  _7 = Dem_NvData.DTCStatusMask[_6];
  _8 = (unsigned int) _7;
  _9 = _8 & 2;
  _10 = _9 != 0;
  FirstFailed = (boolean) _10;
  # DEBUG BEGIN_STMT
  EventStatus.24_11 = EventStatus;
  queueWriteSuccess = Dem_WriteErrorQueueEntry (EventInfo, EventStatus.24_11, FirstFailed);

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dem_SCHM_DEM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (queueWriteSuccess == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 16);

  <bb 11> :
  # DEBUG BEGIN_STMT
  PreviousEntryStatus = {CLOBBER};
  debounceResult = {CLOBBER};
  return;

}


Dem_ReportErrorStatus (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.18_1 = Dem_InitializationState;
  if (Dem_InitializationState.18_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 32);
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (EventId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 18);
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EventId > 14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 16);
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EventStatus > 3)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 18);
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiEventKind (EventId);
  if (_2 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 15, 18);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Dem_ReportErrorStatusCore (EventId, EventStatus, 0);

  <bb 13> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_Shutdown ()
{
  const NvM_BlockIdType NvDataBlockId;
  Dem_EntryDataType * const AgingCounterPtr;
  struct Dem_EventMemoryEntryType * EvMemEntry;
  Dem_SizeEvMemEntryType EntryIdx;
  uint8 OriginIdx;
  Dem_EventIdType LockedEvId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.14_1 = Dem_InitializationState;
  if (Dem_InitializationState.14_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 3, 32);
  goto <bb 21>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_MainFunction ();
  # DEBUG BEGIN_STMT
  Dem_InitializationState = 3;
  # DEBUG BEGIN_STMT
  LockedEvId = Dem_EvIdOfLockedMemoryEntry;
  # DEBUG BEGIN_STMT
  if (LockedEvId != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Dem_GbiNumAgingCycles (LockedEvId);
  if (_2 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = Dem_SearchForEntry (LockedEvId, &EvMemEntry, 0B);
  if (_3 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EvMemEntry.15_4 = EvMemEntry;
  AgingCounterPtr = Dem_IntValEntryData (EvMemEntry.15_4);
  # DEBUG BEGIN_STMT
  _5 = *AgingCounterPtr;
  if (_5 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  EvMemEntry.16_6 = EvMemEntry;
  Dem_ClearAgedEventEntry (LockedEvId, EvMemEntry.16_6);
  # DEBUG BEGIN_STMT
  EvMemEntry.17_7 = EvMemEntry;
  EvMemEntry.17_7->EntryStatus = 1;

  <bb 9> :
  EvMemEntry = {CLOBBER};

  <bb 10> :
  # DEBUG BEGIN_STMT
  OriginIdx = 0;
  goto <bb 19>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _8 = (int) OriginIdx;
  _9 = Dem_NvDataBlockId[_8];
  if (_9 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _10 = (int) OriginIdx;
  _11 = Dem_NvDataBlockId[_10];
  Eb_Intgr_BswM_TriggerMemoryStack (_11);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx = 0;
  goto <bb 17>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _12 = (int) OriginIdx;
  _13 = Dem_EventMem[_12];
  _14 = (unsigned int) EntryIdx;
  _15 = _14 * 16;
  _16 = _13 + _15;
  _17 = _16->EntryStatus;
  if (_17 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _18 = (int) OriginIdx;
  NvDataBlockId = Dem_NvDataBlockId[_18];
  # DEBUG BEGIN_STMT
  _19 = NvM_ASR40_SetDataIndex (NvDataBlockId, EntryIdx);
  if (_19 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Dem_StoreImmediately (OriginIdx, EntryIdx);
  # DEBUG BEGIN_STMT
  NvM_ASR40_WriteBlock (NvDataBlockId, 0B);
  # DEBUG BEGIN_STMT
  _20 = (int) OriginIdx;
  _21 = Dem_NvDataBlockId[_20];
  Eb_Intgr_BswM_TriggerMemoryStack (_21);

  <bb 16> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EntryIdx = EntryIdx + 1;

  <bb 17> :
  # DEBUG BEGIN_STMT
  _22 = (int) OriginIdx;
  _23 = Dem_SizeEventMem[_22];
  if (EntryIdx < _23)
    goto <bb 13>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  OriginIdx = OriginIdx + 1;

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (OriginIdx <= 3)
    goto <bb 11>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  NvM_ASR40_SetRamBlockStatus (4, 1);

  <bb 21> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_Init ()
{
  boolean ResetNvData;
  uint8 OriginIdx;
  Dem_OperationCycleIdType OpCycleId;
  uint8 SwUnitIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.1_1 = Dem_InitializationState;
  if (Dem_InitializationState.1_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  Dem_InitializationState.2_2 = Dem_InitializationState;
  if (Dem_InitializationState.2_2 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 2, 64);
  goto <bb 19>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.3_3 = Dem_InitializationState;
  if (Dem_InitializationState.3_3 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ResetNvData = 0;
  # DEBUG BEGIN_STMT
  OpCycleId = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _4 = (int) OpCycleId;
  Dem_OpCycleState[_4] = 1;
  # DEBUG BEGIN_STMT
  OpCycleId = OpCycleId + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (OpCycleId <= 2)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _5 = Dem_NvMGetNvRAMBlockStatus (4);
  if (_5 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Dem_ResetNvData ();

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitEvEntryExists ();
  # DEBUG BEGIN_STMT
  Dem_RestoreImmediateData (ResetNvData);
  # DEBUG BEGIN_STMT
  OriginIdx = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _6 = (int) OriginIdx;
  Dem_NvMGateEntryInfo[_6].Status = 0;
  # DEBUG BEGIN_STMT
  OriginIdx = OriginIdx + 1;

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (OriginIdx <= 3)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Dem_PermanentMemoryInit (ResetNvData);
  # DEBUG BEGIN_STMT
  Dem_ClearDtcAsyncStatus.EventStatusWrite = 0;
  # DEBUG BEGIN_STMT
  Dem_ClearDtcAsyncStatus.EventMemWrite = 0;
  # DEBUG BEGIN_STMT
  Dem_ClearDtcAsyncStatus.RunState = 0;
  # DEBUG BEGIN_STMT
  Dem_ClearDtcAsyncStatus.ClientId = 4;
  # DEBUG BEGIN_STMT
  Dem_InitMaxOccOrder ();
  # DEBUG BEGIN_STMT
  Dem_InitMaxOBDOccOrder ();

  <bb 15> :
  # DEBUG BEGIN_STMT
  SwUnitIdx = 0;
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _7 = (int) SwUnitIdx;
  _8 = Dem_InitSwUnitFncPtr[_7];
  _8 ();
  # DEBUG BEGIN_STMT
  SwUnitIdx.4_9 = SwUnitIdx;
  SwUnitIdx = SwUnitIdx.4_9 + 1;

  <bb 17> :
  # DEBUG BEGIN_STMT
  if (SwUnitIdx <= 6)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Dem_InitializationState = 2;

  <bb 19> :
  # DEBUG BEGIN_STMT
  return;

}


Dem_PreInit (const Dem_ConfigType * ConfigPtr)
{
  Dem_EventIdType EvId;
  Dem_ErrorQueueIdxType QueueIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_InitializationState.0_1 = Dem_InitializationState;
  if (Dem_InitializationState.0_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (54, 0, 1, 64);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueReadIdx = 0;
  # DEBUG BEGIN_STMT
  Dem_ErrorQueueWriteIdx = 0;
  # DEBUG BEGIN_STMT
  QueueIdx = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = (int) QueueIdx;
  Dem_ErrorQueue[_2] = 0;
  # DEBUG BEGIN_STMT
  QueueIdx = QueueIdx + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (QueueIdx <= 9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EvId = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _3 = Dem_GbiDebounceAlgo (EvId);
  _4 = Dem_DebounceFctPtrTable[_3].ResetFct;
  _4 (EvId);
  # DEBUG BEGIN_STMT
  EvId = EvId + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (EvId <= 14)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Dem_InitializationState = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  return;

}


