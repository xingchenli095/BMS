Clock_Ip_TriggerUpdateCgmXDivTrigCtrlTctlHhenUpdStat (const struct Clock_Ip_DividerTriggerConfigType * Config)
{
  uint32 DividerStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 SelectorIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  <unnamed type> _5;
  volatile struct Clock_Ip_CgmMuxType * _6;
  volatile struct Clock_Ip_CgmMuxType * _7;
  long unsigned int _8;
  long unsigned int TimeoutTicks.0_9;
  <unnamed type> _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_14(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_15 = (uint32) _2;
  # DEBUG Instance => Instance_15
  # DEBUG BEGIN_STMT
  _3 = Config_14(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex_16 = (uint32) _4;
  # DEBUG SelectorIndex => SelectorIndex_16
  # DEBUG BEGIN_STMT
  TimeoutOccurred_17 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_17
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Config_14(D)->TriggerType;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = Clock_Ip_apxCgm[Instance_15][SelectorIndex_16];
  _6->MUX_DIV_TRIG ={v} 1;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_apxCgm[Instance_15][SelectorIndex_16];
  _8 ={v} _7->MUX_DIV_UPD_STAT;
  DividerStatus_20 = _8 & 1;
  # DEBUG DividerStatus => DividerStatus_20
  # DEBUG BEGIN_STMT
  TimeoutTicks.0_9 = TimeoutTicks;
  TimeoutOccurred_22 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_9);
  # DEBUG TimeoutOccurred => TimeoutOccurred_22
  # DEBUG BEGIN_STMT
  if (DividerStatus_20 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (TimeoutOccurred_22 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_22 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = Config_14(D)->Name;
  Clock_Ip_ReportClockErrors (1, _10);

  <bb 8> :
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Clock_Ip_ConfigureCgmXDivTrigCtrlTctlHhenUpdStat (const struct Clock_Ip_DividerTriggerConfigType * Config)
{
  uint32 SelectorIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  <unnamed type> _5;
  volatile struct Clock_Ip_CgmMuxType * _6;
  volatile struct Clock_Ip_CgmMuxType * _7;
  long unsigned int _8;
  volatile struct Clock_Ip_CgmMuxType * _9;
  long unsigned int _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_13(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_14 = (uint32) _2;
  # DEBUG Instance => Instance_14
  # DEBUG BEGIN_STMT
  _3 = Config_13(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex_15 = (uint32) _4;
  # DEBUG SelectorIndex => SelectorIndex_15
  # DEBUG BEGIN_STMT
  _5 = Config_13(D)->TriggerType;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = Clock_Ip_apxCgm[Instance_14][SelectorIndex_15];
  _6->MUX_DIV_TRIG_CTRL ={v} 1;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_apxCgm[Instance_14][SelectorIndex_15];
  _8 ={v} _7->MUX_DIV_TRIG_CTRL;
  _9 = Clock_Ip_apxCgm[Instance_14][SelectorIndex_15];
  _10 = _8 & 4294967294;
  _9->MUX_DIV_TRIG_CTRL ={v} _10;

  <bb 5> :
  return;

}


Clock_Ip_Callback_DividerTriggerEmpty (const struct Clock_Ip_DividerTriggerConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


