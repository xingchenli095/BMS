TS_IntRestore (TS_IntStatusType intStatus)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  return;

}


TS_IntDisable ()
{
  TS_IntStatusType _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  _3 = 0;
  return _3;

}


TS_AtomicClearBit_32 (volatile uint32 * addr, uint32 bitIdx)
{
  boolean success;
  unsigned char success.5_1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.5_1 = success;
  if (success.5_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 ={v} *addr_10(D);
  _3 = 1 << bitIdx_11(D);
  _4 = ~_3;
  _5 = _2 & _4;
  *addr_10(D) ={v} _5;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success ={v} {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


TS_AtomicSetBit_32 (volatile uint32 * addr, uint32 bitIdx)
{
  boolean success;
  unsigned char success.4_1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.4_1 = success;
  if (success.4_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 ={v} *addr_9(D);
  _3 = 1 << bitIdx_10(D);
  _4 = _2 | _3;
  *addr_9(D) ={v} _4;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success ={v} {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


TS_AtomicClearBit_16 (volatile uint16 * addr, uint32 bitIdx)
{
  boolean success;
  unsigned char success.3_1;
  short unsigned int _2;
  int _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.3_1 = success;
  if (success.3_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 ={v} *addr_11(D);
  _3 = 1 << bitIdx_12(D);
  _4 = (short unsigned int) _3;
  _5 = ~_4;
  _6 = _2 & _5;
  *addr_11(D) ={v} _6;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success ={v} {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


TS_AtomicSetBit_16 (volatile uint16 * addr, uint32 bitIdx)
{
  boolean success;
  unsigned char success.2_1;
  short unsigned int _2;
  int _3;
  short unsigned int _4;
  short unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.2_1 = success;
  if (success.2_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 ={v} *addr_10(D);
  _3 = 1 << bitIdx_11(D);
  _4 = (short unsigned int) _3;
  _5 = _2 | _4;
  *addr_10(D) ={v} _5;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success ={v} {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


TS_AtomicClearBit_8 (volatile uint8 * addr, uint32 bitIdx)
{
  boolean success;
  unsigned char success.1_1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  unsigned char _5;
  unsigned char _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.1_1 = success;
  if (success.1_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 ={v} *addr_11(D);
  _3 = 1 << bitIdx_12(D);
  _4 = (unsigned char) _3;
  _5 = ~_4;
  _6 = _2 & _5;
  *addr_11(D) ={v} _6;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success ={v} {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


TS_AtomicSetBit_8 (volatile uint8 * addr, uint32 bitIdx)
{
  boolean success;
  unsigned char success.0_1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  unsigned char _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.0_1 = success;
  if (success.0_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 ={v} *addr_10(D);
  _3 = 1 << bitIdx_11(D);
  _4 = (unsigned char) _3;
  _5 = _2 | _4;
  *addr_10(D) ={v} _5;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success ={v} {CLOBBER};
  # DEBUG BEGIN_STMT
  return;

}


