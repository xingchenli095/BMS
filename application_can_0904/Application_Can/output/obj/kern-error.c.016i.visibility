
Marking local functions:


Marking externally visible functions: OS_Error


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_ErrorAction/9 (OS_ErrorAction) @06c82ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_Error/0 
  Calls: 
OS_CORTEXM_IntSetDisablingLevel/8 (OS_CORTEXM_IntSetDisablingLevel) @06c82e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_Error/0 
  Calls: 
OS_ptrProtectionHook/7 (OS_ptrProtectionHook) @06d57a68
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_Error/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_CallErrorHook/6 (OS_CallErrorHook) @06c82d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_Error/0 
  Calls: 
OS_ptrErrorHook/5 (OS_ptrErrorHook) @06d57948
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_Error/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_IntDisableConditional/4 (OS_IntDisableConditional) @06c82000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_Error/0 
  Calls: 
OS_hookSelection/3 (OS_hookSelection) @06d578b8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_Error/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_isrTableBase/2 (OS_isrTableBase) @06d57870
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_Error/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_kernelData/1 (OS_kernelData) @06d57828
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_Error/0 (addr)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (addr)OS_Error/0 (read)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (read)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (addr)OS_Error/0 (read)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (write)OS_Error/0 (read)OS_Error/0 (read)OS_Error/0 (write)OS_Error/0 (write)
  Availability: not_available
  Varpool flags:
OS_Error/0 (OS_Error) @06c82b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_kernelData/1 (addr)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_isrTableBase/2 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_hookSelection/3 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (addr)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_ptrErrorHook/5 (read)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (addr)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_ptrProtectionHook/7 (read)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (write)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_kernelData/1 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_ErrorAction/9 OS_CORTEXM_IntSetDisablingLevel/8 OS_CallErrorHook/6 OS_IntDisableConditional/4 
   Indirect call
   Indirect call
__attribute__((target ("general-regs-only")))
OS_Error (const struct os_serviceinfo_t * const s, os_error_t e, os_paramtype_t * p)
{
  os_uint8_t Os_CallHookTmp;
  struct os_kerneldata_t * const OS_kd;
  os_uint8_t Os_CallHookTmp;
  struct os_kerneldata_t * const OS_kd;
  os_int_t i;
  os_uint8_t en;
  os_intstatus_t is;
  const struct os_appcontext_t * app;
  const struct os_errorentry_t * ep;
  struct os_errorstatus_t esSave;
  const struct os_appcontext_t * hookAppSave;
  os_uint8_t ehNestingSave;
  os_erroraction_t hooks;
  os_erroraction_t act;
  os_result_t res;
  struct os_kerneldata_t * const kernel_data;
  os_result_t D.7491;
  const struct os_appcontext_t * iftmp.3;
  const struct os_appcontext_t * iftmp.1;
  const struct os_appcontext_t * iftmp.0;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = OS_kernelData.inFunction;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = OS_kernelData.taskCurrent;
  iftmp.0 = _2->app;
  goto <bb 13>; [INV]

  <bb 4> :
  _3 = OS_kernelData.inFunction;
  if (_3 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  OS_isrTableBase.2_4 = OS_isrTableBase;
  _5 = OS_kernelData.isrCurrent;
  _6 = (unsigned int) _5;
  _7 = _6 * 68;
  _8 = OS_isrTableBase.2_4 + _7;
  iftmp.1 = _8->app;
  goto <bb 12>; [INV]

  <bb 6> :
  _9 = OS_kernelData.inFunction;
  if (_9 == 10)
    goto <bb 9>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = OS_kernelData.inFunction;
  if (_10 == 8)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _11 = OS_kernelData.inFunction;
  if (_11 == 9)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.3 = OS_kernelData.hookApp;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.3 = 0B;

  <bb 11> :
  iftmp.1 = iftmp.3;

  <bb 12> :
  iftmp.0 = iftmp.1;

  <bb 13> :
  app = iftmp.0;
  # DEBUG BEGIN_STMT
  ep = s->errorTable;
  # DEBUG BEGIN_STMT
  en = s->nErrors;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  ep = ep + 3;
  # DEBUG BEGIN_STMT
  en.4_12 = en;
  en = en.4_12 + 255;

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (en != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _13 = ep->condition;
  if (e != _13)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _14 = ep->condition;
  if (e == _14)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  act = ep->action;
  # DEBUG BEGIN_STMT
  res = ep->result;
  goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  act = 70;
  # DEBUG BEGIN_STMT
  res = 21;

  <bb 20> :
  # DEBUG BEGIN_STMT
  OS_hookSelection.5_15 = OS_hookSelection;
  hooks = act & OS_hookSelection.5_15;
  # DEBUG BEGIN_STMT
  act = act & 15;
  # DEBUG BEGIN_STMT
  if (hooks != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  ehNestingSave = OS_kernelData.errorHookNesting;
  # DEBUG BEGIN_STMT
  esSave = OS_kernelData.errorStatus;
  # DEBUG BEGIN_STMT
  hookAppSave = OS_kernelData.hookApp;
  # DEBUG BEGIN_STMT
  is = OS_IntDisableConditional ();
  # DEBUG BEGIN_STMT
  _16 = OS_kernelData.inFunction;
  OS_kernelData.errorStatus.calledFrom = _16;
  # DEBUG BEGIN_STMT
  _17 = s->sid;
  OS_kernelData.errorStatus.serviceId = _17;
  # DEBUG BEGIN_STMT
  if (p != 0B)
    goto <bb 22>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  i.6_18 = (unsigned int) i;
  _19 = i.6_18 * 4;
  _20 = p + _19;
  _21 = *_20;
  OS_kernelData.errorStatus.parameter[i] = _21;
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 24> :
  # DEBUG BEGIN_STMT
  if (i <= 2)
    goto <bb 23>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  OS_kernelData.errorStatus.errorCondition = e;
  # DEBUG BEGIN_STMT
  OS_kernelData.errorStatus.action = act;
  # DEBUG BEGIN_STMT
  OS_kernelData.errorStatus.result = res;
  # DEBUG BEGIN_STMT
  _22 = (unsigned int) hooks;
  _23 = _22 & 32;
  if (_23 != 0)
    goto <bb 26>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  if (app == 0B)
    goto <bb 29>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  _24 = app->errorHook;
  if (_24 == 0B)
    goto <bb 29>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 28> :
  _25 = OS_kernelData.errorHookNesting;
  if (_25 != 0)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  hooks = hooks | 64;

  <bb 30> :
  # DEBUG BEGIN_STMT
  _26 = (unsigned int) hooks;
  _27 = _26 & 80;
  if (_27 != 0)
    goto <bb 31>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 31> :
  _28 = OS_kernelData.errorHookNesting;
  _29 = (unsigned int) _28;
  _30 = _29 & 2;
  if (_30 == 0)
    goto <bb 32>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 32> :
  # DEBUG BEGIN_STMT
  _31 = ehNestingSave | 2;
  OS_kernelData.errorHookNesting = _31;
  # DEBUG BEGIN_STMT
  OS_kernelData.hookApp = 0B;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_kd = &OS_kernelData;
  # DEBUG BEGIN_STMT
  Os_CallHookTmp = OS_kernelData.inFunction;
  # DEBUG BEGIN_STMT
  OS_kernelData.inFunction = 10;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_ptrErrorHook.7_32 = OS_ptrErrorHook;
  OS_ptrErrorHook.7_32 (res);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_kernelData.inFunction = Os_CallHookTmp;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_kernelData.errorHookNesting = ehNestingSave;

  <bb 33> :
  # DEBUG BEGIN_STMT
  _33 = (unsigned int) hooks;
  _34 = _33 & 32;
  if (_34 != 0)
    goto <bb 34>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 34> :
  # DEBUG BEGIN_STMT
  if (app == 0B)
    goto <bb 39>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 35> :
  _35 = OS_kernelData.appsStarted;
  if (_35 == 0)
    goto <bb 39>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :
  _36 = app->errorHook;
  if (_36 == 0B)
    goto <bb 39>; [INV]
  else
    goto <bb 37>; [INV]

  <bb 37> :
  _37 = OS_kernelData.errorHookNesting;
  if (_37 != 0)
    goto <bb 39>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 38> :
  # DEBUG BEGIN_STMT
  _38 = ehNestingSave | 1;
  OS_kernelData.errorHookNesting = _38;
  # DEBUG BEGIN_STMT
  OS_kernelData.hookApp = app;
  # DEBUG BEGIN_STMT
  OS_CallErrorHook (app, res);
  # DEBUG BEGIN_STMT
  OS_kernelData.errorHookNesting = ehNestingSave;

  <bb 39> :
  # DEBUG BEGIN_STMT
  hooks.8_39 = (signed char) hooks;
  if (hooks.8_39 < 0)
    goto <bb 40>; [INV]
  else
    goto <bb 48>; [INV]

  <bb 40> :
  _40 = OS_kernelData.errorHookNesting;
  _41 = (unsigned int) _40;
  _42 = _41 & 4;
  if (_42 == 0)
    goto <bb 41>; [INV]
  else
    goto <bb 48>; [INV]

  <bb 41> :
  # DEBUG BEGIN_STMT
  _43 = ehNestingSave | 4;
  OS_kernelData.errorHookNesting = _43;
  # DEBUG BEGIN_STMT
  OS_kernelData.hookApp = 0B;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_kd = &OS_kernelData;
  # DEBUG BEGIN_STMT
  Os_CallHookTmp = OS_kernelData.inFunction;
  # DEBUG BEGIN_STMT
  OS_kernelData.inFunction = 15;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_ptrProtectionHook.9_44 = OS_ptrProtectionHook;
  act = OS_ptrProtectionHook.9_44 (res);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_kernelData.inFunction = Os_CallHookTmp;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_kernelData.errorHookNesting = ehNestingSave;
  # DEBUG BEGIN_STMT
  if (act == 255)
    goto <bb 48>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 42> :
  # DEBUG BEGIN_STMT
  if (act == 254)
    goto <bb 43>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 43> :
  if (res == 13)
    goto <bb 44>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 44> :
  # DEBUG BEGIN_STMT
  OS_kernelData.errorStatus.action = 1;
  goto <bb 48>; [INV]

  <bb 45> :
  # DEBUG BEGIN_STMT
  if (act <= 6)
    goto <bb 46>; [INV]
  else
    goto <bb 47>; [INV]

  <bb 46> :
  # DEBUG BEGIN_STMT
  OS_kernelData.errorStatus.action = act;
  goto <bb 48>; [INV]

  <bb 47> :
  # DEBUG BEGIN_STMT
  OS_kernelData.errorStatus.action = 6;

  <bb 48> :
  # DEBUG BEGIN_STMT
  act = OS_kernelData.errorStatus.action;
  # DEBUG BEGIN_STMT
  res = OS_kernelData.errorStatus.result;
  # DEBUG BEGIN_STMT
  OS_CORTEXM_IntSetDisablingLevel (is);
  # DEBUG BEGIN_STMT
  OS_kernelData.hookApp = hookAppSave;
  # DEBUG BEGIN_STMT
  OS_kernelData.errorStatus = esSave;

  <bb 49> :
  # DEBUG BEGIN_STMT
  D.7491 = OS_ErrorAction (act, res);
  esSave = {CLOBBER};
  return D.7491;

}


