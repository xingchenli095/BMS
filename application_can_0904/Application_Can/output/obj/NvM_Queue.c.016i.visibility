
Marking local functions:


Marking externally visible functions: NvM_Queue_RemoveFirstItem NvM_Queue_InsertStandard NvM_Queue_InsertImmediate NvM_Queue_CheckFullStandard Nvm_Queue_CheckEmpty


Marking externally visible variables: NvM_Queue_Standard NvM_Queue_CancelledStandardJobs NvM_Queue_IndexStandard


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

SchM_Exit_NvM_SCHM_NVM_EXCLUSIVE_AREA_0/13 (SchM_Exit_NvM_SCHM_NVM_EXCLUSIVE_AREA_0) @06b51540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: NvM_Queue_RemoveFirstItem/7 
  Calls: 
SchM_Enter_NvM_SCHM_NVM_EXCLUSIVE_AREA_0/12 (SchM_Enter_NvM_SCHM_NVM_EXCLUSIVE_AREA_0) @06b51460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: NvM_Queue_RemoveFirstItem/7 
  Calls: 
NvM_CurrentServiceId/11 (NvM_CurrentServiceId) @06e7d090
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: NvM_Queue_InsertStandard/6 (read)NvM_Queue_InsertStandard/6 (read)
  Availability: not_available
  Varpool flags:
NvM_GlobalBlockNumber/10 (NvM_GlobalBlockNumber) @06e7d048
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: NvM_Queue_InsertStandard/6 (read)
  Availability: not_available
  Varpool flags:
NvM_BlockDescriptorTable/9 (NvM_BlockDescriptorTable) @06e7d000
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: NvM_Queue_InsertStandard/6 (read)NvM_Queue_InsertStandard/6 (read)
  Availability: not_available
  Varpool flags: read-only
NvM_AdminBlockTable/8 (NvM_AdminBlockTable) @06b47828
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: NvM_Queue_CheckFullStandard/4 (read)NvM_Queue_InsertStandard/6 (write)
  Availability: not_available
  Varpool flags:
NvM_Queue_RemoveFirstItem/7 (NvM_Queue_RemoveFirstItem) @06b460e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: NvM_Queue_IndexStandard/0 (read)NvM_Queue_IndexStandard/0 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_NvM_SCHM_NVM_EXCLUSIVE_AREA_0/13 SchM_Enter_NvM_SCHM_NVM_EXCLUSIVE_AREA_0/12 
NvM_Queue_InsertStandard/6 (NvM_Queue_InsertStandard) @06b46e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: NvM_AdminBlockTable/8 (write)NvM_Queue_IndexStandard/0 (read)NvM_Queue_IndexStandard/0 (write)NvM_Queue_IndexStandard/0 (read)NvM_Queue_CancelledStandardJobs/1 (read)NvM_BlockDescriptorTable/9 (read)NvM_Queue_Standard/2 (read)NvM_GlobalBlockNumber/10 (read)NvM_CurrentServiceId/11 (read)NvM_CurrentServiceId/11 (read)NvM_Queue_Standard/2 (write)NvM_Queue_Standard/2 (read)NvM_BlockDescriptorTable/9 (read)NvM_Queue_Standard/2 (write)NvM_Queue_Standard/2 (read)NvM_Queue_Standard/2 (write)NvM_Queue_Standard/2 (write)NvM_Queue_Standard/2 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: NvM_Queue_InsertImmediate/5 
  Calls: NvM_Queue_CheckFullStandard/4 
NvM_Queue_InsertImmediate/5 (NvM_Queue_InsertImmediate) @06b46b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: NvM_Queue_InsertStandard/6 
NvM_Queue_CheckFullStandard/4 (NvM_Queue_CheckFullStandard) @06b469a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: NvM_Queue_IndexStandard/0 (read)NvM_Queue_IndexStandard/0 (read)NvM_Queue_IndexStandard/0 (read)NvM_AdminBlockTable/8 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: NvM_Queue_InsertStandard/6 
  Calls: 
Nvm_Queue_CheckEmpty/3 (Nvm_Queue_CheckEmpty) @06b467e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: NvM_Queue_IndexStandard/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
NvM_Queue_Standard/2 (NvM_Queue_Standard) @06d8df78
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: NvM_Queue_InsertStandard/6 (read)NvM_Queue_InsertStandard/6 (write)NvM_Queue_InsertStandard/6 (read)NvM_Queue_InsertStandard/6 (write)NvM_Queue_InsertStandard/6 (read)NvM_Queue_InsertStandard/6 (write)NvM_Queue_InsertStandard/6 (write)NvM_Queue_InsertStandard/6 (write)
  Availability: available
  Varpool flags:
NvM_Queue_CancelledStandardJobs/1 (NvM_Queue_CancelledStandardJobs) @06d8df30
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: NvM_Queue_InsertStandard/6 (read)
  Availability: available
  Varpool flags:
NvM_Queue_IndexStandard/0 (NvM_Queue_IndexStandard) @06d8dee8
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Nvm_Queue_CheckEmpty/3 (read)NvM_Queue_CheckFullStandard/4 (read)NvM_Queue_CheckFullStandard/4 (read)NvM_Queue_CheckFullStandard/4 (read)NvM_Queue_InsertStandard/6 (read)NvM_Queue_InsertStandard/6 (write)NvM_Queue_InsertStandard/6 (read)NvM_Queue_RemoveFirstItem/7 (read)NvM_Queue_RemoveFirstItem/7 (write)
  Availability: available
  Varpool flags:
NvM_Queue_RemoveFirstItem ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_NvM_SCHM_NVM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NvM_Queue_IndexStandard.12_1 = NvM_Queue_IndexStandard;
  _2 = NvM_Queue_IndexStandard.12_1 + 65535;
  NvM_Queue_IndexStandard = _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_NvM_SCHM_NVM_EXCLUSIVE_AREA_0 ();
  return;

}


NvM_Queue_InsertStandard (uint16 BlockIndex, uint8 * DataAddress, void (*NvM_CurrentFunctionPtrType) (void) NvMRequestAsyncPtr)
{
  uint16 CurBlockId;
  uint8 Priority;
  boolean Found;
  uint16 Index;
  Std_ReturnType Result;
  Std_ReturnType D.7773;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Found = 0;
  # DEBUG BEGIN_STMT
  Priority = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Result = NvM_Queue_CheckFullStandard (BlockIndex);
  # DEBUG BEGIN_STMT
  if (Result == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) BlockIndex;
  NvM_AdminBlockTable[_1].NvMResult = 2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NvM_Queue_IndexStandard.4_2 = NvM_Queue_IndexStandard;
  _3 = NvM_Queue_IndexStandard.4_2 + 1;
  NvM_Queue_IndexStandard = _3;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NvM_Queue_IndexStandard.5_4 = NvM_Queue_IndexStandard;
  NvM_Queue_CancelledStandardJobs.6_5 = NvM_Queue_CancelledStandardJobs;
  Index = NvM_Queue_IndexStandard.5_4 - NvM_Queue_CancelledStandardJobs.6_5;
  # DEBUG BEGIN_STMT
  _6 = (int) BlockIndex;
  Priority = NvM_BlockDescriptorTable[_6].blockJobPriority;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = (unsigned int) Index;
  _8 = _7 + 4294967295;
  CurBlockId = NvM_Queue_Standard[_8].NvMBlockDescriptorIndex;
  # DEBUG BEGIN_STMT
  if (BlockIndex == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  NvM_GlobalBlockNumber.7_9 = NvM_GlobalBlockNumber;
  if (CurBlockId == NvM_GlobalBlockNumber.7_9)
    goto <bb 9>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (CurBlockId == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  NvM_CurrentServiceId.8_10 = NvM_CurrentServiceId;
  _11 = NvM_CurrentServiceId.8_10 + 244;
  if (_11 <= 1)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  NvM_CurrentServiceId.9_12 = NvM_CurrentServiceId;
  if (NvM_CurrentServiceId.9_12 == 25)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _13 = (unsigned int) Index;
  _14 = _13 + 4294967295;
  _15 = (int) Index;
  NvM_Queue_Standard[_15] = NvM_Queue_Standard[_14];
  # DEBUG BEGIN_STMT
  Index.10_16 = Index;
  Index = Index.10_16 + 65535;
  goto <bb 15>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (CurBlockId == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Found = 1;
  goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _17 = (int) CurBlockId;
  _18 = NvM_BlockDescriptorTable[_17].blockJobPriority;
  if (Priority < _18)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Found = 1;
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _19 = (unsigned int) Index;
  _20 = _19 + 4294967295;
  _21 = (int) Index;
  NvM_Queue_Standard[_21] = NvM_Queue_Standard[_20];
  # DEBUG BEGIN_STMT
  Index.11_22 = Index;
  Index = Index.11_22 + 65535;

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (Found != 1)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  if (Index != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _23 = (int) Index;
  NvM_Queue_Standard[_23].NvMBlockDescriptorIndex = BlockIndex;
  # DEBUG BEGIN_STMT
  _24 = (int) Index;
  NvM_Queue_Standard[_24].NvMRequestAsyncPtr = NvMRequestAsyncPtr;
  # DEBUG BEGIN_STMT
  _25 = (int) Index;
  NvM_Queue_Standard[_25].NvMTempRamBlockDataAddress = DataAddress;
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 18> :
  # DEBUG BEGIN_STMT
  D.7773 = Result;
  return D.7773;

}


NvM_Queue_InsertImmediate (uint16 BlockIndex, uint8 * DataAddress, void (*NvM_CurrentFunctionPtrType) (void) NvMRequestAsyncPtr)
{
  uint16 Index;
  Std_ReturnType Result;
  Std_ReturnType D.7755;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  Index = 0;
  # DEBUG BEGIN_STMT
  Result = NvM_Queue_InsertStandard (BlockIndex, DataAddress, NvMRequestAsyncPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7755 = Result;
  return D.7755;

}


NvM_Queue_CheckFullStandard (NvM_BlockIdType BlockId)
{
  Std_ReturnType Result;
  uint8 D.7753;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  NvM_Queue_IndexStandard.1_1 = NvM_Queue_IndexStandard;
  if (NvM_Queue_IndexStandard.1_1 == 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Result = 0;
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  NvM_Queue_IndexStandard.2_2 = NvM_Queue_IndexStandard;
  if (NvM_Queue_IndexStandard.2_2 <= 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Result = 0;
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  NvM_Queue_IndexStandard.3_3 = NvM_Queue_IndexStandard;
  if (NvM_Queue_IndexStandard.3_3 <= 2)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (BlockId == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Result = 0;
  goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _4 = NvM_AdminBlockTable[0].NvMResult;
  if (_4 == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.7753 = Result;
  return D.7753;

}


Nvm_Queue_CheckEmpty ()
{
  uint8 Result;
  uint8 D.7738;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Result = 1;
  # DEBUG BEGIN_STMT
  NvM_Queue_IndexStandard.0_1 = NvM_Queue_IndexStandard;
  if (NvM_Queue_IndexStandard.0_1 == 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Result = 0;

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.7738 = Result;
  return D.7738;

}


