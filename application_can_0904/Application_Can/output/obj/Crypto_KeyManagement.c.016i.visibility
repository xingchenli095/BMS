
Marking local functions:


Marking externally visible functions: Crypto_CertificateVerify Crypto_CertificateParse Crypto_KeyExchangeCalcSecret Crypto_KeyExchangeCalcPubVal Crypto_KeyDerive Crypto_KeyGenerate Crypto_RandomSeed Crypto_KeyElementIdsGet Crypto_KeyCopy Crypto_KeyElementCopy Crypto_KeyElementGet Crypto_KeyValidSet Crypto_KeyElementSet


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Crypto_PL_CertificateVerify/29 (Crypto_PL_CertificateVerify) @06c4a540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_CertificateVerify/12 
  Calls: 
Crypto_PL_KeyExchangeCalcSecret/28 (Crypto_PL_KeyExchangeCalcSecret) @06c4a2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_KeyExchangeCalcSecret/10 
  Calls: 
Crypto_PL_KeyExchangeCalcPubVal/27 (Crypto_PL_KeyExchangeCalcPubVal) @06c4a0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_KeyExchangeCalcPubVal/9 
  Calls: 
Crypto_PL_KeyDerive/26 (Crypto_PL_KeyDerive) @06c049a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_KeyDerive/8 
  Calls: 
Crypto_PL_KeyGenerate/25 (Crypto_PL_KeyGenerate) @06c04ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_KeyGenerate/7 
  Calls: 
Crypto_PL_RandomSeed/24 (Crypto_PL_RandomSeed) @06c04d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_RandomSeed/6 
  Calls: 
Crypto_PL_KeyCopy/23 (Crypto_PL_KeyCopy) @06c04a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_KeyCopy/4 
  Calls: 
Crypto_PL_KeyElementCopy/22 (Crypto_PL_KeyElementCopy) @06c04620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_KeyElementCopy/3 
  Calls: 
Crypto_PL_KeyElementGet/21 (Crypto_PL_KeyElementGet) @06c041c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_KeyElementGet/2 
  Calls: 
Crypto_PL_KeyValidSet/20 (Crypto_PL_KeyValidSet) @06bd7e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_KeyValidSet/1 
  Calls: 
Crypto_PL_KeyElementSet/19 (Crypto_PL_KeyElementSet) @06bd7c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_KeyElementSet/0 
  Calls: 
SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/18 (SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT) @06bd7a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_KeyCopy/4 Crypto_KeyElementCopy/3 Crypto_KeyElementSet/0 
  Calls: 
SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/17 (SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT) @06bd79a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_KeyCopy/4 Crypto_KeyElementCopy/3 Crypto_KeyElementSet/0 
  Calls: 
Crypto_DriverObjects/16 (Crypto_DriverObjects) @06bfd990
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Crypto_KeyElementSet/0 (addr)Crypto_KeyElementCopy/3 (addr)Crypto_KeyCopy/4 (addr)
  Availability: not_available
  Varpool flags:
Crypto_Keys/15 (Crypto_Keys) @06bfd900
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Crypto_KeyElementSet/0 (read)Crypto_KeyElementSet/0 (read)Crypto_KeyElementSet/0 (read)Crypto_KeyElementSet/0 (read)Crypto_KeyElementSet/0 (read)Crypto_KeyElementSet/0 (read)Crypto_KeyElementSet/0 (read)Crypto_KeyElementSet/0 (write)Crypto_KeyElementGet/2 (read)Crypto_KeyElementGet/2 (read)Crypto_KeyElementGet/2 (read)Crypto_KeyElementGet/2 (read)Crypto_KeyElementGet/2 (read)Crypto_KeyElementGet/2 (read)Crypto_KeyElementGet/2 (read)Crypto_KeyElementCopy/3 (read)Crypto_KeyElementCopy/3 (read)Crypto_KeyElementCopy/3 (read)Crypto_KeyElementCopy/3 (read)Crypto_KeyElementCopy/3 (read)Crypto_KeyElementCopy/3 (read)Crypto_KeyElementCopy/3 (read)Crypto_KeyElementCopy/3 (read)Crypto_KeyElementCopy/3 (read)Crypto_KeyElementCopy/3 (read)Crypto_KeyCopy/4 (read)Crypto_KeyCopy/4 (read)Crypto_KeyCopy/4 (read)Crypto_KeyCopy/4 (read)Crypto_KeyCopy/4 (read)Crypto_KeyCopy/4 (read)Crypto_KeyCopy/4 (read)Crypto_KeyCopy/4 (read)Crypto_KeyCopy/4 (read)Crypto_KeyElementIdsGet/5 (read)Crypto_KeyElementIdsGet/5 (read)Crypto_KeyElementIdsGet/5 (read)Crypto_KeyElementIdsGet/5 (read)
  Availability: not_available
  Varpool flags:
Det_ASR40_ReportError/14 (Det_ASR40_ReportError) @06bd78c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_CertificateVerify/12 Crypto_CertificateVerify/12 Crypto_CertificateVerify/12 Crypto_KeyExchangeCalcSecret/10 Crypto_KeyExchangeCalcSecret/10 Crypto_KeyExchangeCalcSecret/10 Crypto_KeyExchangeCalcSecret/10 Crypto_KeyExchangeCalcPubVal/9 Crypto_KeyExchangeCalcPubVal/9 Crypto_KeyExchangeCalcPubVal/9 Crypto_KeyExchangeCalcPubVal/9 Crypto_KeyExchangeCalcPubVal/9 Crypto_KeyExchangeCalcPubVal/9 Crypto_KeyDerive/8 Crypto_KeyDerive/8 Crypto_KeyDerive/8 Crypto_KeyGenerate/7 Crypto_KeyGenerate/7 Crypto_RandomSeed/6 Crypto_RandomSeed/6 Crypto_RandomSeed/6 Crypto_RandomSeed/6 Crypto_KeyElementIdsGet/5 Crypto_KeyElementIdsGet/5 Crypto_KeyElementIdsGet/5 Crypto_KeyCopy/4 Crypto_KeyCopy/4 Crypto_KeyCopy/4 Crypto_KeyElementCopy/3 Crypto_KeyElementCopy/3 Crypto_KeyElementCopy/3 Crypto_KeyElementCopy/3 Crypto_KeyElementCopy/3 Crypto_KeyElementGet/2 Crypto_KeyElementGet/2 Crypto_KeyElementGet/2 Crypto_KeyElementGet/2 Crypto_KeyElementGet/2 Crypto_KeyElementGet/2 Crypto_KeyElementGet/2 Crypto_KeyElementGet/2 Crypto_KeyElementGet/2 Crypto_KeyValidSet/1 Crypto_KeyValidSet/1 Crypto_KeyElementSet/0 Crypto_KeyElementSet/0 Crypto_KeyElementSet/0 Crypto_KeyElementSet/0 Crypto_KeyElementSet/0 
  Calls: 
Crypto_Initialized/13 (Crypto_Initialized) @06bfd798
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Crypto_KeyElementSet/0 (read)Crypto_KeyValidSet/1 (read)Crypto_KeyElementGet/2 (read)Crypto_KeyElementCopy/3 (read)Crypto_KeyCopy/4 (read)Crypto_KeyElementIdsGet/5 (read)Crypto_RandomSeed/6 (read)Crypto_KeyGenerate/7 (read)Crypto_KeyDerive/8 (read)Crypto_KeyExchangeCalcPubVal/9 (read)Crypto_KeyExchangeCalcSecret/10 (read)Crypto_CertificateVerify/12 (read)
  Availability: not_available
  Varpool flags:
Crypto_CertificateVerify/12 (Crypto_CertificateVerify) @06bd7540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_PL_CertificateVerify/29 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_CertificateParse/11 (Crypto_CertificateParse) @06bd7380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Crypto_KeyExchangeCalcSecret/10 (Crypto_KeyExchangeCalcSecret) @06bd71c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_PL_KeyExchangeCalcSecret/28 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_KeyExchangeCalcPubVal/9 (Crypto_KeyExchangeCalcPubVal) @06bd7000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/14 Crypto_PL_KeyExchangeCalcPubVal/27 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_KeyDerive/8 (Crypto_KeyDerive) @06ba6e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_PL_KeyDerive/26 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_KeyGenerate/7 (Crypto_KeyGenerate) @06ba6c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_PL_KeyGenerate/25 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_RandomSeed/6 (Crypto_RandomSeed) @06ba6a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_PL_RandomSeed/24 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_KeyElementIdsGet/5 (Crypto_KeyElementIdsGet) @06ba68c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_KeyCopy/4 (Crypto_KeyCopy) @06ba6700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)Crypto_DriverObjects/16 (addr)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_PL_KeyCopy/23 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/18 SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/17 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_KeyElementCopy/3 (Crypto_KeyElementCopy) @06ba6540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)Crypto_DriverObjects/16 (addr)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_PL_KeyElementCopy/22 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/18 SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/17 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_KeyElementGet/2 (Crypto_KeyElementGet) @06ba6380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Crypto_PL_KeyElementGet/21 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_KeyValidSet/1 (Crypto_KeyValidSet) @06ba61c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_PL_KeyValidSet/20 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_KeyElementSet/0 (Crypto_KeyElementSet) @06ba6000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/13 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_DriverObjects/16 (addr)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (read)Crypto_Keys/15 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_PL_KeyElementSet/19 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/18 SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/17 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 Det_ASR40_ReportError/14 
Crypto_CertificateVerify (uint32 CryptoKeyId, uint32 VerifyCryptoKeyId, Crypto_VerifyResultType * VerifyPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6693;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.11_1 = Crypto_Initialized;
  if (Crypto_Initialized.11_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 18, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (VerifyCryptoKeyId > 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 18, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (VerifyPtr == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 18, 2);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_PL_CertificateVerify (CryptoKeyId, VerifyCryptoKeyId, VerifyPtr);

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.6693 = RetVal;
  return D.6693;

}


Crypto_CertificateParse (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6681;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6681 = RetVal;
  return D.6681;

}


Crypto_KeyExchangeCalcSecret (uint32 CryptoKeyId, const uint8 * PartnerPublicValuePtr, uint32 PartnerPublicValueLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6679;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.10_1 = Crypto_Initialized;
  if (Crypto_Initialized.10_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 10, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 10, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (PartnerPublicValuePtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 10, 2);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (PartnerPublicValueLength == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 10, 5);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_PL_KeyExchangeCalcSecret (CryptoKeyId, PartnerPublicValuePtr, PartnerPublicValueLength);

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.6679 = RetVal;
  return D.6679;

}


Crypto_KeyExchangeCalcPubVal (uint32 CryptoKeyId, uint8 * PublicValuePtr, uint32 * PublicValueLengthPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6665;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.9_1 = Crypto_Initialized;
  if (Crypto_Initialized.9_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (PublicValuePtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 2);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (PublicValueLengthPtr == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 2);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = *PublicValueLengthPtr;
  if (_2 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 5);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_PL_KeyExchangeCalcPubVal (CryptoKeyId, PublicValuePtr, PublicValueLengthPtr);

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (RetVal == 3)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 9, 0);
  # DEBUG BEGIN_STMT
  RetVal = 3;

  <bb 15> :
  # DEBUG BEGIN_STMT
  D.6665 = RetVal;
  return D.6665;

}


Crypto_KeyDerive (uint32 CryptoKeyId, uint32 TargetCryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6646;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.8_1 = Crypto_Initialized;
  if (Crypto_Initialized.8_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 8, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 8, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TargetCryptoKeyId > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 8, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_PL_KeyDerive (CryptoKeyId, TargetCryptoKeyId);

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.6646 = RetVal;
  return D.6646;

}


Crypto_KeyGenerate (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6635;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.7_1 = Crypto_Initialized;
  if (Crypto_Initialized.7_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 7, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 7, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_PL_KeyGenerate (CryptoKeyId);

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.6635 = RetVal;
  return D.6635;

}


Crypto_RandomSeed (uint32 CryptoKeyId, const uint8 * EntropyPtr, uint32 EntropyLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6627;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.6_1 = Crypto_Initialized;
  if (Crypto_Initialized.6_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 13, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 13, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (EntropyPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 13, 2);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (EntropyLength == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 13, 5);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_PL_RandomSeed (CryptoKeyId, EntropyPtr, EntropyLength);

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.6627 = RetVal;
  return D.6627;

}


Crypto_KeyElementIdsGet (uint32 CryptoKeyId, uint32 * KeyElementIdsPtr, uint32 * KeyElementIdsLengthPtr)
{
  uint32 keyElementIndex;
  Std_ReturnType RetVal;
  Std_ReturnType D.6613;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  keyElementIndex = 0;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.5_1 = Crypto_Initialized;
  if (Crypto_Initialized.5_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 17, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 17, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = *KeyElementIdsLengthPtr;
  _3 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (_2 < _3)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 17, 0);
  # DEBUG BEGIN_STMT
  RetVal = 3;
  goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  keyElementIndex = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _4 = Crypto_Keys[CryptoKeyId].KeyType;
  _5 = keyElementIndex * 4;
  _6 = _4 + _5;
  _7 = *_6;
  _8 = keyElementIndex * 4;
  _9 = KeyElementIdsPtr + _8;
  _10 = _7->Id;
  *_9 = _10;
  # DEBUG BEGIN_STMT
  keyElementIndex = keyElementIndex + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _11 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (keyElementIndex < _11)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _12 = Crypto_Keys[CryptoKeyId].KeyElements;
  *KeyElementIdsLengthPtr = _12;
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.6613 = RetVal;
  return D.6613;

}


Crypto_KeyCopy (uint32 CryptoKeyId, uint32 TargetCryptoKeyId)
{
  uint32 j;
  uint32 i;
  uint32 ObjectId;
  struct Crypto_DriverObject * DriverObj;
  Std_ReturnType RetVal;
  Std_ReturnType D.6602;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  DriverObj = 0B;
  # DEBUG BEGIN_STMT
  ObjectId = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  # DEBUG BEGIN_STMT
  j = 0;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.4_1 = Crypto_Initialized;
  if (Crypto_Initialized.4_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 16, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 29>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 16, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 29>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TargetCryptoKeyId > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 16, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 29>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  DriverObj = &Crypto_DriverObjects[ObjectId];
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _2 = DriverObj->CurrentJob;
  if (_2 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _3 = DriverObj->CurrentJob;
  _4 = _3->cryptoKeyId;
  if (TargetCryptoKeyId == _4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal = 2;

  <bb 11> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  if (RetVal != 2)
    goto <bb 12>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 26>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _5 = Crypto_Keys[CryptoKeyId].KeyType;
  _6 = i * 4;
  _7 = _5 + _6;
  _8 = *_7;
  _9 = _8->ReadAccess;
  if (_9 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  RetVal = 6;
  # DEBUG BEGIN_STMT
  goto <bb 27>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  j = 0;
  goto <bb 22>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _10 = Crypto_Keys[CryptoKeyId].KeyType;
  _11 = i * 4;
  _12 = _10 + _11;
  _13 = *_12;
  _14 = _13->Id;
  _15 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _16 = j * 4;
  _17 = _15 + _16;
  _18 = *_17;
  _19 = _18->Id;
  if (_14 == _19)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _20 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _21 = j * 4;
  _22 = _20 + _21;
  _23 = *_22;
  _24 = _23->WriteAccess;
  if (_24 == 1)
    goto <bb 20>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _25 = Crypto_Keys[CryptoKeyId].KeyType;
  _26 = i * 4;
  _27 = _25 + _26;
  _28 = *_27;
  _29 = _28->ReadAccess;
  if (_29 == 2)
    goto <bb 19>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 19> :
  _30 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _31 = j * 4;
  _32 = _30 + _31;
  _33 = *_32;
  _34 = _33->ReadAccess;
  if (_34 == 3)
    goto <bb 20>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  RetVal = 7;
  goto <bb 23>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  j = j + 1;

  <bb 22> :
  # DEBUG BEGIN_STMT
  _35 = Crypto_Keys[TargetCryptoKeyId].KeyElements;
  if (j < _35)
    goto <bb 16>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  _36 = Crypto_Keys[TargetCryptoKeyId].KeyElements;
  if (j == _36)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  RetVal = 8;
  # DEBUG BEGIN_STMT
  goto <bb 27>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 26> :
  # DEBUG BEGIN_STMT
  _37 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (i < _37)
    goto <bb 13>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_PL_KeyCopy (CryptoKeyId, TargetCryptoKeyId);

  <bb 29> :
  # DEBUG BEGIN_STMT
  D.6602 = RetVal;
  return D.6602;

}


Crypto_KeyElementCopy (uint32 CryptoKeyId, uint32 KeyElementId, uint32 TargetCryptoKeyId, uint32 TargetKeyElementId)
{
  uint32 TargetKeyElementIndex;
  uint32 SourceKeyElementIndex;
  uint32 ObjectId;
  struct Crypto_DriverObject * DriverObj;
  Std_ReturnType RetVal;
  Std_ReturnType D.6573;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  DriverObj = 0B;
  # DEBUG BEGIN_STMT
  ObjectId = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Crypto_Initialized.3_1 = Crypto_Initialized;
  if (Crypto_Initialized.3_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 15, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 15, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TargetCryptoKeyId > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 15, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  DriverObj = &Crypto_DriverObjects[ObjectId];
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _2 = DriverObj->CurrentJob;
  if (_2 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _3 = DriverObj->CurrentJob;
  _4 = _3->cryptoKeyId;
  if (TargetCryptoKeyId == _4)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal = 2;

  <bb 11> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  if (RetVal != 2)
    goto <bb 12>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  SourceKeyElementIndex = 0;
  goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _5 = Crypto_Keys[CryptoKeyId].KeyType;
  _6 = SourceKeyElementIndex * 4;
  _7 = _5 + _6;
  _8 = *_7;
  _9 = _8->Id;
  if (KeyElementId == _9)
    goto <bb 16>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  SourceKeyElementIndex = SourceKeyElementIndex + 1;

  <bb 15> :
  # DEBUG BEGIN_STMT
  _10 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (SourceKeyElementIndex < _10)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _11 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (SourceKeyElementIndex == _11)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 15, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _12 = Crypto_Keys[CryptoKeyId].KeyType;
  _13 = SourceKeyElementIndex * 4;
  _14 = _12 + _13;
  _15 = *_14;
  _16 = _15->ReadAccess;
  if (_16 == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  RetVal = 6;
  goto <bb 31>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  TargetKeyElementIndex = 0;
  goto <bb 23>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _17 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _18 = TargetKeyElementIndex * 4;
  _19 = _17 + _18;
  _20 = *_19;
  _21 = _20->Id;
  if (TargetKeyElementId == _21)
    goto <bb 24>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  TargetKeyElementIndex = TargetKeyElementIndex + 1;

  <bb 23> :
  # DEBUG BEGIN_STMT
  _22 = Crypto_Keys[TargetCryptoKeyId].KeyElements;
  if (TargetKeyElementIndex < _22)
    goto <bb 21>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  _23 = Crypto_Keys[TargetCryptoKeyId].KeyElements;
  if (TargetKeyElementIndex == _23)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 15, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  _24 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _25 = TargetKeyElementIndex * 4;
  _26 = _24 + _25;
  _27 = *_26;
  _28 = _27->WriteAccess;
  if (_28 == 1)
    goto <bb 29>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  _29 = Crypto_Keys[CryptoKeyId].KeyType;
  _30 = SourceKeyElementIndex * 4;
  _31 = _29 + _30;
  _32 = *_31;
  _33 = _32->ReadAccess;
  if (_33 == 2)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 28> :
  _34 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _35 = TargetKeyElementIndex * 4;
  _36 = _34 + _35;
  _37 = *_36;
  _38 = _37->ReadAccess;
  if (_38 == 3)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  RetVal = 7;
  goto <bb 31>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_PL_KeyElementCopy (CryptoKeyId, KeyElementId, TargetCryptoKeyId, TargetKeyElementId);

  <bb 31> :
  # DEBUG BEGIN_STMT
  D.6573 = RetVal;
  return D.6573;

}


Crypto_KeyElementGet (uint32 CryptoKeyId, uint32 KeyElementId, uint8 * ResultPtr, uint32 * ResultLengthPtr)
{
  uint32 keyElementIndex;
  Std_ReturnType RetVal;
  Std_ReturnType D.6540;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Crypto_Initialized.2_1 = Crypto_Initialized;
  if (Crypto_Initialized.2_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 29>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 29>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ResultPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 2);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 29>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ResultLengthPtr == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 2);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 29>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _2 = *ResultLengthPtr;
  if (_2 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 5);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 29>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _3 = Crypto_Keys[CryptoKeyId].KeyState;
  if (_3 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  keyElementIndex = 0;
  goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _4 = Crypto_Keys[CryptoKeyId].KeyType;
  _5 = keyElementIndex * 4;
  _6 = _4 + _5;
  _7 = *_6;
  _8 = _7->Id;
  if (KeyElementId == _8)
    goto <bb 17>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  keyElementIndex = keyElementIndex + 1;

  <bb 16> :
  # DEBUG BEGIN_STMT
  _9 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (keyElementIndex < _9)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _10 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (keyElementIndex == _10)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 1);
  # DEBUG BEGIN_STMT
  RetVal = 8;
  goto <bb 25>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _11 = *ResultLengthPtr;
  _12 = Crypto_Keys[CryptoKeyId].KeyType;
  _13 = keyElementIndex * 4;
  _14 = _12 + _13;
  _15 = *_14;
  _16 = _15->Size;
  if (_11 < _16)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  _17 = Crypto_Keys[CryptoKeyId].KeyType;
  _18 = keyElementIndex * 4;
  _19 = _17 + _18;
  _20 = *_19;
  _21 = _20->AllowPartialAccess;
  if (_21 == 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 0);
  # DEBUG BEGIN_STMT
  RetVal = 3;
  goto <bb 25>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _22 = Crypto_Keys[CryptoKeyId].KeyType;
  _23 = keyElementIndex * 4;
  _24 = _22 + _23;
  _25 = *_24;
  _26 = _25->ReadAccess;
  _27 = _26 + 255;
  if (_27 <= 1)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  RetVal = 6;
  goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_PL_KeyElementGet (CryptoKeyId, KeyElementId, ResultPtr, ResultLengthPtr);

  <bb 25> :
  # DEBUG BEGIN_STMT
  if (RetVal == 8)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 1);

  <bb 27> :
  # DEBUG BEGIN_STMT
  if (RetVal == 6)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 6, 2);

  <bb 29> :
  # DEBUG BEGIN_STMT
  D.6540 = RetVal;
  return D.6540;

}


Crypto_KeyValidSet (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6506;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.1_1 = Crypto_Initialized;
  if (Crypto_Initialized.1_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 5, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 5, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_PL_KeyValidSet (CryptoKeyId);

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.6506 = RetVal;
  return D.6506;

}


Crypto_KeyElementSet (uint32 CryptoKeyId, uint32 KeyElementId, const uint8 * KeyPtr, uint32 KeyLength)
{
  struct Crypto_DriverObject * DriverObj;
  uint32 ObjectId;
  uint32 KeyElementLength;
  uint32 KeyElementIndex;
  boolean Found;
  Std_ReturnType RetVal;
  Std_ReturnType D.6498;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Found = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ObjectId = 0;
  # DEBUG BEGIN_STMT
  DriverObj = 0B;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.0_1 = Crypto_Initialized;
  if (Crypto_Initialized.0_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 4, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (CryptoKeyId > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 4, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (KeyPtr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 4, 2);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (KeyLength == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 4, 5);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  KeyElementIndex = 0;
  goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _2 = Crypto_Keys[CryptoKeyId].KeyType;
  _3 = KeyElementIndex * 4;
  _4 = _2 + _3;
  _5 = *_4;
  _6 = _5->Id;
  if (KeyElementId == _6)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Found = 1;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  KeyElementIndex = KeyElementIndex + 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  _7 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (KeyElementIndex < _7)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (Found == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 4, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  DriverObj = &Crypto_DriverObjects[ObjectId];
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _8 = DriverObj->CurrentJob;
  if (_8 != 0B)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _9 = DriverObj->CurrentJob;
  _10 = _9->cryptoKeyId;
  if (CryptoKeyId == _10)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  RetVal = 2;

  <bb 20> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  if (RetVal != 2)
    goto <bb 21>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 21> :
  if (Found == 1)
    goto <bb 22>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _11 = Crypto_Keys[CryptoKeyId].KeyType;
  _12 = KeyElementIndex * 4;
  _13 = _11 + _12;
  _14 = *_13;
  _15 = _14->WriteAccess;
  _16 = _15 + 255;
  if (_16 <= 1)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  RetVal = 7;
  goto <bb 31>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  _17 = Crypto_Keys[CryptoKeyId].KeyType;
  _18 = KeyElementIndex * 4;
  _19 = _17 + _18;
  _20 = *_19;
  _21 = _20->Size;
  if (KeyLength != _21)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 25> :
  _22 = Crypto_Keys[CryptoKeyId].KeyType;
  _23 = KeyElementIndex * 4;
  _24 = _22 + _23;
  _25 = *_24;
  _26 = _25->AllowPartialAccess;
  if (_26 == 0)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  RetVal = 10;
  goto <bb 31>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  _27 = Crypto_Keys[CryptoKeyId].KeyType;
  _28 = KeyElementIndex * 4;
  _29 = _27 + _28;
  _30 = *_29;
  _31 = _30->Size;
  if (KeyLength > _31)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  _32 = Crypto_Keys[CryptoKeyId].KeyType;
  _33 = KeyElementIndex * 4;
  _34 = _32 + _33;
  _35 = *_34;
  KeyElementLength = _35->Size;
  goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  KeyElementLength = KeyLength;

  <bb 30> :
  # DEBUG BEGIN_STMT
  Crypto_Keys[CryptoKeyId].KeyState = 0;
  # DEBUG BEGIN_STMT
  RetVal = Crypto_PL_KeyElementSet (CryptoKeyId, KeyElementId, KeyPtr, KeyElementLength);

  <bb 31> :
  # DEBUG BEGIN_STMT
  D.6498 = RetVal;
  return D.6498;

}


