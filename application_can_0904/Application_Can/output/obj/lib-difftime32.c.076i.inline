IPA function summary for OS_DiffTime32/0 inlinable
  global time:     12.500000
  self size:       14
  global size:     14
  min size:       0
  self stack:      0
  global stack:    0
    size:2.000000, time:2.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op1[ref offset: 32] changed)
    size:2.000000, time:1.500000,  nonconst if:(op0[ref offset: 32] changed || op1[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:3.000000, time:3.000000,  nonconst if:(op1[ref offset: 0] changed || op0[ref offset: 0] changed)
  calls:


Flattening functions:
Overall time estimate: 12.500000 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in OS_DiffTime32/0.

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 12.500000 weighted by profile: 0.000000

Why inlining failed?
IPA function summary for OS_DiffTime32/0 inlinable
  global time:     12.500000
  self size:       14
  global size:     14
  min size:       0
  self stack:      0
  global stack:    0
    size:2.000000, time:2.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op1[ref offset: 32] changed)
    size:2.000000, time:1.500000,  nonconst if:(op0[ref offset: 32] changed || op1[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:3.000000, time:3.000000,  nonconst if:(op1[ref offset: 0] changed || op0[ref offset: 0] changed)
  calls:

Symbol table:

OS_DiffTime32/0 (OS_DiffTime32) @06b01b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 

;; Function OS_DiffTime32 (OS_DiffTime32, funcdef_no=0, decl_uid=5531, cgraph_uid=1, symbol_order=0)

__attribute__((target ("general-regs-only")))
OS_DiffTime32 (const struct os_timestamp_t * newTime, const struct os_timestamp_t * oldTime)
{
  unsigned int diffTime$tsHi;
  unsigned int diffTime$tsLo;
  unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  unsigned int _5;
  unsigned int _6;
  unsigned int _7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = newTime_9(D)->tsHi;
  _2 = oldTime_10(D)->tsHi;
  _3 = _1 - _2;
  # DEBUG diffTime$tsHi => _3
  # DEBUG BEGIN_STMT
  _4 = oldTime_10(D)->tsLo;
  _5 = newTime_9(D)->tsLo;
  if (_4 > _5)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _6 = _3 + 4294967295;
  # DEBUG diffTime$tsHi => _6

  <bb 4> [local count: 1073741824]:
  # diffTime$tsHi_12 = PHI <_3(2), _6(3)>
  # DEBUG diffTime$tsHi => diffTime$tsHi_12
  # DEBUG BEGIN_STMT
  _7 = _5 - _4;
  # DEBUG diffTime$tsLo => _7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (diffTime$tsHi_12 != 0)
    goto <bb 5>; [35.00%]
  else
    goto <bb 6>; [65.00%]

  <bb 5> [local count: 375809639]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG diffTime$tsLo => 4294967295

  <bb 6> [local count: 1073741824]:
  # diffTime$tsLo_11 = PHI <_7(4), 4294967295(5)>
  # DEBUG diffTime$tsLo => diffTime$tsLo_11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return diffTime$tsLo_11;

}


