Clock_Ip_SetRtcRtccClksel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  <unnamed type> _1;
  short unsigned int _2;
  struct RTC_Type * _3;
  long unsigned int _4;
  long unsigned int _5;
  struct RTC_Type * _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config_8(D)->Value;
  _2 = Clock_Ip_au16SelectorEntryRtcHardwareValue[_1];
  SelectorValue_9 = (uint32) _2;
  # DEBUG SelectorValue => SelectorValue_9
  # DEBUG BEGIN_STMT
  _3 = 1076396032B;
  RegValue_10 ={v} _3->RTCC;
  # DEBUG RegValue => RegValue_10
  # DEBUG BEGIN_STMT
  RegValue_11 = RegValue_10 & 4294955007;
  # DEBUG RegValue => RegValue_11
  # DEBUG BEGIN_STMT
  _4 = SelectorValue_9 << 12;
  _5 = _4 & 12288;
  RegValue_12 = RegValue_11 | _5;
  # DEBUG RegValue => RegValue_12
  # DEBUG BEGIN_STMT
  _6 = 1076396032B;
  _6->RTCC ={v} RegValue_12;
  return;

}


Clock_Ip_SetRtcRtccClksel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_SetRtcRtccClksel_TrustedCall (Config_2(D));
  return;

}


Clock_Ip_SetCgmXCscCssCsGrip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorValue;
  uint32 SelectorIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  <unnamed type> _5;
  short unsigned int _6;
  <unnamed type> _7;
  unsigned char _8;
  int _9;
  <unnamed type> _10;
  unsigned char _11;
  int _12;
  volatile struct Clock_Ip_CgmMuxType * _13;
  long unsigned int _14;
  volatile struct Clock_Ip_CgmMuxType * _15;
  long unsigned int _16;
  long unsigned int TimeoutTicks.0_17;
  volatile struct Clock_Ip_CgmMuxType * _18;
  long unsigned int _19;
  long unsigned int _20;
  volatile struct Clock_Ip_CgmMuxType * _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  volatile struct Clock_Ip_CgmMuxType * _25;
  volatile struct Clock_Ip_CgmMuxType * _26;
  long unsigned int _27;
  volatile struct Clock_Ip_CgmMuxType * _28;
  long unsigned int _29;
  long unsigned int TimeoutTicks.1_30;
  volatile struct Clock_Ip_CgmMuxType * _31;
  long unsigned int _32;
  long unsigned int _33;
  <unnamed type> _34;
  <unnamed type> _35;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_40(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_41 = (uint32) _2;
  # DEBUG Instance => Instance_41
  # DEBUG BEGIN_STMT
  _3 = Config_40(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex_42 = (uint32) _4;
  # DEBUG SelectorIndex => SelectorIndex_42
  # DEBUG BEGIN_STMT
  _5 = Config_40(D)->Value;
  _6 = Clock_Ip_au16SelectorEntryHardwareValue[_5];
  SelectorValue_43 = (uint32) _6;
  # DEBUG SelectorValue => SelectorValue_43
  # DEBUG BEGIN_STMT
  _7 = Config_40(D)->Name;
  _8 = Clock_Ip_au8ClockFeatures[_7][2];
  _9 = (int) _8;
  SelectorMask_44 = Clock_Ip_axFeatureExtensions[_9].SelectorValueMask;
  # DEBUG SelectorMask => SelectorMask_44
  # DEBUG BEGIN_STMT
  _10 = Config_40(D)->Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][2];
  _12 = (int) _11;
  SelectorShift_45 = Clock_Ip_axFeatureExtensions[_12].SelectorValueShift;
  # DEBUG SelectorShift => SelectorShift_45
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred_46 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_46
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_apxCgm[Instance_41][SelectorIndex_42];
  _14 ={v} _13->CSC;
  _15 = Clock_Ip_apxCgm[Instance_41][SelectorIndex_42];
  _16 = _14 | 12;
  _15->CSC ={v} _16;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.0_17 = TimeoutTicks;
  TimeoutOccurred_50 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_17);
  # DEBUG TimeoutOccurred => TimeoutOccurred_50
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance_41][SelectorIndex_42];
  _19 ={v} _18->CSS;
  _20 = _19 & 131072;
  if (_20 == 131072)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  if (TimeoutOccurred_50 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_50 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _21 = Clock_Ip_apxCgm[Instance_41][SelectorIndex_42];
  RegValue_52 ={v} _21->CSC;
  # DEBUG RegValue => RegValue_52
  # DEBUG BEGIN_STMT
  _22 = ~SelectorMask_44;
  RegValue_53 = RegValue_52 & _22;
  # DEBUG RegValue => RegValue_53
  # DEBUG BEGIN_STMT
  _23 = SelectorValue_43 << SelectorShift_45;
  _24 = SelectorMask_44 & _23;
  RegValue_54 = RegValue_53 | _24;
  # DEBUG RegValue => RegValue_54
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_apxCgm[Instance_41][SelectorIndex_42];
  _25->CSC ={v} RegValue_54;
  # DEBUG BEGIN_STMT
  _26 = Clock_Ip_apxCgm[Instance_41][SelectorIndex_42];
  _27 ={v} _26->CSC;
  _28 = Clock_Ip_apxCgm[Instance_41][SelectorIndex_42];
  _29 = _27 & 4294967283;
  _28->CSC ={v} _29;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.1_30 = TimeoutTicks;
  TimeoutOccurred_59 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_30);
  # DEBUG TimeoutOccurred => TimeoutOccurred_59
  # DEBUG BEGIN_STMT
  _31 = Clock_Ip_apxCgm[Instance_41][SelectorIndex_42];
  _32 ={v} _31->CSS;
  _33 = _32 & 131072;
  if (_33 != 131072)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  if (TimeoutOccurred_59 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_59 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _34 = Config_40(D)->Name;
  Clock_Ip_ReportClockErrors (3, _34);
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _35 = Config_40(D)->Name;
  Clock_Ip_ReportClockErrors (1, _35);

  <bb 12> :
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Clock_Ip_ResetCgmXCscCssCsGrip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorResetValue;
  uint32 SelectorIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  <unnamed type> _5;
  unsigned char _6;
  <unnamed type> _7;
  unsigned char _8;
  int _9;
  <unnamed type> _10;
  unsigned char _11;
  int _12;
  volatile struct Clock_Ip_CgmMuxType * _13;
  long unsigned int _14;
  volatile struct Clock_Ip_CgmMuxType * _15;
  long unsigned int _16;
  long unsigned int TimeoutTicks.2_17;
  volatile struct Clock_Ip_CgmMuxType * _18;
  long unsigned int _19;
  long unsigned int _20;
  volatile struct Clock_Ip_CgmMuxType * _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  volatile struct Clock_Ip_CgmMuxType * _25;
  volatile struct Clock_Ip_CgmMuxType * _26;
  long unsigned int _27;
  volatile struct Clock_Ip_CgmMuxType * _28;
  long unsigned int _29;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_33(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_34 = (uint32) _2;
  # DEBUG Instance => Instance_34
  # DEBUG BEGIN_STMT
  _3 = Config_33(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex_35 = (uint32) _4;
  # DEBUG SelectorIndex => SelectorIndex_35
  # DEBUG BEGIN_STMT
  _5 = Config_33(D)->Name;
  _6 = Clock_Ip_au8SoftwareMuxResetValue[_5];
  SelectorResetValue_36 = (uint32) _6;
  # DEBUG SelectorResetValue => SelectorResetValue_36
  # DEBUG BEGIN_STMT
  _7 = Config_33(D)->Name;
  _8 = Clock_Ip_au8ClockFeatures[_7][2];
  _9 = (int) _8;
  SelectorMask_37 = Clock_Ip_axFeatureExtensions[_9].SelectorValueMask;
  # DEBUG SelectorMask => SelectorMask_37
  # DEBUG BEGIN_STMT
  _10 = Config_33(D)->Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][2];
  _12 = (int) _11;
  SelectorShift_38 = Clock_Ip_axFeatureExtensions[_12].SelectorValueShift;
  # DEBUG SelectorShift => SelectorShift_38
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred_39 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_39
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_apxCgm[Instance_34][SelectorIndex_35];
  _14 ={v} _13->CSC;
  _15 = Clock_Ip_apxCgm[Instance_34][SelectorIndex_35];
  _16 = _14 | 12;
  _15->CSC ={v} _16;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.2_17 = TimeoutTicks;
  TimeoutOccurred_43 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.2_17);
  # DEBUG TimeoutOccurred => TimeoutOccurred_43
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance_34][SelectorIndex_35];
  _19 ={v} _18->CSS;
  _20 = _19 & 131072;
  if (_20 == 131072)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  if (TimeoutOccurred_43 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_43 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _21 = Clock_Ip_apxCgm[Instance_34][SelectorIndex_35];
  RegValue_44 ={v} _21->CSC;
  # DEBUG RegValue => RegValue_44
  # DEBUG BEGIN_STMT
  _22 = ~SelectorMask_37;
  RegValue_45 = RegValue_44 & _22;
  # DEBUG RegValue => RegValue_45
  # DEBUG BEGIN_STMT
  _23 = SelectorResetValue_36 << SelectorShift_38;
  _24 = SelectorMask_37 & _23;
  RegValue_46 = RegValue_45 | _24;
  # DEBUG RegValue => RegValue_46
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_apxCgm[Instance_34][SelectorIndex_35];
  _25->CSC ={v} RegValue_46;
  # DEBUG BEGIN_STMT
  _26 = Clock_Ip_apxCgm[Instance_34][SelectorIndex_35];
  _27 ={v} _26->CSC;
  _28 = Clock_Ip_apxCgm[Instance_34][SelectorIndex_35];
  _29 = _27 & 4294967283;
  _28->CSC ={v} _29;

  <bb 7> :
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Clock_Ip_SetCgmXCscCssClkswRampupRampdownSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorValue;
  uint32 SelectorIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  <unnamed type> _5;
  short unsigned int _6;
  <unnamed type> _7;
  unsigned char _8;
  int _9;
  <unnamed type> _10;
  unsigned char _11;
  int _12;
  volatile struct Clock_Ip_CgmMuxType * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int TimeoutTicks.3_17;
  volatile struct Clock_Ip_CgmMuxType * _18;
  long unsigned int _19;
  long unsigned int _20;
  volatile struct Clock_Ip_CgmMuxType * _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  volatile struct Clock_Ip_CgmMuxType * _25;
  long unsigned int TimeoutTicks.4_26;
  volatile struct Clock_Ip_CgmMuxType * _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int TimeoutTicks.5_30;
  volatile struct Clock_Ip_CgmMuxType * _31;
  long unsigned int _32;
  long unsigned int _33;
  volatile struct Clock_Ip_CgmMuxType * _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  <unnamed type> _38;
  <unnamed type> _39;
  <unnamed type> _40;
  <unnamed type> _41;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_47(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_48 = (uint32) _2;
  # DEBUG Instance => Instance_48
  # DEBUG BEGIN_STMT
  _3 = Config_47(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex_49 = (uint32) _4;
  # DEBUG SelectorIndex => SelectorIndex_49
  # DEBUG BEGIN_STMT
  _5 = Config_47(D)->Value;
  _6 = Clock_Ip_au16SelectorEntryHardwareValue[_5];
  SelectorValue_50 = (uint32) _6;
  # DEBUG SelectorValue => SelectorValue_50
  # DEBUG BEGIN_STMT
  _7 = Config_47(D)->Name;
  _8 = Clock_Ip_au8ClockFeatures[_7][2];
  _9 = (int) _8;
  SelectorMask_51 = Clock_Ip_axFeatureExtensions[_9].SelectorValueMask;
  # DEBUG SelectorMask => SelectorMask_51
  # DEBUG BEGIN_STMT
  _10 = Config_47(D)->Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][2];
  _12 = (int) _11;
  SelectorShift_52 = Clock_Ip_axFeatureExtensions[_12].SelectorValueShift;
  # DEBUG SelectorShift => SelectorShift_52
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred_53 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_53
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _14 ={v} _13->CSS;
  _15 = SelectorMask_51 & _14;
  _16 = _15 >> SelectorShift_52;
  if (SelectorValue_50 != _16)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.3_17 = TimeoutTicks;
  TimeoutOccurred_56 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.3_17);
  # DEBUG TimeoutOccurred => TimeoutOccurred_56
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _19 ={v} _18->CSS;
  _20 = _19 & 65536;
  if (_20 == 65536)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (TimeoutOccurred_56 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_56 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _21 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  RegValue_58 ={v} _21->CSC;
  # DEBUG RegValue => RegValue_58
  # DEBUG BEGIN_STMT
  _22 = ~SelectorMask_51;
  RegValue_59 = RegValue_58 & _22;
  # DEBUG RegValue => RegValue_59
  # DEBUG BEGIN_STMT
  _23 = SelectorValue_50 << SelectorShift_52;
  _24 = SelectorMask_51 & _23;
  RegValue_60 = RegValue_59 | _24;
  # DEBUG RegValue => RegValue_60
  # DEBUG BEGIN_STMT
  RegValue_61 = RegValue_60 | 7;
  # DEBUG RegValue => RegValue_61
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _25->CSC ={v} RegValue_61;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.4_26 = TimeoutTicks;
  TimeoutOccurred_65 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.4_26);
  # DEBUG TimeoutOccurred => TimeoutOccurred_65
  # DEBUG BEGIN_STMT
  _27 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _28 ={v} _27->CSS;
  _29 = _28 & 4;
  if (_29 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  if (TimeoutOccurred_65 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_65 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.5_30 = TimeoutTicks;
  TimeoutOccurred_69 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.5_30);
  # DEBUG TimeoutOccurred => TimeoutOccurred_69
  # DEBUG BEGIN_STMT
  _31 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _32 ={v} _31->CSS;
  _33 = _32 & 65536;
  if (_33 == 65536)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  if (TimeoutOccurred_69 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_69 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _34 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _35 ={v} _34->CSS;
  _36 = _35 >> 17;
  _37 = _36 & 7;
  if (_37 != 1)
    goto <bb 16>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _38 = Config_47(D)->Name;
  Clock_Ip_ReportClockErrors (3, _38);
  goto <bb 20>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _39 = Config_47(D)->Name;
  Clock_Ip_ReportClockErrors (1, _39);
  goto <bb 20>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _40 = Config_47(D)->Name;
  Clock_Ip_ReportClockErrors (1, _40);
  goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _41 = Config_47(D)->Name;
  Clock_Ip_ReportClockErrors (1, _41);

  <bb 20> :
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Clock_Ip_ResetCgmXCscCssClkswRampupRampdownSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorMask;
  uint32 SelectorIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  <unnamed type> _5;
  unsigned char _6;
  int _7;
  volatile struct Clock_Ip_CgmMuxType * _8;
  long unsigned int _9;
  volatile struct Clock_Ip_CgmMuxType * _10;
  long unsigned int _11;
  volatile struct Clock_Ip_CgmMuxType * _12;
  long unsigned int _13;
  long unsigned int _14;
  volatile struct Clock_Ip_CgmMuxType * _15;
  long unsigned int _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_18(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_19 = (uint32) _2;
  # DEBUG Instance => Instance_19
  # DEBUG BEGIN_STMT
  _3 = Config_18(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex_20 = (uint32) _4;
  # DEBUG SelectorIndex => SelectorIndex_20
  # DEBUG BEGIN_STMT
  _5 = Config_18(D)->Name;
  _6 = Clock_Ip_au8ClockFeatures[_5][2];
  _7 = (int) _6;
  SelectorMask_21 = Clock_Ip_axFeatureExtensions[_7].SelectorValueMask;
  # DEBUG SelectorMask => SelectorMask_21
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_apxCgm[Instance_19][SelectorIndex_20];
  _9 ={v} _8->CSC;
  _10 = Clock_Ip_apxCgm[Instance_19][SelectorIndex_20];
  _11 = _9 | 8;
  _10->CSC ={v} _11;
  # DEBUG BEGIN_STMT
  _12 = Clock_Ip_apxCgm[Instance_19][SelectorIndex_20];
  _13 ={v} _12->CSC;
  _14 = ~SelectorMask_21;
  _15 = Clock_Ip_apxCgm[Instance_19][SelectorIndex_20];
  _16 = _13 & _14;
  _15->CSC ={v} _16;
  return;

}


Clock_Ip_SetCgmXCscCssClkswSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorValue;
  uint32 SelectorIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  <unnamed type> _5;
  short unsigned int _6;
  <unnamed type> _7;
  unsigned char _8;
  int _9;
  <unnamed type> _10;
  unsigned char _11;
  int _12;
  volatile struct Clock_Ip_CgmMuxType * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int TimeoutTicks.6_17;
  volatile struct Clock_Ip_CgmMuxType * _18;
  long unsigned int _19;
  long unsigned int _20;
  volatile struct Clock_Ip_CgmMuxType * _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  volatile struct Clock_Ip_CgmMuxType * _25;
  long unsigned int TimeoutTicks.7_26;
  volatile struct Clock_Ip_CgmMuxType * _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int TimeoutTicks.8_30;
  volatile struct Clock_Ip_CgmMuxType * _31;
  long unsigned int _32;
  long unsigned int _33;
  volatile struct Clock_Ip_CgmMuxType * _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  <unnamed type> _38;
  <unnamed type> _39;
  <unnamed type> _40;
  <unnamed type> _41;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_47(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_48 = (uint32) _2;
  # DEBUG Instance => Instance_48
  # DEBUG BEGIN_STMT
  _3 = Config_47(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex_49 = (uint32) _4;
  # DEBUG SelectorIndex => SelectorIndex_49
  # DEBUG BEGIN_STMT
  _5 = Config_47(D)->Value;
  _6 = Clock_Ip_au16SelectorEntryHardwareValue[_5];
  SelectorValue_50 = (uint32) _6;
  # DEBUG SelectorValue => SelectorValue_50
  # DEBUG BEGIN_STMT
  _7 = Config_47(D)->Name;
  _8 = Clock_Ip_au8ClockFeatures[_7][2];
  _9 = (int) _8;
  SelectorMask_51 = Clock_Ip_axFeatureExtensions[_9].SelectorValueMask;
  # DEBUG SelectorMask => SelectorMask_51
  # DEBUG BEGIN_STMT
  _10 = Config_47(D)->Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][2];
  _12 = (int) _11;
  SelectorShift_52 = Clock_Ip_axFeatureExtensions[_12].SelectorValueShift;
  # DEBUG SelectorShift => SelectorShift_52
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred_53 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_53
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _14 ={v} _13->CSS;
  _15 = SelectorMask_51 & _14;
  _16 = _15 >> SelectorShift_52;
  if (SelectorValue_50 != _16)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.6_17 = TimeoutTicks;
  TimeoutOccurred_56 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.6_17);
  # DEBUG TimeoutOccurred => TimeoutOccurred_56
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _19 ={v} _18->CSS;
  _20 = _19 & 65536;
  if (_20 == 65536)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (TimeoutOccurred_56 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_56 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _21 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  RegValue_58 ={v} _21->CSC;
  # DEBUG RegValue => RegValue_58
  # DEBUG BEGIN_STMT
  _22 = ~SelectorMask_51;
  RegValue_59 = RegValue_58 & _22;
  # DEBUG RegValue => RegValue_59
  # DEBUG BEGIN_STMT
  _23 = SelectorValue_50 << SelectorShift_52;
  _24 = SelectorMask_51 & _23;
  RegValue_60 = RegValue_59 | _24;
  # DEBUG RegValue => RegValue_60
  # DEBUG BEGIN_STMT
  RegValue_61 = RegValue_60 | 4;
  # DEBUG RegValue => RegValue_61
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _25->CSC ={v} RegValue_61;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.7_26 = TimeoutTicks;
  TimeoutOccurred_65 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.7_26);
  # DEBUG TimeoutOccurred => TimeoutOccurred_65
  # DEBUG BEGIN_STMT
  _27 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _28 ={v} _27->CSS;
  _29 = _28 & 4;
  if (_29 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  if (TimeoutOccurred_65 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_65 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.8_30 = TimeoutTicks;
  TimeoutOccurred_69 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.8_30);
  # DEBUG TimeoutOccurred => TimeoutOccurred_69
  # DEBUG BEGIN_STMT
  _31 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _32 ={v} _31->CSS;
  _33 = _32 & 65536;
  if (_33 == 65536)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  if (TimeoutOccurred_69 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_69 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _34 = Clock_Ip_apxCgm[Instance_48][SelectorIndex_49];
  _35 ={v} _34->CSS;
  _36 = _35 >> 17;
  _37 = _36 & 7;
  if (_37 != 1)
    goto <bb 16>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _38 = Config_47(D)->Name;
  Clock_Ip_ReportClockErrors (3, _38);
  goto <bb 20>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _39 = Config_47(D)->Name;
  Clock_Ip_ReportClockErrors (1, _39);
  goto <bb 20>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _40 = Config_47(D)->Name;
  Clock_Ip_ReportClockErrors (1, _40);
  goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _41 = Config_47(D)->Name;
  Clock_Ip_ReportClockErrors (1, _41);

  <bb 20> :
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Clock_Ip_ResetCgmXCscCssClkswSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorMask;
  uint32 SelectorIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  <unnamed type> _5;
  unsigned char _6;
  int _7;
  volatile struct Clock_Ip_CgmMuxType * _8;
  long unsigned int _9;
  volatile struct Clock_Ip_CgmMuxType * _10;
  long unsigned int _11;
  volatile struct Clock_Ip_CgmMuxType * _12;
  long unsigned int _13;
  long unsigned int _14;
  volatile struct Clock_Ip_CgmMuxType * _15;
  long unsigned int _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_18(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_19 = (uint32) _2;
  # DEBUG Instance => Instance_19
  # DEBUG BEGIN_STMT
  _3 = Config_18(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex_20 = (uint32) _4;
  # DEBUG SelectorIndex => SelectorIndex_20
  # DEBUG BEGIN_STMT
  _5 = Config_18(D)->Name;
  _6 = Clock_Ip_au8ClockFeatures[_5][2];
  _7 = (int) _6;
  SelectorMask_21 = Clock_Ip_axFeatureExtensions[_7].SelectorValueMask;
  # DEBUG SelectorMask => SelectorMask_21
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_apxCgm[Instance_19][SelectorIndex_20];
  _9 ={v} _8->CSC;
  _10 = Clock_Ip_apxCgm[Instance_19][SelectorIndex_20];
  _11 = _9 | 8;
  _10->CSC ={v} _11;
  # DEBUG BEGIN_STMT
  _12 = Clock_Ip_apxCgm[Instance_19][SelectorIndex_20];
  _13 ={v} _12->CSC;
  _14 = ~SelectorMask_21;
  _15 = Clock_Ip_apxCgm[Instance_19][SelectorIndex_20];
  _16 = _13 & _14;
  _15->CSC ={v} _16;
  return;

}


Clock_Ip_CallbackSelectorEmpty (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


