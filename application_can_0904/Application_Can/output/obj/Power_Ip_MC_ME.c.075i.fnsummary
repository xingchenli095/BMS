
Analyzing function: Power_Ip_MC_ME_ConfigurePartitionClock.part.0/16
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 4 2 3
;; 4 succs { 2 }
;; 2 succs { 3 }
;; 3 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_ConfigurePartitionClock.part.0

IPA function summary for Power_Ip_MC_ME_ConfigurePartitionClock.part.0/16 inlinable
  global time:     14.000000
  self size:       6
  global size:     0
  min size:       0
  self stack:      12
  global stack:    12
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_ReportPowerErrors/15 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op0 is compile time invariant
       op1 is compile time invariant


Analyzing function: Power_Ip_MC_ME_SocTriggerResetEvent/12
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 4 }
;; 3 succs { 6 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_SocTriggerResetEvent

IPA function summary for Power_Ip_MC_ME_SocTriggerResetEvent/12 inlinable
  global time:     16.340000
  self size:       12
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
    size:2.000000, time:0.340000,  executed if:(op0 == 1) && (op0 != 0)
    size:2.000000, time:1.000000,  executed if:(op0 == 0)
  calls:
    Power_Ip_MC_ME_TriggerModeUpdate/2 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10


Analyzing function: Power_Ip_MC_ME_DisablePartitionClock/11
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 3 4 5 6
;; 2 succs { 8 }
;; 3 succs { 4 7 }
;; 4 succs { 5 7 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 3 9 }
;; 9 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_DisablePartitionClock

IPA function summary for Power_Ip_MC_ME_DisablePartitionClock/11 inlinable
  global time:     30.706084
  self size:       19
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:13.500000, time:25.947200
    size:3.500000, time:3.500000,  executed if:(not inlined)
  calls:
    Power_Ip_MC_ME_ConfigurePartitionClock/6 function not considered for inlining
      loop depth: 1 freq:0.11 size: 2 time: 11


Analyzing function: Power_Ip_MC_ME_EnablePartitionClock/10
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 3 4 5 6
;; 2 succs { 8 }
;; 3 succs { 4 7 }
;; 4 succs { 5 7 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 3 9 }
;; 9 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_EnablePartitionClock

IPA function summary for Power_Ip_MC_ME_EnablePartitionClock/10 inlinable
  global time:     30.706084
  self size:       19
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:13.500000, time:25.947200
    size:3.500000, time:3.500000,  executed if:(not inlined)
  calls:
    Power_Ip_MC_ME_ConfigurePartitionClock/6 function not considered for inlining
      loop depth: 1 freq:0.11 size: 2 time: 11


Analyzing function: Power_Ip_MC_ME_ConfigCoreCOFBClock/9
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 16 4 5 6 7 15 8 9 10 11 12 13 14
;;
;; Loop 1
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 3 11 10 15 7 6 16 4 5 8 9
;;
;; Loop 3
;;  header 11, latch 10
;;  depth 2, outer 1
;;  nodes: 11 10 8 9
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 2, outer 1
;;  nodes: 7 6 4 5
;; 2 succs { 13 }
;; 3 succs { 16 12 }
;; 16 succs { 7 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 4 15 }
;; 15 succs { 11 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 }
;; 11 succs { 8 12 }
;; 12 succs { 13 }
;; 13 succs { 3 14 }
;; 14 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_ConfigCoreCOFBClock

IPA function summary for Power_Ip_MC_ME_ConfigCoreCOFBClock/9 inlinable
  global time:     110.455432
  self size:       34
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:24.500000, time:88.090279
    size:3.500000, time:3.500000,  executed if:(not inlined)
  calls:
    Power_Ip_MC_ME_ConfigureCore/8 function not considered for inlining
      loop depth: 2 freq:0.79 size: 3 time: 12
    Power_Ip_MC_ME_ConfigureCOFB/7 function not considered for inlining
      loop depth: 2 freq:0.79 size: 3 time: 12


Analyzing function: Power_Ip_MC_ME_ConfigureCore/8
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 4 5 6 17 7 8 9 10 11 12 16 13 14 15
;;
;; Loop 2
;;  header 11, latch 16
;;  depth 1, outer 0
;;  nodes: 11 16 12
;;
;; Loop 1
;;  header 5, latch 17
;;  depth 1, outer 0
;;  nodes: 5 17 6
;; 2 succs { 4 10 }
;; 4 succs { 5 }
;; 5 succs { 6 7 }
;; 6 succs { 17 7 }
;; 17 succs { 5 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 15 }
;; 10 succs { 11 }
;; 11 succs { 12 13 }
;; 12 succs { 16 13 }
;; 16 succs { 11 }
;; 13 succs { 14 15 }
;; 14 succs { 15 }
;; 15 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_ConfigureCore

IPA function summary for Power_Ip_MC_ME_ConfigureCore/8 inlinable
  global time:     301.571057
  self size:       61
  global size:     0
  min size:       0
  self stack:      12
  global stack:    12
    size:24.000000, time:99.531433
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:3.500000, time:3.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 8] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 8] changed)
  array index:(op0[ref offset: 8] changed || op1 changed)
  calls:
    Power_Ip_ReportPowerErrors/15 function body not available
      loop depth: 0 freq:0.25 size: 3 time: 12
       op0 is compile time invariant
       op1 is compile time invariant
    Power_Ip_TimeoutExpired/14 function body not available
      loop depth: 1 freq:7.01 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
    Power_Ip_StartTimeout/13 function body not available
      loop depth: 0 freq:0.75 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
       op2 is compile time invariant
       op3 is compile time invariant
    Power_Ip_MC_ME_TriggerCoreUpdate/5 function not considered for inlining
      loop depth: 0 freq:0.75 size: 3 time: 12
    Power_Ip_ReportPowerErrors/15 function body not available
      loop depth: 0 freq:0.16 size: 3 time: 12
       op0 is compile time invariant
       op1 is compile time invariant
    Power_Ip_TimeoutExpired/14 function body not available
      loop depth: 1 freq:4.67 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
    Power_Ip_StartTimeout/13 function body not available
      loop depth: 0 freq:0.50 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
       op2 is compile time invariant
       op3 is compile time invariant


Analyzing function: Power_Ip_MC_ME_ConfigureCOFB/7
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 8 5 6 7
;;
;; Loop 1
;;  header 3, latch 8
;;  depth 1, outer 0
;;  nodes: 3 8 4
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 8 5 }
;; 8 succs { 3 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_ConfigureCOFB

IPA function summary for Power_Ip_MC_ME_ConfigureCOFB/7 inlinable
  global time:     242.587249
  self size:       33
  global size:     0
  min size:       0
  self stack:      12
  global stack:    12
    size:12.000000, time:77.755550
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 8] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 8] changed)
  array index:(op0[ref offset: 8] changed || op1 changed)
  calls:
    Power_Ip_ReportPowerErrors/15 function body not available
      loop depth: 0 freq:0.33 size: 3 time: 12
       op0 is compile time invariant
       op1 is compile time invariant
    Power_Ip_TimeoutExpired/14 function body not available
      loop depth: 1 freq:9.35 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
    Power_Ip_StartTimeout/13 function body not available
      loop depth: 0 freq:1.00 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
       op2 is compile time invariant
       op3 is compile time invariant
    Power_Ip_MC_ME_TriggerCofbUpdate/4 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11


Analyzing function: Power_Ip_MC_ME_ConfigurePartitionClock/6
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 9 6 7 8
;;
;; Loop 1
;;  header 4, latch 9
;;  depth 1, outer 0
;;  nodes: 4 9 5
;; 2 succs { 3 8 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 9 6 }
;; 9 succs { 4 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_ConfigurePartitionClock

IPA function summary for Power_Ip_MC_ME_ConfigurePartitionClock/6 inlinable
  global time:     90.920825
  self size:       40
  global size:     0
  min size:       0
  self stack:      12
  global stack:    12
    size:16.000000, time:29.734164
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:1.500000, time:0.830000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:3.500000, time:3.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 16] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 16] changed)
  array index:(op0[ref offset: 16] changed)
  calls:
    Power_Ip_MC_ME_ConfigurePartitionClock.part.0/16 function not considered for inlining
      loop depth: 0 freq:0.11 size: 1 time: 10callee size: 3 stack:12
    Power_Ip_TimeoutExpired/14 function body not available
      loop depth: 1 freq:3.08 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
    Power_Ip_StartTimeout/13 function body not available
      loop depth: 0 freq:0.33 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
       op2 is compile time invariant
       op3 is compile time invariant
    Power_Ip_MC_ME_TriggerPartitionUpdate/3 function not considered for inlining
      loop depth: 0 freq:0.33 size: 3 time: 12
       op0 is compile time invariant


Analyzing function: Power_Ip_MC_ME_TriggerCoreUpdate/5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_TriggerCoreUpdate

IPA function summary for Power_Ip_MC_ME_TriggerCoreUpdate/5 inlinable
  global time:     17.000000
  self size:       9
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed || op1 changed)
  calls:
    Power_Ip_MC_ME_WriteControlKeys/1 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10


Analyzing function: Power_Ip_MC_ME_TriggerCofbUpdate/4
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_TriggerCofbUpdate

IPA function summary for Power_Ip_MC_ME_TriggerCofbUpdate/4 inlinable
  global time:     17.000000
  self size:       9
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    Power_Ip_MC_ME_WriteControlKeys/1 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10


Analyzing function: Power_Ip_MC_ME_TriggerPartitionUpdate/3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_TriggerPartitionUpdate

IPA function summary for Power_Ip_MC_ME_TriggerPartitionUpdate/3 inlinable
  global time:     16.000000
  self size:       8
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op1 changed)
  calls:
    Power_Ip_MC_ME_WriteControlKeys/1 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10


Analyzing function: Power_Ip_MC_ME_TriggerModeUpdate/2
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_TriggerModeUpdate

IPA function summary for Power_Ip_MC_ME_TriggerModeUpdate/2 inlinable
  global time:     14.000000
  self size:       6
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:2.000000, time:2.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_MC_ME_WriteControlKeys/1 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10


Analyzing function: Power_Ip_MC_ME_WriteControlKeys/1
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Analyzing function body size: Power_Ip_MC_ME_WriteControlKeys

IPA function summary for Power_Ip_MC_ME_WriteControlKeys/1 inlinable
  global time:     5.000000
  self size:       6
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

Symbol table:

Power_Ip_MC_ME_TriggerPartitionUpdate.constprop.0/17 (Power_Ip_MC_ME_TriggerPartitionUpdate.constprop) @07032700
  Type: function definition analyzed
  Visibility:
  References: Power_Ip_pxMC_ME/0 (read)
  Referring: 
  Clone of Power_Ip_MC_ME_TriggerPartitionUpdate/3
  Availability: local
  Function flags: count:1073741824 (estimated locally) local optimize_size
  Called by: Power_Ip_MC_ME_ConfigurePartitionClock/6 (114863532 (estimated locally),0.33 per call) 
  Calls: Power_Ip_MC_ME_WriteControlKeys/1 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_MC_ME_ConfigurePartitionClock.part.0/16 (Power_Ip_MC_ME_ConfigurePartitionClock.part.0) @070327e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: Power_Ip_MC_ME_ConfigurePartitionClock/6 (37904965 (estimated locally),0.11 per call) 
  Calls: Power_Ip_ReportPowerErrors/15 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_ReportPowerErrors/15 (Power_Ip_ReportPowerErrors) @06fa9c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_MC_ME_ConfigurePartitionClock.part.0/16 (1073741824 (estimated locally),1.00 per call) Power_Ip_MC_ME_ConfigureCore/8 (37904965 (estimated locally),0.25 per call) Power_Ip_MC_ME_ConfigureCore/8 (25269977 (estimated locally),0.16 per call) Power_Ip_MC_ME_ConfigureCOFB/7 (37904965 (estimated locally),0.33 per call) 
  Calls: 
Power_Ip_TimeoutExpired/14 (Power_Ip_TimeoutExpired) @06fa9b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_MC_ME_ConfigurePartitionClock/6 (1073741824 (estimated locally),3.08 per call) Power_Ip_MC_ME_ConfigureCore/8 (1073741824 (estimated locally),7.01 per call) Power_Ip_MC_ME_ConfigureCore/8 (715827885 (estimated locally),4.67 per call) Power_Ip_MC_ME_ConfigureCOFB/7 (1073741824 (estimated locally),9.35 per call) 
  Calls: 
Power_Ip_StartTimeout/13 (Power_Ip_StartTimeout) @06fa9a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_MC_ME_ConfigurePartitionClock/6 (114863532 (estimated locally),0.33 per call) Power_Ip_MC_ME_ConfigureCore/8 (114863532 (estimated locally),0.75 per call) Power_Ip_MC_ME_ConfigureCore/8 (76575688 (estimated locally),0.50 per call) Power_Ip_MC_ME_ConfigureCOFB/7 (114863532 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_MC_ME_SocTriggerResetEvent/12 (Power_Ip_MC_ME_SocTriggerResetEvent) @06fa97e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Power_Ip_pxMC_ME/0 (read)Power_Ip_pxMC_ME/0 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Power_Ip_MC_ME_TriggerModeUpdate/2 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_MC_ME_DisablePartitionClock/11 (Power_Ip_MC_ME_DisablePartitionClock) @06fa9460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:268435456 (estimated locally) body optimize_size
  Called by: 
  Calls: Power_Ip_MC_ME_ConfigurePartitionClock/6 (30720827 (estimated locally),0.11 per call) 
Power_Ip_MC_ME_EnablePartitionClock/10 (Power_Ip_MC_ME_EnablePartitionClock) @06fa92a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:268435456 (estimated locally) body optimize_size
  Called by: 
  Calls: Power_Ip_MC_ME_ConfigurePartitionClock/6 (30720827 (estimated locally),0.11 per call) 
Power_Ip_MC_ME_ConfigCoreCOFBClock/9 (Power_Ip_MC_ME_ConfigCoreCOFBClock) @06fa90e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:246065830 (estimated locally) body optimize_size
  Called by: 
  Calls: Power_Ip_MC_ME_ConfigureCore/8 (193419557 (estimated locally),0.79 per call) Power_Ip_MC_ME_ConfigureCOFB/7 (193419556 (estimated locally),0.79 per call) 
Power_Ip_MC_ME_ConfigureCore/8 (Power_Ip_MC_ME_ConfigureCore) @06f8cee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Power_Ip_pxMC_ME/0 (read)Power_Ip_pxMC_ME/0 (read)Power_Ip_pxMC_ME/0 (read)
  Referring: 
  Availability: local
  Function flags: count:153151376 (estimated locally) body local optimize_size
  Called by: Power_Ip_MC_ME_ConfigCoreCOFBClock/9 (193419557 (estimated locally),0.79 per call) 
  Calls: Power_Ip_ReportPowerErrors/15 (37904965 (estimated locally),0.25 per call) Power_Ip_TimeoutExpired/14 (1073741824 (estimated locally),7.01 per call) Power_Ip_StartTimeout/13 (114863532 (estimated locally),0.75 per call) Power_Ip_MC_ME_TriggerCoreUpdate/5 (114863532 (estimated locally),0.75 per call) Power_Ip_ReportPowerErrors/15 (25269977 (estimated locally),0.16 per call) Power_Ip_TimeoutExpired/14 (715827885 (estimated locally),4.67 per call) Power_Ip_StartTimeout/13 (76575688 (estimated locally),0.50 per call) 
Power_Ip_MC_ME_ConfigureCOFB/7 (Power_Ip_MC_ME_ConfigureCOFB) @06f8cd20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Power_Ip_pxMC_ME/0 (read)Power_Ip_pxMC_ME/0 (read)
  Referring: 
  Availability: local
  Function flags: count:114863532 (estimated locally) body local optimize_size
  Called by: Power_Ip_MC_ME_ConfigCoreCOFBClock/9 (193419556 (estimated locally),0.79 per call) 
  Calls: Power_Ip_ReportPowerErrors/15 (37904965 (estimated locally),0.33 per call) Power_Ip_TimeoutExpired/14 (1073741824 (estimated locally),9.35 per call) Power_Ip_StartTimeout/13 (114863532 (estimated locally),1.00 per call) Power_Ip_MC_ME_TriggerCofbUpdate/4 (114863532 (estimated locally),1.00 per call) 
Power_Ip_MC_ME_ConfigurePartitionClock/6 (Power_Ip_MC_ME_ConfigurePartitionClock) @06f8cb60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Power_Ip_pxMC_ME/0 (read)Power_Ip_pxMC_ME/0 (read)
  Referring: 
  Availability: local
  Function flags: count:348071309 (estimated locally) body local optimize_size
  Called by: Power_Ip_MC_ME_DisablePartitionClock/11 (30720827 (estimated locally),0.11 per call) Power_Ip_MC_ME_EnablePartitionClock/10 (30720827 (estimated locally),0.11 per call) 
  Calls: Power_Ip_MC_ME_ConfigurePartitionClock.part.0/16 (37904965 (estimated locally),0.11 per call) Power_Ip_TimeoutExpired/14 (1073741824 (estimated locally),3.08 per call) Power_Ip_StartTimeout/13 (114863532 (estimated locally),0.33 per call) Power_Ip_MC_ME_TriggerPartitionUpdate.constprop/17 (114863532 (estimated locally),0.33 per call) 
Power_Ip_MC_ME_TriggerCoreUpdate/5 (Power_Ip_MC_ME_TriggerCoreUpdate) @06f8c9a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Power_Ip_pxMC_ME/0 (read)
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: Power_Ip_MC_ME_ConfigureCore/8 (114863532 (estimated locally),0.75 per call) 
  Calls: Power_Ip_MC_ME_WriteControlKeys/1 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_MC_ME_TriggerCofbUpdate/4 (Power_Ip_MC_ME_TriggerCofbUpdate) @06f8c7e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Power_Ip_pxMC_ME/0 (read)
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: Power_Ip_MC_ME_ConfigureCOFB/7 (114863532 (estimated locally),1.00 per call) 
  Calls: Power_Ip_MC_ME_WriteControlKeys/1 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_MC_ME_TriggerPartitionUpdate/3 (Power_Ip_MC_ME_TriggerPartitionUpdate) @06f8c620
  Type: function
  Body removed by symtab_remove_unreachable_nodes
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: not_available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Power_Ip_MC_ME_TriggerModeUpdate/2 (Power_Ip_MC_ME_TriggerModeUpdate) @06f8c460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Power_Ip_pxMC_ME/0 (read)
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: Power_Ip_MC_ME_SocTriggerResetEvent/12 (1073741824 (estimated locally),1.00 per call) 
  Calls: Power_Ip_MC_ME_WriteControlKeys/1 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_MC_ME_WriteControlKeys/1 (Power_Ip_MC_ME_WriteControlKeys) @06f8c1c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Power_Ip_pxMC_ME/0 (read)
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: Power_Ip_MC_ME_TriggerPartitionUpdate.constprop/17 (1073741824 (estimated locally),1.00 per call) Power_Ip_MC_ME_TriggerCoreUpdate/5 (1073741824 (estimated locally),1.00 per call) Power_Ip_MC_ME_TriggerCofbUpdate/4 (1073741824 (estimated locally),1.00 per call) Power_Ip_MC_ME_TriggerModeUpdate/2 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_pxMC_ME/0 (Power_Ip_pxMC_ME) @06f49cf0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Power_Ip_MC_ME_ConfigurePartitionClock/6 (read)Power_Ip_MC_ME_TriggerCofbUpdate/4 (read)Power_Ip_MC_ME_ConfigureCore/8 (read)Power_Ip_MC_ME_TriggerModeUpdate/2 (read)Power_Ip_MC_ME_ConfigureCore/8 (read)Power_Ip_MC_ME_ConfigurePartitionClock/6 (read)Power_Ip_MC_ME_ConfigureCore/8 (read)Power_Ip_MC_ME_ConfigureCOFB/7 (read)Power_Ip_MC_ME_TriggerCoreUpdate/5 (read)Power_Ip_MC_ME_WriteControlKeys/1 (read)Power_Ip_MC_ME_TriggerPartitionUpdate.constprop.0/17 (read)Power_Ip_MC_ME_ConfigureCOFB/7 (read)Power_Ip_MC_ME_SocTriggerResetEvent/12 (read)Power_Ip_MC_ME_SocTriggerResetEvent/12 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Power_Ip_MC_ME_ConfigurePartitionClock.part.0 ()
{
  uint32 TempValue;
  uint32 PartitionConfig;
  uint32 PartitionTriggerMask;
  uint32 PartitionStatus;
  uint32 StartTime;
  uint32 ElapsedTime;
  uint32 TimeoutTicks;
  boolean TimeoutOccurred;
  uint8 PartitionIndex;
  const struct Power_Ip_MC_ME_PartitionConfigType * PartitionConfigPtr;

  <bb 4> [local count: 1073741824]:
  # DEBUG D#3 s=> PartitionConfigPtr
  # DEBUG PartitionConfigPtr => D#3

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Power_Ip_ReportPowerErrors (0, 255);

  <bb 3> [local count: 1073741824]:
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Power_Ip_MC_ME_SocTriggerResetEvent (Power_Ip_PowerModeType PowerMode)
{
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.21_1;
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.22_2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (PowerMode_4(D) == 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.21_1 = Power_Ip_pxMC_ME;
  Power_Ip_pxMC_ME.21_1->MODE_CONF ={v} 1;
  goto <bb 6>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (PowerMode_4(D) == 1)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 182536110]:
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.22_2 = Power_Ip_pxMC_ME;
  Power_Ip_pxMC_ME.22_2->MODE_CONF ={v} 2;

  <bb 6> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_TriggerModeUpdate ();
  return;

}


Power_Ip_MC_ME_DisablePartitionClock (const struct Power_Ip_MC_ME_ModeConfigType * ModeConfigPtr)
{
  uint8 PartitionIndex;
  const struct Power_Ip_MC_ME_PartitionConfigType * TempPartitionConfig;
  const struct Power_Ip_MC_ME_PartitionConfigType[3] * _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  # DEBUG TempPartitionConfig => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG PartitionIndex => 0
  goto <bb 8>; [100.00%]

  <bb 3> [local count: 805306369]:
  # DEBUG BEGIN_STMT
  _1 = ModeConfigPtr_11(D)->ArrayPartitionConfigPtr;
  _2 = (int) PartitionIndex_7;
  TempPartitionConfig_12 = &*_1[_2];
  # DEBUG TempPartitionConfig => TempPartitionConfig_12
  # DEBUG BEGIN_STMT
  _3 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].PartitionUnderMcuControl;
  if (_3 == 1)
    goto <bb 4>; [34.00%]
  else
    goto <bb 7>; [66.00%]

  <bb 4> [local count: 273804165]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].PartitionPowerUnderMcuControl;
  if (_4 == 1)
    goto <bb 5>; [34.00%]
  else
    goto <bb 7>; [66.00%]

  <bb 5> [local count: 93093416]:
  # DEBUG BEGIN_STMT
  _5 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].PartitionPconfRegValue;
  _6 = _5 & 1;
  if (_6 == 0)
    goto <bb 6>; [33.00%]
  else
    goto <bb 7>; [67.00%]

  <bb 6> [local count: 30720827]:
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_ConfigurePartitionClock (TempPartitionConfig_12);

  <bb 7> [local count: 805306369]:
  # DEBUG BEGIN_STMT
  PartitionIndex_14 = PartitionIndex_7 + 1;
  # DEBUG PartitionIndex => PartitionIndex_14

  <bb 8> [local count: 1073741824]:
  # PartitionIndex_7 = PHI <0(2), PartitionIndex_14(7)>
  # DEBUG PartitionIndex => PartitionIndex_7
  # DEBUG BEGIN_STMT
  if (PartitionIndex_7 != 3)
    goto <bb 3>; [75.00%]
  else
    goto <bb 9>; [25.00%]

  <bb 9> [local count: 268435456]:
  return;

}


Power_Ip_MC_ME_EnablePartitionClock (const struct Power_Ip_MC_ME_ModeConfigType * ModeConfigPtr)
{
  uint8 PartitionIndex;
  const struct Power_Ip_MC_ME_PartitionConfigType * TempPartitionConfig;
  const struct Power_Ip_MC_ME_PartitionConfigType[3] * _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  # DEBUG TempPartitionConfig => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG PartitionIndex => 0
  goto <bb 8>; [100.00%]

  <bb 3> [local count: 805306369]:
  # DEBUG BEGIN_STMT
  _1 = ModeConfigPtr_11(D)->ArrayPartitionConfigPtr;
  _2 = (int) PartitionIndex_7;
  TempPartitionConfig_12 = &*_1[_2];
  # DEBUG TempPartitionConfig => TempPartitionConfig_12
  # DEBUG BEGIN_STMT
  _3 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].PartitionUnderMcuControl;
  if (_3 == 1)
    goto <bb 4>; [34.00%]
  else
    goto <bb 7>; [66.00%]

  <bb 4> [local count: 273804165]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].PartitionPowerUnderMcuControl;
  if (_4 == 1)
    goto <bb 5>; [34.00%]
  else
    goto <bb 7>; [66.00%]

  <bb 5> [local count: 93093416]:
  # DEBUG BEGIN_STMT
  _5 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].PartitionPconfRegValue;
  _6 = _5 & 1;
  if (_6 != 0)
    goto <bb 6>; [33.00%]
  else
    goto <bb 7>; [67.00%]

  <bb 6> [local count: 30720827]:
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_ConfigurePartitionClock (TempPartitionConfig_12);

  <bb 7> [local count: 805306369]:
  # DEBUG BEGIN_STMT
  PartitionIndex_14 = PartitionIndex_7 + 1;
  # DEBUG PartitionIndex => PartitionIndex_14

  <bb 8> [local count: 1073741824]:
  # PartitionIndex_7 = PHI <0(2), PartitionIndex_14(7)>
  # DEBUG PartitionIndex => PartitionIndex_7
  # DEBUG BEGIN_STMT
  if (PartitionIndex_7 != 3)
    goto <bb 3>; [75.00%]
  else
    goto <bb 9>; [25.00%]

  <bb 9> [local count: 268435456]:
  return;

}


Power_Ip_MC_ME_ConfigCoreCOFBClock (const struct Power_Ip_MC_ME_ModeConfigType * ModeConfigPtr)
{
  uint8 CoreIndex;
  uint8 CofbIndex;
  uint8 PartitionIndex;
  const struct Power_Ip_MC_ME_PartitionConfigType[3] * _1;
  int _2;
  unsigned char _3;
  const struct Power_Ip_MC_ME_CofbConfigType[<unknown>] * _4;
  int _5;
  unsigned char _6;
  const struct Power_Ip_MC_ME_CofbConfigType * _7;
  unsigned char _8;
  unsigned char _9;
  const struct Power_Ip_MC_ME_CoreConfigType[<unknown>] * _10;
  int _11;
  unsigned char _12;
  const struct Power_Ip_MC_ME_CoreConfigType * _13;
  unsigned char _14;
  unsigned char _15;

  <bb 2> [local count: 246065830]:
  # DEBUG BEGIN_STMT
  # DEBUG TempPartitionConfig => 0B
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG PartitionIndex => 0
  goto <bb 13>; [100.00%]

  <bb 3> [local count: 738197497]:
  # DEBUG BEGIN_STMT
  _1 = ModeConfigPtr_26(D)->ArrayPartitionConfigPtr;
  _2 = (int) PartitionIndex_16;
  # DEBUG D#4 => &*_1[_2]
  # DEBUG TempPartitionConfig => D#4
  # DEBUG BEGIN_STMT
  _3 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].PartitionUnderMcuControl;
  if (_3 == 1)
    goto <bb 16>; [16.00%]
  else
    goto <bb 12>; [84.00%]

  <bb 16> [local count: 118111599]:
  goto <bb 7>; [100.00%]

  <bb 4> [local count: 955630219]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].ArrayPartitionCofbConfigPtr;
  _5 = (int) CofbIndex_17;
  _6 = *_4[_5].CofbUnderMcuControl;
  if (_6 == 1)
    goto <bb 5>; [20.24%]
  else
    goto <bb 6>; [79.76%]

  <bb 5> [local count: 193419556]:
  # DEBUG BEGIN_STMT
  _7 = &*_4[_5];
  _8 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].PartitionIndex;
  Power_Ip_MC_ME_ConfigureCOFB (_7, _8);

  <bb 6> [local count: 955630219]:
  # DEBUG BEGIN_STMT
  CofbIndex_30 = CofbIndex_17 + 1;
  # DEBUG CofbIndex => CofbIndex_30

  <bb 7> [local count: 1073741819]:
  # CofbIndex_17 = PHI <CofbIndex_30(6), 0(16)>
  # DEBUG CofbIndex => CofbIndex_17
  # DEBUG BEGIN_STMT
  _9 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].NumberOfCofbs;
  if (_9 > CofbIndex_17)
    goto <bb 4>; [89.00%]
  else
    goto <bb 15>; [11.00%]

  <bb 15> [local count: 118111600]:
  goto <bb 11>; [100.00%]

  <bb 8> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  _10 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].ArrayPartitionCoreConfigPtr;
  _11 = (int) CoreIndex_18;
  _12 = *_10[_11].CoreUnderMcuControl;
  if (_12 == 1)
    goto <bb 9>; [20.24%]
  else
    goto <bb 10>; [79.76%]

  <bb 9> [local count: 193419557]:
  # DEBUG BEGIN_STMT
  _13 = &*_10[_11];
  _14 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].PartitionIndex;
  Power_Ip_MC_ME_ConfigureCore (_13, _14);

  <bb 10> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  CoreIndex_28 = CoreIndex_18 + 1;
  # DEBUG CoreIndex => CoreIndex_28

  <bb 11> [local count: 1073741824]:
  # CoreIndex_18 = PHI <CoreIndex_28(10), 0(15)>
  # DEBUG CoreIndex => CoreIndex_18
  # DEBUG BEGIN_STMT
  _15 = MEM[(const struct Power_Ip_MC_ME_PartitionConfigType *)_1][_2].NumberOfCores;
  if (_15 > CoreIndex_18)
    goto <bb 8>; [89.00%]
  else
    goto <bb 12>; [11.00%]

  <bb 12> [local count: 738197498]:
  # DEBUG BEGIN_STMT
  PartitionIndex_31 = PartitionIndex_16 + 1;
  # DEBUG PartitionIndex => PartitionIndex_31

  <bb 13> [local count: 984263329]:
  # PartitionIndex_16 = PHI <0(2), PartitionIndex_31(12)>
  # DEBUG PartitionIndex => PartitionIndex_16
  # DEBUG BEGIN_STMT
  if (PartitionIndex_16 != 3)
    goto <bb 3>; [75.00%]
  else
    goto <bb 14>; [25.00%]

  <bb 14> [local count: 246065832]:
  return;

}


Power_Ip_MC_ME_ConfigureCore (const struct Power_Ip_MC_ME_CoreConfigType * CoreConfigPtr, uint8 PartitionIndex)
{
  uint8 CoreIndex;
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  uint32 CoreStatus;
  uint32 CoreConfig;
  long unsigned int _2;
  long unsigned int TimeoutTicks.7_3;
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.8_4;
  int _5;
  int _6;
  signed int CoreStatus.9_7;
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.10_8;
  int _9;
  int _10;
  long unsigned int TimeoutTicks.11_11;
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.12_12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> [local count: 153151376]:
  # DEBUG BEGIN_STMT
  CoreConfig_21 = CoreConfigPtr_20(D)->CorePconfRegValue;
  # DEBUG CoreConfig => CoreConfig_21
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG TimeoutOccurred => 0
  # DEBUG BEGIN_STMT
  CoreIndex_23 = CoreConfigPtr_20(D)->CoreIndex;
  # DEBUG CoreIndex => CoreIndex_23
  # DEBUG BEGIN_STMT
  _2 = CoreConfig_21 & 1;
  if (_2 == 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 4> [local count: 76575688]:
  # DEBUG BEGIN_STMT
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 5> [local count: 715827885]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.7_3 = TimeoutTicks;
  TimeoutOccurred_26 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.7_3);
  # DEBUG TimeoutOccurred => TimeoutOccurred_26
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.8_4 = Power_Ip_pxMC_ME;
  _5 = (int) PartitionIndex_27(D);
  _6 = (int) CoreIndex_23;
  CoreStatus_28 ={v} Power_Ip_pxMC_ME.8_4->McMePrtnArray[_5].McMePrtnCoreArray[_6].PRTN_CORE_STAT;
  # DEBUG CoreStatus => CoreStatus_28
  # DEBUG BEGIN_STMT
  CoreStatus.9_7 = (signed int) CoreStatus_28;
  if (CoreStatus.9_7 >= 0)
    goto <bb 6>; [94.50%]
  else
    goto <bb 7>; [5.50%]

  <bb 6> [local count: 676457351]:
  if (TimeoutOccurred_26 == 0)
    goto <bb 17>; [94.50%]
  else
    goto <bb 7>; [5.50%]

  <bb 17> [local count: 639252197]:
  goto <bb 5>; [100.00%]

  <bb 7> [local count: 76575688]:
  # TimeoutOccurred_1 = PHI <TimeoutOccurred_26(5), TimeoutOccurred_26(6)>
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_1 != 0)
    goto <bb 8>; [33.00%]
  else
    goto <bb 9>; [67.00%]

  <bb 8> [local count: 25269977]:
  # DEBUG BEGIN_STMT
  Power_Ip_ReportPowerErrors (0, 255);

  <bb 9> [local count: 76575688]:
  # DEBUG TimeoutOccurred => TimeoutOccurred_1
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_1 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 10> [local count: 114863532]:
  # DEBUG TimeoutOccurred => NULL
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.10_8 = Power_Ip_pxMC_ME;
  _9 = (int) PartitionIndex_27(D);
  _10 = (int) CoreIndex_23;
  Power_Ip_pxMC_ME.10_8->McMePrtnArray[_9].McMePrtnCoreArray[_10].PRTN_CORE_PCONF ={v} CoreConfig_21;
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_TriggerCoreUpdate (PartitionIndex_27(D), CoreIndex_23);
  # DEBUG BEGIN_STMT
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 11> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.11_11 = TimeoutTicks;
  TimeoutOccurred_34 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.11_11);
  # DEBUG TimeoutOccurred => TimeoutOccurred_34
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.12_12 = Power_Ip_pxMC_ME;
  CoreStatus_35 ={v} Power_Ip_pxMC_ME.12_12->McMePrtnArray[_9].McMePrtnCoreArray[_10].PRTN_CORE_STAT;
  # DEBUG CoreStatus => CoreStatus_35
  # DEBUG BEGIN_STMT
  _13 = CoreConfig_21 ^ CoreStatus_35;
  _14 = _13 & 1;
  if (_14 != 0)
    goto <bb 12>; [94.50%]
  else
    goto <bb 13>; [5.50%]

  <bb 12> [local count: 1014686023]:
  if (TimeoutOccurred_34 == 0)
    goto <bb 16>; [94.50%]
  else
    goto <bb 13>; [5.50%]

  <bb 16> [local count: 958878292]:
  goto <bb 11>; [100.00%]

  <bb 13> [local count: 114863532]:
  # TimeoutOccurred_22 = PHI <TimeoutOccurred_34(11), TimeoutOccurred_34(12)>
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_22 != 0)
    goto <bb 14>; [33.00%]
  else
    goto <bb 15>; [67.00%]

  <bb 14> [local count: 37904965]:
  # DEBUG BEGIN_STMT
  Power_Ip_ReportPowerErrors (0, 255);

  <bb 15> [local count: 153151376]:
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Power_Ip_MC_ME_ConfigureCOFB (const struct Power_Ip_MC_ME_CofbConfigType * CofbConfigPtr, uint8 PartitionIndex)
{
  uint8 CofbIndex;
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  uint32 PeripheralsStatus;
  uint32 PeripheralsToUpdate;
  uint32 PeripheralsConfig;
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.0_1;
  int _2;
  int _3;
  long unsigned int TimeoutTicks.1_4;
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.2_5;
  long unsigned int _7;

  <bb 2> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  PeripheralsConfig_12 = CofbConfigPtr_11(D)->CofbClkenRegValue;
  # DEBUG PeripheralsConfig => PeripheralsConfig_12
  # DEBUG BEGIN_STMT
  PeripheralsToUpdate_13 = CofbConfigPtr_11(D)->CofbBlocksToUpdateMask;
  # DEBUG PeripheralsToUpdate => PeripheralsToUpdate_13
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG TimeoutOccurred => 0
  # DEBUG BEGIN_STMT
  CofbIndex_14 = CofbConfigPtr_11(D)->CofbIndex;
  # DEBUG CofbIndex => CofbIndex_14
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.0_1 = Power_Ip_pxMC_ME;
  _2 = (int) PartitionIndex_15(D);
  _3 = (int) CofbIndex_14;
  Power_Ip_pxMC_ME.0_1->McMePrtnArray[_2].PRTN_COFB_CLKEN[_3] ={v} PeripheralsConfig_12;
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_TriggerCofbUpdate (PartitionIndex_15(D));
  # DEBUG BEGIN_STMT
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.1_4 = TimeoutTicks;
  TimeoutOccurred_20 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_4);
  # DEBUG TimeoutOccurred => TimeoutOccurred_20
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.2_5 = Power_Ip_pxMC_ME;
  PeripheralsStatus_21 ={v} Power_Ip_pxMC_ME.2_5->McMePrtnArray[_2].PRTN_COFB_STAT[_3];
  # DEBUG PeripheralsStatus => PeripheralsStatus_21
  # DEBUG BEGIN_STMT
  _7 = PeripheralsToUpdate_13 & PeripheralsStatus_21;
  if (_7 != PeripheralsConfig_12)
    goto <bb 4>; [94.50%]
  else
    goto <bb 5>; [5.50%]

  <bb 4> [local count: 1014686025]:
  if (TimeoutOccurred_20 == 0)
    goto <bb 8>; [94.50%]
  else
    goto <bb 5>; [5.50%]

  <bb 8> [local count: 958878293]:
  goto <bb 3>; [100.00%]

  <bb 5> [local count: 114863532]:
  # TimeoutOccurred_6 = PHI <TimeoutOccurred_20(3), TimeoutOccurred_20(4)>
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_6 != 0)
    goto <bb 6>; [33.00%]
  else
    goto <bb 7>; [67.00%]

  <bb 6> [local count: 37904965]:
  # DEBUG BEGIN_STMT
  Power_Ip_ReportPowerErrors (0, 255);

  <bb 7> [local count: 114863532]:
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Power_Ip_MC_ME_ConfigurePartitionClock (const struct Power_Ip_MC_ME_PartitionConfigType * PartitionConfigPtr)
{
  uint8 PartitionIndex;
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  uint32 PartitionStatus;
  uint32 PartitionTriggerMask;
  uint32 PartitionConfig;
  uint32 TempValue;
  long unsigned int _1;
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.15_2;
  int _3;
  long unsigned int _4;
  long unsigned int TimeoutTicks.17_7;
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.18_8;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 348071309]:
  # DEBUG BEGIN_STMT
  # DEBUG TempValue => 0
  # DEBUG BEGIN_STMT
  PartitionConfig_15 = PartitionConfigPtr_14(D)->PartitionPconfRegValue;
  # DEBUG PartitionConfig => PartitionConfig_15
  # DEBUG BEGIN_STMT
  PartitionTriggerMask_16 = PartitionConfigPtr_14(D)->PartitionTriggerMask;
  # DEBUG PartitionTriggerMask => PartitionTriggerMask_16
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG TimeoutOccurred => 0
  # DEBUG BEGIN_STMT
  PartitionIndex_17 = PartitionConfigPtr_14(D)->PartitionIndex;
  # DEBUG PartitionIndex => PartitionIndex_17
  # DEBUG BEGIN_STMT
  _1 = PartitionTriggerMask_16 & 1;
  if (_1 != 0)
    goto <bb 3>; [33.00%]
  else
    goto <bb 8>; [67.00%]

  <bb 3> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.15_2 = Power_Ip_pxMC_ME;
  _3 = (int) PartitionIndex_17;
  TempValue_18 ={v} Power_Ip_pxMC_ME.15_2->McMePrtnArray[_3].PRTN_PCONF;
  # DEBUG TempValue => TempValue_18
  # DEBUG BEGIN_STMT
  TempValue_19 = TempValue_18 & 4294967294;
  # DEBUG TempValue => TempValue_19
  # DEBUG BEGIN_STMT
  _4 = PartitionConfig_15 & 1;
  TempValue_20 = _4 | TempValue_19;
  # DEBUG TempValue => TempValue_20
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.15_2->McMePrtnArray[_3].PRTN_PCONF ={v} TempValue_20;
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_TriggerPartitionUpdate (1, PartitionIndex_17);
  # DEBUG BEGIN_STMT
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.17_7 = TimeoutTicks;
  TimeoutOccurred_25 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.17_7);
  # DEBUG TimeoutOccurred => TimeoutOccurred_25
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.18_8 = Power_Ip_pxMC_ME;
  PartitionStatus_26 ={v} Power_Ip_pxMC_ME.18_8->McMePrtnArray[_3].PRTN_STAT;
  # DEBUG PartitionStatus => PartitionStatus_26
  # DEBUG BEGIN_STMT
  _10 = PartitionConfig_15 ^ PartitionStatus_26;
  _11 = _10 & 1;
  if (_11 != 0)
    goto <bb 5>; [94.50%]
  else
    goto <bb 6>; [5.50%]

  <bb 5> [local count: 1014686025]:
  if (TimeoutOccurred_25 == 0)
    goto <bb 9>; [94.50%]
  else
    goto <bb 6>; [5.50%]

  <bb 9> [local count: 958878294]:
  goto <bb 4>; [100.00%]

  <bb 6> [local count: 114863532]:
  # TimeoutOccurred_5 = PHI <TimeoutOccurred_25(4), TimeoutOccurred_25(5)>
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_5 != 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 8>; [67.00%]

  <bb 7> [local count: 37904965]:
  # DEBUG D#2 => PartitionConfigPtr_14(D)
  Power_Ip_MC_ME_ConfigurePartitionClock.part.0 ();

  <bb 8> [local count: 348071309]:
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Power_Ip_MC_ME_TriggerCoreUpdate (uint8 PartitionIndex, uint8 CoreIndex)
{
  uint32 TempValue;
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.13_1;
  int _2;
  int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG TempValue => 0
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.13_1 = Power_Ip_pxMC_ME;
  _2 = (int) PartitionIndex_5(D);
  _3 = (int) CoreIndex_6(D);
  TempValue_7 ={v} Power_Ip_pxMC_ME.13_1->McMePrtnArray[_2].McMePrtnCoreArray[_3].PRTN_CORE_PUPD;
  # DEBUG TempValue => TempValue_7
  # DEBUG BEGIN_STMT
  TempValue_8 = TempValue_7 & 4294967294;
  # DEBUG TempValue => TempValue_8
  # DEBUG BEGIN_STMT
  TempValue_9 = TempValue_8 | 1;
  # DEBUG TempValue => TempValue_9
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.13_1->McMePrtnArray[_2].McMePrtnCoreArray[_3].PRTN_CORE_PUPD ={v} TempValue_9;
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_WriteControlKeys ();
  return;

}


Power_Ip_MC_ME_TriggerCofbUpdate (uint8 PartitionIndex)
{
  uint32 TempValue;
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.3_1;
  int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG TempValue => 0
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.3_1 = Power_Ip_pxMC_ME;
  _2 = (int) PartitionIndex_4(D);
  TempValue_5 ={v} Power_Ip_pxMC_ME.3_1->McMePrtnArray[_2].PRTN_PUPD;
  # DEBUG TempValue => TempValue_5
  # DEBUG BEGIN_STMT
  TempValue_6 = TempValue_5 & 4294967294;
  # DEBUG TempValue => TempValue_6
  # DEBUG BEGIN_STMT
  TempValue_7 = TempValue_6 | 1;
  # DEBUG TempValue => TempValue_7
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.3_1->McMePrtnArray[_2].PRTN_PUPD ={v} TempValue_7;
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_WriteControlKeys ();
  return;

}


Power_Ip_MC_ME_TriggerModeUpdate ()
{
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.23_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.23_1 = Power_Ip_pxMC_ME;
  Power_Ip_pxMC_ME.23_1->MODE_UPD ={v} 1;
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_WriteControlKeys ();
  return;

}


Power_Ip_MC_ME_WriteControlKeys ()
{
  struct Power_Ip_MC_ME_Type * Power_Ip_pxMC_ME.5_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.5_1 = Power_Ip_pxMC_ME;
  Power_Ip_pxMC_ME.5_1->CTL_KEY ={v} 23280;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_ME.5_1->CTL_KEY ={v} 42255;
  return;

}


