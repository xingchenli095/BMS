
Marking local functions:


Marking externally visible functions: OS_PreemptTaskExecTiming


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_ExceedExecTime/4 (OS_ExceedExecTime) @06ce8e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_PreemptTaskExecTiming/0 
  Calls: 
OS_GetTimeUsed/3 (OS_GetTimeUsed) @06ce8c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_PreemptTaskExecTiming/0 
  Calls: 
OS_executionTimer/2 (OS_executionTimer) @06cc8900
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_PreemptTaskExecTiming/0 (read)OS_PreemptTaskExecTiming/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_kernelData/1 (OS_kernelData) @06cc88b8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_PreemptTaskExecTiming/0 (addr)OS_PreemptTaskExecTiming/0 (read)OS_PreemptTaskExecTiming/0 (write)OS_PreemptTaskExecTiming/0 (read)OS_PreemptTaskExecTiming/0 (read)OS_PreemptTaskExecTiming/0 (read)OS_PreemptTaskExecTiming/0 (read)OS_PreemptTaskExecTiming/0 (read)OS_PreemptTaskExecTiming/0 (read)OS_PreemptTaskExecTiming/0 (read)
  Availability: not_available
  Varpool flags:
OS_PreemptTaskExecTiming/0 (OS_PreemptTaskExecTiming) @06ce8a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_kernelData/1 (addr)OS_executionTimer/2 (read)OS_executionTimer/2 (read)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_ExceedExecTime/4 OS_GetTimeUsed/3 
   Indirect call
__attribute__((target ("general-regs-only")))
OS_PreemptTaskExecTiming (const struct os_task_t * tp)
{
  os_tick_t used;
  struct os_taskaccounting_t * acc;
  struct os_kerneldata_t * const kernel_data;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  acc = tp->accounting;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (acc != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = OS_executionTimer[0];
  _2 = _1->driver;
  _3 = _2->hwtStop;
  _4 = OS_executionTimer[0];
  _3 (_4);
  # DEBUG BEGIN_STMT
  used = OS_GetTimeUsed ();
  # DEBUG BEGIN_STMT
  _5 = OS_kernelData.accounting.etUsed;
  _6 = used + _5;
  OS_kernelData.accounting.etUsed = _6;
  # DEBUG BEGIN_STMT
  _7 = OS_kernelData.accounting.etUsed;
  acc->etUsed = _7;
  # DEBUG BEGIN_STMT
  _8 = OS_kernelData.accounting.etType;
  acc->etType = _8;
  # DEBUG BEGIN_STMT
  _9 = tp->flags;
  _10 = (unsigned int) _9;
  _11 = _10 & 64;
  if (_11 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _12 = OS_kernelData.accounting.etUsed;
  _13 = acc->etMax;
  if (_12 > _13)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _14 = OS_kernelData.accounting.etUsed;
  acc->etMax = _14;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _15 = OS_kernelData.accounting.etLimit;
  if (_15 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _16 = OS_kernelData.accounting.etUsed;
  _17 = OS_kernelData.accounting.etLimit;
  if (_16 >= _17)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  OS_ExceedExecTime ();

  <bb 9> :
  return;

}


