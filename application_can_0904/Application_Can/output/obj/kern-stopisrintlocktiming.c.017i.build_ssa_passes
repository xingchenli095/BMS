__attribute__((target ("general-regs-only")))
OS_StopIsrIntLockTiming (os_isrid_t i, os_intlocktype_t locktype)
{
  os_tick_t OS_hwtStartDelta;
  os_tick_t used;
  os_tick_t locktime;
  const struct os_isr_t * const isr;
  struct os_kerneldata_t * const kernel_data;
  const os_tick_t iftmp.1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  OS_isrTableBase.0_1 = OS_isrTableBase;
  _2 = (unsigned int) i;
  _3 = _2 * 68;
  isr = OS_isrTableBase.0_1 + _3;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (locktype == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.1 = isr->osLockTime;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1 = isr->allLockTime;

  <bb 5> :
  locktime = iftmp.1;
  # DEBUG BEGIN_STMT
  if (locktime != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _4 = OS_executionTimer[0];
  _5 = _4->driver;
  _6 = _5->hwtStop;
  _7 = OS_executionTimer[0];
  _6 (_7);
  # DEBUG BEGIN_STMT
  used = OS_GetTimeUsed ();
  # DEBUG BEGIN_STMT
  if (locktype == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _8 = OS_kernelData.accounting.etUsed;
  _9 = OS_kernelData.accounting.osSaveUsed;
  _10 = used + _9;
  _11 = _8 + _10;
  OS_kernelData.accounting.etUsed = _11;
  # DEBUG BEGIN_STMT
  _12 = OS_kernelData.accounting.osSaveLimit;
  OS_kernelData.accounting.etLimit = _12;
  # DEBUG BEGIN_STMT
  _13 = OS_kernelData.accounting.osSaveType;
  OS_kernelData.accounting.etType = _13;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _14 = OS_kernelData.accounting.etUsed;
  _15 = OS_kernelData.accounting.allSaveUsed;
  _16 = used + _15;
  _17 = _14 + _16;
  OS_kernelData.accounting.etUsed = _17;
  # DEBUG BEGIN_STMT
  _18 = OS_kernelData.accounting.allSaveLimit;
  OS_kernelData.accounting.etLimit = _18;
  # DEBUG BEGIN_STMT
  _19 = OS_kernelData.accounting.allSaveType;
  OS_kernelData.accounting.etType = _19;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _20 = isr->flags;
  _21 = (unsigned int) _20;
  _22 = _21 & 64;
  if (_22 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _23 = isr->accounting;
  _24 = _23->etMax;
  _25 = OS_kernelData.accounting.etUsed;
  if (_24 < _25)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = isr->accounting;
  _27 = OS_kernelData.accounting.etUsed;
  _26->etMax = _27;

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _28 = OS_kernelData.accounting.etLimit;
  if (_28 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _29 = OS_kernelData.accounting.etUsed;
  _30 = OS_kernelData.accounting.etLimit;
  if (_29 >= _30)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  OS_ExceedExecTime ();
  goto <bb 18>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _31 = OS_kernelData.accounting.etLimit;
  _32 = OS_kernelData.accounting.etUsed;
  OS_hwtStartDelta = _31 - _32;
  # DEBUG BEGIN_STMT
  _33 = OS_executionTimer[0];
  _34 = _33->maxDelta;
  if (OS_hwtStartDelta > _34)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _35 = OS_executionTimer[0];
  OS_hwtStartDelta = _35->defDelta;

  <bb 17> :
  # DEBUG BEGIN_STMT
  _36 = OS_executionTimer[0];
  _37 = _36->driver;
  _38 = _37->hwtStart;
  _39 = OS_executionTimer[0];
  _40 = OS_kernelData.accounting.frc;
  _38 (_39, _40, OS_hwtStartDelta);

  <bb 18> :
  # DEBUG BEGIN_STMT
  return;

}


