
Marking local functions:


Marking externally visible functions: OS_QuarantineApplication


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_nTasks/12 (OS_nTasks) @06dbd0d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_QuarantineApplication/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_killTaskFunc/11 (OS_killTaskFunc) @06dbd000
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_QuarantineApplication/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_taskTableBase/10 (OS_taskTableBase) @06ce9f78
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_QuarantineApplication/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_nSchedules/9 (OS_nSchedules) @06ce9f30
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_QuarantineApplication/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_killScheduleFunc/8 (OS_killScheduleFunc) @06ce9e58
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_QuarantineApplication/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_scheduleTableBase/7 (OS_scheduleTableBase) @06ce9e10
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_QuarantineApplication/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_nAlarms/6 (OS_nAlarms) @06ce9dc8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_QuarantineApplication/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_killAlarmFunc/5 (OS_killAlarmFunc) @06ce9cf0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_QuarantineApplication/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_alarmTableBase/4 (OS_alarmTableBase) @06ce9ca8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_QuarantineApplication/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_nInterrupts/3 (OS_nInterrupts) @06ce9c60
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_QuarantineApplication/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_CORTEXM_IntDisableIsr/2 (OS_CORTEXM_IntDisableIsr) @06d09c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_QuarantineApplication/0 
  Calls: 
OS_isrTableBase/1 (OS_isrTableBase) @06ce9bd0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_QuarantineApplication/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_QuarantineApplication/0 (OS_QuarantineApplication) @06d09a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_isrTableBase/1 (read)OS_nInterrupts/3 (read)OS_alarmTableBase/4 (read)OS_killAlarmFunc/5 (read)OS_nAlarms/6 (read)OS_scheduleTableBase/7 (read)OS_killScheduleFunc/8 (read)OS_nSchedules/9 (read)OS_taskTableBase/10 (read)OS_killTaskFunc/11 (read)OS_nTasks/12 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_CORTEXM_IntDisableIsr/2 
   Indirect call
   Indirect call
   Indirect call
__attribute__((target ("general-regs-only")))
OS_QuarantineApplication (const struct os_appcontext_t * app)
{
  const struct os_schedule_t * schedule;
  const struct os_alarm_t * alarm;
  const struct os_task_t * task;
  const struct os_isr_t * isr;
  os_scheduleid_t scheduleid;
  os_alarmid_t alarmid;
  os_isrid_t isrid;
  os_taskid_t taskid;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  isrid = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  OS_isrTableBase.0_1 = OS_isrTableBase;
  _2 = (unsigned int) isrid;
  _3 = _2 * 68;
  isr = OS_isrTableBase.0_1 + _3;
  # DEBUG BEGIN_STMT
  _4 = isr->app;
  if (app == _4)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = &isr->arch;
  OS_CORTEXM_IntDisableIsr (_5);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _6 = isr->dynamic;
  _7 = _6->statusflags;
  _8 = isr->dynamic;
  _9 = _7 | 64;
  _8->statusflags = _9;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = isr->dynamic;
  _11 = _10->statusflags;
  _12 = isr->dynamic;
  _13 = _11 | 32;
  _12->statusflags = _13;

  <bb 5> :
  # DEBUG BEGIN_STMT
  isrid.1_14 = isrid;
  isrid = isrid.1_14 + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  OS_nInterrupts.2_15 = OS_nInterrupts;
  if (isrid < OS_nInterrupts.2_15)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  alarm = OS_alarmTableBase;
  # DEBUG BEGIN_STMT
  alarmid = 0;
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _16 = alarm->app;
  if (app == _16)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  OS_killAlarmFunc.3_17 = OS_killAlarmFunc;
  OS_killAlarmFunc.3_17 (alarmid, 2);

  <bb 10> :
  # DEBUG BEGIN_STMT
  alarm = alarm + 28;
  # DEBUG BEGIN_STMT
  alarmid.4_18 = alarmid;
  alarmid = alarmid.4_18 + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  OS_nAlarms.5_19 = OS_nAlarms;
  if (alarmid < OS_nAlarms.5_19)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  schedule = OS_scheduleTableBase;
  # DEBUG BEGIN_STMT
  scheduleid = 0;
  goto <bb 16>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _20 = schedule->app;
  if (app == _20)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  OS_killScheduleFunc.6_21 = OS_killScheduleFunc;
  OS_killScheduleFunc.6_21 (scheduleid, 4);

  <bb 15> :
  # DEBUG BEGIN_STMT
  schedule = schedule + 36;
  # DEBUG BEGIN_STMT
  scheduleid.7_22 = scheduleid;
  scheduleid = scheduleid.7_22 + 1;

  <bb 16> :
  # DEBUG BEGIN_STMT
  OS_nSchedules.8_23 = OS_nSchedules;
  if (scheduleid < OS_nSchedules.8_23)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  task = OS_taskTableBase;
  # DEBUG BEGIN_STMT
  taskid = 0;
  goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _24 = task->app;
  if (app == _24)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  OS_killTaskFunc.9_25 = OS_killTaskFunc;
  OS_killTaskFunc.9_25 (task, 1);

  <bb 20> :
  # DEBUG BEGIN_STMT
  task = task + 76;
  # DEBUG BEGIN_STMT
  taskid.10_26 = taskid;
  taskid = taskid.10_26 + 1;

  <bb 21> :
  # DEBUG BEGIN_STMT
  OS_nTasks.11_27 = OS_nTasks;
  if (taskid < OS_nTasks.11_27)
    goto <bb 18>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _28 = app->dynamic;
  _28->appstate = 0;
  return;

}


