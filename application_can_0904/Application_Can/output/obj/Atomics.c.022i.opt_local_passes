Atomics_ClearFlag (volatile Atomic_t * object, Atomic_value_t flagSelectionMask)
{
  const Atomic_value_t flags;
  boolean success;
  unsigned char success.10_1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.10_1 = success;
  if (success.10_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  flags_9 ={v} *object_8(D);
  # DEBUG flags => flags_9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ~flagSelectionMask_10(D);
  _3 = flags_9 & _2;
  *object_8(D) ={v} _3;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success ={v} {CLOBBER};
  return;

}


Atomics_TestAndSetFlag (volatile Atomic_t * object, Atomic_value_t flagSelectionMask)
{
  Atomic_value_t ret;
  boolean success;
  unsigned char success.9_1;
  long unsigned int _2;
  long unsigned int _3;
  _Bool _4;
  boolean _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_7 = 0;
  # DEBUG ret => ret_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.9_1 = success;
  if (success.9_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret_12 ={v} *object_11(D);
  # DEBUG ret => ret_12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret_12 | flagSelectionMask_13(D);
  *object_11(D) ={v} _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # ret_5 = PHI <ret_7(2), ret_12(3)>
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = ret_5 & flagSelectionMask_13(D);
  _4 = _3 != 0;
  _17 = (boolean) _4;
  success ={v} {CLOBBER};
  return _17;

}


Atomics_FetchXor (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  boolean success;
  unsigned char success.8_1;
  long unsigned int _2;
  Atomic_value_t _15;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_5 = 0;
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.8_1 = success;
  if (success.8_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret_10 ={v} *object_9(D);
  # DEBUG ret => ret_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret_10 ^ operand_11(D);
  *object_9(D) ={v} _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # ret_3 = PHI <ret_5(2), ret_10(3)>
  # DEBUG ret => ret_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = ret_3;
  success ={v} {CLOBBER};
  return _15;

}


Atomics_FetchAnd (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  boolean success;
  unsigned char success.7_1;
  long unsigned int _2;
  Atomic_value_t _15;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_5 = 0;
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.7_1 = success;
  if (success.7_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret_10 ={v} *object_9(D);
  # DEBUG ret => ret_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret_10 & operand_11(D);
  *object_9(D) ={v} _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # ret_3 = PHI <ret_5(2), ret_10(3)>
  # DEBUG ret => ret_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = ret_3;
  success ={v} {CLOBBER};
  return _15;

}


Atomics_FetchOr (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  boolean success;
  unsigned char success.6_1;
  long unsigned int _2;
  Atomic_value_t _15;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_5 = 0;
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.6_1 = success;
  if (success.6_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret_10 ={v} *object_9(D);
  # DEBUG ret => ret_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret_10 | operand_11(D);
  *object_9(D) ={v} _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # ret_3 = PHI <ret_5(2), ret_10(3)>
  # DEBUG ret => ret_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = ret_3;
  success ={v} {CLOBBER};
  return _15;

}


Atomics_FetchSub (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  boolean success;
  unsigned char success.5_1;
  long unsigned int _2;
  Atomic_value_t _15;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_5 = 0;
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.5_1 = success;
  if (success.5_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret_10 ={v} *object_9(D);
  # DEBUG ret => ret_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret_10 - operand_11(D);
  *object_9(D) ={v} _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # ret_3 = PHI <ret_5(2), ret_10(3)>
  # DEBUG ret => ret_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = ret_3;
  success ={v} {CLOBBER};
  return _15;

}


Atomics_FetchAdd (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  boolean success;
  unsigned char success.4_1;
  long unsigned int _2;
  Atomic_value_t _15;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_5 = 0;
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.4_1 = success;
  if (success.4_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret_10 ={v} *object_9(D);
  # DEBUG ret => ret_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret_10 + operand_11(D);
  *object_9(D) ={v} _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # ret_3 = PHI <ret_5(2), ret_10(3)>
  # DEBUG ret => ret_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = ret_3;
  success ={v} {CLOBBER};
  return _15;

}


Atomics_CompareExchange (volatile Atomic_t * object, Atomic_t * expected, Atomic_value_t newValue)
{
  const Atomic_value_t tmp;
  boolean ret;
  boolean success;
  unsigned char success.3_1;
  long unsigned int _2;
  boolean _20;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_7 = 0;
  # DEBUG ret => ret_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.3_1 = success;
  if (success.3_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  tmp_12 ={v} *object_11(D);
  # DEBUG tmp => tmp_12
  # DEBUG BEGIN_STMT
  _2 = *expected_13(D);
  if (tmp_12 == _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object_11(D) ={v} newValue_15(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_17 = 1;
  # DEBUG ret => ret_17
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  *expected_13(D) = tmp_12;

  <bb 6> :
  # ret_3 = PHI <ret_17(4), ret_7(5)>
  # DEBUG ret => ret_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 7> :
  # ret_4 = PHI <ret_7(2), ret_3(6)>
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _20 = ret_4;
  success ={v} {CLOBBER};
  return _20;

}


Atomics_Exchange (volatile Atomic_t * object, Atomic_value_t newValue)
{
  Atomic_value_t ret;
  boolean success;
  unsigned char success.2_1;
  Atomic_value_t _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_4 = 0;
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.2_1 = success;
  if (success.2_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret_9 ={v} *object_8(D);
  # DEBUG ret => ret_9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object_8(D) ={v} newValue_10(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # ret_2 = PHI <ret_4(2), ret_9(3)>
  # DEBUG ret => ret_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = ret_2;
  success ={v} {CLOBBER};
  return _14;

}


Atomics_Load (const Atomic_t * object)
{
  Atomic_value_t ret;
  boolean success;
  unsigned char success.1_1;
  Atomic_value_t _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_4 = 0;
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.1_1 = success;
  if (success.1_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret_9 ={v} *object_8(D);
  # DEBUG ret => ret_9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # ret_2 = PHI <ret_4(2), ret_9(3)>
  # DEBUG ret => ret_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = ret_2;
  success ={v} {CLOBBER};
  return _12;

}


Atomics_Store (volatile Atomic_t * object, Atomic_value_t newValue)
{
  boolean success;
  unsigned char success.0_1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.0_1 = success;
  if (success.0_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object_6(D) ={v} newValue_7(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success ={v} {CLOBBER};
  return;

}


Atomics_Init (volatile Atomic_t * object, Atomic_value_t initValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object_2(D) ={v} initValue_3(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Atomics_ThreadFence ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


