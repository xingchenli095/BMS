
Marking local functions:


Marking externally visible functions: OS_ResetScheduleAlarm


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_EnqueueAlarm/3 (OS_EnqueueAlarm) @06c28c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_ResetScheduleAlarm/0 
  Calls: 
OS_counterTableBase/2 (OS_counterTableBase) @06c089d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_ResetScheduleAlarm/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_alarmTableBase/1 (OS_alarmTableBase) @06c08990
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_ResetScheduleAlarm/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_ResetScheduleAlarm/0 (OS_ResetScheduleAlarm) @06c28a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_alarmTableBase/1 (read)OS_counterTableBase/2 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_EnqueueAlarm/3 
__attribute__((target ("general-regs-only")))
OS_ResetScheduleAlarm (const struct os_schedule_t * ss, struct os_scheduledynamic_t * sd, os_tick_t delta)
{
  os_boolean_t repeat;
  os_tick_t diff;
  struct os_counterdynamic_t * cd;
  const struct os_counter_t * cs;
  struct os_alarmdynamic_t * ad;
  const struct os_alarm_t * as;
  os_boolean_t D.7432;
  os_tick_t iftmp.4;
  os_tick_t iftmp.3;
  os_tick_t iftmp.2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  repeat = 1;
  # DEBUG BEGIN_STMT
  OS_alarmTableBase.0_1 = OS_alarmTableBase;
  _2 = ss->alarm;
  _3 = (unsigned int) _2;
  _4 = _3 * 28;
  as = OS_alarmTableBase.0_1 + _4;
  # DEBUG BEGIN_STMT
  ad = as->dynamic;
  # DEBUG BEGIN_STMT
  OS_counterTableBase.1_5 = OS_counterTableBase;
  _6 = as->counter;
  _7 = (unsigned int) _6;
  _8 = _7 * 32;
  cs = OS_counterTableBase.1_5 + _8;
  # DEBUG BEGIN_STMT
  cd = cs->dynamic;
  # DEBUG BEGIN_STMT
  _9 = cd->current;
  _10 = sd->ctrAbs;
  if (_9 < _10)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _11 = cd->current;
  _12 = sd->ctrAbs;
  _13 = _11 - _12;
  _14 = cs->maxallowedvalue;
  _15 = _13 + _14;
  iftmp.2 = _15 + 1;
  goto <bb 5>; [INV]

  <bb 4> :
  _16 = cd->current;
  _17 = sd->ctrAbs;
  iftmp.2 = _16 - _17;

  <bb 5> :
  diff = iftmp.2;
  # DEBUG BEGIN_STMT
  _18 = cs->maxallowedvalue;
  _19 = sd->ctrAbs;
  _20 = _18 - _19;
  if (delta > _20)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _21 = sd->ctrAbs;
  _22 = delta + _21;
  _23 = cs->maxallowedvalue;
  _24 = _22 - _23;
  iftmp.3 = _24 + 4294967295;
  goto <bb 8>; [INV]

  <bb 7> :
  _25 = sd->ctrAbs;
  iftmp.3 = delta + _25;

  <bb 8> :
  sd->ctrAbs = iftmp.3;
  # DEBUG BEGIN_STMT
  if (delta > diff)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _26 = sd->ctrAbs;
  _27 = cd->current;
  if (_26 < _27)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _28 = sd->ctrAbs;
  _29 = cd->current;
  _30 = _28 - _29;
  _31 = cs->maxallowedvalue;
  _32 = _30 + _31;
  iftmp.4 = _32 + 1;
  goto <bb 12>; [INV]

  <bb 11> :
  _33 = sd->ctrAbs;
  _34 = cd->current;
  iftmp.4 = _33 - _34;

  <bb 12> :
  ad->delta = iftmp.4;
  # DEBUG BEGIN_STMT
  ad->period = 0;
  # DEBUG BEGIN_STMT
  ad->inUse = 1;
  # DEBUG BEGIN_STMT
  _35 = ss->alarm;
  OS_EnqueueAlarm (cs, cd, _35, ad);
  # DEBUG BEGIN_STMT
  repeat = 0;

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.7432 = repeat;
  return D.7432;

}


