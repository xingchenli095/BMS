
Analyzing function: FlexCAN_ComputePayloadSize.part.0/109
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 6 2 3 4 5
;; 6 succs { 2 }
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }

Analyzing function body size: FlexCAN_ComputePayloadSize.part.0

IPA function summary for FlexCAN_ComputePayloadSize.part.0/109 inlinable
  global time:     5.500000
  self size:       7
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:0.500000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:3.000000, time:3.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:


Analyzing function: FlexCAN_ResetImaskBuff/84
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

Analyzing function body size: FlexCAN_ResetImaskBuff

IPA function summary for FlexCAN_ResetImaskBuff/84 inlinable
  global time:     12.001200
  self size:       7
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:10.001200
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:


Analyzing function: FlexCAN_ConfigCtrlOptions/83
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 6 7 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 9 10 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 12 14 }
;; 12 succs { 13 14 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 16 17 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 19 20 }
;; 19 succs { 21 }
;; 20 succs { 21 }
;; 21 succs { 22 23 }
;; 22 succs { 24 }
;; 23 succs { 24 }
;; 24 succs { 1 }

Analyzing function body size: FlexCAN_ConfigCtrlOptions

IPA function summary for FlexCAN_ConfigCtrlOptions/83 inlinable
  global time:     49.250000
  self size:       77
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:34.500000, time:17.000000
    size:16.500000, time:8.750000,  executed if:(not inlined)
    size:21.000000, time:21.000000,  nonconst if:(op1 changed)
    size:1.000000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 416] changed) && (not inlined)
    size:4.000000, time:2.000000,  nonconst if:(op0[ref offset: 416] changed)
  calls:


Analyzing function: FlexCAN_SetEnhancedRxFifoFilter/82
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 29 13 31 14 15 16 17 18 19 20 21 22 23 30 24 32 25 26 27 28
;;
;; Loop 2
;;  header 13, latch 31
;;  depth 1, outer 0
;;  nodes: 13 31
;;
;; Loop 3
;;  header 24, latch 32
;;  depth 1, outer 0
;;  nodes: 24 32
;;
;; Loop 1
;;  header 27, latch 26
;;  depth 1, outer 0
;;  nodes: 27 26 14 25 20 21 22 23 19 17 18 15 16 3 9 10 11 12 8 6 7 4 5
;; 2 succs { 27 }
;; 3 succs { 4 15 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 12 9 10 11 }
;; 9 succs { 14 }
;; 10 succs { 14 }
;; 11 succs { 14 }
;; 12 succs { 14 29 }
;; 29 succs { 13 }
;; 13 succs { 31 }
;; 31 succs { 13 }
;; 14 succs { 26 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 23 20 21 22 }
;; 20 succs { 25 }
;; 21 succs { 25 }
;; 22 succs { 25 }
;; 23 succs { 25 30 }
;; 30 succs { 24 }
;; 24 succs { 32 }
;; 32 succs { 24 }
;; 25 succs { 26 }
;; 26 succs { 27 }
;; 27 succs { 3 28 }
;; 28 succs { 1 }

Analyzing function body size: FlexCAN_SetEnhancedRxFifoFilter

IPA function summary for FlexCAN_SetEnhancedRxFifoFilter/82 inlinable
  global time:     7898.143188
  self size:       104
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:90.000000, time:7881.308609
    size:3.000000, time:0.466168,  executed if:(not inlined)
    size:1.000000, time:1.000000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 24672] changed) && (not inlined)
    size:10.000000, time:15.368412,  nonconst if:(op0[ref offset: 24672] changed)
  loop iterations:(op0[ref offset: 24672] changed)
  calls:


Analyzing function: FlexCAN_EnableEnhancedRxFifo/81
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11
;; 2 succs { 3 11 }
;; 3 succs { 4 6 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 11 9 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 1 }

Analyzing function body size: FlexCAN_EnableEnhancedRxFifo

IPA function summary for FlexCAN_EnableEnhancedRxFifo/81 inlinable
  global time:     26.250000
  self size:       50
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:15.500000, time:2.187500
    size:8.500000, time:2.687500,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:6.000000, time:3.000000,  nonconst if:(op1 changed)
    size:4.000000, time:1.250000,  nonconst if:(op1 changed || op2 changed)
    size:2.000000, time:0.500000,  executed if:(op1 == 0),  nonconst if:(op2 changed) && (op1 == 0)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:3.500000, time:1.750000,  nonconst if:(op0[ref offset: 0] changed)
    size:0.500000, time:0.062500,  executed if:(not inlined),  nonconst if:(op0[ref offset: 24672] changed) && (not inlined)
    size:1.500000, time:0.187500,  nonconst if:(op0[ref offset: 24672] changed)
    size:2.000000, time:0.250000,  nonconst if:(op2 changed)
    size:1.000000, time:0.125000,  nonconst if:(op3 changed)
  calls:
    FlexCAN_IsEnhancedRxFifoAvailable/80 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12


Analyzing function: FlexCAN_IsEnhancedRxFifoAvailable/80
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 6 4 5
;;
;; Loop 1
;;  header 4, latch 6
;;  depth 1, outer 0
;;  nodes: 4 6 3
;; 2 succs { 4 }
;; 3 succs { 5 6 }
;; 6 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

Analyzing function body size: FlexCAN_IsEnhancedRxFifoAvailable

IPA function summary for FlexCAN_IsEnhancedRxFifoAvailable/80 inlinable
  global time:     7.687204
  self size:       7
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:2.000000, time:3.791469
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:1.895735,  nonconst if:(op0 changed)
  calls:


Analyzing function: FlexCAN_IsMbOutOfRange/79
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 6 3 }
;; 3 succs { 4 6 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }

Analyzing function body size: FlexCAN_IsMbOutOfRange

IPA function summary for FlexCAN_IsMbOutOfRange/79 inlinable
  global time:     6.530000
  self size:       16
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op3 changed || op1 changed)
    size:2.000000, time:1.000000,  nonconst if:(op2 changed)
    size:0.500000, time:0.085000,  executed if:(op2 == 1) && (not inlined),  nonconst if:(op0[ref offset: 416] changed) && (op2 == 1) && (not inlined)
    size:6.500000, time:1.105000,  executed if:(op2 == 1),  nonconst if:(op0[ref offset: 416] changed) && (op2 == 1)
    size:2.000000, time:0.340000,  executed if:(op2 == 1),  nonconst if:(op1 changed || op0[ref offset: 416] changed) && (op2 == 1)
  calls:


Analyzing function: FlexCAN_ReadEnhancedRxFifo/78
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;;
;; Loop 1
;;  header 11, latch 10
;;  depth 1, outer 0
;;  nodes: 11 10
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 9 8 }
;; 8 succs { 9 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 10 12 }
;; 12 succs { 1 }

Analyzing function body size: FlexCAN_ReadEnhancedRxFifo

IPA function summary for FlexCAN_ReadEnhancedRxFifo/78 inlinable
  global time:     202.136365
  self size:       58
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:44.000000, time:171.636365
    size:6.000000, time:4.500000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
  calls:
    DevAssert/0 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11
    FlexCAN_ComputePayloadSize/52 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12


Analyzing function: FlexCAN_ReadRxFifo/77
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;;
;; Loop 1
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 1 }

Analyzing function body size: FlexCAN_ReadRxFifo

IPA function summary for FlexCAN_ReadRxFifo/77 inlinable
  global time:     199.227274
  self size:       48
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:34.500000, time:169.227274
    size:6.500000, time:5.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
  calls:
    DevAssert/0 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11
    FlexCAN_ComputePayloadSize/52 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12


Analyzing function: FlexCAN_SetRxFifoFilter/76
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
;;
;; Loop 3
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 10 11 9 7 8
;;
;; Loop 2
;;  header 26, latch 25
;;  depth 1, outer 0
;;  nodes: 26 25 23 24 22 20 21 19 17 18 15 16
;;
;; Loop 1
;;  header 41, latch 40
;;  depth 1, outer 0
;;  nodes: 41 40 38 39 37 35 36 34 32 33 31 29 30 28
;; 2 succs { 5 3 }
;; 3 succs { 5 4 }
;; 4 succs { 5 }
;; 5 succs { 43 6 14 27 42 }
;; 6 succs { 13 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 7 43 }
;; 14 succs { 26 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 20 21 }
;; 20 succs { 22 }
;; 21 succs { 22 }
;; 22 succs { 23 24 }
;; 23 succs { 25 }
;; 24 succs { 25 }
;; 25 succs { 26 }
;; 26 succs { 15 43 }
;; 27 succs { 41 }
;; 28 succs { 29 30 }
;; 29 succs { 31 }
;; 30 succs { 31 }
;; 31 succs { 32 33 }
;; 32 succs { 34 }
;; 33 succs { 34 }
;; 34 succs { 35 36 }
;; 35 succs { 37 }
;; 36 succs { 37 }
;; 37 succs { 38 39 }
;; 38 succs { 40 }
;; 39 succs { 40 }
;; 40 succs { 41 }
;; 41 succs { 28 43 }
;; 42 succs { 43 }
;; 43 succs { 1 }

Analyzing function body size: FlexCAN_SetRxFifoFilter

IPA function summary for FlexCAN_SetRxFifoFilter/76 inlinable
  global time:     242.218185
  self size:       224
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:2.500000, time:2.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:2.000000, time:2.000000,  nonconst if:(op2 changed)
    size:2.000000, time:0.600000,  executed if:(op2 == 0B),  nonconst if:(op1 changed) && (op2 == 0B)
    size:10.000000, time:4.000000,  nonconst if:(op1 changed)
    size:1.000000, time:0.200000,  executed if:(op1 == 3) && (not inlined)
    size:2.000000, time:0.400000,  executed if:(op1 == 3)
    size:1.000000, time:0.200000,  executed if:(op1 == 2) && (not inlined)
    size:96.000000, time:100.109093,  executed if:(op1 == 2)
    size:1.000000, time:0.200000,  executed if:(op1 == 1) && (not inlined)
    size:61.000000, time:66.936364,  executed if:(op1 == 1)
    size:1.000000, time:0.200000,  executed if:(op1 == 0) && (not inlined)
    size:30.000000, time:34.372727,  executed if:(op1 == 0)
  calls:
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 function body not available
      loop depth: 0 freq:0.20 size: 1 time: 10 predicate: (op1 == 3)
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 function body not available
      loop depth: 0 freq:0.20 size: 1 time: 10 predicate: (op1 == 3)
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 function body not available
      loop depth: 0 freq:0.20 size: 1 time: 10 predicate: (op1 == 2)
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 function body not available
      loop depth: 0 freq:0.20 size: 1 time: 10 predicate: (op1 == 2)
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 function body not available
      loop depth: 0 freq:0.20 size: 1 time: 10 predicate: (op1 == 1)
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 function body not available
      loop depth: 0 freq:0.20 size: 1 time: 10 predicate: (op1 == 1)
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 function body not available
      loop depth: 0 freq:0.20 size: 1 time: 10 predicate: (op1 == 0)
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 function body not available
      loop depth: 0 freq:0.20 size: 1 time: 10 predicate: (op1 == 0)
    DevAssert/0 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11


Analyzing function: FlexCAN_SetOperationMode/75
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 6 3 4 5 }
;; 3 succs { 6 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }

Analyzing function body size: FlexCAN_SetOperationMode

IPA function summary for FlexCAN_SetOperationMode/75 inlinable
  global time:     10.500000
  self size:       29
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:8.000000, time:4.000000,  nonconst if:(op1 changed)
    size:0.500000, time:0.125000,  executed if:(op1 == 2) && (not inlined),  nonconst if:(op0[ref offset: 32] changed) && (op1 == 2) && (not inlined)
    size:1.500000, time:0.375000,  executed if:(op1 == 2),  nonconst if:(op0[ref offset: 32] changed) && (op1 == 2)
    size:2.500000, time:0.625000,  executed if:(op1 == 2) && (not inlined)
    size:4.500000, time:1.125000,  executed if:(op1 == 2)
    size:0.500000, time:0.125000,  executed if:(op1 == 1) && (not inlined),  nonconst if:(op0[ref offset: 32] changed) && (op1 == 1) && (not inlined)
    size:1.500000, time:0.375000,  executed if:(op1 == 1),  nonconst if:(op0[ref offset: 32] changed) && (op1 == 1)
    size:0.500000, time:0.125000,  executed if:(op1 == 1) && (not inlined)
    size:0.500000, time:0.125000,  executed if:(op1 == 1)
    size:0.500000, time:0.125000,  executed if:(op1 == 0) && (not inlined),  nonconst if:(op0[ref offset: 32] changed) && (op1 == 0) && (not inlined)
    size:1.500000, time:0.375000,  executed if:(op1 == 0),  nonconst if:(op0[ref offset: 32] changed) && (op1 == 0)
    size:1.500000, time:0.375000,  executed if:(op1 == 0) && (not inlined)
    size:2.500000, time:0.625000,  executed if:(op1 == 0)
  calls:


Analyzing function: FlexCAN_SetMaxMsgBuffNum/74
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 11 5 6 7 8 9 10
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 7 5 6
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 2, outer 1
;;  nodes: 7 6
;; 2 succs { 10 3 }
;; 3 succs { 10 4 }
;; 4 succs { 11 10 }
;; 11 succs { 9 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 9 }
;; 9 succs { 5 10 }
;; 10 succs { 1 }

Analyzing function body size: FlexCAN_SetMaxMsgBuffNum

IPA function summary for FlexCAN_SetMaxMsgBuffNum/74 inlinable
  global time:     204.902867
  self size:       55
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:21.500000, time:102.107297
    size:4.500000, time:2.633750,  executed if:(not inlined)
    size:3.000000, time:3.000000,  nonconst if:(op0 changed)
    size:3.000000, time:2.422500,  nonconst if:(op1 changed)
    size:2.000000, time:1.300000,  nonconst if:(op0 changed || op1 changed)
  calls:
    FlexCAN_GetMbPayloadSize/64 function not considered for inlining
      loop depth: 1 freq:1.71 size: 4 time: 13
       op0 change 58.500000% of time
    FlexCAN_GetMsgBuffRegion/53 function not considered for inlining
      loop depth: 1 freq:1.71 size: 4 time: 13
       op0 change 58.500000% of time
    FlexCAN_GetMaxMbNum/54 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12
    FlexCAN_GetMsgBuffRegion/53 function not considered for inlining
      loop depth: 0 freq:1.00 size: 4 time: 13
    DevAssert/0 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11
    FlexCAN_GetMbPayloadSize/64 function not considered for inlining
      loop depth: 0 freq:1.00 size: 4 time: 13


Analyzing function: FlexCAN_SetTxMsgBuff/73
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 29 5 6 28 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
;;
;; Loop 3
;;  header 11, latch 10
;;  depth 1, outer 0
;;  nodes: 11 10
;;
;; Loop 2
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 29 12 }
;; 29 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 28 }
;; 28 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 10 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 17 27 }
;; 17 succs { 18 19 }
;; 18 succs { 21 }
;; 19 succs { 20 21 }
;; 20 succs { 21 }
;; 21 succs { 22 23 }
;; 22 succs { 24 }
;; 23 succs { 24 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 27 }
;; 27 succs { 1 }

Analyzing function body size: FlexCAN_SetTxMsgBuff

IPA function summary for FlexCAN_SetTxMsgBuff/73 inlinable
  global time:     276.108253
  self size:       106
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:42.500000, time:26.994400
    size:11.500000, time:7.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:2.000000, time:2.000000,  nonconst if:(op3 changed)
    size:1.500000, time:9.195455,  executed if:(op3 != 0B) && (not inlined)
    size:35.500000, time:206.659094,  executed if:(op3 != 0B)
    size:3.000000, time:1.340000,  nonconst if:(op2 changed)
    size:2.000000, time:0.871200,  nonconst if:(op4 changed)
    size:1.000000, time:0.148104,  executed if:(op4 == 1)
  calls:
    FlexCAN_ComputePayloadSize/52 function not considered for inlining
      loop depth: 0 freq:0.70 size: 3 time: 12 predicate: (op3 != 0B)
    DevAssert/0 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11


Analyzing function: FlexCAN_GetMsgBuff/72
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 13 10 11 12
;;
;; Loop 2
;;  header 11, latch 10
;;  depth 1, outer 0
;;  nodes: 11 10
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 8 13 }
;; 13 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 10 12 }
;; 12 succs { 1 }

Analyzing function body size: FlexCAN_GetMsgBuff

IPA function summary for FlexCAN_GetMsgBuff/72 inlinable
  global time:     303.335454
  self size:       67
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:43.000000, time:241.000000
    size:6.000000, time:8.045455,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op2 changed)
  calls:
    FlexCAN_GetMbPayloadSize/64 function not considered for inlining
      loop depth: 0 freq:0.33 size: 4 time: 13
    FlexCAN_GetMbPayloadSize/64 function not considered for inlining
      loop depth: 0 freq:1.00 size: 4 time: 13
    DevAssert/0 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11
    FlexCAN_ComputePayloadSize/52 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12
    FlexCAN_GetMsgBuffRegion/53 function not considered for inlining
      loop depth: 0 freq:1.00 size: 4 time: 13


Analyzing function: FlexCAN_GetMsgBuffTimestamp/71
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Analyzing function body size: FlexCAN_GetMsgBuffTimestamp

IPA function summary for FlexCAN_GetMsgBuffTimestamp/71 inlinable
  global time:     17.000000
  self size:       9
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:2.000000, time:2.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    FlexCAN_GetMsgBuffRegion/53 function not considered for inlining
      loop depth: 0 freq:1.00 size: 4 time: 13


Analyzing function: FlexCAN_SetRxMsgBuff/70
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 1 }

Analyzing function body size: FlexCAN_SetRxMsgBuff

IPA function summary for FlexCAN_SetRxMsgBuff/70 inlinable
  global time:     52.860000
  self size:       53
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:38.500000, time:23.190000
    size:4.500000, time:3.330000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op2 changed)
    size:3.000000, time:1.340000,  nonconst if:(op3 changed)
  calls:
    DevAssert/0 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11
    FlexCAN_GetMsgBuffRegion/53 function not considered for inlining
      loop depth: 0 freq:1.00 size: 4 time: 13


Analyzing function: FlexCAN_EnableInterrupts/69
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }

Analyzing function body size: FlexCAN_EnableInterrupts

IPA function summary for FlexCAN_EnableInterrupts/69 inlinable
  global time:     19.000000
  self size:       12
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:3.000000, time:2.250000
    size:4.000000, time:2.750000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  array index:(op1 changed)
  calls:
    FlexCAN_GetMaxMbNum/54 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12


Analyzing function: FlexCAN_DisableInterrupts/68
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }

Analyzing function body size: FlexCAN_DisableInterrupts

IPA function summary for FlexCAN_DisableInterrupts/68 inlinable
  global time:     17.500000
  self size:       10
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:0.750000
    size:4.000000, time:2.750000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    FlexCAN_GetMaxMbNum/54 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12


Analyzing function: FLEXCAN_ClearMsgBuffIntCmd/67
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;; 2 succs { 3 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 7 10 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 }
;; 10 succs { 1 }

Analyzing function body size: FLEXCAN_ClearMsgBuffIntCmd

IPA function summary for FLEXCAN_ClearMsgBuffIntCmd/67 inlinable
  global time:     26.608800
  self size:       30
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:2.500000, time:0.825000
    size:3.500000, time:2.165000,  executed if:(not inlined)
    size:8.000000, time:7.330000,  nonconst if:(op2 changed)
    size:0.500000, time:0.165000,  executed if:(op2 <= 31) && (not inlined)
    size:2.500000, time:0.825000,  executed if:(op2 <= 31)
    size:1.000000, time:0.330000,  executed if:(op2 <= 31),  nonconst if:(op2 changed) && (op2 <= 31)
    size:2.000000, time:0.660000,  executed if:(op2 <= 31),  nonconst if:(op3 changed) && (op2 <= 31)
    size:1.500000, time:0.168300,  executed if:(op3 == 1) && (op2 <= 31)
    size:0.500000, time:0.056100,  executed if:(op3 == 1) && (op2 <= 31) && (not inlined)
    size:2.000000, time:0.660000,  nonconst if:(op3 changed)
    size:1.500000, time:0.168300,  executed if:(op3 == 1)
    size:0.500000, time:0.056100,  executed if:(op3 == 1) && (not inlined)
  array index:(op1 changed)
  calls:
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/103 function body not available
      loop depth: 0 freq:0.33 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/102 function body not available
      loop depth: 0 freq:0.33 size: 1 time: 10
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/103 function body not available
      loop depth: 0 freq:0.33 size: 1 time: 10 predicate: (op2 <= 31)
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/102 function body not available
      loop depth: 0 freq:0.33 size: 1 time: 10 predicate: (op2 <= 31)


Analyzing function: FlexCAN_SetMsgBuffIntCmd/66
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;; 2 succs { 3 8 }
;; 3 succs { 4 7 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 9 14 }
;; 9 succs { 10 13 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 14 }
;; 13 succs { 14 }
;; 14 succs { 1 }

Analyzing function body size: FlexCAN_SetMsgBuffIntCmd

IPA function summary for FlexCAN_SetMsgBuffIntCmd/66 inlinable
  global time:     36.840000
  self size:       48
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:7.000000, time:7.000000,  nonconst if:(op2 changed)
    size:2.000000, time:1.000000,  executed if:(op2 <= 31),  nonconst if:(op3 changed) && (op2 <= 31)
    size:4.500000, time:1.125000,  executed if:(op3 == 0) && (op2 <= 31)
    size:1.000000, time:0.250000,  executed if:(op3 == 0) && (op2 <= 31),  nonconst if:(op2 changed) && (op3 == 0) && (op2 <= 31)
    size:0.500000, time:0.125000,  executed if:(op3 == 0) && (op2 <= 31) && (not inlined)
    size:3.000000, time:0.750000,  executed if:(op3 != 0) && (op2 <= 31)
    size:2.000000, time:0.500000,  executed if:(op3 != 0) && (op2 <= 31),  nonconst if:(op4 changed) && (op3 != 0) && (op2 <= 31)
    size:1.500000, time:0.127500,  executed if:(op4 == 1) && (op3 != 0) && (op2 <= 31)
    size:0.500000, time:0.042500,  executed if:(op4 == 1) && (op3 != 0) && (op2 <= 31) && (not inlined)
    size:2.000000, time:1.000000,  nonconst if:(op3 changed)
    size:4.500000, time:1.125000,  executed if:(op3 == 0)
    size:1.000000, time:0.250000,  executed if:(op3 == 0),  nonconst if:(op2 changed) && (op3 == 0)
    size:0.500000, time:0.125000,  executed if:(op3 == 0) && (not inlined)
    size:3.000000, time:0.750000,  executed if:(op3 != 0)
    size:2.000000, time:0.500000,  executed if:(op3 != 0),  nonconst if:(op4 changed) && (op3 != 0)
    size:1.500000, time:0.127500,  executed if:(op4 == 1) && (op3 != 0)
    size:0.500000, time:0.042500,  executed if:(op4 == 1) && (op3 != 0) && (not inlined)
  array index:(op1 changed)
  calls:
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 function body not available
      loop depth: 0 freq:0.25 size: 1 time: 10 predicate: (op3 == 0)
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 function body not available
      loop depth: 0 freq:0.25 size: 1 time: 10 predicate: (op3 == 0)
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 function body not available
      loop depth: 0 freq:0.25 size: 1 time: 10 predicate: (op3 != 0)
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 function body not available
      loop depth: 0 freq:0.25 size: 1 time: 10 predicate: (op3 != 0)
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 function body not available
      loop depth: 0 freq:0.25 size: 1 time: 10 predicate: (op3 == 0) && (op2 <= 31)
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 function body not available
      loop depth: 0 freq:0.25 size: 1 time: 10 predicate: (op3 == 0) && (op2 <= 31)
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 function body not available
      loop depth: 0 freq:0.25 size: 1 time: 10 predicate: (op3 != 0) && (op2 <= 31)
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 function body not available
      loop depth: 0 freq:0.25 size: 1 time: 10 predicate: (op3 != 0) && (op2 <= 31)


Analyzing function: FlexCAN_LockRxMsgBuff/65
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Analyzing function body size: FlexCAN_LockRxMsgBuff

IPA function summary for FlexCAN_LockRxMsgBuff/65 inlinable
  global time:     16.000000
  self size:       8
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    FlexCAN_GetMsgBuffRegion/53 function not considered for inlining
      loop depth: 0 freq:1.00 size: 4 time: 13


Analyzing function: FlexCAN_GetMbPayloadSize/64
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 5, latch 4
;;  depth 1, outer 0
;;  nodes: 5 4 3
;; 2 succs { 5 }
;; 3 succs { 6 4 }
;; 4 succs { 5 }
;; 5 succs { 3 6 }
;; 6 succs { 1 }

Analyzing function body size: FlexCAN_GetMbPayloadSize

IPA function summary for FlexCAN_GetMbPayloadSize/64 inlinable
  global time:     57.764022
  self size:       15
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:8.000000, time:32.337433
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    FlexCAN_GetPayloadSize/63 function not considered for inlining
      loop depth: 1 freq:1.80 size: 4 time: 13
       op0 change 55.490000% of time


Analyzing function: FlexCAN_GetPayloadSize/63
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 5 3 4 }
;; 3 succs { 6 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }

Analyzing function body size: FlexCAN_GetPayloadSize

IPA function summary for FlexCAN_GetPayloadSize/63 inlinable
  global time:     7.999400
  self size:       21
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:1.999800,  executed if:(not inlined)
    size:6.000000, time:2.000000,  nonconst if:(op1 changed)
    size:0.500000, time:0.166650,  executed if:(op1 == 1) && (not inlined),  nonconst if:(op0[ref offset: 24576] changed) && (op1 == 1) && (not inlined)
    size:3.500000, time:1.166550,  executed if:(op1 == 1),  nonconst if:(op0[ref offset: 24576] changed) && (op1 == 1)
    size:0.500000, time:0.166650,  executed if:(op1 == 0) && (not inlined),  nonconst if:(op0[ref offset: 24576] changed) && (op1 == 0) && (not inlined)
    size:3.500000, time:1.166550,  executed if:(op1 == 0),  nonconst if:(op0[ref offset: 24576] changed) && (op1 == 0)
    size:0.500000, time:0.166650,  executed if:(not inlined),  nonconst if:(op0[ref offset: 24576] changed) && (not inlined)
    size:3.500000, time:1.166550,  nonconst if:(op0[ref offset: 24576] changed)
  calls:


Analyzing function: FlexCAN_SetPayloadSize/62
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;; 2 succs { 5 3 }
;; 3 succs { 5 4 }
;; 4 succs { 5 }
;; 5 succs { 8 6 }
;; 6 succs { 8 7 }
;; 7 succs { 8 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 1 }

Analyzing function body size: FlexCAN_SetPayloadSize

IPA function summary for FlexCAN_SetPayloadSize/62 inlinable
  global time:     44.000000
  self size:       35
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:17.500000, time:12.250000
    size:6.500000, time:4.250000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:3.500000, time:3.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 0] changed) && (not inlined)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 0] changed)
  calls:
    DevAssert/0 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11
    DevAssert/0 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11


Analyzing function: FlexCAN_EnableRxFifo/61
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 5, latch 4
;;  depth 1, outer 0
;;  nodes: 5 4
;; 2 succs { 6 3 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 4 6 }
;; 6 succs { 1 }

Analyzing function body size: FlexCAN_EnableRxFifo

IPA function summary for FlexCAN_EnableRxFifo/61 inlinable
  global time:     44.727273
  self size:       25
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:7.500000, time:17.159091
    size:5.500000, time:5.022727,  executed if:(not inlined)
    size:1.000000, time:0.750000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:5.000000, time:4.250000,  nonconst if:(op0[ref offset: 0] changed)
    size:2.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:4.545455,  nonconst if:(op0 changed)
  loop iterations:(op0 changed)
  calls:
    FlexCAN_GetMaxMbNum/54 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12


Analyzing function: FlexCAN_Init/60
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 10 4 5 6 7 8 9
;;
;; Loop 1
;;  header 4, latch 10
;;  depth 1, outer 0
;;  nodes: 4 10 3
;; 2 succs { 4 }
;; 3 succs { 5 10 }
;; 10 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 9 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 1 }

Analyzing function body size: FlexCAN_Init

IPA function summary for FlexCAN_Init/60 inlinable
  global time:     227.253347
  self size:       55
  global size:     0
  min size:       0
  self stack:      4
  global stack:    4
    size:23.000000, time:68.519443
    size:14.000000, time:10.643989,  executed if:(not inlined)
    size:2.000000, time:0.660000,  nonconst if:(op0 changed)
  calls:
    FlexCAN_GetMaxMbNum/54 function not considered for inlining
      loop depth: 0 freq:0.33 size: 3 time: 12
    FlexCAN_ClearRAM/51 function not considered for inlining
      loop depth: 0 freq:0.33 size: 2 time: 11
    OsIf_GetElapsed/91 function body not available
      loop depth: 1 freq:8.83 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/90 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op0 is compile time invariant
    OsIf_MicrosToTicks/87 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant


Analyzing function: FlexCAN_SetErrIntCmd/59
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13
;; 2 succs { 3 9 }
;; 3 succs { 4 5 }
;; 4 succs { 13 }
;; 5 succs { 7 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 13 }
;; 9 succs { 10 11 }
;; 10 succs { 13 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 1 }

Analyzing function body size: FlexCAN_SetErrIntCmd

IPA function summary for FlexCAN_SetErrIntCmd/59 inlinable
  global time:     32.799356
  self size:       38
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op2 changed)
    size:2.000000, time:1.000000,  executed if:(op2 == 0),  nonconst if:(op1 changed) && (op2 == 0)
    size:2.500000, time:0.660000,  executed if:(op1 != 16385) && (op2 == 0) && (not inlined)
    size:7.500000, time:2.145000,  executed if:(op1 != 16385) && (op2 == 0)
    size:1.000000, time:0.330000,  executed if:(op1 != 16385) && (op2 == 0),  nonconst if:(op1 changed) && (op1 != 16385) && (op2 == 0)
    size:1.000000, time:0.170000,  executed if:(op1 == 16385) && (op2 == 0) && (not inlined)
    size:2.000000, time:0.340000,  executed if:(op1 == 16385) && (op2 == 0)
    size:2.000000, time:1.000000,  executed if:(op2 != 0),  nonconst if:(op1 changed) && (op2 != 0)
    size:2.000000, time:0.660000,  executed if:(op1 != 16385) && (op2 != 0),  nonconst if:(op1 changed) && (op1 != 16385) && (op2 != 0)
    size:2.000000, time:0.435600,  executed if:(op1 != 1024) && (op1 != 16385) && (op2 != 0),  nonconst if:(op1 changed) && (op1 != 1024) && (op1 != 16385) && (op2 != 0)
    size:1.000000, time:0.186252,  executed if:(op1 == 1024 || op1 == 2048) && (op1 != 16385) && (op2 != 0) && (not inlined)
    size:2.000000, time:0.372504,  executed if:(op1 == 1024 || op1 == 2048) && (op1 != 16385) && (op2 != 0)
    size:1.000000, time:0.330000,  executed if:(op1 != 16385) && (op2 != 0) && (not inlined)
    size:2.000000, time:0.660000,  executed if:(op1 != 16385) && (op2 != 0)
    size:1.000000, time:0.170000,  executed if:(op1 == 16385) && (op2 != 0) && (not inlined)
    size:2.000000, time:0.340000,  executed if:(op1 == 16385) && (op2 != 0)
  calls:
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06/99 function body not available
      loop depth: 0 freq:1.00 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06/98 function body not available
      loop depth: 0 freq:1.00 size: 1 time: 10


Analyzing function: FlexCAN_Disable/58
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 7 5 6
;;
;; Loop 1
;;  header 5, latch 7
;;  depth 1, outer 0
;;  nodes: 5 7 4
;; 2 succs { 3 6 }
;; 3 succs { 5 }
;; 4 succs { 6 7 }
;; 7 succs { 5 }
;; 5 succs { 4 6 }
;; 6 succs { 1 }

Analyzing function body size: FlexCAN_Disable

IPA function summary for FlexCAN_Disable/58 inlinable
  global time:     108.071393
  self size:       31
  global size:     0
  min size:       0
  self stack:      4
  global stack:    4
    size:13.000000, time:29.308625
    size:5.000000, time:4.853571,  executed if:(not inlined)
  calls:
    OsIf_GetElapsed/91 function body not available
      loop depth: 1 freq:3.66 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/90 function body not available
      loop depth: 0 freq:0.41 size: 3 time: 12
       op0 is compile time invariant
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05/97 function body not available
      loop depth: 0 freq:0.41 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05/96 function body not available
      loop depth: 0 freq:0.41 size: 1 time: 10
    OsIf_MicrosToTicks/87 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant


Analyzing function: FlexCAN_ExitFreezeMode/57
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 6 4 5
;;
;; Loop 1
;;  header 4, latch 6
;;  depth 1, outer 0
;;  nodes: 4 6 3
;; 2 succs { 4 }
;; 3 succs { 5 6 }
;; 6 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

Analyzing function body size: FlexCAN_ExitFreezeMode

IPA function summary for FlexCAN_ExitFreezeMode/57 inlinable
  global time:     233.733349
  self size:       31
  global size:     0
  min size:       0
  self stack:      4
  global stack:    4
    size:12.500000, time:65.219444
    size:5.500000, time:8.673989,  executed if:(not inlined)
  calls:
    OsIf_GetElapsed/91 function body not available
      loop depth: 1 freq:8.83 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/90 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op0 is compile time invariant
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04/95 function body not available
      loop depth: 0 freq:1.00 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04/94 function body not available
      loop depth: 0 freq:1.00 size: 1 time: 10
    OsIf_MicrosToTicks/87 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant


Analyzing function: FlexCAN_Enable/56
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 6 4 5
;;
;; Loop 1
;;  header 4, latch 6
;;  depth 1, outer 0
;;  nodes: 4 6 3
;; 2 succs { 4 }
;; 3 succs { 5 6 }
;; 6 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

Analyzing function body size: FlexCAN_Enable

IPA function summary for FlexCAN_Enable/56 inlinable
  global time:     230.733349
  self size:       28
  global size:     0
  min size:       0
  self stack:      4
  global stack:    4
    size:10.500000, time:63.219444
    size:4.500000, time:7.673989,  executed if:(not inlined)
  calls:
    OsIf_GetElapsed/91 function body not available
      loop depth: 1 freq:8.83 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/90 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op0 is compile time invariant
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03/93 function body not available
      loop depth: 0 freq:1.00 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03/92 function body not available
      loop depth: 0 freq:1.00 size: 1 time: 10
    OsIf_MicrosToTicks/87 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant


Analyzing function: FlexCAN_EnterFreezeMode/55
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 8 6 7
;;
;; Loop 1
;;  header 6, latch 8
;;  depth 1, outer 0
;;  nodes: 6 8 5
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 6 }
;; 5 succs { 7 8 }
;; 8 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 1 }

Analyzing function body size: FlexCAN_EnterFreezeMode

IPA function summary for FlexCAN_EnterFreezeMode/55 inlinable
  global time:     237.963349
  self size:       37
  global size:     0
  min size:       0
  self stack:      4
  global stack:    4
    size:17.000000, time:68.539444
    size:7.000000, time:9.583989,  executed if:(not inlined)
  calls:
    OsIf_GetElapsed/91 function body not available
      loop depth: 1 freq:8.83 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/90 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op0 is compile time invariant
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02/89 function body not available
      loop depth: 0 freq:1.00 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02/88 function body not available
      loop depth: 0 freq:1.00 size: 1 time: 10
    OsIf_MicrosToTicks/87 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant


Analyzing function: FlexCAN_GetMaxMbNum/54
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }

Analyzing function body size: FlexCAN_GetMaxMbNum

IPA function summary for FlexCAN_GetMaxMbNum/54 inlinable
  global time:     29.200000
  self size:       10
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:27.200000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:


Analyzing function: FlexCAN_GetMsgBuffRegion/53
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 5, latch 4
;;  depth 1, outer 0
;;  nodes: 5 4 3
;; 2 succs { 5 }
;; 3 succs { 6 4 }
;; 4 succs { 5 }
;; 5 succs { 3 6 }
;; 6 succs { 1 }

Analyzing function body size: FlexCAN_GetMsgBuffRegion

IPA function summary for FlexCAN_GetMsgBuffRegion/53 inlinable
  global time:     77.169888
  self size:       24
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:16.000000, time:50.743299
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    FlexCAN_GetPayloadSize/63 function not considered for inlining
      loop depth: 1 freq:1.80 size: 4 time: 13callee size:10 stack: 0
       op0 change 55.490000% of time


Analyzing function: FlexCAN_ComputePayloadSize/52
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }

Analyzing function body size: FlexCAN_ComputePayloadSize

IPA function summary for FlexCAN_ComputePayloadSize/52 inlinable
  global time:     10.000000
  self size:       8
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    FlexCAN_ComputePayloadSize.part.0/109 function not considered for inlining
      loop depth: 0 freq:0.50 size: 3 time: 12callee size: 3 stack: 0 predicate: (op0 > 8)


Analyzing function: FlexCAN_ClearRAM/51
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11
;;
;; Loop 3
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 9 11 }
;; 11 succs { 1 }

Analyzing function body size: FlexCAN_ClearRAM

IPA function summary for FlexCAN_ClearRAM/51 inlinable
  global time:     132.090910
  self size:       33
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:21.000000, time:112.090910
    size:7.000000, time:6.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  loop iterations:(op0 changed)
  calls:
    FlexCAN_GetMaxMbNum/54 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 5 stack: 0


Analyzing function: DevAssert/0
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 5 3 6 4
;;
;; Loop 1
;;  header 3, latch 6
;;  depth 1, outer 0
;;  nodes: 3 6
;; 2 succs { 4 5 }
;; 5 succs { 3 }
;; 3 succs { 6 }
;; 6 succs { 3 }
;; 4 succs { 1 }

Analyzing function body size: DevAssert

IPA function summary for DevAssert/0 inlinable
  global time:     5004.008492
  self size:       7
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:2.000000, time:0.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  executed if:(not inlined),  nonconst if:(op0 changed) && (not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:5000.008492,  executed if:(op0 == 0)
    size:1.000000, time:1.000000,  executed if:(op0 != 0) && (not inlined)
  calls:

Symbol table:

FlexCAN_ComputePayloadSize.part.0/109 (FlexCAN_ComputePayloadSize.part.0) @07e5ca80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: CSWTCH.40/108 (read)
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: FlexCAN_ComputePayloadSize/52 (536870912 (estimated locally),0.50 per call) 
  Calls: 
CSWTCH.40/108 (CSWTCH.40) @07fb8cf0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: FlexCAN_ComputePayloadSize.part.0/109 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13) @07f7dc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetRxFifoFilter/76 (118111600 (estimated locally),0.20 per call) FlexCAN_SetRxFifoFilter/76 (118111600 (estimated locally),0.20 per call) FlexCAN_SetRxFifoFilter/76 (118111600 (estimated locally),0.20 per call) FlexCAN_SetRxFifoFilter/76 (118111600 (estimated locally),0.20 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13) @07f7db60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetRxFifoFilter/76 (118111600 (estimated locally),0.20 per call) FlexCAN_SetRxFifoFilter/76 (118111600 (estimated locally),0.20 per call) FlexCAN_SetRxFifoFilter/76 (118111600 (estimated locally),0.20 per call) FlexCAN_SetRxFifoFilter/76 (118111600 (estimated locally),0.20 per call) 
  Calls: 
payload_code.12250/104 (payload_code) @07f8b8b8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: FlexCAN_SetTxMsgBuff/73 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/103 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11) @07f69e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FLEXCAN_ClearMsgBuffIntCmd/67 (354334802 (estimated locally),0.33 per call) FLEXCAN_ClearMsgBuffIntCmd/67 (354334802 (estimated locally),0.33 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/102 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11) @07f69d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FLEXCAN_ClearMsgBuffIntCmd/67 (354334802 (estimated locally),0.33 per call) FLEXCAN_ClearMsgBuffIntCmd/67 (354334802 (estimated locally),0.33 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18) @07f69a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetMsgBuffIntCmd/66 (268435456 (estimated locally),0.25 per call) FlexCAN_SetMsgBuffIntCmd/66 (268435456 (estimated locally),0.25 per call) FlexCAN_SetMsgBuffIntCmd/66 (268435456 (estimated locally),0.25 per call) FlexCAN_SetMsgBuffIntCmd/66 (268435456 (estimated locally),0.25 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18) @07f699a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetMsgBuffIntCmd/66 (268435456 (estimated locally),0.25 per call) FlexCAN_SetMsgBuffIntCmd/66 (268435456 (estimated locally),0.25 per call) FlexCAN_SetMsgBuffIntCmd/66 (268435456 (estimated locally),0.25 per call) FlexCAN_SetMsgBuffIntCmd/66 (268435456 (estimated locally),0.25 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06/99 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06) @07f690e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetErrIntCmd/59 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06/98 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06) @07f69000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetErrIntCmd/59 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05/97 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05) @07f2be00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Disable/58 (114863532 (estimated locally),0.41 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05/96 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05) @07f2bd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Disable/58 (114863532 (estimated locally),0.41 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04/95 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04) @07f2bb60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_ExitFreezeMode/57 (114863532 (estimated locally),1.00 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04/94 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04) @07f2ba80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_ExitFreezeMode/57 (114863532 (estimated locally),1.00 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03/93 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03) @07f2b8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Enable/56 (114863532 (estimated locally),1.00 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03/92 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03) @07f2b7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Enable/56 (114863532 (estimated locally),1.00 per call) 
  Calls: 
OsIf_GetElapsed/91 (OsIf_GetElapsed) @07f2b620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Init/60 (1014686025 (estimated locally),8.83 per call) FlexCAN_Disable/58 (1014686024 (estimated locally),3.66 per call) FlexCAN_ExitFreezeMode/57 (1014686025 (estimated locally),8.83 per call) FlexCAN_Enable/56 (1014686025 (estimated locally),8.83 per call) FlexCAN_EnterFreezeMode/55 (1014686025 (estimated locally),8.83 per call) 
  Calls: 
OsIf_GetCounter/90 (OsIf_GetCounter) @07f2b540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Init/60 (114863532 (estimated locally),1.00 per call) FlexCAN_Disable/58 (114863532 (estimated locally),0.41 per call) FlexCAN_ExitFreezeMode/57 (114863532 (estimated locally),1.00 per call) FlexCAN_Enable/56 (114863532 (estimated locally),1.00 per call) FlexCAN_EnterFreezeMode/55 (114863532 (estimated locally),1.00 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02/89 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02) @07f2b460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_EnterFreezeMode/55 (114863532 (estimated locally),1.00 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02/88 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02) @07f2b380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_EnterFreezeMode/55 (114863532 (estimated locally),1.00 per call) 
  Calls: 
OsIf_MicrosToTicks/87 (OsIf_MicrosToTicks) @07f2b2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Init/60 (114863532 (estimated locally),1.00 per call) FlexCAN_Disable/58 (276913048 (estimated locally),1.00 per call) FlexCAN_ExitFreezeMode/57 (114863532 (estimated locally),1.00 per call) FlexCAN_Enable/56 (114863532 (estimated locally),1.00 per call) FlexCAN_EnterFreezeMode/55 (114863532 (estimated locally),1.00 per call) 
  Calls: 
maxMbNum.12305/86 (maxMbNum) @07f2d0d8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: FlexCAN_GetMaxMbNum/54 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
flexcanBase.12304/85 (flexcanBase) @07f2d090
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: FlexCAN_GetMaxMbNum/54 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
FlexCAN_ResetImaskBuff/84 (FlexCAN_ResetImaskBuff) @07f1bd20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: FlexCAN_Ip_au32ImaskBuff/49 (write)
  Referring: 
  Availability: available
  Function flags: count:357878150 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_ConfigCtrlOptions/83 (FlexCAN_ConfigCtrlOptions) @07f1bb60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_SetEnhancedRxFifoFilter/82 (FlexCAN_SetEnhancedRxFifoFilter) @07f1b9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:280015 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_EnableEnhancedRxFifo/81 (FlexCAN_EnableEnhancedRxFifo) @07f1b7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_IsEnhancedRxFifoAvailable/80 (1073741824 (estimated locally),1.00 per call) 
FlexCAN_IsEnhancedRxFifoAvailable/80 (FlexCAN_IsEnhancedRxFifoAvailable) @07f1b460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:566398813 (estimated locally) body optimize_size
  Called by: FlexCAN_EnableEnhancedRxFifo/81 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
FlexCAN_IsMbOutOfRange/79 (FlexCAN_IsMbOutOfRange) @07f1b2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_ReadEnhancedRxFifo/78 (FlexCAN_ReadEnhancedRxFifo) @07f1b0e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:118111600 (estimated locally) body optimize_size
  Called by: 
  Calls: DevAssert/0 (118111600 (estimated locally),1.00 per call) FlexCAN_ComputePayloadSize/52 (118111600 (estimated locally),1.00 per call) 
FlexCAN_ReadRxFifo/77 (FlexCAN_ReadRxFifo) @07f07e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:118111600 (estimated locally) body optimize_size
  Called by: 
  Calls: DevAssert/0 (118111600 (estimated locally),1.00 per call) FlexCAN_ComputePayloadSize/52 (118111600 (estimated locally),1.00 per call) 
FlexCAN_SetRxFifoFilter/76 (FlexCAN_SetRxFifoFilter) @07f07b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:590558001 (estimated locally) body optimize_size
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 (118111600 (estimated locally),0.20 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 (118111600 (estimated locally),0.20 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 (118111600 (estimated locally),0.20 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 (118111600 (estimated locally),0.20 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 (118111600 (estimated locally),0.20 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 (118111600 (estimated locally),0.20 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 (118111600 (estimated locally),0.20 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 (118111600 (estimated locally),0.20 per call) DevAssert/0 (590558001 (estimated locally),1.00 per call) 
FlexCAN_SetOperationMode/75 (FlexCAN_SetOperationMode) @07f079a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_SetMaxMsgBuffNum/74 (FlexCAN_SetMaxMsgBuffNum) @07f07380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:69103254 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_GetMbPayloadSize/64 (118111600 (estimated locally),1.71 per call) FlexCAN_GetMsgBuffRegion/53 (118111600 (estimated locally),1.71 per call) FlexCAN_GetMaxMbNum/54 (69103254 (estimated locally),1.00 per call) FlexCAN_GetMsgBuffRegion/53 (69103254 (estimated locally),1.00 per call) DevAssert/0 (69103254 (estimated locally),1.00 per call) FlexCAN_GetMbPayloadSize/64 (69103254 (estimated locally),1.00 per call) 
FlexCAN_SetTxMsgBuff/73 (FlexCAN_SetTxMsgBuff) @07f071c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: payload_code.12250/104 (read)
  Referring: 
  Availability: available
  Function flags: count:168730856 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_ComputePayloadSize/52 (118111600 (estimated locally),0.70 per call) DevAssert/0 (168730856 (estimated locally),1.00 per call) 
FlexCAN_GetMsgBuff/72 (FlexCAN_GetMsgBuff) @07efcd20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:118111600 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_GetMbPayloadSize/64 (38976828 (estimated locally),0.33 per call) FlexCAN_GetMbPayloadSize/64 (118111600 (estimated locally),1.00 per call) DevAssert/0 (118111600 (estimated locally),1.00 per call) FlexCAN_ComputePayloadSize/52 (118111600 (estimated locally),1.00 per call) FlexCAN_GetMsgBuffRegion/53 (118111600 (estimated locally),1.00 per call) 
FlexCAN_GetMsgBuffTimestamp/71 (FlexCAN_GetMsgBuffTimestamp) @07efc9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_GetMsgBuffRegion/53 (1073741824 (estimated locally),1.00 per call) 
FlexCAN_SetRxMsgBuff/70 (FlexCAN_SetRxMsgBuff) @07efc7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: DevAssert/0 (1073741824 (estimated locally),1.00 per call) FlexCAN_GetMsgBuffRegion/53 (1073741824 (estimated locally),1.00 per call) 
FlexCAN_EnableInterrupts/69 (FlexCAN_EnableInterrupts) @07efc620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: FlexCAN_Ip_au32ImaskBuff/49 (read)FlexCAN_Ip_au32ImaskBuff/49 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/54 (1073741824 (estimated locally),1.00 per call) 
FlexCAN_DisableInterrupts/68 (FlexCAN_DisableInterrupts) @07efc460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/54 (1073741824 (estimated locally),1.00 per call) 
FLEXCAN_ClearMsgBuffIntCmd/67 (FLEXCAN_ClearMsgBuffIntCmd) @07efc2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: FlexCAN_Ip_au32ImaskBuff/49 (write)FlexCAN_Ip_au32ImaskBuff/49 (read)FlexCAN_Ip_au32ImaskBuff/49 (write)FlexCAN_Ip_au32ImaskBuff/49 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/103 (354334802 (estimated locally),0.33 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/102 (354334802 (estimated locally),0.33 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/103 (354334802 (estimated locally),0.33 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/102 (354334802 (estimated locally),0.33 per call) 
FlexCAN_SetMsgBuffIntCmd/66 (FlexCAN_SetMsgBuffIntCmd) @07efc0e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: FlexCAN_Ip_au32ImaskBuff/49 (read)FlexCAN_Ip_au32ImaskBuff/49 (write)FlexCAN_Ip_au32ImaskBuff/49 (read)FlexCAN_Ip_au32ImaskBuff/49 (read)FlexCAN_Ip_au32ImaskBuff/49 (write)FlexCAN_Ip_au32ImaskBuff/49 (read)FlexCAN_Ip_au32ImaskBuff/49 (read)FlexCAN_Ip_au32ImaskBuff/49 (write)FlexCAN_Ip_au32ImaskBuff/49 (read)FlexCAN_Ip_au32ImaskBuff/49 (read)FlexCAN_Ip_au32ImaskBuff/49 (write)FlexCAN_Ip_au32ImaskBuff/49 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 (268435456 (estimated locally),0.25 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 (268435456 (estimated locally),0.25 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 (268435456 (estimated locally),0.25 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 (268435456 (estimated locally),0.25 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 (268435456 (estimated locally),0.25 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 (268435456 (estimated locally),0.25 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 (268435456 (estimated locally),0.25 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 (268435456 (estimated locally),0.25 per call) 
FlexCAN_LockRxMsgBuff/65 (FlexCAN_LockRxMsgBuff) @07ef2ee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_GetMsgBuffRegion/53 (1073741824 (estimated locally),1.00 per call) 
FlexCAN_GetMbPayloadSize/64 (FlexCAN_GetMbPayloadSize) @07ef2d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:397250652 (estimated locally) body optimize_size
  Called by: FlexCAN_SetMaxMsgBuffNum/74 (118111600 (estimated locally),1.71 per call) FlexCAN_SetMaxMsgBuffNum/74 (69103254 (estimated locally),1.00 per call) FlexCAN_GetMsgBuff/72 (38976828 (estimated locally),0.33 per call) FlexCAN_GetMsgBuff/72 (118111600 (estimated locally),1.00 per call) 
  Calls: FlexCAN_GetPayloadSize/63 (715863675 (estimated locally),1.80 per call) 
FlexCAN_GetPayloadSize/63 (FlexCAN_GetPayloadSize) @07ef2b60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: FlexCAN_GetMbPayloadSize/64 (715863675 (estimated locally),1.80 per call) FlexCAN_GetMsgBuffRegion/53 (715863675 (estimated locally),1.80 per call) 
  Calls: 
FlexCAN_SetPayloadSize/62 (FlexCAN_SetPayloadSize) @07ef29a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: DevAssert/0 (1073741824 (estimated locally),1.00 per call) DevAssert/0 (1073741824 (estimated locally),1.00 per call) 
FlexCAN_EnableRxFifo/61 (FlexCAN_EnableRxFifo) @07ef27e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:236223200 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/54 (236223200 (estimated locally),1.00 per call) 
FlexCAN_Init/60 (FlexCAN_Init) @07ef2540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:114863532 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/54 (37904965 (estimated locally),0.33 per call) FlexCAN_ClearRAM/51 (37904965 (estimated locally),0.33 per call) OsIf_GetElapsed/91 (1014686025 (estimated locally),8.83 per call) OsIf_GetCounter/90 (114863532 (estimated locally),1.00 per call) OsIf_MicrosToTicks/87 (114863532 (estimated locally),1.00 per call) 
FlexCAN_SetErrIntCmd/59 (FlexCAN_SetErrIntCmd) @07ef21c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06/99 (1073741824 (estimated locally),1.00 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06/98 (1073741824 (estimated locally),1.00 per call) 
FlexCAN_Disable/58 (FlexCAN_Disable) @07eeac40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:276913048 (estimated locally) body optimize_size
  Called by: 
  Calls: OsIf_GetElapsed/91 (1014686024 (estimated locally),3.66 per call) OsIf_GetCounter/90 (114863532 (estimated locally),0.41 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05/97 (114863532 (estimated locally),0.41 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05/96 (114863532 (estimated locally),0.41 per call) OsIf_MicrosToTicks/87 (276913048 (estimated locally),1.00 per call) 
FlexCAN_ExitFreezeMode/57 (FlexCAN_ExitFreezeMode) @07eea9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:114863532 (estimated locally) body optimize_size
  Called by: 
  Calls: OsIf_GetElapsed/91 (1014686025 (estimated locally),8.83 per call) OsIf_GetCounter/90 (114863532 (estimated locally),1.00 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04/95 (114863532 (estimated locally),1.00 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04/94 (114863532 (estimated locally),1.00 per call) OsIf_MicrosToTicks/87 (114863532 (estimated locally),1.00 per call) 
FlexCAN_Enable/56 (FlexCAN_Enable) @07eea620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:114863532 (estimated locally) body optimize_size
  Called by: 
  Calls: OsIf_GetElapsed/91 (1014686025 (estimated locally),8.83 per call) OsIf_GetCounter/90 (114863532 (estimated locally),1.00 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03/93 (114863532 (estimated locally),1.00 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03/92 (114863532 (estimated locally),1.00 per call) OsIf_MicrosToTicks/87 (114863532 (estimated locally),1.00 per call) 
FlexCAN_EnterFreezeMode/55 (FlexCAN_EnterFreezeMode) @07eea460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:114863532 (estimated locally) body optimize_size
  Called by: 
  Calls: OsIf_GetElapsed/91 (1014686025 (estimated locally),8.83 per call) OsIf_GetCounter/90 (114863532 (estimated locally),1.00 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02/89 (114863532 (estimated locally),1.00 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02/88 (114863532 (estimated locally),1.00 per call) OsIf_MicrosToTicks/87 (114863532 (estimated locally),1.00 per call) 
FlexCAN_GetMaxMbNum/54 (FlexCAN_GetMaxMbNum) @07eea0e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: flexcanBase.12304/85 (read)maxMbNum.12305/86 (read)
  Referring: 
  Availability: available
  Function flags: count:214748364 (estimated locally) body optimize_size
  Called by: FlexCAN_SetMaxMsgBuffNum/74 (69103254 (estimated locally),1.00 per call) FlexCAN_EnableInterrupts/69 (1073741824 (estimated locally),1.00 per call) FlexCAN_DisableInterrupts/68 (1073741824 (estimated locally),1.00 per call) FlexCAN_EnableRxFifo/61 (236223200 (estimated locally),1.00 per call) FlexCAN_Init/60 (37904965 (estimated locally),0.33 per call) FlexCAN_ClearRAM/51 (118111600 (estimated locally),1.00 per call) 
  Calls: 
FlexCAN_GetMsgBuffRegion/53 (FlexCAN_GetMsgBuffRegion) @07edb7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:397250652 (estimated locally) body optimize_size
  Called by: FlexCAN_SetMaxMsgBuffNum/74 (118111600 (estimated locally),1.71 per call) FlexCAN_SetMaxMsgBuffNum/74 (69103254 (estimated locally),1.00 per call) FlexCAN_GetMsgBuff/72 (118111600 (estimated locally),1.00 per call) FlexCAN_GetMsgBuffTimestamp/71 (1073741824 (estimated locally),1.00 per call) FlexCAN_SetRxMsgBuff/70 (1073741824 (estimated locally),1.00 per call) FlexCAN_LockRxMsgBuff/65 (1073741824 (estimated locally),1.00 per call) 
  Calls: FlexCAN_GetPayloadSize/63 (715863675 (estimated locally),1.80 per call) 
FlexCAN_ComputePayloadSize/52 (FlexCAN_ComputePayloadSize) @07edbe00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: FlexCAN_ReadEnhancedRxFifo/78 (118111600 (estimated locally),1.00 per call) FlexCAN_ReadRxFifo/77 (118111600 (estimated locally),1.00 per call) FlexCAN_SetTxMsgBuff/73 (118111600 (estimated locally),0.70 per call) FlexCAN_GetMsgBuff/72 (118111600 (estimated locally),1.00 per call) 
  Calls: FlexCAN_ComputePayloadSize.part.0/109 (536870912 (estimated locally),0.50 per call) 
FlexCAN_ClearRAM/51 (FlexCAN_ClearRAM) @07edbc40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:118111600 (estimated locally) body local optimize_size
  Called by: FlexCAN_Init/60 (37904965 (estimated locally),0.33 per call) 
  Calls: FlexCAN_GetMaxMbNum/54 (118111600 (estimated locally),1.00 per call) 
FlexCAN_Ip_au32ImaskBuff/49 (FlexCAN_Ip_au32ImaskBuff) @07ebb828
  Type: variable definition analyzed
  Visibility: force_output prevailing_def_ironly
  References: 
  Referring: FLEXCAN_ClearMsgBuffIntCmd/67 (write)FlexCAN_EnableInterrupts/69 (read)FlexCAN_SetMsgBuffIntCmd/66 (write)FlexCAN_SetMsgBuffIntCmd/66 (read)FLEXCAN_ClearMsgBuffIntCmd/67 (read)FlexCAN_SetMsgBuffIntCmd/66 (read)FlexCAN_SetMsgBuffIntCmd/66 (read)FlexCAN_SetMsgBuffIntCmd/66 (read)FlexCAN_SetMsgBuffIntCmd/66 (write)FlexCAN_SetMsgBuffIntCmd/66 (read)FlexCAN_SetMsgBuffIntCmd/66 (read)FlexCAN_SetMsgBuffIntCmd/66 (write)FlexCAN_SetMsgBuffIntCmd/66 (read)FlexCAN_SetMsgBuffIntCmd/66 (read)FlexCAN_SetMsgBuffIntCmd/66 (write)FLEXCAN_ClearMsgBuffIntCmd/67 (write)FLEXCAN_ClearMsgBuffIntCmd/67 (read)FlexCAN_EnableInterrupts/69 (read)FlexCAN_ResetImaskBuff/84 (write)
  Availability: available
  Varpool flags:
DevAssert/0 (DevAssert) @07e2bc40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:214748 (estimated locally) body local optimize_size
  Called by: FlexCAN_ReadEnhancedRxFifo/78 (118111600 (estimated locally),1.00 per call) FlexCAN_ReadRxFifo/77 (118111600 (estimated locally),1.00 per call) FlexCAN_SetRxFifoFilter/76 (590558001 (estimated locally),1.00 per call) FlexCAN_SetMaxMsgBuffNum/74 (69103254 (estimated locally),1.00 per call) FlexCAN_SetTxMsgBuff/73 (168730856 (estimated locally),1.00 per call) FlexCAN_GetMsgBuff/72 (118111600 (estimated locally),1.00 per call) FlexCAN_SetRxMsgBuff/70 (1073741824 (estimated locally),1.00 per call) FlexCAN_SetPayloadSize/62 (1073741824 (estimated locally),1.00 per call) FlexCAN_SetPayloadSize/62 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
FlexCAN_ComputePayloadSize.part.0 (uint8 dlcValue)
{
  uint8 ret;
  unsigned char _2;
  unsigned char _4;

  <bb 6> [local count: 1073741824]:

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _2 = dlcValue_1(D) + 247;
  if (_2 <= 6)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 536870913]:
<L0>:
  ret_3 = 8;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
<L1>:
  _4 = CSWTCH.40[_2];
  ret_5 = _4;

  <bb 5> [local count: 1073741824]:
  # ret_6 = PHI <ret_3(3), ret_5(4)>
<L2>:
<L3>:
  # DEBUG ret => ret_6
  # DEBUG BEGIN_STMT
  return ret_6;

}


FlexCAN_ResetImaskBuff (uint8 Instance)
{
  uint8 ImaskCnt;
  int _1;
  int _2;

  <bb 2> [local count: 357878150]:
  # DEBUG BEGIN_STMT
  # DEBUG ImaskCnt => 0
  # DEBUG BEGIN_STMT
  # DEBUG ImaskCnt => 0
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 715863676]:
  # DEBUG BEGIN_STMT
  _1 = (int) Instance_6(D);
  _2 = (int) ImaskCnt_3;
  FlexCAN_Ip_au32ImaskBuff[_1][_2] ={v} 0;
  # DEBUG BEGIN_STMT
  ImaskCnt_8 = ImaskCnt_3 + 1;
  # DEBUG ImaskCnt => ImaskCnt_8

  <bb 4> [local count: 1073741824]:
  # ImaskCnt_3 = PHI <0(2), ImaskCnt_8(3)>
  # DEBUG ImaskCnt => ImaskCnt_3
  # DEBUG BEGIN_STMT
  if (ImaskCnt_3 != 2)
    goto <bb 3>; [66.67%]
  else
    goto <bb 5>; [33.33%]

  <bb 5> [local count: 357878150]:
  return;

}


FlexCAN_ConfigCtrlOptions (struct FLEXCAN_Type * pBase, uint32 u32Options)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;
  long unsigned int _52;
  long unsigned int _53;
  long unsigned int _54;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = u32Options_17(D) & 32;
  if (_1 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 1
  # DEBUG INLINE_ENTRY FlexCAN_SetIsoCan
  # DEBUG BEGIN_STMT
  _20 ={v} pBase_19(D)->CTRL2;
  _21 = _20 & 4294963199;
  _22 = _21 | 4096;
  pBase_19(D)->CTRL2 ={v} _22;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 0
  # DEBUG INLINE_ENTRY FlexCAN_SetIsoCan
  # DEBUG BEGIN_STMT
  _23 ={v} pBase_19(D)->CTRL2;
  _24 = _23 & 4294963199;
  pBase_19(D)->CTRL2 ={v} _24;

  <bb 5> [local count: 1073741824]:
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG BEGIN_STMT
  _2 = u32Options_17(D) & 64;
  if (_2 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 6> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 1
  # DEBUG INLINE_ENTRY FlexCAN_SetEntireFrameArbitrationFieldComparison
  # DEBUG BEGIN_STMT
  _25 ={v} pBase_19(D)->CTRL2;
  _26 = _25 & 4294901759;
  _27 = _26 | 65536;
  pBase_19(D)->CTRL2 ={v} _27;
  goto <bb 8>; [100.00%]

  <bb 7> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 0
  # DEBUG INLINE_ENTRY FlexCAN_SetEntireFrameArbitrationFieldComparison
  # DEBUG BEGIN_STMT
  _28 ={v} pBase_19(D)->CTRL2;
  _29 = _28 & 4294901759;
  pBase_19(D)->CTRL2 ={v} _29;

  <bb 8> [local count: 1073741824]:
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG BEGIN_STMT
  _3 = u32Options_17(D) & 8;
  if (_3 != 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 1
  # DEBUG INLINE_ENTRY FlexCAN_SetProtocolException
  # DEBUG BEGIN_STMT
  _30 ={v} pBase_19(D)->CTRL2;
  _31 = _30 & 4294950911;
  _32 = _31 | 16384;
  pBase_19(D)->CTRL2 ={v} _32;
  goto <bb 11>; [100.00%]

  <bb 10> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 0
  # DEBUG INLINE_ENTRY FlexCAN_SetProtocolException
  # DEBUG BEGIN_STMT
  _33 ={v} pBase_19(D)->CTRL2;
  _34 = _33 & 4294950911;
  pBase_19(D)->CTRL2 ={v} _34;

  <bb 11> [local count: 1073741824]:
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG BEGIN_STMT
  _4 = u32Options_17(D) & 2;
  if (_4 != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 12> [local count: 536870913]:
  _5 ={v} pBase_19(D)->MCR;
  _6 = _5 & 2048;
  if (_6 == 0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 13> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 1
  # DEBUG INLINE_ENTRY FlexCAN_CanBitSampling
  # DEBUG BEGIN_STMT
  _35 ={v} pBase_19(D)->CTRL1;
  _36 = _35 & 4294967167;
  _37 = _36 | 128;
  pBase_19(D)->CTRL1 ={v} _37;
  goto <bb 15>; [100.00%]

  <bb 14> [local count: 805306369]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 0
  # DEBUG INLINE_ENTRY FlexCAN_CanBitSampling
  # DEBUG BEGIN_STMT
  _38 ={v} pBase_19(D)->CTRL1;
  _39 = _38 & 4294967167;
  pBase_19(D)->CTRL1 ={v} _39;

  <bb 15> [local count: 1073741824]:
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG BEGIN_STMT
  _7 = u32Options_17(D) & 4;
  if (_7 != 0)
    goto <bb 16>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 16> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 1
  # DEBUG INLINE_ENTRY FlexCAN_SetBusOffAutorecovery
  # DEBUG BEGIN_STMT
  _40 ={v} pBase_19(D)->CTRL1;
  _41 = _40 & 4294967231;
  pBase_19(D)->CTRL1 ={v} _41;
  goto <bb 18>; [100.00%]

  <bb 17> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 0
  # DEBUG INLINE_ENTRY FlexCAN_SetBusOffAutorecovery
  # DEBUG BEGIN_STMT
  _42 ={v} pBase_19(D)->CTRL1;
  _43 = _42 & 4294967231;
  _44 = _43 | 64;
  pBase_19(D)->CTRL1 ={v} _44;

  <bb 18> [local count: 1073741824]:
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG BEGIN_STMT
  _8 = u32Options_17(D) & 1;
  if (_8 != 0)
    goto <bb 19>; [50.00%]
  else
    goto <bb 20>; [50.00%]

  <bb 19> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 1
  # DEBUG INLINE_ENTRY FlexCAN_SetRemoteReqStore
  # DEBUG BEGIN_STMT
  _45 ={v} pBase_19(D)->CTRL2;
  _46 = _45 & 4294836223;
  _47 = _46 | 131072;
  pBase_19(D)->CTRL2 ={v} _47;
  goto <bb 21>; [100.00%]

  <bb 20> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 0
  # DEBUG INLINE_ENTRY FlexCAN_SetRemoteReqStore
  # DEBUG BEGIN_STMT
  _48 ={v} pBase_19(D)->CTRL2;
  _49 = _48 & 4294836223;
  pBase_19(D)->CTRL2 ={v} _49;

  <bb 21> [local count: 1073741824]:
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG BEGIN_STMT
  _9 = u32Options_17(D) & 16;
  if (_9 != 0)
    goto <bb 22>; [50.00%]
  else
    goto <bb 23>; [50.00%]

  <bb 22> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 1
  # DEBUG INLINE_ENTRY FlexCAN_SetEdgeFilter
  # DEBUG BEGIN_STMT
  _50 ={v} pBase_19(D)->CTRL2;
  _51 = _50 & 4294965247;
  pBase_19(D)->CTRL2 ={v} _51;
  goto <bb 24>; [100.00%]

  <bb 23> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_19(D)
  # DEBUG enable => 0
  # DEBUG INLINE_ENTRY FlexCAN_SetEdgeFilter
  # DEBUG BEGIN_STMT
  _52 ={v} pBase_19(D)->CTRL2;
  _53 = _52 & 4294965247;
  _54 = _53 | 2048;
  pBase_19(D)->CTRL2 ={v} _54;

  <bb 24> [local count: 1073741824]:
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG base => NULL
  # DEBUG enable => NULL
  return;

}


FlexCAN_SetEnhancedRxFifoFilter (struct FLEXCAN_Type * base, const struct Flexcan_Ip_EnhancedIdTableType * idFilterTable)
{
  volatile boolean x;
  volatile boolean x;
  volatile uint32 * FilterStdIDTable;
  volatile uint32 * FilterExtIDTable;
  uint32 Val;
  uint32 Val1;
  uint32 Val2;
  uint32 NumOfStdIDFilter;
  uint32 NumOfExtIDFilter;
  uint32 NumOfEnhancedFilter;
  uint32 n;
  uint32 j;
  uint32 i;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  const struct Flexcan_Ip_EnhancedIdTableType * _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  volatile uint32 * _20;
  long unsigned int _21;
  <unnamed type> _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  unsigned char _28;
  unsigned char _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  volatile uint32 * _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  sizetype _37;
  sizetype _38;
  volatile uint32 * _39;
  long unsigned int _40;
  <unnamed type> _41;
  long unsigned int _42;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  unsigned char x.6_82;
  unsigned char x.6_83;

  <bb 2> [local count: 280015]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Val2 => 0
  # DEBUG Val1 => 0
  # DEBUG Val => 0
  # DEBUG BEGIN_STMT
  # DEBUG FilterExtIDTable => 0B
  # DEBUG BEGIN_STMT
  # DEBUG FilterStdIDTable => 0B
  # DEBUG BEGIN_STMT
  _1 ={v} base_62(D)->ERFCR;
  _2 = _1 >> 8;
  NumOfEnhancedFilter_63 = _2 & 63;
  # DEBUG NumOfEnhancedFilter => NumOfEnhancedFilter_63
  # DEBUG BEGIN_STMT
  _3 ={v} base_62(D)->ERFCR;
  _4 = _3 >> 16;
  NumOfExtIDFilter_64 = _4 & 127;
  # DEBUG NumOfExtIDFilter => NumOfExtIDFilter_64
  # DEBUG BEGIN_STMT
  _5 = NumOfEnhancedFilter_63 - NumOfExtIDFilter_64;
  _6 = _5 + 1;
  NumOfStdIDFilter_65 = _6 * 2;
  # DEBUG NumOfStdIDFilter => NumOfStdIDFilter_65
  # DEBUG BEGIN_STMT
  FilterExtIDTable_66 = &base_62(D)->ERFFEL[0];
  # DEBUG FilterExtIDTable => FilterExtIDTable_66
  # DEBUG BEGIN_STMT
  _7 = NumOfExtIDFilter_64 * 2;
  FilterStdIDTable_67 = &base_62(D)->ERFFEL[_7];
  # DEBUG FilterStdIDTable => FilterStdIDTable_67
  # DEBUG BEGIN_STMT
  # DEBUG j => 0
  # DEBUG BEGIN_STMT
  # DEBUG n => 0
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  goto <bb 27>; [100.00%]

  <bb 3> [local count: 1717984]:
  # DEBUG BEGIN_STMT
  _8 = i_48 * 16;
  _9 = idFilterTable_68(D) + _8;
  _10 = _9->isExtendedFrame;
  if (_10 == 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 4> [local count: 858992]:
  # DEBUG BEGIN_STMT
  # DEBUG Val => 0
  # DEBUG BEGIN_STMT
  _11 = _9->rtr2;
  if (_11 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 5> [local count: 429496]:
  # DEBUG BEGIN_STMT
  # DEBUG Val => 134217728

  <bb 6> [local count: 858992]:
  # Val_55 = PHI <0(4), 134217728(5)>
  # DEBUG Val => Val_55
  # DEBUG BEGIN_STMT
  _12 = _9->rtr1;
  if (_12 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 429496]:
  # DEBUG BEGIN_STMT
  Val_75 = Val_55 | 2048;
  # DEBUG Val => Val_75

  <bb 8> [local count: 858992]:
  # Val_56 = PHI <Val_55(6), Val_75(7)>
  # DEBUG Val => Val_56
  # DEBUG BEGIN_STMT
  _13 = _9->id2;
  _14 = _13 << 16;
  _15 = _14 & 134152192;
  _16 = _9->id1;
  _17 = _16 & 2047;
  _18 = _15 | _17;
  _19 = j_50 * 4;
  _20 = FilterStdIDTable_67 + _19;
  _21 = _18 | Val_56;
  *_20 ={v} _21;
  # DEBUG BEGIN_STMT
  _22 = _9->filterType;
  switch (_22) <default: <L9> [25.00%], case 0: <L6> [25.00%], case 1: <L7> [25.00%], case 2: <L8> [25.00%]>

  <bb 9> [local count: 214748]:
<L6>:
  # DEBUG BEGIN_STMT
  _23 ={v} *_20;
  *_20 ={v} _23;
  # DEBUG BEGIN_STMT
  goto <bb 14>; [100.00%]

  <bb 10> [local count: 214748]:
<L7>:
  # DEBUG BEGIN_STMT
  _24 ={v} *_20;
  _25 = _24 | 1073741824;
  *_20 ={v} _25;
  # DEBUG BEGIN_STMT
  goto <bb 14>; [100.00%]

  <bb 11> [local count: 214748]:
<L8>:
  # DEBUG BEGIN_STMT
  _26 ={v} *_20;
  _27 = _26 | 2147483648;
  *_20 ={v} _27;
  # DEBUG BEGIN_STMT
  goto <bb 14>; [100.00%]

  <bb 12> [local count: 214748]:
<L9>:
  # DEBUG BEGIN_STMT
  x ={v} 0;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.6_82 ={v} x;
  if (x.6_82 != 0)
    goto <bb 14>; [50.00%]
  else
    goto <bb 29>; [50.00%]

  <bb 29> [local count: 107374]:

  <bb 13> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  __asm__ __volatile__("BKPT #0");
  # DEBUG BEGIN_STMT

  <bb 31> [local count: 1073741824]:
  goto <bb 13>; [100.00%]

  <bb 14> [local count: 751618]:
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  j_80 = j_50 + 1;
  # DEBUG j => j_80
  goto <bb 26>; [100.00%]

  <bb 15> [local count: 858992]:
  # DEBUG BEGIN_STMT
  # DEBUG Val2 => 0
  # DEBUG BEGIN_STMT
  # DEBUG Val1 => 0
  # DEBUG BEGIN_STMT
  _28 = _9->rtr2;
  if (_28 != 0)
    goto <bb 16>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 16> [local count: 429496]:
  # DEBUG BEGIN_STMT
  # DEBUG Val2 => 536870912

  <bb 17> [local count: 858992]:
  # Val2_53 = PHI <0(15), 536870912(16)>
  # DEBUG Val2 => Val2_53
  # DEBUG BEGIN_STMT
  _29 = _9->rtr1;
  if (_29 != 0)
    goto <bb 18>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 18> [local count: 429496]:
  # DEBUG BEGIN_STMT
  # DEBUG Val1 => 536870912

  <bb 19> [local count: 858992]:
  # Val1_54 = PHI <0(17), 536870912(18)>
  # DEBUG Val1 => Val1_54
  # DEBUG BEGIN_STMT
  _30 = _9->id2;
  _31 = _30 & 536870911;
  _32 = n_52 * 4;
  _33 = FilterExtIDTable_66 + _32;
  _34 = _31 | Val2_53;
  *_33 ={v} _34;
  # DEBUG BEGIN_STMT
  _35 = _9->id1;
  _36 = _35 & 536870911;
  _37 = n_52 + 1;
  _38 = _37 * 4;
  _39 = FilterExtIDTable_66 + _38;
  _40 = _36 | Val1_54;
  *_39 ={v} _40;
  # DEBUG BEGIN_STMT
  _41 = _9->filterType;
  switch (_41) <default: <L19> [25.00%], case 0: <L16> [25.00%], case 1: <L17> [25.00%], case 2: <L18> [25.00%]>

  <bb 20> [local count: 214748]:
<L16>:
  # DEBUG BEGIN_STMT
  _42 ={v} *_33;
  *_33 ={v} _42;
  # DEBUG BEGIN_STMT
  goto <bb 25>; [100.00%]

  <bb 21> [local count: 214748]:
<L17>:
  # DEBUG BEGIN_STMT
  _43 ={v} *_33;
  _44 = _43 | 1073741824;
  *_33 ={v} _44;
  # DEBUG BEGIN_STMT
  goto <bb 25>; [100.00%]

  <bb 22> [local count: 214748]:
<L18>:
  # DEBUG BEGIN_STMT
  _45 ={v} *_33;
  _46 = _45 | 2147483648;
  *_33 ={v} _46;
  # DEBUG BEGIN_STMT
  goto <bb 25>; [100.00%]

  <bb 23> [local count: 214748]:
<L19>:
  # DEBUG BEGIN_STMT
  x ={v} 0;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.6_83 ={v} x;
  if (x.6_83 != 0)
    goto <bb 25>; [50.00%]
  else
    goto <bb 30>; [50.00%]

  <bb 30> [local count: 107374]:

  <bb 24> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  __asm__ __volatile__("BKPT #0");
  # DEBUG BEGIN_STMT

  <bb 32> [local count: 1073741824]:
  goto <bb 24>; [100.00%]

  <bb 25> [local count: 751618]:
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  n_74 = n_52 + 2;
  # DEBUG n => n_74

  <bb 26> [local count: 1503236]:
  # j_49 = PHI <j_80(14), j_50(25)>
  # n_51 = PHI <n_52(14), n_74(25)>
  # DEBUG n => n_51
  # DEBUG j => j_49
  # DEBUG BEGIN_STMT
  i_81 = i_48 + 1;
  # DEBUG i => i_81

  <bb 27> [local count: 1783251]:
  # i_48 = PHI <0(2), i_81(26)>
  # j_50 = PHI <0(2), j_49(26)>
  # n_52 = PHI <0(2), n_51(26)>
  # DEBUG n => n_52
  # DEBUG j => j_50
  # DEBUG i => i_48
  # DEBUG BEGIN_STMT
  _47 = NumOfExtIDFilter_64 + NumOfStdIDFilter_65;
  if (_47 > i_48)
    goto <bb 3>; [96.34%]
  else
    goto <bb 28>; [3.66%]

  <bb 28> [local count: 65267]:
  return;

}


FlexCAN_EnableEnhancedRxFifo (struct FLEXCAN_Type * base, uint32 numOfStdIDFilters, uint32 numOfExtIDFilters, uint32 numOfWatermark)
{
  uint32 NumOfEnhancedFilters;
  Flexcan_Ip_StatusType Stat;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG Stat => 0
  # DEBUG BEGIN_STMT
  # DEBUG NumOfEnhancedFilters => 0
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_IsEnhancedRxFifoAvailable (base_32(D));
  if (_1 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _2 = numOfStdIDFilters_33(D) >> 1;
  _3 = _2 + numOfExtIDFilters_34(D);
  NumOfEnhancedFilters_35 = _3 + 4294967295;
  # DEBUG NumOfEnhancedFilters => NumOfEnhancedFilters_35
  # DEBUG BEGIN_STMT
  if (numOfStdIDFilters_33(D) == 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 4> [local count: 268435456]:
  if (numOfExtIDFilters_34(D) == 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 5> [local count: 134217728]:
  # DEBUG BEGIN_STMT
  # DEBUG Stat => 1

  <bb 6> [local count: 536870913]:
  # Stat_27 = PHI <0(3), 0(4), 1(5)>
  # DEBUG Stat => Stat_27
  # DEBUG BEGIN_STMT
  _4 = numOfStdIDFilters_33(D) & 1;
  if (_4 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  # DEBUG Stat => 1

  <bb 8> [local count: 536870913]:
  # Stat_28 = PHI <Stat_27(6), 1(7)>
  # DEBUG Stat => Stat_28
  # DEBUG BEGIN_STMT
  _5 ={v} base_32(D)->MCR;
  _6 = _5 & 536870912;
  if (_6 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 9> [local count: 268435456]:
  # DEBUG Stat => Stat_28
  # DEBUG BEGIN_STMT
  if (Stat_28 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [local count: 134217728]:
  # DEBUG BEGIN_STMT
  _7 ={v} base_32(D)->ERFCR;
  _8 = _7 | 2147483648;
  base_32(D)->ERFCR ={v} _8;
  # DEBUG BEGIN_STMT
  _9 ={v} base_32(D)->ERFSR;
  _10 = _9 | 134217728;
  base_32(D)->ERFSR ={v} _10;
  # DEBUG BEGIN_STMT
  _11 ={v} base_32(D)->ERFSR;
  _12 = _11 & 268435455;
  base_32(D)->ERFSR ={v} _12;
  # DEBUG BEGIN_STMT
  _13 ={v} base_32(D)->ERFCR;
  _14 = _13 & 4294951167;
  _15 = NumOfEnhancedFilters_35 << 8;
  _16 = _15 & 16128;
  _17 = _14 | _16;
  base_32(D)->ERFCR ={v} _17;
  # DEBUG BEGIN_STMT
  _18 ={v} base_32(D)->ERFCR;
  _19 = _18 & 4286644223;
  _20 = numOfExtIDFilters_34(D) << 16;
  _21 = _20 & 8323072;
  _22 = _19 | _21;
  base_32(D)->ERFCR ={v} _22;
  # DEBUG BEGIN_STMT
  _23 ={v} base_32(D)->ERFCR;
  _24 = _23 & 4294967264;
  _25 = numOfWatermark_41(D) & 31;
  _26 = _24 | _25;
  base_32(D)->ERFCR ={v} _26;

  <bb 11> [local count: 1073741824]:
  # Stat_29 = PHI <0(10), 1(2), Stat_28(9), 1(8)>
  # DEBUG Stat => Stat_29
  # DEBUG BEGIN_STMT
  return Stat_29;

}


FlexCAN_IsEnhancedRxFifoAvailable (const struct FLEXCAN_Type * base)
{
  boolean ReturnValue;
  uint32 i;

  <bb 2> [local count: 566398813]:
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (base_4(D) == 1076903936B)
    goto <bb 5>; [5.50%]
  else
    goto <bb 6>; [94.50%]

  <bb 6> [local count: 507343012]:

  <bb 4> [local count: 1073741824]:
  # i_1 = PHI <0(2), 1(6)>
  # DEBUG i => i_1
  # DEBUG BEGIN_STMT
  if (i_1 == 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 566398813]:
  # ReturnValue_2 = PHI <1(3), 0(4)>
  # DEBUG ReturnValue => ReturnValue_2
  # DEBUG BEGIN_STMT
  return ReturnValue_2;

}


FlexCAN_IsMbOutOfRange (const struct FLEXCAN_Type * pBase, uint8 u8MbIndex, boolean bIsLegacyFifoEn, uint32 u32MaxMbNum)
{
  uint32 u32NumOfMbOccupiedByFiFo;
  uint32 u32NumOfFiFoElement;
  boolean ReturnValue;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0
  # DEBUG BEGIN_STMT
  # DEBUG u32NumOfFiFoElement => 0
  # DEBUG BEGIN_STMT
  # DEBUG u32NumOfMbOccupiedByFiFo => 0
  # DEBUG BEGIN_STMT
  _1 = (unsigned char) u32MaxMbNum_9(D);
  if (_1 <= u8MbIndex_10(D))
    goto <bb 6>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (bIsLegacyFifoEn_11(D) == 1)
    goto <bb 4>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 4> [local count: 182536110]:
  # DEBUG BEGIN_STMT
  _2 ={v} pBase_13(D)->CTRL2;
  _3 = _2 >> 24;
  u32NumOfFiFoElement_14 = _3 & 15;
  # DEBUG u32NumOfFiFoElement => u32NumOfFiFoElement_14
  # DEBUG BEGIN_STMT
  _4 = u32NumOfFiFoElement_14 + 1;
  _5 = _4 * 8;
  _6 = _5 >> 2;
  u32NumOfMbOccupiedByFiFo_15 = _6 + 5;
  # DEBUG u32NumOfMbOccupiedByFiFo => u32NumOfMbOccupiedByFiFo_15
  # DEBUG BEGIN_STMT
  _7 = (long unsigned int) u8MbIndex_10(D);
  if (_7 <= u32NumOfMbOccupiedByFiFo_15)
    goto <bb 5>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 5> [local count: 91268055]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 1

  <bb 6> [local count: 1073741824]:
  # ReturnValue_8 = PHI <1(2), 1(5), 0(3), 0(4)>
  # DEBUG ReturnValue => ReturnValue_8
  # DEBUG BEGIN_STMT
  return ReturnValue_8;

}


FlexCAN_ReadEnhancedRxFifo (const struct FLEXCAN_Type * base, struct Flexcan_Ip_MsgBuffType * rxFifo)
{
  uint8 can_real_payload;
  uint8 flexcan_mb_dlc_value;
  uint32 * MsgData_32;
  const uint32 * Flexcan_Mb_Data_32;
  const uint32 * Flexcan_Mb;
  uint8 Idhit_Offset;
  uint32 MbWord;
  uint32 DataByte;
  long unsigned int base.17_1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  _Bool _6;
  unsigned char _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  unsigned char _14;
  unsigned char _15;
  unsigned int _16;
  unsigned int _17;
  const uint32 * _18;
  long unsigned int _19;
  unsigned char _20;
  unsigned char _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  const uint32 * _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  uint32 * _34;
  long unsigned int _35;
  long unsigned int _36;
  uint8 iftmp.18_39;

  <bb 2> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  base.17_1 = (long unsigned int) base_42(D);
  _2 = base.17_1 + 8192;
  Flexcan_Mb_43 = (const uint32 *) _2;
  # DEBUG Flexcan_Mb => Flexcan_Mb_43
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Id => Flexcan_Mb_43 + 4
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Data_32_44 = Flexcan_Mb_43 + 8;
  # DEBUG Flexcan_Mb_Data_32 => Flexcan_Mb_Data_32_44
  # DEBUG BEGIN_STMT
  # DEBUG MsgData_32 => 0B
  # DEBUG BEGIN_STMT
  _3 ={v} *Flexcan_Mb_43;
  _4 = _3 >> 16;
  _5 = (unsigned char) _4;
  flexcan_mb_dlc_value_46 = _5 & 15;
  # DEBUG flexcan_mb_dlc_value => flexcan_mb_dlc_value_46
  # DEBUG BEGIN_STMT
  can_real_payload_47 = FlexCAN_ComputePayloadSize (flexcan_mb_dlc_value_46);
  # DEBUG can_real_payload => can_real_payload_47
  # DEBUG BEGIN_STMT
  _6 = rxFifo_48(D) != 0B;
  _7 = (unsigned char) _6;
  DevAssert (_7);
  # DEBUG BEGIN_STMT
  MsgData_32_50 = &rxFifo_48(D)->data;
  # DEBUG MsgData_32 => MsgData_32_50
  # DEBUG BEGIN_STMT
  rxFifo_48(D)->dataLen = can_real_payload_47;
  # DEBUG BEGIN_STMT
  _8 ={v} *Flexcan_Mb_43;
  rxFifo_48(D)->cs = _8;
  # DEBUG BEGIN_STMT
  _9 = _8 & 2097152;
  if (_9 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  _10 ={v} MEM[(const uint32 *)Flexcan_Mb_43 + 4B];
  rxFifo_48(D)->msgId = _10;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  _11 ={v} MEM[(const uint32 *)Flexcan_Mb_43 + 4B];
  _12 = _11 >> 18;
  rxFifo_48(D)->msgId = _12;

  <bb 5> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _13 = _8 & 1048576;
  if (_13 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 6> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  # DEBUG can_real_payload => 0

  <bb 7> [local count: 118111600]:
  # can_real_payload_38 = PHI <can_real_payload_47(5), 0(6)>
  # DEBUG can_real_payload => can_real_payload_38
  # DEBUG BEGIN_STMT
  _14 = can_real_payload_38 >> 2;
  _15 = can_real_payload_38 & 3;
  if (_15 != 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 59055800]:

  <bb 9> [local count: 118111600]:
  # iftmp.18_39 = PHI <1(7), 0(8)>
  Idhit_Offset_55 = _14 + iftmp.18_39;
  # DEBUG Idhit_Offset => Idhit_Offset_55
  # DEBUG BEGIN_STMT
  _16 = (unsigned int) Idhit_Offset_55;
  _17 = _16 * 4;
  _18 = Flexcan_Mb_Data_32_44 + _17;
  _19 ={v} *_18;
  _20 = (unsigned char) _19;
  _21 = _20 & 127;
  rxFifo_48(D)->id_hit = _21;
  # DEBUG BEGIN_STMT
  _22 = _8 & 65535;
  rxFifo_48(D)->time_stamp = _22;
  # DEBUG BEGIN_STMT
  # DEBUG DataByte => 0
  goto <bb 11>; [100.00%]

  <bb 10> [local count: 955630223]:
  # DEBUG BEGIN_STMT
  _23 = DataByte_37 >> 2;
  _24 = _23 * 4;
  _25 = Flexcan_Mb_Data_32_44 + _24;
  MbWord_58 ={v} *_25;
  # DEBUG MbWord => MbWord_58
  # DEBUG BEGIN_STMT
  _26 = MbWord_58 >> 24;
  _27 = MbWord_58 >> 8;
  _28 = _27 & 65280;
  _29 = _26 | _28;
  _30 = MbWord_58 << 8;
  _31 = _30 & 16711680;
  _32 = _29 | _31;
  _33 = MbWord_58 << 24;
  _34 = MsgData_32_50 + _24;
  _35 = _32 | _33;
  *_34 = _35;
  # DEBUG BEGIN_STMT
  DataByte_60 = DataByte_37 + 4;
  # DEBUG DataByte => DataByte_60

  <bb 11> [local count: 1073741824]:
  # DataByte_37 = PHI <0(9), DataByte_60(10)>
  # DEBUG DataByte => DataByte_37
  # DEBUG BEGIN_STMT
  _36 = (long unsigned int) can_real_payload_38;
  if (_36 > DataByte_37)
    goto <bb 10>; [89.00%]
  else
    goto <bb 12>; [11.00%]

  <bb 12> [local count: 118111601]:
  return;

}


FlexCAN_ReadRxFifo (const struct FLEXCAN_Type * base, struct Flexcan_Ip_MsgBuffType * rxFifo)
{
  uint8 can_real_payload;
  uint8 flexcan_mb_dlc_value;
  uint32 * msgData_32;
  const uint32 * flexcan_mb;
  uint32 MbWord;
  uint32 DataByte;
  long unsigned int base.16_1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  _Bool _6;
  unsigned char _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  unsigned char _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  const uint32 * _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  uint32 * _27;
  long unsigned int _28;
  long unsigned int _29;
  sizetype _42;

  <bb 2> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  base.16_1 = (long unsigned int) base_33(D);
  _2 = base.16_1 + 128;
  flexcan_mb_34 = (const uint32 *) _2;
  # DEBUG flexcan_mb => flexcan_mb_34
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb_id => flexcan_mb_34 + 4
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb_data_32 => flexcan_mb_34 + 8
  # DEBUG BEGIN_STMT
  msgData_32_37 = &rxFifo_36(D)->data;
  # DEBUG msgData_32 => msgData_32_37
  # DEBUG BEGIN_STMT
  _3 ={v} *flexcan_mb_34;
  _4 = _3 >> 16;
  _5 = (unsigned char) _4;
  flexcan_mb_dlc_value_39 = _5 & 15;
  # DEBUG flexcan_mb_dlc_value => flexcan_mb_dlc_value_39
  # DEBUG BEGIN_STMT
  can_real_payload_40 = FlexCAN_ComputePayloadSize (flexcan_mb_dlc_value_39);
  # DEBUG can_real_payload => can_real_payload_40
  # DEBUG BEGIN_STMT
  _6 = rxFifo_36(D) != 0B;
  _7 = (unsigned char) _6;
  DevAssert (_7);
  # DEBUG BEGIN_STMT
  can_real_payload_35 = MIN_EXPR <8, can_real_payload_40>;
  # DEBUG can_real_payload => can_real_payload_35
  # DEBUG BEGIN_STMT
  rxFifo_36(D)->dataLen = can_real_payload_35;
  # DEBUG BEGIN_STMT
  _8 ={v} *flexcan_mb_34;
  rxFifo_36(D)->cs = _8;
  # DEBUG BEGIN_STMT
  _9 = _8 & 2097152;
  if (_9 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  _10 ={v} MEM[(const uint32 *)flexcan_mb_34 + 4B];
  rxFifo_36(D)->msgId = _10;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  _11 ={v} MEM[(const uint32 *)flexcan_mb_34 + 4B];
  _12 = _11 >> 18;
  rxFifo_36(D)->msgId = _12;

  <bb 5> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _13 ={v} base_33(D)->RXFIR;
  _14 = (unsigned char) _13;
  rxFifo_36(D)->id_hit = _14;
  # DEBUG BEGIN_STMT
  _15 = _8 & 65535;
  rxFifo_36(D)->time_stamp = _15;
  # DEBUG BEGIN_STMT
  # DEBUG DataByte => 0
  goto <bb 7>; [100.00%]

  <bb 6> [local count: 955630223]:
  # DEBUG BEGIN_STMT
  _16 = DataByte_30 >> 2;
  _17 = _16 * 4;
  _42 = _17 + 8;
  _18 = flexcan_mb_34 + _42;
  MbWord_49 ={v} *_18;
  # DEBUG MbWord => MbWord_49
  # DEBUG BEGIN_STMT
  _19 = MbWord_49 >> 24;
  _20 = MbWord_49 >> 8;
  _21 = _20 & 65280;
  _22 = _19 | _21;
  _23 = MbWord_49 << 8;
  _24 = _23 & 16711680;
  _25 = _22 | _24;
  _26 = MbWord_49 << 24;
  _27 = msgData_32_37 + _17;
  _28 = _25 | _26;
  *_27 = _28;
  # DEBUG BEGIN_STMT
  DataByte_51 = DataByte_30 + 4;
  # DEBUG DataByte => DataByte_51

  <bb 7> [local count: 1073741824]:
  # DataByte_30 = PHI <0(5), DataByte_51(6)>
  # DEBUG DataByte => DataByte_30
  # DEBUG BEGIN_STMT
  _29 = (long unsigned int) can_real_payload_35;
  if (_29 > DataByte_30)
    goto <bb 6>; [89.00%]
  else
    goto <bb 8>; [11.00%]

  <bb 8> [local count: 118111601]:
  return;

}


FlexCAN_SetRxFifoFilter (struct FLEXCAN_Type * base, Flexcan_Ip_RxFifoIdElementFormatType idFormat, const struct Flexcan_Ip_IdTableType * idFilterTable)
{
  volatile uint32 * FilterTable;
  uint32 Val;
  uint32 Val2;
  uint32 Val1;
  uint32 NumOfFilters;
  uint32 j;
  uint32 i;
  long unsigned int base.14_1;
  long unsigned int _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  const struct Flexcan_Ip_IdTableType * _9;
  unsigned char _10;
  unsigned char _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  volatile uint32 * _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  volatile uint32 * _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  const struct Flexcan_Ip_IdTableType * _30;
  unsigned char _31;
  sizetype _32;
  sizetype _33;
  const struct Flexcan_Ip_IdTableType * _34;
  unsigned char _35;
  unsigned char _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  volatile uint32 * _42;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  volatile uint32 * _48;
  long unsigned int _49;
  unsigned char _50;
  long unsigned int _51;
  volatile uint32 * _52;
  long unsigned int _53;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _56;
  long unsigned int _57;
  long unsigned int _58;
  long unsigned int _59;
  volatile uint32 * _60;
  long unsigned int _61;
  long unsigned int _62;
  long unsigned int _63;
  long unsigned int _64;
  long unsigned int _65;
  long unsigned int _66;
  long unsigned int _67;
  long unsigned int _68;
  long unsigned int _69;
  long unsigned int _70;
  long unsigned int _71;
  long unsigned int _72;
  const struct Flexcan_Ip_IdTableType * _73;
  unsigned char _74;
  long unsigned int _75;
  long unsigned int _76;
  long unsigned int _77;
  long unsigned int _78;
  volatile uint32 * _79;
  long unsigned int _80;
  long unsigned int _81;
  long unsigned int _82;
  long unsigned int _83;
  volatile uint32 * _84;
  sizetype _85;
  sizetype _86;
  const struct Flexcan_Ip_IdTableType * _87;
  unsigned char _88;
  long unsigned int _89;
  volatile uint32 * _90;
  long unsigned int _91;
  long unsigned int _92;
  long unsigned int _93;
  long unsigned int _94;
  long unsigned int _95;
  long unsigned int _96;
  long unsigned int _97;
  volatile uint32 * _98;
  long unsigned int _99;
  long unsigned int _100;
  long unsigned int _101;
  long unsigned int _102;
  long unsigned int _103;
  long unsigned int _104;
  sizetype _105;
  sizetype _106;
  const struct Flexcan_Ip_IdTableType * _107;
  unsigned char _108;
  long unsigned int _109;
  volatile uint32 * _110;
  long unsigned int _111;
  long unsigned int _112;
  long unsigned int _113;
  long unsigned int _114;
  long unsigned int _115;
  long unsigned int _116;
  long unsigned int _117;
  volatile uint32 * _118;
  long unsigned int _119;
  long unsigned int _120;
  long unsigned int _121;
  long unsigned int _122;
  long unsigned int _123;
  long unsigned int _124;
  sizetype _125;
  sizetype _126;
  const struct Flexcan_Ip_IdTableType * _127;
  unsigned char _128;
  long unsigned int _129;
  volatile uint32 * _130;
  long unsigned int _131;
  long unsigned int _132;
  long unsigned int _133;
  long unsigned int _134;
  long unsigned int _135;
  long unsigned int _136;
  volatile uint32 * _137;
  long unsigned int _138;
  long unsigned int _139;
  long unsigned int _140;
  long unsigned int _141;
  long unsigned int _142;
  long unsigned int _143;
  long unsigned int _144;
  long unsigned int _145;
  long unsigned int _146;
  int iftmp.15_155;

  <bb 2> [local count: 590558001]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Val1 => 0
  # DEBUG Val2 => 0
  # DEBUG Val => 0
  # DEBUG BEGIN_STMT
  base.14_1 = (long unsigned int) base_167(D);
  _2 = base.14_1 + 224;
  FilterTable_168 = (volatile uint32 *) _2;
  # DEBUG FilterTable => FilterTable_168
  # DEBUG BEGIN_STMT
  if (idFilterTable_169(D) != 0B)
    goto <bb 5>; [70.00%]
  else
    goto <bb 3>; [30.00%]

  <bb 3> [local count: 177167400]:
  if (idFormat_170(D) == 3)
    goto <bb 5>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 4> [local count: 116930484]:

  <bb 5> [local count: 590558001]:
  # iftmp.15_155 = PHI <1(3), 0(4), 1(2)>
  _3 = (unsigned char) iftmp.15_155;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 ={v} base_167(D)->CTRL2;
  _5 = _4 >> 24;
  NumOfFilters_173 = _5 & 15;
  # DEBUG NumOfFilters => NumOfFilters_173
  # DEBUG BEGIN_STMT
  switch (idFormat_170(D)) <default: <L46> [20.00%], case 0: <L4> [20.00%], case 1: <L13> [20.00%], case 2: <L27> [20.00%], case 3: <L43> [20.00%]>

  <bb 6> [local count: 118111600]:
<L4>:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _6 ={v} base_167(D)->MCR;
  _7 = _6 & 4294966527;
  base_167(D)->MCR ={v} _7;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  goto <bb 13>; [100.00%]

  <bb 7> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  # DEBUG Val => 0
  # DEBUG BEGIN_STMT
  _8 = i_147 * 8;
  _9 = idFilterTable_169(D) + _8;
  _10 = _9->isRemoteFrame;
  if (_10 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 8> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  # DEBUG Val => 2147483648

  <bb 9> [local count: 955630224]:
  # Val_154 = PHI <0(7), 2147483648(8)>
  # DEBUG Val => Val_154
  # DEBUG BEGIN_STMT
  _11 = _9->isExtendedFrame;
  if (_11 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  Val_205 = Val_154 | 1073741824;
  # DEBUG Val => Val_205
  # DEBUG BEGIN_STMT
  _12 = _9->id;
  _13 = _12 << 1;
  _14 = _13 & 1073741823;
  _15 = i_147 * 4;
  _16 = FilterTable_168 + _15;
  _17 = _14 + Val_205;
  *_16 ={v} _17;
  goto <bb 12>; [100.00%]

  <bb 11> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _18 = _9->id;
  _19 = _18 << 19;
  _20 = _19 & 1073217536;
  _21 = i_147 * 4;
  _22 = FilterTable_168 + _21;
  _23 = _20 + Val_154;
  *_22 ={v} _23;

  <bb 12> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  i_207 = i_147 + 1;
  # DEBUG i => i_207

  <bb 13> [local count: 1073741824]:
  # i_147 = PHI <0(6), i_207(12)>
  # DEBUG i => i_147
  # DEBUG BEGIN_STMT
  _24 = NumOfFilters_173 + 1;
  _25 = _24 * 8;
  if (_25 > i_147)
    goto <bb 7>; [89.00%]
  else
    goto <bb 43>; [11.00%]

  <bb 14> [local count: 118111600]:
<L13>:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _26 ={v} base_167(D)->MCR;
  _27 = _26 & 4294966527;
  _28 = _27 | 256;
  base_167(D)->MCR ={v} _28;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  # DEBUG j => 0
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  goto <bb 26>; [100.00%]

  <bb 15> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  # DEBUG Val1 => 0
  # DEBUG BEGIN_STMT
  # DEBUG Val2 => 0
  # DEBUG BEGIN_STMT
  _29 = j_150 * 8;
  _30 = idFilterTable_169(D) + _29;
  _31 = _30->isRemoteFrame;
  if (_31 != 0)
    goto <bb 16>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 16> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  # DEBUG Val1 => 2147483648

  <bb 17> [local count: 955630224]:
  # Val1_152 = PHI <0(15), 2147483648(16)>
  # DEBUG Val1 => Val1_152
  # DEBUG BEGIN_STMT
  _32 = j_150 + 1;
  _33 = _32 * 8;
  _34 = idFilterTable_169(D) + _33;
  _35 = _34->isRemoteFrame;
  if (_35 != 0)
    goto <bb 18>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 18> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  # DEBUG Val2 => 32768

  <bb 19> [local count: 955630224]:
  # Val2_153 = PHI <0(17), 32768(18)>
  # DEBUG Val2 => Val2_153
  # DEBUG BEGIN_STMT
  _36 = _30->isExtendedFrame;
  if (_36 != 0)
    goto <bb 20>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 20> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  Val1_194 = Val1_152 | 1073741824;
  # DEBUG Val1 => Val1_194
  # DEBUG BEGIN_STMT
  _37 = _30->id;
  _38 = _37 >> 15;
  _39 = _38 << 16;
  _40 = _39 & 1073676288;
  _41 = i_148 * 4;
  _42 = FilterTable_168 + _41;
  _43 = _40 + Val1_194;
  *_42 ={v} _43;
  goto <bb 22>; [100.00%]

  <bb 21> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _44 = _30->id;
  _45 = _44 << 19;
  _46 = _45 & 1073217536;
  _47 = i_148 * 4;
  _48 = FilterTable_168 + _47;
  _49 = _46 + Val1_152;
  *_48 ={v} _49;

  <bb 22> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  _50 = _34->isExtendedFrame;
  if (_50 != 0)
    goto <bb 23>; [50.00%]
  else
    goto <bb 24>; [50.00%]

  <bb 23> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  Val2_197 = Val2_153 | 16384;
  # DEBUG Val2 => Val2_197
  # DEBUG BEGIN_STMT
  _51 = i_148 * 4;
  _52 = FilterTable_168 + _51;
  _53 ={v} *_52;
  _54 = _34->id;
  _55 = _54 >> 15;
  _56 = _55 & 16383;
  _57 = _56 + Val2_197;
  _58 = _53 | _57;
  *_52 ={v} _58;
  goto <bb 25>; [100.00%]

  <bb 24> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _59 = i_148 * 4;
  _60 = FilterTable_168 + _59;
  _61 ={v} *_60;
  _62 = _34->id;
  _63 = _62 << 3;
  _64 = _63 & 16376;
  _65 = _64 + Val2_153;
  _66 = _61 | _65;
  *_60 ={v} _66;

  <bb 25> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  j_199 = j_150 + 2;
  # DEBUG j => j_199
  # DEBUG BEGIN_STMT
  i_200 = i_148 + 1;
  # DEBUG i => i_200

  <bb 26> [local count: 1073741824]:
  # i_148 = PHI <0(14), i_200(25)>
  # j_150 = PHI <0(14), j_199(25)>
  # DEBUG j => j_150
  # DEBUG i => i_148
  # DEBUG BEGIN_STMT
  _67 = NumOfFilters_173 + 1;
  _68 = _67 * 8;
  if (_68 > i_148)
    goto <bb 15>; [89.00%]
  else
    goto <bb 43>; [11.00%]

  <bb 27> [local count: 118111600]:
<L27>:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _69 ={v} base_167(D)->MCR;
  _70 = _69 & 4294966527;
  _71 = _70 | 512;
  base_167(D)->MCR ={v} _71;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  # DEBUG j => 0
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  goto <bb 41>; [100.00%]

  <bb 28> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  _72 = j_151 * 8;
  _73 = idFilterTable_169(D) + _72;
  _74 = _73->isExtendedFrame;
  if (_74 != 0)
    goto <bb 29>; [50.00%]
  else
    goto <bb 30>; [50.00%]

  <bb 29> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _75 = _73->id;
  _76 = _75 >> 21;
  _77 = _76 << 24;
  _78 = i_149 * 4;
  _79 = FilterTable_168 + _78;
  *_79 ={v} _77;
  goto <bb 31>; [100.00%]

  <bb 30> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _80 = _73->id;
  _81 = _80 >> 3;
  _82 = _81 << 24;
  _83 = i_149 * 4;
  _84 = FilterTable_168 + _83;
  *_84 ={v} _82;

  <bb 31> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  _85 = j_151 + 1;
  _86 = _85 * 8;
  _87 = idFilterTable_169(D) + _86;
  _88 = _87->isExtendedFrame;
  if (_88 != 0)
    goto <bb 32>; [50.00%]
  else
    goto <bb 33>; [50.00%]

  <bb 32> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _89 = i_149 * 4;
  _90 = FilterTable_168 + _89;
  _91 ={v} *_90;
  _92 = _87->id;
  _93 = _92 >> 21;
  _94 = _93 << 16;
  _95 = _94 & 16711680;
  _96 = _91 | _95;
  *_90 ={v} _96;
  goto <bb 34>; [100.00%]

  <bb 33> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _97 = i_149 * 4;
  _98 = FilterTable_168 + _97;
  _99 ={v} *_98;
  _100 = _87->id;
  _101 = _100 >> 3;
  _102 = _101 << 16;
  _103 = _102 & 16711680;
  _104 = _99 | _103;
  *_98 ={v} _104;

  <bb 34> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  _105 = j_151 + 2;
  _106 = _105 * 8;
  _107 = idFilterTable_169(D) + _106;
  _108 = _107->isExtendedFrame;
  if (_108 != 0)
    goto <bb 35>; [50.00%]
  else
    goto <bb 36>; [50.00%]

  <bb 35> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _109 = i_149 * 4;
  _110 = FilterTable_168 + _109;
  _111 ={v} *_110;
  _112 = _107->id;
  _113 = _112 >> 21;
  _114 = _113 << 8;
  _115 = _114 & 65535;
  _116 = _111 | _115;
  *_110 ={v} _116;
  goto <bb 37>; [100.00%]

  <bb 36> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _117 = i_149 * 4;
  _118 = FilterTable_168 + _117;
  _119 ={v} *_118;
  _120 = _107->id;
  _121 = _120 >> 3;
  _122 = _121 << 8;
  _123 = _122 & 65535;
  _124 = _119 | _123;
  *_118 ={v} _124;

  <bb 37> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  _125 = j_151 + 3;
  _126 = _125 * 8;
  _127 = idFilterTable_169(D) + _126;
  _128 = _127->isExtendedFrame;
  if (_128 != 0)
    goto <bb 38>; [50.00%]
  else
    goto <bb 39>; [50.00%]

  <bb 38> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _129 = i_149 * 4;
  _130 = FilterTable_168 + _129;
  _131 ={v} *_130;
  _132 = _127->id;
  _133 = _132 >> 21;
  _134 = _133 & 255;
  _135 = _131 | _134;
  *_130 ={v} _135;
  goto <bb 40>; [100.00%]

  <bb 39> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _136 = i_149 * 4;
  _137 = FilterTable_168 + _136;
  _138 ={v} *_137;
  _139 = _127->id;
  _140 = _139 >> 3;
  _141 = _140 & 255;
  _142 = _138 | _141;
  *_137 ={v} _142;

  <bb 40> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  j_188 = j_151 + 4;
  # DEBUG j => j_188
  # DEBUG BEGIN_STMT
  i_189 = i_149 + 1;
  # DEBUG i => i_189

  <bb 41> [local count: 1073741824]:
  # i_149 = PHI <0(27), i_189(40)>
  # j_151 = PHI <0(27), j_188(40)>
  # DEBUG j => j_151
  # DEBUG i => i_149
  # DEBUG BEGIN_STMT
  _143 = NumOfFilters_173 + 1;
  _144 = _143 * 8;
  if (_144 > i_149)
    goto <bb 28>; [89.00%]
  else
    goto <bb 43>; [11.00%]

  <bb 42> [local count: 118111600]:
<L43>:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _145 ={v} base_167(D)->MCR;
  _146 = _145 | 768;
  base_167(D)->MCR ={v} _146;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT

  <bb 43> [local count: 590558003]:
<L46>:
  return;

}


FlexCAN_SetOperationMode (struct FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _20;
  long unsigned int _21;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  switch (mode_12(D)) <default: <L5> [25.00%], case 0: <L0> [25.00%], case 1: <L1> [25.00%], case 2: <L2> [25.00%]>

  <bb 3> [local count: 268435456]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 ={v} base_14(D)->CTRL1;
  _2 = _1 & 4294967287;
  base_14(D)->CTRL1 ={v} _2;
  # DEBUG BEGIN_STMT
  _3 ={v} base_14(D)->CTRL1;
  _4 = _3 & 4294963199;
  base_14(D)->CTRL1 ={v} _4;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 4> [local count: 268435456]:
<L1>:
  # DEBUG BEGIN_STMT
  _5 ={v} base_14(D)->CTRL1;
  _6 = _5 | 8;
  base_14(D)->CTRL1 ={v} _6;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 268435456]:
<L2>:
  # DEBUG BEGIN_STMT
  _7 ={v} base_14(D)->CTRL1;
  _8 = _7 | 4096;
  base_14(D)->CTRL1 ={v} _8;
  # DEBUG BEGIN_STMT
  _9 ={v} base_14(D)->CTRL1;
  _10 = _9 & 4294967287;
  base_14(D)->CTRL1 ={v} _10;
  # DEBUG BEGIN_STMT
  # DEBUG base => base_14(D)
  # DEBUG enable => 1
  # DEBUG INLINE_ENTRY FlexCAN_SetSelfReception
  # DEBUG BEGIN_STMT
  _20 ={v} base_14(D)->MCR;
  _21 = _20 & 4294836223;
  base_14(D)->MCR ={v} _21;

  <bb 6> [local count: 1073741824]:
<L5>:
  # DEBUG base => NULL
  # DEBUG enable => NULL
  return;

}


FlexCAN_SetMaxMsgBuffNum (struct FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
  Flexcan_Ip_StatusType Status;
  uint32 ValEndRam;
  uint32 ValEndMb;
  uint8 Can_Real_Payload;
  volatile uint32 * Flexcan_Mb;
  const uint32 * ValEndMbPointer;
  const uint32 * RAM;
  uint32 DataByte;
  uint8 MsgBuffIdx;
  long unsigned int base.10_1;
  long unsigned int _2;
  long unsigned int _3;
  _Bool _4;
  unsigned char _5;
  long unsigned int _6;
  long unsigned int ValEndMbPointer.11_7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  const uint32 * _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  volatile uint8 * _18;
  long unsigned int _19;
  long unsigned int _20;
  sizetype _28;

  <bb 2> [local count: 69103254]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  base.10_1 = (long unsigned int) base_26(D);
  _2 = base.10_1 + 128;
  RAM_27 = (const uint32 *) _2;
  # DEBUG RAM => RAM_27
  # DEBUG BEGIN_STMT
  # DEBUG ValEndMbPointer => 0B
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb => 0B
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Id => 0B
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Data => 0B
  # DEBUG BEGIN_STMT
  # DEBUG Arbitration_Field_Size => 8
  # DEBUG BEGIN_STMT
  _3 = maxMsgBuffNum_30(D) + 4294967295;
  Can_Real_Payload_33 = FlexCAN_GetMbPayloadSize (base_26(D), _3);
  # DEBUG Can_Real_Payload => Can_Real_Payload_33
  # DEBUG BEGIN_STMT
  # DEBUG ValEndMb => 0
  # DEBUG BEGIN_STMT
  # DEBUG ValEndRam => 0
  # DEBUG BEGIN_STMT
  # DEBUG Status => 0
  # DEBUG BEGIN_STMT
  _4 = maxMsgBuffNum_30(D) != 0;
  _5 = (unsigned char) _4;
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  ValEndMbPointer_36 = FlexCAN_GetMsgBuffRegion (base_26(D), _3);
  # DEBUG ValEndMbPointer => ValEndMbPointer_36
  # DEBUG BEGIN_STMT
  _6 = (long unsigned int) Can_Real_Payload_33;
  ValEndMbPointer.11_7 = (long unsigned int) ValEndMbPointer_36;
  _8 = _6 + ValEndMbPointer.11_7;
  ValEndMb_37 = _8 + 8;
  # DEBUG ValEndMb => ValEndMb_37
  # DEBUG BEGIN_STMT
  _9 = FlexCAN_GetMaxMbNum (base_26(D));
  _10 = _9 * 16;
  _11 = RAM_27 + _10;
  ValEndRam_38 = (uint32) _11;
  # DEBUG ValEndRam => ValEndRam_38
  # DEBUG BEGIN_STMT
  if (ValEndMb_37 > ValEndRam_38)
    goto <bb 10>; [35.00%]
  else
    goto <bb 3>; [65.00%]

  <bb 3> [local count: 44917115]:
  if (_9 < maxMsgBuffNum_30(D))
    goto <bb 10>; [35.00%]
  else
    goto <bb 4>; [65.00%]

  <bb 4> [local count: 29196125]:
  # DEBUG Status => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 ={v} base_26(D)->MCR;
  _13 = _12 & 4294967168;
  _14 = _3 & 127;
  _15 = _13 | _14;
  base_26(D)->MCR ={v} _15;
  # DEBUG BEGIN_STMT
  _16 ={v} base_26(D)->MCR;
  _17 = _16 & 536870912;
  if (_17 == 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 11> [local count: 14598062]:
  goto <bb 9>; [100.00%]

  <bb 5> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  Flexcan_Mb_41 = FlexCAN_GetMsgBuffRegion (base_26(D), _20);
  # DEBUG Flexcan_Mb => Flexcan_Mb_41
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Id => Flexcan_Mb_41 + 4
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Data => Flexcan_Mb_41 + 8
  # DEBUG BEGIN_STMT
  *Flexcan_Mb_41 ={v} 0;
  # DEBUG BEGIN_STMT
  MEM[(volatile uint32 *)Flexcan_Mb_41 + 4B] ={v} 0;
  # DEBUG BEGIN_STMT
  Can_Real_Payload_45 = FlexCAN_GetMbPayloadSize (base_26(D), _20);
  # DEBUG Can_Real_Payload => Can_Real_Payload_45
  # DEBUG BEGIN_STMT
  # DEBUG DataByte => 0
  goto <bb 7>; [100.00%]

  <bb 6> [local count: 955630223]:
  # DEBUG BEGIN_STMT
  _28 = DataByte_22 + 8;
  _18 = Flexcan_Mb_41 + _28;
  *_18 ={v} 0;
  # DEBUG BEGIN_STMT
  DataByte_48 = DataByte_22 + 1;
  # DEBUG DataByte => DataByte_48

  <bb 7> [local count: 1073741824]:
  # DataByte_22 = PHI <0(5), DataByte_48(6)>
  # DEBUG DataByte => DataByte_22
  # DEBUG BEGIN_STMT
  _19 = (long unsigned int) Can_Real_Payload_45;
  if (_19 > DataByte_22)
    goto <bb 6>; [89.00%]
  else
    goto <bb 8>; [11.00%]

  <bb 8> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  MsgBuffIdx_46 = MsgBuffIdx_21 + 1;
  # DEBUG MsgBuffIdx => MsgBuffIdx_46

  <bb 9> [local count: 132709663]:
  # MsgBuffIdx_21 = PHI <MsgBuffIdx_46(8), 0(11)>
  # DEBUG MsgBuffIdx => MsgBuffIdx_21
  # DEBUG BEGIN_STMT
  _20 = (long unsigned int) MsgBuffIdx_21;
  if (_20 < maxMsgBuffNum_30(D))
    goto <bb 5>; [89.00%]
  else
    goto <bb 10>; [11.00%]

  <bb 10> [local count: 69103254]:
  # Status_29 = PHI <4(3), 0(4), 0(9), 4(2)>
  # DEBUG Status => NULL
  # DEBUG BEGIN_STMT
  return Status_29;

}


FlexCAN_SetTxMsgBuff (volatile uint32 * const pMbAddr, const struct Flexcan_Ip_MsbuffCodeStatusType * cs, uint32 msgId, const uint8 * msgData, const boolean isRemote)
{
  uint32 ret;
  static const uint8 payload_code[65] = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\t\t\t\n\n\n\n\v\v\v\v\f\f\f\f\r\r\r\r\r\r\r\r\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f";
  volatile uint8 * Flexcan_Mb_Data;
  uint8 Payload_Size;
  uint32 DataByte;
  uint32 Flexcan_Mb_Config;
  _Bool _1;
  unsigned char _2;
  long unsigned int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  const uint32 * _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  volatile uint32 * _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  const uint8 * _21;
  long unsigned int _22;
  volatile uint8 * _23;
  unsigned char _24;
  long unsigned int _25;
  long unsigned int _26;
  volatile uint8 * _27;
  unsigned char _28;
  long unsigned int _29;
  <unnamed type> _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;
  long unsigned int _44;
  unsigned char _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  unsigned char _51;
  long unsigned int _52;
  long unsigned int _53;
  long unsigned int _69;
  long unsigned int _71;
  long unsigned int _73;
  sizetype _75;
  unsigned char _81;
  int _82;
  unsigned char _105;

  <bb 2> [local count: 168730856]:
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Config => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb => pMbAddr_70(D)
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Id => pMbAddr_70(D) + 4
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Data_72 = pMbAddr_70(D) + 8;
  # DEBUG Flexcan_Mb_Data => Flexcan_Mb_Data_72
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Data_32 => Flexcan_Mb_Data_72
  # DEBUG BEGIN_STMT
  # DEBUG MsgData_32 => msgData_74(D)
  # DEBUG BEGIN_STMT
  _1 = cs_76(D) != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  *pMbAddr_70(D) ={v} 134217728;
  # DEBUG BEGIN_STMT
  MEM[(volatile uint32 *)pMbAddr_70(D) + 4B] ={v} 0;
  # DEBUG BEGIN_STMT
  _3 = cs_76(D)->dataLen;
  _4 = (unsigned char) _3;
  # DEBUG payloadSize => _4
  # DEBUG INLINE_ENTRY FlexCAN_ComputeDLCValue
  # DEBUG BEGIN_STMT
  # DEBUG ret => 255
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (_4 <= 64)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 84365428]:
  # DEBUG BEGIN_STMT
  _69 = _3 & 255;
  _82 = (int) _69;
  _81 = payload_code[_82];
  ret_103 = (uint32) _81;
  # DEBUG ret => ret_103

  <bb 4> [local count: 168730856]:
  # ret_104 = PHI <255(2), ret_103(3)>
  # DEBUG ret => ret_104
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _105 = (unsigned char) ret_104;
  # DEBUG payloadSize => NULL
  # DEBUG ret => NULL
  # DEBUG Dlc_Value => _105
  # DEBUG BEGIN_STMT
  if (msgData_74(D) != 0B)
    goto <bb 29>; [70.00%]
  else
    goto <bb 12>; [30.00%]

  <bb 29> [local count: 118111599]:
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 955630215]:
  # DEBUG BEGIN_STMT
  _5 = DataByte_59 >> 2;
  _6 = _5 * 4;
  _7 = msgData_74(D) + _6;
  _8 = *_7;
  _9 = _8 >> 24;
  _10 = _8 >> 8;
  _11 = _10 & 65280;
  _12 = _9 | _11;
  _13 = _8 << 8;
  _14 = _13 & 16711680;
  _15 = _12 | _14;
  _16 = _8 << 24;
  _75 = _6 + 8;
  _17 = pMbAddr_70(D) + _75;
  _18 = _15 | _16;
  *_17 ={v} _18;
  # DEBUG BEGIN_STMT
  DataByte_89 = DataByte_59 + 4;
  # DEBUG DataByte => DataByte_89

  <bb 6> [local count: 1073741814]:
  # DataByte_59 = PHI <DataByte_89(5), 0(29)>
  # DEBUG DataByte => DataByte_59
  # DEBUG BEGIN_STMT
  _19 = cs_76(D)->dataLen;
  _20 = _19 & 4294967292;
  if (_20 > DataByte_59)
    goto <bb 5>; [89.00%]
  else
    goto <bb 28>; [11.00%]

  <bb 28> [local count: 118111600]:
  goto <bb 8>; [100.00%]

  <bb 7> [local count: 955630220]:
  # DEBUG BEGIN_STMT
  _21 = msgData_74(D) + DataByte_60;
  _22 = DataByte_60 ^ 3;
  _23 = Flexcan_Mb_Data_72 + _22;
  _24 = *_21;
  *_23 ={v} _24;
  # DEBUG BEGIN_STMT
  DataByte_87 = DataByte_60 + 1;
  # DEBUG DataByte => DataByte_87

  <bb 8> [local count: 1073741821]:
  # DataByte_60 = PHI <DataByte_87(7), DataByte_59(28)>
  # DEBUG DataByte => DataByte_60
  # DEBUG BEGIN_STMT
  _25 = cs_76(D)->dataLen;
  if (_25 > DataByte_60)
    goto <bb 7>; [89.00%]
  else
    goto <bb 9>; [11.00%]

  <bb 9> [local count: 118111600]:
  # _73 = PHI <_25(8)>
  # DEBUG BEGIN_STMT
  Payload_Size_83 = FlexCAN_ComputePayloadSize (_105);
  # DEBUG Payload_Size => Payload_Size_83
  # DEBUG BEGIN_STMT
  # DEBUG DataByte => _73
  goto <bb 11>; [100.00%]

  <bb 10> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  _26 = DataByte_61 ^ 3;
  _27 = Flexcan_Mb_Data_72 + _26;
  _28 = cs_76(D)->fd_padding;
  *_27 ={v} _28;
  # DEBUG BEGIN_STMT
  DataByte_85 = DataByte_61 + 1;
  # DEBUG DataByte => DataByte_85

  <bb 11> [local count: 1073741824]:
  # DataByte_61 = PHI <_73(9), DataByte_85(10)>
  # DEBUG DataByte => DataByte_61
  # DEBUG BEGIN_STMT
  _29 = (long unsigned int) Payload_Size_83;
  if (_29 > DataByte_61)
    goto <bb 10>; [89.00%]
  else
    goto <bb 12>; [11.00%]

  <bb 12> [local count: 168730858]:
  # DEBUG BEGIN_STMT
  _30 = cs_76(D)->msgIdType;
  if (_30 == 1)
    goto <bb 13>; [34.00%]
  else
    goto <bb 14>; [66.00%]

  <bb 13> [local count: 57368492]:
  # DEBUG BEGIN_STMT
  _31 ={v} MEM[(volatile uint32 *)pMbAddr_70(D) + 4B];
  _32 = _31 & 3758096384;
  MEM[(volatile uint32 *)pMbAddr_70(D) + 4B] ={v} _32;
  # DEBUG BEGIN_STMT
  _33 ={v} MEM[(volatile uint32 *)pMbAddr_70(D) + 4B];
  _34 = msgId_91(D) & 536870911;
  _35 = _33 | _34;
  MEM[(volatile uint32 *)pMbAddr_70(D) + 4B] ={v} _35;
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Config => 6291456

  <bb 14> [local count: 168730858]:
  # Flexcan_Mb_Config_54 = PHI <0(12), 6291456(13)>
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_54
  # DEBUG BEGIN_STMT
  if (_30 == 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 15> [local count: 84365429]:
  # DEBUG BEGIN_STMT
  _36 ={v} MEM[(volatile uint32 *)pMbAddr_70(D) + 4B];
  _37 = _36 & 3758358527;
  MEM[(volatile uint32 *)pMbAddr_70(D) + 4B] ={v} _37;
  # DEBUG BEGIN_STMT
  _38 ={v} MEM[(volatile uint32 *)pMbAddr_70(D) + 4B];
  _39 = msgId_91(D) << 18;
  _40 = _39 & 536608768;
  _41 = _38 | _40;
  MEM[(volatile uint32 *)pMbAddr_70(D) + 4B] ={v} _41;
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Config => 0

  <bb 16> [local count: 168730858]:
  # Flexcan_Mb_Config_55 = PHI <Flexcan_Mb_Config_54(14), 0(15)>
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_55
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_55
  # DEBUG BEGIN_STMT
  _42 = ret_104 << 16;
  _43 = _42 & 983040;
  Flexcan_Mb_Config_95 = _43 | Flexcan_Mb_Config_55;
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_95
  # DEBUG BEGIN_STMT
  _44 = cs_76(D)->code;
  if (_44 != 15)
    goto <bb 17>; [66.00%]
  else
    goto <bb 27>; [34.00%]

  <bb 17> [local count: 111362366]:
  # DEBUG BEGIN_STMT
  if (_44 == 28)
    goto <bb 18>; [34.00%]
  else
    goto <bb 19>; [66.00%]

  <bb 18> [local count: 37863204]:
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config_98 = Flexcan_Mb_Config_95 | 1048576;
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_98
  goto <bb 21>; [100.00%]

  <bb 19> [local count: 73499162]:
  # DEBUG BEGIN_STMT
  if (isRemote_96(D) == 1)
    goto <bb 20>; [34.00%]
  else
    goto <bb 21>; [66.00%]

  <bb 20> [local count: 24989715]:
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config_97 = Flexcan_Mb_Config_95 | 1048576;
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_97

  <bb 21> [local count: 111362366]:
  # Flexcan_Mb_Config_56 = PHI <Flexcan_Mb_Config_98(18), Flexcan_Mb_Config_95(19), Flexcan_Mb_Config_97(20)>
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_56
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_56
  # DEBUG BEGIN_STMT
  _45 = cs_76(D)->fd_enable;
  if (_45 != 0)
    goto <bb 22>; [50.00%]
  else
    goto <bb 23>; [50.00%]

  <bb 22> [local count: 55681183]:
  # DEBUG BEGIN_STMT
  _46 = _44 << 24;
  _47 = _46 & 251658240;
  _48 = _47 | Flexcan_Mb_Config_56;
  # DEBUG Flexcan_Mb_Config => _48 | 2147483648
  # DEBUG BEGIN_STMT
  _71 = _48 & 4293918719;
  Flexcan_Mb_Config_100 = _71 | 2147483648;
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_100
  goto <bb 24>; [100.00%]

  <bb 23> [local count: 55681183]:
  # DEBUG BEGIN_STMT
  _49 = _44 << 24;
  _50 = _49 & 251658240;
  Flexcan_Mb_Config_99 = _50 | Flexcan_Mb_Config_56;
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_99

  <bb 24> [local count: 111362366]:
  # Flexcan_Mb_Config_57 = PHI <Flexcan_Mb_Config_100(22), Flexcan_Mb_Config_99(23)>
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_57
  # DEBUG BEGIN_STMT
  _51 = cs_76(D)->enable_brs;
  if (_51 != 0)
    goto <bb 25>; [50.00%]
  else
    goto <bb 26>; [50.00%]

  <bb 25> [local count: 55681183]:
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config_101 = Flexcan_Mb_Config_57 | 1073741824;
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_101

  <bb 26> [local count: 111362366]:
  # Flexcan_Mb_Config_58 = PHI <Flexcan_Mb_Config_57(24), Flexcan_Mb_Config_101(25)>
  # DEBUG Flexcan_Mb_Config => Flexcan_Mb_Config_58
  # DEBUG BEGIN_STMT
  _52 ={v} *pMbAddr_70(D);
  _53 = _52 | Flexcan_Mb_Config_58;
  *pMbAddr_70(D) ={v} _53;

  <bb 27> [local count: 168730858]:
  return;

}


FlexCAN_GetMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx, struct Flexcan_Ip_MsgBuffType * msgBuff)
{
  uint8 Payload_Size;
  uint8 Flexcan_Mb_Dlc_Value;
  uint32 MbWord;
  uint32 * MsgBuff_Data_32;
  const uint32 * Flexcan_Mb;
  uint8 i;
  long unsigned int _1;
  long unsigned int _2;
  unsigned char _3;
  _Bool _4;
  unsigned char _5;
  unsigned char _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  unsigned char _13;
  unsigned int _14;
  unsigned int _15;
  const uint32 * _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  uint32 * _25;
  long unsigned int _26;
  unsigned int _27;
  unsigned int _28;
  unsigned int _29;
  unsigned char _30;
  sizetype _31;
  const uint8 * _32;
  int _33;
  unsigned char _34;
  sizetype _50;
  sizetype _61;

  <bb 2> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Flexcan_Mb_46 = FlexCAN_GetMsgBuffRegion (base_43(D), msgBuffIdx_44(D));
  # DEBUG Flexcan_Mb => Flexcan_Mb_46
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Id => Flexcan_Mb_46 + 4
  # DEBUG BEGIN_STMT
  # DEBUG D#1 => Flexcan_Mb_46 + 8
  # DEBUG Flexcan_Mb_Data => D#1
  # DEBUG BEGIN_STMT
  # DEBUG Flexcan_Mb_Data_32 => D#1
  # DEBUG BEGIN_STMT
  MsgBuff_Data_32_48 = &msgBuff_47(D)->data;
  # DEBUG MsgBuff_Data_32 => MsgBuff_Data_32_48
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 ={v} *Flexcan_Mb_46;
  _2 = _1 >> 16;
  _3 = (unsigned char) _2;
  Flexcan_Mb_Dlc_Value_49 = _3 & 15;
  # DEBUG Flexcan_Mb_Dlc_Value => Flexcan_Mb_Dlc_Value_49
  # DEBUG BEGIN_STMT
  Payload_Size_51 = FlexCAN_ComputePayloadSize (Flexcan_Mb_Dlc_Value_49);
  # DEBUG Payload_Size => Payload_Size_51
  # DEBUG BEGIN_STMT
  _4 = msgBuff_47(D) != 0B;
  _5 = (unsigned char) _4;
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_GetMbPayloadSize (base_43(D), msgBuffIdx_44(D));
  if (_6 < Payload_Size_51)
    goto <bb 3>; [33.00%]
  else
    goto <bb 4>; [67.00%]

  <bb 3> [local count: 38976828]:
  # DEBUG BEGIN_STMT
  Payload_Size_55 = FlexCAN_GetMbPayloadSize (base_43(D), msgBuffIdx_44(D));
  # DEBUG Payload_Size => Payload_Size_55

  <bb 4> [local count: 118111600]:
  # Payload_Size_37 = PHI <Payload_Size_51(2), Payload_Size_55(3)>
  # DEBUG Payload_Size => Payload_Size_37
  # DEBUG BEGIN_STMT
  msgBuff_47(D)->dataLen = Payload_Size_37;
  # DEBUG BEGIN_STMT
  _7 ={v} *Flexcan_Mb_46;
  msgBuff_47(D)->cs = _7;
  # DEBUG BEGIN_STMT
  _8 = _7 & 2097152;
  if (_8 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 5> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  _9 ={v} MEM[(const uint32 *)Flexcan_Mb_46 + 4B];
  msgBuff_47(D)->msgId = _9;
  goto <bb 7>; [100.00%]

  <bb 6> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  _10 ={v} MEM[(const uint32 *)Flexcan_Mb_46 + 4B];
  _11 = _10 >> 18;
  msgBuff_47(D)->msgId = _11;

  <bb 7> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _12 = _7 & 65535;
  msgBuff_47(D)->time_stamp = _12;
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  goto <bb 9>; [100.00%]

  <bb 8> [local count: 955630220]:
  # DEBUG BEGIN_STMT
  _13 = i_35 >> 2;
  _14 = (unsigned int) _13;
  _15 = _14 * 4;
  _50 = _15 + 8;
  _16 = Flexcan_Mb_46 + _50;
  MbWord_64 ={v} *_16;
  # DEBUG MbWord => MbWord_64
  # DEBUG BEGIN_STMT
  _17 = MbWord_64 >> 24;
  _18 = MbWord_64 >> 8;
  _19 = _18 & 65280;
  _20 = _17 | _19;
  _21 = MbWord_64 << 8;
  _22 = _21 & 16711680;
  _23 = _20 | _22;
  _24 = MbWord_64 << 24;
  _25 = MsgBuff_Data_32_48 + _15;
  _26 = _23 | _24;
  *_25 = _26;
  # DEBUG BEGIN_STMT
  i_66 = i_35 + 4;
  # DEBUG i => i_66

  <bb 9> [local count: 1073741821]:
  # i_35 = PHI <0(7), i_66(8)>
  # DEBUG i => i_35
  # DEBUG BEGIN_STMT
  _27 = (unsigned int) i_35;
  _28 = (unsigned int) Payload_Size_37;
  _29 = _28 & 4294967292;
  if (_27 < _29)
    goto <bb 8>; [89.00%]
  else
    goto <bb 13>; [11.00%]

  <bb 13> [local count: 118111600]:
  goto <bb 11>; [100.00%]

  <bb 10> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  _30 = i_36 ^ 3;
  _31 = (sizetype) _30;
  _61 = _31 + 8;
  _32 = Flexcan_Mb_46 + _61;
  _33 = (int) i_36;
  _34 ={v} *_32;
  msgBuff_47(D)->data[_33] = _34;
  # DEBUG BEGIN_STMT
  i_63 = i_36 + 1;
  # DEBUG i => i_63

  <bb 11> [local count: 1073741824]:
  # i_36 = PHI <i_63(10), i_35(13)>
  # DEBUG i => i_36
  # DEBUG BEGIN_STMT
  if (i_36 < Payload_Size_37)
    goto <bb 10>; [89.00%]
  else
    goto <bb 12>; [11.00%]

  <bb 12> [local count: 118111601]:
  return;

}


FlexCAN_GetMsgBuffTimestamp (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  const uint32 * Flexcan_Mb;
  uint32 TimeStamp;
  long unsigned int _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG TimeStamp => 0
  # DEBUG BEGIN_STMT
  Flexcan_Mb_6 = FlexCAN_GetMsgBuffRegion (base_3(D), msgBuffIdx_4(D));
  # DEBUG Flexcan_Mb => Flexcan_Mb_6
  # DEBUG BEGIN_STMT
  _1 ={v} *Flexcan_Mb_6;
  TimeStamp_7 = _1 & 65535;
  # DEBUG TimeStamp => TimeStamp_7
  # DEBUG BEGIN_STMT
  return TimeStamp_7;

}


FlexCAN_SetRxMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx, const struct Flexcan_Ip_MsbuffCodeStatusType * cs, uint32 msgId)
{
  volatile uint32 * flexcan_mb;
  _Bool _1;
  unsigned char _2;
  <unnamed type> _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  flexcan_mb_36 = FlexCAN_GetMsgBuffRegion (base_33(D), msgBuffIdx_34(D));
  # DEBUG flexcan_mb => flexcan_mb_36
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb_id => flexcan_mb_36 + 4
  # DEBUG BEGIN_STMT
  _1 = cs_37(D) != 0B;
  _2 = (unsigned char) _1;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  *flexcan_mb_36 ={v} 0;
  # DEBUG BEGIN_STMT
  MEM[(volatile uint32 *)flexcan_mb_36 + 4B] ={v} 0;
  # DEBUG BEGIN_STMT
  _3 = cs_37(D)->msgIdType;
  if (_3 == 1)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072220]:
  # DEBUG BEGIN_STMT
  _4 ={v} *flexcan_mb_36;
  _5 = _4 | 2097152;
  *flexcan_mb_36 ={v} _5;
  # DEBUG BEGIN_STMT
  _6 ={v} *flexcan_mb_36;
  _7 = _6 & 4290772991;
  *flexcan_mb_36 ={v} _7;
  # DEBUG BEGIN_STMT
  _8 ={v} MEM[(volatile uint32 *)flexcan_mb_36 + 4B];
  _9 = _8 & 3758096384;
  MEM[(volatile uint32 *)flexcan_mb_36 + 4B] ={v} _9;
  # DEBUG BEGIN_STMT
  _10 ={v} MEM[(volatile uint32 *)flexcan_mb_36 + 4B];
  _11 = msgId_44(D) & 536870911;
  _12 = _10 | _11;
  MEM[(volatile uint32 *)flexcan_mb_36 + 4B] ={v} _12;

  <bb 4> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (_3 == 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _13 ={v} *flexcan_mb_36;
  _14 = _13 & 4288675839;
  *flexcan_mb_36 ={v} _14;
  # DEBUG BEGIN_STMT
  _15 ={v} MEM[(volatile uint32 *)flexcan_mb_36 + 4B];
  _16 = _15 & 3758358527;
  MEM[(volatile uint32 *)flexcan_mb_36 + 4B] ={v} _16;
  # DEBUG BEGIN_STMT
  _17 ={v} MEM[(volatile uint32 *)flexcan_mb_36 + 4B];
  _18 = msgId_44(D) << 18;
  _19 = _18 & 536608768;
  _20 = _17 | _19;
  MEM[(volatile uint32 *)flexcan_mb_36 + 4B] ={v} _20;

  <bb 6> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _21 = cs_37(D)->code;
  if (_21 != 15)
    goto <bb 7>; [66.00%]
  else
    goto <bb 8>; [34.00%]

  <bb 7> [local count: 708669605]:
  # DEBUG BEGIN_STMT
  _22 ={v} *flexcan_mb_36;
  _23 = _22 & 4043309055;
  *flexcan_mb_36 ={v} _23;
  # DEBUG BEGIN_STMT
  _24 ={v} *flexcan_mb_36;
  _25 = cs_37(D)->code;
  _26 = _25 << 24;
  _27 = _26 & 251658240;
  _28 = _24 | _27;
  *flexcan_mb_36 ={v} _28;

  <bb 8> [local count: 1073741824]:
  return;

}


FlexCAN_EnableInterrupts (struct FLEXCAN_Type * pBase, uint8 u8Instance)
{
  uint32 u32MaxMbCrtlNum;
  int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  u32MaxMbCrtlNum_7 = FlexCAN_GetMaxMbNum (pBase_6(D));
  # DEBUG u32MaxMbCrtlNum => u32MaxMbCrtlNum_7
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_8(D);
  _2 ={v} FlexCAN_Ip_au32ImaskBuff[_1][0];
  pBase_6(D)->IMASK1 ={v} _2;
  # DEBUG BEGIN_STMT
  if (u32MaxMbCrtlNum_7 > 32)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _3 ={v} FlexCAN_Ip_au32ImaskBuff[_1][1];
  pBase_6(D)->IMASK2 ={v} _3;

  <bb 4> [local count: 1073741824]:
  return;

}


FlexCAN_DisableInterrupts (struct FLEXCAN_Type * pBase)
{
  uint32 u32MaxMbCrtlNum;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  u32MaxMbCrtlNum_4 = FlexCAN_GetMaxMbNum (pBase_3(D));
  # DEBUG u32MaxMbCrtlNum => u32MaxMbCrtlNum_4
  # DEBUG BEGIN_STMT
  pBase_3(D)->IMASK1 ={v} 0;
  # DEBUG BEGIN_STMT
  if (u32MaxMbCrtlNum_4 > 32)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  pBase_3(D)->IMASK2 ={v} 0;

  <bb 4> [local count: 1073741824]:
  return;

}


FLEXCAN_ClearMsgBuffIntCmd (struct FLEXCAN_Type * pBase, uint8 u8Instance, uint32 mb_idx, boolean bIsIntActive)
{
  uint32 temp;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  int _10;
  long unsigned int _11;
  long unsigned int _12;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = mb_idx_17(D) & 31;
  temp_18 = 1 << _1;
  # DEBUG temp => temp_18
  # DEBUG BEGIN_STMT
  if (mb_idx_17(D) <= 31)
    goto <bb 3>; [33.00%]
  else
    goto <bb 6>; [67.00%]

  <bb 3> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11 ();
  # DEBUG BEGIN_STMT
  _2 ={v} pBase_21(D)->IMASK1;
  _3 = ~temp_18;
  _4 = (int) u8Instance_22(D);
  _5 = _2 & _3;
  FlexCAN_Ip_au32ImaskBuff[_4][0] ={v} _5;
  # DEBUG BEGIN_STMT
  if (bIsIntActive_24(D) == 1)
    goto <bb 4>; [34.00%]
  else
    goto <bb 5>; [66.00%]

  <bb 4> [local count: 120473833]:
  # DEBUG BEGIN_STMT
  _6 ={v} FlexCAN_Ip_au32ImaskBuff[_4][0];
  pBase_21(D)->IMASK1 ={v} _6;

  <bb 5> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11 ();

  <bb 6> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _7 = mb_idx_17(D) + 4294967264;
  if (_7 <= 31)
    goto <bb 7>; [33.00%]
  else
    goto <bb 10>; [67.00%]

  <bb 7> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11 ();
  # DEBUG BEGIN_STMT
  _8 ={v} pBase_21(D)->IMASK2;
  _9 = ~temp_18;
  _10 = (int) u8Instance_22(D);
  _11 = _8 & _9;
  FlexCAN_Ip_au32ImaskBuff[_10][1] ={v} _11;
  # DEBUG BEGIN_STMT
  if (bIsIntActive_24(D) == 1)
    goto <bb 8>; [34.00%]
  else
    goto <bb 9>; [66.00%]

  <bb 8> [local count: 120473833]:
  # DEBUG BEGIN_STMT
  _12 ={v} FlexCAN_Ip_au32ImaskBuff[_10][1];
  pBase_21(D)->IMASK2 ={v} _12;

  <bb 9> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11 ();

  <bb 10> [local count: 1073741824]:
  return;

}


FlexCAN_SetMsgBuffIntCmd (struct FLEXCAN_Type * base, uint8 u8Instance, uint32 msgBuffIdx, boolean enable, boolean bIsIntActive)
{
  uint32 temp;
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG stat => 0
  # DEBUG BEGIN_STMT
  _1 = msgBuffIdx_25(D) & 31;
  temp_26 = 1 << _1;
  # DEBUG temp => temp_26
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_25(D) <= 31)
    goto <bb 3>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (enable_28(D) != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 4> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_30(D);
  _3 ={v} FlexCAN_Ip_au32ImaskBuff[_2][0];
  _4 = _3 | temp_26;
  FlexCAN_Ip_au32ImaskBuff[_2][0] ={v} _4;
  # DEBUG BEGIN_STMT
  if (bIsIntActive_37(D) == 1)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 91268055]:
  # DEBUG BEGIN_STMT
  _5 ={v} FlexCAN_Ip_au32ImaskBuff[_2][0];
  base_32(D)->IMASK1 ={v} _5;

  <bb 6> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();
  goto <bb 8>; [100.00%]

  <bb 7> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  # DEBUG BEGIN_STMT
  _6 = (int) u8Instance_30(D);
  _7 ={v} FlexCAN_Ip_au32ImaskBuff[_6][0];
  _8 = ~temp_26;
  _9 = _7 & _8;
  FlexCAN_Ip_au32ImaskBuff[_6][0] ={v} _9;
  # DEBUG BEGIN_STMT
  _10 ={v} FlexCAN_Ip_au32ImaskBuff[_6][0];
  base_32(D)->IMASK1 ={v} _10;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();

  <bb 8> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _11 = msgBuffIdx_25(D) + 4294967264;
  if (_11 <= 31)
    goto <bb 9>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 9> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (enable_28(D) != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 10> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  # DEBUG BEGIN_STMT
  _12 = (int) u8Instance_30(D);
  _13 ={v} FlexCAN_Ip_au32ImaskBuff[_12][1];
  _14 = _13 | temp_26;
  FlexCAN_Ip_au32ImaskBuff[_12][1] ={v} _14;
  # DEBUG BEGIN_STMT
  if (bIsIntActive_37(D) == 1)
    goto <bb 11>; [34.00%]
  else
    goto <bb 12>; [66.00%]

  <bb 11> [local count: 91268055]:
  # DEBUG BEGIN_STMT
  _15 ={v} FlexCAN_Ip_au32ImaskBuff[_12][1];
  base_32(D)->IMASK2 ={v} _15;

  <bb 12> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();
  goto <bb 14>; [100.00%]

  <bb 13> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  # DEBUG BEGIN_STMT
  _16 = (int) u8Instance_30(D);
  _17 ={v} FlexCAN_Ip_au32ImaskBuff[_16][1];
  _18 = ~temp_26;
  _19 = _17 & _18;
  FlexCAN_Ip_au32ImaskBuff[_16][1] ={v} _19;
  # DEBUG BEGIN_STMT
  _20 ={v} FlexCAN_Ip_au32ImaskBuff[_16][1];
  base_32(D)->IMASK2 ={v} _20;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();

  <bb 14> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return 0;

}


FlexCAN_LockRxMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  const uint32 * flexcan_mb;
  long unsigned int vol.8_6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  flexcan_mb_5 = FlexCAN_GetMsgBuffRegion (base_2(D), msgBuffIdx_3(D));
  # DEBUG flexcan_mb => flexcan_mb_5
  # DEBUG BEGIN_STMT
  vol.8_6 ={v} *flexcan_mb_5;
  return;

}


FlexCAN_GetMbPayloadSize (const struct FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
  uint8 mb_size;
  uint8 i;
  uint8 maxMbBlockNum;
  uint8 can_real_payload;
  long unsigned int _1;
  long unsigned int _2;
  unsigned char _3;
  long unsigned int _4;

  <bb 2> [local count: 397250652]:
  # DEBUG BEGIN_STMT
  # DEBUG arbitration_field_size => 8
  # DEBUG BEGIN_STMT
  # DEBUG ramBlockSize => 512
  # DEBUG BEGIN_STMT
  # DEBUG can_real_payload => 8
  # DEBUG BEGIN_STMT
  # DEBUG maxMbBlockNum => 0
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  # DEBUG BEGIN_STMT
  # DEBUG mb_size => 0
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  goto <bb 5>; [100.00%]

  <bb 3> [local count: 715863675]:
  # DEBUG BEGIN_STMT
  can_real_payload_14 = FlexCAN_GetPayloadSize (base_12(D), i_8);
  # DEBUG can_real_payload => can_real_payload_14
  # DEBUG BEGIN_STMT
  mb_size_15 = can_real_payload_14 + 8;
  # DEBUG mb_size => mb_size_15
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) mb_size_15;
  _2 = 512 / _1;
  _3 = (unsigned char) _2;
  maxMbBlockNum_16 = _3 + maxMbBlockNum_7;
  # DEBUG maxMbBlockNum => maxMbBlockNum_16
  # DEBUG BEGIN_STMT
  _4 = (long unsigned int) maxMbBlockNum_16;
  if (_4 > maxMsgBuffNum_17(D))
    goto <bb 6>; [5.50%]
  else
    goto <bb 4>; [94.50%]

  <bb 4> [local count: 676491173]:
  # DEBUG BEGIN_STMT
  i_18 = i_8 + 1;
  # DEBUG i => i_18

  <bb 5> [local count: 1073741824]:
  # can_real_payload_5 = PHI <8(2), can_real_payload_14(4)>
  # maxMbBlockNum_7 = PHI <0(2), maxMbBlockNum_16(4)>
  # i_8 = PHI <0(2), i_18(4)>
  # DEBUG i => i_8
  # DEBUG maxMbBlockNum => maxMbBlockNum_7
  # DEBUG can_real_payload => can_real_payload_5
  # DEBUG BEGIN_STMT
  if (i_8 != 2)
    goto <bb 3>; [66.67%]
  else
    goto <bb 6>; [33.33%]

  <bb 6> [local count: 397250652]:
  # can_real_payload_6 = PHI <can_real_payload_14(3), can_real_payload_5(5)>
  # DEBUG can_real_payload => can_real_payload_6
  # DEBUG BEGIN_STMT
  return can_real_payload_6;

}


FlexCAN_GetPayloadSize (const struct FLEXCAN_Type * base, uint8 mbdsrIdx)
{
  uint32 payloadSize;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  uint8 _17;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG payloadSize => 8
  # DEBUG BEGIN_STMT
  switch (mbdsrIdx_11(D)) <default: <L2> [33.33%], case 0: <L0> [33.33%], case 1: <L1> [33.33%]>

  <bb 3> [local count: 357878150]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 ={v} base_13(D)->FDCTRL;
  _2 = _1 >> 16;
  _3 = _2 & 3;
  payloadSize_15 = 8 << _3;
  # DEBUG payloadSize => payloadSize_15
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 4> [local count: 357878150]:
<L1>:
  # DEBUG BEGIN_STMT
  _4 ={v} base_13(D)->FDCTRL;
  _5 = _4 >> 19;
  _6 = _5 & 3;
  payloadSize_14 = 8 << _6;
  # DEBUG payloadSize => payloadSize_14
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 357878150]:
<L2>:
  # DEBUG BEGIN_STMT
  _7 ={v} base_13(D)->FDCTRL;
  _8 = _7 >> 16;
  _9 = _8 & 3;
  payloadSize_16 = 8 << _9;
  # DEBUG payloadSize => payloadSize_16
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073634451]:
  # payloadSize_10 = PHI <payloadSize_15(3), payloadSize_14(4), payloadSize_16(5)>
  # DEBUG payloadSize => payloadSize_10
  # DEBUG BEGIN_STMT
  _17 = (uint8) payloadSize_10;
  return _17;

}


FlexCAN_SetPayloadSize (struct FLEXCAN_Type * base, const struct Flexcan_Ip_PayloadSizeType * payloadSize)
{
  uint32 tmp;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  <unnamed type> _5;
  long unsigned int _6;
  <unnamed type> _7;
  long unsigned int _8;
  int iftmp.4_9;
  int iftmp.5_10;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG base => base_13(D)
  # DEBUG INLINE_ENTRY FlexCAN_IsFDEnabled
  # DEBUG BEGIN_STMT
  _23 ={v} MEM[(const struct FLEXCAN_Type *)base_13(D)].MCR;
  _24 = _23 & 2048;
  # DEBUG base => NULL
  if (_24 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 536870913]:
  _1 = payloadSize_14(D)->payloadBlock0;
  if (_1 == 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 4> [local count: 268435456]:

  <bb 5> [local count: 1073741824]:
  # iftmp.4_9 = PHI <1(3), 0(4), 1(2)>
  _2 = (unsigned char) iftmp.4_9;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  # DEBUG base => base_13(D)
  # DEBUG INLINE_ENTRY FlexCAN_IsFDEnabled
  # DEBUG BEGIN_STMT
  _25 ={v} MEM[(const struct FLEXCAN_Type *)base_13(D)].MCR;
  _26 = _25 & 2048;
  # DEBUG base => NULL
  if (_26 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 6> [local count: 536870913]:
  _3 = payloadSize_14(D)->payloadBlock1;
  if (_3 == 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 7> [local count: 268435456]:

  <bb 8> [local count: 1073741824]:
  # iftmp.5_10 = PHI <1(6), 0(7), 1(5)>
  _4 = (unsigned char) iftmp.5_10;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  # DEBUG base => base_13(D)
  # DEBUG INLINE_ENTRY FlexCAN_IsFDEnabled
  # DEBUG BEGIN_STMT
  _27 ={v} MEM[(const struct FLEXCAN_Type *)base_13(D)].MCR;
  _28 = _27 & 2048;
  # DEBUG base => NULL
  if (_28 != 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  tmp_17 ={v} base_13(D)->FDCTRL;
  # DEBUG tmp => tmp_17
  # DEBUG BEGIN_STMT
  tmp_18 = tmp_17 & 4294770687;
  # DEBUG tmp => tmp_18
  # DEBUG BEGIN_STMT
  _5 = payloadSize_14(D)->payloadBlock0;
  _6 = _5 << 16;
  tmp_19 = _6 | tmp_18;
  # DEBUG tmp => tmp_19
  # DEBUG BEGIN_STMT
  tmp_20 = tmp_19 & 4293394431;
  # DEBUG tmp => tmp_20
  # DEBUG BEGIN_STMT
  _7 = payloadSize_14(D)->payloadBlock1;
  _8 = _7 << 19;
  tmp_21 = _8 | tmp_20;
  # DEBUG tmp => tmp_21
  # DEBUG BEGIN_STMT
  base_13(D)->FDCTRL ={v} tmp_21;

  <bb 10> [local count: 1073741824]:
  return;

}


FlexCAN_EnableRxFifo (struct FLEXCAN_Type * base, uint32 numOfFilters)
{
  Flexcan_Ip_StatusType stat;
  uint32 i;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _17;

  <bb 2> [local count: 236223200]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_GetMaxMbNum (base_15(D));
  # DEBUG noOfMbx => (uint16) _1
  # DEBUG BEGIN_STMT
  # DEBUG stat => 0
  # DEBUG BEGIN_STMT
  _2 ={v} base_15(D)->MCR;
  _3 = _2 & 2048;
  if (_3 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 118111600]:
  # DEBUG stat => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 ={v} base_15(D)->MCR;
  _5 = _4 | 536870912;
  base_15(D)->MCR ={v} _5;
  # DEBUG BEGIN_STMT
  _6 ={v} base_15(D)->CTRL2;
  _7 = _6 & 4043309055;
  _8 = numOfFilters_19(D) << 24;
  _9 = _8 & 251658240;
  _10 = _7 | _9;
  base_15(D)->CTRL2 ={v} _10;
  # DEBUG BEGIN_STMT
  base_15(D)->RXFGMASK ={v} 4294967295;
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 955630223]:
  # DEBUG BEGIN_STMT
  base_15(D)->RXIMR[i_11] ={v} 536870911;
  # DEBUG BEGIN_STMT
  i_23 = i_11 + 1;
  # DEBUG i => i_23

  <bb 5> [local count: 1073741824]:
  # i_11 = PHI <0(3), i_23(4)>
  # DEBUG i => i_11
  # DEBUG BEGIN_STMT
  _17 = _1 & 65535;
  if (i_11 < _17)
    goto <bb 4>; [89.00%]
  else
    goto <bb 6>; [11.00%]

  <bb 6> [local count: 236223201]:
  # stat_16 = PHI <1(2), 0(5)>
  # DEBUG stat => NULL
  # DEBUG BEGIN_STMT
  return stat_16;

}


FlexCAN_Init (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _24;

  <bb 2> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  # DEBUG timeElapsed => 0
  # DEBUG BEGIN_STMT
  uS2Ticks_18 = OsIf_MicrosToTicks (1000000, 0);
  # DEBUG uS2Ticks => uS2Ticks_18
  # DEBUG BEGIN_STMT
  # DEBUG returnResult => 0
  # DEBUG BEGIN_STMT
  _1 ={v} base_19(D)->MCR;
  _2 = _1 | 33554432;
  base_19(D)->MCR ={v} _2;
  # DEBUG BEGIN_STMT
  _3 = OsIf_GetCounter (0);
  timeStart = _3;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 1014686025]:
  # DEBUG BEGIN_STMT
  _24 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_25 = timeElapsed_9 + _24;
  # DEBUG timeElapsed => timeElapsed_25
  # DEBUG BEGIN_STMT
  if (uS2Ticks_18 <= timeElapsed_25)
    goto <bb 5>; [5.50%]
  else
    goto <bb 10>; [94.50%]

  <bb 10> [local count: 958878293]:

  <bb 4> [local count: 1073741824]:
  # timeElapsed_9 = PHI <0(2), timeElapsed_25(10)>
  # DEBUG timeElapsed => timeElapsed_9
  # DEBUG BEGIN_STMT
  _4 ={v} base_19(D)->MCR;
  _5 = _4 & 33554432;
  if (_5 != 0)
    goto <bb 3>; [94.50%]
  else
    goto <bb 5>; [5.50%]

  <bb 5> [local count: 114863532]:
  # returnResult_10 = PHI <3(3), 0(4)>
  # DEBUG returnResult => returnResult_10
  # DEBUG BEGIN_STMT
  if (returnResult_10 == 0)
    goto <bb 6>; [33.00%]
  else
    goto <bb 9>; [67.00%]

  <bb 6> [local count: 37904965]:
  # DEBUG BEGIN_STMT
  _6 ={v} base_19(D)->MCR;
  _7 = _6 | 4096;
  base_19(D)->MCR ={v} _7;
  # DEBUG BEGIN_STMT
  FlexCAN_ClearRAM (base_19(D));
  # DEBUG BEGIN_STMT
  base_19(D)->RXMGMASK ={v} 4294967295;
  # DEBUG BEGIN_STMT
  base_19(D)->RX14MASK ={v} 4294967295;
  # DEBUG BEGIN_STMT
  base_19(D)->RX15MASK ={v} 4294967295;
  # DEBUG BEGIN_STMT
  base_19(D)->IMASK1 ={v} 0;
  # DEBUG BEGIN_STMT
  base_19(D)->IFLAG1 ={v} 4294967295;
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_GetMaxMbNum (base_19(D));
  if (_8 > 32)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 18952483]:
  # DEBUG BEGIN_STMT
  base_19(D)->IMASK2 ={v} 0;
  # DEBUG BEGIN_STMT
  base_19(D)->IFLAG2 ={v} 4294967295;

  <bb 8> [local count: 37904965]:
  # DEBUG BEGIN_STMT
  base_19(D)->ESR1 ={v} 3866630;
  # DEBUG BEGIN_STMT
  base_19(D)->CTRL1 ={v} 0;
  # DEBUG BEGIN_STMT
  base_19(D)->CTRL2 ={v} 1048576;
  # DEBUG BEGIN_STMT
  base_19(D)->CBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_19(D)->EPRS ={v} 0;
  # DEBUG BEGIN_STMT
  base_19(D)->ENCBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_19(D)->EDCBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_19(D)->ETDC ={v} 0;
  # DEBUG BEGIN_STMT
  base_19(D)->FDCBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_19(D)->FDCTRL ={v} 2147500288;

  <bb 9> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  timeStart ={v} {CLOBBER};
  return returnResult_10;

}


FlexCAN_SetErrIntCmd (struct FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
  uint32 temp;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG temp => errType_17(D)
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06 ();
  # DEBUG BEGIN_STMT
  if (enable_20(D) != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (errType_17(D) == 16385)
    goto <bb 4>; [34.00%]
  else
    goto <bb 5>; [66.00%]

  <bb 4> [local count: 182536110]:
  # DEBUG BEGIN_STMT
  _1 ={v} base_21(D)->CTRL2;
  _2 = _1 | 2147483648;
  base_21(D)->CTRL2 ={v} _2;
  # DEBUG BEGIN_STMT
  goto <bb 13>; [100.00%]

  <bb 5> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  if (errType_17(D) == 1024)
    goto <bb 7>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 6> [local count: 233860969]:
  if (errType_17(D) == 2048)
    goto <bb 7>; [34.00%]
  else
    goto <bb 8>; [66.00%]

  <bb 7> [local count: 199986562]:
  # DEBUG BEGIN_STMT
  _3 ={v} base_21(D)->MCR;
  _4 = _3 | 2097152;
  base_21(D)->MCR ={v} _4;

  <bb 8> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  _5 ={v} base_21(D)->CTRL1;
  _6 = _5 | errType_17(D);
  base_21(D)->CTRL1 ={v} _6;
  goto <bb 13>; [100.00%]

  <bb 9> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (errType_17(D) == 16385)
    goto <bb 10>; [34.00%]
  else
    goto <bb 11>; [66.00%]

  <bb 10> [local count: 182536110]:
  # DEBUG BEGIN_STMT
  _7 ={v} base_21(D)->CTRL2;
  _8 = _7 & 2147483647;
  base_21(D)->CTRL2 ={v} _8;
  # DEBUG BEGIN_STMT
  goto <bb 13>; [100.00%]

  <bb 11> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  _9 ={v} base_21(D)->CTRL1;
  _10 = ~errType_17(D);
  _11 = _9 & _10;
  base_21(D)->CTRL1 ={v} _11;
  # DEBUG BEGIN_STMT
  temp_23 ={v} base_21(D)->CTRL1;
  # DEBUG temp => temp_23
  # DEBUG BEGIN_STMT
  _12 = temp_23 & 3072;
  if (_12 == 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  _13 ={v} base_21(D)->MCR;
  _14 = _13 & 4292870143;
  base_21(D)->MCR ={v} _14;

  <bb 13> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06 ();
  return;

}


FlexCAN_Disable (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  long unsigned int _1;
  signed int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _23;

  <bb 2> [local count: 276913048]:
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  # DEBUG timeElapsed => 0
  # DEBUG BEGIN_STMT
  uS2Ticks_15 = OsIf_MicrosToTicks (1000000, 0);
  # DEBUG uS2Ticks => uS2Ticks_15
  # DEBUG BEGIN_STMT
  # DEBUG returnResult => 0
  # DEBUG BEGIN_STMT
  _1 ={v} base_16(D)->MCR;
  _2 = (signed int) _1;
  if (_2 >= 0)
    goto <bb 3>; [41.48%]
  else
    goto <bb 6>; [58.52%]

  <bb 3> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05 ();
  # DEBUG BEGIN_STMT
  _3 ={v} base_16(D)->MCR;
  _4 = _3 | 2147483648;
  base_16(D)->MCR ={v} _4;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05 ();
  # DEBUG BEGIN_STMT
  _5 = OsIf_GetCounter (0);
  timeStart = _5;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 1014686024]:
  # DEBUG BEGIN_STMT
  _23 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_24 = timeElapsed_8 + _23;
  # DEBUG timeElapsed => timeElapsed_24
  # DEBUG BEGIN_STMT
  if (uS2Ticks_15 <= timeElapsed_24)
    goto <bb 6>; [5.50%]
  else
    goto <bb 7>; [94.50%]

  <bb 7> [local count: 958878294]:

  <bb 5> [local count: 1073741824]:
  # timeElapsed_8 = PHI <0(3), timeElapsed_24(7)>
  # DEBUG timeElapsed => timeElapsed_8
  # DEBUG BEGIN_STMT
  _6 ={v} base_16(D)->MCR;
  _7 = _6 & 1048576;
  if (_7 == 0)
    goto <bb 4>; [94.50%]
  else
    goto <bb 6>; [5.50%]

  <bb 6> [local count: 276913047]:
  # returnResult_9 = PHI <0(2), 3(4), 0(5)>
  # DEBUG returnResult => returnResult_9
  # DEBUG BEGIN_STMT
  timeStart ={v} {CLOBBER};
  return returnResult_9;

}


FlexCAN_ExitFreezeMode (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnValue;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _24;

  <bb 2> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  # DEBUG timeElapsed => 0
  # DEBUG BEGIN_STMT
  uS2Ticks_15 = OsIf_MicrosToTicks (1000000, 0);
  # DEBUG uS2Ticks => uS2Ticks_15
  # DEBUG BEGIN_STMT
  # DEBUG returnValue => 0
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04 ();
  # DEBUG BEGIN_STMT
  _1 ={v} base_17(D)->MCR;
  _2 = _1 & 4026531839;
  base_17(D)->MCR ={v} _2;
  # DEBUG BEGIN_STMT
  _3 ={v} base_17(D)->MCR;
  _4 = _3 & 3221225471;
  base_17(D)->MCR ={v} _4;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04 ();
  # DEBUG BEGIN_STMT
  _5 = OsIf_GetCounter (0);
  timeStart = _5;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 1014686025]:
  # DEBUG BEGIN_STMT
  _24 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_25 = timeElapsed_8 + _24;
  # DEBUG timeElapsed => timeElapsed_25
  # DEBUG BEGIN_STMT
  if (uS2Ticks_15 <= timeElapsed_25)
    goto <bb 5>; [5.50%]
  else
    goto <bb 6>; [94.50%]

  <bb 6> [local count: 958878293]:

  <bb 4> [local count: 1073741824]:
  # timeElapsed_8 = PHI <0(2), timeElapsed_25(6)>
  # DEBUG timeElapsed => timeElapsed_8
  # DEBUG BEGIN_STMT
  _6 ={v} base_17(D)->MCR;
  _7 = _6 & 16777216;
  if (_7 != 0)
    goto <bb 3>; [94.50%]
  else
    goto <bb 5>; [5.50%]

  <bb 5> [local count: 114863532]:
  # returnValue_9 = PHI <3(3), 0(4)>
  # DEBUG returnValue => returnValue_9
  # DEBUG BEGIN_STMT
  timeStart ={v} {CLOBBER};
  return returnValue_9;

}


FlexCAN_Enable (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnValue;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _21;

  <bb 2> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  # DEBUG timeElapsed => 0
  # DEBUG BEGIN_STMT
  uS2Ticks_13 = OsIf_MicrosToTicks (1000000, 0);
  # DEBUG uS2Ticks => uS2Ticks_13
  # DEBUG BEGIN_STMT
  # DEBUG returnValue => 0
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03 ();
  # DEBUG BEGIN_STMT
  _1 ={v} base_15(D)->MCR;
  _2 = _1 & 2147483647;
  base_15(D)->MCR ={v} _2;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03 ();
  # DEBUG BEGIN_STMT
  _3 = OsIf_GetCounter (0);
  timeStart = _3;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 1014686025]:
  # DEBUG BEGIN_STMT
  _21 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_22 = timeElapsed_6 + _21;
  # DEBUG timeElapsed => timeElapsed_22
  # DEBUG BEGIN_STMT
  if (uS2Ticks_13 <= timeElapsed_22)
    goto <bb 5>; [5.50%]
  else
    goto <bb 6>; [94.50%]

  <bb 6> [local count: 958878293]:

  <bb 4> [local count: 1073741824]:
  # timeElapsed_6 = PHI <0(2), timeElapsed_22(6)>
  # DEBUG timeElapsed => timeElapsed_6
  # DEBUG BEGIN_STMT
  _4 ={v} base_15(D)->MCR;
  _5 = _4 & 16777216;
  if (_5 == 0)
    goto <bb 3>; [94.50%]
  else
    goto <bb 5>; [5.50%]

  <bb 5> [local count: 114863532]:
  # returnValue_7 = PHI <3(3), 0(4)>
  # DEBUG returnValue => returnValue_7
  # DEBUG BEGIN_STMT
  timeStart ={v} {CLOBBER};
  return returnValue_7;

}


FlexCAN_EnterFreezeMode (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  signed int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _30;

  <bb 2> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  # DEBUG timeElapsed => 0
  # DEBUG BEGIN_STMT
  uS2Ticks_20 = OsIf_MicrosToTicks (1000000, 0);
  # DEBUG uS2Ticks => uS2Ticks_20
  # DEBUG BEGIN_STMT
  # DEBUG returnResult => 0
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02 ();
  # DEBUG BEGIN_STMT
  _1 ={v} base_22(D)->MCR;
  _2 = _1 | 1073741824;
  base_22(D)->MCR ={v} _2;
  # DEBUG BEGIN_STMT
  _3 ={v} base_22(D)->MCR;
  _4 = _3 | 268435456;
  base_22(D)->MCR ={v} _4;
  # DEBUG BEGIN_STMT
  _5 ={v} base_22(D)->MCR;
  _6 = (signed int) _5;
  if (_6 < 0)
    goto <bb 3>; [41.00%]
  else
    goto <bb 4>; [59.00%]

  <bb 3> [local count: 47094048]:
  # DEBUG BEGIN_STMT
  _7 ={v} base_22(D)->MCR;
  _8 = _7 & 2147483647;
  base_22(D)->MCR ={v} _8;

  <bb 4> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02 ();
  # DEBUG BEGIN_STMT
  _9 = OsIf_GetCounter (0);
  timeStart = _9;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 1014686025]:
  # DEBUG BEGIN_STMT
  _30 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_31 = timeElapsed_12 + _30;
  # DEBUG timeElapsed => timeElapsed_31
  # DEBUG BEGIN_STMT
  if (uS2Ticks_20 <= timeElapsed_31)
    goto <bb 7>; [5.50%]
  else
    goto <bb 8>; [94.50%]

  <bb 8> [local count: 958878293]:

  <bb 6> [local count: 1073741824]:
  # timeElapsed_12 = PHI <0(4), timeElapsed_31(8)>
  # DEBUG timeElapsed => timeElapsed_12
  # DEBUG BEGIN_STMT
  _10 ={v} base_22(D)->MCR;
  _11 = _10 & 16777216;
  if (_11 == 0)
    goto <bb 5>; [94.50%]
  else
    goto <bb 7>; [5.50%]

  <bb 7> [local count: 114863532]:
  # returnResult_13 = PHI <3(5), 0(6)>
  # DEBUG returnResult => returnResult_13
  # DEBUG BEGIN_STMT
  timeStart ={v} {CLOBBER};
  return returnResult_13;

}


FlexCAN_GetMaxMbNum (const struct FLEXCAN_Type * base)
{
  static const uint32 maxMbNum[4] = {64, 64, 64, 32};
  static struct FLEXCAN_Type * const flexcanBase[4] = {1076903936B, 1076920320B, 1076936704B, 1076953088B};
  uint32 ret;
  uint32 i;
  struct FLEXCAN_Type * _1;

  <bb 2> [local count: 214748364]:
  # DEBUG BEGIN_STMT
  # DEBUG ret => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  goto <bb 6>; [100.00%]

  <bb 3> [local count: 858993459]:
  # DEBUG BEGIN_STMT
  _1 = flexcanBase[i_2];
  if (_1 == base_7(D))
    goto <bb 4>; [30.00%]
  else
    goto <bb 5>; [70.00%]

  <bb 4> [local count: 257698038]:
  # DEBUG BEGIN_STMT
  ret_8 = maxMbNum[i_2];
  # DEBUG ret => ret_8

  <bb 5> [local count: 858993459]:
  # ret_3 = PHI <ret_4(3), ret_8(4)>
  # DEBUG ret => ret_3
  # DEBUG BEGIN_STMT
  i_9 = i_2 + 1;
  # DEBUG i => i_9

  <bb 6> [local count: 1073741824]:
  # i_2 = PHI <0(2), i_9(5)>
  # ret_4 = PHI <0(2), ret_3(5)>
  # DEBUG ret => ret_4
  # DEBUG i => i_2
  # DEBUG BEGIN_STMT
  if (i_2 != 4)
    goto <bb 3>; [80.00%]
  else
    goto <bb 7>; [20.00%]

  <bb 7> [local count: 214748365]:
  # ret_5 = PHI <ret_4(6)>
  # DEBUG BEGIN_STMT
  return ret_5;

}


FlexCAN_GetMsgBuffRegion (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  volatile uint32 * pAddressRet;
  volatile uint32 * RAM;
  uint8 payload_size;
  uint32 mb_index;
  uint8 maxMbNum;
  uint8 i;
  uint32 msgBuffIdxBackup;
  uint32 ramBlockOffset;
  uint8 mb_size;
  long unsigned int base.0_1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _21;

  <bb 2> [local count: 397250652]:
  # DEBUG BEGIN_STMT
  # DEBUG arbitration_field_size => 8
  # DEBUG BEGIN_STMT
  # DEBUG mb_size => 0
  # DEBUG BEGIN_STMT
  # DEBUG ramBlockSize => 512
  # DEBUG BEGIN_STMT
  # DEBUG ramBlockOffset => 0
  # DEBUG BEGIN_STMT
  # DEBUG msgBuffIdxBackup => msgBuffIdx_23(D)
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  # DEBUG BEGIN_STMT
  # DEBUG maxMbNum => 0
  # DEBUG BEGIN_STMT
  # DEBUG mb_index => 0
  # DEBUG BEGIN_STMT
  # DEBUG payload_size => 0
  # DEBUG BEGIN_STMT
  base.0_1 = (long unsigned int) base_24(D);
  _2 = base.0_1 + 128;
  RAM_25 = (volatile uint32 *) _2;
  # DEBUG RAM => RAM_25
  # DEBUG BEGIN_STMT
  # DEBUG pAddressRet => 0B
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  goto <bb 5>; [100.00%]

  <bb 3> [local count: 715863675]:
  # DEBUG BEGIN_STMT
  payload_size_28 = FlexCAN_GetPayloadSize (base_24(D), i_16);
  # DEBUG payload_size => payload_size_28
  # DEBUG BEGIN_STMT
  mb_size_29 = payload_size_28 + 8;
  # DEBUG mb_size => mb_size_29
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) mb_size_29;
  _4 = 512 / _3;
  maxMbNum_30 = (uint8) _4;
  # DEBUG maxMbNum => maxMbNum_30
  # DEBUG BEGIN_STMT
  _21 = _4 & 255;
  if (msgBuffIdxBackup_15 < _21)
    goto <bb 6>; [5.50%]
  else
    goto <bb 4>; [94.50%]

  <bb 4> [local count: 676491173]:
  # DEBUG BEGIN_STMT
  ramBlockOffset_31 = ramBlockOffset_14 + 128;
  # DEBUG ramBlockOffset => ramBlockOffset_31
  # DEBUG BEGIN_STMT
  msgBuffIdxBackup_32 = msgBuffIdxBackup_15 - _21;
  # DEBUG msgBuffIdxBackup => msgBuffIdxBackup_32
  # DEBUG BEGIN_STMT
  i_33 = i_16 + 1;
  # DEBUG i => i_33

  <bb 5> [local count: 1073741824]:
  # mb_size_12 = PHI <0(2), mb_size_29(4)>
  # ramBlockOffset_14 = PHI <0(2), ramBlockOffset_31(4)>
  # msgBuffIdxBackup_15 = PHI <msgBuffIdx_23(D)(2), msgBuffIdxBackup_32(4)>
  # i_16 = PHI <0(2), i_33(4)>
  # maxMbNum_17 = PHI <0(2), maxMbNum_30(4)>
  # DEBUG maxMbNum => maxMbNum_17
  # DEBUG i => i_16
  # DEBUG msgBuffIdxBackup => msgBuffIdxBackup_15
  # DEBUG ramBlockOffset => ramBlockOffset_14
  # DEBUG mb_size => mb_size_12
  # DEBUG BEGIN_STMT
  if (i_16 != 2)
    goto <bb 3>; [66.67%]
  else
    goto <bb 6>; [33.33%]

  <bb 6> [local count: 397250652]:
  # mb_size_13 = PHI <mb_size_29(3), mb_size_12(5)>
  # maxMbNum_18 = PHI <maxMbNum_30(3), maxMbNum_17(5)>
  # ramBlockOffset_5 = PHI <ramBlockOffset_14(3), ramBlockOffset_14(5)>
  # msgBuffIdxBackup_22 = PHI <msgBuffIdxBackup_15(3), msgBuffIdxBackup_15(5)>
  # DEBUG maxMbNum => maxMbNum_18
  # DEBUG mb_size => mb_size_13
  # DEBUG BEGIN_STMT
  _6 = (long unsigned int) maxMbNum_18;
  _7 = msgBuffIdxBackup_22 % _6;
  _8 = mb_size_13 >> 2;
  _9 = (long unsigned int) _8;
  _10 = _7 * _9;
  mb_index_34 = ramBlockOffset_5 + _10;
  # DEBUG mb_index => mb_index_34
  # DEBUG BEGIN_STMT
  _11 = mb_index_34 * 4;
  pAddressRet_35 = RAM_25 + _11;
  # DEBUG pAddressRet => pAddressRet_35
  # DEBUG BEGIN_STMT
  return pAddressRet_35;

}


FlexCAN_ComputePayloadSize (uint8 dlcValue)
{
  uint8 ret;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ret => 8
  # DEBUG BEGIN_STMT
  if (dlcValue_2(D) <= 8)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 536870912]:
  ret_3 = FlexCAN_ComputePayloadSize.part.0 (dlcValue_2(D));

  <bb 4> [local count: 1073741824]:
  # ret_1 = PHI <dlcValue_2(D)(2), ret_3(3)>
<L16>:
<L13>:
  # DEBUG ret => ret_1
  # DEBUG BEGIN_STMT
  return ret_1;

}


FlexCAN_ClearRAM (struct FLEXCAN_Type * base)
{
  volatile uint32 * RAM;
  uint32 RAM_size;
  uint32 databyte;
  long unsigned int _1;
  long unsigned int base.2_2;
  long unsigned int _3;
  long unsigned int _4;
  volatile uint32 * _5;
  long unsigned int _6;
  volatile uint32 * _7;
  long unsigned int _8;
  long unsigned int _9;
  volatile uint32 * _10;
  long unsigned int _11;
  long unsigned int _12;

  <bb 2> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_GetMaxMbNum (base_20(D));
  RAM_size_21 = _1 * 4;
  # DEBUG RAM_size => RAM_size_21
  # DEBUG BEGIN_STMT
  # DEBUG RXIMR_size => _1
  # DEBUG BEGIN_STMT
  base.2_2 = (long unsigned int) base_20(D);
  _3 = base.2_2 + 128;
  RAM_22 = (volatile uint32 *) _3;
  # DEBUG RAM => RAM_22
  # DEBUG BEGIN_STMT
  # DEBUG databyte => 0
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 955630220]:
  # DEBUG BEGIN_STMT
  _4 = databyte_13 * 4;
  _5 = RAM_22 + _4;
  *_5 ={v} 0;
  # DEBUG BEGIN_STMT
  databyte_34 = databyte_13 + 1;
  # DEBUG databyte => databyte_34

  <bb 4> [local count: 1073741821]:
  # databyte_13 = PHI <0(2), databyte_34(3)>
  # DEBUG databyte => databyte_13
  # DEBUG BEGIN_STMT
  if (databyte_13 < RAM_size_21)
    goto <bb 3>; [89.00%]
  else
    goto <bb 5>; [11.00%]

  <bb 5> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  RAM_23 = &base_20(D)->RXIMR;
  # DEBUG RAM => RAM_23
  # DEBUG BEGIN_STMT
  # DEBUG databyte => 0
  goto <bb 7>; [100.00%]

  <bb 6> [local count: 955630224]:
  # DEBUG BEGIN_STMT
  _6 = databyte_14 * 4;
  _7 = RAM_23 + _6;
  *_7 ={v} 0;
  # DEBUG BEGIN_STMT
  databyte_32 = databyte_14 + 1;
  # DEBUG databyte => databyte_32

  <bb 7> [local count: 1073741824]:
  # databyte_14 = PHI <0(5), databyte_32(6)>
  # DEBUG databyte => databyte_14
  # DEBUG BEGIN_STMT
  if (_1 > databyte_14)
    goto <bb 6>; [89.00%]
  else
    goto <bb 8>; [11.00%]

  <bb 8> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _8 ={v} base_20(D)->CTRL2;
  _9 = _8 | 268435456;
  base_20(D)->CTRL2 ={v} _9;
  # DEBUG BEGIN_STMT
  # DEBUG ram_addr => _3
  # DEBUG BEGIN_STMT
  # DEBUG RAM => RAM_22
  # DEBUG BEGIN_STMT
  base_20(D)->RXMGMASK ={v} 0;
  # DEBUG BEGIN_STMT
  base_20(D)->RXFGMASK ={v} 0;
  # DEBUG BEGIN_STMT
  base_20(D)->RX14MASK ={v} 0;
  # DEBUG BEGIN_STMT
  base_20(D)->RX15MASK ={v} 0;
  # DEBUG BEGIN_STMT
  # DEBUG databyte => 0
  goto <bb 10>; [100.00%]

  <bb 9> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _10 = RAM_22;
  *_10 ={v} 0;
  # DEBUG BEGIN_STMT
  # DEBUG databyte => 1

  <bb 10> [local count: 236223202]:
  # databyte_15 = PHI <0(8), 1(9)>
  # DEBUG databyte => databyte_15
  # DEBUG BEGIN_STMT
  if (databyte_15 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 11> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _11 ={v} base_20(D)->CTRL2;
  _12 = _11 & 4026531839;
  base_20(D)->CTRL2 ={v} _12;
  return;

}


DevAssert (volatile boolean x)
{
  unsigned char x.6_1;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  x.6_1 ={v} x;
  if (x.6_1 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  __asm__ __volatile__("BKPT #0");
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  return;

}


