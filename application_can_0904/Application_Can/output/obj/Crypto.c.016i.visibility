
Marking local functions: Crypto_HandleQueuingAndCancellation Crypto_HandleQueuingAndProcessing Crypto_CheckBufferLen Crypto_CheckBufferPtrs Crypto_CheckBufferPtrsVal Crypto_CheckMode


Marking externally visible functions: Crypto_MainFunction Crypto_CancelJob Crypto_ProcessJob_Dispatch Crypto_ProcessJob Crypto_Init


Marking externally visible variables: Crypto_Initialized


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Crypto_PL_MainFunction/23 (Crypto_PL_MainFunction) @06c13b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_MainFunction/5 
  Calls: 
CryIf_CallbackNotification/22 (CryIf_CallbackNotification) @06c139a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_HandleQueuingAndCancellation/11 
  Calls: 
Crypto_PL_MACVERIFY_AES_CMAC_Cancel/21 (Crypto_PL_MACVERIFY_AES_CMAC_Cancel) @06c137e0
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Crypto_CancelJob/4 (addr)
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
Crypto_PL_MACGENERATE_AES_CMAC_Cancel/20 (Crypto_PL_MACGENERATE_AES_CMAC_Cancel) @06c13700
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Crypto_CancelJob/4 (addr)
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/19 (SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT) @06c13540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_HandleQueuingAndCancellation/11 Crypto_HandleQueuingAndCancellation/11 Crypto_HandleQueuingAndCancellation/11 Crypto_HandleQueuingAndProcessing/10 Crypto_HandleQueuingAndProcessing/10 Crypto_HandleQueuingAndProcessing/10 Crypto_HandleQueuingAndProcessing/10 Crypto_HandleQueuingAndProcessing/10 Crypto_HandleQueuingAndProcessing/10 
  Calls: 
SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/18 (SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT) @06c13460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_HandleQueuingAndCancellation/11 Crypto_HandleQueuingAndCancellation/11 Crypto_HandleQueuingAndProcessing/10 Crypto_HandleQueuingAndProcessing/10 
  Calls: 
Crypto_Keys/17 (Crypto_Keys) @06c16288
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Crypto_HandleQueuingAndProcessing/10 (read)
  Availability: not_available
  Varpool flags:
Crypto_DriverObjects/16 (Crypto_DriverObjects) @06c16240
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Crypto_HandleQueuingAndProcessing/10 (addr)Crypto_HandleQueuingAndCancellation/11 (addr)
  Availability: not_available
  Varpool flags:
Crypto_PL_MACVERIFY_AES_CMAC_Process/15 (Crypto_PL_MACVERIFY_AES_CMAC_Process) @06c130e0
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Crypto_ProcessJob_Dispatch/3 (addr)
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
Crypto_PL_MACGENERATE_AES_CMAC_Process/14 (Crypto_PL_MACGENERATE_AES_CMAC_Process) @06c13000
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Crypto_ProcessJob_Dispatch/3 (addr)
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
Det_ASR40_ReportError/13 (Det_ASR40_ReportError) @06bc6700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_CancelJob/4 Crypto_CancelJob/4 Crypto_CancelJob/4 Crypto_CancelJob/4 Crypto_ProcessJob_Dispatch/3 Crypto_ProcessJob_Dispatch/3 Crypto_ProcessJob/2 Crypto_ProcessJob/2 Crypto_ProcessJob/2 Crypto_ProcessJob/2 Crypto_ProcessJob/2 Crypto_ProcessJob/2 Crypto_ProcessJob/2 Crypto_ProcessJob/2 
  Calls: 
Crypto_PL_Init/12 (Crypto_PL_Init) @06bc6460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Crypto_Init/1 
  Calls: 
Crypto_HandleQueuingAndCancellation/11 (Crypto_HandleQueuingAndCancellation) @06bc62a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Crypto_DriverObjects/16 (addr)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_CancelJob/4 Crypto_CancelJob/4 
  Calls: SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/19 CryIf_CallbackNotification/22 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/19 SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/18 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/19 SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/18 
   Indirect call
Crypto_HandleQueuingAndProcessing/10 (Crypto_HandleQueuingAndProcessing) @06bc60e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Crypto_DriverObjects/16 (addr)Crypto_Keys/17 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_ProcessJob_Dispatch/3 Crypto_ProcessJob_Dispatch/3 
  Calls: SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/19 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/19 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/19 SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/18 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/19 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/19 SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/19 SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT/18 
   Indirect call
   Indirect call
   Indirect call
   Indirect call
Crypto_CheckBufferLen/9 (Crypto_CheckBufferLen) @06b94ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_ProcessJob/2 
  Calls: 
Crypto_CheckBufferPtrs/8 (Crypto_CheckBufferPtrs) @06b94d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_ProcessJob/2 
  Calls: 
Crypto_CheckBufferPtrsVal/7 (Crypto_CheckBufferPtrsVal) @06b94b60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_ProcessJob/2 
  Calls: 
Crypto_CheckMode/6 (Crypto_CheckMode) @06b949a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Crypto_ProcessJob/2 
  Calls: 
Crypto_MainFunction/5 (Crypto_MainFunction) @06b947e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_PL_MainFunction/23 
Crypto_CancelJob/4 (Crypto_CancelJob) @06b94620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/0 (read)Crypto_PL_MACGENERATE_AES_CMAC_Cancel/20 (addr)Crypto_PL_MACVERIFY_AES_CMAC_Cancel/21 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/13 Det_ASR40_ReportError/13 Crypto_HandleQueuingAndCancellation/11 Crypto_HandleQueuingAndCancellation/11 Det_ASR40_ReportError/13 Det_ASR40_ReportError/13 
Crypto_ProcessJob_Dispatch/3 (Crypto_ProcessJob_Dispatch) @06b94460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_PL_MACGENERATE_AES_CMAC_Process/14 (addr)Crypto_PL_MACVERIFY_AES_CMAC_Process/15 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Crypto_ProcessJob/2 
  Calls: Det_ASR40_ReportError/13 Det_ASR40_ReportError/13 Crypto_HandleQueuingAndProcessing/10 Crypto_HandleQueuingAndProcessing/10 
Crypto_ProcessJob/2 (Crypto_ProcessJob) @06b942a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/0 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Det_ASR40_ReportError/13 Det_ASR40_ReportError/13 Det_ASR40_ReportError/13 Crypto_ProcessJob_Dispatch/3 Det_ASR40_ReportError/13 Crypto_CheckBufferPtrsVal/7 Crypto_CheckBufferLen/9 Det_ASR40_ReportError/13 Crypto_CheckBufferPtrs/8 Det_ASR40_ReportError/13 Crypto_CheckMode/6 Det_ASR40_ReportError/13 Det_ASR40_ReportError/13 
Crypto_Init/1 (Crypto_Init) @06b940e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Crypto_Initialized/0 (read)Crypto_Initialized/0 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Crypto_PL_Init/12 
Crypto_Initialized/0 (Crypto_Initialized) @06b5f8b8
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Crypto_Init/1 (read)Crypto_Init/1 (write)Crypto_ProcessJob/2 (read)Crypto_CancelJob/4 (read)
  Availability: available
  Varpool flags: initialized
Crypto_HandleQueuingAndCancellation (uint32 ObjectId, struct Crypto_JobType * Job, Std_ReturnType (*Crypto_CancelFuncPtr_t) (uint32, struct Crypto_JobType *) CancelFunction)
{
  struct Crypto_DriverObject * DriverObj;
  Std_ReturnType RetVal;
  Std_ReturnType D.6411;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  DriverObj = &Crypto_DriverObjects[ObjectId];
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _1 = DriverObj->CurrentJob;
  if (Job == _1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal = CancelFunction (ObjectId, Job);
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  DriverObj->DriverObjectState = 0;
  # DEBUG BEGIN_STMT
  DriverObj->CurrentJob = 0B;
  # DEBUG BEGIN_STMT
  DriverObj->SkipPeriodicMainFunction = 1;
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Job->jobState = 0;
  # DEBUG BEGIN_STMT
  _2 = Job->jobPrimitiveInfo;
  _3 = _2->processingType;
  if (_3 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  CryIf_CallbackNotification (Job, 12);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.6411 = RetVal;
  return D.6411;

}


Crypto_HandleQueuingAndProcessing (uint32 ObjectId, struct Crypto_JobType * Job, Std_ReturnType (*Crypto_ProcessFuncPtr_t) (uint32, struct Crypto_JobType *) ProcessFunction)
{
  boolean KeyNeeded;
  Crypto_ServiceInfoType Service;
  struct Crypto_DriverObject * DriverObj;
  Std_ReturnType RetVal;
  Std_ReturnType D.6384;
  int iftmp.2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  DriverObj = &Crypto_DriverObjects[ObjectId];
  # DEBUG BEGIN_STMT
  _1 = Job->jobPrimitiveInfo;
  _2 = _1->primitiveInfo;
  Service = _2->service;
  # DEBUG BEGIN_STMT
  if (Service != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  if (Service != 10)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  if (Service != 9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (Service != 11)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.2 = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.2 = 0;

  <bb 8> :
  KeyNeeded = (boolean) iftmp.2;
  # DEBUG BEGIN_STMT
  if (KeyNeeded == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _3 = Job->cryptoKeyId;
  if (_3 > 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 28>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (KeyNeeded == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _4 = Job->cryptoKeyId;
  _5 = Crypto_Keys[_4].KeyState;
  if (_5 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  RetVal = 9;
  goto <bb 28>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _6 = Job->jobState;
  if (_6 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  _7 = Job->jobPrimitiveInputOutput.mode;
  _8 = _7 & 1;
  if (_8 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 28>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _9 = Job->jobPrimitiveInfo;
  _10 = _9->processingType;
  if (_10 == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _11 = DriverObj->CurrentJob;
  if (Job == _11)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal = ProcessFunction (ObjectId, Job);
  goto <bb 28>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _12 = DriverObj->DriverObjectState;
  if (_12 == 1)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal = 2;
  goto <bb 28>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  DriverObj->DriverObjectState = 1;
  # DEBUG BEGIN_STMT
  DriverObj->CurrentJob = Job;
  # DEBUG BEGIN_STMT
  DriverObj->SkipPeriodicMainFunction = 0;
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Job->jobState = 1;
  # DEBUG BEGIN_STMT
  RetVal = ProcessFunction (ObjectId, Job);
  goto <bb 28>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _13 = DriverObj->CurrentJob;
  if (Job == _13)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal = ProcessFunction (ObjectId, Job);
  goto <bb 28>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _14 = DriverObj->DriverObjectState;
  if (_14 == 1)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  RetVal = 2;
  goto <bb 28>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  DriverObj->DriverObjectState = 1;
  # DEBUG BEGIN_STMT
  DriverObj->CurrentJob = Job;
  # DEBUG BEGIN_STMT
  DriverObj->SkipPeriodicMainFunction = 1;
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  Job->jobState = 1;
  # DEBUG BEGIN_STMT
  RetVal = ProcessFunction (ObjectId, Job);

  <bb 28> :
  # DEBUG BEGIN_STMT
  D.6384 = RetVal;
  return D.6384;

}


Crypto_CheckBufferLen (struct Crypto_JobType * Job)
{
  unsigned int D.6319;
  Std_ReturnType RetVal;
  Std_ReturnType D.6317;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  _1 = Job->jobPrimitiveInputOutput.mode;
  _2 = _1 & 2;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = Job->jobPrimitiveInfo;
  _4 = _3->primitiveInfo;
  _5 = _4->service;
  _6 = (int) _5;
  D.6319 = (unsigned int) _6;
  if (D.6319 <= 8)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _7 = Job->jobPrimitiveInputOutput.inputLength;
  if (_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal = RetVal | 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = Job->jobPrimitiveInputOutput.mode;
  _9 = _8 & 4;
  if (_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = Job->jobPrimitiveInfo;
  _11 = _10->primitiveInfo;
  _12 = _11->service;
  _13 = (int) _12;
  switch (_13) <default: <L30> [INV], case 2: <L16> [INV], case 5 ... 6: <L16> [INV], case 8: <L16> [INV]>

  <bb 8> :
<L16>:
  # DEBUG BEGIN_STMT
  _14 = Job->jobPrimitiveInputOutput.secondaryInputLength;
  if (_14 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RetVal = RetVal | 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _15 = Job->jobPrimitiveInfo;
  _16 = _15->primitiveInfo;
  _17 = _16->service;
  if (_17 == 6)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _18 = Job->jobPrimitiveInputOutput.tertiaryInputLength;
  if (_18 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RetVal = RetVal | 1;

  <bb 13> :
<L30>:
  # DEBUG BEGIN_STMT
  D.6317 = RetVal;
  return D.6317;

}


Crypto_CheckBufferPtrs (struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6303;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  _1 = Job->jobPrimitiveInputOutput.mode;
  _2 = _1 & 2;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _3 = Job->jobPrimitiveInfo;
  _4 = _3->primitiveInfo;
  _5 = _4->service;
  _6 = (int) _5;
  switch (_6) <default: <L15> [INV], case 0 ... 2: <L6> [INV], case 3 ... 6: <L1> [INV], case 7 ... 8: <L6> [INV]>

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _7 = Job->jobPrimitiveInputOutput.outputPtr;
  if (_7 == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _8 = Job->jobPrimitiveInputOutput.outputLengthPtr;
  if (_8 == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
<L6>:
  # DEBUG BEGIN_STMT
  _9 = Job->jobPrimitiveInputOutput.inputPtr;
  if (_9 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 10>; [INV]

  <bb 9> :
<L15>:
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT

  <bb 10> :
  # DEBUG BEGIN_STMT
  _10 = Job->jobPrimitiveInputOutput.mode;
  _11 = _10 & 4;
  if (_11 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _12 = Job->jobPrimitiveInfo;
  _13 = _12->primitiveInfo;
  _14 = _13->service;
  _15 = (int) _14;
  switch (_15) <default: <L43> [INV], case 0 ... 1: <L22> [INV], case 2: <L36> [INV], case 3 ... 4: <L22> [INV], case 5: <L19> [INV], case 6: <L33> [INV], case 7: <L22> [INV], case 8: <L36> [INV], case 11: <L22> [INV]>

  <bb 12> :
<L19>:
  # DEBUG BEGIN_STMT
  _16 = Job->jobPrimitiveInputOutput.secondaryOutputPtr;
  if (_16 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _17 = Job->jobPrimitiveInputOutput.secondaryOutputLengthPtr;
  if (_17 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  _18 = Job->jobPrimitiveInputOutput.secondaryInputPtr;
  if (_18 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
<L22>:
  # DEBUG BEGIN_STMT
  _19 = Job->jobPrimitiveInputOutput.outputPtr;
  if (_19 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  _20 = Job->jobPrimitiveInputOutput.outputLengthPtr;
  if (_20 != 0B)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 27>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 27>; [INV]

  <bb 19> :
<L33>:
  # DEBUG BEGIN_STMT
  _21 = Job->jobPrimitiveInputOutput.outputPtr;
  if (_21 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  _22 = Job->jobPrimitiveInputOutput.outputLengthPtr;
  if (_22 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  _23 = Job->jobPrimitiveInputOutput.tertiaryInputPtr;
  if (_23 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
<L36>:
  # DEBUG BEGIN_STMT
  _24 = Job->jobPrimitiveInputOutput.secondaryInputPtr;
  if (_24 != 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 23> :
  _25 = Job->jobPrimitiveInputOutput.verifyPtr;
  if (_25 != 0B)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 27>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 27>; [INV]

  <bb 26> :
<L43>:
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT

  <bb 27> :
  # DEBUG BEGIN_STMT
  D.6303 = RetVal;
  return D.6303;

}


Crypto_CheckBufferPtrsVal (struct Crypto_JobType * Job)
{
  unsigned int D.6336;
  unsigned int D.6335;
  Std_ReturnType RetVal;
  Std_ReturnType D.6333;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  _1 = Job->jobPrimitiveInputOutput.mode;
  _2 = _1 & 2;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = Job->jobPrimitiveInfo;
  _4 = _3->primitiveInfo;
  _5 = _4->service;
  _6 = (int) _5;
  D.6335 = (unsigned int) _6;
  D.6336 = D.6335 + 4294967293;
  if (D.6336 <= 3)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _7 = Job->jobPrimitiveInputOutput.outputLengthPtr;
  _8 = *_7;
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RetVal = RetVal | 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = Job->jobPrimitiveInputOutput.mode;
  _10 = _9 & 4;
  if (_10 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _11 = Job->jobPrimitiveInfo;
  _12 = _11->primitiveInfo;
  _13 = _12->service;
  _14 = (int) _13;
  switch (_14) <default: <L29> [INV], case 0 ... 1: <L11> [INV], case 3 ... 7: <L11> [INV], case 11: <L11> [INV]>

  <bb 8> :
<L11>:
  # DEBUG BEGIN_STMT
  _15 = Job->jobPrimitiveInputOutput.outputLengthPtr;
  _16 = *_15;
  if (_16 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RetVal = RetVal | 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _17 = Job->jobPrimitiveInfo;
  _18 = _17->primitiveInfo;
  _19 = _18->service;
  if (_19 == 5)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _20 = Job->jobPrimitiveInputOutput.secondaryOutputLengthPtr;
  _21 = *_20;
  if (_21 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RetVal = RetVal | 1;

  <bb 13> :
<L29>:
  # DEBUG BEGIN_STMT
  D.6333 = RetVal;
  return D.6333;

}


Crypto_CheckMode (struct Crypto_JobType * Job)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6278;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _1 = Job->jobPrimitiveInfo;
  _2 = _1->primitiveInfo;
  _3 = _2->service;
  _4 = (int) _3;
  if (_4 == 9)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _5 = Job->jobPrimitiveInputOutput.mode;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _6 = Job->jobPrimitiveInputOutput.mode;
  if (_6 <= 4)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _7 = Job->jobPrimitiveInputOutput.mode;
  if (_7 == 7)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.6278 = RetVal;
  return D.6278;

}


Crypto_MainFunction ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_PL_MainFunction ();
  return;

}


Crypto_CancelJob (uint32 objectId, struct Crypto_JobType * job)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6402;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.3_1 = Crypto_Initialized;
  if (Crypto_Initialized.3_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 14, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (job == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 14, 2);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 17>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (objectId == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _2 = job->jobPrimitiveInfo;
  _3 = _2->primitiveInfo;
  _4 = _3->service;
  if (_4 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _5 = job->jobPrimitiveInfo;
  _6 = _5->primitiveInfo;
  _7 = _6->algorithm.family;
  if (_7 == 20)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _8 = job->jobPrimitiveInfo;
  _9 = _8->primitiveInfo;
  _10 = _9->algorithm.mode;
  if (_10 == 16)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_HandleQueuingAndCancellation (objectId, job, Crypto_PL_MACGENERATE_AES_CMAC_Cancel);
  goto <bb 17>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _11 = job->jobPrimitiveInfo;
  _12 = _11->primitiveInfo;
  _13 = _12->service;
  if (_13 == 2)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  _14 = job->jobPrimitiveInfo;
  _15 = _14->primitiveInfo;
  _16 = _15->algorithm.family;
  if (_16 == 20)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _17 = job->jobPrimitiveInfo;
  _18 = _17->primitiveInfo;
  _19 = _18->algorithm.mode;
  if (_19 == 16)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_HandleQueuingAndCancellation (objectId, job, Crypto_PL_MACVERIFY_AES_CMAC_Cancel);
  goto <bb 17>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 17>; [INV]

  <bb 16> :
<L15>:
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 14, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT

  <bb 17> :
  # DEBUG BEGIN_STMT
  D.6402 = RetVal;
  return D.6402;

}


Crypto_ProcessJob_Dispatch (uint32 objectId, Std_ReturnType RetVal, struct Crypto_JobType * job)
{
  Std_ReturnType D.6348;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (objectId == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = job->jobPrimitiveInfo;
  _2 = _1->primitiveInfo;
  _3 = _2->service;
  if (_3 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _4 = job->jobPrimitiveInfo;
  _5 = _4->primitiveInfo;
  _6 = _5->algorithm.family;
  if (_6 == 20)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = job->jobPrimitiveInfo;
  _8 = _7->primitiveInfo;
  _9 = _8->algorithm.mode;
  if (_9 == 16)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_HandleQueuingAndProcessing (objectId, job, Crypto_PL_MACGENERATE_AES_CMAC_Process);
  goto <bb 13>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = job->jobPrimitiveInfo;
  _11 = _10->primitiveInfo;
  _12 = _11->service;
  if (_12 == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _13 = job->jobPrimitiveInfo;
  _14 = _13->primitiveInfo;
  _15 = _14->algorithm.family;
  if (_15 == 20)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _16 = job->jobPrimitiveInfo;
  _17 = _16->primitiveInfo;
  _18 = _17->algorithm.mode;
  if (_18 == 16)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_HandleQueuingAndProcessing (objectId, job, Crypto_PL_MACVERIFY_AES_CMAC_Process);
  goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 13>; [INV]

  <bb 12> :
<L11>:
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.6348 = RetVal;
  return D.6348;

}


Crypto_ProcessJob (uint32 objectId, struct Crypto_JobType * job)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6271;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Crypto_Initialized.1_1 = Crypto_Initialized;
  if (Crypto_Initialized.1_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 0);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 15>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (job == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 2);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 15>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = Crypto_CheckMode (job);
  if (_2 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _3 = job->jobPrimitiveInfo;
  _4 = _3->primitiveInfo;
  _5 = _4->service;
  if (_5 > 11)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 4);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 15>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _6 = Crypto_CheckBufferPtrs (job);
  if (_6 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 2);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 15>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _7 = Crypto_CheckBufferLen (job);
  if (_7 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _8 = Crypto_CheckBufferPtrsVal (job);
  if (_8 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 5);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  RetVal = Crypto_ProcessJob_Dispatch (objectId, RetVal, job);

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (RetVal == 11)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 4);
  goto <bb 21>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  if (RetVal == 4)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 3);
  goto <bb 21>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (RetVal == 3)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (114, 0, 3, 0);

  <bb 21> :
  # DEBUG BEGIN_STMT
  D.6271 = RetVal;
  return D.6271;

}


Crypto_Init ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Crypto_Initialized.0_1 = Crypto_Initialized;
  if (Crypto_Initialized.0_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Crypto_PL_Init ();
  # DEBUG BEGIN_STMT
  Crypto_Initialized = 1;

  <bb 4> :
  return;

}


