
Marking local functions:


Marking externally visible functions: OS_DoGetCurrentApplicationId


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_DoGetApplicationId/4 (OS_DoGetApplicationId) @06d0bd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_DoGetCurrentApplicationId/0 
  Calls: 
OS_isrTableBase/3 (OS_isrTableBase) @06ceb9d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_DoGetCurrentApplicationId/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_nInterrupts/2 (OS_nInterrupts) @06ceb990
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_DoGetCurrentApplicationId/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_kernelData/1 (OS_kernelData) @06ceb948
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_DoGetCurrentApplicationId/0 (addr)OS_DoGetCurrentApplicationId/0 (read)OS_DoGetCurrentApplicationId/0 (read)OS_DoGetCurrentApplicationId/0 (read)OS_DoGetCurrentApplicationId/0 (read)OS_DoGetCurrentApplicationId/0 (read)
  Availability: not_available
  Varpool flags:
OS_DoGetCurrentApplicationId/0 (OS_DoGetCurrentApplicationId) @06d0ba80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_kernelData/1 (addr)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_nInterrupts/2 (read)OS_kernelData/1 (read)OS_isrTableBase/3 (read)OS_kernelData/1 (read)OS_kernelData/1 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_DoGetApplicationId/4 
__attribute__((target ("general-regs-only")))
OS_DoGetCurrentApplicationId ()
{
  const struct os_appcontext_t * app;
  os_applicationid_t a;
  os_uint8_t inFunction;
  struct os_kerneldata_t * const kernel_data;
  os_applicationid_t D.7423;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  inFunction = OS_kernelData.inFunction;
  # DEBUG BEGIN_STMT
  a = 255;
  # DEBUG BEGIN_STMT
  app = 0B;
  # DEBUG BEGIN_STMT
  if (inFunction == 5)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = OS_kernelData.isrCurrent;
  OS_nInterrupts.0_2 = OS_nInterrupts;
  if (_1 < OS_nInterrupts.0_2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = OS_kernelData.tfCalledFrom;
  if (_3 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  OS_isrTableBase.1_4 = OS_isrTableBase;
  _5 = OS_kernelData.isrCurrent;
  _6 = (unsigned int) _5;
  _7 = _6 * 68;
  _8 = OS_isrTableBase.1_4 + _7;
  app = _8->app;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = OS_kernelData.taskCurrent;
  app = _9->app;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (app != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  a = app->appId;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  a = OS_DoGetApplicationId ();

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.7423 = a;
  return D.7423;

}


