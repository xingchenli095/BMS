Crypto_AL_KeyElementGetIndex (uint32 CryptoKeyId, uint32 KeyElementId, uint32 * KeyElementIndexPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6501;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 8;
  # DEBUG BEGIN_STMT
  *KeyElementIndexPtr = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_Keys[CryptoKeyId].KeyType;
  _2 = *KeyElementIndexPtr;
  _3 = _2 * 4;
  _4 = _1 + _3;
  _5 = *_4;
  _6 = _5->Id;
  if (KeyElementId == _6)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = *KeyElementIndexPtr;
  _8 = _7 + 1;
  *KeyElementIndexPtr = _8;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = *KeyElementIndexPtr;
  _10 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (_9 < _10)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.6501 = RetVal;
  return D.6501;

}


Crypto_AL_CertificateVerify (uint32 CryptoKeyId, uint32 VerifyCryptoKeyId, Crypto_VerifyResultType * VerifyPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6543;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6543 = RetVal;
  return D.6543;

}


Crypto_AL_CertificateParse (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6541;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6541 = RetVal;
  return D.6541;

}


Crypto_AL_KeyExchangeCalcSecret (uint32 CryptoKeyId, const uint8 * PartnerPublicValuePtr, uint32 PartnerPublicValueLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6539;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6539 = RetVal;
  return D.6539;

}


Crypto_AL_KeyExchangeCalcPubVal (uint32 CryptoKeyId, uint8 * PublicValuePtr, uint32 * PublicValueLengthPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6537;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6537 = RetVal;
  return D.6537;

}


Crypto_AL_KeyDerive (uint32 CryptoKeyId, uint32 TargetCryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6535;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6535 = RetVal;
  return D.6535;

}


Crypto_AL_KeyGenerate (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6533;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6533 = RetVal;
  return D.6533;

}


Crypto_AL_RandomSeed (uint32 CryptoKeyId, const uint8 * EntropyPtr, uint32 EntropyLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6531;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6531 = RetVal;
  return D.6531;

}


Crypto_AL_FindKeyElement (uint32 CryptoKeyId, uint32 KeyElementId, uint32 * KeyElementIndex)
{
  uint32 Idx;
  boolean Found;
  boolean D.6529;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Found = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Idx = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_Keys[CryptoKeyId].KeyType;
  _2 = Idx * 4;
  _3 = _1 + _2;
  _4 = *_3;
  _5 = _4->Id;
  if (KeyElementId == _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Found = 1;
  # DEBUG BEGIN_STMT
  *KeyElementIndex = Idx;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Idx = Idx + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (Idx < _6)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.6529 = Found;
  return D.6529;

}


Crypto_AL_KeyCopy (uint32 CryptoKeyId, uint32 TargetCryptoKeyId)
{
  uint32 j;
  uint32 i;
  Std_ReturnType RetVal;
  Std_ReturnType D.6525;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  i = 0;
  # DEBUG BEGIN_STMT
  j = 0;
  # DEBUG BEGIN_STMT
  _1 = Crypto_Keys[CryptoKeyId].KeyState;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetVal = 10;
  # DEBUG BEGIN_STMT
  j = 0;
  goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Crypto_Keys[CryptoKeyId].KeyType;
  _3 = i * 4;
  _4 = _2 + _3;
  _5 = *_4;
  _6 = _5->Id;
  _7 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _8 = j * 4;
  _9 = _7 + _8;
  _10 = *_9;
  _11 = _10->Id;
  if (_6 == _11)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _12 = Crypto_AL_Keys_Data[CryptoKeyId].KeyData;
  _13 = i * 12;
  _14 = _12 + _13;
  _15 = _14->RfKeyElemDataSize;
  _16 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _17 = j * 4;
  _18 = _16 + _17;
  _19 = *_18;
  _20 = _19->Size;
  if (_15 == _20)
    goto <bb 9>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _21 = Crypto_AL_Keys_Data[CryptoKeyId].KeyData;
  _22 = i * 12;
  _23 = _21 + _22;
  _24 = _23->RfKeyElemDataSize;
  _25 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _26 = j * 4;
  _27 = _25 + _26;
  _28 = *_27;
  _29 = _28->Size;
  if (_24 < _29)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  _30 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _31 = j * 4;
  _32 = _30 + _31;
  _33 = *_32;
  _34 = _33->AllowPartialAccess;
  if (_34 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  j = j + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _35 = Crypto_Keys[TargetCryptoKeyId].KeyElements;
  if (j < _35)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 13> :
  # DEBUG BEGIN_STMT
  _36 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (i < _36)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  if (RetVal == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 23>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  j = 0;
  goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _37 = Crypto_Keys[CryptoKeyId].KeyType;
  _38 = i * 4;
  _39 = _37 + _38;
  _40 = *_39;
  _41 = _40->Id;
  _42 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _43 = j * 4;
  _44 = _42 + _43;
  _45 = *_44;
  _46 = _45->Id;
  if (_41 == _46)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _47 = Crypto_Keys[CryptoKeyId].KeyType;
  _48 = i * 4;
  _49 = _47 + _48;
  _50 = *_49;
  _51 = _50->Id;
  _52 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _53 = j * 4;
  _54 = _52 + _53;
  _55 = *_54;
  _56 = _55->Id;
  Crypto_AL_KeyElementCopy (CryptoKeyId, _51, TargetCryptoKeyId, _56);
  # DEBUG BEGIN_STMT
  goto <bb 22>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  j = j + 1;

  <bb 21> :
  # DEBUG BEGIN_STMT
  _57 = Crypto_Keys[TargetCryptoKeyId].KeyElements;
  if (j < _57)
    goto <bb 18>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 23> :
  # DEBUG BEGIN_STMT
  _58 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (i < _58)
    goto <bb 17>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  D.6525 = RetVal;
  return D.6525;

}


Crypto_AL_KeyElementCopy (uint32 CryptoKeyId, uint32 KeyElementId, uint32 TargetCryptoKeyId, uint32 TargetKeyElementId)
{
  uint32 TargetKeyElementIndex;
  uint32 SourceKeyElementIndex;
  Std_ReturnType RetVal;
  Std_ReturnType D.6510;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SourceKeyElementIndex = 0;
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_Keys[CryptoKeyId].KeyType;
  _2 = SourceKeyElementIndex * 4;
  _3 = _1 + _2;
  _4 = *_3;
  _5 = _4->Id;
  if (KeyElementId == _5)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SourceKeyElementIndex = SourceKeyElementIndex + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (SourceKeyElementIndex < _6)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  TargetKeyElementIndex = 0;
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _8 = TargetKeyElementIndex * 4;
  _9 = _7 + _8;
  _10 = *_9;
  _11 = _10->Id;
  if (TargetKeyElementId == _11)
    goto <bb 10>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  TargetKeyElementIndex = TargetKeyElementIndex + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _12 = Crypto_Keys[TargetCryptoKeyId].KeyElements;
  if (TargetKeyElementIndex < _12)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _13 = Crypto_AL_Keys_Data[CryptoKeyId].KeyData;
  _14 = SourceKeyElementIndex * 12;
  _15 = _13 + _14;
  _16 = _15->RfKeyElemDataSize;
  _17 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _18 = TargetKeyElementIndex * 4;
  _19 = _17 + _18;
  _20 = *_19;
  _21 = _20->Size;
  if (_16 == _21)
    goto <bb 13>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _22 = Crypto_AL_Keys_Data[CryptoKeyId].KeyData;
  _23 = SourceKeyElementIndex * 12;
  _24 = _22 + _23;
  _25 = _24->RfKeyElemDataSize;
  _26 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _27 = TargetKeyElementIndex * 4;
  _28 = _26 + _27;
  _29 = *_28;
  _30 = _29->Size;
  if (_25 < _30)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _31 = Crypto_Keys[TargetCryptoKeyId].KeyType;
  _32 = TargetKeyElementIndex * 4;
  _33 = _31 + _32;
  _34 = *_33;
  _35 = _34->AllowPartialAccess;
  if (_35 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _36 = Crypto_AL_Keys_Data[CryptoKeyId].KeyData;
  _37 = SourceKeyElementIndex * 12;
  _38 = _36 + _37;
  _39 = _38->RfKeyElemData;
  _40 = Crypto_AL_Keys_Data[CryptoKeyId].KeyData;
  _41 = SourceKeyElementIndex * 12;
  _42 = _40 + _41;
  _43 = _42->RfKeyElemDataSize;
  RetVal = Crypto_AL_KeyElementSet (TargetCryptoKeyId, TargetKeyElementId, _39, _43);
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  RetVal = 10;

  <bb 15> :
  # DEBUG BEGIN_STMT
  D.6510 = RetVal;
  return D.6510;

}


Crypto_AL_KeyElementGet (uint32 CryptoKeyId, uint32 KeyElementId, uint8 * ResultPtr, uint32 * ResultLengthPtr)
{
  uint32 i;
  uint32 KeyElementIndex;
  Std_ReturnType RetVal;
  Std_ReturnType D.6496;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  KeyElementIndex = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal = Crypto_AL_KeyElementGetIndex (CryptoKeyId, KeyElementId, &KeyElementIndex);
  # DEBUG BEGIN_STMT
  if (RetVal == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _1 = *ResultLengthPtr;
  _2 = Crypto_AL_Keys_Data[CryptoKeyId].KeyData;
  KeyElementIndex.0_3 = KeyElementIndex;
  _4 = KeyElementIndex.0_3 * 12;
  _5 = _2 + _4;
  _6 = _5->RfKeyElemDataSize;
  if (_1 > _6)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = Crypto_AL_Keys_Data[CryptoKeyId].KeyData;
  KeyElementIndex.1_8 = KeyElementIndex;
  _9 = KeyElementIndex.1_8 * 12;
  _10 = _7 + _9;
  _11 = _10->RfKeyElemDataSize;
  *ResultLengthPtr = _11;

  <bb 5> :
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _12 = Crypto_AL_Keys_Data[CryptoKeyId].KeyData;
  KeyElementIndex.2_13 = KeyElementIndex;
  _14 = KeyElementIndex.2_13 * 12;
  _15 = _12 + _14;
  _16 = _15->RfKeyElemData;
  _17 = _16 + i;
  _18 = ResultPtr + i;
  _19 = *_17;
  *_18 = _19;
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _20 = *ResultLengthPtr;
  if (i < _20)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.6496 = RetVal;
  KeyElementIndex = {CLOBBER};
  return D.6496;

}


Crypto_AL_KeyValidSet (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6490;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Crypto_Keys[CryptoKeyId].KeyState = 1;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  D.6490 = RetVal;
  return D.6490;

}


Crypto_AL_KeyElementSet (uint32 CryptoKeyId, uint32 KeyElementId, const uint8 * KeyPtr, uint32 KeyLength)
{
  uint32 KeyElementIndex;
  boolean Found;
  Std_ReturnType RetVal;
  Std_ReturnType D.6488;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  Found = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  KeyElementIndex = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_Keys[CryptoKeyId].KeyType;
  _2 = KeyElementIndex * 4;
  _3 = _1 + _2;
  _4 = *_3;
  _5 = _4->Id;
  if (KeyElementId == _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Found = 1;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  KeyElementIndex = KeyElementIndex + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = Crypto_Keys[CryptoKeyId].KeyElements;
  if (KeyElementIndex < _6)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (Found == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal = 8;
  goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _7 = Crypto_Keys[CryptoKeyId].KeyType;
  _8 = KeyElementIndex * 4;
  _9 = _7 + _8;
  _10 = *_9;
  _11 = _10->Size;
  if (KeyLength > _11)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal = 10;
  goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _12 = Crypto_AL_Keys_Data[CryptoKeyId].KeyData;
  _13 = KeyElementIndex * 12;
  _14 = _12 + _13;
  _15 = _14->RfKeyElemData;
  TS_MemCpy32 (_15, KeyPtr, KeyLength);
  # DEBUG BEGIN_STMT
  _16 = Crypto_AL_Keys_Data[CryptoKeyId].KeyData;
  _17 = KeyElementIndex * 12;
  _18 = _16 + _17;
  _18->RfKeyElemDataSize = KeyLength;
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  if (KeyElementId == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Crypto_AL_AESCMAC_PrecalculateKeys (CryptoKeyId);

  <bb 13> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 14> :
  # DEBUG BEGIN_STMT
  D.6488 = RetVal;
  return D.6488;

}


