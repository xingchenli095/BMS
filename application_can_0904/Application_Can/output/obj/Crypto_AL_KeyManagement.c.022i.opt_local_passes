Crypto_AL_KeyElementGetIndex (uint32 CryptoKeyId, uint32 KeyElementId, uint32 * KeyElementIndexPtr)
{
  Std_ReturnType RetVal;
  struct Crypto_KeyElement * const * _1;
  long unsigned int _2;
  long unsigned int _3;
  struct Crypto_KeyElement * const * _4;
  struct Crypto_KeyElement * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  Std_ReturnType _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_13 = 8;
  # DEBUG RetVal => RetVal_13
  # DEBUG BEGIN_STMT
  *KeyElementIndexPtr_15(D) = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_Keys[CryptoKeyId_17(D)].KeyType;
  _2 = *KeyElementIndexPtr_15(D);
  _3 = _2 * 4;
  _4 = _1 + _3;
  _5 = *_4;
  _6 = _5->Id;
  if (KeyElementId_18(D) == _6)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetVal_20 = 0;
  # DEBUG RetVal => RetVal_20
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = *KeyElementIndexPtr_15(D);
  _8 = _7 + 1;
  *KeyElementIndexPtr_15(D) = _8;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = *KeyElementIndexPtr_15(D);
  _10 = Crypto_Keys[CryptoKeyId_17(D)].KeyElements;
  if (_9 < _10)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # RetVal_11 = PHI <RetVal_20(4), RetVal_13(6)>
  # DEBUG RetVal => RetVal_11
  # DEBUG BEGIN_STMT
  _21 = RetVal_11;
  return _21;

}


Crypto_AL_CertificateVerify (uint32 CryptoKeyId, uint32 VerifyCryptoKeyId, Crypto_VerifyResultType * VerifyPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = RetVal_1;
  return _2;

}


Crypto_AL_CertificateParse (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = RetVal_1;
  return _2;

}


Crypto_AL_KeyExchangeCalcSecret (uint32 CryptoKeyId, const uint8 * PartnerPublicValuePtr, uint32 PartnerPublicValueLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = RetVal_1;
  return _2;

}


Crypto_AL_KeyExchangeCalcPubVal (uint32 CryptoKeyId, uint8 * PublicValuePtr, uint32 * PublicValueLengthPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = RetVal_1;
  return _2;

}


Crypto_AL_KeyDerive (uint32 CryptoKeyId, uint32 TargetCryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = RetVal_1;
  return _2;

}


Crypto_AL_KeyGenerate (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = RetVal_1;
  return _2;

}


Crypto_AL_RandomSeed (uint32 CryptoKeyId, const uint8 * EntropyPtr, uint32 EntropyLength)
{
  Std_ReturnType RetVal;
  Std_ReturnType _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = RetVal_1;
  return _2;

}


Crypto_AL_FindKeyElement (uint32 CryptoKeyId, uint32 KeyElementId, uint32 * KeyElementIndex)
{
  uint32 Idx;
  boolean Found;
  struct Crypto_KeyElement * const * _1;
  long unsigned int _2;
  struct Crypto_KeyElement * const * _3;
  struct Crypto_KeyElement * _4;
  long unsigned int _5;
  long unsigned int _6;
  boolean _19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Found_10 = 0;
  # DEBUG Found => Found_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Idx_11 = 0;
  # DEBUG Idx => Idx_11
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_Keys[CryptoKeyId_13(D)].KeyType;
  _2 = Idx_8 * 4;
  _3 = _1 + _2;
  _4 = *_3;
  _5 = _4->Id;
  if (KeyElementId_14(D) == _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Found_16 = 1;
  # DEBUG Found => Found_16
  # DEBUG BEGIN_STMT
  *KeyElementIndex_17(D) = Idx_8;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Idx_15 = Idx_8 + 1;
  # DEBUG Idx => Idx_15

  <bb 6> :
  # Idx_8 = PHI <Idx_11(2), Idx_15(5)>
  # DEBUG Idx => Idx_8
  # DEBUG BEGIN_STMT
  _6 = Crypto_Keys[CryptoKeyId_13(D)].KeyElements;
  if (Idx_8 < _6)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # Found_7 = PHI <Found_16(4), Found_10(6)>
  # DEBUG Found => Found_7
  # DEBUG BEGIN_STMT
  _19 = Found_7;
  return _19;

}


Crypto_AL_KeyCopy (uint32 CryptoKeyId, uint32 TargetCryptoKeyId)
{
  uint32 j;
  uint32 i;
  Std_ReturnType RetVal;
  unsigned char _1;
  struct Crypto_KeyElement * const * _2;
  long unsigned int _3;
  struct Crypto_KeyElement * const * _4;
  struct Crypto_KeyElement * _5;
  long unsigned int _6;
  struct Crypto_KeyElement * const * _7;
  long unsigned int _8;
  struct Crypto_KeyElement * const * _9;
  struct Crypto_KeyElement * _10;
  long unsigned int _11;
  struct Crypto_AL_KeyDataType * _12;
  long unsigned int _13;
  struct Crypto_AL_KeyDataType * _14;
  long unsigned int _15;
  struct Crypto_KeyElement * const * _16;
  long unsigned int _17;
  struct Crypto_KeyElement * const * _18;
  struct Crypto_KeyElement * _19;
  long unsigned int _20;
  struct Crypto_AL_KeyDataType * _21;
  long unsigned int _22;
  struct Crypto_AL_KeyDataType * _23;
  long unsigned int _24;
  struct Crypto_KeyElement * const * _25;
  long unsigned int _26;
  struct Crypto_KeyElement * const * _27;
  struct Crypto_KeyElement * _28;
  long unsigned int _29;
  struct Crypto_KeyElement * const * _30;
  long unsigned int _31;
  struct Crypto_KeyElement * const * _32;
  struct Crypto_KeyElement * _33;
  unsigned char _34;
  long unsigned int _35;
  long unsigned int _36;
  struct Crypto_KeyElement * const * _37;
  long unsigned int _38;
  struct Crypto_KeyElement * const * _39;
  struct Crypto_KeyElement * _40;
  long unsigned int _41;
  struct Crypto_KeyElement * const * _42;
  long unsigned int _43;
  struct Crypto_KeyElement * const * _44;
  struct Crypto_KeyElement * _45;
  long unsigned int _46;
  struct Crypto_KeyElement * const * _47;
  long unsigned int _48;
  struct Crypto_KeyElement * const * _49;
  struct Crypto_KeyElement * _50;
  long unsigned int _51;
  struct Crypto_KeyElement * const * _52;
  long unsigned int _53;
  struct Crypto_KeyElement * const * _54;
  struct Crypto_KeyElement * _55;
  long unsigned int _56;
  long unsigned int _57;
  long unsigned int _58;
  Std_ReturnType _87;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_69 = 1;
  # DEBUG RetVal => RetVal_69
  # DEBUG BEGIN_STMT
  i_70 = 0;
  # DEBUG i => i_70
  # DEBUG BEGIN_STMT
  j_71 = 0;
  # DEBUG j => j_71
  # DEBUG BEGIN_STMT
  _1 = Crypto_Keys[CryptoKeyId_73(D)].KeyState;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal_74 = 0;
  # DEBUG RetVal => RetVal_74
  # DEBUG BEGIN_STMT
  i_75 = 0;
  # DEBUG i => i_75
  goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetVal_76 = 10;
  # DEBUG RetVal => RetVal_76
  # DEBUG BEGIN_STMT
  j_77 = 0;
  # DEBUG j => j_77
  goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Crypto_Keys[CryptoKeyId_73(D)].KeyType;
  _3 = i_62 * 4;
  _4 = _2 + _3;
  _5 = *_4;
  _6 = _5->Id;
  _7 = Crypto_Keys[TargetCryptoKeyId_78(D)].KeyType;
  _8 = j_64 * 4;
  _9 = _7 + _8;
  _10 = *_9;
  _11 = _10->Id;
  if (_6 == _11)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _12 = Crypto_AL_Keys_Data[CryptoKeyId_73(D)].KeyData;
  _13 = i_62 * 12;
  _14 = _12 + _13;
  _15 = _14->RfKeyElemDataSize;
  _16 = Crypto_Keys[TargetCryptoKeyId_78(D)].KeyType;
  _17 = j_64 * 4;
  _18 = _16 + _17;
  _19 = *_18;
  _20 = _19->Size;
  if (_15 == _20)
    goto <bb 9>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _21 = Crypto_AL_Keys_Data[CryptoKeyId_73(D)].KeyData;
  _22 = i_62 * 12;
  _23 = _21 + _22;
  _24 = _23->RfKeyElemDataSize;
  _25 = Crypto_Keys[TargetCryptoKeyId_78(D)].KeyType;
  _26 = j_64 * 4;
  _27 = _25 + _26;
  _28 = *_27;
  _29 = _28->Size;
  if (_24 < _29)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  _30 = Crypto_Keys[TargetCryptoKeyId_78(D)].KeyType;
  _31 = j_64 * 4;
  _32 = _30 + _31;
  _33 = *_32;
  _34 = _33->AllowPartialAccess;
  if (_34 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RetVal_80 = 0;
  # DEBUG RetVal => RetVal_80
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  j_79 = j_64 + 1;
  # DEBUG j => j_79

  <bb 11> :
  # j_64 = PHI <j_77(4), j_79(10)>
  # DEBUG j => j_64
  # DEBUG BEGIN_STMT
  _35 = Crypto_Keys[TargetCryptoKeyId_78(D)].KeyElements;
  if (j_64 < _35)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # RetVal_59 = PHI <RetVal_76(8), RetVal_76(11), RetVal_76(7), RetVal_80(9)>
  # DEBUG RetVal => RetVal_59
  # DEBUG BEGIN_STMT
  i_81 = i_62 + 1;
  # DEBUG i => i_81

  <bb 13> :
  # RetVal_60 = PHI <RetVal_74(3), RetVal_59(12)>
  # i_62 = PHI <i_75(3), i_81(12)>
  # DEBUG i => i_62
  # DEBUG RetVal => RetVal_60
  # DEBUG BEGIN_STMT
  _36 = Crypto_Keys[CryptoKeyId_73(D)].KeyElements;
  if (i_62 < _36)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  if (RetVal_60 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (RetVal_60 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  i_82 = 0;
  # DEBUG i => i_82
  goto <bb 23>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  j_83 = 0;
  # DEBUG j => j_83
  goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _37 = Crypto_Keys[CryptoKeyId_73(D)].KeyType;
  _38 = i_63 * 4;
  _39 = _37 + _38;
  _40 = *_39;
  _41 = _40->Id;
  _42 = Crypto_Keys[TargetCryptoKeyId_78(D)].KeyType;
  _43 = j_65 * 4;
  _44 = _42 + _43;
  _45 = *_44;
  _46 = _45->Id;
  if (_41 == _46)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _47 = Crypto_Keys[CryptoKeyId_73(D)].KeyType;
  _48 = i_63 * 4;
  _49 = _47 + _48;
  _50 = *_49;
  _51 = _50->Id;
  _52 = Crypto_Keys[TargetCryptoKeyId_78(D)].KeyType;
  _53 = j_65 * 4;
  _54 = _52 + _53;
  _55 = *_54;
  _56 = _55->Id;
  Crypto_AL_KeyElementCopy (CryptoKeyId_73(D), _51, TargetCryptoKeyId_78(D), _56);
  # DEBUG BEGIN_STMT
  goto <bb 22>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  j_84 = j_65 + 1;
  # DEBUG j => j_84

  <bb 21> :
  # j_65 = PHI <j_83(17), j_84(20)>
  # DEBUG j => j_65
  # DEBUG BEGIN_STMT
  _57 = Crypto_Keys[TargetCryptoKeyId_78(D)].KeyElements;
  if (j_65 < _57)
    goto <bb 18>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  i_86 = i_63 + 1;
  # DEBUG i => i_86

  <bb 23> :
  # i_63 = PHI <i_82(16), i_86(22)>
  # DEBUG i => i_63
  # DEBUG BEGIN_STMT
  _58 = Crypto_Keys[CryptoKeyId_73(D)].KeyElements;
  if (i_63 < _58)
    goto <bb 17>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # RetVal_61 = PHI <RetVal_69(2), RetVal_60(15), RetVal_60(23)>
  # DEBUG RetVal => RetVal_61
  # DEBUG BEGIN_STMT
  _87 = RetVal_61;
  return _87;

}


Crypto_AL_KeyElementCopy (uint32 CryptoKeyId, uint32 KeyElementId, uint32 TargetCryptoKeyId, uint32 TargetKeyElementId)
{
  uint32 TargetKeyElementIndex;
  uint32 SourceKeyElementIndex;
  Std_ReturnType RetVal;
  struct Crypto_KeyElement * const * _1;
  long unsigned int _2;
  struct Crypto_KeyElement * const * _3;
  struct Crypto_KeyElement * _4;
  long unsigned int _5;
  long unsigned int _6;
  struct Crypto_KeyElement * const * _7;
  long unsigned int _8;
  struct Crypto_KeyElement * const * _9;
  struct Crypto_KeyElement * _10;
  long unsigned int _11;
  long unsigned int _12;
  struct Crypto_AL_KeyDataType * _13;
  long unsigned int _14;
  struct Crypto_AL_KeyDataType * _15;
  long unsigned int _16;
  struct Crypto_KeyElement * const * _17;
  long unsigned int _18;
  struct Crypto_KeyElement * const * _19;
  struct Crypto_KeyElement * _20;
  long unsigned int _21;
  struct Crypto_AL_KeyDataType * _22;
  long unsigned int _23;
  struct Crypto_AL_KeyDataType * _24;
  long unsigned int _25;
  struct Crypto_KeyElement * const * _26;
  long unsigned int _27;
  struct Crypto_KeyElement * const * _28;
  struct Crypto_KeyElement * _29;
  long unsigned int _30;
  struct Crypto_KeyElement * const * _31;
  long unsigned int _32;
  struct Crypto_KeyElement * const * _33;
  struct Crypto_KeyElement * _34;
  unsigned char _35;
  struct Crypto_AL_KeyDataType * _36;
  long unsigned int _37;
  struct Crypto_AL_KeyDataType * _38;
  uint8 * _39;
  struct Crypto_AL_KeyDataType * _40;
  long unsigned int _41;
  struct Crypto_AL_KeyDataType * _42;
  long unsigned int _43;
  Std_ReturnType _61;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_48 = 1;
  # DEBUG RetVal => RetVal_48
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SourceKeyElementIndex_49 = 0;
  # DEBUG SourceKeyElementIndex => SourceKeyElementIndex_49
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_Keys[CryptoKeyId_51(D)].KeyType;
  _2 = SourceKeyElementIndex_45 * 4;
  _3 = _1 + _2;
  _4 = *_3;
  _5 = _4->Id;
  if (KeyElementId_52(D) == _5)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SourceKeyElementIndex_53 = SourceKeyElementIndex_45 + 1;
  # DEBUG SourceKeyElementIndex => SourceKeyElementIndex_53

  <bb 5> :
  # SourceKeyElementIndex_45 = PHI <SourceKeyElementIndex_49(2), SourceKeyElementIndex_53(4)>
  # DEBUG SourceKeyElementIndex => SourceKeyElementIndex_45
  # DEBUG BEGIN_STMT
  _6 = Crypto_Keys[CryptoKeyId_51(D)].KeyElements;
  if (SourceKeyElementIndex_45 < _6)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  TargetKeyElementIndex_54 = 0;
  # DEBUG TargetKeyElementIndex => TargetKeyElementIndex_54
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 = Crypto_Keys[TargetCryptoKeyId_55(D)].KeyType;
  _8 = TargetKeyElementIndex_46 * 4;
  _9 = _7 + _8;
  _10 = *_9;
  _11 = _10->Id;
  if (TargetKeyElementId_56(D) == _11)
    goto <bb 10>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  TargetKeyElementIndex_57 = TargetKeyElementIndex_46 + 1;
  # DEBUG TargetKeyElementIndex => TargetKeyElementIndex_57

  <bb 9> :
  # TargetKeyElementIndex_46 = PHI <TargetKeyElementIndex_54(6), TargetKeyElementIndex_57(8)>
  # DEBUG TargetKeyElementIndex => TargetKeyElementIndex_46
  # DEBUG BEGIN_STMT
  _12 = Crypto_Keys[TargetCryptoKeyId_55(D)].KeyElements;
  if (TargetKeyElementIndex_46 < _12)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _13 = Crypto_AL_Keys_Data[CryptoKeyId_51(D)].KeyData;
  _14 = SourceKeyElementIndex_45 * 12;
  _15 = _13 + _14;
  _16 = _15->RfKeyElemDataSize;
  _17 = Crypto_Keys[TargetCryptoKeyId_55(D)].KeyType;
  _18 = TargetKeyElementIndex_46 * 4;
  _19 = _17 + _18;
  _20 = *_19;
  _21 = _20->Size;
  if (_16 == _21)
    goto <bb 13>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _22 = Crypto_AL_Keys_Data[CryptoKeyId_51(D)].KeyData;
  _23 = SourceKeyElementIndex_45 * 12;
  _24 = _22 + _23;
  _25 = _24->RfKeyElemDataSize;
  _26 = Crypto_Keys[TargetCryptoKeyId_55(D)].KeyType;
  _27 = TargetKeyElementIndex_46 * 4;
  _28 = _26 + _27;
  _29 = *_28;
  _30 = _29->Size;
  if (_25 < _30)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _31 = Crypto_Keys[TargetCryptoKeyId_55(D)].KeyType;
  _32 = TargetKeyElementIndex_46 * 4;
  _33 = _31 + _32;
  _34 = *_33;
  _35 = _34->AllowPartialAccess;
  if (_35 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _36 = Crypto_AL_Keys_Data[CryptoKeyId_51(D)].KeyData;
  _37 = SourceKeyElementIndex_45 * 12;
  _38 = _36 + _37;
  _39 = _38->RfKeyElemData;
  _40 = Crypto_AL_Keys_Data[CryptoKeyId_51(D)].KeyData;
  _41 = SourceKeyElementIndex_45 * 12;
  _42 = _40 + _41;
  _43 = _42->RfKeyElemDataSize;
  RetVal_60 = Crypto_AL_KeyElementSet (TargetCryptoKeyId_55(D), TargetKeyElementId_56(D), _39, _43);
  # DEBUG RetVal => RetVal_60
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  RetVal_58 = 10;
  # DEBUG RetVal => RetVal_58

  <bb 15> :
  # RetVal_44 = PHI <RetVal_60(13), RetVal_58(14)>
  # DEBUG RetVal => RetVal_44
  # DEBUG BEGIN_STMT
  _61 = RetVal_44;
  return _61;

}


Crypto_AL_KeyElementGet (uint32 CryptoKeyId, uint32 KeyElementId, uint8 * ResultPtr, uint32 * ResultLengthPtr)
{
  uint32 i;
  uint32 KeyElementIndex;
  Std_ReturnType RetVal;
  long unsigned int _1;
  struct Crypto_AL_KeyDataType * _2;
  long unsigned int KeyElementIndex.0_3;
  long unsigned int _4;
  struct Crypto_AL_KeyDataType * _5;
  long unsigned int _6;
  struct Crypto_AL_KeyDataType * _7;
  long unsigned int KeyElementIndex.1_8;
  long unsigned int _9;
  struct Crypto_AL_KeyDataType * _10;
  long unsigned int _11;
  struct Crypto_AL_KeyDataType * _12;
  long unsigned int KeyElementIndex.2_13;
  long unsigned int _14;
  struct Crypto_AL_KeyDataType * _15;
  uint8 * _16;
  uint8 * _17;
  uint8 * _18;
  unsigned char _19;
  long unsigned int _20;
  Std_ReturnType _40;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_25 = 1;
  # DEBUG RetVal => RetVal_25
  # DEBUG BEGIN_STMT
  KeyElementIndex = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal_31 = Crypto_AL_KeyElementGetIndex (CryptoKeyId_28(D), KeyElementId_29(D), &KeyElementIndex);
  # DEBUG RetVal => RetVal_31
  # DEBUG BEGIN_STMT
  if (RetVal_31 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _1 = *ResultLengthPtr_33(D);
  _2 = Crypto_AL_Keys_Data[CryptoKeyId_28(D)].KeyData;
  KeyElementIndex.0_3 = KeyElementIndex;
  _4 = KeyElementIndex.0_3 * 12;
  _5 = _2 + _4;
  _6 = _5->RfKeyElemDataSize;
  if (_1 > _6)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = Crypto_AL_Keys_Data[CryptoKeyId_28(D)].KeyData;
  KeyElementIndex.1_8 = KeyElementIndex;
  _9 = KeyElementIndex.1_8 * 12;
  _10 = _7 + _9;
  _11 = _10->RfKeyElemDataSize;
  *ResultLengthPtr_33(D) = _11;

  <bb 5> :
  # DEBUG BEGIN_STMT
  i_35 = 0;
  # DEBUG i => i_35
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _12 = Crypto_AL_Keys_Data[CryptoKeyId_28(D)].KeyData;
  KeyElementIndex.2_13 = KeyElementIndex;
  _14 = KeyElementIndex.2_13 * 12;
  _15 = _12 + _14;
  _16 = _15->RfKeyElemData;
  _17 = _16 + i_21;
  _18 = ResultPtr_37(D) + i_21;
  _19 = *_17;
  *_18 = _19;
  # DEBUG BEGIN_STMT
  i_39 = i_21 + 1;
  # DEBUG i => i_39

  <bb 7> :
  # i_21 = PHI <i_35(5), i_39(6)>
  # DEBUG i => i_21
  # DEBUG BEGIN_STMT
  _20 = *ResultLengthPtr_33(D);
  if (i_21 < _20)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  _40 = RetVal_31;
  KeyElementIndex ={v} {CLOBBER};
  return _40;

}


Crypto_AL_KeyValidSet (uint32 CryptoKeyId)
{
  Std_ReturnType RetVal;
  Std_ReturnType _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_1 = 1;
  # DEBUG RetVal => RetVal_1
  # DEBUG BEGIN_STMT
  Crypto_Keys[CryptoKeyId_3(D)].KeyState = 1;
  # DEBUG BEGIN_STMT
  RetVal_5 = 0;
  # DEBUG RetVal => RetVal_5
  # DEBUG BEGIN_STMT
  _6 = RetVal_5;
  return _6;

}


Crypto_AL_KeyElementSet (uint32 CryptoKeyId, uint32 KeyElementId, const uint8 * KeyPtr, uint32 KeyLength)
{
  uint32 KeyElementIndex;
  boolean Found;
  Std_ReturnType RetVal;
  struct Crypto_KeyElement * const * _1;
  long unsigned int _2;
  struct Crypto_KeyElement * const * _3;
  struct Crypto_KeyElement * _4;
  long unsigned int _5;
  long unsigned int _6;
  struct Crypto_KeyElement * const * _7;
  long unsigned int _8;
  struct Crypto_KeyElement * const * _9;
  struct Crypto_KeyElement * _10;
  long unsigned int _11;
  struct Crypto_AL_KeyDataType * _12;
  long unsigned int _13;
  struct Crypto_AL_KeyDataType * _14;
  uint8 * _15;
  struct Crypto_AL_KeyDataType * _16;
  long unsigned int _17;
  struct Crypto_AL_KeyDataType * _18;
  Std_ReturnType _42;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_24 = 1;
  # DEBUG RetVal => RetVal_24
  # DEBUG BEGIN_STMT
  Found_25 = 0;
  # DEBUG Found => Found_25
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  KeyElementIndex_26 = 0;
  # DEBUG KeyElementIndex => KeyElementIndex_26
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Crypto_Keys[CryptoKeyId_28(D)].KeyType;
  _2 = KeyElementIndex_21 * 4;
  _3 = _1 + _2;
  _4 = *_3;
  _5 = _4->Id;
  if (KeyElementId_29(D) == _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Found_31 = 1;
  # DEBUG Found => Found_31
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  KeyElementIndex_30 = KeyElementIndex_21 + 1;
  # DEBUG KeyElementIndex => KeyElementIndex_30

  <bb 6> :
  # KeyElementIndex_21 = PHI <KeyElementIndex_26(2), KeyElementIndex_30(5)>
  # DEBUG KeyElementIndex => KeyElementIndex_21
  # DEBUG BEGIN_STMT
  _6 = Crypto_Keys[CryptoKeyId_28(D)].KeyElements;
  if (KeyElementIndex_21 < _6)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # Found_20 = PHI <Found_31(4), Found_25(6)>
  # DEBUG Found => Found_20
  # DEBUG BEGIN_STMT
  if (Found_20 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal_41 = 8;
  # DEBUG RetVal => RetVal_41
  goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _7 = Crypto_Keys[CryptoKeyId_28(D)].KeyType;
  _8 = KeyElementIndex_21 * 4;
  _9 = _7 + _8;
  _10 = *_9;
  _11 = _10->Size;
  if (KeyLength_32(D) > _11)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RetVal_40 = 10;
  # DEBUG RetVal => RetVal_40
  goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  _12 = Crypto_AL_Keys_Data[CryptoKeyId_28(D)].KeyData;
  _13 = KeyElementIndex_21 * 12;
  _14 = _12 + _13;
  _15 = _14->RfKeyElemData;
  TS_MemCpy32 (_15, KeyPtr_34(D), KeyLength_32(D));
  # DEBUG BEGIN_STMT
  _16 = Crypto_AL_Keys_Data[CryptoKeyId_28(D)].KeyData;
  _17 = KeyElementIndex_21 * 12;
  _18 = _16 + _17;
  _18->RfKeyElemDataSize = KeyLength_32(D);
  # DEBUG BEGIN_STMT
  SchM_Exit_Crypto_SCHM_CRYPTO_EXCLUSIVE_AREA_DRIVEROBJECT ();
  # DEBUG BEGIN_STMT
  if (KeyElementId_29(D) == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Crypto_AL_AESCMAC_PrecalculateKeys (CryptoKeyId_28(D));

  <bb 13> :
  # DEBUG BEGIN_STMT
  RetVal_39 = 0;
  # DEBUG RetVal => RetVal_39

  <bb 14> :
  # RetVal_19 = PHI <RetVal_41(8), RetVal_40(10), RetVal_39(13)>
  # DEBUG RetVal => RetVal_19
  # DEBUG BEGIN_STMT
  _42 = RetVal_19;
  return _42;

}


