
Marking local functions:


Marking externally visible functions: OS_KernWaitEvent


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_startTaskExecTimingFp/11 (OS_startTaskExecTimingFp) @06da0990
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_KernWaitEvent/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_rateMonitorFunc/10 (OS_rateMonitorFunc) @06da0798
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_KernWaitEvent/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_Dequeue/9 (OS_Dequeue) @06d6e9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_KernWaitEvent/0 OS_KernWaitEvent/0 
  Calls: 
OS_ptrPostTaskHook/8 (OS_ptrPostTaskHook) @06da0678
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_KernWaitEvent/0 (read)OS_KernWaitEvent/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_stopTaskExecTimingFp/7 (OS_stopTaskExecTimingFp) @06da05a0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_KernWaitEvent/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_CORTEXM_IntSetDisablingLevel/6 (OS_CORTEXM_IntSetDisablingLevel) @06d6e8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_KernWaitEvent/0 OS_KernWaitEvent/0 
  Calls: 
OS_kernDisableLevel/5 (OS_kernDisableLevel) @06da04c8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_KernWaitEvent/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_svc_WaitEvent/4 (OS_svc_WaitEvent) @06da03f0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_KernWaitEvent/0 (addr)OS_KernWaitEvent/0 (addr)OS_KernWaitEvent/0 (addr)OS_KernWaitEvent/0 (addr)OS_KernWaitEvent/0 (addr)OS_KernWaitEvent/0 (addr)OS_KernWaitEvent/0 (addr)
  Availability: not_available
  Varpool flags: read-only
OS_Error/3 (OS_Error) @06d6e700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_KernWaitEvent/0 OS_KernWaitEvent/0 OS_KernWaitEvent/0 OS_KernWaitEvent/0 OS_KernWaitEvent/0 OS_KernWaitEvent/0 OS_KernWaitEvent/0 
  Calls: 
OS_iecMode/2 (OS_iecMode) @06da0360
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_KernWaitEvent/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_kernelData/1 (OS_kernelData) @06da0318
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_KernWaitEvent/0 (addr)OS_KernWaitEvent/0 (read)OS_KernWaitEvent/0 (read)OS_KernWaitEvent/0 (addr)OS_KernWaitEvent/0 (read)OS_KernWaitEvent/0 (write)OS_KernWaitEvent/0 (write)OS_KernWaitEvent/0 (addr)OS_KernWaitEvent/0 (read)OS_KernWaitEvent/0 (write)OS_KernWaitEvent/0 (write)
  Availability: not_available
  Varpool flags:
OS_KernWaitEvent/0 (OS_KernWaitEvent) @06d6e380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_kernelData/1 (addr)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_iecMode/2 (read)OS_svc_WaitEvent/4 (addr)OS_svc_WaitEvent/4 (addr)OS_svc_WaitEvent/4 (addr)OS_kernDisableLevel/5 (read)OS_svc_WaitEvent/4 (addr)OS_stopTaskExecTimingFp/7 (read)OS_kernelData/1 (addr)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_ptrPostTaskHook/8 (read)OS_kernelData/1 (write)OS_rateMonitorFunc/10 (read)OS_svc_WaitEvent/4 (addr)OS_kernelData/1 (addr)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_ptrPostTaskHook/8 (read)OS_kernelData/1 (write)OS_startTaskExecTimingFp/11 (read)OS_svc_WaitEvent/4 (addr)OS_svc_WaitEvent/4 (addr)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_Error/3 OS_Error/3 OS_CORTEXM_IntSetDisablingLevel/6 OS_Dequeue/9 OS_Error/3 OS_Dequeue/9 OS_Error/3 OS_CORTEXM_IntSetDisablingLevel/6 OS_Error/3 OS_Error/3 OS_Error/3 
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
__attribute__((target ("general-regs-only")))
OS_KernWaitEvent (os_eventmask_t e)
{
  os_uint8_t Os_CallHookTmp;
  struct os_kerneldata_t * const OS_kd;
  os_uint8_t Os_CallHookTmp;
  struct os_kerneldata_t * const OS_kd;
  os_paramtype_t p[3];
  os_result_t r;
  struct os_taskdynamic_t * td;
  const struct os_task_t * ts;
  os_intstatus_t is;
  struct os_kerneldata_t * const kernel_data;
  os_result_t D.7458;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  r = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  p[0] = e;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = OS_kernelData.inFunction;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ts = OS_kernelData.taskCurrent;
  # DEBUG BEGIN_STMT
  _2 = ts->flags;
  _3 = (unsigned int) _2;
  _4 = _3 & 2;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  td = ts->dynamic;
  # DEBUG BEGIN_STMT
  OS_iecMode.0_5 = OS_iecMode;
  if (OS_iecMode.0_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _6 = BIT_FIELD_REF <MEM[(void *)td], 16, 160>;
  _7 = _6;
  if (_7 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  r = OS_Error (&OS_svc_WaitEvent, 55, 0B);
  goto <bb 29>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _8 = td->lastLock;
  if (_8 != 4294967295)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _9 = td->lastLock;
  _10 = _9 >> 24;
  if (_10 == 9)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  r = OS_Error (&OS_svc_WaitEvent, 156, &p);
  goto <bb 29>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  r = OS_Error (&OS_svc_WaitEvent, 13, &p);
  goto <bb 29>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  OS_kernDisableLevel.1_11 = OS_kernDisableLevel;
  is = OS_CORTEXM_IntSetDisablingLevel (OS_kernDisableLevel.1_11);
  # DEBUG BEGIN_STMT
  _12 = td->state;
  if (_12 == 5)
    goto <bb 12>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (e == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  r = OS_Error (&OS_svc_WaitEvent, 14, &p);

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (r != 0)
    goto <bb 26>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  OS_stopTaskExecTimingFp.2_13 = OS_stopTaskExecTimingFp;
  OS_stopTaskExecTimingFp.2_13 (ts);
  # DEBUG BEGIN_STMT
  _14 = td->state;
  if (_14 == 5)
    goto <bb 16>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _15 = td->pEvents;
  _16 = e & _15;
  if (_16 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_kd = &OS_kernelData;
  # DEBUG BEGIN_STMT
  Os_CallHookTmp = OS_kernelData.inFunction;
  # DEBUG BEGIN_STMT
  OS_kernelData.inFunction = 12;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_ptrPostTaskHook.3_17 = OS_ptrPostTaskHook;
  OS_ptrPostTaskHook.3_17 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_kernelData.inFunction = Os_CallHookTmp;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _18 = ts->linkBase;
  OS_Dequeue (_18);
  # DEBUG BEGIN_STMT
  td->wEvents = e;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  td->state = 6;
  goto <bb 26>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _19 = ts->rateMonitor;
  if (_19 != 65535)
    goto <bb 19>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 19> :
  OS_rateMonitorFunc.4_20 = OS_rateMonitorFunc;
  _21 = ts->rateMonitor;
  _22 = OS_rateMonitorFunc.4_20 (_21);
  if (_22 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  r = OS_Error (&OS_svc_WaitEvent, 54, &p);
  # DEBUG BEGIN_STMT
  if (r != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 21> :
  _23 = td->state;
  if (_23 == 5)
    goto <bb 22>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_kd = &OS_kernelData;
  # DEBUG BEGIN_STMT
  Os_CallHookTmp = OS_kernelData.inFunction;
  # DEBUG BEGIN_STMT
  OS_kernelData.inFunction = 12;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_ptrPostTaskHook.5_24 = OS_ptrPostTaskHook;
  OS_ptrPostTaskHook.5_24 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_kernelData.inFunction = Os_CallHookTmp;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _25 = ts->linkBase;
  OS_Dequeue (_25);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  td->state = 1;
  goto <bb 26>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = ts->accounting;
  if (_26 != 0B)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  _27 = ts->accounting;
  _27->etUsed = 0;
  # DEBUG BEGIN_STMT
  _28 = ts->accounting;
  _28->etType = 1;

  <bb 25> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_startTaskExecTimingFp.6_29 = OS_startTaskExecTimingFp;
  OS_startTaskExecTimingFp.6_29 (ts);

  <bb 26> :
  # DEBUG BEGIN_STMT
  OS_CORTEXM_IntSetDisablingLevel (is);
  goto <bb 29>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  r = OS_Error (&OS_svc_WaitEvent, 15, &p);
  goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  r = OS_Error (&OS_svc_WaitEvent, 12, &p);

  <bb 29> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7458 = r;
  p = {CLOBBER};
  return D.7458;

}


