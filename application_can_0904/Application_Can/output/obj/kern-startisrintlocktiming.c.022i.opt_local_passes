__attribute__((target ("general-regs-only")))
OS_StartIsrIntLockTiming (os_isrid_t i, os_intlocktype_t locktype)
{
  os_tick_t OS_hwtStartDelta;
  os_tick_t remaining;
  os_tick_t used;
  os_tick_t locktime;
  const struct os_isr_t * const isr;
  struct os_kerneldata_t * const kernel_data;
  const struct os_isr_t * OS_isrTableBase.0_1;
  unsigned int _2;
  unsigned int _3;
  const struct os_hwt_t * _4;
  const struct os_hwtdrv_t * _5;
  void (*<T521>) (const struct os_hwt_t *) _6;
  const struct os_hwt_t * _7;
  unsigned int _8;
  unsigned int _9;
  unsigned char _10;
  unsigned int _11;
  unsigned int _12;
  struct os_israccounting_t * _13;
  unsigned int _14;
  unsigned int _15;
  struct os_israccounting_t * _16;
  unsigned int _17;
  unsigned int _18;
  unsigned int _19;
  unsigned int _20;
  unsigned int _21;
  unsigned int _22;
  unsigned int _23;
  unsigned char _24;
  unsigned int _25;
  unsigned int _26;
  unsigned char _27;
  unsigned int _28;
  unsigned int _29;
  const struct os_hwt_t * _30;
  unsigned int _31;
  const struct os_hwt_t * _32;
  const struct os_hwt_t * _33;
  const struct os_hwtdrv_t * _34;
  os_boolean_t (*<T52b>) (const struct os_hwt_t *, os_timervalue_t, os_tick_t) _35;
  const struct os_hwt_t * _36;
  unsigned int _37;
  const os_tick_t iftmp.1_40;
  const os_tick_t iftmp.1_50;
  const os_tick_t iftmp.1_51;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data_45 = &OS_kernelData;
  # DEBUG kernel_data => kernel_data_45
  # DEBUG BEGIN_STMT
  OS_isrTableBase.0_1 = OS_isrTableBase;
  _2 = (unsigned int) i_47(D);
  _3 = _2 * 68;
  isr_48 = OS_isrTableBase.0_1 + _3;
  # DEBUG isr => isr_48
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (locktype_49(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.1_51 = isr_48->osLockTime;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1_50 = isr_48->allLockTime;

  <bb 5> :
  # iftmp.1_40 = PHI <iftmp.1_51(3), iftmp.1_50(4)>
  locktime_52 = iftmp.1_40;
  # DEBUG locktime => locktime_52
  # DEBUG BEGIN_STMT
  if (locktime_52 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _4 = OS_executionTimer[0];
  _5 = _4->driver;
  _6 = _5->hwtStop;
  _7 = OS_executionTimer[0];
  _6 (_7);
  # DEBUG BEGIN_STMT
  used_55 = OS_GetTimeUsed ();
  # DEBUG used => used_55
  # DEBUG BEGIN_STMT
  _8 = OS_kernelData.accounting.etUsed;
  _9 = used_55 + _8;
  OS_kernelData.accounting.etUsed = _9;
  # DEBUG BEGIN_STMT
  _10 = isr_48->flags;
  _11 = (unsigned int) _10;
  _12 = _11 & 64;
  if (_12 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _13 = isr_48->accounting;
  _14 = _13->etMax;
  _15 = OS_kernelData.accounting.etUsed;
  if (_14 < _15)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = isr_48->accounting;
  _17 = OS_kernelData.accounting.etUsed;
  _16->etMax = _17;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _18 = OS_kernelData.accounting.etLimit;
  if (_18 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _19 = OS_kernelData.accounting.etUsed;
  _20 = OS_kernelData.accounting.etLimit;
  if (_19 >= _20)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  OS_ExceedExecTime ();
  goto <bb 24>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _21 = OS_kernelData.accounting.etLimit;
  if (_21 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  remaining_60 = 4294967295;
  # DEBUG remaining => remaining_60
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _22 = OS_kernelData.accounting.etLimit;
  _23 = OS_kernelData.accounting.etUsed;
  remaining_59 = _22 - _23;
  # DEBUG remaining => remaining_59

  <bb 15> :
  # remaining_38 = PHI <remaining_60(13), remaining_59(14)>
  # DEBUG remaining => remaining_38
  # DEBUG BEGIN_STMT
  if (locktype_49(D) == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _24 = OS_kernelData.accounting.etType;
  OS_kernelData.accounting.osSaveType = _24;
  # DEBUG BEGIN_STMT
  _25 = OS_kernelData.accounting.etUsed;
  OS_kernelData.accounting.osSaveUsed = _25;
  # DEBUG BEGIN_STMT
  _26 = OS_kernelData.accounting.etLimit;
  OS_kernelData.accounting.osSaveLimit = _26;
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _27 = OS_kernelData.accounting.etType;
  OS_kernelData.accounting.allSaveType = _27;
  # DEBUG BEGIN_STMT
  _28 = OS_kernelData.accounting.etUsed;
  OS_kernelData.accounting.allSaveUsed = _28;
  # DEBUG BEGIN_STMT
  _29 = OS_kernelData.accounting.etLimit;
  OS_kernelData.accounting.allSaveLimit = _29;

  <bb 18> :
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etUsed = 0;
  # DEBUG BEGIN_STMT
  if (locktime_52 >= remaining_38)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etLimit = remaining_38;
  goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etLimit = locktime_52;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.inFunction = 3;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etType = 3;

  <bb 21> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_hwtStartDelta_72 = OS_kernelData.accounting.etLimit;
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_72
  # DEBUG BEGIN_STMT
  _30 = OS_executionTimer[0];
  _31 = _30->maxDelta;
  if (OS_hwtStartDelta_72 > _31)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _32 = OS_executionTimer[0];
  OS_hwtStartDelta_73 = _32->defDelta;
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_73

  <bb 23> :
  # OS_hwtStartDelta_39 = PHI <OS_hwtStartDelta_72(21), OS_hwtStartDelta_73(22)>
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_39
  # DEBUG BEGIN_STMT
  _33 = OS_executionTimer[0];
  _34 = _33->driver;
  _35 = _34->hwtStart;
  _36 = OS_executionTimer[0];
  _37 = OS_kernelData.accounting.frc;
  _35 (_36, _37, OS_hwtStartDelta_39);

  <bb 24> :
  # DEBUG BEGIN_STMT
  return;

}


