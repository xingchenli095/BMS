Atomics_ClearFlag (volatile Atomic_t * object, Atomic_value_t flagSelectionMask)
{
  const Atomic_value_t flags;
  boolean success;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.10_1 = success;
  if (success.10_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  flags = *object;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ~flagSelectionMask;
  _3 = flags & _2;
  *object = _3;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success = {CLOBBER};
  return;

}


Atomics_TestAndSetFlag (volatile Atomic_t * object, Atomic_value_t flagSelectionMask)
{
  Atomic_value_t ret;
  boolean success;
  boolean D.7936;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.9_1 = success;
  if (success.9_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret = *object;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret | flagSelectionMask;
  *object = _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = ret & flagSelectionMask;
  _4 = _3 != 0;
  D.7936 = (boolean) _4;
  success = {CLOBBER};
  return D.7936;

}


Atomics_FetchXor (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  boolean success;
  Atomic_value_t D.7931;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.8_1 = success;
  if (success.8_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret = *object;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret ^ operand;
  *object = _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7931 = ret;
  success = {CLOBBER};
  return D.7931;

}


Atomics_FetchAnd (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  boolean success;
  Atomic_value_t D.7926;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.7_1 = success;
  if (success.7_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret = *object;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret & operand;
  *object = _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7926 = ret;
  success = {CLOBBER};
  return D.7926;

}


Atomics_FetchOr (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  boolean success;
  Atomic_value_t D.7921;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.6_1 = success;
  if (success.6_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret = *object;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret | operand;
  *object = _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7921 = ret;
  success = {CLOBBER};
  return D.7921;

}


Atomics_FetchSub (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  boolean success;
  Atomic_value_t D.7916;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.5_1 = success;
  if (success.5_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret = *object;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret - operand;
  *object = _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7916 = ret;
  success = {CLOBBER};
  return D.7916;

}


Atomics_FetchAdd (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  boolean success;
  Atomic_value_t D.7911;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.4_1 = success;
  if (success.4_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret = *object;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret + operand;
  *object = _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7911 = ret;
  success = {CLOBBER};
  return D.7911;

}


Atomics_CompareExchange (volatile Atomic_t * object, Atomic_t * expected, Atomic_value_t newValue)
{
  const Atomic_value_t tmp;
  boolean ret;
  boolean success;
  boolean D.7906;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.3_1 = success;
  if (success.3_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  tmp = *object;
  # DEBUG BEGIN_STMT
  _2 = *expected;
  if (tmp == _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object = newValue;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  *expected = tmp;

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7906 = ret;
  success = {CLOBBER};
  return D.7906;

}


Atomics_Exchange (volatile Atomic_t * object, Atomic_value_t newValue)
{
  Atomic_value_t ret;
  boolean success;
  Atomic_value_t D.7898;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.2_1 = success;
  if (success.2_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret = *object;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object = newValue;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7898 = ret;
  success = {CLOBBER};
  return D.7898;

}


Atomics_Load (const Atomic_t * object)
{
  Atomic_value_t ret;
  boolean success;
  Atomic_value_t D.7893;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.1_1 = success;
  if (success.1_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret = *object;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7893 = ret;
  success = {CLOBBER};
  return D.7893;

}


Atomics_Store (volatile Atomic_t * object, Atomic_value_t newValue)
{
  boolean success;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success.0_1 = success;
  if (success.0_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object = newValue;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  success = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  success = {CLOBBER};
  return;

}


Atomics_Init (volatile Atomic_t * object, Atomic_value_t initValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object = initValue;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Atomics_ThreadFence ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


