Parsed function:SWC_E2EProtSafe_Data_Cyclic
Parsed function:SWC_E2EProtSafe_Data_Received
Dump after hash based groups
Congruence classes: 2 (unique hash values: 2), with total: 2 items
Class size histogram [num of members]: number of classe number of classess
[1]: 2 classes


Dump after WPA based types groups
Congruence classes: 2 (unique hash values: 2), with total: 2 items
Class size histogram [num of members]: number of classe number of classess
[1]: 2 classes


Worklist has been filled with: 0
Address reference subdivision created: 0 new classes.
Dump after callgraph-based congruence reduction
Congruence classes: 2 (unique hash values: 2), with total: 2 items
Class size histogram [num of members]: number of classe number of classess
[1]: 2 classes


Init called for 0 items (0.00%).
Dump after full equality comparison of groups
Congruence classes: 2 (unique hash values: 2), with total: 2 items
Class size histogram [num of members]: number of classe number of classess
[1]: 2 classes


Worklist has been filled with: 0
Address reference subdivision created: 0 new classes.
Congruence classes: 2 (unique hash values: 2), with total: 2 items
Class size histogram [num of members]: number of classe number of classess
[1]: 2 classes



Item count: 2
Congruent classes before: 2, after: 2
Average class size before: 1.00, after: 1.00
Average non-singular class size: 0.00, count: 0
Equal symbols: 0
Fraction of visited symbols: 0.00%

SWC_E2EProtSafe_Data_Cyclic ()
{
  struct E2EProt_Data arg_Send_data;
  unsigned char E2E_Data_Safety.2_1;
  unsigned char _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  E2E_Data_Safety.2_1 = E2E_Data_Safety;
  _2 = E2E_Data_Safety.2_1 + 1;
  E2E_Data_Safety = _2;
  arg_Send_data.SafetyE2E_Data = _2;
  arg_Send_data.SafetyE2E_Data_CRC = 0;
  arg_Send_data.SafetyE2E_Data_SQC_Counter = 0;
  # DEBUG BEGIN_STMT
  Rte_Send_SWC_E2ESafety_P_E2E_SafeData_E2EProt_Data (&arg_Send_data);
  arg_Send_data ={v} {CLOBBER};
  return;

}


SWC_E2EProtSafe_Data_Received ()
{
  struct E2EProt_Data arg_Receive_data;
  unsigned char E2E_Data_Safety.0_1;
  unsigned char _2;
  unsigned char _3;
  const struct Rte_CDS_SWC_E2ESafety * Rte_Inst_SWC_E2ESafety.1_4;
  struct Rte_DE_E2EProt_Data * _5;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  E2E_Data_Safety.0_1 = E2E_Data_Safety;
  # DEBUG arg_IWrite_data$SafetyE2E_Data => E2E_Data_Safety.0_1
  # DEBUG arg_IWrite_data$SafetyE2E_Data_CRC => 0
  # DEBUG arg_IWrite_data$SafetyE2E_Data_SQC_Counter => 0
  # DEBUG BEGIN_STMT
  _2 = Rte_Receive_SWC_E2ESafety_R_E2E_SafeData_E2EProt_Data (&arg_Receive_data);
  if (_2 == 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _3 = arg_Receive_data.SafetyE2E_Data;
  E2E_Data_Safety = _3;

  <bb 4> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Rte_Inst_SWC_E2ESafety.1_4 = Rte_Inst_SWC_E2ESafety;
  _5 = Rte_Inst_SWC_E2ESafety.1_4->UpdateE2EProtSafeData_P_E2E_SafeData_E2EProt_Data;
  MEM[(struct Rte_DE_E2EProt_Data *)_5] = E2E_Data_Safety.0_1;
  MEM[(struct Rte_DE_E2EProt_Data *)_5 + 2B] = 0;
  MEM[(struct Rte_DE_E2EProt_Data *)_5 + 4B] = 0;
  arg_Receive_data ={v} {CLOBBER};
  # DEBUG D#1 => {CLOBBER}
  # DEBUG arg_IWrite_data$SafetyE2E_Data => D#1
  # DEBUG D#2 => {CLOBBER}
  # DEBUG arg_IWrite_data$SafetyE2E_Data_CRC => D#2
  # DEBUG D#3 => {CLOBBER}
  # DEBUG arg_IWrite_data$SafetyE2E_Data_SQC_Counter => D#3
  return;

}


