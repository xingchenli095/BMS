Dcm_Dsp_SecurityAccess_SendKey_SSvcH (Dcm_OpStatusType OpStatus, uint8 * Nrc, struct Dcm_MsgContextType * MsgContextPtr)
{
  Std_ReturnType ServiceProcessStatus;
  Std_ReturnType D.7109;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 30;
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = Dcm_Dsp_SecurityAccess_CompareKey_Operation (OpStatus, Nrc, MsgContextPtr);
  # DEBUG BEGIN_STMT
  D.7109 = ServiceProcessStatus;
  return D.7109;

}


Dcm_Dsp_SecurityAccess_CompareKey_Operation (Dcm_OpStatusType OpStatus, uint8 * Nrc, struct Dcm_MsgContextType * MsgContextPtr)
{
  const Dcm_SecLevelType NewSecLevel;
  const struct Dcm_SecurityLevelEntryConfigType * NewSecTabEntry;
  Std_ReturnType SendKeyStatus;
  Std_ReturnType ServiceProcessStatus;
  Std_ReturnType D.7148;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 30;
  # DEBUG BEGIN_STMT
  SendKeyStatus = 1;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.9_1 = Dcm_Dsp_SecurityAccess_ReqSecLevelIndex;
  _2 = (int) Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.9_1;
  NewSecTabEntry = &Dcm_SecurityLevelEntryConfig[_2];
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.10_3 = Dcm_Dsp_SecurityAccess_ReqSecLevelIndex;
  _4 = (int) Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.10_3;
  NewSecLevel = Dcm_SecurityLevelEntryConfig[_4].SecLevel;
  # DEBUG BEGIN_STMT
  _5 = NewSecTabEntry->SecAccessInterface;
  if (_5 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = NewSecTabEntry->SecAccessAutosarVersion;
  if (_6 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = NewSecTabEntry->SecurityCompareKeyFncAsync_ASR42;
  _8 = MsgContextPtr->reqData;
  SendKeyStatus = _7 (_8, OpStatus, Nrc);
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = NewSecTabEntry->SecurityCompareKeyFncAsync_ASR40;
  _10 = MsgContextPtr->reqData;
  SendKeyStatus = _9 (_10, OpStatus);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = NewSecTabEntry->SecAccessAutosarVersion;
  if (_11 == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _12 = NewSecTabEntry->SecurityCompareKeyFncSync_ASR42;
  _13 = MsgContextPtr->reqData;
  SendKeyStatus = _12 (_13, Nrc);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _14 = NewSecTabEntry->SecurityCompareKeyFncSync_ASR40;
  _15 = MsgContextPtr->reqData;
  SendKeyStatus = _14 (_15);

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (OpStatus != 2)
    goto <bb 10>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (SendKeyStatus == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.11_16 = Dcm_Dsp_SecurityAccess_ReqSecLevelIndex;
  _17 = (int) Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.11_16;
  _18 = Dcm_Dsp_SecurityAccess_DelayTimers[_17].AttemptCounter;
  if (_18 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.12_19 = Dcm_Dsp_SecurityAccess_ReqSecLevelIndex;
  _20 = (int) Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.12_19;
  Dcm_Dsp_SecurityAccess_DelayTimers[_20].AttemptCounter = 0;

  <bb 13> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel.13_21 = Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel;
  if (Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel.13_21 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Dcm_Dsl_SecurityLevelHandler_SetSecurityLevel (NewSecLevel);

  <bb 15> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  *Nrc = 0;
  # DEBUG BEGIN_STMT
  MsgContextPtr->resDataLen = 1;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel = 0;
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 26;
  goto <bb 32>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (SendKeyStatus == 1)
    goto <bb 18>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  if (SendKeyStatus == 11)
    goto <bb 18>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _22 = NewSecTabEntry->SecAccessAutosarVersion;
  if (_22 == 2)
    goto <bb 19>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (SendKeyStatus == 1)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _23 = *Nrc;
  if (_23 == 0)
    goto <bb 21>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  *Nrc = 34;
  goto <bb 24>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  *Nrc = 53;
  goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  *Nrc = 53;

  <bb 24> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (SendKeyStatus == 11)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.14_24 = Dcm_Dsp_SecurityAccess_ReqSecLevelIndex;
  Dcm_Dsp_SecurityAccess_CompareKey_TreatAttemptCounters (Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.14_24, Nrc);

  <bb 26> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel = 0;
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 26;
  goto <bb 32>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  if (SendKeyStatus == 10)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 28> :
  _25 = NewSecTabEntry->SecAccessInterface;
  if (_25 <= 1)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 10;
  goto <bb 32>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  *Nrc = 16;
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 26;
  goto <bb 32>; [INV]

  <bb 31> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 26;

  <bb 32> :
  # DEBUG BEGIN_STMT
  D.7148 = ServiceProcessStatus;
  return D.7148;

}


Dcm_Dsp_SecurityAccess_CompareKey_TreatAttemptCounters (uint8 SecLevelIndex, uint8 * Nrc)
{
  const struct Dcm_SecurityLevelEntryConfigType * NewSecTabEntry;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) SecLevelIndex;
  NewSecTabEntry = &Dcm_SecurityLevelEntryConfig[_1];
  # DEBUG BEGIN_STMT
  _2 = (int) SecLevelIndex;
  _3 = Dcm_Dsp_SecurityAccess_DelayTimers[_2].AttemptCounter;
  _4 = NewSecTabEntry->SecurityNumAttDelay;
  if (_3 < _4)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = (int) SecLevelIndex;
  _6 = Dcm_Dsp_SecurityAccess_DelayTimers[_5].AttemptCounter;
  if (_6 != 255)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = (int) SecLevelIndex;
  _8 = Dcm_Dsp_SecurityAccess_DelayTimers[_7].AttemptCounter;
  _9 = _8;
  _10 = _9 + 1;
  Dcm_Dsp_SecurityAccess_DelayTimers[_7].AttemptCounter = _10;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _11 = (int) SecLevelIndex;
  _12 = Dcm_Dsp_SecurityAccess_DelayTimers[_11].AttemptCounter;
  _13 = NewSecTabEntry->SecurityNumAttDelay;
  if (_12 >= _13)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  *Nrc = 54;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_LockSecurityLevel = SecLevelIndex;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  *Nrc = 53;

  <bb 8> :
  return;

}


Dcm_Dsp_SecurityAccess_GetSeed_Operation (Dcm_OpStatusType OpStatus, uint8 * Nrc, const struct Dcm_SecurityLevelEntryConfigType * NewSecTabEntry, struct Dcm_MsgContextType * MsgContextPtr)
{
  uint8 * SecurityAccessDataRecord;
  Std_ReturnType RetVal;
  Std_ReturnType GetSeedStatus;
  Std_ReturnType D.7107;

  <bb 2> :
  # DEBUG BEGIN_STMT
  GetSeedStatus = 1;
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  _1 = NewSecTabEntry->ADRSize;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SecurityAccessDataRecord = MsgContextPtr->reqData;
  # DEBUG BEGIN_STMT
  _2 = NewSecTabEntry->SecAccessInterface;
  if (_2 <= 1)
    goto <bb 4>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = NewSecTabEntry->SecurityGetSeedFncADRAsync;
  _4 = MsgContextPtr->resData;
  _5 = _4 + 1;
  GetSeedStatus = _3 (SecurityAccessDataRecord, OpStatus, _5, Nrc);
  # DEBUG BEGIN_STMT
  if (OpStatus != 2)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (GetSeedStatus != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (GetSeedStatus == 131)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (GetSeedStatus == 10)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  RetVal = 10;
  goto <bb 31>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (GetSeedStatus == 1)
    goto <bb 31>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  *Nrc = 16;
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 145, 2);
  goto <bb 31>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  *Nrc = 0;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 31>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _6 = NewSecTabEntry->SecurityGetSeedFncADRSync;
  _7 = MsgContextPtr->resData;
  _8 = _7 + 1;
  GetSeedStatus = _6 (SecurityAccessDataRecord, _8, Nrc);
  # DEBUG BEGIN_STMT
  if (GetSeedStatus != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (GetSeedStatus != 1)
    goto <bb 15>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  *Nrc = 16;
  # DEBUG BEGIN_STMT
  RetVal = GetSeedStatus;
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 146, 2);
  goto <bb 31>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  *Nrc = 0;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 31>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _9 = NewSecTabEntry->SecAccessInterface;
  if (_9 <= 1)
    goto <bb 18>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _10 = NewSecTabEntry->SecurityGetSeedFncAsync;
  _11 = MsgContextPtr->resData;
  _12 = _11 + 1;
  GetSeedStatus = _10 (OpStatus, _12, Nrc);
  # DEBUG BEGIN_STMT
  if (OpStatus != 2)
    goto <bb 19>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (GetSeedStatus != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  if (GetSeedStatus == 131)
    goto <bb 22>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  if (GetSeedStatus == 10)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  RetVal = 10;
  goto <bb 31>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  if (GetSeedStatus == 1)
    goto <bb 31>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  *Nrc = 16;
  # DEBUG BEGIN_STMT
  RetVal = GetSeedStatus;
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 147, 2);
  goto <bb 31>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  *Nrc = 0;
  # DEBUG BEGIN_STMT
  RetVal = 0;
  goto <bb 31>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 31>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  _13 = NewSecTabEntry->SecurityGetSeedFncSync;
  _14 = MsgContextPtr->resData;
  _15 = _14 + 1;
  GetSeedStatus = _13 (_15, Nrc);
  # DEBUG BEGIN_STMT
  if (GetSeedStatus != 0)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  if (GetSeedStatus != 1)
    goto <bb 29>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  *Nrc = 16;
  # DEBUG BEGIN_STMT
  RetVal = GetSeedStatus;
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (53, 0, 148, 2);
  goto <bb 31>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  *Nrc = 0;
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 31> :
  # DEBUG BEGIN_STMT
  D.7107 = RetVal;
  return D.7107;

}


Dcm_Dsp_SecurityAccess_RequestSeed_SSvcH (Dcm_OpStatusType OpStatus, uint8 * Nrc, struct Dcm_MsgContextType * MsgContextPtr)
{
  struct Dcm_HsmInfoType * const curHsmInfo;
  uint8 curProtocolId;
  const Dcm_SecLevelType ActiveSecLevel;
  const Dcm_SecLevelType NewSecLevel;
  const struct Dcm_SecurityLevelEntryConfigType * NewSecTabEntry;
  Std_ReturnType GetSeedStatus;
  Std_ReturnType ServiceProcessStatus;
  Std_ReturnType D.7060;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 30;
  # DEBUG BEGIN_STMT
  GetSeedStatus = 0;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.7_1 = Dcm_Dsp_SecurityAccess_ReqSecLevelIndex;
  _2 = (int) Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.7_1;
  NewSecTabEntry = &Dcm_SecurityLevelEntryConfig[_2];
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.8_3 = Dcm_Dsp_SecurityAccess_ReqSecLevelIndex;
  _4 = (int) Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.8_3;
  NewSecLevel = Dcm_SecurityLevelEntryConfig[_4].SecLevel;
  # DEBUG BEGIN_STMT
  ActiveSecLevel = Dcm_Dsl_SecurityLevelHandler_GetSecurityLevel ();
  # DEBUG BEGIN_STMT
  if (NewSecLevel != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (NewSecLevel == ActiveSecLevel)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = MsgContextPtr->resData;
  _6 = _5 + 1;
  _7 = NewSecTabEntry->SeedSize;
  TS_MemSet32 (_6, 0, _7);
  # DEBUG BEGIN_STMT
  _8 = NewSecTabEntry->SeedSize;
  _9 = _8 + 1;
  MsgContextPtr->resDataLen = _9;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel = 0;
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 26;
  goto <bb 16>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = MsgContextPtr->dcmRxPduId;
  _11 = (int) _10;
  _12 = Dcm_RxPduIdConfig[_11].MainConnectionIndex;
  _13 = (int) _12;
  curProtocolId = Dcm_MainConnectionConfig[_13].ProtocolIndex;
  # DEBUG BEGIN_STMT
  _14 = (int) curProtocolId;
  curHsmInfo = &Dcm_HsmInfo[_14];
  # DEBUG BEGIN_STMT
  SchM_Enter_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _15 = curHsmInfo->serviceId;
  _16 = Dcm_Dsl_DiagnosticSessionHandler_GetResetToDefaultSessionOccured (_15);
  if (_16 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _17 = curHsmInfo->subServiceId;
  _18 = _17 + 1;
  _19 = _18 / 2;
  Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel = _19;

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  GetSeedStatus = Dcm_Dsp_SecurityAccess_GetSeed_Operation (OpStatus, Nrc, NewSecTabEntry, MsgContextPtr);
  # DEBUG BEGIN_STMT
  if (GetSeedStatus == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _20 = MsgContextPtr->resDataLen;
  _21 = NewSecTabEntry->SeedSize;
  _22 = _20 + _21;
  _23 = _22 + 1;
  MsgContextPtr->resDataLen = _23;
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 26;
  goto <bb 16>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (GetSeedStatus == 10)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 10;
  goto <bb 16>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (OpStatus != 2)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  if (GetSeedStatus == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _24 = *Nrc;
  if (_24 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  *Nrc = 34;

  <bb 15> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 26;

  <bb 16> :
  # DEBUG BEGIN_STMT
  D.7060 = ServiceProcessStatus;
  return D.7060;

}


Dcm_Dsp_SecurityAccess_SvcCont (Dcm_OpStatusType OpStatus, struct Dcm_MsgContextType * MsgContextPtr)
{
  Dcm_NegativeResponseCodeType Nrc;
  Dcm_SecStateType SecState;
  struct Dcm_HsmInfoType * const curHsmInfo;
  uint8 curProtocolId;
  Std_ReturnType ServiceProcessStatus;
  Std_ReturnType D.7039;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 30;
  # DEBUG BEGIN_STMT
  _1 = MsgContextPtr->dcmRxPduId;
  _2 = (int) _1;
  _3 = Dcm_RxPduIdConfig[_2].MainConnectionIndex;
  _4 = (int) _3;
  curProtocolId = Dcm_MainConnectionConfig[_4].ProtocolIndex;
  # DEBUG BEGIN_STMT
  _5 = (int) curProtocolId;
  curHsmInfo = &Dcm_HsmInfo[_5];
  # DEBUG BEGIN_STMT
  _6 = curHsmInfo->subServiceId;
  SecState = _6 & 1;
  # DEBUG BEGIN_STMT
  Nrc = 0;
  # DEBUG BEGIN_STMT
  if (SecState == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_InitState.2_7 = Dcm_Dsp_SecurityAccess_InitState;
  if (Dcm_Dsp_SecurityAccess_InitState.2_7 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Nrc = 34;
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked.3_8 = Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked;
  Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.4_9 = Dcm_Dsp_SecurityAccess_ReqSecLevelIndex;
  _10 = (int) Dcm_Dsp_SecurityAccess_ReqSecLevelIndex.4_9;
  _11 = Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked.3_8 >> _10;
  _12 = _11 & 1;
  if (_12 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Nrc = 55;
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = Dcm_Dsp_SecurityAccess_RequestSeed_SSvcH (OpStatus, &Nrc, MsgContextPtr);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = Dcm_Dsp_SecurityAccess_SendKey_SSvcH (OpStatus, &Nrc, MsgContextPtr);

  <bb 9> :
  # DEBUG BEGIN_STMT
  Nrc.5_13 = Nrc;
  if (Nrc.5_13 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Nrc.6_14 = Nrc;
  curHsmInfo->negativeResponseCode = Nrc.6_14;
  # DEBUG BEGIN_STMT
  SchM_Exit_Dcm_SCHM_DCM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 26;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel = 0;

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.7039 = ServiceProcessStatus;
  Nrc = {CLOBBER};
  return D.7039;

}


Dcm_Dsp_SecurityAccess_SvcStart (Dcm_OpStatusType OpStatus, struct Dcm_MsgContextType * MsgContextPtr)
{
  Dcm_SecLevelType NewSecLevel;
  uint8 SecIdx;
  Dcm_NegativeResponseCodeType Nrc;
  const struct Dcm_SecurityLevelEntryConfigType * NewSecTabEntry;
  Dcm_SecStateType SecState;
  Std_ReturnType ServiceProcessStatus;
  Std_ReturnType D.7026;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 30;
  # DEBUG BEGIN_STMT
  SecState = 0;
  # DEBUG BEGIN_STMT
  NewSecTabEntry = 0B;
  # DEBUG BEGIN_STMT
  Nrc = 0;
  # DEBUG BEGIN_STMT
  _1 = MsgContextPtr->reqDataLen;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Nrc = 19;
  goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = MsgContextPtr->reqData;
  _3 = *_2;
  _4 = _3 + 1;
  NewSecLevel = _4 / 2;
  # DEBUG BEGIN_STMT
  _5 = MsgContextPtr->reqData;
  _6 = *_5;
  SecState = _6 & 1;
  # DEBUG BEGIN_STMT
  SecIdx = 0;
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = (int) SecIdx;
  _8 = Dcm_SecurityLevelEntryConfig[_7].SecLevel;
  if (NewSecLevel == _8)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = (int) SecIdx;
  NewSecTabEntry = &Dcm_SecurityLevelEntryConfig[_9];
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_ReqSecLevelIndex = SecIdx;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  SecIdx = SecIdx + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (SecIdx <= 1)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (SecIdx > 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Nrc = 18;
  goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (SecState == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _10 = MsgContextPtr->reqData;
  _11 = *_10;
  _12 = (unsigned int) _11;
  Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel.1_13 = Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel;
  _14 = (unsigned int) Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel.1_13;
  _15 = _14 * 2;
  if (_12 != _15)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Nrc = 36;

  <bb 14> :
  # DEBUG BEGIN_STMT
  if (Nrc == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (SecState == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  _16 = MsgContextPtr->reqDataLen;
  _17 = NewSecTabEntry->KeySize;
  _18 = _17 + 1;
  if (_16 != _18)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Nrc = 19;
  goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  if (SecState == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _19 = MsgContextPtr->reqDataLen;
  _20 = NewSecTabEntry->ADRSize;
  _21 = _20 + 1;
  if (_19 != _21)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  Nrc = 19;

  <bb 21> :
  # DEBUG BEGIN_STMT
  if (Nrc == 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _22 = MsgContextPtr->reqData;
  _23 = MsgContextPtr->resData;
  _24 = *_22;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  _25 = MsgContextPtr->reqData;
  _26 = _25 + 1;
  MsgContextPtr->reqData = _26;
  # DEBUG BEGIN_STMT
  _27 = MsgContextPtr->reqDataLen;
  _28 = _27 + 4294967295;
  MsgContextPtr->reqDataLen = _28;
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = Dcm_Dsp_SecurityAccess_SvcCont (OpStatus, MsgContextPtr);
  goto <bb 26>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  Dcm_ExternalSetNegResponse (MsgContextPtr, Nrc);
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 26;
  # DEBUG BEGIN_STMT
  if (Nrc != 18)
    goto <bb 24>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 24> :
  if (Nrc != 36)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel = 0;

  <bb 26> :
  # DEBUG BEGIN_STMT
  D.7026 = ServiceProcessStatus;
  return D.7026;

}


Dcm_Dsp_SecurityAccess_DelayTimers_Decrement ()
{
  uint8_least StartFromIndex;
  uint8_least SecLevelIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartFromIndex = 0;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked.17_1 = Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked;
  if (Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked.17_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SecLevelIndex = StartFromIndex;
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked.18_2 = Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked;
  _3 = Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked.18_2 >> SecLevelIndex;
  _4 = _3 & 1;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _5 = Dcm_Dsp_SecurityAccess_DelayTimers[SecLevelIndex].InfiniteDelay;
  if (_5 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = Dcm_Dsp_SecurityAccess_DelayTimers[SecLevelIndex].DelayTimer;
  if (_6 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 = Dcm_Dsp_SecurityAccess_DelayTimers[SecLevelIndex].DelayTimer;
  _8 = _7 + 4294967295;
  Dcm_Dsp_SecurityAccess_DelayTimers[SecLevelIndex].DelayTimer = _8;
  # DEBUG BEGIN_STMT
  _9 = Dcm_Dsp_SecurityAccess_DelayTimers[SecLevelIndex].DelayTimer;
  if (_9 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _10 = 1 << SecLevelIndex;
  _11 = ~_10;
  Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked.19_12 = Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked;
  _13 = _11 & Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked.19_12;
  Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked = _13;

  <bb 9> :
  # DEBUG BEGIN_STMT
  SecLevelIndex = SecLevelIndex + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (SecLevelIndex <= 1)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  return;

}


Dcm_Dsp_SecurityAccess_StartDelayTimer (uint8 SecLevelIndex, uint32 Value, boolean InfiniteDelay)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (Value != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (InfiniteDelay == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = (int) SecLevelIndex;
  Dcm_Dsp_SecurityAccess_DelayTimers[_1].DelayTimer = Value;
  # DEBUG BEGIN_STMT
  _2 = (int) SecLevelIndex;
  Dcm_Dsp_SecurityAccess_DelayTimers[_2].InfiniteDelay = InfiniteDelay;
  # DEBUG BEGIN_STMT
  _3 = (int) SecLevelIndex;
  _4 = 1 << _3;
  Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked.15_5 = Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked;
  _6 = _4 | Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked.15_5;
  Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked = _6;

  <bb 5> :
  return;

}


Dcm_Dsp_SecurityAccess_StartDelayTimersOnStartup ()
{
  uint32 DelayTimerValue;
  uint8_least SecLevelIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SecLevelIndex = 0;
  # DEBUG BEGIN_STMT
  DelayTimerValue = 0;
  # DEBUG BEGIN_STMT
  SecLevelIndex = 0;
  goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Dcm_SecurityLevelEntryConfig[SecLevelIndex].DelayTimeOnBootOverride;
  if (_1 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = (unsigned char) SecLevelIndex;
  _3 = Dcm_SecurityLevelEntryConfig[SecLevelIndex].DelayTimeOnBoot;
  Dcm_Dsp_SecurityAccess_StartDelayTimer (_2, _3, 0);
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = Dcm_Dsp_SecurityAccess_DelayTimers[SecLevelIndex].AttemptCounter;
  _5 = Dcm_SecurityLevelEntryConfig[SecLevelIndex].SecurityNumAttDelay;
  if (_4 >= _5)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  DelayTimerValue = Dcm_SecurityLevelEntryConfig[SecLevelIndex].DelayTimeOnBoot;
  # DEBUG BEGIN_STMT
  _6 = Dcm_SecurityLevelEntryConfig[SecLevelIndex].DelayTime;
  if (DelayTimerValue < _6)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  DelayTimerValue = Dcm_SecurityLevelEntryConfig[SecLevelIndex].DelayTime;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _7 = (unsigned char) SecLevelIndex;
  _8 = Dcm_SecurityLevelEntryConfig[SecLevelIndex].DelayTimeInfinite;
  Dcm_Dsp_SecurityAccess_StartDelayTimer (_7, DelayTimerValue, _8);

  <bb 9> :
  # DEBUG BEGIN_STMT
  SecLevelIndex = SecLevelIndex + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (SecLevelIndex <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  return;

}


Dcm_Dsp_SecurityAccess_SessionChange (Dcm_SesCtrlType OldSession, Dcm_SesCtrlType NewSession)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_Reset ();
  # DEBUG BEGIN_STMT
  return;

}


Dcm_Dsp_SecurityAccess_MainFunction ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_InitState.16_1 = Dcm_Dsp_SecurityAccess_InitState;
  if (Dcm_Dsp_SecurityAccess_InitState.16_1 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_DelayTimers_Decrement ();
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_StartDelayTimersOnStartup ();
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_InitState = 3;

  <bb 5> :
  return;

}


Dcm_Dsp_SecurityAccess_SvcH (Dcm_OpStatusType OpStatus, struct Dcm_MsgContextType * MsgContextPtr)
{
  const uint8 LockSecurityLevel;
  Std_ReturnType ServiceProcessStatus;
  Std_ReturnType D.6994;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 30;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) OpStatus;
  switch (_1) <default: <L11> [INV], case 0: <L0> [INV], case 1: <L2> [INV], case 2: <L3> [INV], case 3: <L1> [INV], case 5 ... 6: <L4> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = Dcm_Dsp_SecurityAccess_SvcStart (OpStatus, MsgContextPtr);
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = Dcm_Dsp_SecurityAccess_SvcCont (OpStatus, MsgContextPtr);
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = Dcm_Dsp_SecurityAccess_SvcCont (OpStatus, MsgContextPtr);
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = Dcm_Dsp_SecurityAccess_SvcCont (OpStatus, MsgContextPtr);
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_LockSecurityLevel.0_2 = Dcm_Dsp_SecurityAccess_LockSecurityLevel;
  if (Dcm_Dsp_SecurityAccess_LockSecurityLevel.0_2 != 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  LockSecurityLevel = Dcm_Dsp_SecurityAccess_LockSecurityLevel;
  # DEBUG BEGIN_STMT
  _3 = (int) LockSecurityLevel;
  _4 = Dcm_SecurityLevelEntryConfig[_3].DelayTime;
  _5 = (int) LockSecurityLevel;
  _6 = Dcm_SecurityLevelEntryConfig[_5].DelayTimeInfinite;
  Dcm_Dsp_SecurityAccess_StartDelayTimer (LockSecurityLevel, _4, _6);
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_LockSecurityLevel = 2;

  <bb 9> :
  # DEBUG BEGIN_STMT
  ServiceProcessStatus = 26;
  # DEBUG BEGIN_STMT

  <bb 10> :
<L11>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6994 = ServiceProcessStatus;
  return D.6994;

}


Dcm_Dsp_SecurityAccess_Init ()
{
  uint8_least SecLevelIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_SecurityLevelsBlocked = 0;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_LockSecurityLevel = 2;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_InitState = 1;
  # DEBUG BEGIN_STMT
  SecLevelIndex = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_DelayTimers[SecLevelIndex].AttemptCounter = 0;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_DelayTimers[SecLevelIndex].DelayTimer = 0;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_DelayTimers[SecLevelIndex].InfiniteDelay = 0;
  # DEBUG BEGIN_STMT
  SecLevelIndex = SecLevelIndex + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (SecLevelIndex <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_ReqSecLevelIndex = 2;
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_Reset ();
  return;

}


Dcm_Dsp_SecurityAccess_Reset ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Dcm_Dsp_SecurityAccess_StrictCheckingReqSecLevel = 0;
  return;

}


