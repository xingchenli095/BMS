Can_ProcessBusOffInterrupt (uint8 u8CtrlOffset)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;
  const struct Can_ConfigType * _1;
  const struct Can_ConfigType * _2;
  const uint8 * _3;
  sizetype _4;
  const uint8 * _5;
  const struct Can_ConfigType * _6;
  const struct Can_ControllerConfigType * const * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Can_ControllerConfigType * const * _10;
  unsigned char _11;
  int _12;
  unsigned char _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8ControllerID_15 = 0;
  # DEBUG u8ControllerID => u8ControllerID_15
  # DEBUG BEGIN_STMT
  u32CoreId_16 = 0;
  # DEBUG u32CoreId => u32CoreId_16
  # DEBUG BEGIN_STMT
  Can_pController_17 = 0B;
  # DEBUG Can_pController => Can_pController_17
  # DEBUG BEGIN_STMT
  u32CoreId_18 = 0;
  # DEBUG u32CoreId => u32CoreId_18
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId_18];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId_18];
  _3 = _2->Can_pCtrlOffsetToCtrlIDMap;
  _4 = (sizetype) u8CtrlOffset_20(D);
  _5 = _3 + _4;
  u8ControllerID_21 = *_5;
  # DEBUG u8ControllerID => u8ControllerID_21
  # DEBUG BEGIN_STMT
  _6 = Can_apxConfig[u32CoreId_18];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID_21;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController_22 = *_10;
  # DEBUG Can_pController => Can_pController_22
  # DEBUG BEGIN_STMT
  if (Can_pController_22 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _11 = Can_Ipw_SetControllerToStopMode (Can_pController_22);
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _12 = (int) u8ControllerID_21;
  Can_eControllerState[_12] = 2;
  # DEBUG BEGIN_STMT
  _13 = Can_pController_22->Can_u8AbstControllerID;
  CanIf_ControllerBusOff (_13);

  <bb 6> :
  return;

}


Can_ProcessMesgBufferCommonInterrupt (uint8 u8CtrlOffset, uint8 u8MbIdx, Can_MbType mbType)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;
  const struct Can_ConfigType * _1;
  const struct Can_ConfigType * _2;
  const uint8 * _3;
  sizetype _4;
  const uint8 * _5;
  const struct Can_ConfigType * _6;
  const struct Can_ControllerConfigType * const * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Can_ControllerConfigType * const * _10;
  const struct Can_ConfigType * _11;
  const struct Can_HwObjectConfigType * _12;
  const struct Can_ConfigType * _13;
  const struct Can_HwObjectConfigType * _14;
  const struct Can_ConfigType * _15;
  const struct Can_HwObjectConfigType * _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8ControllerID_18 = 0;
  # DEBUG u8ControllerID => u8ControllerID_18
  # DEBUG BEGIN_STMT
  u32CoreId_19 = 0;
  # DEBUG u32CoreId => u32CoreId_19
  # DEBUG BEGIN_STMT
  Can_pController_20 = 0B;
  # DEBUG Can_pController => Can_pController_20
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  u32CoreId_21 = 0;
  # DEBUG u32CoreId => u32CoreId_21
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId_21];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId_21];
  _3 = _2->Can_pCtrlOffsetToCtrlIDMap;
  _4 = (sizetype) u8CtrlOffset_23(D);
  _5 = _3 + _4;
  u8ControllerID_24 = *_5;
  # DEBUG u8ControllerID => u8ControllerID_24
  # DEBUG BEGIN_STMT
  _6 = Can_apxConfig[u32CoreId_21];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID_24;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController_25 = *_10;
  # DEBUG Can_pController => Can_pController_25
  # DEBUG BEGIN_STMT
  if (Can_pController_25 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  switch (mbType_26(D)) <default: <L9> [INV], case 0: <L3> [INV], case 1: <L4> [INV], case 3: <L2> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _11 = Can_apxConfig[u32CoreId_21];
  _12 = _11->Can_pHwObjectConfig;
  Can_Ipw_ProcessTxMesgBuffer (Can_pController_25, _12, u8MbIdx_27(D));
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _13 = Can_apxConfig[u32CoreId_21];
  _14 = _13->Can_pHwObjectConfig;
  Can_Ipw_ProcessRxMesgBuffer (Can_pController_25, _14, u8MbIdx_27(D));
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _15 = Can_apxConfig[u32CoreId_21];
  _16 = _15->Can_pHwObjectConfig;
  Can_Ipw_ProcessRxMesgBuffer (Can_pController_25, _16, u8MbIdx_27(D));
  # DEBUG BEGIN_STMT

  <bb 8> :
<L9>:
  return;

}


Can_MainFunction_Mode ()
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;
  const struct Can_ConfigType * _1;
  const struct Can_ConfigType * _2;
  const struct Can_ControllerConfigType * const * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Can_ControllerConfigType * const * _6;
  unsigned char _7;
  int _8;
  Can_ControllerStateType * _9;
  unsigned char u8ControllerID.5_10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8ControllerID_15 = 0;
  # DEBUG u8ControllerID => u8ControllerID_15
  # DEBUG BEGIN_STMT
  u32CoreId_16 = 0;
  # DEBUG u32CoreId => u32CoreId_16
  # DEBUG BEGIN_STMT
  Can_pController_17 = 0B;
  # DEBUG Can_pController => Can_pController_17
  # DEBUG BEGIN_STMT
  u32CoreId_18 = 0;
  # DEBUG u32CoreId => u32CoreId_18
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId_18];
  if (_1 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId_18];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) u8ControllerID_11;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController_20 = *_6;
  # DEBUG Can_pController => Can_pController_20
  # DEBUG BEGIN_STMT
  if (Can_pController_20 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = Can_pController_20->Can_bActivation;
  if (_7 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = (int) u8ControllerID_11;
  _9 = &Can_eControllerState[_8];
  Can_Ipw_MainFunction_Mode (Can_pController_20, _9);

  <bb 6> :
  # DEBUG BEGIN_STMT
  u8ControllerID.5_10 = u8ControllerID_11;
  u8ControllerID_22 = u8ControllerID.5_10 + 1;
  # DEBUG u8ControllerID => u8ControllerID_22

  <bb 7> :
  # u8ControllerID_11 = PHI <u8ControllerID_15(2), u8ControllerID_22(6)>
  # DEBUG u8ControllerID => u8ControllerID_11
  # DEBUG BEGIN_STMT
  if (u8ControllerID_11 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Can_MainFunction_BusOff ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Can_MainFunction_Read ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Can_MainFunction_Write ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Can_Write (Can_HwHandleType Hth, const struct Can_PduType * PduInfo)
{
  const struct Can_HwObjectConfigType * Can_pHwObject;
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;
  Std_ReturnType eRetVal;
  unsigned char _1;
  const struct Can_ConfigType * _2;
  const uint8 * _3;
  sizetype _4;
  const uint8 * _5;
  const struct Can_ConfigType * _6;
  const struct Can_ControllerConfigType * const * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Can_ControllerConfigType * const * _10;
  const struct Can_ConfigType * _11;
  const struct Can_HwObjectConfigType * _12;
  unsigned int _13;
  unsigned int _14;
  unsigned char _15;
  int _16;
  <unnamed type> _17;
  Std_ReturnType _37;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal_20 = 1;
  # DEBUG eRetVal => eRetVal_20
  # DEBUG BEGIN_STMT
  u8ControllerID_21 = 0;
  # DEBUG u8ControllerID => u8ControllerID_21
  # DEBUG BEGIN_STMT
  u32CoreId_22 = 0;
  # DEBUG u32CoreId => u32CoreId_22
  # DEBUG BEGIN_STMT
  Can_pController_23 = 0B;
  # DEBUG Can_pController => Can_pController_23
  # DEBUG BEGIN_STMT
  Can_pHwObject_24 = 0B;
  # DEBUG Can_pHwObject => Can_pHwObject_24
  # DEBUG BEGIN_STMT
  u32CoreId_25 = 0;
  # DEBUG u32CoreId => u32CoreId_25
  # DEBUG BEGIN_STMT
  _1 = Can_ValidateHth (u32CoreId_25, Hth_27(D));
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (PduInfo_29(D) == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 6, 1);
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId_25];
  _3 = _2->Can_pHwObjIDToCtrlIDMap;
  _4 = (sizetype) Hth_27(D);
  _5 = _3 + _4;
  u8ControllerID_30 = *_5;
  # DEBUG u8ControllerID => u8ControllerID_30
  # DEBUG BEGIN_STMT
  _6 = Can_apxConfig[u32CoreId_25];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID_30;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController_31 = *_10;
  # DEBUG Can_pController => Can_pController_31
  # DEBUG BEGIN_STMT
  if (Can_pController_31 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _11 = Can_apxConfig[u32CoreId_25];
  _12 = _11->Can_pHwObjectConfig;
  _13 = (unsigned int) Hth_27(D);
  _14 = _13 * 36;
  Can_pHwObject_32 = _12 + _14;
  # DEBUG Can_pHwObject => Can_pHwObject_32
  # DEBUG BEGIN_STMT
  _15 = Can_ValidatePdu (Can_pController_31, Can_pHwObject_32, PduInfo_29(D));
  if (_15 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _16 = (int) u8ControllerID_30;
  _17 = Can_eControllerState[_16];
  if (_17 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  eRetVal_35 = Can_Ipw_Write (Can_pController_31, Can_pHwObject_32, PduInfo_29(D));
  # DEBUG eRetVal => eRetVal_35

  <bb 9> :
  # eRetVal_18 = PHI <eRetVal_20(2), eRetVal_20(4), eRetVal_20(5), eRetVal_20(6), eRetVal_20(7), eRetVal_35(8)>
  # DEBUG eRetVal => eRetVal_18
  # DEBUG BEGIN_STMT
  _37 = eRetVal_18;
  return _37;

}


Can_GetControllerTxErrorCounter (uint8 ControllerId, uint8 * TxErrorCounterPtr)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  <unnamed type> _1;
  const struct Can_ConfigType * _2;
  const struct Can_ControllerConfigType * const * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Can_ControllerConfigType * const * _6;
  unsigned char _7;
  Std_ReturnType _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal_10 = 1;
  # DEBUG eRetVal => eRetVal_10
  # DEBUG BEGIN_STMT
  u32CoreId_11 = 0;
  # DEBUG u32CoreId => u32CoreId_11
  # DEBUG BEGIN_STMT
  Can_pController_12 = 0B;
  # DEBUG Can_pController => Can_pController_12
  # DEBUG BEGIN_STMT
  u32CoreId_13 = 0;
  # DEBUG u32CoreId => u32CoreId_13
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId_13];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 49, 5);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ControllerId_15(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 49, 4);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TxErrorCounterPtr_16(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 49, 1);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId_13];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) ControllerId_15(D);
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController_17 = *_6;
  # DEBUG Can_pController => Can_pController_17
  # DEBUG BEGIN_STMT
  _7 = Can_Ipw_GetControllerTxErrorCounter (Can_pController_17);
  *TxErrorCounterPtr_16(D) = _7;
  # DEBUG BEGIN_STMT
  eRetVal_20 = 0;
  # DEBUG eRetVal => eRetVal_20

  <bb 9> :
  # eRetVal_8 = PHI <eRetVal_10(3), eRetVal_10(5), eRetVal_10(7), eRetVal_20(8)>
  # DEBUG eRetVal => eRetVal_8
  # DEBUG BEGIN_STMT
  _24 = eRetVal_8;
  return _24;

}


Can_GetControllerRxErrorCounter (uint8 ControllerId, uint8 * RxErrorCounterPtr)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  <unnamed type> _1;
  const struct Can_ConfigType * _2;
  const struct Can_ControllerConfigType * const * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Can_ControllerConfigType * const * _6;
  unsigned char _7;
  Std_ReturnType _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal_10 = 1;
  # DEBUG eRetVal => eRetVal_10
  # DEBUG BEGIN_STMT
  u32CoreId_11 = 0;
  # DEBUG u32CoreId => u32CoreId_11
  # DEBUG BEGIN_STMT
  Can_pController_12 = 0B;
  # DEBUG Can_pController => Can_pController_12
  # DEBUG BEGIN_STMT
  u32CoreId_13 = 0;
  # DEBUG u32CoreId => u32CoreId_13
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId_13];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 48, 5);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ControllerId_15(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 48, 4);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (RxErrorCounterPtr_16(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 48, 1);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId_13];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) ControllerId_15(D);
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController_17 = *_6;
  # DEBUG Can_pController => Can_pController_17
  # DEBUG BEGIN_STMT
  _7 = Can_Ipw_GetControllerRxErrorCounter (Can_pController_17);
  *RxErrorCounterPtr_16(D) = _7;
  # DEBUG BEGIN_STMT
  eRetVal_20 = 0;
  # DEBUG eRetVal => eRetVal_20

  <bb 9> :
  # eRetVal_8 = PHI <eRetVal_10(3), eRetVal_10(5), eRetVal_10(7), eRetVal_20(8)>
  # DEBUG eRetVal => eRetVal_8
  # DEBUG BEGIN_STMT
  _24 = eRetVal_8;
  return _24;

}


Can_GetControllerMode (uint8 Controller, Can_ControllerStateType * ControllerModePtr)
{
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  <unnamed type> _1;
  int _2;
  <unnamed type> _3;
  Std_ReturnType _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal_6 = 1;
  # DEBUG eRetVal => eRetVal_6
  # DEBUG BEGIN_STMT
  u32CoreId_7 = 0;
  # DEBUG u32CoreId => u32CoreId_7
  # DEBUG BEGIN_STMT
  u32CoreId_8 = 0;
  # DEBUG u32CoreId => u32CoreId_8
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId_8];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 18, 5);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Controller_10(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 18, 4);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ControllerModePtr_11(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 18, 1);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _2 = (int) Controller_10(D);
  _3 = Can_eControllerState[_2];
  *ControllerModePtr_11(D) = _3;
  # DEBUG BEGIN_STMT
  eRetVal_13 = 0;
  # DEBUG eRetVal => eRetVal_13

  <bb 9> :
  # eRetVal_4 = PHI <eRetVal_6(3), eRetVal_6(5), eRetVal_6(7), eRetVal_13(8)>
  # DEBUG eRetVal => eRetVal_4
  # DEBUG BEGIN_STMT
  _17 = eRetVal_4;
  return _17;

}


Can_GetControllerErrorState (uint8 ControllerId, Can_ErrorStateType * ErrorStatePtr)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  unsigned char _1;
  const struct Can_ConfigType * _2;
  const struct Can_ControllerConfigType * const * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Can_ControllerConfigType * const * _6;
  unsigned char _7;
  int _8;
  Std_ReturnType _27;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal_12 = 1;
  # DEBUG eRetVal => eRetVal_12
  # DEBUG BEGIN_STMT
  u32CoreId_13 = 0;
  # DEBUG u32CoreId => u32CoreId_13
  # DEBUG BEGIN_STMT
  Can_pController_14 = 0B;
  # DEBUG Can_pController => Can_pController_14
  # DEBUG BEGIN_STMT
  u32CoreId_15 = 0;
  # DEBUG u32CoreId => u32CoreId_15
  # DEBUG BEGIN_STMT
  _1 = Can_ValidateController (u32CoreId_15, ControllerId_17(D), 17);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (ErrorStatePtr_19(D) == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 17, 1);
  goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId_15];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) ControllerId_17(D);
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController_20 = *_6;
  # DEBUG Can_pController => Can_pController_20
  # DEBUG BEGIN_STMT
  _7 = Can_Ipw_GetControllerErrorState (Can_pController_20);
  _8 = (int) _7;
  switch (_8) <default: <L5> [INV], case 0: <L3> [INV], case 1: <L4> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  *ErrorStatePtr_19(D) = 0;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  *ErrorStatePtr_19(D) = 1;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  *ErrorStatePtr_19(D) = 2;
  # DEBUG BEGIN_STMT

  <bb 9> :
  # DEBUG BEGIN_STMT
  eRetVal_25 = 0;
  # DEBUG eRetVal => eRetVal_25

  <bb 10> :
  # eRetVal_9 = PHI <eRetVal_12(2), eRetVal_12(4), eRetVal_25(9)>
  # DEBUG eRetVal => eRetVal_9
  # DEBUG BEGIN_STMT
  _27 = eRetVal_9;
  return _27;

}


Can_EnableControllerInterrupts (uint8 Controller)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  <unnamed type> _1;
  const struct Can_ConfigType * _2;
  const struct Can_ControllerConfigType * const * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Can_ControllerConfigType * const * _6;
  int _7;
  unsigned char _8;
  int _9;
  unsigned char _10;
  int _11;
  unsigned char _12;
  int _13;
  unsigned char _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32CoreId_17 = 0;
  # DEBUG u32CoreId => u32CoreId_17
  # DEBUG BEGIN_STMT
  Can_pController_18 = 0B;
  # DEBUG Can_pController => Can_pController_18
  # DEBUG BEGIN_STMT
  u32CoreId_19 = 0;
  # DEBUG u32CoreId => u32CoreId_19
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId_19];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 5, 5);
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Controller_21(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 5, 4);
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId_19];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) Controller_21(D);
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController_22 = *_6;
  # DEBUG Can_pController => Can_pController_22
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_01 ();
  # DEBUG BEGIN_STMT
  _7 = (int) Controller_21(D);
  _8 = Can_au8DisableInterruptLevel[_7];
  if (_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _9 = (int) Controller_21(D);
  _10 = Can_au8DisableInterruptLevel[_9];
  _11 = (int) Controller_21(D);
  _12 = _10 + 255;
  Can_au8DisableInterruptLevel[_11] = _12;

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_01 ();
  # DEBUG BEGIN_STMT
  _13 = (int) Controller_21(D);
  _14 = Can_au8DisableInterruptLevel[_13];
  if (_14 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Can_Ipw_EnableControllerInterrupts (Can_pController_22);

  <bb 10> :
  return;

}


Can_DisableControllerInterrupts (uint8 Controller)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  <unnamed type> _1;
  const struct Can_ConfigType * _2;
  const struct Can_ControllerConfigType * const * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Can_ControllerConfigType * const * _6;
  int _7;
  unsigned char _8;
  int _9;
  unsigned char _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32CoreId_12 = 0;
  # DEBUG u32CoreId => u32CoreId_12
  # DEBUG BEGIN_STMT
  Can_pController_13 = 0B;
  # DEBUG Can_pController => Can_pController_13
  # DEBUG BEGIN_STMT
  u32CoreId_14 = 0;
  # DEBUG u32CoreId => u32CoreId_14
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId_14];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 4, 5);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Controller_16(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 4, 4);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId_14];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) Controller_16(D);
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController_17 = *_6;
  # DEBUG Can_pController => Can_pController_17
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  _7 = (int) Controller_16(D);
  _8 = Can_au8DisableInterruptLevel[_7];
  _9 = (int) Controller_16(D);
  _10 = _8 + 1;
  Can_au8DisableInterruptLevel[_9] = _10;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  Can_Ipw_DisableControllerInterrupts (Can_pController_17);

  <bb 7> :
  return;

}


Can_SetControllerMode (uint8 Controller, Can_ControllerStateType Transition)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  unsigned char _1;
  const struct Can_ConfigType * _2;
  const struct Can_ControllerConfigType * const * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Can_ControllerConfigType * const * _6;
  int _7;
  <unnamed type> _8;
  unsigned char _9;
  int _10;
  unsigned char _11;
  int _12;
  <unnamed type> _13;
  unsigned char _14;
  int _15;
  unsigned char _16;
  int _17;
  unsigned char _18;
  int _19;
  <unnamed type> _20;
  int _21;
  unsigned char _22;
  unsigned int _34;
  Std_ReturnType _52;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal_25 = 1;
  # DEBUG eRetVal => eRetVal_25
  # DEBUG BEGIN_STMT
  u32CoreId_26 = 0;
  # DEBUG u32CoreId => u32CoreId_26
  # DEBUG BEGIN_STMT
  Can_pController_27 = 0B;
  # DEBUG Can_pController => Can_pController_27
  # DEBUG BEGIN_STMT
  u32CoreId_28 = 0;
  # DEBUG u32CoreId => u32CoreId_28
  # DEBUG BEGIN_STMT
  _1 = Can_ValidateController (u32CoreId_28, Controller_30(D), 3);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId_28];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) Controller_30(D);
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController_32 = *_6;
  # DEBUG Can_pController => Can_pController_32
  # DEBUG BEGIN_STMT
  switch (Transition_33(D)) <default: <L20> [INV], case 1: <L1> [INV], case 2: <L7> [INV], case 3: <L15> [INV]>

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _7 = (int) Controller_30(D);
  _8 = Can_eControllerState[_7];
  if (_8 == 2)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = Can_Ipw_SetControllerToStartMode (Can_pController_32);
  if (_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = (int) Controller_30(D);
  Can_eControllerState[_10] = 1;
  # DEBUG BEGIN_STMT
  _11 = Can_pController_32->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_11, 1);
  # DEBUG BEGIN_STMT
  eRetVal_50 = 0;
  # DEBUG eRetVal => eRetVal_50
  goto <bb 16>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 3, 6);
  goto <bb 16>; [INV]

  <bb 8> :
<L7>:
  # DEBUG BEGIN_STMT
  _12 = (int) Controller_30(D);
  _13 = Can_eControllerState[_12];
  switch (_13) <default: <L25> [INV], case 1: <L8> [INV], case 2 ... 3: <L11> [INV]>

  <bb 9> :
<L8>:
  # DEBUG BEGIN_STMT
  _14 = Can_Ipw_SetControllerToStopMode (Can_pController_32);
  if (_14 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _15 = (int) Controller_30(D);
  Can_eControllerState[_15] = 2;
  # DEBUG BEGIN_STMT
  _16 = Can_pController_32->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_16, 2);
  # DEBUG BEGIN_STMT
  eRetVal_45 = 0;
  # DEBUG eRetVal => eRetVal_45
  goto <bb 16>; [INV]

  <bb 11> :
<L11>:
  # DEBUG BEGIN_STMT
  _17 = (int) Controller_30(D);
  Can_eControllerState[_17] = 2;
  # DEBUG BEGIN_STMT
  _18 = Can_pController_32->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_18, 2);
  # DEBUG BEGIN_STMT
  eRetVal_41 = 0;
  # DEBUG eRetVal => eRetVal_41
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 12> :
<L15>:
  # DEBUG BEGIN_STMT
  _19 = (int) Controller_30(D);
  _20 = Can_eControllerState[_19];
  _34 = _20 + 4294967294;
  if (_34 <= 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
<L16>:
  # DEBUG BEGIN_STMT
  _21 = (int) Controller_30(D);
  Can_eControllerState[_21] = 3;
  # DEBUG BEGIN_STMT
  _22 = Can_pController_32->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_22, 3);
  # DEBUG BEGIN_STMT
  eRetVal_37 = 0;
  # DEBUG eRetVal => eRetVal_37
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 14> :
<L18>:
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 3, 6);
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 15> :
<L20>:
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 3, 6);
  # DEBUG BEGIN_STMT

  <bb 16> :
  # eRetVal_23 = PHI <eRetVal_25(2), eRetVal_25(7), eRetVal_41(11), eRetVal_25(14), eRetVal_25(15), eRetVal_50(6), eRetVal_25(5), eRetVal_45(10), eRetVal_25(9), eRetVal_25(8), eRetVal_37(13)>
<L25>:
  # DEBUG eRetVal => eRetVal_23
  # DEBUG BEGIN_STMT
  _52 = eRetVal_23;
  return _52;

}


Can_DeInit ()
{
  uint32 u32CoreId;
  boolean bCtrlBusy;
  uint8 u8ControllerID;
  <unnamed type> _1;
  const struct Can_ConfigType * _2;
  const struct Can_ControllerConfigType * const * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Can_ControllerConfigType * const * _6;
  const struct Can_ControllerConfigType * _7;
  int _8;
  <unnamed type> _9;
  unsigned char u8ControllerID.3_10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8ControllerID_15 = 0;
  # DEBUG u8ControllerID => u8ControllerID_15
  # DEBUG BEGIN_STMT
  bCtrlBusy_16 = 0;
  # DEBUG bCtrlBusy => bCtrlBusy_16
  # DEBUG BEGIN_STMT
  u32CoreId_17 = 0;
  # DEBUG u32CoreId => u32CoreId_17
  # DEBUG BEGIN_STMT
  u32CoreId_18 = 0;
  # DEBUG u32CoreId => u32CoreId_18
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId_18];
  if (_1 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 16, 6);
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  u8ControllerID_20 = 0;
  # DEBUG u8ControllerID => u8ControllerID_20
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = Can_apxConfig[u32CoreId_18];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) u8ControllerID_11;
  _5 = _4 * 4;
  _6 = _3 + _5;
  _7 = *_6;
  if (_7 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = (int) u8ControllerID_11;
  _9 = Can_eControllerState[_8];
  if (_9 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 16, 6);
  # DEBUG BEGIN_STMT
  bCtrlBusy_22 = 1;
  # DEBUG bCtrlBusy => bCtrlBusy_22
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  u8ControllerID.3_10 = u8ControllerID_11;
  u8ControllerID_23 = u8ControllerID.3_10 + 1;
  # DEBUG u8ControllerID => u8ControllerID_23

  <bb 9> :
  # u8ControllerID_11 = PHI <u8ControllerID_20(4), u8ControllerID_23(8)>
  # DEBUG u8ControllerID => u8ControllerID_11
  # DEBUG BEGIN_STMT
  if (u8ControllerID_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # bCtrlBusy_12 = PHI <bCtrlBusy_22(7), bCtrlBusy_16(9)>
  # DEBUG bCtrlBusy => bCtrlBusy_12
  # DEBUG BEGIN_STMT
  if (bCtrlBusy_12 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Can_eDriverStatus[u32CoreId_18] = 0;
  # DEBUG BEGIN_STMT
  Can_DeInitControllers (u32CoreId_18);
  # DEBUG BEGIN_STMT
  Can_apxConfig[u32CoreId_18] = 0B;

  <bb 12> :
  return;

}


Can_Init (const struct Can_ConfigType * Config)
{
  boolean bCtrlBusy;
  uint32 u32CoreId;
  <unnamed type> _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32CoreId_3 = 0;
  # DEBUG u32CoreId => u32CoreId_3
  # DEBUG BEGIN_STMT
  bCtrlBusy_4 = 0;
  # DEBUG bCtrlBusy => bCtrlBusy_4
  # DEBUG BEGIN_STMT
  u32CoreId_5 = 0;
  # DEBUG u32CoreId => u32CoreId_5
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId_5];
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 0, 6);
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Config_7(D) == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 0, 9);
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Can_apxConfig[u32CoreId_5] = Config_7(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  bCtrlBusy_10 = Can_IsControllersBusy (u32CoreId_5);
  # DEBUG bCtrlBusy => bCtrlBusy_10
  # DEBUG BEGIN_STMT
  if (bCtrlBusy_10 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Can_InitControllers (u32CoreId_5);

  <bb 8> :
  return;

}


Can_DeInitControllers (uint32 u32CoreId)
{
  const struct Can_ControllerConfigType * Can_pController;
  uint8 u8ControllerID;
  const struct Can_ConfigType * _1;
  const struct Can_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_ControllerConfigType * const * _5;
  const struct Can_ControllerConfigType * _6;
  const struct Can_ConfigType * _7;
  const struct Can_ControllerConfigType * const * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Can_ControllerConfigType * const * _11;
  unsigned char _12;
  int _13;
  unsigned char u8ControllerID.4_14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u8ControllerID_18 = 0;
  # DEBUG u8ControllerID => u8ControllerID_18
  # DEBUG BEGIN_STMT
  Can_pController_19 = 0B;
  # DEBUG Can_pController => Can_pController_19
  # DEBUG BEGIN_STMT
  u8ControllerID_20 = 0;
  # DEBUG u8ControllerID => u8ControllerID_20
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId_22(D)];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID_15;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = Can_apxConfig[u32CoreId_22(D)];
  _8 = _7->Can_ppController;
  _9 = (unsigned int) u8ControllerID_15;
  _10 = _9 * 4;
  _11 = _8 + _10;
  Can_pController_23 = *_11;
  # DEBUG Can_pController => Can_pController_23
  # DEBUG BEGIN_STMT
  _12 = Can_pController_23->Can_bActivation;
  if (_12 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _13 = (int) u8ControllerID_15;
  Can_eControllerState[_13] = 0;
  # DEBUG BEGIN_STMT
  Can_Ipw_DeInit (Can_pController_23);

  <bb 6> :
  # DEBUG BEGIN_STMT
  u8ControllerID.4_14 = u8ControllerID_15;
  u8ControllerID_26 = u8ControllerID.4_14 + 1;
  # DEBUG u8ControllerID => u8ControllerID_26

  <bb 7> :
  # u8ControllerID_15 = PHI <u8ControllerID_20(2), u8ControllerID_26(6)>
  # DEBUG u8ControllerID => u8ControllerID_15
  # DEBUG BEGIN_STMT
  if (u8ControllerID_15 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Can_ValidatePdu (const struct Can_ControllerConfigType * Can_pController, const struct Can_HwObjectConfigType * Can_pHwObject, const struct Can_PduType * PduInfo)
{
  boolean bInvalidDataLength;
  boolean bResult;
  uint16 u16BaudrateID;
  unsigned char _1;
  int _2;
  const struct Can_BaudrateConfigType * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Can_BaudrateConfigType * _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  long unsigned int _11;
  long unsigned int _12;
  unsigned char _13;
  uint8 * _14;
  unsigned char _15;
  boolean _32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u16BaudrateID_19 = 0;
  # DEBUG u16BaudrateID => u16BaudrateID_19
  # DEBUG BEGIN_STMT
  bResult_20 = 0;
  # DEBUG bResult => bResult_20
  # DEBUG BEGIN_STMT
  bInvalidDataLength_21 = 0;
  # DEBUG bInvalidDataLength => bInvalidDataLength_21
  # DEBUG BEGIN_STMT
  _1 = Can_pController_23(D)->Can_u8ControllerID;
  _2 = (int) _1;
  u16BaudrateID_24 = Can_au16BaudrateIDConfig[_2];
  # DEBUG u16BaudrateID => u16BaudrateID_24
  # DEBUG BEGIN_STMT
  _3 = Can_pController_23(D)->Can_pBaudrateConfig;
  _4 = (unsigned int) u16BaudrateID_24;
  _5 = _4 * 24;
  _6 = _3 + _5;
  _7 = _6->Can_bFDFrame;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _8 = PduInfo_25(D)->length;
  _9 = Can_pHwObject_27(D)->Can_u8PayloadLength;
  if (_8 > _9)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _10 = PduInfo_25(D)->length;
  if (_10 > 8)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _11 = PduInfo_25(D)->id;
  _12 = _11 & 1073741824;
  if (_12 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  bInvalidDataLength_28 = 1;
  # DEBUG bInvalidDataLength => bInvalidDataLength_28
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _13 = PduInfo_25(D)->length;
  if (_13 > 8)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  bInvalidDataLength_26 = 1;
  # DEBUG bInvalidDataLength => bInvalidDataLength_26

  <bb 9> :
  # bInvalidDataLength_17 = PHI <bInvalidDataLength_21(5), bInvalidDataLength_21(7), bInvalidDataLength_26(8), bInvalidDataLength_21(4), bInvalidDataLength_28(6)>
  # DEBUG bInvalidDataLength => bInvalidDataLength_17
  # DEBUG BEGIN_STMT
  if (bInvalidDataLength_17 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 6, 3);
  goto <bb 15>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _14 = PduInfo_25(D)->sdu;
  if (_14 == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _15 = Can_pHwObject_27(D)->Can_bTriggerTransmit;
  if (_15 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 6, 1);
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  bResult_30 = 1;
  # DEBUG bResult => bResult_30

  <bb 15> :
  # bResult_16 = PHI <bResult_20(10), bResult_20(13), bResult_30(14)>
  # DEBUG bResult => bResult_16
  # DEBUG BEGIN_STMT
  _32 = bResult_16;
  return _32;

}


Can_ValidateHth (uint32 u32CoreId, Can_HwHandleType Hth)
{
  boolean bResult;
  <unnamed type> _1;
  const struct Can_ConfigType * _2;
  unsigned char _3;
  boolean _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  bResult_6 = 0;
  # DEBUG bResult => bResult_6
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId_8(D)];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 6, 5);
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Hth_9(D) > 14)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _2 = Can_apxConfig[u32CoreId_8(D)];
  _3 = _2->Can_uHthFirstIndex;
  if (Hth_9(D) < _3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 6, 2);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  bResult_10 = 1;
  # DEBUG bResult => bResult_10

  <bb 8> :
  # bResult_4 = PHI <bResult_6(3), bResult_6(6), bResult_10(7)>
  # DEBUG bResult => bResult_4
  # DEBUG BEGIN_STMT
  _13 = bResult_4;
  return _13;

}


Can_ValidateController (uint32 u32CoreId, uint8 u8ControllerID, uint8 u8Sid)
{
  boolean bResult;
  <unnamed type> _1;
  boolean _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  bResult_4 = 0;
  # DEBUG bResult => bResult_4
  # DEBUG BEGIN_STMT
  _1 = Can_eDriverStatus[u32CoreId_6(D)];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, u8Sid_9(D), 5);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (u8ControllerID_7(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, u8Sid_9(D), 4);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  bResult_8 = 1;
  # DEBUG bResult => bResult_8

  <bb 7> :
  # bResult_2 = PHI <bResult_4(3), bResult_4(5), bResult_8(6)>
  # DEBUG bResult => bResult_2
  # DEBUG BEGIN_STMT
  _12 = bResult_2;
  return _12;

}


Can_InitControllers (uint32 u32CoreId)
{
  const struct Can_ControllerConfigType * Can_pController;
  Std_ReturnType RetVal;
  uint8 u8ControllerID;
  boolean bCtrlBusy;
  const struct Can_ConfigType * _1;
  const struct Can_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_ControllerConfigType * const * _5;
  const struct Can_ControllerConfigType * _6;
  const struct Can_ConfigType * _7;
  const struct Can_ControllerConfigType * const * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Can_ControllerConfigType * const * _11;
  unsigned char _12;
  int _13;
  short unsigned int _14;
  int _15;
  int _16;
  unsigned char u8ControllerID.1_17;
  const struct Can_ConfigType * _18;
  const struct Can_ControllerConfigType * const * _19;
  unsigned int _20;
  unsigned int _21;
  const struct Can_ControllerConfigType * const * _22;
  const struct Can_ControllerConfigType * _23;
  int _24;
  unsigned char u8ControllerID.2_25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  bCtrlBusy_35 = 0;
  # DEBUG bCtrlBusy => bCtrlBusy_35
  # DEBUG BEGIN_STMT
  u8ControllerID_36 = 0;
  # DEBUG u8ControllerID => u8ControllerID_36
  # DEBUG BEGIN_STMT
  RetVal_37 = 1;
  # DEBUG RetVal => RetVal_37
  # DEBUG BEGIN_STMT
  Can_pController_38 = 0B;
  # DEBUG Can_pController => Can_pController_38
  # DEBUG BEGIN_STMT
  u8ControllerID_39 = 0;
  # DEBUG u8ControllerID => u8ControllerID_39
  goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId_41(D)];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID_27;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = Can_apxConfig[u32CoreId_41(D)];
  _8 = _7->Can_ppController;
  _9 = (unsigned int) u8ControllerID_27;
  _10 = _9 * 4;
  _11 = _8 + _10;
  Can_pController_42 = *_11;
  # DEBUG Can_pController => Can_pController_42
  # DEBUG BEGIN_STMT
  _12 = Can_pController_42->Can_bActivation;
  if (_12 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _13 = (int) u8ControllerID_27;
  _14 = Can_pController_42->Can_u16DefaultBaudrateID;
  Can_au16BaudrateIDConfig[_13] = _14;
  # DEBUG BEGIN_STMT
  _15 = (int) u8ControllerID_27;
  Can_au8DisableInterruptLevel[_15] = 0;
  # DEBUG BEGIN_STMT
  RetVal_46 = Can_Ipw_Init (Can_pController_42);
  # DEBUG RetVal => RetVal_46
  # DEBUG BEGIN_STMT
  if (RetVal_46 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _16 = (int) u8ControllerID_27;
  Can_eControllerState[_16] = 2;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 0, 9);
  # DEBUG BEGIN_STMT
  bCtrlBusy_48 = 1;
  # DEBUG bCtrlBusy => bCtrlBusy_48
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  u8ControllerID.1_17 = u8ControllerID_27;
  u8ControllerID_50 = u8ControllerID.1_17 + 1;
  # DEBUG u8ControllerID => u8ControllerID_50

  <bb 9> :
  # u8ControllerID_27 = PHI <u8ControllerID_39(2), u8ControllerID_50(8)>
  # DEBUG u8ControllerID => u8ControllerID_27
  # DEBUG BEGIN_STMT
  if (u8ControllerID_27 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # bCtrlBusy_26 = PHI <bCtrlBusy_48(7), bCtrlBusy_35(9)>
  # DEBUG bCtrlBusy => bCtrlBusy_26
  # DEBUG BEGIN_STMT
  if (bCtrlBusy_26 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  u8ControllerID_52 = 0;
  # DEBUG u8ControllerID => u8ControllerID_52
  goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _18 = Can_apxConfig[u32CoreId_41(D)];
  _19 = _18->Can_ppController;
  _20 = (unsigned int) u8ControllerID_28;
  _21 = _20 * 4;
  _22 = _19 + _21;
  _23 = *_22;
  if (_23 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _24 = (int) u8ControllerID_28;
  Can_eControllerState[_24] = 0;

  <bb 14> :
  # DEBUG BEGIN_STMT
  u8ControllerID.2_25 = u8ControllerID_28;
  u8ControllerID_54 = u8ControllerID.2_25 + 1;
  # DEBUG u8ControllerID => u8ControllerID_54

  <bb 15> :
  # u8ControllerID_28 = PHI <u8ControllerID_52(11), u8ControllerID_54(14)>
  # DEBUG u8ControllerID => u8ControllerID_28
  # DEBUG BEGIN_STMT
  if (u8ControllerID_28 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Can_eDriverStatus[u32CoreId_41(D)] = 1;

  <bb 17> :
  return;

}


Can_IsControllersBusy (uint32 u32CoreId)
{
  uint8 u8ControllerID;
  boolean bCtrlBusy;
  const struct Can_ConfigType * _1;
  const struct Can_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_ControllerConfigType * const * _5;
  const struct Can_ControllerConfigType * _6;
  int _7;
  <unnamed type> _8;
  unsigned char u8ControllerID.0_9;
  boolean _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  bCtrlBusy_13 = 0;
  # DEBUG bCtrlBusy => bCtrlBusy_13
  # DEBUG BEGIN_STMT
  u8ControllerID_14 = 0;
  # DEBUG u8ControllerID => u8ControllerID_14
  # DEBUG BEGIN_STMT
  u8ControllerID_15 = 0;
  # DEBUG u8ControllerID => u8ControllerID_15
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Can_apxConfig[u32CoreId_17(D)];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID_11;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = (int) u8ControllerID_11;
  _8 = Can_eControllerState[_7];
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (80, 0, 0, 6);
  # DEBUG BEGIN_STMT
  bCtrlBusy_19 = 1;
  # DEBUG bCtrlBusy => bCtrlBusy_19
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  u8ControllerID.0_9 = u8ControllerID_11;
  u8ControllerID_20 = u8ControllerID.0_9 + 1;
  # DEBUG u8ControllerID => u8ControllerID_20

  <bb 7> :
  # u8ControllerID_11 = PHI <u8ControllerID_15(2), u8ControllerID_20(6)>
  # DEBUG u8ControllerID => u8ControllerID_11
  # DEBUG BEGIN_STMT
  if (u8ControllerID_11 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # bCtrlBusy_10 = PHI <bCtrlBusy_19(5), bCtrlBusy_13(7)>
  # DEBUG bCtrlBusy => bCtrlBusy_10
  # DEBUG BEGIN_STMT
  _21 = bCtrlBusy_10;
  return _21;

}


