__attribute__((target ("general-regs-only")))
OS_StartIsrExecTiming (os_tick_t budget)
{
  os_tick_t OS_hwtStartDelta;
  struct os_kerneldata_t * const kernel_data;
  const struct os_hwt_t * _1;
  const struct os_hwtdrv_t * _2;
  os_timervalue_t (*<T526>) (const struct os_hwt_t *) _3;
  const struct os_hwt_t * _4;
  unsigned int _5;
  const struct os_hwt_t * _6;
  unsigned int _7;
  const struct os_hwt_t * _8;
  const struct os_hwt_t * _9;
  const struct os_hwtdrv_t * _10;
  os_boolean_t (*<T52b>) (const struct os_hwt_t *, os_timervalue_t, os_tick_t) _11;
  const struct os_hwt_t * _12;
  unsigned int _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data_16 = &OS_kernelData;
  # DEBUG kernel_data => kernel_data_16
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etUsed = 0;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etLimit = budget_19(D);
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.inFunction = 3;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etType = 1;
  # DEBUG BEGIN_STMT
  _1 = OS_executionTimer[0];
  _2 = _1->driver;
  _3 = _2->hwtRead;
  _4 = OS_executionTimer[0];
  _5 = _3 (_4);
  OS_kernelData.accounting.frc = _5;
  # DEBUG BEGIN_STMT
  if (budget_19(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_hwtStartDelta_25 = budget_19(D);
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_25
  # DEBUG BEGIN_STMT
  _6 = OS_executionTimer[0];
  _7 = _6->maxDelta;
  if (OS_hwtStartDelta_25 > _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = OS_executionTimer[0];
  OS_hwtStartDelta_26 = _8->defDelta;
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_26

  <bb 5> :
  # OS_hwtStartDelta_14 = PHI <OS_hwtStartDelta_25(3), OS_hwtStartDelta_26(4)>
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_14
  # DEBUG BEGIN_STMT
  _9 = OS_executionTimer[0];
  _10 = _9->driver;
  _11 = _10->hwtStart;
  _12 = OS_executionTimer[0];
  _13 = OS_kernelData.accounting.frc;
  _11 (_12, _13, OS_hwtStartDelta_14);

  <bb 6> :
  # DEBUG BEGIN_STMT
  return;

}


