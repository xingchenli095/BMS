Histogram:
Atomics_ClearFlag (volatile Atomic_t * object, Atomic_value_t flagSelectionMask)
{
  const Atomic_value_t flags;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  flags_6 ={v} *object_5(D);
  # DEBUG flags => flags_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ~flagSelectionMask_7(D);
  _2 = _1 & flags_6;
  *object_5(D) ={v} _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#11 => {CLOBBER}
  # DEBUG success => D#11
  return;

}


Atomics_TestAndSetFlag (volatile Atomic_t * object, Atomic_value_t flagSelectionMask)
{
  Atomic_value_t ret;
  long unsigned int _1;
  long unsigned int _2;
  _Bool _3;
  boolean _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ret => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_7 ={v} *object_6(D);
  # DEBUG ret => ret_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ret_7 | flagSelectionMask_8(D);
  *object_6(D) ={v} _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG ret => ret_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ret_7 & flagSelectionMask_8(D);
  _3 = _2 != 0;
  _11 = (boolean) _3;
  # DEBUG D#10 => {CLOBBER}
  # DEBUG success => D#10
  return _11;

}


Atomics_FetchXor (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  long unsigned int _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ret => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_5 ={v} *object_4(D);
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ret_5 ^ operand_6(D);
  *object_4(D) ={v} _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#9 => {CLOBBER}
  # DEBUG success => D#9
  return ret_5;

}


Atomics_FetchAnd (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  long unsigned int _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ret => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_5 ={v} *object_4(D);
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ret_5 & operand_6(D);
  *object_4(D) ={v} _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#8 => {CLOBBER}
  # DEBUG success => D#8
  return ret_5;

}


Atomics_FetchOr (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  long unsigned int _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ret => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_5 ={v} *object_4(D);
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ret_5 | operand_6(D);
  *object_4(D) ={v} _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#7 => {CLOBBER}
  # DEBUG success => D#7
  return ret_5;

}


Atomics_FetchSub (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  long unsigned int _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ret => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_5 ={v} *object_4(D);
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ret_5 - operand_6(D);
  *object_4(D) ={v} _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#6 => {CLOBBER}
  # DEBUG success => D#6
  return ret_5;

}


Atomics_FetchAdd (volatile Atomic_t * object, Atomic_value_t operand)
{
  Atomic_value_t ret;
  long unsigned int _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ret => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_5 ={v} *object_4(D);
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ret_5 + operand_6(D);
  *object_4(D) ={v} _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#5 => {CLOBBER}
  # DEBUG success => D#5
  return ret_5;

}


Atomics_CompareExchange (volatile Atomic_t * object, Atomic_t * expected, Atomic_value_t newValue)
{
  const Atomic_value_t tmp;
  boolean ret;
  long unsigned int _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ret => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  tmp_7 ={v} *object_6(D);
  # DEBUG tmp => tmp_7
  # DEBUG BEGIN_STMT
  _1 = *expected_8(D);
  if (_1 == tmp_7)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072220]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object_6(D) ={v} newValue_10(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ret => 1
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 708669605]:
  # DEBUG BEGIN_STMT
  *expected_8(D) = tmp_7;

  <bb 5> [local count: 1073741824]:
  # ret_2 = PHI <1(3), 0(4)>
  # DEBUG ret => ret_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG ret => ret_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#4 => {CLOBBER}
  # DEBUG success => D#4
  return ret_2;

}


Atomics_Exchange (volatile Atomic_t * object, Atomic_value_t newValue)
{
  Atomic_value_t ret;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ret => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_4 ={v} *object_3(D);
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object_3(D) ={v} newValue_5(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#3 => {CLOBBER}
  # DEBUG success => D#3
  return ret_4;

}


Atomics_Load (const Atomic_t * object)
{
  Atomic_value_t ret;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ret => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_4 ={v} *object_3(D);
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#2 => {CLOBBER}
  # DEBUG success => D#2
  return ret_4;

}


Atomics_Store (volatile Atomic_t * object, Atomic_value_t newValue)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserSuspendInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object_3(D) ={v} newValue_4(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_UserResumeInterrupts (1);
  # DEBUG BEGIN_STMT
  # DEBUG success => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#1 => {CLOBBER}
  # DEBUG success => D#1
  return;

}


Atomics_Init (volatile Atomic_t * object, Atomic_value_t initValue)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *object_2(D) ={v} initValue_3(D);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Atomics_ThreadFence ()
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


