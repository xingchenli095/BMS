__attribute__((target ("general-regs-only")))
OS_StopResLockTiming (struct os_resourcedynamic_t * rd)
{
  os_tick_t OS_hwtStartDelta;
  const struct os_isr_t * isr;
  const struct os_task_t * const taskCurrent;
  os_tick_t used;
  struct os_kerneldata_t * const kernel_data;
  const struct os_hwt_t * _1;
  const struct os_hwtdrv_t * _2;
  void (*<T521>) (const struct os_hwt_t *) _3;
  const struct os_hwt_t * _4;
  unsigned int _5;
  unsigned int _6;
  unsigned int _7;
  unsigned int _8;
  unsigned int _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  unsigned int _13;
  unsigned int _14;
  struct os_taskaccounting_t * _15;
  unsigned int _16;
  unsigned int _17;
  struct os_taskaccounting_t * _18;
  unsigned int _19;
  unsigned char _20;
  const struct os_isr_t * OS_isrTableBase.0_21;
  short unsigned int _22;
  unsigned int _23;
  unsigned int _24;
  unsigned char _25;
  unsigned int _26;
  unsigned int _27;
  struct os_israccounting_t * _28;
  unsigned int _29;
  unsigned int _30;
  struct os_israccounting_t * _31;
  unsigned int _32;
  unsigned int _33;
  unsigned int _34;
  unsigned int _35;
  unsigned int _36;
  unsigned int _37;
  const struct os_hwt_t * _38;
  unsigned int _39;
  const struct os_hwt_t * _40;
  const struct os_hwt_t * _41;
  const struct os_hwtdrv_t * _42;
  os_boolean_t (*<T52b>) (const struct os_hwt_t *, os_timervalue_t, os_tick_t) _43;
  const struct os_hwt_t * _44;
  unsigned int _45;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data_49 = &OS_kernelData;
  # DEBUG kernel_data => kernel_data_49
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = OS_executionTimer[0];
  _2 = _1->driver;
  _3 = _2->hwtStop;
  _4 = OS_executionTimer[0];
  _3 (_4);
  # DEBUG BEGIN_STMT
  used_53 = OS_GetTimeUsed ();
  # DEBUG used => used_53
  # DEBUG BEGIN_STMT
  _5 = OS_kernelData.accounting.etUsed;
  _6 = rd_54(D)->etUsed;
  _7 = used_53 + _6;
  _8 = _5 + _7;
  OS_kernelData.accounting.etUsed = _8;
  # DEBUG BEGIN_STMT
  _9 = rd_54(D)->etLimit;
  OS_kernelData.accounting.etLimit = _9;
  # DEBUG BEGIN_STMT
  _10 = rd_54(D)->etType;
  OS_kernelData.accounting.etType = _10;
  # DEBUG BEGIN_STMT
  _11 = OS_kernelData.accounting.inFunction;
  if (_11 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  taskCurrent_60 = OS_kernelData.taskCurrent;
  # DEBUG taskCurrent => taskCurrent_60
  # DEBUG BEGIN_STMT
  _12 = taskCurrent_60->flags;
  _13 = (unsigned int) _12;
  _14 = _13 & 64;
  if (_14 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  _15 = taskCurrent_60->accounting;
  _16 = _15->etMax;
  _17 = OS_kernelData.accounting.etUsed;
  if (_16 < _17)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _18 = taskCurrent_60->accounting;
  _19 = OS_kernelData.accounting.etUsed;
  _18->etMax = _19;
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _20 = OS_kernelData.accounting.inFunction;
  if (_20 == 3)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  OS_isrTableBase.0_21 = OS_isrTableBase;
  _22 = OS_kernelData.isrCurrent;
  _23 = (unsigned int) _22;
  _24 = _23 * 68;
  isr_58 = OS_isrTableBase.0_21 + _24;
  # DEBUG isr => isr_58
  # DEBUG BEGIN_STMT
  _25 = isr_58->flags;
  _26 = (unsigned int) _25;
  _27 = _26 & 64;
  if (_27 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _28 = isr_58->accounting;
  _29 = _28->etMax;
  _30 = OS_kernelData.accounting.etUsed;
  if (_29 < _30)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _31 = isr_58->accounting;
  _32 = OS_kernelData.accounting.etUsed;
  _31->etMax = _32;

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _33 = OS_kernelData.accounting.etLimit;
  if (_33 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _34 = OS_kernelData.accounting.etUsed;
  _35 = OS_kernelData.accounting.etLimit;
  if (_34 >= _35)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  OS_ExceedExecTime ();
  goto <bb 16>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _36 = OS_kernelData.accounting.etLimit;
  _37 = OS_kernelData.accounting.etUsed;
  OS_hwtStartDelta_62 = _36 - _37;
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_62
  # DEBUG BEGIN_STMT
  _38 = OS_executionTimer[0];
  _39 = _38->maxDelta;
  if (OS_hwtStartDelta_62 > _39)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _40 = OS_executionTimer[0];
  OS_hwtStartDelta_63 = _40->defDelta;
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_63

  <bb 15> :
  # OS_hwtStartDelta_46 = PHI <OS_hwtStartDelta_62(13), OS_hwtStartDelta_63(14)>
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_46
  # DEBUG BEGIN_STMT
  _41 = OS_executionTimer[0];
  _42 = _41->driver;
  _43 = _42->hwtStart;
  _44 = OS_executionTimer[0];
  _45 = OS_kernelData.accounting.frc;
  _43 (_44, _45, OS_hwtStartDelta_46);

  <bb 16> :
  # DEBUG BEGIN_STMT
  return;

}


