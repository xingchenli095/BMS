
Marking local functions:


Marking externally visible functions: OS_StopTaskExecTiming


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OS_GetTimeUsed/3 (OS_GetTimeUsed) @06c68c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: OS_StopTaskExecTiming/0 
  Calls: 
OS_executionTimer/2 (OS_executionTimer) @06c487e0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_StopTaskExecTiming/0 (read)OS_StopTaskExecTiming/0 (read)
  Availability: not_available
  Varpool flags: read-only
OS_kernelData/1 (OS_kernelData) @06c48798
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: OS_StopTaskExecTiming/0 (addr)OS_StopTaskExecTiming/0 (read)OS_StopTaskExecTiming/0 (write)OS_StopTaskExecTiming/0 (read)OS_StopTaskExecTiming/0 (read)OS_StopTaskExecTiming/0 (write)
  Availability: not_available
  Varpool flags:
OS_StopTaskExecTiming/0 (OS_StopTaskExecTiming) @06c68a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: OS_kernelData/1 (addr)OS_executionTimer/2 (read)OS_executionTimer/2 (read)OS_kernelData/1 (read)OS_kernelData/1 (write)OS_kernelData/1 (read)OS_kernelData/1 (read)OS_kernelData/1 (write)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OS_GetTimeUsed/3 
   Indirect call
__attribute__((target ("general-regs-only")))
OS_StopTaskExecTiming (const struct os_task_t * tp)
{
  os_tick_t used;
  struct os_taskaccounting_t * acc;
  struct os_kerneldata_t * const kernel_data;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  acc = tp->accounting;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (acc != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = OS_executionTimer[0];
  _2 = _1->driver;
  _3 = _2->hwtStop;
  _4 = OS_executionTimer[0];
  _3 (_4);
  # DEBUG BEGIN_STMT
  used = OS_GetTimeUsed ();
  # DEBUG BEGIN_STMT
  _5 = OS_kernelData.accounting.etUsed;
  _6 = used + _5;
  OS_kernelData.accounting.etUsed = _6;
  # DEBUG BEGIN_STMT
  _7 = OS_kernelData.accounting.etUsed;
  _8 = acc->etMax;
  if (_7 > _8)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _9 = OS_kernelData.accounting.etUsed;
  acc->etMax = _9;

  <bb 5> :
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.inFunction = 255;

  <bb 6> :
  return;

}


