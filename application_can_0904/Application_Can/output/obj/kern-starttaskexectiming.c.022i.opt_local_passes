__attribute__((target ("general-regs-only")))
OS_StartTaskExecTiming (const struct os_task_t * tp)
{
  os_tick_t OS_hwtStartDelta;
  os_tick_t remaining;
  struct os_taskaccounting_t * acc;
  struct os_kerneldata_t * const kernel_data;
  const struct os_hwt_t * _1;
  const struct os_hwtdrv_t * _2;
  os_timervalue_t (*<T526>) (const struct os_hwt_t *) _3;
  const struct os_hwt_t * _4;
  unsigned int _5;
  unsigned char _6;
  unsigned int _7;
  unsigned int _8;
  unsigned int _9;
  unsigned int _10;
  unsigned int _11;
  unsigned int _12;
  unsigned int _13;
  const struct os_hwt_t * _14;
  unsigned int _15;
  const struct os_hwt_t * _16;
  const struct os_hwt_t * _17;
  const struct os_hwtdrv_t * _18;
  os_boolean_t (*<T52b>) (const struct os_hwt_t *, os_timervalue_t, os_tick_t) _19;
  const struct os_hwt_t * _20;
  unsigned int _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data_25 = &OS_kernelData;
  # DEBUG kernel_data => kernel_data_25
  # DEBUG BEGIN_STMT
  acc_28 = tp_27(D)->accounting;
  # DEBUG acc => acc_28
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (acc_28 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = OS_executionTimer[0];
  _2 = _1->driver;
  _3 = _2->hwtRead;
  _4 = OS_executionTimer[0];
  _5 = _3 (_4);
  OS_kernelData.accounting.frc = _5;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.inFunction = 1;
  # DEBUG BEGIN_STMT
  _6 = acc_28->etType;
  OS_kernelData.accounting.etType = _6;
  # DEBUG BEGIN_STMT
  _7 = acc_28->etUsed;
  OS_kernelData.accounting.etUsed = _7;
  # DEBUG BEGIN_STMT
  _8 = tp_27(D)->execBudget;
  OS_kernelData.accounting.etLimit = _8;
  # DEBUG BEGIN_STMT
  _9 = OS_kernelData.accounting.etLimit;
  if (_9 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _10 = OS_kernelData.accounting.etUsed;
  _11 = OS_kernelData.accounting.etLimit;
  if (_10 >= _11)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  remaining_36 = 1;
  # DEBUG remaining => remaining_36
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _12 = OS_kernelData.accounting.etLimit;
  _13 = OS_kernelData.accounting.etUsed;
  remaining_35 = _12 - _13;
  # DEBUG remaining => remaining_35

  <bb 7> :
  # remaining_22 = PHI <remaining_36(5), remaining_35(6)>
  # DEBUG remaining => remaining_22
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_hwtStartDelta_37 = remaining_22;
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_37
  # DEBUG BEGIN_STMT
  _14 = OS_executionTimer[0];
  _15 = _14->maxDelta;
  if (OS_hwtStartDelta_37 > _15)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _16 = OS_executionTimer[0];
  OS_hwtStartDelta_38 = _16->defDelta;
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_38

  <bb 9> :
  # OS_hwtStartDelta_23 = PHI <OS_hwtStartDelta_37(7), OS_hwtStartDelta_38(8)>
  # DEBUG OS_hwtStartDelta => OS_hwtStartDelta_23
  # DEBUG BEGIN_STMT
  _17 = OS_executionTimer[0];
  _18 = _17->driver;
  _19 = _18->hwtStart;
  _20 = OS_executionTimer[0];
  _21 = OS_kernelData.accounting.frc;
  _19 (_20, _21, OS_hwtStartDelta_23);

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


