__attribute__((target ("general-regs-only")))
OS_KernAllowAccess ()
{
  os_intstatus_t is;
  struct os_appdynamic_t * appd;
  const struct os_appcontext_t * app;
  os_result_t r;
  struct os_kerneldata_t * const kernel_data;
  unsigned char OS_iecMode.0_1;
  unsigned char _2;
  const struct os_task_t * _3;
  struct os_taskdynamic_t * _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  unsigned char _9;
  const struct os_task_t * _10;
  const struct os_task_t * _11;
  unsigned char _12;
  short unsigned int _13;
  short unsigned int OS_nInterrupts.1_14;
  const struct os_isr_t * OS_isrTableBase.2_15;
  short unsigned int _16;
  unsigned int _17;
  unsigned int _18;
  const struct os_isr_t * _19;
  short unsigned int OS_kernDisableLevel.3_20;
  unsigned char _21;
  os_result_t _44;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data_27 = &OS_kernelData;
  # DEBUG kernel_data => kernel_data_27
  # DEBUG BEGIN_STMT
  r_28 = 0;
  # DEBUG r => r_28
  # DEBUG BEGIN_STMT
  app_29 = 0B;
  # DEBUG app => app_29
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_iecMode.0_1 = OS_iecMode;
  if (OS_iecMode.0_1 > 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _2 = OS_kernelData.inFunction;
  if (_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = OS_kernelData.taskCurrent;
  _4 = _3->dynamic;
  _5 = BIT_FIELD_REF <MEM[(void *)_4], 16, 160>;
  _6 = _5;
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = BIT_FIELD_REF <MEM[(void *)&OS_kernelData], 16, 320>;
  _8 = _7;
  if (_8 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  r_32 = OS_Error (&OS_svc_AllowAccess, 55, 0B);
  # DEBUG r => r_32
  goto <bb 19>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _9 = OS_kernelData.inFunction;
  if (_9 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _10 = OS_kernelData.taskCurrent;
  if (_10 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _11 = OS_kernelData.taskCurrent;
  app_34 = _11->app;
  # DEBUG app => app_34
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _12 = OS_kernelData.inFunction;
  if (_12 == 3)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _13 = OS_kernelData.isrCurrent;
  OS_nInterrupts.1_14 = OS_nInterrupts;
  if (_13 < OS_nInterrupts.1_14)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  OS_isrTableBase.2_15 = OS_isrTableBase;
  _16 = OS_kernelData.isrCurrent;
  _17 = (unsigned int) _16;
  _18 = _17 * 68;
  _19 = OS_isrTableBase.2_15 + _18;
  app_33 = _19->app;
  # DEBUG app => app_33

  <bb 13> :
  # app_24 = PHI <app_34(9), app_29(10), app_33(12), app_29(8), app_29(11)>
  # DEBUG app => app_24
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (app_24 == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  r_43 = OS_Error (&OS_svc_AllowAccess, 12, 0B);
  # DEBUG r => r_43
  goto <bb 19>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  appd_35 = app_24->dynamic;
  # DEBUG appd => appd_35
  # DEBUG BEGIN_STMT
  OS_kernDisableLevel.3_20 = OS_kernDisableLevel;
  is_37 = OS_CORTEXM_IntSetDisablingLevel (OS_kernDisableLevel.3_20);
  # DEBUG is => is_37
  # DEBUG BEGIN_STMT
  _21 = appd_35->appstate;
  if (_21 == 1)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  appd_35->appstate = 2;
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  r_39 = OS_Error (&OS_svc_AllowAccess, 155, 0B);
  # DEBUG r => r_39

  <bb 18> :
  # r_22 = PHI <r_28(16), r_39(17)>
  # DEBUG r => r_22
  # DEBUG BEGIN_STMT
  OS_CORTEXM_IntSetDisablingLevel (is_37);

  <bb 19> :
  # r_23 = PHI <r_32(6), r_43(14), r_22(18)>
  # DEBUG r => r_23
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _44 = r_23;
  return _44;

}


