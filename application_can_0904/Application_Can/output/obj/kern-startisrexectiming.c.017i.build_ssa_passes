__attribute__((target ("general-regs-only")))
OS_StartIsrExecTiming (os_tick_t budget)
{
  os_tick_t OS_hwtStartDelta;
  struct os_kerneldata_t * const kernel_data;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data = &OS_kernelData;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etUsed = 0;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etLimit = budget;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.inFunction = 3;
  # DEBUG BEGIN_STMT
  OS_kernelData.accounting.etType = 1;
  # DEBUG BEGIN_STMT
  _1 = OS_executionTimer[0];
  _2 = _1->driver;
  _3 = _2->hwtRead;
  _4 = OS_executionTimer[0];
  _5 = _3 (_4);
  OS_kernelData.accounting.frc = _5;
  # DEBUG BEGIN_STMT
  if (budget != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  OS_hwtStartDelta = budget;
  # DEBUG BEGIN_STMT
  _6 = OS_executionTimer[0];
  _7 = _6->maxDelta;
  if (OS_hwtStartDelta > _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = OS_executionTimer[0];
  OS_hwtStartDelta = _8->defDelta;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = OS_executionTimer[0];
  _10 = _9->driver;
  _11 = _10->hwtStart;
  _12 = OS_executionTimer[0];
  _13 = OS_kernelData.accounting.frc;
  _11 (_12, _13, OS_hwtStartDelta);

  <bb 6> :
  # DEBUG BEGIN_STMT
  return;

}


