__attribute__((target ("general-regs-only")))
OS_GetCurrentStackArea (void * * begin, void * * end)
{
  const struct os_isr_t * isr;
  os_address_t rEnd;
  os_address_t rBegin;
  struct os_kerneldata_t * const kernel_data;
  unsigned char _1;
  const struct os_task_t * _2;
  const struct os_task_t * _3;
  os_stackelement_t * _4;
  const struct os_task_t * _5;
  unsigned int _6;
  unsigned char _7;
  short unsigned int _8;
  short unsigned int OS_nInterrupts.0_9;
  const struct os_isr_t * OS_isrTableBase.1_10;
  short unsigned int _11;
  unsigned int _12;
  unsigned int _13;
  os_stackelement_t * _14;
  unsigned int _15;
  unsigned int _16;
  void * rBegin.2_17;
  void * rEnd.3_18;

  <bb 2> :
  # DEBUG BEGIN_STMT
  kernel_data_23 = &OS_kernelData;
  # DEBUG kernel_data => kernel_data_23
  # DEBUG BEGIN_STMT
  rBegin_24 = 0;
  # DEBUG rBegin => rBegin_24
  # DEBUG BEGIN_STMT
  rEnd_25 = 0;
  # DEBUG rEnd => rEnd_25
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = OS_kernelData.inFunction;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = OS_kernelData.taskCurrent;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = OS_kernelData.taskCurrent;
  _4 = _3->stackBase;
  rBegin_32 = (os_address_t) _4;
  # DEBUG rBegin => rBegin_32
  # DEBUG BEGIN_STMT
  _5 = OS_kernelData.taskCurrent;
  _6 = _5->stackLen;
  rEnd_33 = rBegin_32 + _6;
  # DEBUG rEnd => rEnd_33
  goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = OS_kernelData.inFunction;
  if (_7 == 3)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = OS_kernelData.isrCurrent;
  OS_nInterrupts.0_9 = OS_nInterrupts;
  if (_8 < OS_nInterrupts.0_9)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  OS_isrTableBase.1_10 = OS_isrTableBase;
  _11 = OS_kernelData.isrCurrent;
  _12 = (unsigned int) _11;
  _13 = _12 * 68;
  isr_27 = OS_isrTableBase.1_10 + _13;
  # DEBUG isr => isr_27
  # DEBUG BEGIN_STMT
  rBegin_28 = 0;
  # DEBUG rBegin => rBegin_28
  # DEBUG BEGIN_STMT
  if (rBegin_28 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _14 = OS_kernelData.iStackBase;
  rBegin_30 = (os_address_t) _14;
  # DEBUG rBegin => rBegin_30
  # DEBUG BEGIN_STMT
  _15 = OS_kernelData.iStackLen;
  rEnd_31 = rBegin_30 + _15;
  # DEBUG rEnd => rEnd_31
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _16 = isr_27->stackLen;
  rEnd_29 = rBegin_28 + _16;
  # DEBUG rEnd => rEnd_29

  <bb 10> :
  # rBegin_19 = PHI <rBegin_32(4), rBegin_24(5), rBegin_30(8), rBegin_24(3), rBegin_24(6), rBegin_28(9)>
  # rEnd_20 = PHI <rEnd_33(4), rEnd_25(5), rEnd_31(8), rEnd_25(3), rEnd_25(6), rEnd_29(9)>
  # DEBUG rEnd => rEnd_20
  # DEBUG rBegin => rBegin_19
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (begin_34(D) != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  rBegin.2_17 = (void *) rBegin_19;
  *begin_34(D) = rBegin.2_17;

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (end_36(D) != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  rEnd.3_18 = (void *) rEnd_20;
  *end_36(D) = rEnd.3_18;

  <bb 14> :
  return;

}


