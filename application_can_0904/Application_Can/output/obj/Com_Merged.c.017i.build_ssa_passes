Com_StartOfReception (PduIdType ComRxPduId, PduLengthType TpSduLength, PduLengthType * RxBufferSizePtr)
{
  BufReq_ReturnType RetVal;
  BufReq_ReturnType D.12226;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12226 = RetVal;
  return D.12226;

}


Com_CopyRxData (PduIdType PduId, const struct PduInfoType * PduInfoPointer, PduLengthType * RxBufferSizePtr)
{
  BufReq_ReturnType RetVal;
  BufReq_ReturnType D.12224;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12224 = RetVal;
  return D.12224;

}


Com_CopyTxData (PduIdType PduId, struct PduInfoType * PduInfoPtr, struct RetryInfoType * RetryInfoPtr, PduLengthType * TxDataCntPtr)
{
  BufReq_ReturnType RetVal;
  BufReq_ReturnType D.12222;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12222 = RetVal;
  return D.12222;

}


Com_GetStatus ()
{
  Com_StatusType statusRetVal;
  Com_StatusType D.12219;

  <bb 2> :
  # DEBUG BEGIN_STMT
  statusRetVal = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.911_1 = Com_InitStatus;
  _2 = (int) Com_InitStatus.911_1;
  switch (_2) <default: <L5> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  statusRetVal = 0;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  statusRetVal = 1;
  # DEBUG BEGIN_STMT

  <bb 5> :
<L5>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12219 = statusRetVal;
  return D.12219;

}


Com_DeInit ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_GetVersionInfo (struct Std_VersionInfoType * versionInfoPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (versionInfoPtr == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 9, 3);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  versionInfoPtr->vendorID = 1;
  # DEBUG BEGIN_STMT
  versionInfoPtr->moduleID = 50;
  # DEBUG BEGIN_STMT
  versionInfoPtr->sw_major_version = 6;
  # DEBUG BEGIN_STMT
  versionInfoPtr->sw_minor_version = 3;
  # DEBUG BEGIN_STMT
  versionInfoPtr->sw_patch_version = 53;

  <bb 5> :
  return;

}


Com_UpdateShadowSignal (Com_SignalIdType SignalId, const void * SignalDataPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_SendSignal (SignalId, SignalDataPtr);
  # DEBUG BEGIN_STMT
  return;

}


Com_TpTxConfirmation (PduIdType PduId, NotifResultType Result)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_TxConfirmation (PduIdType ComTxPduId)
{
  const struct ComTxIPduType * IPduPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.888_1 = Com_InitStatus;
  if (Com_InitStatus.888_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 64, 2);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.889_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.889_2->ComTxIPduArraySize;
  if (ComTxPduId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 64, 1);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.890_4 = Com_gConfigPtr;
  Com_gConfigPtr.891_5 = Com_gConfigPtr;
  _6 = Com_gConfigPtr.891_5->ComTxIPduRef;
  _7 = (unsigned int) ComTxPduId;
  _8 = _7 * 64;
  _9 = _6 + _8;
  IPduPtr = Com_gConfigPtr.890_4 + _9;
  # DEBUG BEGIN_STMT
  Com_EB_HlpTxConfirmation (ComTxPduId, IPduPtr);

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_HlpTxConfirmation (PduIdType ComTxPduId, const struct ComTxIPduType * IPduPtr)
{
  uint8 * const NTimesQueueBaseRemaining;
  ComIPduRefType NRamBufIdx;
  uint8 N;
  const ComTxIPduMinimumDelayTimeFactorType MDT;
  uint8 BitRes;
  uint8 AktTM;
  uint8 iftmp.896;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = IPduPtr->ComTxIPduFlags;
  _2 = _1 >> 3;
  _3 = (unsigned int) _2;
  _4 = _3 & 3;
  if (_4 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_ClearTxUpdateBits (IPduPtr);

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.892_5 = Com_gDataMemPtr;
  Com_gConfigPtr.893_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.893_6->ComTxIPduStatusBase;
  _8 = (int) _7;
  _9 = (int) ComTxPduId;
  _10 = _8 + _9;
  _11 = (sizetype) _10;
  _12 = Com_gDataMemPtr.892_5 + _11;
  _13 = *_12;
  _14 = (unsigned int) _13;
  _15 = _14 & 2;
  if (_15 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  MDT = IPduPtr->ComTxIPduMinimumDelayTimeFactorValue;
  # DEBUG BEGIN_STMT
  Com_EB_MdtQueue (ComTxPduId, IPduPtr, MDT);

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.894_16 = Com_gDataMemPtr;
  Com_gConfigPtr.895_17 = Com_gConfigPtr;
  _18 = Com_gConfigPtr.895_17->ComTxIPduStatusBase;
  _19 = (int) _18;
  _20 = (int) ComTxPduId;
  _21 = _19 + _20;
  _22 = (sizetype) _21;
  _23 = Com_gDataMemPtr.894_16 + _22;
  _24 = *_23;
  _25 = _24 >> 6;
  BitRes = _25 & 1;
  # DEBUG BEGIN_STMT
  if (BitRes == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _26 = IPduPtr->ComTxModeModes;
  iftmp.896 = _26 & 15;
  goto <bb 9>; [INV]

  <bb 8> :
  _27 = IPduPtr->ComTxModeModes;
  iftmp.896 = _27 >> 4;

  <bb 9> :
  AktTM = iftmp.896;
  # DEBUG BEGIN_STMT
  _28 = (int) AktTM;
  switch (_28) <default: <L21> [INV], case 0: <L18> [INV], case 1 ... 3: <L13> [INV], case 4: <L8> [INV], case 5: <L7> [INV]>

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.897_29 = Com_gDataMemPtr;
  Com_gConfigPtr.898_30 = Com_gConfigPtr;
  _31 = Com_gConfigPtr.898_30->ComTxIPduStatusBase;
  _32 = (int) _31;
  _33 = (int) ComTxPduId;
  _34 = _32 + _33;
  _35 = (sizetype) _34;
  _36 = Com_gDataMemPtr.897_29 + _35;
  _37 = *_36;
  _38 = _37 >> 3;
  BitRes = _38 & 1;
  # DEBUG BEGIN_STMT
  if (BitRes == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.899_39 = Com_gDataMemPtr;
  Com_gConfigPtr.900_40 = Com_gConfigPtr;
  _41 = Com_gConfigPtr.900_40->ComTxIPduStatusBase;
  _42 = (int) _41;
  _43 = (int) ComTxPduId;
  _44 = _42 + _43;
  _45 = (sizetype) _44;
  _46 = Com_gDataMemPtr.899_39 + _45;
  _47 = *_46;
  _48 = (unsigned int) _47;
  _49 = _48 & 8;
  if (_49 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.901_50 = Com_gDataMemPtr;
  Com_gConfigPtr.902_51 = Com_gConfigPtr;
  _52 = Com_gConfigPtr.902_51->ComNTimesQueueBaseRemaining;
  _53 = (sizetype) _52;
  NTimesQueueBaseRemaining = Com_gDataMemPtr.901_50 + _53;
  # DEBUG BEGIN_STMT
  NRamBufIdx = IPduPtr->NTimesQueueRef;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_1 ();
  # DEBUG BEGIN_STMT
  _54 = (sizetype) NRamBufIdx;
  _55 = NTimesQueueBaseRemaining + _54;
  _56 = *_55;
  N = _56 + 255;
  # DEBUG BEGIN_STMT
  _57 = (sizetype) NRamBufIdx;
  _58 = NTimesQueueBaseRemaining + _57;
  *_58 = N;
  # DEBUG BEGIN_STMT
  if (N == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.903_59 = Com_gDataMemPtr;
  Com_gConfigPtr.904_60 = Com_gConfigPtr;
  _61 = Com_gConfigPtr.904_60->ComTxIPduStatusBase;
  _62 = (int) _61;
  _63 = (int) ComTxPduId;
  _64 = _62 + _63;
  _65 = (sizetype) _64;
  _66 = Com_gDataMemPtr.903_59 + _65;
  _67 = *_66;
  Com_gDataMemPtr.905_68 = Com_gDataMemPtr;
  Com_gConfigPtr.906_69 = Com_gConfigPtr;
  _70 = Com_gConfigPtr.906_69->ComTxIPduStatusBase;
  _71 = (int) _70;
  _72 = (int) ComTxPduId;
  _73 = _71 + _72;
  _74 = (sizetype) _73;
  _75 = Com_gDataMemPtr.905_68 + _74;
  _76 = _67 & 247;
  *_75 = _76;

  <bb 14> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_1 ();
  # DEBUG BEGIN_STMT
  if (N != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
<L13>:
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.907_77 = Com_gDataMemPtr;
  Com_gConfigPtr.908_78 = Com_gConfigPtr;
  _79 = Com_gConfigPtr.908_78->ComTxIPduStatusBase;
  _80 = (int) _79;
  _81 = (int) ComTxPduId;
  _82 = _80 + _81;
  _83 = (sizetype) _82;
  _84 = Com_gDataMemPtr.907_77 + _83;
  TS_AtomicClearBit_8 (_84, 5);
  # DEBUG BEGIN_STMT
  Com_EB_HandleTxConfirmations (IPduPtr);
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 16> :
<L18>:
  # DEBUG BEGIN_STMT
  Com_EB_TxDM_TMNone (IPduPtr, ComTxPduId);
  # DEBUG BEGIN_STMT
  Com_EB_HandleTxConfirmations (IPduPtr);
  # DEBUG BEGIN_STMT

  <bb 17> :
<L21>:
  return;

}


Com_EB_HandleTxConfirmations (const struct ComTxIPduType * IPduPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = IPduPtr->ComTxIPduFlags;
  _2 = (unsigned int) _1;
  _3 = _2 & 1;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_TxConfirmations (IPduPtr);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.909_4 = Com_gDataMemPtr;
  Com_gConfigPtr.910_5 = Com_gConfigPtr;
  _6 = Com_gConfigPtr.910_5->ComCbkTxAckDeferredStatusBase;
  _7 = (unsigned int) _6;
  _8 = IPduPtr->ComNotificationDeferredQueueRef;
  _9 = _8 / 8;
  _10 = (unsigned int) _9;
  _11 = _7 + _10;
  _12 = Com_gDataMemPtr.909_4 + _11;
  _13 = IPduPtr->ComNotificationDeferredQueueRef;
  _14 = (long unsigned int) _13;
  _15 = _14 & 7;
  TS_AtomicSetBit_8 (_12, _15);

  <bb 5> :
  return;

}


Com_TriggerTransmit (PduIdType ComTxPduId, struct PduInfoType * PduInfoPtr)
{
  boolean (*<T5ec>) (PduIdType, struct PduInfoType *) fptr;
  struct PduInfoType PduData;
  const struct ComTxIPduType * IPduPtr;
  Std_ReturnType retval;
  Std_ReturnType D.12188;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (PduInfoPtr == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 65, 3);
  goto <bb 16>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  PduInfoPtr->SduLength = 0;
  # DEBUG BEGIN_STMT
  Com_InitStatus.879_1 = Com_InitStatus;
  if (Com_InitStatus.879_1 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 65, 2);
  goto <bb 16>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = PduInfoPtr->SduDataPtr;
  if (_2 == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 65, 3);
  goto <bb 16>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.880_3 = Com_gConfigPtr;
  _4 = Com_gConfigPtr.880_3->ComTxIPduArraySize;
  if (ComTxPduId >= _4)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 65, 1);
  goto <bb 16>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.881_5 = Com_gConfigPtr;
  Com_gConfigPtr.882_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.882_6->ComTxIPduRef;
  _8 = (unsigned int) ComTxPduId;
  _9 = _8 * 64;
  _10 = _7 + _9;
  IPduPtr = Com_gConfigPtr.881_5 + _10;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.883_11 = Com_gDataMemPtr;
  _12 = IPduPtr->ComIPduValueRef;
  _13 = (sizetype) _12;
  _14 = Com_gDataMemPtr.883_11 + _13;
  PduData.SduDataPtr = _14;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.884_15 = Com_gDataMemPtr;
  Com_gConfigPtr.885_16 = Com_gConfigPtr;
  _17 = Com_gConfigPtr.885_16->ComTxIPduLengthBase;
  _18 = (sizetype) _17;
  _19 = Com_gDataMemPtr.884_15 + _18;
  _20 = (unsigned int) ComTxPduId;
  _21 = _20 * 2;
  _22 = _19 + _21;
  _23 = *_22;
  PduData.SduLength = _23;
  # DEBUG BEGIN_STMT
  _24 = IPduPtr->ComIPduTrigTxCallOutFuncPtrRef;
  if (_24 != 65535)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _25 = IPduPtr->ComIPduTrigTxCallOutFuncPtrRef;
  _26 = (int) _25;
  fptr = Com_TxCallouts[_26];
  # DEBUG BEGIN_STMT
  fptr (ComTxPduId, &PduData);

  <bb 12> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.886_27 = Com_gDataMemPtr;
  Com_gConfigPtr.887_28 = Com_gConfigPtr;
  _29 = Com_gConfigPtr.887_28->ComTxIPduStatusBase;
  _30 = (int) _29;
  _31 = (int) ComTxPduId;
  _32 = _30 + _31;
  _33 = (sizetype) _32;
  _34 = Com_gDataMemPtr.886_27 + _33;
  _35 = *_34;
  _36 = (unsigned int) _35;
  _37 = _36 & 1;
  if (_37 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _38 = PduData.SduLength;
  PduInfoPtr->SduLength = _38;
  # DEBUG BEGIN_STMT
  _39 = PduInfoPtr->SduDataPtr;
  _40 = PduData.SduDataPtr;
  _41 = PduData.SduLength;
  _42 = (long unsigned int) _41;
  TS_MemCpy32 (_39, _40, _42);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _43 = IPduPtr->ComTxIPduFlags;
  _44 = _43 >> 3;
  _45 = (unsigned int) _44;
  _46 = _45 & 3;
  if (_46 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Com_EB_ClearTxUpdateBits (IPduPtr);

  <bb 15> :
  # DEBUG BEGIN_STMT
  retval = 0;

  <bb 16> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12188 = retval;
  PduData = {CLOBBER};
  return D.12188;

}


Com_TriggerIPDUSend (PduIdType ComTxPduId)
{
  const struct ComTxIPduType * const IPduPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.871_1 = Com_InitStatus;
  if (Com_InitStatus.871_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 23, 2);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.872_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.872_2->ComTxIPduArraySize;
  if (ComTxPduId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 23, 1);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.873_4 = Com_gConfigPtr;
  Com_gConfigPtr.874_5 = Com_gConfigPtr;
  _6 = Com_gConfigPtr.874_5->ComTxIPduRef;
  _7 = (unsigned int) ComTxPduId;
  _8 = _7 * 64;
  _9 = _6 + _8;
  IPduPtr = Com_gConfigPtr.873_4 + _9;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.875_10 = Com_gDataMemPtr;
  Com_gConfigPtr.876_11 = Com_gConfigPtr;
  _12 = Com_gConfigPtr.876_11->ComTxIPduStatusBase;
  _13 = (int) _12;
  _14 = (int) ComTxPduId;
  _15 = _13 + _14;
  _16 = (sizetype) _15;
  _17 = Com_gDataMemPtr.875_10 + _16;
  _18 = *_17;
  _19 = (unsigned int) _18;
  _20 = _19 & 2;
  if (_20 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.877_21 = Com_gDataMemPtr;
  Com_gConfigPtr.878_22 = Com_gConfigPtr;
  _23 = Com_gConfigPtr.878_22->ComTxIPduStatusBase;
  _24 = (int) _23;
  _25 = (int) ComTxPduId;
  _26 = _24 + _25;
  _27 = (sizetype) _26;
  _28 = Com_gDataMemPtr.877_21 + _27;
  TS_AtomicSetBit_8 (_28, 4);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Com_EB_Send_Pdu (ComTxPduId, IPduPtr);

  <bb 9> :
  # DEBUG BEGIN_STMT
  return;

}


Com_SwitchIpduTxMode (PduIdType PduId, boolean Mode)
{
  uint8 CurrentTM;
  uint8 PduStatusByte;
  uint8 * const PduStatusFlagsPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.862_1 = Com_InitStatus;
  if (Com_InitStatus.862_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 39, 2);
  goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.863_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.863_2->ComTxIPduArraySize;
  if (PduId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 39, 1);
  goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (Mode > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 39, 1);
  goto <bb 14>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.864_4 = Com_gDataMemPtr;
  Com_gConfigPtr.865_5 = Com_gConfigPtr;
  _6 = Com_gConfigPtr.865_5->ComTxIPduStatusBase;
  _7 = (int) _6;
  _8 = (int) PduId;
  _9 = _7 + _8;
  _10 = (sizetype) _9;
  PduStatusFlagsPtr = Com_gDataMemPtr.864_4 + _10;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _11 = *PduStatusFlagsPtr;
  PduStatusByte = _11;
  # DEBUG BEGIN_STMT
  PduStatusByte.866_12 = PduStatusByte;
  _13 = PduStatusByte.866_12 >> 6;
  CurrentTM = _13 & 1;
  # DEBUG BEGIN_STMT
  if (Mode != CurrentTM)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (Mode == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  PduStatusByte.867_14 = PduStatusByte;
  _15 = PduStatusByte.867_14 | 64;
  PduStatusByte = _15;
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  PduStatusByte.868_16 = PduStatusByte;
  _17 = PduStatusByte.868_16 & 191;
  PduStatusByte = _17;

  <bb 12> :
  # DEBUG BEGIN_STMT
  PduStatusByte.869_18 = PduStatusByte;
  _19 = PduStatusByte.869_18 | 128;
  PduStatusByte = _19;
  # DEBUG BEGIN_STMT
  PduStatusByte.870_20 = PduStatusByte;
  *PduStatusFlagsPtr = PduStatusByte.870_20;

  <bb 13> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  PduStatusByte = {CLOBBER};

  <bb 14> :
  # DEBUG BEGIN_STMT
  return;

}


Com_ComXf_TxPrepareBuffer (uint8 * buffer, Com_SignalGroupIdType SignalGroupId, boolean Initialize)
{
  const struct ComTxIPduType * const IPduPtr;
  const ComIPduRefType PduId;
  const struct ComTxSignalGroupType * const SignalGPtr;
  uint16 length;
  uint16 D.12145;

  <bb 2> :
  # DEBUG BEGIN_STMT
  length = 0;
  # DEBUG BEGIN_STMT
  SignalGPtr = Com_GetTxSignalGroupCfg (SignalGroupId, 255);
  # DEBUG BEGIN_STMT
  if (SignalGPtr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (Initialize == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  PduId = SignalGPtr->ComIPduRef;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.860_1 = Com_gConfigPtr;
  Com_gConfigPtr.861_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.861_2->ComTxIPduRef;
  _4 = (unsigned int) PduId;
  _5 = _4 * 64;
  _6 = _3 + _5;
  IPduPtr = Com_gConfigPtr.860_1 + _6;
  # DEBUG BEGIN_STMT
  length = Com_EB_InitSGBuffer (buffer, SignalGPtr, IPduPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.12145 = length;
  return D.12145;

}


Com_SendSignalGroupArray (Com_SignalGroupIdType SignalGroupId, const uint8 * SignalGroupArrayPtr, uint16 SignalGroupArrayLength)
{
  uint8 retval;
  uint8 D.12131;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = Com_SetupTxSignalGroup_DET (SignalGroupArrayPtr, SignalGroupArrayLength, Com_EB_SendSignalGroupArray_DETCheck, SignalGroupId, 67);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12131 = retval;
  return D.12131;

}


Com_SendSignalGroup (Com_SignalGroupIdType SignalGroupId)
{
  uint8 retval;
  uint8 D.12116;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = Com_SetupTxSignalGroup_DET (0B, 0, Com_EB_SendSignalGroup, SignalGroupId, 13);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12116 = retval;
  return D.12116;

}


Com_SetupTxSignalGroup_DET (const uint8 * SGArrayPtr, uint16 SGArrayLength, uint8 (*<T68a>) (const uint8 *, uint16, const struct ComTxSignalGroupType *, ComIPduRefType, const struct ComTxIPduType *, boolean) Com_TxSignalGroupFPtr, Com_SignalGroupIdType SignalGroupId, uint8 ServiceId)
{
  const struct ComTxSignalGroupType * const SignalGPtr;
  uint8 retval;
  uint8 D.12120;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  SignalGPtr = Com_GetTxSignalGroupCfg (SignalGroupId, ServiceId);
  # DEBUG BEGIN_STMT
  if (SignalGPtr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_SetupTxSignalGroup (SGArrayPtr, SGArrayLength, Com_TxSignalGroupFPtr, SignalGPtr, &retval, 0);

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.12120 = retval;
  retval = {CLOBBER};
  return D.12120;

}


Com_GetTxSignalGroupCfg (Com_SignalGroupIdType SignalGroupId, uint8 ServiceId)
{
  const struct ComTxSignalGroupType * SignalGPtr;
  const struct ComTxSignalGroupType * D.12129;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalGPtr = 0B;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.856_1 = Com_InitStatus;
  if (Com_InitStatus.856_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, ServiceId, 2);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.857_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.857_2->ComTxSignalGroupArraySize;
  if (SignalGroupId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, ServiceId, 1);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.858_4 = Com_gConfigPtr;
  Com_gConfigPtr.859_5 = Com_gConfigPtr;
  _6 = Com_gConfigPtr.859_5->ComTxSignalGroupRef;
  _7 = (unsigned int) SignalGroupId;
  _8 = _7 * 32;
  _9 = _6 + _8;
  SignalGPtr = Com_gConfigPtr.858_4 + _9;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.12129 = SignalGPtr;
  return D.12129;

}


Com_GetTxSignalCfg (Com_SignalIdType SignalId, uint8 ServiceId)
{
  const struct ComTxSignalType * SignalPtr;
  const struct ComTxSignalType * D.12096;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalPtr = 0B;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.852_1 = Com_InitStatus;
  if (Com_InitStatus.852_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, ServiceId, 2);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.853_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.853_2->ComTxSignalArraySize;
  if (SignalId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, ServiceId, 1);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.854_4 = Com_gConfigPtr;
  Com_gConfigPtr.855_5 = Com_gConfigPtr;
  _6 = Com_gConfigPtr.855_5->ComTxSignalRef;
  _7 = (unsigned int) SignalId;
  _8 = _7 * 26;
  _9 = _6 + _8;
  SignalPtr = Com_gConfigPtr.854_4 + _9;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.12096 = SignalPtr;
  return D.12096;

}


Com_ComXf_GetTxSGId (Com_SignalIdType GroupSignalId)
{
  const struct ComTxSignalType * const SignalPtr;
  Com_SignalGroupIdType SGId;
  Com_SignalGroupIdType D.12114;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SGId = 65535;
  # DEBUG BEGIN_STMT
  SignalPtr = Com_GetTxSignalCfg (GroupSignalId, 255);
  # DEBUG BEGIN_STMT
  if (SignalPtr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SGId = SignalPtr->ComSignalBase.ComSignalGroupRef;

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.12114 = SGId;
  return D.12114;

}


Com_SendDynSignal (Com_SignalIdType SignalId, const void * SignalDataPtr, uint16 Length)
{
  struct Com_EB_WriteIntDataType IntData;
  const struct ComTxSignalType * const SignalPtr;
  uint8 RetVal;
  uint8 D.12110;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 128;
  # DEBUG BEGIN_STMT
  SignalPtr = Com_GetTxSignalCfg (SignalId, 33);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (SignalPtr == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (SignalDataPtr == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 33, 3);
  goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _1 = SignalPtr->ComTxSignalFlags;
  _2 = _1 >> 12;
  _3 = (unsigned char) _2;
  _4 = (unsigned int) _3;
  _5 = _4 & 15;
  if (_5 != 8)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 33, 1);
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _6 = SignalPtr->ComSignalBase.ComBitSize;
  if (Length > _6)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 33, 1);
  # DEBUG BEGIN_STMT
  RetVal = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  RetVal = Com_GetSendSignalRetVal (SignalPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IntData.arraySize = Length;
  # DEBUG BEGIN_STMT
  IntData.trigger = 0;
  # DEBUG BEGIN_STMT
  IntData.SendSigRetval = RetVal;
  # DEBUG BEGIN_STMT
  IntData.SendInMainFunctionTx = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IntData.TMSChanged = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Com_EB_WriteDynSignal_ExitArea_0 (SignalDataPtr, SignalPtr, &IntData);
  IntData = {CLOBBER};

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12110 = RetVal;
  return D.12110;

}


Com_SendSignal (Com_SignalIdType SignalId, const void * SignalDataPtr)
{
  const uint16 index;
  void (*<T69f>) (const void *, uint8 *, const struct ComTxSignalType *, struct Com_EB_WriteIntDataType *) fptr;
  struct Com_EB_WriteIntDataType IntData;
  uint8 * const dataPtr;
  const struct ComTxSignalType * const SignalPtr;
  uint8 RetVal;
  uint8 D.12088;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 128;
  # DEBUG BEGIN_STMT
  SignalPtr = Com_GetTxSignalCfg (SignalId, 10);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (SignalPtr == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (SignalDataPtr == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 10, 3);
  goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _1 = SignalPtr->ComTxSignalFlags;
  _2 = _1 >> 12;
  _3 = (unsigned char) _2;
  _4 = (unsigned int) _3;
  _5 = _4 & 15;
  if (_5 == 8)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 10, 1);
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _6 = SignalPtr->ComSignalBase.ComBufferRef;
  if (_6 == 65535)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 10, 1);
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.851_7 = Com_gDataMemPtr;
  _8 = SignalPtr->ComSignalBase.ComBufferRef;
  _9 = (sizetype) _8;
  dataPtr = Com_gDataMemPtr.851_7 + _9;
  # DEBUG BEGIN_STMT
  RetVal = Com_GetSendSignalRetVal (SignalPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = SignalPtr->ComSignalBase.ComBitSize;
  IntData.arraySize = _10;
  # DEBUG BEGIN_STMT
  IntData.trigger = 0;
  # DEBUG BEGIN_STMT
  IntData.SendSigRetval = RetVal;
  # DEBUG BEGIN_STMT
  IntData.SendInMainFunctionTx = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IntData.TMSChanged = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = SignalPtr->ComTxSignalFlags;
  index = _11 & 511;
  # DEBUG BEGIN_STMT
  _12 = (int) index;
  fptr = Com_WriteFuncs[_12];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, dataPtr, SignalPtr, &IntData);
  # DEBUG BEGIN_STMT
  IntData = {CLOBBER};

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12088 = RetVal;
  return D.12088;

}


Com_EB_HandleRxConfirm (uint8 * IPduFlagBytePtr, const struct ComRxIPduType * IPduPtr, ComIPduRefType PduId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = IPduPtr->ComRxIPduFlags;
  _2 = (unsigned int) _1;
  _3 = _2 & 1;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  TS_AtomicSetBit_8 (IPduFlagBytePtr, 3);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_EB_NotifyReceivers (IPduPtr, PduId);

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_TpRxIndication (PduIdType PduId, NotifResultType Result)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_RxIndication (PduIdType ComRxPduId, struct PduInfoType * PduInfoPtr)
{
  uint8 * const pdudataptr;
  uint32 pdulength;
  boolean (*<T5f4>) (PduIdType, const struct PduInfoType *) fptr;
  boolean coretval;
  uint8 * const IPduFlagBytePtr;
  const struct ComRxIPduType * IPduPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.840_1 = Com_InitStatus;
  if (Com_InitStatus.840_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 66, 2);
  goto <bb 19>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (PduInfoPtr == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 66, 3);
  goto <bb 19>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = PduInfoPtr->SduDataPtr;
  if (_2 == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 66, 3);
  goto <bb 19>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.841_3 = Com_gConfigPtr;
  _4 = Com_gConfigPtr.841_3->ComRxIPduArraySize;
  if (ComRxPduId >= _4)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 66, 1);
  goto <bb 19>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.842_5 = Com_gConfigPtr;
  Com_gConfigPtr.843_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.843_6->ComRxIPduRef;
  _8 = (unsigned int) ComRxPduId;
  _9 = _8 * 48;
  _10 = _7 + _9;
  IPduPtr = Com_gConfigPtr.842_5 + _10;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.844_11 = Com_gDataMemPtr;
  Com_gConfigPtr.845_12 = Com_gConfigPtr;
  _13 = Com_gConfigPtr.845_12->ComRxIPduStatusBase;
  _14 = (int) _13;
  _15 = (int) ComRxPduId;
  _16 = _14 + _15;
  _17 = (sizetype) _16;
  IPduFlagBytePtr = Com_gDataMemPtr.844_11 + _17;
  # DEBUG BEGIN_STMT
  _18 = *IPduFlagBytePtr;
  _19 = (unsigned int) _18;
  _20 = _19 & 1;
  if (_20 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  coretval = 1;
  # DEBUG BEGIN_STMT
  _21 = IPduPtr->ComIPduCallOutFuncPtrRef;
  if (_21 != 65535)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _22 = IPduPtr->ComIPduCallOutFuncPtrRef;
  _23 = (int) _22;
  fptr = Com_RxCallouts[_23];
  # DEBUG BEGIN_STMT
  coretval = fptr (ComRxPduId, PduInfoPtr);

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (coretval == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _24 = IPduPtr->ComIPduSizeMax;
  pdulength = (uint32) _24;
  # DEBUG BEGIN_STMT
  _25 = PduInfoPtr->SduLength;
  _26 = (long unsigned int) _25;
  if (pdulength > _26)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _27 = PduInfoPtr->SduLength;
  pdulength = (uint32) _27;

  <bb 16> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_1 ();
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.846_28 = Com_gDataMemPtr;
  _29 = IPduPtr->ComIPduValueRef;
  _30 = (sizetype) _29;
  pdudataptr = Com_gDataMemPtr.846_28 + _30;
  # DEBUG BEGIN_STMT
  _31 = PduInfoPtr->SduDataPtr;
  TS_MemCpy32 (pdudataptr, _31, pdulength);
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.847_32 = Com_gDataMemPtr;
  Com_gConfigPtr.848_33 = Com_gConfigPtr;
  _34 = Com_gConfigPtr.848_33->ComRxIPduLengthBase;
  _35 = (sizetype) _34;
  _36 = Com_gDataMemPtr.847_32 + _35;
  _37 = (unsigned int) ComRxPduId;
  _38 = _37 * 2;
  _39 = _36 + _38;
  _40 = (short unsigned int) pdulength;
  *_39 = _40;
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_1 ();
  # DEBUG BEGIN_STMT
  _41 = IPduPtr->ComIPduSigGWFlagBit;
  if (_41 != 65535)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.849_42 = Com_gDataMemPtr;
  Com_gConfigPtr.850_43 = Com_gConfigPtr;
  _44 = Com_gConfigPtr.850_43->ComSigGWRxPduFlagBase;
  _45 = (unsigned int) _44;
  _46 = IPduPtr->ComIPduSigGWFlagBit;
  _47 = _46 / 8;
  _48 = (unsigned int) _47;
  _49 = _45 + _48;
  _50 = Com_gDataMemPtr.849_42 + _49;
  _51 = IPduPtr->ComIPduSigGWFlagBit;
  _52 = (long unsigned int) _51;
  _53 = _52 & 7;
  TS_AtomicSetBit_8 (_50, _53);

  <bb 18> :
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxConfirm (IPduFlagBytePtr, IPduPtr, ComRxPduId);

  <bb 19> :
  # DEBUG BEGIN_STMT
  return;

}


Com_ComXf_Get_RxSignalGroupSize (Com_SignalGroupIdType SignalGroupId)
{
  const struct ComRxSignalGroupType * const SignalGPtr;
  uint16 length;
  uint16 D.12048;

  <bb 2> :
  # DEBUG BEGIN_STMT
  length = 0;
  # DEBUG BEGIN_STMT
  SignalGPtr = Com_GetRxSignalGroupCfg (SignalGroupId, 255);
  # DEBUG BEGIN_STMT
  if (SignalGPtr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  length = SignalGPtr->ComByteSize;

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.12048 = length;
  return D.12048;

}


Com_ReceiveSignalGroupArray (Com_SignalGroupIdType SignalGroupId, uint8 * SignalGroupArrayPtr, uint16 * SignalGroupArrayLengthPtr)
{
  struct Com_RxSGArrayInfoType SGArrayInfo;
  uint8 retval;
  uint8 D.12041;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (SignalGroupArrayLengthPtr == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 68, 3);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (SignalGroupArrayPtr == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  *SignalGroupArrayLengthPtr = 0;
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 68, 3);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SGArrayInfo.SGArrayPtr = SignalGroupArrayPtr;
  # DEBUG BEGIN_STMT
  SGArrayInfo.outSGArrayLengthPtr = SignalGroupArrayLengthPtr;
  # DEBUG BEGIN_STMT
  _1 = *SignalGroupArrayLengthPtr;
  SGArrayInfo.inSGArrayLength = _1;
  # DEBUG BEGIN_STMT
  *SignalGroupArrayLengthPtr = 0;
  # DEBUG BEGIN_STMT
  retval = Com_SetupRxSignalGroup_DET (SignalGroupId, &SGArrayInfo, Com_CopyRxSignalGroupArray_Array, 68);
  SGArrayInfo = {CLOBBER};

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12041 = retval;
  return D.12041;

}


Com_ReceiveSignalGroup (Com_SignalGroupIdType SignalGroupId)
{
  uint8 retval;
  uint8 D.12020;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = Com_SetupRxSignalGroup_DET (SignalGroupId, 0B, Com_CopyRxSignalGroupArray_Shadow, 14);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12020 = retval;
  return D.12020;

}


Com_CopyRxSignalGroupArray (uint8 * SGArrayPtr, const struct ComRxSignalGroupType * SignalGPtr, const struct ComRxIPduType * IPduPtr, ComIPduRefType PduId)
{
  const uint8 * const valPtr;
  const uint8 * const valPtr;
  const boolean RxDMReplace;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RxDMReplace = Com_ReceiveSignalGroup_Replace (SignalGPtr, PduId);
  # DEBUG BEGIN_STMT
  if (RxDMReplace == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.604_1 = Com_gConfigPtr;
  _2 = IPduPtr->ComInitValueRef;
  _3 = SignalGPtr->ComSignalPositionInByte;
  _4 = (sizetype) _3;
  _5 = _2 + _4;
  valPtr = Com_gConfigPtr.604_1 + _5;
  # DEBUG BEGIN_STMT
  _6 = SignalGPtr->ComByteSize;
  _7 = (long unsigned int) _6;
  TS_MemCpy32 (SGArrayPtr, valPtr, _7);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.605_8 = Com_gDataMemPtr;
  _9 = IPduPtr->ComIPduValueRef;
  _10 = (int) _9;
  _11 = SignalGPtr->ComSignalPositionInByte;
  _12 = (int) _11;
  _13 = _10 + _12;
  _14 = (sizetype) _13;
  valPtr = Com_gDataMemPtr.605_8 + _14;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _15 = SignalGPtr->ComByteSize;
  _16 = (long unsigned int) _15;
  TS_MemCpy32 (SGArrayPtr, valPtr, _16);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 5> :
  return;

}


Com_CopyRxSignalGroupArray_Shadow (uint8 * retvalPtr, struct Com_RxSGArrayInfoType * RxSGArrayInfoType, const struct ComRxSignalGroupType * SignalGPtr, const struct ComRxIPduType * IPduPtr, ComIPduRefType PduId)
{
  uint8 * const shadowBufferPtr;
  const ComRAMIdxType shadowBufferRef;

  <bb 2> :
  # DEBUG BEGIN_STMT
  shadowBufferRef = SignalGPtr->ComSignalGroupValueRef;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (shadowBufferRef == 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  *retvalPtr = 128;
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 14, 1);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.603_1 = Com_gDataMemPtr;
  _2 = (sizetype) shadowBufferRef;
  shadowBufferPtr = Com_gDataMemPtr.603_1 + _2;
  # DEBUG BEGIN_STMT
  Com_CopyRxSignalGroupArray (shadowBufferPtr, SignalGPtr, IPduPtr, PduId);

  <bb 5> :
  return;

}


Com_CopyRxSignalGroupArray_Array (uint8 * retvalPtr, struct Com_RxSGArrayInfoType * RxSGArrayInfoPtr, const struct ComRxSignalGroupType * SignalGPtr, const struct ComRxIPduType * IPduPtr, ComIPduRefType PduId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = RxSGArrayInfoPtr->inSGArrayLength;
  _2 = SignalGPtr->ComByteSize;
  if (_1 < _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  *retvalPtr = 128;
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 68, 1);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = RxSGArrayInfoPtr->SGArrayPtr;
  Com_CopyRxSignalGroupArray (_3, SignalGPtr, IPduPtr, PduId);
  # DEBUG BEGIN_STMT
  _4 = RxSGArrayInfoPtr->outSGArrayLengthPtr;
  _5 = SignalGPtr->ComByteSize;
  *_4 = _5;

  <bb 5> :
  return;

}


Com_SetupRxSignalGroup (uint8 * retvalPtr, struct Com_RxSGArrayInfoType * RxSGArrayInfoPtr, const struct ComRxSignalGroupType * SignalGPtr, void (*<T63e>) (uint8 *, struct Com_RxSGArrayInfoType *, const struct ComRxSignalGroupType *, const struct ComRxIPduType *, ComIPduRefType) Com_RxSignalGroupFPtr)
{
  const struct ComRxIPduType * IPduPtr;
  const ComIPduRefType PduId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  PduId = SignalGPtr->ComIPduRef;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.612_1 = Com_gConfigPtr;
  Com_gConfigPtr.613_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.613_2->ComRxIPduRef;
  _4 = (unsigned int) PduId;
  _5 = _4 * 48;
  _6 = _3 + _5;
  IPduPtr = Com_gConfigPtr.612_1 + _6;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.614_7 = Com_gDataMemPtr;
  Com_gConfigPtr.615_8 = Com_gConfigPtr;
  _9 = Com_gConfigPtr.615_8->ComRxIPduStatusBase;
  _10 = (int) _9;
  _11 = (int) PduId;
  _12 = _10 + _11;
  _13 = (sizetype) _12;
  _14 = Com_gDataMemPtr.614_7 + _13;
  _15 = *_14;
  _16 = (unsigned int) _15;
  _17 = _16 & 1;
  if (_17 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  *retvalPtr = 0;

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_RxSignalGroupFPtr (retvalPtr, RxSGArrayInfoPtr, SignalGPtr, IPduPtr, PduId);
  return;

}


Com_SetupRxSignalGroup_DET (Com_SignalGroupIdType SignalGroupId, struct Com_RxSGArrayInfoType * RxSGArrayInfoPtr, void (*<T63e>) (uint8 *, struct Com_RxSGArrayInfoType *, const struct ComRxSignalGroupType *, const struct ComRxIPduType *, ComIPduRefType) Com_RxSignalGroupFPtr, uint8 ServiceId)
{
  const struct ComRxSignalGroupType * const SignalGPtr;
  uint8 retval;
  uint8 D.12024;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  SignalGPtr = Com_GetRxSignalGroupCfg (SignalGroupId, ServiceId);
  # DEBUG BEGIN_STMT
  if (SignalGPtr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_SetupRxSignalGroup (&retval, RxSGArrayInfoPtr, SignalGPtr, Com_RxSignalGroupFPtr);

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.12024 = retval;
  retval = {CLOBBER};
  return D.12024;

}


Com_GetRxSignalGroupCfg (Com_SignalGroupIdType SignalGroupId, uint8 ServiceId)
{
  const struct ComRxSignalGroupType * SignalGPtr;
  const struct ComRxSignalGroupType * D.12033;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalGPtr = 0B;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.836_1 = Com_InitStatus;
  if (Com_InitStatus.836_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, ServiceId, 2);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.837_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.837_2->ComRxSignalGroupArraySize;
  if (SignalGroupId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, ServiceId, 1);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.838_4 = Com_gConfigPtr;
  Com_gConfigPtr.839_5 = Com_gConfigPtr;
  _6 = Com_gConfigPtr.839_5->ComRxSignalGroupRef;
  _7 = (unsigned int) SignalGroupId;
  _8 = _7 * 10;
  _9 = _6 + _8;
  SignalGPtr = Com_gConfigPtr.838_4 + _9;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.12033 = SignalGPtr;
  return D.12033;

}


Com_ReceiveSignalGroup_Replace (const struct ComRxSignalGroupType * SignalGPtr, ComIPduRefType PduId)
{
  uint8 RxDMTout;
  const struct ComRxSignalExtType * const SignalExtPtr;
  boolean RxDMReplace;
  boolean D.11726;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RxDMReplace = 0;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.606_1 = Com_gConfigPtr;
  Com_gConfigPtr.607_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.607_2->ComRxSignalExtRef;
  _4 = SignalGPtr->ComSignalExtRef;
  _5 = (unsigned int) _4;
  _6 = _5 * 14;
  _7 = _3 + _6;
  SignalExtPtr = Com_gConfigPtr.606_1 + _7;
  # DEBUG BEGIN_STMT
  _8 = SignalExtPtr->ComRxSignalExtFlags;
  _9 = (unsigned int) _8;
  _10 = _9 & 1;
  if (_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = SignalExtPtr->ComRxSignalExtFlags;
  _12 = _11 >> 2;
  _13 = (unsigned int) _12;
  _14 = _13 & 1;
  if (_14 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.608_15 = Com_gDataMemPtr;
  Com_gConfigPtr.609_16 = Com_gConfigPtr;
  _17 = Com_gConfigPtr.609_16->ComRxDMInvSignalGroupStatusQueueBase;
  _18 = (unsigned int) _17;
  _19 = SignalExtPtr->RxSigDMQueueRef;
  _20 = _19 / 4;
  _21 = (unsigned int) _20;
  _22 = _18 + _21;
  _23 = Com_gDataMemPtr.608_15 + _22;
  _24 = *_23;
  _25 = (int) _24;
  _26 = SignalExtPtr->RxSigDMQueueRef;
  _27 = (unsigned int) _26;
  _28 = _27 & 3;
  _29 = _28 * 2;
  _30 = _25 >> _29;
  _31 = (unsigned char) _30;
  RxDMTout = _31 & 1;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.610_32 = Com_gDataMemPtr;
  Com_gConfigPtr.611_33 = Com_gConfigPtr;
  _34 = Com_gConfigPtr.611_33->ComRxIPduStatusBase;
  _35 = (int) _34;
  _36 = (int) PduId;
  _37 = _35 + _36;
  _38 = (sizetype) _37;
  _39 = Com_gDataMemPtr.610_32 + _38;
  _40 = *_39;
  _41 = _40 >> 2;
  RxDMTout = _41 & 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (RxDMTout == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RxDMReplace = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.11726 = RxDMReplace;
  return D.11726;

}


Com_ComXf_GetRxSGId (Com_SignalIdType GroupSignalId)
{
  const struct ComRxSignalType * const SignalPtr;
  Com_SignalGroupIdType SGId;
  Com_SignalGroupIdType D.12018;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SGId = 65535;
  # DEBUG BEGIN_STMT
  SignalPtr = Com_GetRxSignalCfg (GroupSignalId, 255);
  # DEBUG BEGIN_STMT
  if (SignalPtr == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SGId = SignalPtr->ComSignalBase.ComSignalGroupRef;

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.12018 = SGId;
  return D.12018;

}


Com_ReceiveDynSignal (Com_SignalIdType SignalId, void * SignalDataPtr, uint16 * LengthPtr)
{
  const struct ComRxIPduType * const IPduPtr;
  const ComIPduRefType PduId;
  const struct ComRxSignalType * const SignalPtr;
  uint8 retval;
  uint8 D.12001;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  SignalPtr = Com_GetRxSignalCfg (SignalId, 34);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (SignalPtr == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (SignalDataPtr == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 34, 3);
  goto <bb 12>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (LengthPtr == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 34, 3);
  goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _1 = SignalPtr->ComSignalBase.ComRxSignalFlags;
  _2 = _1 >> 7;
  _3 = (unsigned char) _2;
  _4 = (unsigned int) _3;
  _5 = _4 & 15;
  if (_5 != 8)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 34, 1);
  goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  PduId = SignalPtr->ComIPduRef;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.828_6 = Com_gConfigPtr;
  Com_gConfigPtr.829_7 = Com_gConfigPtr;
  _8 = Com_gConfigPtr.829_7->ComRxIPduRef;
  _9 = (unsigned int) PduId;
  _10 = _9 * 48;
  _11 = _8 + _10;
  IPduPtr = Com_gConfigPtr.828_6 + _11;
  # DEBUG BEGIN_STMT
  retval = Com_EB_ReadValue_Uint8Dyn (SignalDataPtr, LengthPtr, SignalPtr, IPduPtr, PduId);
  # DEBUG BEGIN_STMT
  if (retval == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.830_12 = Com_gDataMemPtr;
  Com_gConfigPtr.831_13 = Com_gConfigPtr;
  _14 = Com_gConfigPtr.831_13->ComRxIPduStatusBase;
  _15 = (int) _14;
  _16 = (int) PduId;
  _17 = _15 + _16;
  _18 = (sizetype) _17;
  _19 = Com_gDataMemPtr.830_12 + _18;
  _20 = *_19;
  _21 = (unsigned int) _20;
  _22 = _21 & 1;
  if (_22 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  retval = 128;

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.12001 = retval;
  return D.12001;

}


Com_ReceiveSignal (Com_SignalIdType SignalId, void * SignalDataPtr)
{
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  const uint8 * const dataPtr;
  const ComIPduRefType PduId;
  const struct ComRxSignalType * const SignalPtr;
  uint8 retval;
  uint8 D.11974;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  SignalPtr = Com_GetRxSignalCfg (SignalId, 11);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (SignalPtr == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (SignalDataPtr == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 11, 3);
  goto <bb 12>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _1 = SignalPtr->ComSignalBase.ComRxSignalFlags;
  _2 = _1 >> 7;
  _3 = (unsigned char) _2;
  _4 = (unsigned int) _3;
  _5 = _4 & 15;
  if (_5 == 8)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 11, 1);
  goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _6 = SignalPtr->ComSignalBase.ComBufferRef;
  if (_6 == 65535)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 11, 1);
  goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  PduId = SignalPtr->ComIPduRef;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.821_7 = Com_gDataMemPtr;
  _8 = SignalPtr->ComSignalBase.ComBufferRef;
  _9 = (sizetype) _8;
  dataPtr = Com_gDataMemPtr.821_7 + _9;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.822_10 = Com_gDataMemPtr;
  Com_gConfigPtr.823_11 = Com_gConfigPtr;
  _12 = Com_gConfigPtr.823_11->ComRxIPduStatusBase;
  _13 = (int) _12;
  _14 = (int) PduId;
  _15 = _13 + _14;
  _16 = (sizetype) _15;
  _17 = Com_gDataMemPtr.822_10 + _16;
  _18 = *_17;
  _19 = (unsigned int) _18;
  _20 = _19 & 1;
  if (_20 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  retval = 0;

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _21 = SignalPtr->ComSignalBase.ComRxSignalFlags;
  index = _21 & 127;
  # DEBUG BEGIN_STMT
  _22 = (int) index;
  fptr = Com_ReadFuncs[_22].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = &SignalPtr->ComSignalBase;
  fptr (SignalDataPtr, dataPtr, _23, &retval);

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.11974 = retval;
  retval = {CLOBBER};
  return D.11974;

}


Com_GetRxSignalCfg (Com_SignalIdType SignalId, uint8 ServiceId)
{
  const struct ComRxSignalType * SignalPtr;
  const struct ComRxSignalType * D.11983;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalPtr = 0B;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.824_1 = Com_InitStatus;
  if (Com_InitStatus.824_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, ServiceId, 2);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.825_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.825_2->ComRxSignalArraySize;
  if (SignalId >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, ServiceId, 1);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.826_4 = Com_gConfigPtr;
  Com_gConfigPtr.827_5 = Com_gConfigPtr;
  _6 = Com_gConfigPtr.827_5->ComRxSignalRef;
  _7 = (unsigned int) SignalId;
  _8 = _7 * 20;
  _9 = _6 + _8;
  SignalPtr = Com_gConfigPtr.826_4 + _9;

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.11983 = SignalPtr;
  return D.11983;

}


Com_EB_Read_SignalExt (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  const uint8 * const initDataPtr;
  const struct ComRxIPduType * const IPduPtr;
  const ComIPduRefType PduId;
  const boolean takeInitVal;
  const struct ComRxSignalType * const SignalPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalPtr = Com_EB_ReadPropPtr;
  # DEBUG BEGIN_STMT
  takeInitVal = Com_EB_Read_SignalReplace (SignalPtr);
  # DEBUG BEGIN_STMT
  if (takeInitVal == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  PduId = SignalPtr->ComIPduRef;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.797_1 = Com_gConfigPtr;
  Com_gConfigPtr.798_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.798_2->ComRxIPduRef;
  _4 = (unsigned int) PduId;
  _5 = _4 * 48;
  _6 = _3 + _5;
  IPduPtr = Com_gConfigPtr.797_1 + _6;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.799_7 = Com_gConfigPtr;
  _8 = IPduPtr->ComInitValueRef;
  initDataPtr = Com_gConfigPtr.799_7 + _8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _9 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _9 & 55;
  # DEBUG BEGIN_STMT
  _10 = (int) index;
  fptr = Com_ReadFuncs[_10].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, initDataPtr, Com_EB_ReadPropPtr, retvalPtr);
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _11 = Com_EB_ReadPropPtr->ComFilterConf.ComFilterSignalValueRef;
  if (_11 != 65535)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_EB_Read_SignalExt_SigBuffer (SignalDataPtr, Com_EB_ReadPropPtr);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _12 & 63;
  # DEBUG BEGIN_STMT
  _13 = (int) index;
  fptr = Com_ReadFuncs[_13].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, dataPtr, Com_EB_ReadPropPtr, retvalPtr);

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_SignalReplace (const struct ComRxSignalType * SignalPtr)
{
  boolean rxDMReplace;
  uint8 filterType;
  const struct ComRxSignalExtType * const SignalExtPtr;
  boolean takeInitVal;
  boolean D.11948;
  int iftmp.802;

  <bb 2> :
  # DEBUG BEGIN_STMT
  takeInitVal = 0;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.800_1 = Com_gConfigPtr;
  Com_gConfigPtr.801_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.801_2->ComRxSignalExtRef;
  _4 = SignalPtr->ComSignalExtRef;
  _5 = (unsigned int) _4;
  _6 = _5 * 14;
  _7 = _3 + _6;
  SignalExtPtr = Com_gConfigPtr.800_1 + _7;
  # DEBUG BEGIN_STMT
  filterType = SignalPtr->ComSignalBase.ComFilterConf.ComFilterType;
  # DEBUG BEGIN_STMT
  _8 = filterType == 0;
  takeInitVal = (boolean) _8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _9 = SignalPtr->ComIPduRef;
  rxDMReplace = Com_EB_CheckRxSignalDM (SignalExtPtr, _9);
  # DEBUG BEGIN_STMT
  if (takeInitVal != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (rxDMReplace != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.802 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.802 = 0;

  <bb 6> :
  takeInitVal = (boolean) iftmp.802;
  # DEBUG BEGIN_STMT
  D.11948 = takeInitVal;
  return D.11948;

}


Com_EB_Read_SignalExt_SigBuffer (void * SignalDataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr)
{
  sint32 * const bufferBaseSint32;
  sint32 * S32DataPtr;
  sint16 * const bufferBaseSint16;
  sint16 * S16DataPtr;
  sint8 * const bufferBaseSint8;
  sint8 * S8DataPtr;
  uint32 * const bufferBaseUint32;
  uint32 * U32DataPtr;
  uint16 * const bufferBaseUint16;
  uint16 * U16DataPtr;
  uint8 * const bufferBaseUint8;
  uint8 * U8DataPtr;
  uint8 * const bufferBaseBool;
  boolean * BoolDataPtr;
  const Com_TS_SignalTypeType SignalType;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  _2 = _1 >> 7;
  _3 = (unsigned char) _2;
  SignalType = _3 & 15;
  # DEBUG BEGIN_STMT
  _4 = (int) SignalType;
  switch (_4) <default: <L9> [INV], case 0: <L0> [INV], case 1: <L5> [INV], case 2: <L6> [INV], case 3: <L4> [INV], case 4: <L2> [INV], case 5: <L3> [INV], case 6: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  BoolDataPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.807_5 = Com_gDataMemPtr;
  Com_gConfigPtr.808_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.808_6->ComBufferBaseBool;
  _8 = (sizetype) _7;
  bufferBaseBool = Com_gDataMemPtr.807_5 + _8;
  # DEBUG BEGIN_STMT
  _9 = Com_EB_ReadPropPtr->ComFilterConf.ComFilterSignalValueRef;
  _10 = _9 / 8;
  _11 = (sizetype) _10;
  _12 = bufferBaseBool + _11;
  _13 = *_12;
  _14 = (int) _13;
  _15 = Com_EB_ReadPropPtr->ComFilterConf.ComFilterSignalValueRef;
  _16 = (unsigned int) _15;
  _17 = _16 & 7;
  _18 = _14 >> _17;
  _19 = (unsigned char) _18;
  _20 = _19 & 1;
  *BoolDataPtr = _20;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  U8DataPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.809_21 = Com_gDataMemPtr;
  Com_gConfigPtr.810_22 = Com_gConfigPtr;
  _23 = Com_gConfigPtr.810_22->ComBufferBaseUInt8;
  _24 = (sizetype) _23;
  bufferBaseUint8 = Com_gDataMemPtr.809_21 + _24;
  # DEBUG BEGIN_STMT
  _25 = Com_EB_ReadPropPtr->ComFilterConf.ComFilterSignalValueRef;
  _26 = (sizetype) _25;
  _27 = bufferBaseUint8 + _26;
  _28 = *_27;
  *U8DataPtr = _28;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  U16DataPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.811_29 = Com_gDataMemPtr;
  Com_gConfigPtr.812_30 = Com_gConfigPtr;
  _31 = Com_gConfigPtr.812_30->ComBufferBaseUInt16;
  _32 = (sizetype) _31;
  bufferBaseUint16 = Com_gDataMemPtr.811_29 + _32;
  # DEBUG BEGIN_STMT
  _33 = Com_EB_ReadPropPtr->ComFilterConf.ComFilterSignalValueRef;
  _34 = (unsigned int) _33;
  _35 = _34 * 2;
  _36 = bufferBaseUint16 + _35;
  _37 = *_36;
  *U16DataPtr = _37;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  U32DataPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.813_38 = Com_gDataMemPtr;
  Com_gConfigPtr.814_39 = Com_gConfigPtr;
  _40 = Com_gConfigPtr.814_39->ComBufferBaseUInt32;
  _41 = (sizetype) _40;
  bufferBaseUint32 = Com_gDataMemPtr.813_38 + _41;
  # DEBUG BEGIN_STMT
  _42 = Com_EB_ReadPropPtr->ComFilterConf.ComFilterSignalValueRef;
  _43 = (unsigned int) _42;
  _44 = _43 * 4;
  _45 = bufferBaseUint32 + _44;
  _46 = *_45;
  *U32DataPtr = _46;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  S8DataPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.815_47 = Com_gDataMemPtr;
  Com_gConfigPtr.816_48 = Com_gConfigPtr;
  _49 = Com_gConfigPtr.816_48->ComBufferBaseSInt8;
  _50 = (sizetype) _49;
  bufferBaseSint8 = Com_gDataMemPtr.815_47 + _50;
  # DEBUG BEGIN_STMT
  _51 = Com_EB_ReadPropPtr->ComFilterConf.ComFilterSignalValueRef;
  _52 = (sizetype) _51;
  _53 = bufferBaseSint8 + _52;
  _54 = *_53;
  *S8DataPtr = _54;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  S16DataPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.817_55 = Com_gDataMemPtr;
  Com_gConfigPtr.818_56 = Com_gConfigPtr;
  _57 = Com_gConfigPtr.818_56->ComBufferBaseSInt16;
  _58 = (sizetype) _57;
  bufferBaseSint16 = Com_gDataMemPtr.817_55 + _58;
  # DEBUG BEGIN_STMT
  _59 = Com_EB_ReadPropPtr->ComFilterConf.ComFilterSignalValueRef;
  _60 = (unsigned int) _59;
  _61 = _60 * 2;
  _62 = bufferBaseSint16 + _61;
  _63 = *_62;
  *S16DataPtr = _63;
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  S32DataPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.819_64 = Com_gDataMemPtr;
  Com_gConfigPtr.820_65 = Com_gConfigPtr;
  _66 = Com_gConfigPtr.820_65->ComBufferBaseSInt32;
  _67 = (sizetype) _66;
  bufferBaseSint32 = Com_gDataMemPtr.819_64 + _67;
  # DEBUG BEGIN_STMT
  _68 = Com_EB_ReadPropPtr->ComFilterConf.ComFilterSignalValueRef;
  _69 = (unsigned int) _68;
  _70 = _69 * 4;
  _71 = bufferBaseSint32 + _70;
  _72 = *_71;
  *S32DataPtr = _72;
  # DEBUG BEGIN_STMT

  <bb 10> :
<L9>:
  return;

}


Com_EB_CheckRxSignalDM (const struct ComRxSignalExtType * SignalExtPtr, ComIPduRefType PduId)
{
  uint8 RxDMTout;
  boolean RxDMReplace;
  boolean D.11957;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RxDMReplace = 0;
  # DEBUG BEGIN_STMT
  _1 = SignalExtPtr->ComRxSignalExtFlags;
  _2 = (unsigned int) _1;
  _3 = _2 & 1;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = SignalExtPtr->ComRxSignalExtFlags;
  _5 = _4 >> 2;
  _6 = (unsigned int) _5;
  _7 = _6 & 1;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.803_8 = Com_gDataMemPtr;
  Com_gConfigPtr.804_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.804_9->ComRxTimeoutSignalStatusQueueBase;
  _11 = (unsigned int) _10;
  _12 = SignalExtPtr->RxSigDMQueueRef;
  _13 = _12 / 4;
  _14 = (unsigned int) _13;
  _15 = _11 + _14;
  _16 = Com_gDataMemPtr.803_8 + _15;
  _17 = *_16;
  _18 = (int) _17;
  _19 = SignalExtPtr->RxSigDMQueueRef;
  _20 = (unsigned int) _19;
  _21 = _20 & 3;
  _22 = _21 * 2;
  _23 = _18 >> _22;
  _24 = (unsigned char) _23;
  RxDMTout = _24 & 1;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.805_25 = Com_gDataMemPtr;
  Com_gConfigPtr.806_26 = Com_gConfigPtr;
  _27 = Com_gConfigPtr.806_26->ComRxIPduStatusBase;
  _28 = (int) _27;
  _29 = (int) PduId;
  _30 = _28 + _29;
  _31 = (sizetype) _30;
  _32 = Com_gDataMemPtr.805_25 + _31;
  _33 = *_32;
  _34 = _33 >> 2;
  RxDMTout = _34 & 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (RxDMTout == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  RxDMReplace = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.11957 = RxDMReplace;
  return D.11957;

}


Com_EB_ReadValue_Uint8Dyn (void * SignalDataPtr, uint16 * LengthPtr, const struct ComRxSignalType * SignalPtr, const struct ComRxIPduType * IPduPtr, ComIPduRefType PduId)
{
  const uint16 pduLength;
  const uint8 * const dataPtr;
  const uint8 * const initDataDynSigPtr;
  const uint8 * const initDataPduPtr;
  const boolean takeInitVal;
  const ComSignalDescBitType startbyte;
  ComSignalBitSizeType SigLen;
  uint8 retval;
  uint8 D.12013;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  startbyte = SignalPtr->ComSignalBase.ComSignalPositionInBit;
  # DEBUG BEGIN_STMT
  takeInitVal = Com_EB_Read_SignalReplace (SignalPtr);
  # DEBUG BEGIN_STMT
  if (takeInitVal == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = IPduPtr->ComIPduInitSize;
  SigLen = _1 - startbyte;
  # DEBUG BEGIN_STMT
  _2 = *LengthPtr;
  if (SigLen <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.832_3 = Com_gConfigPtr;
  _4 = IPduPtr->ComInitValueRef;
  initDataPduPtr = Com_gConfigPtr.832_3 + _4;
  # DEBUG BEGIN_STMT
  _5 = (sizetype) startbyte;
  initDataDynSigPtr = initDataPduPtr + _5;
  # DEBUG BEGIN_STMT
  _6 = (long unsigned int) SigLen;
  TS_MemCpy32 (SignalDataPtr, initDataDynSigPtr, _6);
  # DEBUG BEGIN_STMT
  retval = 0;
  goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.833_7 = Com_gDataMemPtr;
  _8 = SignalPtr->ComSignalBase.ComBufferRef;
  _9 = (int) _8;
  _10 = (int) startbyte;
  _11 = _9 + _10;
  _12 = (sizetype) _11;
  dataPtr = Com_gDataMemPtr.833_7 + _12;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.834_13 = Com_gDataMemPtr;
  Com_gConfigPtr.835_14 = Com_gConfigPtr;
  _15 = Com_gConfigPtr.835_14->ComRxIPduLengthBase;
  _16 = (sizetype) _15;
  _17 = Com_gDataMemPtr.834_13 + _16;
  _18 = (unsigned int) PduId;
  _19 = _18 * 2;
  _20 = _17 + _19;
  pduLength = *_20;
  # DEBUG BEGIN_STMT
  if (pduLength > startbyte)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SigLen = pduLength - startbyte;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  SigLen = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _21 = *LengthPtr;
  if (SigLen <= _21)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _22 = (long unsigned int) SigLen;
  TS_MemCpy32 (SignalDataPtr, dataPtr, _22);
  # DEBUG BEGIN_STMT
  retval = 0;

  <bb 10> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 11> :
  # DEBUG BEGIN_STMT
  *LengthPtr = SigLen;
  # DEBUG BEGIN_STMT
  D.12013 = retval;
  return D.12013;

}


Com_ReceiveShadowSignal (Com_SignalIdType SignalId, void * SignalDataPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_ReceiveSignal (SignalId, SignalDataPtr);
  # DEBUG BEGIN_STMT
  return;

}


Com_MainFunctionTx ()
{
  ComIPduRefType PduId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.736_1 = Com_InitStatus;
  if (Com_InitStatus.736_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PduId = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_EB_MainFunctionTx_hlp (PduId);
  # DEBUG BEGIN_STMT
  PduId.737_2 = PduId;
  PduId = PduId.737_2 + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.738_3 = Com_gConfigPtr;
  _4 = Com_gConfigPtr.738_3->ComTxIPduArraySize;
  if (PduId < _4)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_MainFunctionTx_hlp (ComIPduRefType PduId)
{
  const boolean transmit_cyclic;
  const boolean transmit_ntimes;
  uint8 * const IPduFlagBytePtr;
  const struct ComTxIPduType * IPduPtr;
  boolean transmit;
  int iftmp.744;
  int iftmp.743;

  <bb 2> :
  # DEBUG BEGIN_STMT
  transmit = 0;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.739_1 = Com_gConfigPtr;
  Com_gConfigPtr.740_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.740_2->ComTxIPduRef;
  _4 = (unsigned int) PduId;
  _5 = _4 * 64;
  _6 = _3 + _5;
  IPduPtr = Com_gConfigPtr.739_1 + _6;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.741_7 = Com_gDataMemPtr;
  Com_gConfigPtr.742_8 = Com_gConfigPtr;
  _9 = Com_gConfigPtr.742_8->ComTxIPduStatusBase;
  _10 = (int) _9;
  _11 = (int) PduId;
  _12 = _10 + _11;
  _13 = (sizetype) _12;
  IPduFlagBytePtr = Com_gDataMemPtr.741_7 + _13;
  # DEBUG BEGIN_STMT
  _14 = *IPduFlagBytePtr;
  _15 = (unsigned int) _14;
  _16 = _15 & 2;
  if (_16 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_CheckMdtforPdu (PduId, IPduPtr);

  <bb 4> :
  # DEBUG BEGIN_STMT
  _17 = *IPduFlagBytePtr;
  _18 = (unsigned int) _17;
  _19 = _18 & 1;
  if (_19 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  transmit = Com_EB_CheckTMSforPdu (PduId, IPduPtr);
  # DEBUG BEGIN_STMT
  _20 = *IPduFlagBytePtr;
  _21 = (unsigned int) _20;
  _22 = _21 & 32;
  if (_22 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_EB_CheckTxDMforPdu (PduId, IPduPtr);

  <bb 7> :
  # DEBUG BEGIN_STMT
  _23 = *IPduFlagBytePtr;
  _24 = (unsigned int) _23;
  _25 = _24 & 8;
  if (_25 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  transmit_ntimes = Com_EB_CheckNTimesSendforPdu (PduId, IPduPtr);
  # DEBUG BEGIN_STMT
  if (transmit != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (transmit_ntimes != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.743 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.743 = 0;

  <bb 12> :
  transmit = (boolean) iftmp.743;

  <bb 13> :
  # DEBUG BEGIN_STMT
  _26 = *IPduFlagBytePtr;
  _27 = (unsigned int) _26;
  _28 = _27 & 4;
  if (_28 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  transmit_cyclic = Com_EB_CheckPeriodicSendforPdu (PduId, IPduPtr);
  # DEBUG BEGIN_STMT
  if (transmit != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  if (transmit_cyclic != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.744 = 1;
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.744 = 0;

  <bb 18> :
  transmit = (boolean) iftmp.744;

  <bb 19> :
  # DEBUG BEGIN_STMT
  Com_EB_Handle_Send_Pdu (PduId, IPduPtr, IPduFlagBytePtr, transmit);

  <bb 20> :
  # DEBUG BEGIN_STMT
  Com_EB_HandleDeferredTxConfirm (IPduPtr);
  return;

}


Com_EB_Handle_Send_Pdu (ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr, uint8 * IPduFlagBytePtr, boolean transmit)
{
  boolean to_transmit;

  <bb 2> :
  # DEBUG BEGIN_STMT
  to_transmit = transmit;
  # DEBUG BEGIN_STMT
  _1 = *IPduFlagBytePtr;
  _2 = (unsigned int) _1;
  _3 = _2 & 2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (to_transmit == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  TS_AtomicSetBit_8 (IPduFlagBytePtr, 4);
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = *IPduFlagBytePtr;
  _5 = (unsigned int) _4;
  _6 = _5 & 16;
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  to_transmit = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (to_transmit == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  TS_AtomicClearBit_8 (IPduFlagBytePtr, 4);
  # DEBUG BEGIN_STMT
  Com_EB_Send_Pdu (PduId, IPduPtr);

  <bb 9> :
  return;

}


Com_EB_HandleDeferredTxConfirm (const struct ComTxIPduType * IPduPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = IPduPtr->ComTxIPduFlags;
  _2 = (unsigned int) _1;
  _3 = _2 & 1;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.790_4 = Com_gDataMemPtr;
  Com_gConfigPtr.791_5 = Com_gConfigPtr;
  _6 = Com_gConfigPtr.791_5->ComCbkTxAckDeferredStatusBase;
  _7 = (unsigned int) _6;
  _8 = IPduPtr->ComNotificationDeferredQueueRef;
  _9 = _8 / 8;
  _10 = (unsigned int) _9;
  _11 = _7 + _10;
  _12 = Com_gDataMemPtr.790_4 + _11;
  _13 = *_12;
  _14 = IPduPtr->ComNotificationDeferredQueueRef;
  _15 = (unsigned int) _14;
  _16 = _15 & 7;
  _17 = 1 << _16;
  _18 = (unsigned char) _17;
  _19 = _13 & _18;
  if (_19 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.792_20 = Com_gDataMemPtr;
  Com_gConfigPtr.793_21 = Com_gConfigPtr;
  _22 = Com_gConfigPtr.793_21->ComCbkTxAckDeferredStatusBase;
  _23 = IPduPtr->ComNotificationDeferredQueueRef;
  _24 = _23 / 8;
  _25 = _22 + _24;
  _26 = (sizetype) _25;
  _27 = Com_gDataMemPtr.792_20 + _26;
  _28 = IPduPtr->ComNotificationDeferredQueueRef;
  _29 = (long unsigned int) _28;
  _30 = _29 & 7;
  TS_AtomicClearBit_8 (_27, _30);
  # DEBUG BEGIN_STMT
  Com_EB_TxConfirmations (IPduPtr);

  <bb 5> :
  return;

}


Com_EB_CheckTxDMforPdu (ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr)
{
  uint8 AktTM;
  uint8 CurrentTMS;
  Com_CbkTxTOutIdxType j;
  ComTxTimeoutFactorType * const TxTimeoutQueueValPtr;
  ComTxTimeoutFactorType * const TxTimeoutQueueBase;
  uint8 * const IPduFlagBytePtr;
  boolean timeout;
  ComTxTimeoutFactorType CompTime;
  ComTxTimeoutFactorType globalTime;
  uint8 iftmp.767;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  timeout = 0;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.760_1 = Com_gDataMemPtr;
  Com_gConfigPtr.761_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.761_2->ComTxIPduStatusBase;
  _4 = (int) _3;
  _5 = (int) PduId;
  _6 = _4 + _5;
  _7 = (sizetype) _6;
  IPduFlagBytePtr = Com_gDataMemPtr.760_1 + _7;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.762_8 = Com_gDataMemPtr;
  Com_gConfigPtr.763_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.763_9->ComTxTimeoutQueueBase;
  _11 = (sizetype) _10;
  TxTimeoutQueueBase = Com_gDataMemPtr.762_8 + _11;
  # DEBUG BEGIN_STMT
  _12 = IPduPtr->TxDMQueueRef;
  _13 = (unsigned int) _12;
  _14 = _13 * 2;
  TxTimeoutQueueValPtr = TxTimeoutQueueBase + _14;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  CompTime = *TxTimeoutQueueValPtr;
  # DEBUG BEGIN_STMT
  if (globalTime == CompTime)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  timeout = 1;
  # DEBUG BEGIN_STMT
  _15 = *IPduFlagBytePtr;
  _16 = _15 & 223;
  *IPduFlagBytePtr = _16;
  # DEBUG BEGIN_STMT
  _17 = *IPduFlagBytePtr;
  _18 = _17 & 247;
  *IPduFlagBytePtr = _18;
  # DEBUG BEGIN_STMT
  _19 = *IPduFlagBytePtr;
  _20 = _19 & 253;
  *IPduFlagBytePtr = _20;

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (timeout != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  j = IPduPtr->ComTxTimeoutNotificationFirst;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.764_21 = Com_gConfigPtr;
  Com_gConfigPtr.765_22 = Com_gConfigPtr;
  _23 = Com_gConfigPtr.765_22->ComTxTimeoutNotificationRef;
  _24 = (unsigned int) j;
  _25 = _24 * 2;
  _26 = _23 + _25;
  _27 = Com_gConfigPtr.764_21 + _26;
  _28 = *_27;
  _29 = (int) _28;
  _30 = Com_CbkTxTOut_Array[_29];
  _30 ();
  # DEBUG BEGIN_STMT
  j.766_31 = j;
  j = j.766_31 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _32 = (int) j;
  _33 = IPduPtr->ComTxTimeoutNotificationFirst;
  _34 = (int) _33;
  _35 = IPduPtr->ComTxTimeoutNotificationNum;
  _36 = (int) _35;
  _37 = _34 + _36;
  if (_32 < _37)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = *IPduFlagBytePtr;
  _39 = _38 >> 6;
  CurrentTMS = _39 & 1;
  # DEBUG BEGIN_STMT
  if (CurrentTMS == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _40 = IPduPtr->ComTxModeModes;
  iftmp.767 = _40 & 15;
  goto <bb 11>; [INV]

  <bb 10> :
  _41 = IPduPtr->ComTxModeModes;
  iftmp.767 = _41 >> 4;

  <bb 11> :
  AktTM = iftmp.767;
  # DEBUG BEGIN_STMT
  if (AktTM == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Com_EB_TxDM_TMNone (IPduPtr, PduId);

  <bb 13> :
  return;

}


Com_EB_CheckMdtforPdu (ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr)
{
  ComTxIPduMinimumDelayTimeFactorType * const MDTQueueValPtr;
  ComTxIPduMinimumDelayTimeFactorType * const MDTQueueBase;
  uint8 * const PduFlagPtr;
  ComTxIPduMinimumDelayTimeFactorType CompTime;
  ComTxIPduMinimumDelayTimeFactorType globalTime;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.745_1 = Com_gDataMemPtr;
  Com_gConfigPtr.746_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.746_2->ComTxIPduStatusBase;
  _4 = (int) _3;
  _5 = (int) PduId;
  _6 = _4 + _5;
  _7 = (sizetype) _6;
  PduFlagPtr = Com_gDataMemPtr.745_1 + _7;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.747_8 = Com_gDataMemPtr;
  Com_gConfigPtr.748_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.748_9->ComMDTQueueBase;
  _11 = (sizetype) _10;
  MDTQueueBase = Com_gDataMemPtr.747_8 + _11;
  # DEBUG BEGIN_STMT
  _12 = IPduPtr->MDTQueueRef;
  _13 = (unsigned int) _12;
  _14 = _13 * 2;
  MDTQueueValPtr = MDTQueueBase + _14;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  CompTime = *MDTQueueValPtr;
  # DEBUG BEGIN_STMT
  if (globalTime == CompTime)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _15 = *PduFlagPtr;
  _16 = _15 & 253;
  *PduFlagPtr = _16;

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  return;

}


Com_EB_CheckNTimesSendforPdu (ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr)
{
  const struct ComTxModeMixedNTimesType * TMMixedNTimesPtr;
  const struct ComTxModeNTimesType * TMNTimesPtr;
  ComTxModeRepetitionPeriodFactorType * const NTimesQueueValNextTimePtr;
  ComTxModeRepetitionPeriodFactorType * const NTimesQueueBaseNextTimeBase;
  uint8 * const NTimesQueueValRemainingPtr;
  uint8 * const NTimesQueueBaseRemaining;
  boolean transmit;
  ComTxModeIdxType TMRef;
  uint8 AktTM;
  uint8 BitRes;
  uint8 N;
  ComTxModeRepetitionPeriodFactorType NPeriod;
  ComTxModeRepetitionPeriodFactorType CompTime;
  ComTxModeRepetitionPeriodFactorType globalTime;
  boolean D.11902;
  ComTxModeIdxType iftmp.775;
  uint8 iftmp.774;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NPeriod = 0;
  # DEBUG BEGIN_STMT
  N = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  transmit = 0;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.768_1 = Com_gDataMemPtr;
  Com_gConfigPtr.769_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.769_2->ComNTimesQueueBaseRemaining;
  _4 = (sizetype) _3;
  NTimesQueueBaseRemaining = Com_gDataMemPtr.768_1 + _4;
  # DEBUG BEGIN_STMT
  _5 = IPduPtr->NTimesQueueRef;
  _6 = (sizetype) _5;
  NTimesQueueValRemainingPtr = NTimesQueueBaseRemaining + _6;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.770_7 = Com_gDataMemPtr;
  Com_gConfigPtr.771_8 = Com_gConfigPtr;
  _9 = Com_gConfigPtr.771_8->ComNTimesQueueBaseNextTime;
  _10 = (sizetype) _9;
  NTimesQueueBaseNextTimeBase = Com_gDataMemPtr.770_7 + _10;
  # DEBUG BEGIN_STMT
  _11 = IPduPtr->NTimesQueueRef;
  _12 = (unsigned int) _11;
  _13 = _12 * 2;
  NTimesQueueValNextTimePtr = NTimesQueueBaseNextTimeBase + _13;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  CompTime = *NTimesQueueValNextTimePtr;
  # DEBUG BEGIN_STMT
  if (globalTime == CompTime)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.772_14 = Com_gDataMemPtr;
  Com_gConfigPtr.773_15 = Com_gConfigPtr;
  _16 = Com_gConfigPtr.773_15->ComTxIPduStatusBase;
  _17 = (int) _16;
  _18 = (int) PduId;
  _19 = _17 + _18;
  _20 = (sizetype) _19;
  _21 = Com_gDataMemPtr.772_14 + _20;
  _22 = *_21;
  _23 = _22 >> 6;
  BitRes = _23 & 1;
  # DEBUG BEGIN_STMT
  if (BitRes == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _24 = IPduPtr->ComTxModeModes;
  iftmp.774 = _24 & 15;
  goto <bb 6>; [INV]

  <bb 5> :
  _25 = IPduPtr->ComTxModeModes;
  iftmp.774 = _25 >> 4;

  <bb 6> :
  AktTM = iftmp.774;
  # DEBUG BEGIN_STMT
  if (BitRes == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.775 = IPduPtr->ComTxModeTrueRef;
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.775 = IPduPtr->ComTxModeFalseRef;

  <bb 9> :
  TMRef = iftmp.775;
  # DEBUG BEGIN_STMT
  _26 = (int) AktTM;
  switch (_26) <default: <L15> [INV], case 4: <L8> [INV], case 5: <L7> [INV]>

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.776_27 = Com_gConfigPtr;
  Com_gConfigPtr.777_28 = Com_gConfigPtr;
  _29 = Com_gConfigPtr.777_28->ComTxModeNTimesRef;
  _30 = (unsigned int) TMRef;
  _31 = _30 * 4;
  _32 = _29 + _31;
  TMNTimesPtr = Com_gConfigPtr.776_27 + _32;
  # DEBUG BEGIN_STMT
  NPeriod = TMNTimesPtr->ComTxModeRepetitionPeriodFactor;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.778_33 = Com_gConfigPtr;
  Com_gConfigPtr.779_34 = Com_gConfigPtr;
  _35 = Com_gConfigPtr.779_34->ComTxModeMixedNTimesRef;
  _36 = (unsigned int) TMRef;
  _37 = _36 * 8;
  _38 = _35 + _37;
  TMMixedNTimesPtr = Com_gConfigPtr.778_33 + _38;
  # DEBUG BEGIN_STMT
  NPeriod = TMMixedNTimesPtr->ComTxModeRepetitionPeriodFactor;
  # DEBUG BEGIN_STMT

  <bb 12> :
<L15>:
  # DEBUG BEGIN_STMT
  N = *NTimesQueueValRemainingPtr;

  <bb 13> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (N != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  transmit = 1;
  # DEBUG BEGIN_STMT
  _39 = IPduPtr->NTimesQueueRef;
  Com_EB_NTimesSendQueue (PduId, NPeriod, _39);

  <bb 15> :
  # DEBUG BEGIN_STMT
  D.11902 = transmit;
  return D.11902;

}


Com_EB_CheckPeriodicSendforPdu (ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr)
{
  const struct ComTxModePeriodicType * TMPeriodicPtr;
  const struct ComTxModeMixedNTimesType * TMMixedNTimesPtr;
  uint8 * const IPduFlagBytePtr;
  Com_PeriodicSendNextDueTimeType * const PeriodicQueueValPtr;
  Com_PeriodicSendNextDueTimeType * const PeriodicQueueBase;
  uint8 QueuedTxDM;
  boolean transmit;
  ComTxModeIdxType TMRef;
  uint8 AktTM;
  uint8 BitRes;
  Com_PeriodicSendNextDueTimeType Period;
  Com_PeriodicSendNextDueTimeType CompTime;
  Com_PeriodicSendNextDueTimeType globalTime;
  boolean D.11921;
  ComTxModeIdxType iftmp.785;
  uint8 iftmp.784;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Period = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  transmit = 0;
  # DEBUG BEGIN_STMT
  QueuedTxDM = 1;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.780_1 = Com_gDataMemPtr;
  Com_gConfigPtr.781_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.781_2->ComPeriodicQueueBase;
  _4 = (sizetype) _3;
  PeriodicQueueBase = Com_gDataMemPtr.780_1 + _4;
  # DEBUG BEGIN_STMT
  _5 = IPduPtr->PeriodicQueueRef;
  _6 = (unsigned int) _5;
  _7 = _6 * 2;
  PeriodicQueueValPtr = PeriodicQueueBase + _7;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.782_8 = Com_gDataMemPtr;
  Com_gConfigPtr.783_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.783_9->ComTxIPduStatusBase;
  _11 = (int) _10;
  _12 = (int) PduId;
  _13 = _11 + _12;
  _14 = (sizetype) _13;
  IPduFlagBytePtr = Com_gDataMemPtr.782_8 + _14;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  CompTime = *PeriodicQueueValPtr;
  # DEBUG BEGIN_STMT
  if (globalTime == CompTime)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _15 = *IPduFlagBytePtr;
  _16 = _15 >> 6;
  BitRes = _16 & 1;
  # DEBUG BEGIN_STMT
  if (BitRes == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _17 = IPduPtr->ComTxModeModes;
  iftmp.784 = _17 & 15;
  goto <bb 6>; [INV]

  <bb 5> :
  _18 = IPduPtr->ComTxModeModes;
  iftmp.784 = _18 >> 4;

  <bb 6> :
  AktTM = iftmp.784;
  # DEBUG BEGIN_STMT
  if (BitRes == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.785 = IPduPtr->ComTxModeTrueRef;
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.785 = IPduPtr->ComTxModeFalseRef;

  <bb 9> :
  TMRef = iftmp.785;
  # DEBUG BEGIN_STMT
  _19 = (int) AktTM;
  switch (_19) <default: <L20> [INV], case 1: <L8> [INV], case 3: <L8> [INV], case 4: <L7> [INV]>

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.786_20 = Com_gConfigPtr;
  Com_gConfigPtr.787_21 = Com_gConfigPtr;
  _22 = Com_gConfigPtr.787_21->ComTxModeMixedNTimesRef;
  _23 = (unsigned int) TMRef;
  _24 = _23 * 8;
  _25 = _22 + _24;
  TMMixedNTimesPtr = Com_gConfigPtr.786_20 + _25;
  # DEBUG BEGIN_STMT
  Period = TMMixedNTimesPtr->ComTxModeTimePeriodFactor;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.788_26 = Com_gConfigPtr;
  Com_gConfigPtr.789_27 = Com_gConfigPtr;
  _28 = Com_gConfigPtr.789_27->ComTxModePeriodicRef;
  _29 = (unsigned int) TMRef;
  _30 = _29 * 4;
  _31 = _28 + _30;
  TMPeriodicPtr = Com_gConfigPtr.788_26 + _31;
  # DEBUG BEGIN_STMT
  Period = TMPeriodicPtr->ComTxModeTimePeriodFactor;
  # DEBUG BEGIN_STMT

  <bb 12> :
<L20>:
  # DEBUG BEGIN_STMT
  _32 = IPduPtr->ComTxIPduFlags;
  _33 = _32 >> 1;
  _34 = (unsigned int) _33;
  _35 = _34 & 1;
  if (_35 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _36 = *IPduFlagBytePtr;
  _37 = _36 >> 5;
  QueuedTxDM = _37 & 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  transmit = 1;

  <bb 15> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (transmit == 1)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _38 = IPduPtr->PeriodicQueueRef;
  Com_EB_PeriodicSendQueue (Period, _38);

  <bb 17> :
  # DEBUG BEGIN_STMT
  if (QueuedTxDM == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _39 = IPduPtr->ComTxTimeoutFactorValue;
  _40 = IPduPtr->TxDMQueueRef;
  Com_EB_TxDMQueue (PduId, _39, _40);

  <bb 19> :
  # DEBUG BEGIN_STMT
  D.11921 = transmit;
  return D.11921;

}


Com_EB_TMSwitch (ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr, boolean CurrentTM)
{
  const struct ComTxModeMixedNTimesType * TMMixedNTimesPtr;
  ComTxModeIdxType TMRef;
  const struct ComTxModePeriodicType * TMPeriodicPtr;
  ComTxModeIdxType TMRef;
  uint8 * const IPduFlagBytePtr;
  Com_PeriodicSendNextDueTimeType TimeToSendPeriodic;
  uint8 mode;
  boolean transmit;
  boolean D.11877;
  ComTxModeIdxType iftmp.757;
  ComTxModeIdxType iftmp.754;
  uint8 iftmp.753;

  <bb 2> :
  # DEBUG BEGIN_STMT
  transmit = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeToSendPeriodic = 0;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.751_1 = Com_gDataMemPtr;
  Com_gConfigPtr.752_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.752_2->ComTxIPduStatusBase;
  _4 = (int) _3;
  _5 = (int) PduId;
  _6 = _4 + _5;
  _7 = (sizetype) _6;
  IPduFlagBytePtr = Com_gDataMemPtr.751_1 + _7;
  # DEBUG BEGIN_STMT
  if (CurrentTM == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _8 = IPduPtr->ComTxModeModes;
  iftmp.753 = _8 & 15;
  goto <bb 5>; [INV]

  <bb 4> :
  _9 = IPduPtr->ComTxModeModes;
  iftmp.753 = _9 >> 4;

  <bb 5> :
  mode = iftmp.753;
  # DEBUG BEGIN_STMT
  _10 = (int) mode;
  switch (_10) <default: <L24> [INV], case 0: <L3> [INV], case 1: <L6> [INV], case 2: <L4> [INV], case 3: <L6> [INV], case 4: <L11> [INV], case 5: <L5> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  TS_AtomicClearBit_8 (IPduFlagBytePtr, 5);

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  TS_AtomicClearBit_8 (IPduFlagBytePtr, 2);
  # DEBUG BEGIN_STMT
  TS_AtomicClearBit_8 (IPduFlagBytePtr, 3);
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  TS_AtomicClearBit_8 (IPduFlagBytePtr, 2);
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (CurrentTM == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.754 = IPduPtr->ComTxModeTrueRef;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.754 = IPduPtr->ComTxModeFalseRef;

  <bb 12> :
  TMRef = iftmp.754;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.755_11 = Com_gConfigPtr;
  Com_gConfigPtr.756_12 = Com_gConfigPtr;
  _13 = Com_gConfigPtr.756_12->ComTxModePeriodicRef;
  _14 = (unsigned int) TMRef;
  _15 = _14 * 4;
  _16 = _13 + _15;
  TMPeriodicPtr = Com_gConfigPtr.755_11 + _16;
  # DEBUG BEGIN_STMT
  TimeToSendPeriodic = TMPeriodicPtr->ComTxModeTimePeriodFactor;
  # DEBUG BEGIN_STMT
  TS_AtomicClearBit_8 (IPduFlagBytePtr, 3);
  # DEBUG BEGIN_STMT
  goto <bb 17>; [INV]

  <bb 13> :
<L11>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (CurrentTM == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  iftmp.757 = IPduPtr->ComTxModeTrueRef;
  goto <bb 16>; [INV]

  <bb 15> :
  iftmp.757 = IPduPtr->ComTxModeFalseRef;

  <bb 16> :
  TMRef = iftmp.757;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.758_17 = Com_gConfigPtr;
  Com_gConfigPtr.759_18 = Com_gConfigPtr;
  _19 = Com_gConfigPtr.759_18->ComTxModeMixedNTimesRef;
  _20 = (unsigned int) TMRef;
  _21 = _20 * 8;
  _22 = _19 + _21;
  TMMixedNTimesPtr = Com_gConfigPtr.758_17 + _22;
  # DEBUG BEGIN_STMT
  TimeToSendPeriodic = TMMixedNTimesPtr->ComTxModeTimePeriodFactor;
  # DEBUG BEGIN_STMT

  <bb 17> :
<L24>:
  # DEBUG BEGIN_STMT
  if (TimeToSendPeriodic != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _23 = IPduPtr->PeriodicQueueRef;
  Com_EB_PeriodicSendQueue (TimeToSendPeriodic, _23);
  # DEBUG BEGIN_STMT
  TS_AtomicSetBit_8 (IPduFlagBytePtr, 2);
  # DEBUG BEGIN_STMT
  _24 = IPduPtr->ComTxIPduFlags;
  _25 = _24 >> 1;
  _26 = (unsigned int) _25;
  _27 = _26 & 1;
  if (_27 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _28 = *IPduFlagBytePtr;
  _29 = (unsigned int) _28;
  _30 = _29 & 32;
  if (_30 == 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _31 = IPduPtr->ComTxTimeoutFactorValue;
  _32 = IPduPtr->TxDMQueueRef;
  Com_EB_TxDMQueue (PduId, _31, _32);

  <bb 21> :
  # DEBUG BEGIN_STMT
  transmit = 1;

  <bb 22> :
  # DEBUG BEGIN_STMT
  D.11877 = transmit;
  return D.11877;

}


Com_EB_CheckTMSforPdu (ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr)
{
  uint8 * const IPduFlagBytePtr;
  boolean transmit;
  boolean newTM;
  boolean D.11857;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  transmit = 0;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.749_1 = Com_gDataMemPtr;
  Com_gConfigPtr.750_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.750_2->ComTxIPduStatusBase;
  _4 = (int) _3;
  _5 = (int) PduId;
  _6 = _4 + _5;
  _7 = (sizetype) _6;
  IPduFlagBytePtr = Com_gDataMemPtr.749_1 + _7;
  # DEBUG BEGIN_STMT
  _8 = *IPduFlagBytePtr;
  _9 = (signed char) _8;
  if (_9 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  TS_AtomicClearBit_8 (IPduFlagBytePtr, 7);
  # DEBUG BEGIN_STMT
  _10 = *IPduFlagBytePtr;
  _11 = _10 >> 6;
  newTM = _11 & 1;
  # DEBUG BEGIN_STMT
  transmit = Com_EB_TMSwitch (PduId, IPduPtr, newTM);

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.11857 = transmit;
  return D.11857;

}


Com_MainFunctionRx ()
{
  const struct ComRxIPduType * IPduPtr;
  uint16 RxPduCount;
  uint16 i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.627_1 = Com_InitStatus;
  if (Com_InitStatus.627_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Com_GlobalTime.628_2 = Com_GlobalTime;
  _3 = Com_GlobalTime.628_2 + 1;
  Com_GlobalTime = _3;
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.629_4 = Com_gConfigPtr;
  RxPduCount = Com_gConfigPtr.629_4->ComRxIPduArraySize;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.630_5 = Com_gConfigPtr;
  Com_gConfigPtr.631_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.631_6->ComRxIPduRef;
  _8 = (unsigned int) i;
  _9 = _8 * 48;
  _10 = _7 + _9;
  IPduPtr = Com_gConfigPtr.630_5 + _10;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.632_11 = Com_gDataMemPtr;
  Com_gConfigPtr.633_12 = Com_gConfigPtr;
  _13 = Com_gConfigPtr.633_12->ComRxIPduStatusBase;
  _14 = (int) _13;
  _15 = (int) i;
  _16 = _14 + _15;
  _17 = (sizetype) _16;
  _18 = Com_gDataMemPtr.632_11 + _17;
  _19 = *_18;
  _20 = (unsigned int) _19;
  _21 = _20 & 8;
  if (_21 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.634_22 = Com_gDataMemPtr;
  Com_gConfigPtr.635_23 = Com_gConfigPtr;
  _24 = Com_gConfigPtr.635_23->ComRxIPduStatusBase;
  _25 = (int) _24;
  _26 = (int) i;
  _27 = _25 + _26;
  _28 = (sizetype) _27;
  _29 = Com_gDataMemPtr.634_22 + _28;
  TS_AtomicClearBit_8 (_29, 3);
  # DEBUG BEGIN_STMT
  Com_EB_NotifyReceivers (IPduPtr, i);

  <bb 6> :
  # DEBUG BEGIN_STMT
  i.636_30 = i;
  i = i.636_30 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (i < RxPduCount)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Com_EB_CheckRxDMTable ();
  # DEBUG BEGIN_STMT
  Com_EB_CheckRxSignalDMTable ();
  # DEBUG BEGIN_STMT
  Com_EB_CheckRxSignalGroupDMTable ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_CheckRxSignalGroupDMTable ()
{
  const struct ComRxSignalExtType * const SignalExtPtr;
  const struct ComRxSignalGroupType * SignalGPtr;
  const ComSignalGroupRefType AktSignalGId;
  Com_RxDMNextDueTimeType * const RxTimeoutSignalGroupQueueBase;
  boolean invokeCbks;
  ComSignalGroupRefType i;
  Com_RxDMNextDueTimeType CompTime;
  Com_RxDMNextDueTimeType globalTime;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  invokeCbks = 0;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.722_1 = Com_gDataMemPtr;
  Com_gConfigPtr.723_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.723_2->ComRxTimeoutSignalGroupQueueBase;
  _4 = (sizetype) _3;
  RxTimeoutSignalGroupQueueBase = Com_gDataMemPtr.722_1 + _4;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.724_5 = Com_gConfigPtr;
  Com_gConfigPtr.725_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.725_6->ComRxTimeoutSignalGroupQueueListRef;
  _8 = (unsigned int) i;
  _9 = _8 * 2;
  _10 = _7 + _9;
  _11 = Com_gConfigPtr.724_5 + _10;
  AktSignalGId = *_11;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.726_12 = Com_gConfigPtr;
  Com_gConfigPtr.727_13 = Com_gConfigPtr;
  _14 = Com_gConfigPtr.727_13->ComRxSignalGroupRef;
  _15 = (unsigned int) AktSignalGId;
  _16 = _15 * 10;
  _17 = _14 + _16;
  SignalGPtr = Com_gConfigPtr.726_12 + _17;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.728_18 = Com_gConfigPtr;
  Com_gConfigPtr.729_19 = Com_gConfigPtr;
  _20 = Com_gConfigPtr.729_19->ComRxSignalExtRef;
  _21 = SignalGPtr->ComSignalExtRef;
  _22 = (unsigned int) _21;
  _23 = _22 * 14;
  _24 = _20 + _23;
  SignalExtPtr = Com_gConfigPtr.728_18 + _24;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.730_25 = Com_gDataMemPtr;
  Com_gConfigPtr.731_26 = Com_gConfigPtr;
  _27 = Com_gConfigPtr.731_26->ComRxDMInvSignalGroupStatusQueueBase;
  _28 = (unsigned int) _27;
  _29 = SignalExtPtr->RxSigDMQueueRef;
  _30 = _29 / 4;
  _31 = (unsigned int) _30;
  _32 = _28 + _31;
  _33 = Com_gDataMemPtr.730_25 + _32;
  _34 = *_33;
  _35 = SignalExtPtr->RxSigDMQueueRef;
  _36 = (unsigned int) _35;
  _37 = _36 & 3;
  _38 = _37 * 2;
  _39 = _38 + 1;
  _40 = 1 << _39;
  _41 = (unsigned char) _40;
  _42 = _34 & _41;
  if (_42 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _43 = (unsigned int) i;
  _44 = _43 * 2;
  _45 = RxTimeoutSignalGroupQueueBase + _44;
  CompTime = *_45;
  # DEBUG BEGIN_STMT
  if (globalTime == CompTime)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.732_46 = Com_gDataMemPtr;
  Com_gConfigPtr.733_47 = Com_gConfigPtr;
  _48 = Com_gConfigPtr.733_47->ComRxDMInvSignalGroupStatusQueueBase;
  _49 = (unsigned int) _48;
  _50 = SignalExtPtr->RxSigDMQueueRef;
  _51 = _50 / 4;
  _52 = (unsigned int) _51;
  _53 = _49 + _52;
  _54 = Com_gDataMemPtr.732_46 + _53;
  _55 = SignalExtPtr->RxSigDMQueueRef;
  _56 = _55 & 3;
  _57 = _56 * 2;
  _58 = (long unsigned int) _57;
  TS_AtomicSetBit_8 (_54, _58);
  # DEBUG BEGIN_STMT
  _59 = SignalExtPtr->ComRxTimeoutFactorValue;
  Com_EB_RxDMSignalGroupQueue (SignalGPtr, _59);
  # DEBUG BEGIN_STMT
  invokeCbks = 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (invokeCbks == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _60 = SignalExtPtr->ComRxTimeoutNotification;
  if (_60 != 65535)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _61 = SignalExtPtr->ComRxTimeoutNotification;
  _62 = (int) _61;
  _63 = Com_CbkRxTOut_Array[_62];
  _63 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  i.734_64 = i;
  i = i.734_64 + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.735_65 = Com_gConfigPtr;
  _66 = Com_gConfigPtr.735_65->ComRxTimeoutSignalGroupQueueMax;
  if (i < _66)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_CheckRxSignalDMTable ()
{
  const struct ComRxSignalExtType * const SignalExtPtr;
  const struct ComRxSignalType * const SignalPtr;
  const ComSignalRefType AktSignalId;
  Com_RxDMNextDueTimeType * const RxTimeoutSignalQueueBase;
  boolean invokeCbks;
  ComSignalRefType i;
  Com_RxDMNextDueTimeType CompTime;
  Com_RxDMNextDueTimeType globalTime;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  invokeCbks = 0;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.708_1 = Com_gDataMemPtr;
  Com_gConfigPtr.709_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.709_2->ComRxTimeoutSignalQueueBase;
  _4 = (sizetype) _3;
  RxTimeoutSignalQueueBase = Com_gDataMemPtr.708_1 + _4;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.710_5 = Com_gConfigPtr;
  Com_gConfigPtr.711_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.711_6->ComRxTimeoutSignalQueueListRef;
  _8 = (unsigned int) i;
  _9 = _8 * 2;
  _10 = _7 + _9;
  _11 = Com_gConfigPtr.710_5 + _10;
  AktSignalId = *_11;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.712_12 = Com_gConfigPtr;
  Com_gConfigPtr.713_13 = Com_gConfigPtr;
  _14 = Com_gConfigPtr.713_13->ComRxSignalRef;
  _15 = (unsigned int) AktSignalId;
  _16 = _15 * 20;
  _17 = _14 + _16;
  SignalPtr = Com_gConfigPtr.712_12 + _17;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.714_18 = Com_gConfigPtr;
  Com_gConfigPtr.715_19 = Com_gConfigPtr;
  _20 = Com_gConfigPtr.715_19->ComRxSignalExtRef;
  _21 = SignalPtr->ComSignalExtRef;
  _22 = (unsigned int) _21;
  _23 = _22 * 14;
  _24 = _20 + _23;
  SignalExtPtr = Com_gConfigPtr.714_18 + _24;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.716_25 = Com_gDataMemPtr;
  Com_gConfigPtr.717_26 = Com_gConfigPtr;
  _27 = Com_gConfigPtr.717_26->ComRxTimeoutSignalStatusQueueBase;
  _28 = (unsigned int) _27;
  _29 = SignalExtPtr->RxSigDMQueueRef;
  _30 = _29 / 4;
  _31 = (unsigned int) _30;
  _32 = _28 + _31;
  _33 = Com_gDataMemPtr.716_25 + _32;
  _34 = *_33;
  _35 = SignalExtPtr->RxSigDMQueueRef;
  _36 = (unsigned int) _35;
  _37 = _36 & 3;
  _38 = _37 * 2;
  _39 = _38 + 1;
  _40 = 1 << _39;
  _41 = (unsigned char) _40;
  _42 = _34 & _41;
  if (_42 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _43 = (unsigned int) i;
  _44 = _43 * 2;
  _45 = RxTimeoutSignalQueueBase + _44;
  CompTime = *_45;
  # DEBUG BEGIN_STMT
  if (globalTime == CompTime)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.718_46 = Com_gDataMemPtr;
  Com_gConfigPtr.719_47 = Com_gConfigPtr;
  _48 = Com_gConfigPtr.719_47->ComRxTimeoutSignalStatusQueueBase;
  _49 = (unsigned int) _48;
  _50 = SignalExtPtr->RxSigDMQueueRef;
  _51 = _50 / 4;
  _52 = (unsigned int) _51;
  _53 = _49 + _52;
  _54 = Com_gDataMemPtr.718_46 + _53;
  _55 = SignalExtPtr->RxSigDMQueueRef;
  _56 = _55 & 3;
  _57 = _56 * 2;
  _58 = (long unsigned int) _57;
  TS_AtomicSetBit_8 (_54, _58);
  # DEBUG BEGIN_STMT
  _59 = SignalExtPtr->ComRxTimeoutFactorValue;
  Com_EB_RxDMSignalQueue (SignalExtPtr, _59);
  # DEBUG BEGIN_STMT
  invokeCbks = 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (invokeCbks == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _60 = SignalExtPtr->ComRxTimeoutNotification;
  if (_60 != 65535)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _61 = SignalExtPtr->ComRxTimeoutNotification;
  _62 = (int) _61;
  _63 = Com_CbkRxTOut_Array[_62];
  _63 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  i.720_64 = i;
  i = i.720_64 + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.721_65 = Com_gConfigPtr;
  _66 = Com_gConfigPtr.721_65->ComRxTimeoutSignalQueueMax;
  if (i < _66)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_CheckRxDMTable ()
{
  Com_CbkRxTOutIdxType j;
  ComIPduRefType AktPduId;
  Com_RxDMNextDueTimeType * const RxTimeoutQueueBase;
  const struct ComRxIPduType * IPduPtr;
  boolean invokeCbks;
  ComIPduRefType i;
  Com_RxDMNextDueTimeType CompTime;
  Com_RxDMNextDueTimeType globalTime;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  invokeCbks = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.691_1 = Com_gDataMemPtr;
  Com_gConfigPtr.692_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.692_2->ComRxTimeoutQueueBase;
  _4 = (sizetype) _3;
  RxTimeoutQueueBase = Com_gDataMemPtr.691_1 + _4;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.693_5 = Com_gConfigPtr;
  Com_gConfigPtr.694_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.694_6->ComRxTimeoutQueueListRef;
  _8 = (unsigned int) i;
  _9 = _8 * 2;
  _10 = _7 + _9;
  _11 = Com_gConfigPtr.693_5 + _10;
  AktPduId = *_11;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.695_12 = Com_gConfigPtr;
  Com_gConfigPtr.696_13 = Com_gConfigPtr;
  _14 = Com_gConfigPtr.696_13->ComRxIPduRef;
  _15 = (unsigned int) AktPduId;
  _16 = _15 * 48;
  _17 = _14 + _16;
  IPduPtr = Com_gConfigPtr.695_12 + _17;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.697_18 = Com_gDataMemPtr;
  Com_gConfigPtr.698_19 = Com_gConfigPtr;
  _20 = Com_gConfigPtr.698_19->ComRxIPduStatusBase;
  _21 = (int) _20;
  _22 = (int) AktPduId;
  _23 = _21 + _22;
  _24 = (sizetype) _23;
  _25 = Com_gDataMemPtr.697_18 + _24;
  _26 = *_25;
  _27 = (unsigned int) _26;
  _28 = _27 & 2;
  if (_28 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _29 = (unsigned int) i;
  _30 = _29 * 2;
  _31 = RxTimeoutQueueBase + _30;
  CompTime = *_31;
  # DEBUG BEGIN_STMT
  if (globalTime == CompTime)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.699_32 = Com_gDataMemPtr;
  Com_gConfigPtr.700_33 = Com_gConfigPtr;
  _34 = Com_gConfigPtr.700_33->ComRxIPduStatusBase;
  _35 = (int) _34;
  _36 = (int) AktPduId;
  _37 = _35 + _36;
  _38 = (sizetype) _37;
  _39 = Com_gDataMemPtr.699_32 + _38;
  _40 = *_39;
  Com_gDataMemPtr.701_41 = Com_gDataMemPtr;
  Com_gConfigPtr.702_42 = Com_gConfigPtr;
  _43 = Com_gConfigPtr.702_42->ComRxIPduStatusBase;
  _44 = (int) _43;
  _45 = (int) AktPduId;
  _46 = _44 + _45;
  _47 = (sizetype) _46;
  _48 = Com_gDataMemPtr.701_41 + _47;
  _49 = _40 | 4;
  *_48 = _49;
  # DEBUG BEGIN_STMT
  _50 = IPduPtr->ComRxTimeoutFactorValue;
  Com_EB_RxDMQueue (IPduPtr, _50);
  # DEBUG BEGIN_STMT
  invokeCbks = 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (invokeCbks == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  j = IPduPtr->ComRxTimeoutNotificationFirst;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.703_51 = Com_gConfigPtr;
  Com_gConfigPtr.704_52 = Com_gConfigPtr;
  _53 = Com_gConfigPtr.704_52->ComRxTimeoutNotificationRef;
  _54 = (unsigned int) j;
  _55 = _54 * 2;
  _56 = _53 + _55;
  _57 = Com_gConfigPtr.703_51 + _56;
  _58 = *_57;
  _59 = (int) _58;
  _60 = Com_CbkRxTOut_Array[_59];
  _60 ();
  # DEBUG BEGIN_STMT
  j.705_61 = j;
  j = j.705_61 + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _62 = (int) j;
  _63 = IPduPtr->ComRxTimeoutNotificationFirst;
  _64 = (int) _63;
  _65 = IPduPtr->ComRxTimeoutNotificationNum;
  _66 = (int) _65;
  _67 = _64 + _66;
  if (_62 < _67)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  i.706_68 = i;
  i = i.706_68 + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.707_69 = Com_gConfigPtr;
  _70 = Com_gConfigPtr.707_69->ComRxTimeoutQueueMax;
  if (i < _70)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  return;

}


Com_MainFunctionRouteSignals ()
{
  const struct ComRxIPduType * const IPduPtr;
  const ComIPduRefType IPduId;
  uint16 sigGWRxPduRef;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.523_1 = Com_InitStatus;
  if (Com_InitStatus.523_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  sigGWRxPduRef = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.524_2 = Com_gConfigPtr;
  Com_gConfigPtr.525_3 = Com_gConfigPtr;
  _4 = Com_gConfigPtr.525_3->ComSigGWRxIPduListRef;
  _5 = (unsigned int) sigGWRxPduRef;
  _6 = _5 * 2;
  _7 = _4 + _6;
  _8 = Com_gConfigPtr.524_2 + _7;
  IPduId = *_8;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.526_9 = Com_gConfigPtr;
  Com_gConfigPtr.527_10 = Com_gConfigPtr;
  _11 = Com_gConfigPtr.527_10->ComRxIPduRef;
  _12 = (unsigned int) IPduId;
  _13 = _12 * 48;
  _14 = _11 + _13;
  IPduPtr = Com_gConfigPtr.526_9 + _14;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.528_15 = Com_gDataMemPtr;
  Com_gConfigPtr.529_16 = Com_gConfigPtr;
  _17 = Com_gConfigPtr.529_16->ComSigGWRxPduFlagBase;
  _18 = (unsigned int) _17;
  _19 = IPduPtr->ComIPduSigGWFlagBit;
  _20 = _19 / 8;
  _21 = (unsigned int) _20;
  _22 = _18 + _21;
  _23 = Com_gDataMemPtr.528_15 + _22;
  _24 = *_23;
  _25 = IPduPtr->ComIPduSigGWFlagBit;
  _26 = (unsigned int) _25;
  _27 = _26 & 7;
  _28 = 1 << _27;
  _29 = (unsigned char) _28;
  _30 = _24 & _29;
  if (_30 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.530_31 = Com_gDataMemPtr;
  Com_gConfigPtr.531_32 = Com_gConfigPtr;
  _33 = Com_gConfigPtr.531_32->ComSigGWRxPduFlagBase;
  _34 = (unsigned int) _33;
  _35 = IPduPtr->ComIPduSigGWFlagBit;
  _36 = _35 / 8;
  _37 = (unsigned int) _36;
  _38 = _34 + _37;
  _39 = Com_gDataMemPtr.530_31 + _38;
  _40 = IPduPtr->ComIPduSigGWFlagBit;
  _41 = (long unsigned int) _40;
  _42 = _41 & 7;
  TS_AtomicClearBit_8 (_39, _42);
  # DEBUG BEGIN_STMT
  Com_MainFunctionRouteSignals_Src_Generic_hlp (IPduPtr);

  <bb 6> :
  # DEBUG BEGIN_STMT
  sigGWRxPduRef.532_43 = sigGWRxPduRef;
  sigGWRxPduRef = sigGWRxPduRef.532_43 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.533_44 = Com_gConfigPtr;
  _45 = Com_gConfigPtr.533_44->ComSigGWRxIPduArraySize;
  if (sigGWRxPduRef < _45)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  return;

}


Com_MainFunctionRouteSignals_Src_Generic_hlp (const struct ComRxIPduType * const SrcIPduPtr)
{
  const struct ComGWSourceType * const GWSourcePtr;
  ComGWSourceRefType sigGWSourceRef;
  boolean routeGroupSignals;

  <bb 2> :
  # DEBUG BEGIN_STMT
  routeGroupSignals = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  sigGWSourceRef = SrcIPduPtr->ComIPduGWSourceRefFirst;
  goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.534_1 = Com_gConfigPtr;
  Com_gConfigPtr.535_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.535_2->ComGWSourceRef;
  _4 = (unsigned int) sigGWSourceRef;
  _5 = _4 * 12;
  _6 = _3 + _5;
  GWSourcePtr = Com_gConfigPtr.534_1 + _6;
  # DEBUG BEGIN_STMT
  _7 = GWSourcePtr->ComGWSourceSelect;
  _8 = (int) _7;
  switch (_8) <default: <L8> [INV], case 0: <L1> [INV], case 1: <L2> [INV], case 2: <L3> [INV]>

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  Com_EB_RouteSignal (GWSourcePtr, SrcIPduPtr);
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  routeGroupSignals = Com_EB_RouteSignalGroup (SrcIPduPtr, GWSourcePtr);
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  Com_EB_RouteGroupSignal (GWSourcePtr, routeGroupSignals);
  # DEBUG BEGIN_STMT

  <bb 7> :
<L8>:
  # DEBUG BEGIN_STMT
  sigGWSourceRef.536_9 = sigGWSourceRef;
  sigGWSourceRef = sigGWSourceRef.536_9 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _10 = (int) sigGWSourceRef;
  _11 = SrcIPduPtr->ComIPduGWSourceRefFirst;
  _12 = (int) _11;
  _13 = SrcIPduPtr->ComIPduGWSourceRefNum;
  _14 = (int) _13;
  _15 = _12 + _14;
  if (_10 < _15)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Com_EB_CheckSendSignalGroup ();
  return;

}


Com_EB_RouteSignal (const struct ComGWSourceType * GWSourcePtr, const struct ComRxIPduType * SrcIPduPtr)
{
  uint8 * SrcDataPtr;
  const struct ComRxSignalExtType * const SignalExtPtr;
  uint8 GateSignal;
  const struct ComRxSignalType * const SrcSignalPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.537_1 = Com_gConfigPtr;
  _2 = GWSourcePtr->ComGWSourceRef;
  SrcSignalPtr = Com_gConfigPtr.537_1 + _2;
  # DEBUG BEGIN_STMT
  GateSignal = 1;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.538_3 = Com_gConfigPtr;
  Com_gConfigPtr.539_4 = Com_gConfigPtr;
  _5 = Com_gConfigPtr.539_4->ComRxSignalExtRef;
  _6 = SrcSignalPtr->ComSignalExtRef;
  _7 = (unsigned int) _6;
  _8 = _7 * 14;
  _9 = _5 + _8;
  SignalExtPtr = Com_gConfigPtr.538_3 + _9;
  # DEBUG BEGIN_STMT
  _10 = SignalExtPtr->ComRxSignalExtFlags;
  _11 = _10 >> 1;
  _12 = (unsigned int) _11;
  _13 = _12 & 1;
  if (_13 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.540_14 = Com_gDataMemPtr;
  _15 = SrcIPduPtr->ComIPduValueRef;
  _16 = (unsigned int) _15;
  _17 = SignalExtPtr->ComUpdateBitPositionInBit;
  _18 = _17 / 8;
  _19 = (unsigned int) _18;
  _20 = _16 + _19;
  _21 = Com_gDataMemPtr.540_14 + _20;
  _22 = *_21;
  _23 = (int) _22;
  _24 = SignalExtPtr->ComUpdateBitPositionInBit;
  _25 = (unsigned char) _24;
  _26 = (int) _25;
  _27 = _26 & 7;
  _28 = _23 >> _27;
  _29 = (unsigned char) _28;
  GateSignal = _29 & 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (GateSignal == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.541_30 = Com_gDataMemPtr;
  _31 = SrcIPduPtr->ComIPduValueRef;
  _32 = (sizetype) _31;
  SrcDataPtr = Com_gDataMemPtr.541_30 + _32;
  # DEBUG BEGIN_STMT
  Com_EB_RouteSignalHelper (SrcSignalPtr, GWSourcePtr, SrcDataPtr);

  <bb 6> :
  return;

}


Com_EB_RouteGroupSignal (const struct ComGWSourceType * GWSourcePtr, boolean routeGroupSignals)
{
  uint8 * SrcDataPtr;
  const struct ComSignalBaseType * const Com_EB_ReadPropPtr;
  const struct ComRxSignalType * const SrcSignalPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (routeGroupSignals == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.616_1 = Com_gConfigPtr;
  _2 = GWSourcePtr->ComGWSourceRef;
  SrcSignalPtr = Com_gConfigPtr.616_1 + _2;
  # DEBUG BEGIN_STMT
  Com_EB_ReadPropPtr = &SrcSignalPtr->ComSignalBase;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.617_3 = Com_gDataMemPtr;
  _4 = Com_EB_ReadPropPtr->ComBufferRef;
  _5 = (sizetype) _4;
  SrcDataPtr = Com_gDataMemPtr.617_3 + _5;
  # DEBUG BEGIN_STMT
  Com_EB_RouteSignalHelper (SrcSignalPtr, GWSourcePtr, SrcDataPtr);

  <bb 4> :
  return;

}


Com_EB_RouteSignalGroup (const struct ComRxIPduType * SrcIPduPtr, const struct ComGWSourceType * GWSourcePtr)
{
  const struct ComGWDestinationType * const GWDestinationPtr;
  ComGWDestinationRefType GWDestinationRef;
  const struct ComRxSignalExtType * const SignalExtPtr;
  uint8 SignalUpdated;
  boolean routeGroupSignals;
  const ComRAMIdxType PosInSrcIPdu;
  const struct ComRxSignalGroupType * const SrcSignalGPtr;
  boolean D.11615;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.562_1 = Com_gConfigPtr;
  _2 = GWSourcePtr->ComGWSourceRef;
  SrcSignalGPtr = Com_gConfigPtr.562_1 + _2;
  # DEBUG BEGIN_STMT
  _3 = SrcSignalGPtr->ComSignalPositionInByte;
  _4 = SrcIPduPtr->ComIPduValueRef;
  PosInSrcIPdu = _3 + _4;
  # DEBUG BEGIN_STMT
  routeGroupSignals = 0;
  # DEBUG BEGIN_STMT
  SignalUpdated = 1;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.563_5 = Com_gConfigPtr;
  Com_gConfigPtr.564_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.564_6->ComRxSignalExtRef;
  _8 = SrcSignalGPtr->ComSignalExtRef;
  _9 = (unsigned int) _8;
  _10 = _9 * 14;
  _11 = _7 + _10;
  SignalExtPtr = Com_gConfigPtr.563_5 + _11;
  # DEBUG BEGIN_STMT
  _12 = SignalExtPtr->ComRxSignalExtFlags;
  _13 = _12 >> 1;
  _14 = (unsigned int) _13;
  _15 = _14 & 1;
  if (_15 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.565_16 = Com_gDataMemPtr;
  _17 = SrcIPduPtr->ComIPduValueRef;
  _18 = (unsigned int) _17;
  _19 = SignalExtPtr->ComUpdateBitPositionInBit;
  _20 = _19 / 8;
  _21 = (unsigned int) _20;
  _22 = _18 + _21;
  _23 = Com_gDataMemPtr.565_16 + _22;
  _24 = *_23;
  _25 = (int) _24;
  _26 = SignalExtPtr->ComUpdateBitPositionInBit;
  _27 = (unsigned char) _26;
  _28 = (int) _27;
  _29 = _28 & 7;
  _30 = _25 >> _29;
  _31 = (unsigned char) _30;
  SignalUpdated = _31 & 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (SignalUpdated == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _32 = GWSourcePtr->ComGWDestinationNumRef;
  if (_32 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  GWDestinationRef = GWSourcePtr->ComGWDestinationFirstRef;
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.566_33 = Com_gConfigPtr;
  Com_gConfigPtr.567_34 = Com_gConfigPtr;
  _35 = Com_gConfigPtr.567_34->ComGWDestinationRef;
  _36 = (unsigned int) GWDestinationRef;
  _37 = _36 * 8;
  _38 = _35 + _37;
  GWDestinationPtr = Com_gConfigPtr.566_33 + _38;
  # DEBUG BEGIN_STMT
  _39 = GWDestinationPtr->ComGWDestinationSelect;
  _40 = (int) _39;
  if (_40 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  Com_EB_RouteSG_2_SG (GWDestinationPtr, PosInSrcIPdu);
  # DEBUG BEGIN_STMT

  <bb 9> :
  # DEBUG BEGIN_STMT
  GWDestinationRef.568_41 = GWDestinationRef;
  GWDestinationRef = GWDestinationRef.568_41 + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _42 = (int) GWDestinationRef;
  _43 = GWSourcePtr->ComGWDestinationFirstRef;
  _44 = (int) _43;
  _45 = GWSourcePtr->ComGWDestinationNumRef;
  _46 = (int) _45;
  _47 = _44 + _46;
  if (_42 < _47)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  routeGroupSignals = 1;
  # DEBUG BEGIN_STMT
  Com_EB_RouteReceiveSignalGroup (SrcSignalGPtr);

  <bb 12> :
  # DEBUG BEGIN_STMT
  D.11615 = routeGroupSignals;
  return D.11615;

}


Com_EB_RouteReceiveSignalGroup (const struct ComRxSignalGroupType * SignalGPtr)
{
  uint8 retval;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 0;
  # DEBUG BEGIN_STMT
  Com_SetupRxSignalGroup (&retval, 0B, SignalGPtr, Com_CopyRxSignalGroupArray_Shadow);
  # DEBUG BEGIN_STMT
  retval = {CLOBBER};
  return;

}


Com_EB_RouteSG_2_SG (const struct ComGWDestinationType * GWDestinationPtr, ComRAMIdxType PosInSrcIPdu)
{
  const struct ComTxIPduType * const DestIPduPtr;
  const ComIPduRefType DestPduId;
  const struct ComTxSignalGroupType * const DestSignalGPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.569_1 = Com_gConfigPtr;
  _2 = GWDestinationPtr->ComGWDestinationRef;
  DestSignalGPtr = Com_gConfigPtr.569_1 + _2;
  # DEBUG BEGIN_STMT
  DestPduId = DestSignalGPtr->ComIPduRef;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.570_3 = Com_gConfigPtr;
  Com_gConfigPtr.571_4 = Com_gConfigPtr;
  _5 = Com_gConfigPtr.571_4->ComTxIPduRef;
  _6 = (unsigned int) DestPduId;
  _7 = _6 * 64;
  _8 = _5 + _7;
  DestIPduPtr = Com_gConfigPtr.570_3 + _8;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.572_9 = Com_gDataMemPtr;
  _10 = (sizetype) PosInSrcIPdu;
  _11 = Com_gDataMemPtr.572_9 + _10;
  Com_EB_SendSignalGroupArray (_11, DestSignalGPtr, DestPduId, DestIPduPtr, 1);
  return;

}


Com_EB_RouteSignalHelper_Write (const struct ComRxSignalType * SrcSignalPtr, const struct ComTxSignalType * DestSignalPtr, const void * SignalDataPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  const uint16 index;
  void (*<T69f>) (const void *, uint8 *, const struct ComTxSignalType *, struct Com_EB_WriteIntDataType *) fptr;
  uint8 * const DestDataPtr;
  const ComIPduSizeType SrcPduSize;
  ComSignalBitSizeType DestSigLength;
  const ComSignalDescBitType SrcSigStartByte;
  ComIPduSizeType * const SrcSigDatLenPtr;
  const struct ComRxIPduType * const IPduPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = SrcSignalPtr->ComSignalBase.ComRxSignalFlags;
  _2 = _1 >> 7;
  _3 = (unsigned char) _2;
  _4 = (unsigned int) _3;
  _5 = _4 & 15;
  if (_5 == 8)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.548_6 = Com_gConfigPtr;
  Com_gConfigPtr.549_7 = Com_gConfigPtr;
  _8 = Com_gConfigPtr.549_7->ComRxIPduRef;
  _9 = SrcSignalPtr->ComIPduRef;
  _10 = (unsigned int) _9;
  _11 = _10 * 48;
  _12 = _8 + _11;
  IPduPtr = Com_gConfigPtr.548_6 + _12;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.550_13 = Com_gDataMemPtr;
  Com_gConfigPtr.551_14 = Com_gConfigPtr;
  _15 = Com_gConfigPtr.551_14->ComRxIPduLengthBase;
  _16 = (sizetype) _15;
  _17 = Com_gDataMemPtr.550_13 + _16;
  _18 = SrcSignalPtr->ComIPduRef;
  _19 = (unsigned int) _18;
  _20 = _19 * 2;
  SrcSigDatLenPtr = _17 + _20;
  # DEBUG BEGIN_STMT
  SrcSigStartByte = SrcSignalPtr->ComSignalBase.ComSignalPositionInBit;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SrcPduSize = *SrcSigDatLenPtr;
  # DEBUG BEGIN_STMT
  if (SrcPduSize <= SrcSigStartByte)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  DestSigLength = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  DestSigLength = SrcPduSize - SrcSigStartByte;

  <bb 6> :
  # DEBUG BEGIN_STMT
  IntDataPtr->arraySize = DestSigLength;
  # DEBUG BEGIN_STMT
  Com_EB_WriteDynSignal_ExitArea_0 (SignalDataPtr, DestSignalPtr, IntDataPtr);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.552_21 = Com_gDataMemPtr;
  _22 = DestSignalPtr->ComSignalBase.ComBufferRef;
  _23 = (sizetype) _22;
  DestDataPtr = Com_gDataMemPtr.552_21 + _23;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _24 = DestSignalPtr->ComSignalBase.ComBitSize;
  IntDataPtr->arraySize = _24;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _25 = DestSignalPtr->ComTxSignalFlags;
  index = _25 & 511;
  # DEBUG BEGIN_STMT
  _26 = (int) index;
  fptr = Com_WriteFuncs[_26];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, DestDataPtr, DestSignalPtr, IntDataPtr);

  <bb 8> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_RouteSignalHelper (const struct ComRxSignalType * SrcSignalPtr, const struct ComGWSourceType * GWSourcePtr, uint8 * SrcDataPtr)
{
  const ComSignalGroupRefType SignalGId;
  struct Com_EB_WriteIntDataType IntData;
  const struct ComTxSignalType * const DestSignalPtr;
  const struct ComGWDestinationType * const GWDestinationPtr;
  ComSignalDescBitType StartByte;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  Com_TS_SignalTypeType SignalType;
  const struct ComSignalBaseType * const Com_EB_ReadPropPtr;
  ComGWDestinationRefType i;
  void * SignalDataPtr;
  struct ComEmu64Type valuint64;
  boolean valboolean;
  uint8 valuint8;
  uint16 valuint16;
  uint32 valuint32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SignalDataPtr = &valuint8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_EB_ReadPropPtr = &SrcSignalPtr->ComSignalBase;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  _2 = _1 >> 7;
  _3 = (unsigned char) _2;
  SignalType = _3 & 15;
  # DEBUG BEGIN_STMT
  _4 = SignalType + 249;
  if (_4 > 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  _5 = (int) SignalType;
  switch (_5) <default: <L21> [INV], case 0: <L1> [INV], case 1: <L4> [INV], case 2: <L6> [INV], case 3: <L2> [INV], case 4: <L4> [INV], case 5: <L6> [INV], case 6: <L2> [INV], case 9 ... 10: <L8> [INV]>

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _6 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _6 & 63;
  # DEBUG BEGIN_STMT
  _7 = (int) index;
  fptr = Com_ReadFuncs[_7].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&valboolean, SrcDataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SignalDataPtr = &valboolean;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _8 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _8 & 63;
  # DEBUG BEGIN_STMT
  _9 = (int) index;
  fptr = Com_ReadFuncs[_9].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&valuint8, SrcDataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SignalDataPtr = &valuint8;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 6> :
<L4>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _10 & 63;
  # DEBUG BEGIN_STMT
  _11 = (int) index;
  fptr = Com_ReadFuncs[_11].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&valuint16, SrcDataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SignalDataPtr = &valuint16;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 7> :
<L6>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _12 & 63;
  # DEBUG BEGIN_STMT
  _13 = (int) index;
  fptr = Com_ReadFuncs[_13].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&valuint32, SrcDataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SignalDataPtr = &valuint32;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 8> :
<L8>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _14 & 63;
  # DEBUG BEGIN_STMT
  _15 = (int) index;
  fptr = Com_ReadFuncs[_15].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&valuint64, SrcDataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SignalDataPtr = &valuint64;
  # DEBUG BEGIN_STMT

  <bb 9> :
<L21>:
  retval = {CLOBBER};
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  StartByte = SrcSignalPtr->ComSignalBase.ComSignalPositionInBit;
  # DEBUG BEGIN_STMT
  _16 = (sizetype) StartByte;
  SignalDataPtr = SrcDataPtr + _16;

  <bb 11> :
  # DEBUG BEGIN_STMT
  i = GWSourcePtr->ComGWDestinationFirstRef;
  goto <bb 16>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.542_17 = Com_gConfigPtr;
  Com_gConfigPtr.543_18 = Com_gConfigPtr;
  _19 = Com_gConfigPtr.543_18->ComGWDestinationRef;
  _20 = (unsigned int) i;
  _21 = _20 * 8;
  _22 = _19 + _21;
  GWDestinationPtr = Com_gConfigPtr.542_17 + _22;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.544_23 = Com_gConfigPtr;
  _24 = GWDestinationPtr->ComGWDestinationRef;
  DestSignalPtr = Com_gConfigPtr.544_23 + _24;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IntData.arraySize = 0;
  # DEBUG BEGIN_STMT
  IntData.trigger = 0;
  # DEBUG BEGIN_STMT
  IntData.SendSigRetval = 128;
  # DEBUG BEGIN_STMT
  IntData.SendInMainFunctionTx = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IntData.TMSChanged = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _25 = GWDestinationPtr->ComGWDestinationSelect;
  _26 = (int) _25;
  switch (_26) <default: <L22> [INV], case 0: <L15> [INV], case 2: <L16> [INV]>

  <bb 13> :
<L15>:
  # DEBUG BEGIN_STMT
  _27 = Com_GetSendSignalRetVal (DestSignalPtr);
  IntData.SendSigRetval = _27;
  # DEBUG BEGIN_STMT
  Com_EB_RouteSignalHelper_Write (SrcSignalPtr, DestSignalPtr, SignalDataPtr, &IntData);
  # DEBUG BEGIN_STMT
  Com_EB_SendSignal_Transmit (DestSignalPtr, &IntData);
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 14> :
<L16>:
  # DEBUG BEGIN_STMT
  SignalGId = DestSignalPtr->ComSignalBase.ComSignalGroupRef;
  # DEBUG BEGIN_STMT
  IntData.SendSigRetval = 128;
  # DEBUG BEGIN_STMT
  Com_EB_RouteSignalHelper_Write (SrcSignalPtr, DestSignalPtr, SignalDataPtr, &IntData);
  # DEBUG BEGIN_STMT
  Com_EB_SetSendSignalGroup (SignalGId);
  # DEBUG BEGIN_STMT

  <bb 15> :
<L22>:
  IntData = {CLOBBER};
  # DEBUG BEGIN_STMT
  i.545_28 = i;
  i = i.545_28 + 1;

  <bb 16> :
  # DEBUG BEGIN_STMT
  _29 = (int) i;
  _30 = GWSourcePtr->ComGWDestinationFirstRef;
  _31 = (int) _30;
  _32 = GWSourcePtr->ComGWDestinationNumRef;
  _33 = (int) _32;
  _34 = _31 + _33;
  if (_29 < _34)
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  valuint32 = {CLOBBER};
  valuint16 = {CLOBBER};
  valuint8 = {CLOBBER};
  valboolean = {CLOBBER};
  valuint64 = {CLOBBER};
  return;

}


Com_EB_CheckSendSignalGroup ()
{
  const struct ComTxSignalGroupType * const SignalGPtr;
  const ComSignalGroupRefType SignalGId;
  ComSignalGroupRefType * const TxSignalGroupQueueBase;
  uint8 retval;
  uint8 exit_flag;
  ComSignalGroupRefType ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  exit_flag = 1;
  # DEBUG BEGIN_STMT
  retval = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.618_1 = Com_gDataMemPtr;
  Com_gConfigPtr.619_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.619_2->ComSigGWTxSignalGroupQueueBase;
  _4 = (sizetype) _3;
  TxSignalGroupQueueBase = Com_gDataMemPtr.618_1 + _4;
  # DEBUG BEGIN_STMT
  _5 = (unsigned int) ii;
  _6 = _5 * 2;
  _7 = TxSignalGroupQueueBase + _6;
  SignalGId = *_7;
  # DEBUG BEGIN_STMT
  if (SignalGId != 65535)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.620_8 = Com_gConfigPtr;
  Com_gConfigPtr.621_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.621_9->ComTxSignalGroupRef;
  _11 = (unsigned int) SignalGId;
  _12 = _11 * 32;
  _13 = _10 + _12;
  SignalGPtr = Com_gConfigPtr.620_8 + _13;
  # DEBUG BEGIN_STMT
  _14 = (unsigned int) ii;
  _15 = _14 * 2;
  _16 = TxSignalGroupQueueBase + _15;
  *_16 = 65535;
  # DEBUG BEGIN_STMT
  Com_SetupTxSignalGroup (0B, 0, Com_EB_SendSignalGroup, SignalGPtr, &retval, 1);
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  exit_flag = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  ii.622_17 = ii;
  ii = ii.622_17 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.623_18 = Com_gConfigPtr;
  _19 = Com_gConfigPtr.623_18->ComSigGWTxSignalGroupQueueMax;
  if (ii < _19)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  if (exit_flag == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  retval = {CLOBBER};
  return;

}


Com_EB_SetSendSignalGroup (ComSignalGroupRefType SignalGId)
{
  ComSignalGroupRefType * const TxSignalGroupQueueBase;
  uint8 exit_flag;
  ComSignalGroupRefType ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  exit_flag = 1;
  # DEBUG BEGIN_STMT
  ii = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.558_1 = Com_gDataMemPtr;
  Com_gConfigPtr.559_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.559_2->ComSigGWTxSignalGroupQueueBase;
  _4 = (sizetype) _3;
  TxSignalGroupQueueBase = Com_gDataMemPtr.558_1 + _4;
  # DEBUG BEGIN_STMT
  _5 = (unsigned int) ii;
  _6 = _5 * 2;
  _7 = TxSignalGroupQueueBase + _6;
  _8 = *_7;
  if (SignalGId == _8)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  exit_flag = 0;
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = (unsigned int) ii;
  _10 = _9 * 2;
  _11 = TxSignalGroupQueueBase + _10;
  _12 = *_11;
  if (_12 == 65535)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _13 = (unsigned int) ii;
  _14 = _13 * 2;
  _15 = TxSignalGroupQueueBase + _14;
  *_15 = SignalGId;
  # DEBUG BEGIN_STMT
  exit_flag = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii.560_16 = ii;
  ii = ii.560_16 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.561_17 = Com_gConfigPtr;
  _18 = Com_gConfigPtr.561_17->ComSigGWTxSignalGroupQueueMax;
  if (ii < _18)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  if (exit_flag == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}


Com_SetIpduGroup (uint8 * ipduGroupVector, Com_IpduGroupIdType ipduGroupId, boolean bitval)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.521_1 = Com_InitStatus;
  if (Com_InitStatus.521_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 29, 2);
  goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ipduGroupVector == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 29, 3);
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.522_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.522_2->ComIPduGroupsNum;
  if (ipduGroupId >= _3)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 29, 1);
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (bitval == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _4 = ipduGroupId / 8;
  _5 = (sizetype) _4;
  _6 = ipduGroupVector + _5;
  _7 = *_6;
  _8 = (unsigned int) ipduGroupId;
  _9 = _8 & 7;
  _10 = 1 << _9;
  _11 = (unsigned char) _10;
  _12 = ~_11;
  _13 = ipduGroupId / 8;
  _14 = (sizetype) _13;
  _15 = ipduGroupVector + _14;
  _16 = _7 & _12;
  *_15 = _16;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _17 = ipduGroupId / 8;
  _18 = (sizetype) _17;
  _19 = ipduGroupVector + _18;
  _20 = *_19;
  _21 = (unsigned int) ipduGroupId;
  _22 = _21 & 7;
  _23 = 1 << _22;
  _24 = (unsigned char) _23;
  _25 = ipduGroupId / 8;
  _26 = (sizetype) _25;
  _27 = ipduGroupVector + _26;
  _28 = _20 | _24;
  *_27 = _28;

  <bb 11> :
  # DEBUG BEGIN_STMT
  return;

}


Com_ClearIpduGroupVector (uint8 * ipduGroupVector)
{
  uint16 iPduGroupVectorByte;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.519_1 = Com_InitStatus;
  if (Com_InitStatus.519_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 28, 2);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ipduGroupVector == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 28, 3);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  iPduGroupVectorByte = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _2 = (sizetype) iPduGroupVectorByte;
  _3 = ipduGroupVector + _2;
  *_3 = 0;
  # DEBUG BEGIN_STMT
  iPduGroupVectorByte.520_4 = iPduGroupVectorByte;
  iPduGroupVectorByte = iPduGroupVectorByte.520_4 + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (iPduGroupVectorByte <= 3)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  return;

}


Com_Init (const struct Com_ConfigType * Com_ConfigPtr)
{
  ComSignalGroupRefType * const TxSignalGroupQueueBase;
  ComRAMIdxType ii;
  ComRAMIdxType numBytes;
  ComRAMIdxType i;
  const struct Com_ConfigType * TmpCfgPtr;
  ComIPduRefType pdu;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TmpCfgPtr = Com_ConfigPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_IsValidConfig (TmpCfgPtr);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 1, 3);
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr = TmpCfgPtr;
  # DEBUG BEGIN_STMT
  pdu = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_EB_InitStartRxIPdu (pdu);
  # DEBUG BEGIN_STMT
  pdu.502_2 = pdu;
  pdu = pdu.502_2 + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _3 = TmpCfgPtr->ComRxIPduArraySize;
  if (pdu < _3)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  pdu = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Com_EB_InitStartTxIPdu (pdu);
  # DEBUG BEGIN_STMT
  pdu.503_4 = pdu;
  pdu = pdu.503_4 + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _5 = TmpCfgPtr->ComTxIPduArraySize;
  if (pdu < _5)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.504_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.504_6->ComCbkTxAckDeferredListMax;
  _8 = (unsigned int) _7;
  _9 = _8 + 7;
  _10 = _9 / 8;
  numBytes = (ComRAMIdxType) _10;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.505_11 = Com_gConfigPtr;
  i = Com_gConfigPtr.505_11->ComCbkTxAckDeferredStatusBase;
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.506_12 = Com_gDataMemPtr;
  _13 = (sizetype) i;
  _14 = Com_gDataMemPtr.506_12 + _13;
  *_14 = 0;
  # DEBUG BEGIN_STMT
  i.507_15 = i;
  i = i.507_15 + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  _16 = (int) i;
  Com_gConfigPtr.508_17 = Com_gConfigPtr;
  _18 = Com_gConfigPtr.508_17->ComCbkTxAckDeferredStatusBase;
  _19 = (int) _18;
  _20 = (int) numBytes;
  _21 = _19 + _20;
  if (_16 < _21)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.509_22 = Com_gDataMemPtr;
  Com_gConfigPtr.510_23 = Com_gConfigPtr;
  _24 = Com_gConfigPtr.510_23->ComSigGWTxSignalGroupQueueBase;
  _25 = (sizetype) _24;
  TxSignalGroupQueueBase = Com_gDataMemPtr.509_22 + _25;
  # DEBUG BEGIN_STMT
  ii = 0;
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _26 = (unsigned int) ii;
  _27 = _26 * 2;
  _28 = TxSignalGroupQueueBase + _27;
  *_28 = 65535;
  # DEBUG BEGIN_STMT
  ii.511_29 = ii;
  ii = ii.511_29 + 1;

  <bb 15> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.512_30 = Com_gConfigPtr;
  _31 = Com_gConfigPtr.512_30->ComSigGWTxSignalGroupQueueMax;
  if (ii < _31)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Com_InitStatus = 1;

  <bb 17> :
  # DEBUG BEGIN_STMT
  return;

}


Com_GetConfigurationId ()
{
  uint32 ConfigId;
  uint32 D.11546;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.500_1 = Com_InitStatus;
  if (Com_InitStatus.500_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 8, 2);
  # DEBUG BEGIN_STMT
  ConfigId = 4294967295;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.501_2 = Com_gConfigPtr;
  ConfigId = Com_gConfigPtr.501_2->ComConfigurationId;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.11546 = ConfigId;
  return D.11546;

}


Com_EB_FilterSint64 (const struct ComFilterConfType * ComFilterPropPtr, const void * SignalDataPtr)
{
  uint8 FilterResult_new_equals_x;
  uint8 FilterResult_new_differs_x;
  const struct ComEmu64Type * SignalDataPtr_loc;
  struct ComFilterConfType ComFilterProp_loc;
  uint8 FilterResult;
  boolean D.11297;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FilterResult = 0;
  # DEBUG BEGIN_STMT
  ComFilterProp_loc = *ComFilterPropPtr;
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = ComFilterPropPtr->ComFilterType;
  if (_1 == 7)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = ComFilterPropPtr->ComFilterRef;
  FilterResult = Com_EB_FilterOneEveryN (_2);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = &SignalDataPtr_loc->LoWord;
  FilterResult = Com_EB_FilterUint32 (ComFilterPropPtr, _3);
  # DEBUG BEGIN_STMT
  _4 = ComFilterProp_loc.ComFilterRef;
  _5 = _4;
  _6 = _5 + 1;
  ComFilterProp_loc.ComFilterRef = _6;
  # DEBUG BEGIN_STMT
  _7 = ComFilterPropPtr->ComFilterType;
  _8 = (int) _7;
  switch (_8) <default: <L9> [INV], case 3: <L2> [INV], case 4: <L3> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _9 = &SignalDataPtr_loc->HiWord;
  FilterResult_new_differs_x = Com_EB_FilterUint32 (&ComFilterProp_loc, _9);
  # DEBUG BEGIN_STMT
  FilterResult = FilterResult | FilterResult_new_differs_x;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _10 = &SignalDataPtr_loc->HiWord;
  FilterResult_new_equals_x = Com_EB_FilterUint32 (&ComFilterProp_loc, _10);
  # DEBUG BEGIN_STMT
  FilterResult = FilterResult & FilterResult_new_equals_x;
  # DEBUG BEGIN_STMT

  <bb 7> :
<L9>:
  # DEBUG BEGIN_STMT
  D.11297 = FilterResult;
  ComFilterProp_loc = {CLOBBER};
  return D.11297;

}


Com_EB_FilterUint64 (const struct ComFilterConfType * ComFilterPropPtr, const void * SignalDataPtr)
{
  uint8 FilterResult_new_equals_x;
  uint8 FilterResult_new_differs_x;
  const struct ComEmu64Type * SignalDataPtr_loc;
  struct ComFilterConfType ComFilterProp_loc;
  uint8 FilterResult;
  boolean D.11304;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FilterResult = 0;
  # DEBUG BEGIN_STMT
  ComFilterProp_loc = *ComFilterPropPtr;
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = ComFilterPropPtr->ComFilterType;
  if (_1 == 7)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = ComFilterPropPtr->ComFilterRef;
  FilterResult = Com_EB_FilterOneEveryN (_2);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = &SignalDataPtr_loc->LoWord;
  FilterResult = Com_EB_FilterUint32 (ComFilterPropPtr, _3);
  # DEBUG BEGIN_STMT
  _4 = ComFilterProp_loc.ComFilterRef;
  _5 = _4;
  _6 = _5 + 1;
  ComFilterProp_loc.ComFilterRef = _6;
  # DEBUG BEGIN_STMT
  _7 = ComFilterPropPtr->ComFilterType;
  _8 = (int) _7;
  switch (_8) <default: <L9> [INV], case 3: <L2> [INV], case 4: <L3> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _9 = &SignalDataPtr_loc->HiWord;
  FilterResult_new_differs_x = Com_EB_FilterUint32 (&ComFilterProp_loc, _9);
  # DEBUG BEGIN_STMT
  FilterResult = FilterResult | FilterResult_new_differs_x;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _10 = &SignalDataPtr_loc->HiWord;
  FilterResult_new_equals_x = Com_EB_FilterUint32 (&ComFilterProp_loc, _10);
  # DEBUG BEGIN_STMT
  FilterResult = FilterResult & FilterResult_new_equals_x;
  # DEBUG BEGIN_STMT

  <bb 7> :
<L9>:
  # DEBUG BEGIN_STMT
  D.11304 = FilterResult;
  ComFilterProp_loc = {CLOBBER};
  return D.11304;

}


Com_EB_FilterSint32 (const struct ComFilterConfType * ComFilterPropPtr, const void * SignalDataPtr)
{
  sint32 * const bufferBaseSint32;
  uint32 XOrMax;
  uint32 maskOrMin;
  const struct ComFilter32BitMaskXMinMaxType * const FilterPtr;
  sint32 oldVal;
  uint32 * const bufferBaseSint32;
  uint32 mask;
  const ComFilter32BitMaskType * const maskPtr;
  sint32 NewVal;
  boolean FilterResult;
  boolean D.11290;
  int iftmp.249;
  int iftmp.246;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FilterResult = 0;
  # DEBUG BEGIN_STMT
  NewVal = MEM[(const sint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  _1 = ComFilterPropPtr->ComFilterType;
  _2 = (int) _1;
  switch (_2) <default: <L2> [INV], case 2: <L0> [INV], case 7: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.236_3 = Com_gConfigPtr;
  Com_gConfigPtr.237_4 = Com_gConfigPtr;
  _5 = Com_gConfigPtr.237_4->ComFilter32BitMaskRef;
  _6 = ComFilterPropPtr->ComFilterRef;
  _7 = (unsigned int) _6;
  _8 = _7 * 4;
  _9 = _5 + _8;
  maskPtr = Com_gConfigPtr.236_3 + _9;
  # DEBUG BEGIN_STMT
  mask = *maskPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.238_10 = Com_gDataMemPtr;
  Com_gConfigPtr.239_11 = Com_gConfigPtr;
  _12 = Com_gConfigPtr.239_11->ComBufferBaseSInt32;
  _13 = (sizetype) _12;
  bufferBaseSint32 = Com_gDataMemPtr.238_10 + _13;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = ComFilterPropPtr->ComFilterSignalValueRef;
  _15 = (unsigned int) _14;
  _16 = _15 * 4;
  _17 = bufferBaseSint32 + _16;
  _18 = *_17;
  oldVal = (sint32) _18;
  # DEBUG BEGIN_STMT
  NewVal.240_19 = (long unsigned int) NewVal;
  oldVal.241_20 = (long unsigned int) oldVal;
  _21 = NewVal.240_19 ^ oldVal.241_20;
  _22 = mask & _21;
  _23 = _22 != 0;
  FilterResult = (boolean) _23;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _24 = ComFilterPropPtr->ComFilterRef;
  FilterResult = Com_EB_FilterOneEveryN (_24);
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.242_25 = Com_gConfigPtr;
  Com_gConfigPtr.243_26 = Com_gConfigPtr;
  _27 = Com_gConfigPtr.243_26->ComFilter32BitMaskXMinMaxRef;
  _28 = ComFilterPropPtr->ComFilterRef;
  _29 = (unsigned int) _28;
  _30 = _29 * 8;
  _31 = _27 + _30;
  FilterPtr = Com_gConfigPtr.242_25 + _31;
  # DEBUG BEGIN_STMT
  maskOrMin = FilterPtr->ComFilterMaskOrMin;
  # DEBUG BEGIN_STMT
  XOrMax = FilterPtr->ComFilterXOrMax;
  # DEBUG BEGIN_STMT
  _32 = ComFilterPropPtr->ComFilterType;
  _33 = (int) _32;
  switch (_33) <default: <L24> [INV], case 3: <L4> [INV], case 4: <L3> [INV], case 5: <L10> [INV], case 6: <L5> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  NewVal.244_34 = (long unsigned int) NewVal;
  _35 = maskOrMin & NewVal.244_34;
  _36 = XOrMax == _35;
  FilterResult = (boolean) _36;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  NewVal.245_37 = (long unsigned int) NewVal;
  _38 = maskOrMin & NewVal.245_37;
  _39 = XOrMax != _38;
  FilterResult = (boolean) _39;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  maskOrMin.247_40 = (long int) maskOrMin;
  if (NewVal >= maskOrMin.247_40)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  XOrMax.248_41 = (long int) XOrMax;
  if (NewVal <= XOrMax.248_41)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.246 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.246 = 0;

  <bb 12> :
  FilterResult = (boolean) iftmp.246;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 13> :
<L10>:
  # DEBUG BEGIN_STMT
  maskOrMin.250_42 = (long int) maskOrMin;
  if (NewVal < maskOrMin.250_42)
    goto <bb 15>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  XOrMax.251_43 = (long int) XOrMax;
  if (NewVal > XOrMax.251_43)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.249 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.249 = 0;

  <bb 17> :
  FilterResult = (boolean) iftmp.249;
  # DEBUG BEGIN_STMT

  <bb 18> :
<L24>:
  # DEBUG BEGIN_STMT
  if (FilterResult == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _44 = ComFilterPropPtr->ComFilterSignalValueRef;
  if (_44 != 65535)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.252_45 = Com_gDataMemPtr;
  Com_gConfigPtr.253_46 = Com_gConfigPtr;
  _47 = Com_gConfigPtr.253_46->ComBufferBaseSInt32;
  _48 = (sizetype) _47;
  bufferBaseSint32 = Com_gDataMemPtr.252_45 + _48;
  # DEBUG BEGIN_STMT
  _49 = ComFilterPropPtr->ComFilterSignalValueRef;
  _50 = (unsigned int) _49;
  _51 = _50 * 4;
  _52 = bufferBaseSint32 + _51;
  *_52 = NewVal;

  <bb 21> :
  # DEBUG BEGIN_STMT
  D.11290 = FilterResult;
  return D.11290;

}


Com_EB_FilterUint32 (const struct ComFilterConfType * ComFilterPropPtr, const void * SignalDataPtr)
{
  uint32 * const bufferBaseUint32;
  uint32 XOrMax;
  uint32 maskOrMin;
  const struct ComFilter32BitMaskXMinMaxType * const FilterPtr;
  uint32 oldVal;
  uint32 * const bufferBaseUint32;
  uint32 mask;
  const ComFilter32BitMaskType * const maskPtr;
  uint32 NewVal;
  boolean FilterResult;
  boolean D.11236;
  int iftmp.197;
  int iftmp.196;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FilterResult = 0;
  # DEBUG BEGIN_STMT
  NewVal = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  _1 = ComFilterPropPtr->ComFilterType;
  _2 = (int) _1;
  switch (_2) <default: <L2> [INV], case 2: <L0> [INV], case 7: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.190_3 = Com_gConfigPtr;
  Com_gConfigPtr.191_4 = Com_gConfigPtr;
  _5 = Com_gConfigPtr.191_4->ComFilter32BitMaskRef;
  _6 = ComFilterPropPtr->ComFilterRef;
  _7 = (unsigned int) _6;
  _8 = _7 * 4;
  _9 = _5 + _8;
  maskPtr = Com_gConfigPtr.190_3 + _9;
  # DEBUG BEGIN_STMT
  mask = *maskPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.192_10 = Com_gDataMemPtr;
  Com_gConfigPtr.193_11 = Com_gConfigPtr;
  _12 = Com_gConfigPtr.193_11->ComBufferBaseUInt32;
  _13 = (sizetype) _12;
  bufferBaseUint32 = Com_gDataMemPtr.192_10 + _13;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = ComFilterPropPtr->ComFilterSignalValueRef;
  _15 = (unsigned int) _14;
  _16 = _15 * 4;
  _17 = bufferBaseUint32 + _16;
  oldVal = *_17;
  # DEBUG BEGIN_STMT
  _18 = NewVal ^ oldVal;
  _19 = mask & _18;
  _20 = _19 != 0;
  FilterResult = (boolean) _20;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _21 = ComFilterPropPtr->ComFilterRef;
  FilterResult = Com_EB_FilterOneEveryN (_21);
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.194_22 = Com_gConfigPtr;
  Com_gConfigPtr.195_23 = Com_gConfigPtr;
  _24 = Com_gConfigPtr.195_23->ComFilter32BitMaskXMinMaxRef;
  _25 = ComFilterPropPtr->ComFilterRef;
  _26 = (unsigned int) _25;
  _27 = _26 * 8;
  _28 = _24 + _27;
  FilterPtr = Com_gConfigPtr.194_22 + _28;
  # DEBUG BEGIN_STMT
  maskOrMin = FilterPtr->ComFilterMaskOrMin;
  # DEBUG BEGIN_STMT
  XOrMax = FilterPtr->ComFilterXOrMax;
  # DEBUG BEGIN_STMT
  _29 = ComFilterPropPtr->ComFilterType;
  _30 = (int) _29;
  switch (_30) <default: <L24> [INV], case 3: <L4> [INV], case 4: <L3> [INV], case 5: <L10> [INV], case 6: <L5> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _31 = NewVal & maskOrMin;
  _32 = XOrMax == _31;
  FilterResult = (boolean) _32;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _33 = NewVal & maskOrMin;
  _34 = XOrMax != _33;
  FilterResult = (boolean) _34;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  if (maskOrMin <= NewVal)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (NewVal <= XOrMax)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.196 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.196 = 0;

  <bb 12> :
  FilterResult = (boolean) iftmp.196;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 13> :
<L10>:
  # DEBUG BEGIN_STMT
  if (maskOrMin > NewVal)
    goto <bb 15>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  if (NewVal > XOrMax)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.197 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.197 = 0;

  <bb 17> :
  FilterResult = (boolean) iftmp.197;
  # DEBUG BEGIN_STMT

  <bb 18> :
<L24>:
  # DEBUG BEGIN_STMT
  if (FilterResult == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _35 = ComFilterPropPtr->ComFilterSignalValueRef;
  if (_35 != 65535)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.198_36 = Com_gDataMemPtr;
  Com_gConfigPtr.199_37 = Com_gConfigPtr;
  _38 = Com_gConfigPtr.199_37->ComBufferBaseUInt32;
  _39 = (sizetype) _38;
  bufferBaseUint32 = Com_gDataMemPtr.198_36 + _39;
  # DEBUG BEGIN_STMT
  _40 = ComFilterPropPtr->ComFilterSignalValueRef;
  _41 = (unsigned int) _40;
  _42 = _41 * 4;
  _43 = bufferBaseUint32 + _42;
  *_43 = NewVal;

  <bb 21> :
  # DEBUG BEGIN_STMT
  D.11236 = FilterResult;
  return D.11236;

}


Com_EB_FilterSint16 (const struct ComFilterConfType * ComFilterPropPtr, const void * SignalDataPtr)
{
  sint16 * const bufferBaseSint16;
  uint16 XOrMax;
  uint16 maskOrMin;
  const struct ComFilter16BitMaskXMinMaxType * const FilterPtr;
  sint16 oldVal;
  uint16 * const bufferBaseSint16;
  uint16 mask;
  const ComFilter16BitMaskType * const maskPtr;
  sint16 NewVal;
  boolean FilterResult;
  boolean D.11272;
  int iftmp.231;
  int iftmp.228;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FilterResult = 0;
  # DEBUG BEGIN_STMT
  NewVal = MEM[(const sint16 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  _1 = ComFilterPropPtr->ComFilterType;
  _2 = (int) _1;
  switch (_2) <default: <L2> [INV], case 2: <L0> [INV], case 7: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.218_3 = Com_gConfigPtr;
  Com_gConfigPtr.219_4 = Com_gConfigPtr;
  _5 = Com_gConfigPtr.219_4->ComFilter16BitMaskRef;
  _6 = ComFilterPropPtr->ComFilterRef;
  _7 = (unsigned int) _6;
  _8 = _7 * 2;
  _9 = _5 + _8;
  maskPtr = Com_gConfigPtr.218_3 + _9;
  # DEBUG BEGIN_STMT
  mask = *maskPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.220_10 = Com_gDataMemPtr;
  Com_gConfigPtr.221_11 = Com_gConfigPtr;
  _12 = Com_gConfigPtr.221_11->ComBufferBaseSInt16;
  _13 = (sizetype) _12;
  bufferBaseSint16 = Com_gDataMemPtr.220_10 + _13;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = ComFilterPropPtr->ComFilterSignalValueRef;
  _15 = (unsigned int) _14;
  _16 = _15 * 2;
  _17 = bufferBaseSint16 + _16;
  _18 = *_17;
  oldVal = (sint16) _18;
  # DEBUG BEGIN_STMT
  NewVal.222_19 = (short unsigned int) NewVal;
  oldVal.223_20 = (short unsigned int) oldVal;
  _21 = NewVal.222_19 ^ oldVal.223_20;
  _22 = mask & _21;
  _23 = _22 != 0;
  FilterResult = (boolean) _23;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _24 = ComFilterPropPtr->ComFilterRef;
  FilterResult = Com_EB_FilterOneEveryN (_24);
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.224_25 = Com_gConfigPtr;
  Com_gConfigPtr.225_26 = Com_gConfigPtr;
  _27 = Com_gConfigPtr.225_26->ComFilter16BitMaskXMinMaxRef;
  _28 = ComFilterPropPtr->ComFilterRef;
  _29 = (unsigned int) _28;
  _30 = _29 * 4;
  _31 = _27 + _30;
  FilterPtr = Com_gConfigPtr.224_25 + _31;
  # DEBUG BEGIN_STMT
  maskOrMin = FilterPtr->ComFilterMaskOrMin;
  # DEBUG BEGIN_STMT
  XOrMax = FilterPtr->ComFilterXOrMax;
  # DEBUG BEGIN_STMT
  _32 = ComFilterPropPtr->ComFilterType;
  _33 = (int) _32;
  switch (_33) <default: <L24> [INV], case 3: <L4> [INV], case 4: <L3> [INV], case 5: <L10> [INV], case 6: <L5> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  NewVal.226_34 = (short unsigned int) NewVal;
  _35 = maskOrMin & NewVal.226_34;
  _36 = XOrMax == _35;
  FilterResult = (boolean) _36;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  NewVal.227_37 = (short unsigned int) NewVal;
  _38 = maskOrMin & NewVal.227_37;
  _39 = XOrMax != _38;
  FilterResult = (boolean) _39;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  maskOrMin.229_40 = (short int) maskOrMin;
  if (NewVal >= maskOrMin.229_40)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  XOrMax.230_41 = (short int) XOrMax;
  if (NewVal <= XOrMax.230_41)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.228 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.228 = 0;

  <bb 12> :
  FilterResult = (boolean) iftmp.228;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 13> :
<L10>:
  # DEBUG BEGIN_STMT
  maskOrMin.232_42 = (short int) maskOrMin;
  if (NewVal < maskOrMin.232_42)
    goto <bb 15>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  XOrMax.233_43 = (short int) XOrMax;
  if (NewVal > XOrMax.233_43)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.231 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.231 = 0;

  <bb 17> :
  FilterResult = (boolean) iftmp.231;
  # DEBUG BEGIN_STMT

  <bb 18> :
<L24>:
  # DEBUG BEGIN_STMT
  if (FilterResult == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _44 = ComFilterPropPtr->ComFilterSignalValueRef;
  if (_44 != 65535)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.234_45 = Com_gDataMemPtr;
  Com_gConfigPtr.235_46 = Com_gConfigPtr;
  _47 = Com_gConfigPtr.235_46->ComBufferBaseSInt16;
  _48 = (sizetype) _47;
  bufferBaseSint16 = Com_gDataMemPtr.234_45 + _48;
  # DEBUG BEGIN_STMT
  _49 = ComFilterPropPtr->ComFilterSignalValueRef;
  _50 = (unsigned int) _49;
  _51 = _50 * 2;
  _52 = bufferBaseSint16 + _51;
  *_52 = NewVal;

  <bb 21> :
  # DEBUG BEGIN_STMT
  D.11272 = FilterResult;
  return D.11272;

}


Com_EB_FilterUint16 (const struct ComFilterConfType * ComFilterPropPtr, const void * SignalDataPtr)
{
  uint16 * const bufferBaseUint16;
  uint16 XOrMax;
  uint16 maskOrMin;
  const struct ComFilter16BitMaskXMinMaxType * const FilterPtr;
  uint16 oldVal;
  uint16 * const bufferBaseUint16;
  uint16 mask;
  const ComFilter16BitMaskType * const maskPtr;
  uint16 NewVal;
  boolean FilterResult;
  boolean D.11218;
  int iftmp.187;
  int iftmp.186;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FilterResult = 0;
  # DEBUG BEGIN_STMT
  NewVal = MEM[(const uint16 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  _1 = ComFilterPropPtr->ComFilterType;
  _2 = (int) _1;
  switch (_2) <default: <L2> [INV], case 2: <L0> [INV], case 7: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.180_3 = Com_gConfigPtr;
  Com_gConfigPtr.181_4 = Com_gConfigPtr;
  _5 = Com_gConfigPtr.181_4->ComFilter16BitMaskRef;
  _6 = ComFilterPropPtr->ComFilterRef;
  _7 = (unsigned int) _6;
  _8 = _7 * 2;
  _9 = _5 + _8;
  maskPtr = Com_gConfigPtr.180_3 + _9;
  # DEBUG BEGIN_STMT
  mask = *maskPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.182_10 = Com_gDataMemPtr;
  Com_gConfigPtr.183_11 = Com_gConfigPtr;
  _12 = Com_gConfigPtr.183_11->ComBufferBaseUInt16;
  _13 = (sizetype) _12;
  bufferBaseUint16 = Com_gDataMemPtr.182_10 + _13;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = ComFilterPropPtr->ComFilterSignalValueRef;
  _15 = (unsigned int) _14;
  _16 = _15 * 2;
  _17 = bufferBaseUint16 + _16;
  oldVal = *_17;
  # DEBUG BEGIN_STMT
  _18 = NewVal ^ oldVal;
  _19 = mask & _18;
  _20 = _19 != 0;
  FilterResult = (boolean) _20;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _21 = ComFilterPropPtr->ComFilterRef;
  FilterResult = Com_EB_FilterOneEveryN (_21);
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.184_22 = Com_gConfigPtr;
  Com_gConfigPtr.185_23 = Com_gConfigPtr;
  _24 = Com_gConfigPtr.185_23->ComFilter16BitMaskXMinMaxRef;
  _25 = ComFilterPropPtr->ComFilterRef;
  _26 = (unsigned int) _25;
  _27 = _26 * 4;
  _28 = _24 + _27;
  FilterPtr = Com_gConfigPtr.184_22 + _28;
  # DEBUG BEGIN_STMT
  maskOrMin = FilterPtr->ComFilterMaskOrMin;
  # DEBUG BEGIN_STMT
  XOrMax = FilterPtr->ComFilterXOrMax;
  # DEBUG BEGIN_STMT
  _29 = ComFilterPropPtr->ComFilterType;
  _30 = (int) _29;
  switch (_30) <default: <L24> [INV], case 3: <L4> [INV], case 4: <L3> [INV], case 5: <L10> [INV], case 6: <L5> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _31 = NewVal & maskOrMin;
  _32 = XOrMax == _31;
  FilterResult = (boolean) _32;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _33 = NewVal & maskOrMin;
  _34 = XOrMax != _33;
  FilterResult = (boolean) _34;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  if (maskOrMin <= NewVal)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (NewVal <= XOrMax)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.186 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.186 = 0;

  <bb 12> :
  FilterResult = (boolean) iftmp.186;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 13> :
<L10>:
  # DEBUG BEGIN_STMT
  if (maskOrMin > NewVal)
    goto <bb 15>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  if (NewVal > XOrMax)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.187 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.187 = 0;

  <bb 17> :
  FilterResult = (boolean) iftmp.187;
  # DEBUG BEGIN_STMT

  <bb 18> :
<L24>:
  # DEBUG BEGIN_STMT
  if (FilterResult == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _35 = ComFilterPropPtr->ComFilterSignalValueRef;
  if (_35 != 65535)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.188_36 = Com_gDataMemPtr;
  Com_gConfigPtr.189_37 = Com_gConfigPtr;
  _38 = Com_gConfigPtr.189_37->ComBufferBaseUInt16;
  _39 = (sizetype) _38;
  bufferBaseUint16 = Com_gDataMemPtr.188_36 + _39;
  # DEBUG BEGIN_STMT
  _40 = ComFilterPropPtr->ComFilterSignalValueRef;
  _41 = (unsigned int) _40;
  _42 = _41 * 2;
  _43 = bufferBaseUint16 + _42;
  *_43 = NewVal;

  <bb 21> :
  # DEBUG BEGIN_STMT
  D.11218 = FilterResult;
  return D.11218;

}


Com_EB_FilterSint8 (const struct ComFilterConfType * ComFilterPropPtr, const void * SignalDataPtr)
{
  sint8 * const bufferBaseSint8;
  uint8 XOrMax;
  uint8 maskOrMin;
  const struct ComFilter8BitMaskXMinMaxType * const FilterPtr;
  sint8 oldVal;
  uint8 * const bufferBaseSint8;
  uint8 mask;
  const ComFilter8BitMaskType * const maskPtr;
  sint8 NewVal;
  boolean FilterResult;
  boolean D.11254;
  int iftmp.213;
  int iftmp.210;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FilterResult = 0;
  # DEBUG BEGIN_STMT
  NewVal = MEM[(const sint8 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  _1 = ComFilterPropPtr->ComFilterType;
  _2 = (int) _1;
  switch (_2) <default: <L2> [INV], case 2: <L0> [INV], case 7: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.200_3 = Com_gConfigPtr;
  Com_gConfigPtr.201_4 = Com_gConfigPtr;
  _5 = Com_gConfigPtr.201_4->ComFilter8BitMaskRef;
  _6 = ComFilterPropPtr->ComFilterRef;
  _7 = (sizetype) _6;
  _8 = _5 + _7;
  maskPtr = Com_gConfigPtr.200_3 + _8;
  # DEBUG BEGIN_STMT
  mask = *maskPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.202_9 = Com_gDataMemPtr;
  Com_gConfigPtr.203_10 = Com_gConfigPtr;
  _11 = Com_gConfigPtr.203_10->ComBufferBaseSInt8;
  _12 = (sizetype) _11;
  bufferBaseSint8 = Com_gDataMemPtr.202_9 + _12;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = ComFilterPropPtr->ComFilterSignalValueRef;
  _14 = (sizetype) _13;
  _15 = bufferBaseSint8 + _14;
  _16 = *_15;
  oldVal = (sint8) _16;
  # DEBUG BEGIN_STMT
  NewVal.204_17 = (unsigned char) NewVal;
  oldVal.205_18 = (unsigned char) oldVal;
  _19 = NewVal.204_17 ^ oldVal.205_18;
  _20 = mask & _19;
  _21 = _20 != 0;
  FilterResult = (boolean) _21;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _22 = ComFilterPropPtr->ComFilterRef;
  FilterResult = Com_EB_FilterOneEveryN (_22);
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.206_23 = Com_gConfigPtr;
  Com_gConfigPtr.207_24 = Com_gConfigPtr;
  _25 = Com_gConfigPtr.207_24->ComFilter8BitMaskXMinMaxRef;
  _26 = ComFilterPropPtr->ComFilterRef;
  _27 = (unsigned int) _26;
  _28 = _27 * 2;
  _29 = _25 + _28;
  FilterPtr = Com_gConfigPtr.206_23 + _29;
  # DEBUG BEGIN_STMT
  maskOrMin = FilterPtr->ComFilterMaskOrMin;
  # DEBUG BEGIN_STMT
  XOrMax = FilterPtr->ComFilterXOrMax;
  # DEBUG BEGIN_STMT
  _30 = ComFilterPropPtr->ComFilterType;
  _31 = (int) _30;
  switch (_31) <default: <L24> [INV], case 3: <L4> [INV], case 4: <L3> [INV], case 5: <L10> [INV], case 6: <L5> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  NewVal.208_32 = (unsigned char) NewVal;
  _33 = maskOrMin & NewVal.208_32;
  _34 = XOrMax == _33;
  FilterResult = (boolean) _34;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  NewVal.209_35 = (unsigned char) NewVal;
  _36 = maskOrMin & NewVal.209_35;
  _37 = XOrMax != _36;
  FilterResult = (boolean) _37;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  maskOrMin.211_38 = (signed char) maskOrMin;
  if (NewVal >= maskOrMin.211_38)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  XOrMax.212_39 = (signed char) XOrMax;
  if (NewVal <= XOrMax.212_39)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.210 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.210 = 0;

  <bb 12> :
  FilterResult = (boolean) iftmp.210;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 13> :
<L10>:
  # DEBUG BEGIN_STMT
  maskOrMin.214_40 = (signed char) maskOrMin;
  if (NewVal < maskOrMin.214_40)
    goto <bb 15>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  XOrMax.215_41 = (signed char) XOrMax;
  if (NewVal > XOrMax.215_41)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.213 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.213 = 0;

  <bb 17> :
  FilterResult = (boolean) iftmp.213;
  # DEBUG BEGIN_STMT

  <bb 18> :
<L24>:
  # DEBUG BEGIN_STMT
  if (FilterResult == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _42 = ComFilterPropPtr->ComFilterSignalValueRef;
  if (_42 != 65535)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.216_43 = Com_gDataMemPtr;
  Com_gConfigPtr.217_44 = Com_gConfigPtr;
  _45 = Com_gConfigPtr.217_44->ComBufferBaseSInt8;
  _46 = (sizetype) _45;
  bufferBaseSint8 = Com_gDataMemPtr.216_43 + _46;
  # DEBUG BEGIN_STMT
  _47 = ComFilterPropPtr->ComFilterSignalValueRef;
  _48 = (sizetype) _47;
  _49 = bufferBaseSint8 + _48;
  *_49 = NewVal;

  <bb 21> :
  # DEBUG BEGIN_STMT
  D.11254 = FilterResult;
  return D.11254;

}


Com_EB_FilterUint8 (const struct ComFilterConfType * ComFilterPropPtr, const void * SignalDataPtr)
{
  uint8 * const bufferBaseUint8;
  uint8 XOrMax;
  uint8 maskOrMin;
  const struct ComFilter8BitMaskXMinMaxType * const FilterPtr;
  uint8 oldVal;
  uint8 * const bufferBaseUint8;
  uint8 mask;
  const ComFilter8BitMaskType * const maskPtr;
  uint8 NewVal;
  boolean FilterResult;
  boolean D.11200;
  int iftmp.177;
  int iftmp.176;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FilterResult = 0;
  # DEBUG BEGIN_STMT
  NewVal = MEM[(const uint8 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  _1 = ComFilterPropPtr->ComFilterType;
  _2 = (int) _1;
  switch (_2) <default: <L2> [INV], case 2: <L0> [INV], case 7: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.170_3 = Com_gConfigPtr;
  Com_gConfigPtr.171_4 = Com_gConfigPtr;
  _5 = Com_gConfigPtr.171_4->ComFilter8BitMaskRef;
  _6 = ComFilterPropPtr->ComFilterRef;
  _7 = (sizetype) _6;
  _8 = _5 + _7;
  maskPtr = Com_gConfigPtr.170_3 + _8;
  # DEBUG BEGIN_STMT
  mask = *maskPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.172_9 = Com_gDataMemPtr;
  Com_gConfigPtr.173_10 = Com_gConfigPtr;
  _11 = Com_gConfigPtr.173_10->ComBufferBaseUInt8;
  _12 = (sizetype) _11;
  bufferBaseUint8 = Com_gDataMemPtr.172_9 + _12;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = ComFilterPropPtr->ComFilterSignalValueRef;
  _14 = (sizetype) _13;
  _15 = bufferBaseUint8 + _14;
  oldVal = *_15;
  # DEBUG BEGIN_STMT
  _16 = NewVal ^ oldVal;
  _17 = mask & _16;
  _18 = _17 != 0;
  FilterResult = (boolean) _18;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _19 = ComFilterPropPtr->ComFilterRef;
  FilterResult = Com_EB_FilterOneEveryN (_19);
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.174_20 = Com_gConfigPtr;
  Com_gConfigPtr.175_21 = Com_gConfigPtr;
  _22 = Com_gConfigPtr.175_21->ComFilter8BitMaskXMinMaxRef;
  _23 = ComFilterPropPtr->ComFilterRef;
  _24 = (unsigned int) _23;
  _25 = _24 * 2;
  _26 = _22 + _25;
  FilterPtr = Com_gConfigPtr.174_20 + _26;
  # DEBUG BEGIN_STMT
  maskOrMin = FilterPtr->ComFilterMaskOrMin;
  # DEBUG BEGIN_STMT
  XOrMax = FilterPtr->ComFilterXOrMax;
  # DEBUG BEGIN_STMT
  _27 = ComFilterPropPtr->ComFilterType;
  _28 = (int) _27;
  switch (_28) <default: <L24> [INV], case 3: <L4> [INV], case 4: <L3> [INV], case 5: <L10> [INV], case 6: <L5> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _29 = NewVal & maskOrMin;
  _30 = XOrMax == _29;
  FilterResult = (boolean) _30;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _31 = NewVal & maskOrMin;
  _32 = XOrMax != _31;
  FilterResult = (boolean) _32;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  if (maskOrMin <= NewVal)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (NewVal <= XOrMax)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.176 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.176 = 0;

  <bb 12> :
  FilterResult = (boolean) iftmp.176;
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 13> :
<L10>:
  # DEBUG BEGIN_STMT
  if (maskOrMin > NewVal)
    goto <bb 15>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  if (NewVal > XOrMax)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.177 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.177 = 0;

  <bb 17> :
  FilterResult = (boolean) iftmp.177;
  # DEBUG BEGIN_STMT

  <bb 18> :
<L24>:
  # DEBUG BEGIN_STMT
  if (FilterResult == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _33 = ComFilterPropPtr->ComFilterSignalValueRef;
  if (_33 != 65535)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.178_34 = Com_gDataMemPtr;
  Com_gConfigPtr.179_35 = Com_gConfigPtr;
  _36 = Com_gConfigPtr.179_35->ComBufferBaseUInt8;
  _37 = (sizetype) _36;
  bufferBaseUint8 = Com_gDataMemPtr.178_34 + _37;
  # DEBUG BEGIN_STMT
  _38 = ComFilterPropPtr->ComFilterSignalValueRef;
  _39 = (sizetype) _38;
  _40 = bufferBaseUint8 + _39;
  *_40 = NewVal;

  <bb 21> :
  # DEBUG BEGIN_STMT
  D.11200 = FilterResult;
  return D.11200;

}


Com_EB_FilterBoolean (const struct ComFilterConfType * ComFilterPropPtr, const void * SignalDataPtr)
{
  uint8 * const bufferBaseBool;
  uint8 XOrMax;
  uint8 maskOrMin;
  const struct ComFilter8BitMaskXMinMaxType * const FilterPtr;
  uint8 oldVal;
  uint8 * const bufferBaseBool;
  uint8 mask;
  const ComFilter8BitMaskType * const maskPtr;
  uint8 NewVal;
  boolean FilterResult;
  boolean D.11180;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FilterResult = 0;
  # DEBUG BEGIN_STMT
  NewVal = MEM[(const boolean *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  _1 = ComFilterPropPtr->ComFilterType;
  _2 = (int) _1;
  switch (_2) <default: <L2> [INV], case 2: <L0> [INV], case 7: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.157_3 = Com_gConfigPtr;
  Com_gConfigPtr.158_4 = Com_gConfigPtr;
  _5 = Com_gConfigPtr.158_4->ComFilter8BitMaskRef;
  _6 = ComFilterPropPtr->ComFilterRef;
  _7 = (sizetype) _6;
  _8 = _5 + _7;
  maskPtr = Com_gConfigPtr.157_3 + _8;
  # DEBUG BEGIN_STMT
  mask = *maskPtr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.159_9 = Com_gDataMemPtr;
  Com_gConfigPtr.160_10 = Com_gConfigPtr;
  _11 = Com_gConfigPtr.160_10->ComBufferBaseBool;
  _12 = (sizetype) _11;
  bufferBaseBool = Com_gDataMemPtr.159_9 + _12;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _13 = ComFilterPropPtr->ComFilterSignalValueRef;
  _14 = _13 / 8;
  _15 = (sizetype) _14;
  _16 = bufferBaseBool + _15;
  _17 = *_16;
  _18 = (int) _17;
  _19 = ComFilterPropPtr->ComFilterSignalValueRef;
  _20 = (unsigned int) _19;
  _21 = _20 & 7;
  _22 = _18 >> _21;
  _23 = (unsigned char) _22;
  oldVal = _23 & 1;
  # DEBUG BEGIN_STMT
  _24 = NewVal ^ oldVal;
  _25 = mask & _24;
  _26 = _25 != 0;
  FilterResult = (boolean) _26;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _27 = ComFilterPropPtr->ComFilterRef;
  FilterResult = Com_EB_FilterOneEveryN (_27);
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.161_28 = Com_gConfigPtr;
  Com_gConfigPtr.162_29 = Com_gConfigPtr;
  _30 = Com_gConfigPtr.162_29->ComFilter8BitMaskXMinMaxRef;
  _31 = ComFilterPropPtr->ComFilterRef;
  _32 = (unsigned int) _31;
  _33 = _32 * 2;
  _34 = _30 + _33;
  FilterPtr = Com_gConfigPtr.161_28 + _34;
  # DEBUG BEGIN_STMT
  maskOrMin = FilterPtr->ComFilterMaskOrMin;
  # DEBUG BEGIN_STMT
  XOrMax = FilterPtr->ComFilterXOrMax;
  # DEBUG BEGIN_STMT
  _35 = ComFilterPropPtr->ComFilterType;
  _36 = (int) _35;
  switch (_36) <default: <L17> [INV], case 3: <L4> [INV], case 4: <L3> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _37 = NewVal & maskOrMin;
  _38 = XOrMax == _37;
  FilterResult = (boolean) _38;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _39 = NewVal & maskOrMin;
  _40 = XOrMax != _39;
  FilterResult = (boolean) _40;
  # DEBUG BEGIN_STMT

  <bb 8> :
<L17>:
  # DEBUG BEGIN_STMT
  if (FilterResult == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  _41 = ComFilterPropPtr->ComFilterSignalValueRef;
  if (_41 != 65535)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.163_42 = Com_gDataMemPtr;
  Com_gConfigPtr.164_43 = Com_gConfigPtr;
  _44 = Com_gConfigPtr.164_43->ComBufferBaseBool;
  _45 = (sizetype) _44;
  bufferBaseBool = Com_gDataMemPtr.163_42 + _45;
  # DEBUG BEGIN_STMT
  if (NewVal == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _46 = ComFilterPropPtr->ComFilterSignalValueRef;
  _47 = _46 / 8;
  _48 = (sizetype) _47;
  _49 = bufferBaseBool + _48;
  _50 = ComFilterPropPtr->ComFilterSignalValueRef;
  _51 = (long unsigned int) _50;
  _52 = _51 & 7;
  TS_AtomicSetBit_8 (_49, _52);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _53 = ComFilterPropPtr->ComFilterSignalValueRef;
  _54 = _53 / 8;
  _55 = (sizetype) _54;
  _56 = bufferBaseBool + _55;
  _57 = ComFilterPropPtr->ComFilterSignalValueRef;
  _58 = (long unsigned int) _57;
  _59 = _58 & 7;
  TS_AtomicClearBit_8 (_56, _59);

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.11180 = FilterResult;
  return D.11180;

}


Com_EB_FilterOneEveryN (ComFilterRefType ComFilterRef)
{
  ComFilterOneEveryNSizeType * occurrencebase;
  ComFilterOneEveryNSizeType occurrence;
  ComFilterOneEveryNSizeType offset;
  ComFilterOneEveryNSizeType period;
  const struct ComFilterOneEveryNType * const ComFilterOneEveryNPtr;
  boolean FilterResult;
  boolean D.11184;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.165_1 = Com_gConfigPtr;
  Com_gConfigPtr.166_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.166_2->ComFilterOneEveryNRef;
  _4 = (unsigned int) ComFilterRef;
  _5 = _4 * 6;
  _6 = _3 + _5;
  ComFilterOneEveryNPtr = Com_gConfigPtr.165_1 + _6;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  offset = ComFilterOneEveryNPtr->ComFilterOffset;
  # DEBUG BEGIN_STMT
  period = ComFilterOneEveryNPtr->ComFilterPeriodFactor;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.167_7 = Com_gDataMemPtr;
  Com_gConfigPtr.168_8 = Com_gConfigPtr;
  _9 = Com_gConfigPtr.168_8->ComFilterOneEveryNBase;
  _10 = (sizetype) _9;
  occurrencebase = Com_gDataMemPtr.167_7 + _10;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _11 = ComFilterOneEveryNPtr->ComFilterOccurrence;
  _12 = (unsigned int) _11;
  _13 = _12 * 2;
  _14 = occurrencebase + _13;
  occurrence = *_14;
  # DEBUG BEGIN_STMT
  _15 = occurrence == offset;
  FilterResult = (boolean) _15;
  # DEBUG BEGIN_STMT
  occurrence.169_16 = occurrence;
  occurrence = occurrence.169_16 + 1;
  # DEBUG BEGIN_STMT
  _17 = ComFilterOneEveryNPtr->ComFilterOccurrence;
  _18 = (unsigned int) _17;
  _19 = _18 * 2;
  _20 = occurrencebase + _19;
  _21 = occurrence % period;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  D.11184 = FilterResult;
  return D.11184;

}


Com_ReceptionDMControl (uint8 * ipduGroupVector)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.499_1 = Com_InitStatus;
  if (Com_InitStatus.499_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 6, 2);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ipduGroupVector == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 6, 3);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_EB_HandlePduGroupRx (1, ipduGroupVector, 0);

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Com_IpduGroupControl (uint8 * ipduGroupVector, boolean Initialize)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.315_1 = Com_InitStatus;
  if (Com_InitStatus.315_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 3, 2);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ipduGroupVector == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 3, 3);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_EB_HandlePduGroupRx (0, ipduGroupVector, Initialize);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_EB_HandlePduGroupTx (ipduGroupVector, Initialize);

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_SetupTxSignalGroup (const uint8 * SGArrayPtr, uint16 SGArrayLength, uint8 (*<T68a>) (const uint8 *, uint16, const struct ComTxSignalGroupType *, ComIPduRefType, const struct ComTxIPduType *, boolean) Com_TxSignalGroupFPtr, const struct ComTxSignalGroupType * SignalGPtr, uint8 * retvalPtr, boolean SendInMainFunctionTx)
{
  const struct ComTxIPduType * const IPduPtr;
  const ComIPduRefType PduId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  PduId = SignalGPtr->ComIPduRef;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.625_1 = Com_gConfigPtr;
  Com_gConfigPtr.626_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.626_2->ComTxIPduRef;
  _4 = (unsigned int) PduId;
  _5 = _4 * 64;
  _6 = _3 + _5;
  IPduPtr = Com_gConfigPtr.625_1 + _6;
  # DEBUG BEGIN_STMT
  _7 = Com_TxSignalGroupFPtr (SGArrayPtr, SGArrayLength, SignalGPtr, PduId, IPduPtr, SendInMainFunctionTx);
  *retvalPtr = _7;
  return;

}


Com_EB_SetGroupSignalTMSFlagOfSignalGroup (const struct ComTxSignalGroupType * SignalGPtr, const uint8 * SGArrayPtr)
{
  const struct ComTxSignalType * const GSignalPtr;
  const ComSignalRefType GSignalId;
  boolean TMSResult;
  Com_SignalIdType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = SignalGPtr->ComGroupSignalRefFirst;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.573_1 = Com_gConfigPtr;
  Com_gConfigPtr.574_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.574_2->ComTxSignalGroupGroupSignalListRef;
  _4 = (unsigned int) i;
  _5 = _4 * 2;
  _6 = _3 + _5;
  _7 = Com_gConfigPtr.573_1 + _6;
  GSignalId = *_7;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.575_8 = Com_gConfigPtr;
  Com_gConfigPtr.576_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.576_9->ComTxSignalRef;
  _11 = (unsigned int) GSignalId;
  _12 = _11 * 26;
  _13 = _10 + _12;
  GSignalPtr = Com_gConfigPtr.575_8 + _13;
  # DEBUG BEGIN_STMT
  _14 = &GSignalPtr->ComSignalBase;
  _15 = &GSignalPtr->ComSignalBase.ComFilterConf;
  TMSResult = Com_EB_CalculateFilter (_14, SGArrayPtr, _15);
  # DEBUG BEGIN_STMT
  Com_EB_CalculateGroupSignalTM (GSignalPtr, SignalGPtr, TMSResult);
  # DEBUG BEGIN_STMT
  i.577_16 = i;
  i = i.577_16 + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _17 = (int) i;
  _18 = SignalGPtr->ComGroupSignalWithFilterRefNum;
  _19 = (int) _18;
  _20 = SignalGPtr->ComGroupSignalRefFirst;
  _21 = (int) _20;
  _22 = _19 + _21;
  if (_17 < _22)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_CalculateGroupSignalTM (const struct ComTxSignalType * GSignalPtr, const struct ComTxSignalGroupType * SignalGPtr, boolean TMSResult)
{
  const ComSignalGroupRefType SignalGId;
  boolean CurrentTM;
  boolean OldFilterResult;
  uint8 * const FlagPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.254_1 = Com_gDataMemPtr;
  _2 = SignalGPtr->ComSignalGTMSFlagsRef;
  _3 = (unsigned int) _2;
  _4 = GSignalPtr->ComPositionOfTMSFlag;
  _5 = _4 / 8;
  _6 = (unsigned int) _5;
  _7 = _3 + _6;
  FlagPtr = Com_gDataMemPtr.254_1 + _7;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SignalGId = GSignalPtr->ComSignalBase.ComSignalGroupRef;
  # DEBUG BEGIN_STMT
  _8 = *FlagPtr;
  _9 = (int) _8;
  _10 = GSignalPtr->ComPositionOfTMSFlag;
  _11 = (unsigned char) _10;
  _12 = (int) _11;
  _13 = _12 & 7;
  _14 = _9 >> _13;
  _15 = (unsigned char) _14;
  OldFilterResult = _15 & 1;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.255_16 = Com_gDataMemPtr;
  Com_gConfigPtr.256_17 = Com_gConfigPtr;
  _18 = Com_gConfigPtr.256_17->ComTxSignalGroupStatusBase;
  _19 = (int) _18;
  _20 = (int) SignalGId;
  _21 = _19 + _20;
  _22 = (sizetype) _21;
  _23 = Com_gDataMemPtr.255_16 + _22;
  _24 = *_23;
  CurrentTM = _24 & 1;
  # DEBUG BEGIN_STMT
  if (TMSResult == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (OldFilterResult != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  if (CurrentTM != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.257_25 = Com_gDataMemPtr;
  Com_gConfigPtr.258_26 = Com_gConfigPtr;
  _27 = Com_gConfigPtr.258_26->ComTxSignalGroupStatusBase;
  _28 = (int) _27;
  _29 = (int) SignalGId;
  _30 = _28 + _29;
  _31 = (sizetype) _30;
  _32 = Com_gDataMemPtr.257_25 + _31;
  TS_AtomicSetBit_8 (_32, 1);

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TMSResult != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  if (CurrentTM == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.259_33 = Com_gDataMemPtr;
  Com_gConfigPtr.260_34 = Com_gConfigPtr;
  _35 = Com_gConfigPtr.260_34->ComTxSignalGroupStatusBase;
  _36 = (int) _35;
  _37 = (int) SignalGId;
  _38 = _36 + _37;
  _39 = (sizetype) _38;
  _40 = Com_gDataMemPtr.259_33 + _39;
  TS_AtomicSetBit_8 (_40, 1);

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (TMSResult == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _41 = GSignalPtr->ComPositionOfTMSFlag;
  _42 = (long unsigned int) _41;
  _43 = _42 & 7;
  TS_AtomicSetBit_8 (FlagPtr, _43);
  goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _44 = GSignalPtr->ComPositionOfTMSFlag;
  _45 = (long unsigned int) _44;
  _46 = _45 & 7;
  TS_AtomicClearBit_8 (FlagPtr, _46);

  <bb 12> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_InitSGBuffer (uint8 * SGArrayPtr, const struct ComTxSignalGroupType * SignalGPtr, const struct ComTxIPduType * IPduPtr)
{
  const uint8 * const pduBuffer;
  const ComSignalDescByteType byteSize;
  uint16 D.11478;

  <bb 2> :
  # DEBUG BEGIN_STMT
  byteSize = SignalGPtr->ComByteSize;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.441_1 = Com_gDataMemPtr;
  _2 = IPduPtr->ComIPduValueRef;
  _3 = (int) _2;
  _4 = SignalGPtr->ComSignalPositionInByte;
  _5 = (int) _4;
  _6 = _3 + _5;
  _7 = (sizetype) _6;
  pduBuffer = Com_gDataMemPtr.441_1 + _7;
  # DEBUG BEGIN_STMT
  _8 = (long unsigned int) byteSize;
  TS_MemCpy32 (SGArrayPtr, pduBuffer, _8);
  # DEBUG BEGIN_STMT
  D.11478 = byteSize;
  return D.11478;

}


Com_EB_WriteShadowBuffer (const struct ComTxSignalGroupType * SignalGPtr, const struct ComTxIPduType * IPduPtr, const uint8 * SGArrayPtr)
{
  uint16 i;
  const uint8 * TOCMaskPtr;
  const uint8 * writeMaskPtr;
  ComSignalDescByteType StartingByte;
  ComSignalDescByteType byteOffset;
  const ComRAMIdxType ComIPduValueRef;
  const ComSignalDescByteType ByteSize;
  boolean forceTrigger;
  boolean D.11672;
  const uint8 * iftmp.581;
  const uint8 * iftmp.579;

  <bb 2> :
  # DEBUG BEGIN_STMT
  forceTrigger = 0;
  # DEBUG BEGIN_STMT
  ByteSize = SignalGPtr->ComByteSize;
  # DEBUG BEGIN_STMT
  ComIPduValueRef = IPduPtr->ComIPduValueRef;
  # DEBUG BEGIN_STMT
  byteOffset = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = SignalGPtr->ComWriteMaskRef;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Com_gConfigPtr.580_2 = Com_gConfigPtr;
  _3 = SignalGPtr->ComWriteMaskRef;
  iftmp.579 = Com_gConfigPtr.580_2 + _3;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.579 = 0B;

  <bb 5> :
  writeMaskPtr = iftmp.579;
  # DEBUG BEGIN_STMT
  _4 = SignalGPtr->ComTOCMaskRef;
  if (_4 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Com_gConfigPtr.582_5 = Com_gConfigPtr;
  _6 = SignalGPtr->ComTOCMaskRef;
  iftmp.581 = Com_gConfigPtr.582_5 + _6;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.581 = 0B;

  <bb 8> :
  TOCMaskPtr = iftmp.581;
  # DEBUG BEGIN_STMT
  _7 = SignalGPtr->ComTxSignalGroupFlags;
  _8 = (unsigned int) _7;
  _9 = _8 & 3;
  if (_9 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  forceTrigger = 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  StartingByte = SignalGPtr->ComSignalPositionInByte;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (ByteSize != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (writeMaskPtr != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.583_10 = Com_gDataMemPtr;
  _11 = (int) ComIPduValueRef;
  _12 = (int) StartingByte;
  _13 = _11 + _12;
  _14 = (sizetype) _13;
  _15 = Com_gDataMemPtr.583_10 + _14;
  Com_EB_WriteShadowBuffer_Fragment (_15, SGArrayPtr, writeMaskPtr, TOCMaskPtr, &forceTrigger, ByteSize);
  goto <bb 20>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (TOCMaskPtr != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 18>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.584_16 = Com_gDataMemPtr;
  _17 = (int) ComIPduValueRef;
  _18 = (int) StartingByte;
  _19 = _17 + _18;
  _20 = (sizetype) _19;
  _21 = (sizetype) i;
  _22 = _20 + _21;
  _23 = Com_gDataMemPtr.584_16 + _22;
  _24 = *_23;
  _25 = (sizetype) byteOffset;
  _26 = (sizetype) i;
  _27 = _25 + _26;
  _28 = SGArrayPtr + _27;
  _29 = *_28;
  _30 = _24 ^ _29;
  _31 = (sizetype) byteOffset;
  _32 = (sizetype) i;
  _33 = _31 + _32;
  _34 = TOCMaskPtr + _33;
  _35 = *_34;
  _36 = _30 & _35;
  if (_36 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  forceTrigger = 1;

  <bb 17> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _37 = (sizetype) byteOffset;
  _38 = (sizetype) i;
  _39 = _37 + _38;
  _40 = SGArrayPtr + _39;
  Com_gDataMemPtr.585_41 = Com_gDataMemPtr;
  _42 = (int) ComIPduValueRef;
  _43 = (int) StartingByte;
  _44 = _42 + _43;
  _45 = (sizetype) _44;
  _46 = (sizetype) i;
  _47 = _45 + _46;
  _48 = Com_gDataMemPtr.585_41 + _47;
  _49 = *_40;
  *_48 = _49;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i.586_50 = i;
  i = i.586_50 + 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  if (i < ByteSize)
    goto <bb 15>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.587_51 = Com_gDataMemPtr;
  _52 = (int) ComIPduValueRef;
  _53 = (int) StartingByte;
  _54 = _52 + _53;
  _55 = (sizetype) _54;
  _56 = Com_gDataMemPtr.587_51 + _55;
  _57 = (sizetype) byteOffset;
  _58 = SGArrayPtr + _57;
  _59 = (long unsigned int) ByteSize;
  TS_MemCpy32 (_56, _58, _59);

  <bb 20> :
  # DEBUG BEGIN_STMT
  _60 = SignalGPtr->ComTxSignalGroupFlags;
  _61 = _60 >> 3;
  _62 = (unsigned int) _61;
  _63 = _62 & 1;
  if (_63 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.588_64 = Com_gDataMemPtr;
  _65 = IPduPtr->ComIPduValueRef;
  _66 = (unsigned int) _65;
  _67 = SignalGPtr->ComUpdateBitPositionInBit;
  _68 = _67 / 8;
  _69 = (unsigned int) _68;
  _70 = _66 + _69;
  _71 = Com_gDataMemPtr.588_64 + _70;
  _72 = SignalGPtr->ComUpdateBitPositionInBit;
  _73 = (long unsigned int) _72;
  _74 = _73 & 7;
  TS_AtomicSetBit_8 (_71, _74);

  <bb 22> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  D.11672 = forceTrigger;
  forceTrigger = {CLOBBER};
  return D.11672;

}


Com_EB_WriteShadowBuffer_Fragment (uint8 * PduValPtr, const uint8 * SGArrayValPtr, const uint8 * WriteMaskPtr, const uint8 * TOCMaskPtr, boolean * forceTriggerPtr, ComSignalDescByteType ByteSize)
{
  uint8 valuePduCmp;
  uint8 writeMask;
  uint8 valueShadowBuffer;
  uint8 valuePdu;
  uint32 offset;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  offset = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = PduValPtr + offset;
  valuePdu = *_1;
  # DEBUG BEGIN_STMT
  _2 = SGArrayValPtr + offset;
  valueShadowBuffer = *_2;
  # DEBUG BEGIN_STMT
  _3 = WriteMaskPtr + offset;
  writeMask = *_3;
  # DEBUG BEGIN_STMT
  _4 = ~writeMask;
  valuePdu = valuePdu & _4;
  # DEBUG BEGIN_STMT
  valueShadowBuffer = valueShadowBuffer & writeMask;
  # DEBUG BEGIN_STMT
  if (TOCMaskPtr != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = PduValPtr + offset;
  valuePduCmp = *_5;
  # DEBUG BEGIN_STMT
  valuePduCmp = valuePduCmp & writeMask;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _6 = valuePduCmp ^ valueShadowBuffer;
  _7 = TOCMaskPtr + offset;
  _8 = *_7;
  _9 = _6 & _8;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  *forceTriggerPtr = 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = PduValPtr + offset;
  _11 = valuePdu | valueShadowBuffer;
  *_10 = _11;
  # DEBUG BEGIN_STMT
  offset = offset + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _12 = (long unsigned int) ByteSize;
  if (offset < _12)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Com_EB_CalculateSignalGroupTM (boolean forceTrigger, const struct ComTxSignalGroupType * SignalGPtr, const struct ComTxIPduType * IPduPtr, ComIPduRefType PduId, boolean SendInMainFunctionTx)
{
  boolean tms_changed;
  boolean trig_wo_rep;
  const uint8 AktTM;
  boolean CurrentTMIPDU;
  boolean newTM;
  uint16 numberOfFlagBytes;
  boolean CurrentTMSG;
  boolean newResult;
  uint16 j;
  uint8 * const SignalGTMFlagsBase;
  uint8 * const SGFlagPtr;
  ptrdiff_t offset;
  const struct ComTxSignalGroupType * firstSignalGPtr;
  ComSignalGroupRefType SignalGId;
  boolean TMSChanged;
  boolean transmit;
  uint8 * const PduStatusFlagsPtr;
  uint8 retval;
  uint8 D.11711;
  const uint8 iftmp.602;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.589_1 = Com_gDataMemPtr;
  Com_gConfigPtr.590_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.590_2->ComTxIPduStatusBase;
  _4 = (int) _3;
  _5 = (int) PduId;
  _6 = _4 + _5;
  _7 = (sizetype) _6;
  PduStatusFlagsPtr = Com_gDataMemPtr.589_1 + _7;
  # DEBUG BEGIN_STMT
  transmit = forceTrigger;
  # DEBUG BEGIN_STMT
  TMSChanged = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.591_8 = Com_gConfigPtr;
  Com_gConfigPtr.592_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.592_9->ComTxSignalGroupRef;
  firstSignalGPtr = Com_gConfigPtr.591_8 + _10;
  # DEBUG BEGIN_STMT
  _11 = SignalGPtr - firstSignalGPtr;
  offset = _11 /[ex] 32;
  # DEBUG BEGIN_STMT
  SignalGId = (ComSignalGroupRefType) offset;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.593_12 = Com_gDataMemPtr;
  Com_gConfigPtr.594_13 = Com_gConfigPtr;
  _14 = Com_gConfigPtr.594_13->ComTxSignalGroupStatusBase;
  _15 = (int) _14;
  _16 = (int) SignalGId;
  _17 = _15 + _16;
  _18 = (sizetype) _17;
  SGFlagPtr = Com_gDataMemPtr.593_12 + _18;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _19 = *SGFlagPtr;
  _20 = (unsigned int) _19;
  _21 = _20 & 2;
  if (_21 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.595_22 = Com_gDataMemPtr;
  _23 = SignalGPtr->ComSignalGTMSFlagsRef;
  _24 = (sizetype) _23;
  SignalGTMFlagsBase = Com_gDataMemPtr.595_22 + _24;
  # DEBUG BEGIN_STMT
  j = 0;
  # DEBUG BEGIN_STMT
  newResult = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _25 = *SGFlagPtr;
  _26 = _25 & 253;
  *SGFlagPtr = _26;
  # DEBUG BEGIN_STMT
  _27 = SignalGPtr->ComGroupSignalWithFilterRefNum;
  numberOfFlagBytes = _27 / 8;
  # DEBUG BEGIN_STMT
  _28 = SignalGPtr->ComGroupSignalWithFilterRefNum;
  _29 = _28 & 7;
  if (_29 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  numberOfFlagBytes.596_30 = numberOfFlagBytes;
  numberOfFlagBytes = numberOfFlagBytes.596_30 + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  j = 0;
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _31 = (sizetype) j;
  _32 = SignalGTMFlagsBase + _31;
  _33 = *_32;
  if (_33 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  newResult = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  j.597_34 = j;
  j = j.597_34 + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (j < numberOfFlagBytes)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _35 = *SGFlagPtr;
  CurrentTMSG = _35 & 1;
  # DEBUG BEGIN_STMT
  if (newResult != CurrentTMSG)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (newResult == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.598_36 = Com_gDataMemPtr;
  _37 = IPduPtr->ComIPduTMSFlagsRef;
  _38 = (unsigned int) _37;
  _39 = SignalGPtr->ComPositionOfTMSFlag;
  _40 = _39 / 8;
  _41 = (unsigned int) _40;
  _42 = _38 + _41;
  _43 = Com_gDataMemPtr.598_36 + _42;
  _44 = *_43;
  _45 = SignalGPtr->ComPositionOfTMSFlag;
  _46 = (unsigned char) _45;
  _47 = (int) _46;
  _48 = _47 & 7;
  _49 = 1 << _48;
  _50 = (unsigned char) _49;
  Com_gDataMemPtr.599_51 = Com_gDataMemPtr;
  _52 = IPduPtr->ComIPduTMSFlagsRef;
  _53 = (unsigned int) _52;
  _54 = SignalGPtr->ComPositionOfTMSFlag;
  _55 = _54 / 8;
  _56 = (unsigned int) _55;
  _57 = _53 + _56;
  _58 = Com_gDataMemPtr.599_51 + _57;
  _59 = _44 | _50;
  *_58 = _59;
  # DEBUG BEGIN_STMT
  _60 = *SGFlagPtr;
  _61 = _60 | 1;
  *SGFlagPtr = _61;
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.600_62 = Com_gDataMemPtr;
  _63 = IPduPtr->ComIPduTMSFlagsRef;
  _64 = (unsigned int) _63;
  _65 = SignalGPtr->ComPositionOfTMSFlag;
  _66 = _65 / 8;
  _67 = (unsigned int) _66;
  _68 = _64 + _67;
  _69 = Com_gDataMemPtr.600_62 + _68;
  _70 = *_69;
  _71 = SignalGPtr->ComPositionOfTMSFlag;
  _72 = (unsigned char) _71;
  _73 = (int) _72;
  _74 = _73 & 7;
  _75 = 1 << _74;
  _76 = (unsigned char) _75;
  _77 = ~_76;
  Com_gDataMemPtr.601_78 = Com_gDataMemPtr;
  _79 = IPduPtr->ComIPduTMSFlagsRef;
  _80 = (unsigned int) _79;
  _81 = SignalGPtr->ComPositionOfTMSFlag;
  _82 = _81 / 8;
  _83 = (unsigned int) _82;
  _84 = _80 + _83;
  _85 = Com_gDataMemPtr.601_78 + _84;
  _86 = _70 & _77;
  *_85 = _86;
  # DEBUG BEGIN_STMT
  _87 = *SGFlagPtr;
  _88 = _87 & 254;
  *SGFlagPtr = _88;

  <bb 14> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _89 = *PduStatusFlagsPtr;
  _90 = _89 >> 6;
  CurrentTMIPDU = _90 & 1;
  # DEBUG BEGIN_STMT
  newTM = Com_EB_CalculateTM (IPduPtr);
  # DEBUG BEGIN_STMT
  if (newTM != CurrentTMIPDU)
    goto <bb 15>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  TMSChanged = 1;
  # DEBUG BEGIN_STMT
  if (newTM == 1)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _91 = *PduStatusFlagsPtr;
  _92 = _91 | 64;
  *PduStatusFlagsPtr = _92;
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _93 = *PduStatusFlagsPtr;
  _94 = _93 & 191;
  *PduStatusFlagsPtr = _94;

  <bb 18> :
  # DEBUG BEGIN_STMT
  _95 = *PduStatusFlagsPtr;
  _96 = _95 | 128;
  *PduStatusFlagsPtr = _96;
  # DEBUG BEGIN_STMT
  if (newTM == 1)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _97 = IPduPtr->ComTxModeModes;
  iftmp.602 = _97 & 15;
  goto <bb 21>; [INV]

  <bb 20> :
  _98 = IPduPtr->ComTxModeModes;
  iftmp.602 = _98 >> 4;

  <bb 21> :
  AktTM = iftmp.602;
  # DEBUG BEGIN_STMT
  if (AktTM == 2)
    goto <bb 23>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  if (AktTM == 5)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  transmit = 1;

  <bb 24> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _99 = *PduStatusFlagsPtr;
  _100 = (unsigned int) _99;
  _101 = _100 & 1;
  if (_101 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  retval = 0;
  # DEBUG BEGIN_STMT
  if (transmit == 1)
    goto <bb 26>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  _102 = SignalGPtr->ComTxSignalGroupFlags;
  _103 = _102 >> 2;
  _104 = (unsigned int) _103;
  _105 = _104 & 1;
  _106 = _105 != 0;
  trig_wo_rep = (boolean) _106;
  # DEBUG BEGIN_STMT
  _107 = TMSChanged == 0;
  tms_changed = (boolean) _107;
  # DEBUG BEGIN_STMT
  if (trig_wo_rep != 0)
    goto <bb 27>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 27> :
  if (tms_changed != 0)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  Com_EB_Request_Send_Pdu (PduId, IPduPtr, PduStatusFlagsPtr, SendInMainFunctionTx);
  goto <bb 31>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  Com_EB_SendUponSendApiCall (PduId, SendInMainFunctionTx);
  goto <bb 31>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  retval = 128;

  <bb 31> :
  # DEBUG BEGIN_STMT
  D.11711 = retval;
  return D.11711;

}


Com_EB_SendSignalGroupArray (const uint8 * SGArrayPtr, const struct ComTxSignalGroupType * SignalGPtr, ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr, boolean SendInMainFunctionTx)
{
  boolean forceTrigger;
  uint8 retval;
  uint8 D.11617;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  Com_EB_SetGroupSignalTMSFlagOfSignalGroup (SignalGPtr, SGArrayPtr);
  # DEBUG BEGIN_STMT
  forceTrigger = Com_EB_WriteShadowBuffer (SignalGPtr, IPduPtr, SGArrayPtr);
  # DEBUG BEGIN_STMT
  retval = Com_EB_CalculateSignalGroupTM (forceTrigger, SignalGPtr, IPduPtr, PduId, SendInMainFunctionTx);
  # DEBUG BEGIN_STMT
  D.11617 = retval;
  return D.11617;

}


Com_EB_SendSignalGroupArray_DETCheck (const uint8 * SGArrayPtr, uint16 SGArrayLength, const struct ComTxSignalGroupType * SignalGPtr, ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr, boolean SendInMainFunctionTx)
{
  uint8 retval;
  uint8 D.12139;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  if (SGArrayPtr == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 67, 3);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = SignalGPtr->ComByteSize;
  if (SGArrayLength != _1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 67, 1);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = Com_EB_SendSignalGroupArray (SGArrayPtr, SignalGPtr, PduId, IPduPtr, SendInMainFunctionTx);

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.12139 = retval;
  return D.12139;

}


Com_EB_SendSignalGroup (const uint8 * SGArrayPtr, uint16 SGArrayPtrLength, const struct ComTxSignalGroupType * SignalGPtr, ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr, boolean SendInMainFunctionTx)
{
  boolean forceTrigger;
  uint8 retval;
  const ComRAMIdxType ComSignalGroupValueRef;
  uint8 D.11739;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ComSignalGroupValueRef = SignalGPtr->ComSignalGroupValueRef;
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (ComSignalGroupValueRef == 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 13, 1);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.624_1 = Com_gDataMemPtr;
  _2 = (sizetype) ComSignalGroupValueRef;
  _3 = Com_gDataMemPtr.624_1 + _2;
  forceTrigger = Com_EB_WriteShadowBuffer (SignalGPtr, IPduPtr, _3);
  # DEBUG BEGIN_STMT
  retval = Com_EB_CalculateSignalGroupTM (forceTrigger, SignalGPtr, IPduPtr, PduId, SendInMainFunctionTx);

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.11739 = retval;
  return D.11739;

}


Com_GetSendSignalRetVal (const struct ComTxSignalType * SignalPtr)
{
  uint8 * const PduStatusFlagsPtr;
  uint8 RetVal;
  uint8 D.11589;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 128;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.546_1 = Com_gDataMemPtr;
  Com_gConfigPtr.547_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.547_2->ComTxIPduStatusBase;
  _4 = (int) _3;
  _5 = SignalPtr->ComIPduRef;
  _6 = (int) _5;
  _7 = _4 + _6;
  _8 = (sizetype) _7;
  PduStatusFlagsPtr = Com_gDataMemPtr.546_1 + _8;
  # DEBUG BEGIN_STMT
  _9 = *PduStatusFlagsPtr;
  _10 = (unsigned int) _9;
  _11 = _10 & 1;
  if (_11 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.11589 = RetVal;
  return D.11589;

}


Com_EB_WriteDynSignal_ExitArea_0 (const uint8 * SignalDataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  const uint16 index;
  void (*<T69f>) (const void *, uint8 *, const struct ComTxSignalType *, struct Com_EB_WriteIntDataType *) fptr;
  const ComIPduSizeType dynPduLength;
  const ComSignalDescBitType StartingByte;
  uint8 * const dataPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.553_1 = Com_gDataMemPtr;
  _2 = Com_EB_WritePropPtr->ComSignalBase.ComBufferRef;
  _3 = (sizetype) _2;
  dataPtr = Com_gDataMemPtr.553_1 + _3;
  # DEBUG BEGIN_STMT
  StartingByte = Com_EB_WritePropPtr->ComSignalPositionInBit;
  # DEBUG BEGIN_STMT
  _4 = IntDataPtr->arraySize;
  dynPduLength = StartingByte + _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComTxSignalFlags;
  _6 = _5 >> 4;
  _7 = (unsigned char) _6;
  _8 = (unsigned int) _7;
  _9 = _8 & 1;
  if (_9 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.554_10 = Com_gDataMemPtr;
  Com_gConfigPtr.555_11 = Com_gConfigPtr;
  _12 = Com_gConfigPtr.555_11->ComTxIPduLengthBase;
  _13 = (sizetype) _12;
  _14 = Com_gDataMemPtr.554_10 + _13;
  _15 = Com_EB_WritePropPtr->ComIPduRef;
  _16 = (unsigned int) _15;
  _17 = _16 * 2;
  _18 = _14 + _17;
  _19 = *_18;
  if (dynPduLength != _19)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  IntDataPtr->trigger = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.556_20 = Com_gDataMemPtr;
  Com_gConfigPtr.557_21 = Com_gConfigPtr;
  _22 = Com_gConfigPtr.557_21->ComTxIPduLengthBase;
  _23 = (sizetype) _22;
  _24 = Com_gDataMemPtr.556_20 + _23;
  _25 = Com_EB_WritePropPtr->ComIPduRef;
  _26 = (unsigned int) _25;
  _27 = _26 * 2;
  _28 = _24 + _27;
  *_28 = dynPduLength;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _29 = Com_EB_WritePropPtr->ComTxSignalFlags;
  index = _29 & 191;
  # DEBUG BEGIN_STMT
  _30 = (int) index;
  fptr = Com_WriteFuncs[_30];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, dataPtr, Com_EB_WritePropPtr, IntDataPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  Com_EB_SendSignal_Transmit (Com_EB_WritePropPtr, IntDataPtr);
  return;

}


Com_EB_SendSignal_Transmit (const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 * const PduStatusFlagsPtr;
  const struct ComTxIPduType * const IPduPtr;
  boolean tms_changed;
  boolean trig_wo_rep;
  boolean TmpTrigger;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = IntDataPtr->SendSigRetval;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  TmpTrigger = IntDataPtr->trigger;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComTxSignalFlags;
  _3 = _2 >> 10;
  _4 = (unsigned char) _3;
  _5 = (unsigned int) _4;
  _6 = _5 & 1;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = Com_EB_WritePropPtr->ComTxSignalFlags;
  _8 = _7 >> 4;
  _9 = (unsigned char) _8;
  _10 = (unsigned int) _9;
  _11 = _10 & 1;
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  TmpTrigger = 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TmpTrigger == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _12 = Com_EB_WritePropPtr->ComTxSignalFlags;
  _13 = _12 >> 11;
  _14 = (unsigned char) _13;
  _15 = (unsigned int) _14;
  _16 = _15 & 1;
  _17 = _16 != 0;
  trig_wo_rep = (boolean) _17;
  # DEBUG BEGIN_STMT
  _18 = IntDataPtr->TMSChanged;
  _19 = _18 == 0;
  tms_changed = (boolean) _19;
  # DEBUG BEGIN_STMT
  if (trig_wo_rep != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  if (tms_changed != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.263_20 = Com_gConfigPtr;
  Com_gConfigPtr.264_21 = Com_gConfigPtr;
  _22 = Com_gConfigPtr.264_21->ComTxIPduRef;
  _23 = Com_EB_WritePropPtr->ComIPduRef;
  _24 = (unsigned int) _23;
  _25 = _24 * 64;
  _26 = _22 + _25;
  IPduPtr = Com_gConfigPtr.263_20 + _26;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.265_27 = Com_gDataMemPtr;
  Com_gConfigPtr.266_28 = Com_gConfigPtr;
  _29 = Com_gConfigPtr.266_28->ComTxIPduStatusBase;
  _30 = (int) _29;
  _31 = Com_EB_WritePropPtr->ComIPduRef;
  _32 = (int) _31;
  _33 = _30 + _32;
  _34 = (sizetype) _33;
  PduStatusFlagsPtr = Com_gDataMemPtr.265_27 + _34;
  # DEBUG BEGIN_STMT
  _35 = Com_EB_WritePropPtr->ComIPduRef;
  _36 = IntDataPtr->SendInMainFunctionTx;
  Com_EB_Request_Send_Pdu (_35, IPduPtr, PduStatusFlagsPtr, _36);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _37 = Com_EB_WritePropPtr->ComIPduRef;
  _38 = IntDataPtr->SendInMainFunctionTx;
  Com_EB_SendUponSendApiCall (_37, _38);

  <bb 11> :
  return;

}


Com_EB_Write_SignalExt (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  const uint8 AktTM;
  uint8 PduStatusByte;
  boolean newTM;
  const uint8 SignalTMSFlag;
  boolean CurrentTM;
  boolean OldFilterResult;
  uint8 * const PduTMSFlagPtr;
  const struct ComTxSignalGroupType * const SignalGPtr;
  const ComSignalGroupRefType SignalGId;
  const boolean TMSResult;
  uint8 * const PduStatusFlagsPtr;
  const uint16 index;
  void (*<T69f>) (const void *, uint8 *, const struct ComTxSignalType *, struct Com_EB_WriteIntDataType *) fptr;
  const struct ComTxIPduType * const IPduPtr;
  const ComIPduRefType PduId;
  const uint8 iftmp.156;

  <bb 2> :
  # DEBUG BEGIN_STMT
  PduId = Com_EB_WritePropPtr->ComIPduRef;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.144_1 = Com_gConfigPtr;
  Com_gConfigPtr.145_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.145_2->ComTxIPduRef;
  _4 = (unsigned int) PduId;
  _5 = _4 * 64;
  _6 = _3 + _5;
  IPduPtr = Com_gConfigPtr.144_1 + _6;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _7 = Com_EB_WritePropPtr->ComTxSignalFlags;
  index = _7 & 255;
  # DEBUG BEGIN_STMT
  _8 = (int) index;
  fptr = Com_WriteFuncs[_8];
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, dataPtr, Com_EB_WritePropPtr, IntDataPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.146_9 = Com_gDataMemPtr;
  Com_gConfigPtr.147_10 = Com_gConfigPtr;
  _11 = Com_gConfigPtr.147_10->ComTxIPduStatusBase;
  _12 = (int) _11;
  _13 = Com_EB_WritePropPtr->ComIPduRef;
  _14 = (int) _13;
  _15 = _12 + _14;
  _16 = (sizetype) _15;
  PduStatusFlagsPtr = Com_gDataMemPtr.146_9 + _16;
  # DEBUG BEGIN_STMT
  _17 = Com_EB_WritePropPtr->ComSignalBase.ComFilterConf.ComFilterType;
  if (_17 > 1)
    goto <bb 3>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  TMSResult = Com_EB_SendSignal_Filter (Com_EB_WritePropPtr, SignalDataPtr);
  # DEBUG BEGIN_STMT
  _18 = Com_EB_WritePropPtr->ComSignalBase.ComSignalGroupRef;
  if (_18 != 65535)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SignalGId = Com_EB_WritePropPtr->ComSignalBase.ComSignalGroupRef;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.148_19 = Com_gConfigPtr;
  Com_gConfigPtr.149_20 = Com_gConfigPtr;
  _21 = Com_gConfigPtr.149_20->ComTxSignalGroupRef;
  _22 = (unsigned int) SignalGId;
  _23 = _22 * 32;
  _24 = _21 + _23;
  SignalGPtr = Com_gConfigPtr.148_19 + _24;
  # DEBUG BEGIN_STMT
  Com_EB_CalculateGroupSignalTM (Com_EB_WritePropPtr, SignalGPtr, TMSResult);
  goto <bb 22>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.150_25 = Com_gDataMemPtr;
  _26 = IPduPtr->ComIPduTMSFlagsRef;
  _27 = (unsigned int) _26;
  _28 = Com_EB_WritePropPtr->ComPositionOfTMSFlag;
  _29 = _28 / 8;
  _30 = (unsigned int) _29;
  _31 = _27 + _30;
  PduTMSFlagPtr = Com_gDataMemPtr.150_25 + _31;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _32 = Com_EB_WritePropPtr->ComPositionOfTMSFlag;
  _33 = (unsigned char) _32;
  SignalTMSFlag = _33 & 7;
  # DEBUG BEGIN_STMT
  _34 = *PduTMSFlagPtr;
  _35 = (int) _34;
  _36 = (int) SignalTMSFlag;
  _37 = _35 >> _36;
  _38 = (unsigned char) _37;
  OldFilterResult = _38 & 1;
  # DEBUG BEGIN_STMT
  if (OldFilterResult != TMSResult)
    goto <bb 6>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IntDataPtr->TMSChanged = 1;
  # DEBUG BEGIN_STMT
  if (TMSResult == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _39 = (long unsigned int) SignalTMSFlag;
  TS_AtomicSetBit_8 (PduTMSFlagPtr, _39);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _40 = (long unsigned int) SignalTMSFlag;
  TS_AtomicClearBit_8 (PduTMSFlagPtr, _40);

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  newTM = Com_EB_CalculateTM (IPduPtr);
  # DEBUG BEGIN_STMT
  _41 = *PduStatusFlagsPtr;
  PduStatusByte = _41;
  # DEBUG BEGIN_STMT
  PduStatusByte.151_42 = PduStatusByte;
  _43 = PduStatusByte.151_42 >> 6;
  CurrentTM = _43 & 1;
  # DEBUG BEGIN_STMT
  if (newTM != CurrentTM)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (newTM == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  PduStatusByte.152_44 = PduStatusByte;
  _45 = PduStatusByte.152_44 | 64;
  PduStatusByte = _45;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  PduStatusByte.153_46 = PduStatusByte;
  _47 = PduStatusByte.153_46 & 191;
  PduStatusByte = _47;

  <bb 13> :
  # DEBUG BEGIN_STMT
  PduStatusByte.154_48 = PduStatusByte;
  _49 = PduStatusByte.154_48 | 128;
  PduStatusByte = _49;
  # DEBUG BEGIN_STMT
  PduStatusByte.155_50 = PduStatusByte;
  *PduStatusFlagsPtr = PduStatusByte.155_50;

  <bb 14> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (newTM != CurrentTM)
    goto <bb 15>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (newTM == 1)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _51 = IPduPtr->ComTxModeModes;
  iftmp.156 = _51 & 15;
  goto <bb 18>; [INV]

  <bb 17> :
  _52 = IPduPtr->ComTxModeModes;
  iftmp.156 = _52 >> 4;

  <bb 18> :
  AktTM = iftmp.156;
  # DEBUG BEGIN_STMT
  if (AktTM == 2)
    goto <bb 20>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  if (AktTM == 5)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  IntDataPtr->trigger = 1;

  <bb 21> :
  PduStatusByte = {CLOBBER};

  <bb 22> :
  # DEBUG BEGIN_STMT
  _53 = Com_EB_WritePropPtr->ComSignalBase.ComSignalGroupRef;
  if (_53 == 65535)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  Com_EB_SendSignal_Transmit (Com_EB_WritePropPtr, IntDataPtr);

  <bb 24> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_SendSignal_Filter (const struct ComTxSignalType * SignalPtr, const void * SignalDataPtr)
{
  const struct ComSignalBaseType * const Com_EB_ReadPropPtr;
  const Com_TS_SignalTypeType SignalType;
  boolean TMSResult;
  boolean D.11170;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TMSResult = 0;
  # DEBUG BEGIN_STMT
  _1 = SignalPtr->ComTxSignalFlags;
  _2 = _1 >> 12;
  _3 = (unsigned char) _2;
  SignalType = _3 & 15;
  # DEBUG BEGIN_STMT
  Com_EB_ReadPropPtr = &SignalPtr->ComSignalBase;
  # DEBUG BEGIN_STMT
  _4 = (int) SignalType;
  switch (_4) <default: <L12> [INV], case 0: <L0> [INV], case 1: <L5> [INV], case 2: <L6> [INV], case 3: <L4> [INV], case 4: <L2> [INV], case 5: <L3> [INV], case 6: <L1> [INV], case 9: <L8> [INV], case 10: <L7> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _5 = &Com_EB_ReadPropPtr->ComFilterConf;
  TMSResult = Com_EB_FilterBoolean (_5, SignalDataPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _6 = &Com_EB_ReadPropPtr->ComFilterConf;
  TMSResult = Com_EB_FilterUint8 (_6, SignalDataPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _7 = &Com_EB_ReadPropPtr->ComFilterConf;
  TMSResult = Com_EB_FilterUint16 (_7, SignalDataPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _8 = &Com_EB_ReadPropPtr->ComFilterConf;
  TMSResult = Com_EB_FilterUint32 (_8, SignalDataPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _9 = &Com_EB_ReadPropPtr->ComFilterConf;
  TMSResult = Com_EB_FilterSint8 (_9, SignalDataPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  _10 = &Com_EB_ReadPropPtr->ComFilterConf;
  TMSResult = Com_EB_FilterSint16 (_10, SignalDataPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  _11 = &Com_EB_ReadPropPtr->ComFilterConf;
  TMSResult = Com_EB_FilterSint32 (_11, SignalDataPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  _12 = &Com_EB_ReadPropPtr->ComFilterConf;
  TMSResult = Com_EB_FilterSint64 (_12, SignalDataPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  _13 = &Com_EB_ReadPropPtr->ComFilterConf;
  TMSResult = Com_EB_FilterUint64 (_13, SignalDataPtr);
  # DEBUG BEGIN_STMT

  <bb 12> :
<L12>:
  # DEBUG BEGIN_STMT
  D.11170 = TMSResult;
  return D.11170;

}


Com_EB_MdtQueue (ComIPduRefType Pdu, const struct ComTxIPduType * IPduPtr, ComTxIPduMinimumDelayTimeFactorType MDT)
{
  ComTxIPduMinimumDelayTimeFactorType * const MDTQueueValPtr;
  ComTxIPduMinimumDelayTimeFactorType * const MDTQueueBase;
  ComTxIPduMinimumDelayTimeFactorType TimeOut;
  ComTxIPduMinimumDelayTimeFactorType globalTime;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.276_1 = Com_gDataMemPtr;
  Com_gConfigPtr.277_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.277_2->ComMDTQueueBase;
  _4 = (sizetype) _3;
  MDTQueueBase = Com_gDataMemPtr.276_1 + _4;
  # DEBUG BEGIN_STMT
  _5 = IPduPtr->MDTQueueRef;
  _6 = (unsigned int) _5;
  _7 = _6 * 2;
  MDTQueueValPtr = MDTQueueBase + _7;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  TimeOut = globalTime + MDT;
  # DEBUG BEGIN_STMT
  *MDTQueueValPtr = TimeOut;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.278_8 = Com_gDataMemPtr;
  Com_gConfigPtr.279_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.279_9->ComTxIPduStatusBase;
  _11 = (int) _10;
  _12 = (int) Pdu;
  _13 = _11 + _12;
  _14 = (sizetype) _13;
  _15 = Com_gDataMemPtr.278_8 + _14;
  _16 = *_15;
  Com_gDataMemPtr.280_17 = Com_gDataMemPtr;
  Com_gConfigPtr.281_18 = Com_gConfigPtr;
  _19 = Com_gConfigPtr.281_18->ComTxIPduStatusBase;
  _20 = (int) _19;
  _21 = (int) Pdu;
  _22 = _20 + _21;
  _23 = (sizetype) _22;
  _24 = Com_gDataMemPtr.280_17 + _23;
  _25 = _16 | 2;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_ClearTxUpdateBits (const struct ComTxIPduType * IPduPtr)
{
  const struct ComTxSignalGroupType * const SignalGPtr;
  const ComSignalGroupRefType signalGId;
  const struct ComTxSignalType * const SignalPtr;
  const ComSignalRefType signalId;
  ComSignalGroupRefType j;
  ComSignalRefType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = IPduPtr->ComIPduSignalRefFirst;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.282_1 = Com_gConfigPtr;
  Com_gConfigPtr.283_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.283_2->ComTxIPduSignalListRef;
  _4 = (unsigned int) i;
  _5 = _4 * 2;
  _6 = _3 + _5;
  _7 = Com_gConfigPtr.282_1 + _6;
  signalId = *_7;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.284_8 = Com_gConfigPtr;
  Com_gConfigPtr.285_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.285_9->ComTxSignalRef;
  _11 = (unsigned int) signalId;
  _12 = _11 * 26;
  _13 = _10 + _12;
  SignalPtr = Com_gConfigPtr.284_8 + _13;
  # DEBUG BEGIN_STMT
  _14 = SignalPtr->ComTxSignalFlags;
  _15 = _14 >> 5;
  _16 = (unsigned char) _15;
  _17 = (unsigned int) _16;
  _18 = _17 & 1;
  if (_18 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.286_19 = Com_gDataMemPtr;
  _20 = IPduPtr->ComIPduValueRef;
  _21 = (unsigned int) _20;
  _22 = SignalPtr->ComUpdateBitPositionInBit;
  _23 = _22 / 8;
  _24 = (unsigned int) _23;
  _25 = _21 + _24;
  _26 = Com_gDataMemPtr.286_19 + _25;
  _27 = SignalPtr->ComUpdateBitPositionInBit;
  _28 = (long unsigned int) _27;
  _29 = _28 & 7;
  TS_AtomicClearBit_8 (_26, _29);

  <bb 5> :
  # DEBUG BEGIN_STMT
  i.287_30 = i;
  i = i.287_30 + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _31 = (int) i;
  _32 = IPduPtr->ComIPduSignalRefNum;
  _33 = (int) _32;
  _34 = IPduPtr->ComIPduSignalRefFirst;
  _35 = (int) _34;
  _36 = _33 + _35;
  if (_31 < _36)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  j = IPduPtr->ComIPduSignalGroupRefFirst;
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.288_37 = Com_gConfigPtr;
  Com_gConfigPtr.289_38 = Com_gConfigPtr;
  _39 = Com_gConfigPtr.289_38->ComTxIPduSignalGroupListRef;
  _40 = (unsigned int) j;
  _41 = _40 * 2;
  _42 = _39 + _41;
  _43 = Com_gConfigPtr.288_37 + _42;
  signalGId = *_43;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.290_44 = Com_gConfigPtr;
  Com_gConfigPtr.291_45 = Com_gConfigPtr;
  _46 = Com_gConfigPtr.291_45->ComTxSignalGroupRef;
  _47 = (unsigned int) signalGId;
  _48 = _47 * 32;
  _49 = _46 + _48;
  SignalGPtr = Com_gConfigPtr.290_44 + _49;
  # DEBUG BEGIN_STMT
  _50 = SignalGPtr->ComTxSignalGroupFlags;
  _51 = _50 >> 3;
  _52 = (unsigned int) _51;
  _53 = _52 & 1;
  if (_53 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.292_54 = Com_gDataMemPtr;
  _55 = IPduPtr->ComIPduValueRef;
  _56 = (unsigned int) _55;
  _57 = SignalGPtr->ComUpdateBitPositionInBit;
  _58 = _57 / 8;
  _59 = (unsigned int) _58;
  _60 = _56 + _59;
  _61 = Com_gDataMemPtr.292_54 + _60;
  _62 = SignalGPtr->ComUpdateBitPositionInBit;
  _63 = (long unsigned int) _62;
  _64 = _63 & 7;
  TS_AtomicClearBit_8 (_61, _64);

  <bb 10> :
  # DEBUG BEGIN_STMT
  j.293_65 = j;
  j = j.293_65 + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _66 = (int) j;
  _67 = IPduPtr->ComIPduSignalGroupRefNum;
  _68 = (int) _67;
  _69 = IPduPtr->ComIPduSignalGroupRefFirst;
  _70 = (int) _69;
  _71 = _68 + _70;
  if (_66 < _71)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_TxConfirmations (const struct ComTxIPduType * IPduPtr)
{
  void (*<T5f8>) (void) fptr;
  Com_CbkTxAckIdxType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = IPduPtr->ComNotificationFirst;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.794_1 = Com_gConfigPtr;
  Com_gConfigPtr.795_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.795_2->ComTxNotificationRef;
  _4 = (unsigned int) i;
  _5 = _4 * 2;
  _6 = _3 + _5;
  _7 = Com_gConfigPtr.794_1 + _6;
  _8 = *_7;
  _9 = (int) _8;
  fptr = Com_CbkTxAck_Array[_9];
  # DEBUG BEGIN_STMT
  fptr ();
  # DEBUG BEGIN_STMT
  i.796_10 = i;
  i = i.796_10 + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _11 = (int) i;
  _12 = IPduPtr->ComNotificationFirst;
  _13 = (int) _12;
  _14 = IPduPtr->ComNotificationNum;
  _15 = (int) _14;
  _16 = _13 + _15;
  if (_11 < _16)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Com_EB_TxDM_TMNone (const struct ComTxIPduType * IPduPtr, ComIPduRefType PduId)
{
  uint8 TMOther;
  uint8 BitRes;
  boolean TxDM;
  uint8 iftmp.480;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = IPduPtr->ComTxIPduFlags;
  _2 = _1 >> 1;
  TxDM = _2 & 1;
  # DEBUG BEGIN_STMT
  if (TxDM == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.478_3 = Com_gDataMemPtr;
  Com_gConfigPtr.479_4 = Com_gConfigPtr;
  _5 = Com_gConfigPtr.479_4->ComTxIPduStatusBase;
  _6 = (int) _5;
  _7 = (int) PduId;
  _8 = _6 + _7;
  _9 = (sizetype) _8;
  _10 = Com_gDataMemPtr.478_3 + _9;
  _11 = *_10;
  _12 = _11 >> 6;
  BitRes = _12 & 1;
  # DEBUG BEGIN_STMT
  if (BitRes == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _13 = IPduPtr->ComTxModeModes;
  iftmp.480 = _13 & 15;
  goto <bb 6>; [INV]

  <bb 5> :
  _14 = IPduPtr->ComTxModeModes;
  iftmp.480 = _14 >> 4;

  <bb 6> :
  TMOther = iftmp.480;
  # DEBUG BEGIN_STMT
  if (TMOther == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _15 = IPduPtr->ComTxTimeoutFactorValue;
  _16 = IPduPtr->TxDMQueueRef;
  Com_EB_TxDMQueue (PduId, _15, _16);

  <bb 8> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_TxDMQueue (ComIPduRefType PduId, ComTxTimeoutFactorType Offset, ComIPduRefType EntryInTxDMcQueue)
{
  ComTxTimeoutFactorType * const TxTimeoutQueueValPtr;
  ComTxTimeoutFactorType * const TxTimeoutQueueBase;
  ComTxTimeoutFactorType globalTime;
  ComTxTimeoutFactorType TimeOut;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.267_1 = Com_gDataMemPtr;
  Com_gConfigPtr.268_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.268_2->ComTxTimeoutQueueBase;
  _4 = (sizetype) _3;
  TxTimeoutQueueBase = Com_gDataMemPtr.267_1 + _4;
  # DEBUG BEGIN_STMT
  _5 = (unsigned int) EntryInTxDMcQueue;
  _6 = _5 * 2;
  TxTimeoutQueueValPtr = TxTimeoutQueueBase + _6;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  TimeOut = globalTime + Offset;
  # DEBUG BEGIN_STMT
  *TxTimeoutQueueValPtr = TimeOut;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.269_7 = Com_gDataMemPtr;
  Com_gConfigPtr.270_8 = Com_gConfigPtr;
  _9 = Com_gConfigPtr.270_8->ComTxIPduStatusBase;
  _10 = (int) _9;
  _11 = (int) PduId;
  _12 = _10 + _11;
  _13 = (sizetype) _12;
  _14 = Com_gDataMemPtr.269_7 + _13;
  _15 = *_14;
  Com_gDataMemPtr.271_16 = Com_gDataMemPtr;
  Com_gConfigPtr.272_17 = Com_gConfigPtr;
  _18 = Com_gConfigPtr.272_17->ComTxIPduStatusBase;
  _19 = (int) _18;
  _20 = (int) PduId;
  _21 = _19 + _20;
  _22 = (sizetype) _21;
  _23 = Com_gDataMemPtr.271_16 + _22;
  _24 = _15 | 32;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  return;

}


Com_EB_InitStartTxIPdu (ComIPduRefType TxPduId)
{
  const struct ComTxIPduType * IPduPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.517_1 = Com_gConfigPtr;
  Com_gConfigPtr.518_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.518_2->ComTxIPduRef;
  _4 = (unsigned int) TxPduId;
  _5 = _4 * 64;
  _6 = _3 + _5;
  IPduPtr = Com_gConfigPtr.517_1 + _6;
  # DEBUG BEGIN_STMT
  Com_EB_InitTxIPdu (TxPduId);
  # DEBUG BEGIN_STMT
  _7 = IPduPtr->ComIPduGroupMaskRef;
  if (_7 == 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_StartIPdu (IPduPtr, TxPduId);

  <bb 4> :
  return;

}


Com_EB_InitTxIPdu (ComIPduRefType TxPduId)
{
  const struct ComTxIPduType * IPduPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.429_1 = Com_gConfigPtr;
  Com_gConfigPtr.430_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.430_2->ComTxIPduRef;
  _4 = (unsigned int) TxPduId;
  _5 = _4 * 64;
  _6 = _3 + _5;
  IPduPtr = Com_gConfigPtr.429_1 + _6;
  # DEBUG BEGIN_STMT
  Com_EB_InitTxIPdu_PduBuffer (IPduPtr, TxPduId);
  # DEBUG BEGIN_STMT
  Com_EB_InitTxIPdu_SignalGroups (IPduPtr);
  # DEBUG BEGIN_STMT
  Com_EB_InitTxIPdu_HandleFlags (IPduPtr, TxPduId);
  # DEBUG BEGIN_STMT
  Com_EB_InitTxIPdu_Signals (IPduPtr);
  return;

}


Com_EB_HandleTxIPdu (boolean toBeActivated, const struct ComTxIPduType * IPduPtr, boolean Initialize, ComIPduRefType IPduId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (toBeActivated == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_HandleTxIPdu_Start (IPduPtr, Initialize, IPduId);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_EB_HandleTxIPdu_Stop (IPduPtr, IPduId);

  <bb 5> :
  return;

}


Com_EB_StartIPdu (const struct ComTxIPduType * IPduPtr, ComIPduRefType PduId)
{
  const struct ComTxModePeriodicType * const TMPeriodicPtr;
  const struct ComTxModeMixedNTimesType * const TMMixedNTimesPtr;
  uint8 * const IPduFlagBytePtr;
  Com_PeriodicSendNextDueTimeType TimeToSendFirst;
  Com_PeriodicSendNextDueTimeType TimeToSendPeriodic;
  ComTxModeIdxType TMRef;
  uint8 BitRes;
  uint8 AktTM;
  ComTxModeIdxType iftmp.471;
  uint8 iftmp.470;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeToSendPeriodic = 0;
  # DEBUG BEGIN_STMT
  TimeToSendFirst = 0;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.468_1 = Com_gDataMemPtr;
  Com_gConfigPtr.469_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.469_2->ComTxIPduStatusBase;
  _4 = (int) _3;
  _5 = (int) PduId;
  _6 = _4 + _5;
  _7 = (sizetype) _6;
  IPduFlagBytePtr = Com_gDataMemPtr.468_1 + _7;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _8 = *IPduFlagBytePtr;
  _9 = _8 | 1;
  *IPduFlagBytePtr = _9;
  # DEBUG BEGIN_STMT
  _10 = *IPduFlagBytePtr;
  _11 = _10 & 127;
  *IPduFlagBytePtr = _11;
  # DEBUG BEGIN_STMT
  _12 = *IPduFlagBytePtr;
  _13 = _12 >> 6;
  BitRes = _13 & 1;
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (BitRes == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _14 = IPduPtr->ComTxModeModes;
  iftmp.470 = _14 & 15;
  goto <bb 5>; [INV]

  <bb 4> :
  _15 = IPduPtr->ComTxModeModes;
  iftmp.470 = _15 >> 4;

  <bb 5> :
  AktTM = iftmp.470;
  # DEBUG BEGIN_STMT
  if (BitRes == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.471 = IPduPtr->ComTxModeTrueRef;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.471 = IPduPtr->ComTxModeFalseRef;

  <bb 8> :
  TMRef = iftmp.471;
  # DEBUG BEGIN_STMT
  _16 = (int) AktTM;
  switch (_16) <default: <L23> [INV], case 1: <L7> [INV], case 3: <L7> [INV], case 4: <L6> [INV]>

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.472_17 = Com_gConfigPtr;
  Com_gConfigPtr.473_18 = Com_gConfigPtr;
  _19 = Com_gConfigPtr.473_18->ComTxModeMixedNTimesRef;
  _20 = (unsigned int) TMRef;
  _21 = _20 * 8;
  _22 = _19 + _21;
  TMMixedNTimesPtr = Com_gConfigPtr.472_17 + _22;
  # DEBUG BEGIN_STMT
  TimeToSendFirst = TMMixedNTimesPtr->ComTxModeTimeOffsetFactor;
  # DEBUG BEGIN_STMT
  TimeToSendPeriodic = TMMixedNTimesPtr->ComTxModeTimePeriodFactor;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.474_23 = Com_gConfigPtr;
  Com_gConfigPtr.475_24 = Com_gConfigPtr;
  _25 = Com_gConfigPtr.475_24->ComTxModePeriodicRef;
  _26 = (unsigned int) TMRef;
  _27 = _26 * 4;
  _28 = _25 + _27;
  TMPeriodicPtr = Com_gConfigPtr.474_23 + _28;
  # DEBUG BEGIN_STMT
  TimeToSendFirst = TMPeriodicPtr->ComTxModeTimeOffsetFactor;
  # DEBUG BEGIN_STMT
  TimeToSendPeriodic = TMPeriodicPtr->ComTxModeTimePeriodFactor;
  # DEBUG BEGIN_STMT

  <bb 11> :
<L23>:
  # DEBUG BEGIN_STMT
  _29 = (int) AktTM;
  switch (_29) <default: <L25> [INV], case 0: <L19> [INV], case 1: <L11> [INV], case 3 ... 4: <L11> [INV]>

  <bb 12> :
<L11>:
  # DEBUG BEGIN_STMT
  if (TimeToSendFirst == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Com_EB_Send_Pdu (PduId, IPduPtr);
  # DEBUG BEGIN_STMT
  _30 = IPduPtr->ComTxIPduFlags;
  _31 = _30 >> 1;
  _32 = (unsigned int) _31;
  _33 = _32 & 1;
  if (_33 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _34 = IPduPtr->ComTxTimeoutFactorValue;
  _35 = IPduPtr->TxDMQueueRef;
  Com_EB_TxDMQueue (PduId, _34, _35);
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  TimeToSendPeriodic = TimeToSendFirst;

  <bb 16> :
  # DEBUG BEGIN_STMT
  _36 = IPduPtr->PeriodicQueueRef;
  Com_EB_PeriodicSendQueue (TimeToSendPeriodic, _36);
  # DEBUG BEGIN_STMT
  TS_AtomicSetBit_8 (IPduFlagBytePtr, 2);
  # DEBUG BEGIN_STMT
  goto <bb 18>; [INV]

  <bb 17> :
<L19>:
  # DEBUG BEGIN_STMT
  Com_EB_TxDM_TMNone (IPduPtr, PduId);
  # DEBUG BEGIN_STMT

  <bb 18> :
<L25>:
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_InitTxIPdu_Signals (const struct ComTxIPduType * IPduPtr)
{
  const ComSignalRefType signalId;
  ComSignalRefType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.465_1 = Com_gConfigPtr;
  Com_gConfigPtr.466_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.466_2->ComTxIPduSignalListRef;
  _4 = (int) i;
  _5 = IPduPtr->ComIPduSignalRefFirst;
  _6 = (int) _5;
  _7 = _4 + _6;
  _8 = (unsigned int) _7;
  _9 = _8 * 2;
  _10 = _3 + _9;
  _11 = Com_gConfigPtr.465_1 + _10;
  signalId = *_11;
  # DEBUG BEGIN_STMT
  Com_EB_InitTx_Signal (signalId);
  # DEBUG BEGIN_STMT
  i.467_12 = i;
  i = i.467_12 + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _13 = IPduPtr->ComIPduSignalWithFilterRefNum;
  if (i < _13)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Com_EB_InitTx_Signal (ComSignalRefType signalId)
{
  const struct ComTxSignalType * const SignalPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.456_1 = Com_gConfigPtr;
  Com_gConfigPtr.457_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.457_2->ComTxSignalRef;
  _4 = (unsigned int) signalId;
  _5 = _4 * 26;
  _6 = _3 + _5;
  SignalPtr = Com_gConfigPtr.456_1 + _6;
  # DEBUG BEGIN_STMT
  _7 = SignalPtr->ComSignalBase.ComFilterConf.ComFilterType;
  if (_7 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _8 = &SignalPtr->ComSignalBase;
  Com_EB_SetBuffer (_8);
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _9 = SignalPtr->ComSignalBase.ComFilterConf.ComFilterType;
  if (_9 == 7)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = SignalPtr->ComSignalBase.ComFilterConf.ComFilterRef;
  Com_ResetFilerOneEveryN (_10);

  <bb 6> :
  return;

}


Com_EB_InitTxIPdu_HandleFlags (const struct ComTxIPduType * IPduPtr, ComIPduRefType TxPduId)
{
  const uint16 NumberOfFlagsBytes;
  const uint16 NumberOfFlagsBits;
  const uint8 * const initFlagPtr;
  const uint8 * iftmp.462;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.458_1 = Com_gDataMemPtr;
  Com_gConfigPtr.459_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.459_2->ComTxIPduStatusBase;
  _4 = (int) _3;
  _5 = (int) TxPduId;
  _6 = _4 + _5;
  _7 = (sizetype) _6;
  _8 = Com_gDataMemPtr.458_1 + _7;
  *_8 = 0;
  # DEBUG BEGIN_STMT
  _9 = IPduPtr->ComTxIPduFlags;
  _10 = _9 >> 2;
  _11 = (unsigned int) _10;
  _12 = _11 & 1;
  if (_12 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.460_13 = Com_gDataMemPtr;
  Com_gConfigPtr.461_14 = Com_gConfigPtr;
  _15 = Com_gConfigPtr.461_14->ComTxIPduStatusBase;
  _16 = (int) _15;
  _17 = (int) TxPduId;
  _18 = _16 + _17;
  _19 = (sizetype) _18;
  _20 = Com_gDataMemPtr.460_13 + _19;
  TS_AtomicSetBit_8 (_20, 6);

  <bb 4> :
  # DEBUG BEGIN_STMT
  _21 = IPduPtr->ComIPduTMSFlagsInitValueRef;
  if (_21 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Com_gConfigPtr.463_22 = Com_gConfigPtr;
  _23 = IPduPtr->ComIPduTMSFlagsInitValueRef;
  iftmp.462 = Com_gConfigPtr.463_22 + _23;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.462 = 0B;

  <bb 7> :
  initFlagPtr = iftmp.462;
  # DEBUG BEGIN_STMT
  if (initFlagPtr != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _24 = IPduPtr->ComIPduSignalWithFilterRefNum;
  _25 = IPduPtr->ComIPduSignalGroupWithFilterRefNum;
  NumberOfFlagsBits = _24 + _25;
  # DEBUG BEGIN_STMT
  _26 = NumberOfFlagsBits + 7;
  NumberOfFlagsBytes = _26 / 8;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.464_27 = Com_gDataMemPtr;
  _28 = IPduPtr->ComIPduTMSFlagsRef;
  _29 = (sizetype) _28;
  _30 = Com_gDataMemPtr.464_27 + _29;
  _31 = (long unsigned int) NumberOfFlagsBytes;
  TS_MemCpy32 (_30, initFlagPtr, _31);

  <bb 9> :
  return;

}


Com_EB_InitTxIPdu_SignalGroups (const struct ComTxIPduType * IPduPtr)
{
  uint8 * const buffer;
  const struct ComTxSignalGroupType * const SignalGPtr;
  const ComSignalGroupRefType SignalGId;
  ComSignalGroupRefType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.435_1 = Com_gConfigPtr;
  Com_gConfigPtr.436_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.436_2->ComTxIPduSignalGroupListRef;
  _4 = (int) i;
  _5 = IPduPtr->ComIPduSignalGroupRefFirst;
  _6 = (int) _5;
  _7 = _4 + _6;
  _8 = (unsigned int) _7;
  _9 = _8 * 2;
  _10 = _3 + _9;
  _11 = Com_gConfigPtr.435_1 + _10;
  SignalGId = *_11;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.437_12 = Com_gConfigPtr;
  Com_gConfigPtr.438_13 = Com_gConfigPtr;
  _14 = Com_gConfigPtr.438_13->ComTxSignalGroupRef;
  _15 = (unsigned int) SignalGId;
  _16 = _15 * 32;
  _17 = _14 + _16;
  SignalGPtr = Com_gConfigPtr.437_12 + _17;
  # DEBUG BEGIN_STMT
  _18 = SignalGPtr->ComSignalGroupValueRef;
  if (_18 != 65535)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.439_19 = Com_gDataMemPtr;
  _20 = SignalGPtr->ComSignalGroupValueRef;
  _21 = (sizetype) _20;
  buffer = Com_gDataMemPtr.439_19 + _21;
  # DEBUG BEGIN_STMT
  Com_EB_InitSGBuffer (buffer, SignalGPtr, IPduPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_EB_ClearTxSGTMSState (SignalGId);
  # DEBUG BEGIN_STMT
  i.440_22 = i;
  i = i.440_22 + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _23 = IPduPtr->ComIPduSignalGroupRefNum;
  if (i < _23)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}


Com_EB_ClearTxSGTMSState (ComIPduRefType SignalGId)
{
  const ComSignalRefType GSignalId;
  ComTxGroupSignalRefType GSigRef;
  uint16 j;
  ComSignalRefType length;
  uint8 * SGFlagPtr;
  const uint8 * const initFlagPtr;
  const struct ComTxSignalGroupType * const SignalGPtr;
  const uint8 * iftmp.444;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.442_1 = Com_gConfigPtr;
  Com_gConfigPtr.443_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.443_2->ComTxSignalGroupRef;
  _4 = (unsigned int) SignalGId;
  _5 = _4 * 32;
  _6 = _3 + _5;
  SignalGPtr = Com_gConfigPtr.442_1 + _6;
  # DEBUG BEGIN_STMT
  _7 = SignalGPtr->ComSignalGTMSFlagsInitValueRef;
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Com_gConfigPtr.445_8 = Com_gConfigPtr;
  _9 = SignalGPtr->ComSignalGTMSFlagsInitValueRef;
  iftmp.444 = Com_gConfigPtr.445_8 + _9;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.444 = 0B;

  <bb 5> :
  initFlagPtr = iftmp.444;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.446_10 = Com_gDataMemPtr;
  Com_gConfigPtr.447_11 = Com_gConfigPtr;
  _12 = Com_gConfigPtr.447_11->ComTxSignalGroupStatusBase;
  _13 = (int) _12;
  _14 = (int) SignalGId;
  _15 = _13 + _14;
  _16 = (sizetype) _15;
  SGFlagPtr = Com_gDataMemPtr.446_10 + _16;
  # DEBUG BEGIN_STMT
  *SGFlagPtr = 0;
  # DEBUG BEGIN_STMT
  if (initFlagPtr != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _17 = SignalGPtr->ComGroupSignalWithFilterRefNum;
  _18 = (unsigned int) _17;
  _19 = _18 + 7;
  _20 = _19 / 8;
  length = (ComSignalRefType) _20;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.448_21 = Com_gDataMemPtr;
  _22 = SignalGPtr->ComSignalGTMSFlagsRef;
  _23 = (sizetype) _22;
  _24 = Com_gDataMemPtr.448_21 + _23;
  _25 = (long unsigned int) length;
  TS_MemCpy32 (_24, initFlagPtr, _25);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  j = 0;
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.449_26 = Com_gDataMemPtr;
  _27 = SignalGPtr->ComSignalGTMSFlagsRef;
  _28 = (int) _27;
  _29 = (int) j;
  _30 = _28 + _29;
  _31 = (sizetype) _30;
  _32 = Com_gDataMemPtr.449_26 + _31;
  _33 = *_32;
  if (_33 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.450_34 = Com_gDataMemPtr;
  Com_gConfigPtr.451_35 = Com_gConfigPtr;
  _36 = Com_gConfigPtr.451_35->ComTxSignalGroupStatusBase;
  _37 = (int) _36;
  _38 = (int) SignalGId;
  _39 = _37 + _38;
  _40 = (sizetype) _39;
  _41 = Com_gDataMemPtr.450_34 + _40;
  TS_AtomicSetBit_8 (_41, 0);

  <bb 9> :
  # DEBUG BEGIN_STMT
  j.452_42 = j;
  j = j.452_42 + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (j < length)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  GSigRef = SignalGPtr->ComGroupSignalRefFirst;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.453_43 = Com_gConfigPtr;
  Com_gConfigPtr.454_44 = Com_gConfigPtr;
  _45 = Com_gConfigPtr.454_44->ComTxSignalGroupGroupSignalListRef;
  _46 = (unsigned int) GSigRef;
  _47 = _46 * 2;
  _48 = _45 + _47;
  _49 = Com_gConfigPtr.453_43 + _48;
  GSignalId = *_49;
  # DEBUG BEGIN_STMT
  Com_EB_InitTx_Signal (GSignalId);
  # DEBUG BEGIN_STMT
  GSigRef.455_50 = GSigRef;
  GSigRef = GSigRef.455_50 + 1;

  <bb 13> :
  # DEBUG BEGIN_STMT
  _51 = (int) GSigRef;
  _52 = SignalGPtr->ComGroupSignalWithFilterRefNum;
  _53 = (int) _52;
  _54 = SignalGPtr->ComGroupSignalRefFirst;
  _55 = (int) _54;
  _56 = _53 + _55;
  if (_51 < _56)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  return;

}


Com_EB_InitTxIPdu_PduBuffer (const struct ComTxIPduType * IPduPtr, ComIPduRefType TxPduId)
{
  const uint8 * const valPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.431_1 = Com_gConfigPtr;
  _2 = IPduPtr->ComInitValueRef;
  valPtr = Com_gConfigPtr.431_1 + _2;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.432_3 = Com_gDataMemPtr;
  _4 = IPduPtr->ComIPduValueRef;
  _5 = (sizetype) _4;
  _6 = Com_gDataMemPtr.432_3 + _5;
  _7 = IPduPtr->ComIPduSizeMax;
  _8 = (long unsigned int) _7;
  TS_MemCpy32 (_6, valPtr, _8);
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.433_9 = Com_gDataMemPtr;
  Com_gConfigPtr.434_10 = Com_gConfigPtr;
  _11 = Com_gConfigPtr.434_10->ComTxIPduLengthBase;
  _12 = (sizetype) _11;
  _13 = Com_gDataMemPtr.433_9 + _12;
  _14 = (unsigned int) TxPduId;
  _15 = _14 * 2;
  _16 = _13 + _15;
  _17 = IPduPtr->ComIPduInitSize;
  *_16 = _17;
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_HandleTxIPdu_Stop (const struct ComTxIPduType * IPduPtr, ComIPduRefType IPduId)
{
  Com_CbkTxTOutIdxType j;
  uint8 AktTM;
  uint8 BitRes;
  uint8 iftmp.494;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.481_1 = Com_gDataMemPtr;
  Com_gConfigPtr.482_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.482_2->ComTxIPduStatusBase;
  _4 = (int) _3;
  _5 = (int) IPduId;
  _6 = _4 + _5;
  _7 = (sizetype) _6;
  _8 = Com_gDataMemPtr.481_1 + _7;
  TS_AtomicClearBit_8 (_8, 0);
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.483_9 = Com_gDataMemPtr;
  Com_gConfigPtr.484_10 = Com_gConfigPtr;
  _11 = Com_gConfigPtr.484_10->ComTxIPduStatusBase;
  _12 = (int) _11;
  _13 = (int) IPduId;
  _14 = _12 + _13;
  _15 = (sizetype) _14;
  _16 = Com_gDataMemPtr.483_9 + _15;
  TS_AtomicClearBit_8 (_16, 4);
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.485_17 = Com_gDataMemPtr;
  Com_gConfigPtr.486_18 = Com_gConfigPtr;
  _19 = Com_gConfigPtr.486_18->ComTxIPduStatusBase;
  _20 = (int) _19;
  _21 = (int) IPduId;
  _22 = _20 + _21;
  _23 = (sizetype) _22;
  _24 = Com_gDataMemPtr.485_17 + _23;
  _25 = *_24;
  _26 = (unsigned int) _25;
  _27 = _26 & 32;
  if (_27 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.487_28 = Com_gDataMemPtr;
  Com_gConfigPtr.488_29 = Com_gConfigPtr;
  _30 = Com_gConfigPtr.488_29->ComTxIPduStatusBase;
  _31 = (int) _30;
  _32 = (int) IPduId;
  _33 = _31 + _32;
  _34 = (sizetype) _33;
  _35 = Com_gDataMemPtr.487_28 + _34;
  TS_AtomicClearBit_8 (_35, 5);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  j = IPduPtr->ComTxTimeoutNotificationFirst;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.489_36 = Com_gConfigPtr;
  Com_gConfigPtr.490_37 = Com_gConfigPtr;
  _38 = Com_gConfigPtr.490_37->ComTxErrorNotificationRef;
  _39 = (unsigned int) j;
  _40 = _39 * 2;
  _41 = _38 + _40;
  _42 = Com_gConfigPtr.489_36 + _41;
  _43 = *_42;
  _44 = (int) _43;
  _45 = Com_CbkTxErr_Array[_44];
  _45 ();
  # DEBUG BEGIN_STMT
  j.491_46 = j;
  j = j.491_46 + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _47 = (int) j;
  _48 = IPduPtr->ComTxTimeoutNotificationFirst;
  _49 = (int) _48;
  _50 = IPduPtr->ComTxTimeoutNotificationNum;
  _51 = (int) _50;
  _52 = _49 + _51;
  if (_47 < _52)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.492_53 = Com_gDataMemPtr;
  Com_gConfigPtr.493_54 = Com_gConfigPtr;
  _55 = Com_gConfigPtr.493_54->ComTxIPduStatusBase;
  _56 = (int) _55;
  _57 = (int) IPduId;
  _58 = _56 + _57;
  _59 = (sizetype) _58;
  _60 = Com_gDataMemPtr.492_53 + _59;
  _61 = *_60;
  _62 = _61 >> 6;
  BitRes = _62 & 1;
  # DEBUG BEGIN_STMT
  if (BitRes == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _63 = IPduPtr->ComTxModeModes;
  iftmp.494 = _63 & 15;
  goto <bb 9>; [INV]

  <bb 8> :
  _64 = IPduPtr->ComTxModeModes;
  iftmp.494 = _64 >> 4;

  <bb 9> :
  AktTM = iftmp.494;
  # DEBUG BEGIN_STMT
  _65 = (int) AktTM;
  switch (_65) <default: <L18> [INV], case 1: <L10> [INV], case 3 ... 5: <L10> [INV]>

  <bb 10> :
<L10>:
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.495_66 = Com_gDataMemPtr;
  Com_gConfigPtr.496_67 = Com_gConfigPtr;
  _68 = Com_gConfigPtr.496_67->ComTxIPduStatusBase;
  _69 = (int) _68;
  _70 = (int) IPduId;
  _71 = _69 + _70;
  _72 = (sizetype) _71;
  _73 = Com_gDataMemPtr.495_66 + _72;
  TS_AtomicClearBit_8 (_73, 2);
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.497_74 = Com_gDataMemPtr;
  Com_gConfigPtr.498_75 = Com_gConfigPtr;
  _76 = Com_gConfigPtr.498_75->ComTxIPduStatusBase;
  _77 = (int) _76;
  _78 = (int) IPduId;
  _79 = _77 + _78;
  _80 = (sizetype) _79;
  _81 = Com_gDataMemPtr.497_74 + _80;
  TS_AtomicClearBit_8 (_81, 3);
  # DEBUG BEGIN_STMT

  <bb 11> :
<L18>:
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_HandleTxIPdu_Start (const struct ComTxIPduType * IPduPtr, boolean Initialize, ComIPduRefType IPduId)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.427_1 = Com_gDataMemPtr;
  Com_gConfigPtr.428_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.428_2->ComTxIPduStatusBase;
  _4 = (int) _3;
  _5 = (int) IPduId;
  _6 = _4 + _5;
  _7 = (sizetype) _6;
  _8 = Com_gDataMemPtr.427_1 + _7;
  _9 = *_8;
  _10 = (unsigned int) _9;
  _11 = _10 & 1;
  if (_11 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (Initialize == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_EB_InitTxIPdu (IPduId);

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_EB_StartIPdu (IPduPtr, IPduId);

  <bb 6> :
  return;

}


Com_EB_HandleMDT (ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr)
{
  const ComTxIPduMinimumDelayTimeFactorType MDT;

  <bb 2> :
  # DEBUG BEGIN_STMT
  MDT = IPduPtr->ComTxIPduMinimumDelayTimeFactorValue;
  # DEBUG BEGIN_STMT
  if (MDT != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_MdtQueue (PduId, IPduPtr, MDT);

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Send_Pdu (ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr)
{
  Std_ReturnType PduRRet;
  boolean (*<T5e8>) (PduIdType, struct PduInfoType *) fptr;
  boolean coretval;
  uint8 * const pdudataptr;
  struct PduInfoType pduinfo;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.273_1 = Com_gDataMemPtr;
  _2 = IPduPtr->ComIPduValueRef;
  _3 = (sizetype) _2;
  pdudataptr = Com_gDataMemPtr.273_1 + _3;
  # DEBUG BEGIN_STMT
  coretval = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  pduinfo.SduDataPtr = pdudataptr;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.274_4 = Com_gDataMemPtr;
  Com_gConfigPtr.275_5 = Com_gConfigPtr;
  _6 = Com_gConfigPtr.275_5->ComTxIPduLengthBase;
  _7 = (sizetype) _6;
  _8 = Com_gDataMemPtr.274_4 + _7;
  _9 = (unsigned int) PduId;
  _10 = _9 * 2;
  _11 = _8 + _10;
  _12 = *_11;
  pduinfo.SduLength = _12;
  # DEBUG BEGIN_STMT
  _13 = IPduPtr->ComIPduCallOutFuncPtrRef;
  if (_13 != 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _14 = IPduPtr->ComIPduCallOutFuncPtrRef;
  _15 = (int) _14;
  fptr = Com_TxCallouts[_15];
  # DEBUG BEGIN_STMT
  coretval = fptr (PduId, &pduinfo);

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (coretval == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_EB_HandleMDT (PduId, IPduPtr);
  # DEBUG BEGIN_STMT
  _16 = IPduPtr->PduRTxPduId;
  PduRRet = PduR_ComTransmit (_16, &pduinfo);
  # DEBUG BEGIN_STMT
  if (PduRRet == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _17 = IPduPtr->ComTxIPduFlags;
  _18 = _17 >> 3;
  _19 = (unsigned int) _18;
  _20 = _19 & 3;
  if (_20 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Com_EB_ClearTxUpdateBits (IPduPtr);

  <bb 8> :
  # DEBUG BEGIN_STMT
  pduinfo = {CLOBBER};
  return;

}


Com_EB_PeriodicSendQueue (Com_PeriodicSendNextDueTimeType Offset, ComIPduRefType EntryInPeriodicQueue)
{
  Com_PeriodicSendNextDueTimeType * const PeriodicQueueValPtr;
  Com_PeriodicSendNextDueTimeType * const PeriodicQueueBase;
  Com_PeriodicSendNextDueTimeType globalTime;
  Com_PeriodicSendNextDueTimeType TimeOut;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.476_1 = Com_gDataMemPtr;
  Com_gConfigPtr.477_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.477_2->ComPeriodicQueueBase;
  _4 = (sizetype) _3;
  PeriodicQueueBase = Com_gDataMemPtr.476_1 + _4;
  # DEBUG BEGIN_STMT
  _5 = (unsigned int) EntryInPeriodicQueue;
  _6 = _5 * 2;
  PeriodicQueueValPtr = PeriodicQueueBase + _6;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  TimeOut = globalTime + Offset;
  # DEBUG BEGIN_STMT
  *PeriodicQueueValPtr = TimeOut;
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_CalculateTM (const struct ComTxIPduType * IPduPtr)
{
  uint16 NumberOfFlags;
  uint16 numberOfFlagBytes;
  boolean newTM;
  uint16 j;
  uint8 * const IpduTMFlagsBase;
  boolean D.11324;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.261_1 = Com_gDataMemPtr;
  _2 = IPduPtr->ComIPduTMSFlagsRef;
  _3 = (sizetype) _2;
  IpduTMFlagsBase = Com_gDataMemPtr.261_1 + _3;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  newTM = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = IPduPtr->ComIPduSignalWithFilterRefNum;
  _5 = IPduPtr->ComIPduSignalGroupWithFilterRefNum;
  NumberOfFlags = _4 + _5;
  # DEBUG BEGIN_STMT
  _6 = (unsigned int) NumberOfFlags;
  _7 = _6 + 7;
  _8 = _7 / 8;
  numberOfFlagBytes = (uint16) _8;
  # DEBUG BEGIN_STMT
  j = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _9 = (sizetype) j;
  _10 = IpduTMFlagsBase + _9;
  _11 = *_10;
  if (_11 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  newTM = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  j.262_12 = j;
  j = j.262_12 + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (j < numberOfFlagBytes)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.11324 = newTM;
  return D.11324;

}


Com_EB_NTimesSendQueue (ComIPduRefType PduId, ComTxModeRepetitionPeriodFactorType Offset, ComIPduRefType EntryInNTimesQueue)
{
  ComTxModeRepetitionPeriodFactorType * const NTimesQueueValNextTimePtr;
  ComTxModeRepetitionPeriodFactorType * const NTimesQueueBaseNextTimeBase;
  ComGlobalTimeType globalTime;
  ComTxModeRepetitionPeriodFactorType TimeOut;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.309_1 = Com_gDataMemPtr;
  Com_gConfigPtr.310_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.310_2->ComNTimesQueueBaseNextTime;
  _4 = (sizetype) _3;
  NTimesQueueBaseNextTimeBase = Com_gDataMemPtr.309_1 + _4;
  # DEBUG BEGIN_STMT
  _5 = (unsigned int) EntryInNTimesQueue;
  _6 = _5 * 2;
  NTimesQueueValNextTimePtr = NTimesQueueBaseNextTimeBase + _6;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  TimeOut = globalTime + Offset;
  # DEBUG BEGIN_STMT
  *NTimesQueueValNextTimePtr = TimeOut;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.311_7 = Com_gDataMemPtr;
  Com_gConfigPtr.312_8 = Com_gConfigPtr;
  _9 = Com_gConfigPtr.312_8->ComTxIPduStatusBase;
  _10 = (int) _9;
  _11 = (int) PduId;
  _12 = _10 + _11;
  _13 = (sizetype) _12;
  _14 = Com_gDataMemPtr.311_7 + _13;
  _15 = *_14;
  Com_gDataMemPtr.313_16 = Com_gDataMemPtr;
  Com_gConfigPtr.314_17 = Com_gConfigPtr;
  _18 = Com_gConfigPtr.314_17->ComTxIPduStatusBase;
  _19 = (int) _18;
  _20 = (int) PduId;
  _21 = _19 + _20;
  _22 = (sizetype) _21;
  _23 = Com_gDataMemPtr.313_16 + _22;
  _24 = _15 | 8;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Request_Send_Pdu (ComIPduRefType PduId, const struct ComTxIPduType * IPduPtr, uint8 * PduStatusFlagsPtr, boolean SendInMainFunctionTx)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = IPduPtr->ComTxIPduFlags;
  _2 = _1 >> 1;
  _3 = (unsigned int) _2;
  _4 = _3 & 1;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = IPduPtr->ComTxTimeoutFactorValue;
  _6 = IPduPtr->TxDMQueueRef;
  Com_EB_TxDMQueue (PduId, _5, _6);

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = *PduStatusFlagsPtr;
  _8 = (unsigned int) _7;
  _9 = _8 & 2;
  if (_9 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (SendInMainFunctionTx == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  TS_AtomicSetBit_8 (PduStatusFlagsPtr, 4);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Com_EB_Send_Pdu (PduId, IPduPtr);

  <bb 8> :
  return;

}


Com_EB_SendUponSendApiCall (ComIPduRefType PduId, boolean SendInMainFunctionTx)
{
  uint8 * const NTimesQueueBaseRemaining;
  ComTxModeRepetitionPeriodFactorType NPeriod;
  uint8 N;
  const struct ComTxModeNTimesType * TMNTimesPtr;
  ComTxModeIdxType TMRef;
  uint8 * const NTimesQueueBaseRemaining;
  uint8 N;
  ComTxModeRepetitionPeriodFactorType NPeriod;
  const struct ComTxModeMixedNTimesType * TMMixedNTimesPtr;
  ComTxModeIdxType TMRef;
  const struct ComTxIPduType * const IPduPtr;
  uint8 * const PduStatusFlagsPtr;
  uint8 CurrentTMS;
  uint8 AktTM;
  ComTxModeIdxType iftmp.306;
  ComTxModeIdxType iftmp.301;
  uint8 iftmp.298;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.294_1 = Com_gDataMemPtr;
  Com_gConfigPtr.295_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.295_2->ComTxIPduStatusBase;
  _4 = (int) _3;
  _5 = (int) PduId;
  _6 = _4 + _5;
  _7 = (sizetype) _6;
  PduStatusFlagsPtr = Com_gDataMemPtr.294_1 + _7;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.296_8 = Com_gConfigPtr;
  Com_gConfigPtr.297_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.297_9->ComTxIPduRef;
  _11 = (unsigned int) PduId;
  _12 = _11 * 64;
  _13 = _10 + _12;
  IPduPtr = Com_gConfigPtr.296_8 + _13;
  # DEBUG BEGIN_STMT
  _14 = *PduStatusFlagsPtr;
  _15 = _14 >> 6;
  CurrentTMS = _15 & 1;
  # DEBUG BEGIN_STMT
  if (CurrentTMS == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _16 = IPduPtr->ComTxModeModes;
  iftmp.298 = _16 & 15;
  goto <bb 5>; [INV]

  <bb 4> :
  _17 = IPduPtr->ComTxModeModes;
  iftmp.298 = _17 >> 4;

  <bb 5> :
  AktTM = iftmp.298;
  # DEBUG BEGIN_STMT
  _18 = (int) AktTM;
  switch (_18) <default: <L26> [INV], case 2 ... 5: <L3> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  Com_EB_Request_Send_Pdu (PduId, IPduPtr, PduStatusFlagsPtr, SendInMainFunctionTx);
  # DEBUG BEGIN_STMT
  _19 = (int) AktTM;
  switch (_19) <default: <L26> [INV], case 4: <L7> [INV], case 5: <L11> [INV]>

  <bb 7> :
<L7>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.299_20 = Com_gDataMemPtr;
  Com_gConfigPtr.300_21 = Com_gConfigPtr;
  _22 = Com_gConfigPtr.300_21->ComNTimesQueueBaseRemaining;
  _23 = (sizetype) _22;
  NTimesQueueBaseRemaining = Com_gDataMemPtr.299_20 + _23;
  # DEBUG BEGIN_STMT
  if (CurrentTMS == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.301 = IPduPtr->ComTxModeTrueRef;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.301 = IPduPtr->ComTxModeFalseRef;

  <bb 10> :
  TMRef = iftmp.301;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.302_24 = Com_gConfigPtr;
  Com_gConfigPtr.303_25 = Com_gConfigPtr;
  _26 = Com_gConfigPtr.303_25->ComTxModeMixedNTimesRef;
  _27 = (unsigned int) TMRef;
  _28 = _27 * 8;
  _29 = _26 + _28;
  TMMixedNTimesPtr = Com_gConfigPtr.302_24 + _29;
  # DEBUG BEGIN_STMT
  NPeriod = TMMixedNTimesPtr->ComTxModeRepetitionPeriodFactor;
  # DEBUG BEGIN_STMT
  N = TMMixedNTimesPtr->ComTxModeNumberOfRepetitions;
  # DEBUG BEGIN_STMT
  _30 = IPduPtr->NTimesQueueRef;
  _31 = (sizetype) _30;
  _32 = NTimesQueueBaseRemaining + _31;
  *_32 = N;
  # DEBUG BEGIN_STMT
  _33 = IPduPtr->NTimesQueueRef;
  Com_EB_NTimesSendQueue (PduId, NPeriod, _33);
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 11> :
<L11>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.304_34 = Com_gDataMemPtr;
  Com_gConfigPtr.305_35 = Com_gConfigPtr;
  _36 = Com_gConfigPtr.305_35->ComNTimesQueueBaseRemaining;
  _37 = (sizetype) _36;
  NTimesQueueBaseRemaining = Com_gDataMemPtr.304_34 + _37;
  # DEBUG BEGIN_STMT
  if (CurrentTMS == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  iftmp.306 = IPduPtr->ComTxModeTrueRef;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.306 = IPduPtr->ComTxModeFalseRef;

  <bb 14> :
  TMRef = iftmp.306;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.307_38 = Com_gConfigPtr;
  Com_gConfigPtr.308_39 = Com_gConfigPtr;
  _40 = Com_gConfigPtr.308_39->ComTxModeNTimesRef;
  _41 = (unsigned int) TMRef;
  _42 = _41 * 4;
  _43 = _40 + _42;
  TMNTimesPtr = Com_gConfigPtr.307_38 + _43;
  # DEBUG BEGIN_STMT
  NPeriod = TMNTimesPtr->ComTxModeRepetitionPeriodFactor;
  # DEBUG BEGIN_STMT
  N = TMNTimesPtr->ComTxModeNumberOfRepetitions;
  # DEBUG BEGIN_STMT
  _44 = IPduPtr->NTimesQueueRef;
  _45 = (sizetype) _44;
  _46 = NTimesQueueBaseRemaining + _45;
  *_46 = N;
  # DEBUG BEGIN_STMT
  _47 = IPduPtr->NTimesQueueRef;
  Com_EB_NTimesSendQueue (PduId, NPeriod, _47);
  # DEBUG BEGIN_STMT

  <bb 15> :
<L26>:
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_DisableSignalGroupBasedDMFlag (const struct ComRxIPduType * IPduPtr, boolean Initialize)
{
  const struct ComRxSignalExtType * const SignalExtPtr;
  const struct ComRxSignalGroupType * const SignalGPtr;
  const ComSignalGroupRefType signalGId;
  ComSignalGroupRefType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = IPduPtr->ComIPduSignalGroupRefFirst;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.380_1 = Com_gConfigPtr;
  Com_gConfigPtr.381_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.381_2->ComRxIPduSignalGroupListRef;
  _4 = (unsigned int) i;
  _5 = _4 * 2;
  _6 = _3 + _5;
  _7 = Com_gConfigPtr.380_1 + _6;
  signalGId = *_7;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.382_8 = Com_gConfigPtr;
  Com_gConfigPtr.383_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.383_9->ComRxSignalGroupRef;
  _11 = (unsigned int) signalGId;
  _12 = _11 * 10;
  _13 = _10 + _12;
  SignalGPtr = Com_gConfigPtr.382_8 + _13;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.384_14 = Com_gConfigPtr;
  Com_gConfigPtr.385_15 = Com_gConfigPtr;
  _16 = Com_gConfigPtr.385_15->ComRxSignalExtRef;
  _17 = SignalGPtr->ComSignalExtRef;
  _18 = (unsigned int) _17;
  _19 = _18 * 14;
  _20 = _16 + _19;
  SignalExtPtr = Com_gConfigPtr.384_14 + _20;
  # DEBUG BEGIN_STMT
  _21 = SignalExtPtr->ComRxSignalExtFlags;
  _22 = _21 >> 2;
  _23 = (unsigned int) _22;
  _24 = _23 & 1;
  if (_24 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.386_25 = Com_gDataMemPtr;
  Com_gConfigPtr.387_26 = Com_gConfigPtr;
  _27 = Com_gConfigPtr.387_26->ComRxDMInvSignalGroupStatusQueueBase;
  _28 = (unsigned int) _27;
  _29 = SignalExtPtr->RxSigDMQueueRef;
  _30 = _29 / 4;
  _31 = (unsigned int) _30;
  _32 = _28 + _31;
  _33 = Com_gDataMemPtr.386_25 + _32;
  _34 = SignalExtPtr->RxSigDMQueueRef;
  _35 = _34 & 3;
  _36 = _35 * 2;
  _37 = _36 + 1;
  _38 = (long unsigned int) _37;
  TS_AtomicClearBit_8 (_33, _38);
  # DEBUG BEGIN_STMT
  if (Initialize == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.388_39 = Com_gDataMemPtr;
  Com_gConfigPtr.389_40 = Com_gConfigPtr;
  _41 = Com_gConfigPtr.389_40->ComRxDMInvSignalGroupStatusQueueBase;
  _42 = (unsigned int) _41;
  _43 = SignalExtPtr->RxSigDMQueueRef;
  _44 = _43 / 4;
  _45 = (unsigned int) _44;
  _46 = _42 + _45;
  _47 = Com_gDataMemPtr.388_39 + _46;
  _48 = SignalExtPtr->RxSigDMQueueRef;
  _49 = _48 & 3;
  _50 = _49 * 2;
  _51 = (long unsigned int) _50;
  TS_AtomicClearBit_8 (_47, _51);

  <bb 6> :
  # DEBUG BEGIN_STMT
  i.390_52 = i;
  i = i.390_52 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _53 = (int) i;
  _54 = IPduPtr->ComIPduSignalGroupRefNum;
  _55 = (int) _54;
  _56 = IPduPtr->ComIPduSignalGroupRefFirst;
  _57 = (int) _56;
  _58 = _55 + _57;
  if (_53 < _58)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Com_EB_DisableSignalBasedDMFlag (const struct ComRxIPduType * IPduPtr, boolean Initialize)
{
  const struct ComRxSignalExtType * const SignalExtPtr;
  const struct ComRxSignalType * const SignalPtr;
  const ComSignalRefType signalId;
  ComSignalRefType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = IPduPtr->ComIPduSignalRefFirst;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.369_1 = Com_gConfigPtr;
  Com_gConfigPtr.370_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.370_2->ComRxIPduSignalListRef;
  _4 = (unsigned int) i;
  _5 = _4 * 2;
  _6 = _3 + _5;
  _7 = Com_gConfigPtr.369_1 + _6;
  signalId = *_7;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.371_8 = Com_gConfigPtr;
  Com_gConfigPtr.372_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.372_9->ComRxSignalRef;
  _11 = (unsigned int) signalId;
  _12 = _11 * 20;
  _13 = _10 + _12;
  SignalPtr = Com_gConfigPtr.371_8 + _13;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.373_14 = Com_gConfigPtr;
  Com_gConfigPtr.374_15 = Com_gConfigPtr;
  _16 = Com_gConfigPtr.374_15->ComRxSignalExtRef;
  _17 = SignalPtr->ComSignalExtRef;
  _18 = (unsigned int) _17;
  _19 = _18 * 14;
  _20 = _16 + _19;
  SignalExtPtr = Com_gConfigPtr.373_14 + _20;
  # DEBUG BEGIN_STMT
  _21 = SignalExtPtr->ComRxSignalExtFlags;
  _22 = _21 >> 2;
  _23 = (unsigned int) _22;
  _24 = _23 & 1;
  if (_24 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.375_25 = Com_gDataMemPtr;
  Com_gConfigPtr.376_26 = Com_gConfigPtr;
  _27 = Com_gConfigPtr.376_26->ComRxTimeoutSignalStatusQueueBase;
  _28 = (unsigned int) _27;
  _29 = SignalExtPtr->RxSigDMQueueRef;
  _30 = _29 / 4;
  _31 = (unsigned int) _30;
  _32 = _28 + _31;
  _33 = Com_gDataMemPtr.375_25 + _32;
  _34 = SignalExtPtr->RxSigDMQueueRef;
  _35 = _34 & 3;
  _36 = _35 * 2;
  _37 = _36 + 1;
  _38 = (long unsigned int) _37;
  TS_AtomicClearBit_8 (_33, _38);
  # DEBUG BEGIN_STMT
  if (Initialize == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.377_39 = Com_gDataMemPtr;
  Com_gConfigPtr.378_40 = Com_gConfigPtr;
  _41 = Com_gConfigPtr.378_40->ComRxTimeoutSignalStatusQueueBase;
  _42 = (unsigned int) _41;
  _43 = SignalExtPtr->RxSigDMQueueRef;
  _44 = _43 / 4;
  _45 = (unsigned int) _44;
  _46 = _42 + _45;
  _47 = Com_gDataMemPtr.377_39 + _46;
  _48 = SignalExtPtr->RxSigDMQueueRef;
  _49 = _48 & 3;
  _50 = _49 * 2;
  _51 = (long unsigned int) _50;
  TS_AtomicClearBit_8 (_47, _51);

  <bb 6> :
  # DEBUG BEGIN_STMT
  i.379_52 = i;
  i = i.379_52 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _53 = (int) i;
  _54 = IPduPtr->ComIPduSignalWithDMOnly;
  _55 = (int) _54;
  _56 = IPduPtr->ComIPduSignalRefFirst;
  _57 = (int) _56;
  _58 = _55 + _57;
  if (_53 < _58)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Com_EB_DisableSignalAndSignalGroupBasedDMFlag (const struct ComRxIPduType * IPduPtr, boolean Initialize)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_EB_DisableSignalBasedDMFlag (IPduPtr, Initialize);
  # DEBUG BEGIN_STMT
  Com_EB_DisableSignalGroupBasedDMFlag (IPduPtr, Initialize);
  return;

}


Com_EB_EnableSignalGroupBasedDMFlag (const struct ComRxIPduType * IPduPtr)
{
  uint8 enableBitPos;
  uint8 * const SigGDMFlagsPtr;
  const Com_RxDMNextDueTimeType TimeOutOffset;
  const struct ComRxSignalExtType * const SignalExtPtr;
  const struct ComRxSignalGroupType * const SignalGPtr;
  const ComSignalGroupRefType signalGId;
  ComSignalGroupRefType j;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  j = IPduPtr->ComIPduSignalGroupRefFirst;
  goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.404_1 = Com_gConfigPtr;
  Com_gConfigPtr.405_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.405_2->ComRxIPduSignalGroupListRef;
  _4 = (unsigned int) j;
  _5 = _4 * 2;
  _6 = _3 + _5;
  _7 = Com_gConfigPtr.404_1 + _6;
  signalGId = *_7;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.406_8 = Com_gConfigPtr;
  Com_gConfigPtr.407_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.407_9->ComRxSignalGroupRef;
  _11 = (unsigned int) signalGId;
  _12 = _11 * 10;
  _13 = _10 + _12;
  SignalGPtr = Com_gConfigPtr.406_8 + _13;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.408_14 = Com_gConfigPtr;
  Com_gConfigPtr.409_15 = Com_gConfigPtr;
  _16 = Com_gConfigPtr.409_15->ComRxSignalExtRef;
  _17 = SignalGPtr->ComSignalExtRef;
  _18 = (unsigned int) _17;
  _19 = _18 * 14;
  _20 = _16 + _19;
  SignalExtPtr = Com_gConfigPtr.408_14 + _20;
  # DEBUG BEGIN_STMT
  _21 = SignalExtPtr->ComRxSignalExtFlags;
  _22 = _21 >> 2;
  _23 = (unsigned int) _22;
  _24 = _23 & 1;
  if (_24 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  TimeOutOffset = SignalExtPtr->ComRxFirstTimeoutFactorValue;
  # DEBUG BEGIN_STMT
  if (TimeOutOffset != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.410_25 = Com_gDataMemPtr;
  Com_gConfigPtr.411_26 = Com_gConfigPtr;
  _27 = Com_gConfigPtr.411_26->ComRxDMInvSignalGroupStatusQueueBase;
  _28 = (unsigned int) _27;
  _29 = SignalExtPtr->RxSigDMQueueRef;
  _30 = _29 / 4;
  _31 = (unsigned int) _30;
  _32 = _28 + _31;
  SigGDMFlagsPtr = Com_gDataMemPtr.410_25 + _32;
  # DEBUG BEGIN_STMT
  _33 = SignalExtPtr->RxSigDMQueueRef;
  _34 = (unsigned char) _33;
  _35 = _34 & 3;
  _36 = _35 * 2;
  enableBitPos = _36 + 1;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _37 = *SigGDMFlagsPtr;
  _38 = (int) enableBitPos;
  _39 = 1 << _38;
  _40 = (unsigned char) _39;
  _41 = _37 & _40;
  if (_41 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _42 = *SigGDMFlagsPtr;
  _43 = (int) enableBitPos;
  _44 = 1 << _43;
  _45 = (unsigned char) _44;
  _46 = _42 | _45;
  *SigGDMFlagsPtr = _46;
  # DEBUG BEGIN_STMT
  Com_EB_RxDMSignalGroupQueue (SignalGPtr, TimeOutOffset);

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 8> :
  # DEBUG BEGIN_STMT
  j.412_47 = j;
  j = j.412_47 + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _48 = (int) j;
  _49 = IPduPtr->ComIPduSignalGroupRefNum;
  _50 = (int) _49;
  _51 = IPduPtr->ComIPduSignalGroupRefFirst;
  _52 = (int) _51;
  _53 = _50 + _52;
  if (_48 < _53)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_EnableSignalBasedDMFlag (const struct ComRxIPduType * IPduPtr)
{
  uint8 enableBitPos;
  uint8 * const SigDMFlagsPtr;
  const Com_RxDMNextDueTimeType TimeOutOffset;
  const struct ComRxSignalExtType * const SignalExtPtr;
  const struct ComRxSignalType * const SignalPtr;
  const ComSignalRefType signalId;
  ComSignalRefType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = IPduPtr->ComIPduSignalRefFirst;
  goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.393_1 = Com_gConfigPtr;
  Com_gConfigPtr.394_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.394_2->ComRxIPduSignalListRef;
  _4 = (unsigned int) i;
  _5 = _4 * 2;
  _6 = _3 + _5;
  _7 = Com_gConfigPtr.393_1 + _6;
  signalId = *_7;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.395_8 = Com_gConfigPtr;
  Com_gConfigPtr.396_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.396_9->ComRxSignalRef;
  _11 = (unsigned int) signalId;
  _12 = _11 * 20;
  _13 = _10 + _12;
  SignalPtr = Com_gConfigPtr.395_8 + _13;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.397_14 = Com_gConfigPtr;
  Com_gConfigPtr.398_15 = Com_gConfigPtr;
  _16 = Com_gConfigPtr.398_15->ComRxSignalExtRef;
  _17 = SignalPtr->ComSignalExtRef;
  _18 = (unsigned int) _17;
  _19 = _18 * 14;
  _20 = _16 + _19;
  SignalExtPtr = Com_gConfigPtr.397_14 + _20;
  # DEBUG BEGIN_STMT
  _21 = SignalExtPtr->ComRxSignalExtFlags;
  _22 = _21 >> 2;
  _23 = (unsigned int) _22;
  _24 = _23 & 1;
  if (_24 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  TimeOutOffset = SignalExtPtr->ComRxFirstTimeoutFactorValue;
  # DEBUG BEGIN_STMT
  if (TimeOutOffset != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.399_25 = Com_gDataMemPtr;
  Com_gConfigPtr.400_26 = Com_gConfigPtr;
  _27 = Com_gConfigPtr.400_26->ComRxTimeoutSignalStatusQueueBase;
  _28 = (unsigned int) _27;
  _29 = SignalExtPtr->RxSigDMQueueRef;
  _30 = _29 / 4;
  _31 = (unsigned int) _30;
  _32 = _28 + _31;
  SigDMFlagsPtr = Com_gDataMemPtr.399_25 + _32;
  # DEBUG BEGIN_STMT
  _33 = SignalExtPtr->RxSigDMQueueRef;
  _34 = (unsigned char) _33;
  _35 = _34 & 3;
  _36 = _35 * 2;
  enableBitPos = _36 + 1;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _37 = *SigDMFlagsPtr;
  _38 = (int) enableBitPos;
  _39 = 1 << _38;
  _40 = (unsigned char) _39;
  _41 = _37 & _40;
  if (_41 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _42 = *SigDMFlagsPtr;
  _43 = (int) enableBitPos;
  _44 = 1 << _43;
  _45 = (unsigned char) _44;
  _46 = _42 | _45;
  *SigDMFlagsPtr = _46;
  # DEBUG BEGIN_STMT
  Com_EB_RxDMSignalQueue (SignalExtPtr, TimeOutOffset);

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 8> :
  # DEBUG BEGIN_STMT
  i.401_47 = i;
  i = i.401_47 + 1;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _48 = (int) i;
  _49 = IPduPtr->ComIPduSignalWithDMOnly;
  _50 = (int) _49;
  _51 = IPduPtr->ComIPduSignalRefFirst;
  _52 = (int) _51;
  _53 = _50 + _52;
  if (_48 < _53)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_RxDMSignalQueue (const struct ComRxSignalExtType * SignalExtPtr, Com_RxDMNextDueTimeType TimeOutOffset)
{
  Com_RxDMNextDueTimeType * const RxTimeoutSignalQueueBase;
  Com_RxDMNextDueTimeType TimeOut;
  Com_RxDMNextDueTimeType globalTime;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.402_1 = Com_gDataMemPtr;
  Com_gConfigPtr.403_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.403_2->ComRxTimeoutSignalQueueBase;
  _4 = (sizetype) _3;
  RxTimeoutSignalQueueBase = Com_gDataMemPtr.402_1 + _4;
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  TimeOut = globalTime + TimeOutOffset;
  # DEBUG BEGIN_STMT
  _5 = SignalExtPtr->RxSigDMQueueRef;
  _6 = (unsigned int) _5;
  _7 = _6 * 2;
  _8 = RxTimeoutSignalQueueBase + _7;
  *_8 = TimeOut;
  return;

}


Com_EB_RxDMSignalGroupQueue (const struct ComRxSignalGroupType * SignalGPtr, Com_RxDMNextDueTimeType TimeOutOffset)
{
  const struct ComRxSignalExtType * const SignalExtPtr;
  Com_RxDMNextDueTimeType * const RxTimeoutSignalGroupQueueBase;
  Com_RxDMNextDueTimeType TimeOut;
  Com_RxDMNextDueTimeType globalTime;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.413_1 = Com_gDataMemPtr;
  Com_gConfigPtr.414_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.414_2->ComRxTimeoutSignalGroupQueueBase;
  _4 = (sizetype) _3;
  RxTimeoutSignalGroupQueueBase = Com_gDataMemPtr.413_1 + _4;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.415_5 = Com_gConfigPtr;
  Com_gConfigPtr.416_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.416_6->ComRxSignalExtRef;
  _8 = SignalGPtr->ComSignalExtRef;
  _9 = (unsigned int) _8;
  _10 = _9 * 14;
  _11 = _7 + _10;
  SignalExtPtr = Com_gConfigPtr.415_5 + _11;
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  TimeOut = globalTime + TimeOutOffset;
  # DEBUG BEGIN_STMT
  _12 = SignalExtPtr->RxSigDMQueueRef;
  _13 = (unsigned int) _12;
  _14 = _13 * 2;
  _15 = RxTimeoutSignalGroupQueueBase + _14;
  *_15 = TimeOut;
  return;

}


Com_EB_CheckRxSignalUpdateBitAndDM (const struct ComRxSignalType * SignalPtr, const struct ComRxIPduType * IPduPtr, uint8 * passFilter_MASKED_NEW_DIFFERS_MASKED_OLD, uint32 pduLength)
{
  uint8 * const IPduFlagBytePtr;
  const ComIPduRefType ComRxPduId;
  const Com_RxDMNextDueTimeType TimeOutOffset;
  const uint8 ToutFlag;
  const uint8 RunningFlag;
  uint8 * const RxDMFlagPtr;
  uint8 restart;
  const uint32 UpdateBitByte;
  const struct ComRxSignalExtType * const SignalExtPtr;
  uint8 SignalUpdated;
  boolean D.11783;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalUpdated = 1;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.652_1 = Com_gConfigPtr;
  Com_gConfigPtr.653_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.653_2->ComRxSignalExtRef;
  _4 = SignalPtr->ComSignalExtRef;
  _5 = (unsigned int) _4;
  _6 = _5 * 14;
  _7 = _3 + _6;
  SignalExtPtr = Com_gConfigPtr.652_1 + _7;
  # DEBUG BEGIN_STMT
  _8 = SignalExtPtr->ComRxSignalExtFlags;
  _9 = _8 >> 1;
  _10 = (unsigned int) _9;
  _11 = _10 & 1;
  if (_11 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _12 = SignalExtPtr->ComUpdateBitPositionInBit;
  _13 = _12 / 8;
  UpdateBitByte = (const uint32) _13;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *passFilter_MASKED_NEW_DIFFERS_MASKED_OLD = 0;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.654_14 = Com_gDataMemPtr;
  _15 = IPduPtr->ComIPduValueRef;
  _16 = (long unsigned int) _15;
  _17 = UpdateBitByte + _16;
  _18 = Com_gDataMemPtr.654_14 + _17;
  _19 = *_18;
  _20 = (int) _19;
  _21 = SignalExtPtr->ComUpdateBitPositionInBit;
  _22 = (unsigned int) _21;
  _23 = _22 & 7;
  _24 = _20 >> _23;
  _25 = (unsigned char) _24;
  SignalUpdated = _25 & 1;
  # DEBUG BEGIN_STMT
  if (SignalUpdated == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _26 = SignalExtPtr->ComRxSignalExtFlags;
  _27 = _26 >> 2;
  _28 = (unsigned int) _27;
  _29 = _28 & 1;
  if (_29 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  restart = 0;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.655_30 = Com_gDataMemPtr;
  Com_gConfigPtr.656_31 = Com_gConfigPtr;
  _32 = Com_gConfigPtr.656_31->ComRxTimeoutSignalStatusQueueBase;
  _33 = (unsigned int) _32;
  _34 = SignalExtPtr->RxSigDMQueueRef;
  _35 = _34 / 4;
  _36 = (unsigned int) _35;
  _37 = _33 + _36;
  RxDMFlagPtr = Com_gDataMemPtr.655_30 + _37;
  # DEBUG BEGIN_STMT
  _38 = SignalExtPtr->RxSigDMQueueRef;
  _39 = (unsigned char) _38;
  _40 = _39 & 3;
  _41 = _40 * 2;
  RunningFlag = _41 + 1;
  # DEBUG BEGIN_STMT
  _42 = SignalExtPtr->RxSigDMQueueRef;
  _43 = (unsigned char) _42;
  _44 = _43 & 3;
  ToutFlag = _44 * 2;
  # DEBUG BEGIN_STMT
  TimeOutOffset = SignalExtPtr->ComRxTimeoutFactorValue;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _45 = *RxDMFlagPtr;
  _46 = (int) RunningFlag;
  _47 = 1 << _46;
  _48 = (unsigned char) _47;
  _49 = _45 & _48;
  if (_49 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _50 = *RxDMFlagPtr;
  _51 = (int) _50;
  _52 = (int) ToutFlag;
  _53 = _51 >> _52;
  _54 = (unsigned char) _53;
  restart = _54 & 1;
  # DEBUG BEGIN_STMT
  _55 = *RxDMFlagPtr;
  _56 = (int) ToutFlag;
  _57 = 1 << _56;
  _58 = (unsigned char) _57;
  _59 = ~_58;
  _60 = _55 & _59;
  *RxDMFlagPtr = _60;
  # DEBUG BEGIN_STMT
  Com_EB_RxDMSignalQueue (SignalExtPtr, TimeOutOffset);
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ComRxPduId = SignalPtr->ComIPduRef;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.657_61 = Com_gDataMemPtr;
  Com_gConfigPtr.658_62 = Com_gConfigPtr;
  _63 = Com_gConfigPtr.658_62->ComRxIPduStatusBase;
  _64 = (int) _63;
  _65 = (int) ComRxPduId;
  _66 = _64 + _65;
  _67 = (sizetype) _66;
  IPduFlagBytePtr = Com_gDataMemPtr.657_61 + _67;
  # DEBUG BEGIN_STMT
  _68 = *IPduFlagBytePtr;
  _69 = (unsigned int) _68;
  _70 = _69 & 16;
  if (_70 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _71 = *RxDMFlagPtr;
  _72 = (int) _71;
  _73 = (int) ToutFlag;
  _74 = _72 >> _73;
  _75 = (unsigned char) _74;
  restart = _75 & 1;
  # DEBUG BEGIN_STMT
  _76 = *RxDMFlagPtr;
  _77 = (int) ToutFlag;
  _78 = 1 << _77;
  _79 = (unsigned char) _78;
  _80 = ~_79;
  _81 = _76 & _80;
  *RxDMFlagPtr = _81;
  # DEBUG BEGIN_STMT
  _82 = *RxDMFlagPtr;
  _83 = (int) RunningFlag;
  _84 = 1 << _83;
  _85 = (unsigned char) _84;
  _86 = _82 | _85;
  *RxDMFlagPtr = _86;
  # DEBUG BEGIN_STMT
  Com_EB_RxDMSignalQueue (SignalExtPtr, TimeOutOffset);

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (restart == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  *passFilter_MASKED_NEW_DIFFERS_MASKED_OLD = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  D.11783 = SignalUpdated;
  return D.11783;

}


Com_EB_CheckRxSignalGoupUpdateBitAndDM (const struct ComRxSignalGroupType * SignalGPtr, const struct ComRxIPduType * IPduPtr, uint32 pduLength)
{
  uint8 * const IPduFlagBytePtr;
  const ComIPduRefType ComRxPduId;
  const Com_RxDMNextDueTimeType TimeOutOffset;
  const uint8 ToutFlag;
  const uint8 RunningFlag;
  uint8 * const RxDMFlagPtr;
  const uint32 UpdateBitByte;
  const struct ComRxSignalExtType * const SignalExtPtr;
  uint8 SignalUpdated;
  boolean D.11804;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalUpdated = 1;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.684_1 = Com_gConfigPtr;
  Com_gConfigPtr.685_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.685_2->ComRxSignalExtRef;
  _4 = SignalGPtr->ComSignalExtRef;
  _5 = (unsigned int) _4;
  _6 = _5 * 14;
  _7 = _3 + _6;
  SignalExtPtr = Com_gConfigPtr.684_1 + _7;
  # DEBUG BEGIN_STMT
  _8 = SignalExtPtr->ComRxSignalExtFlags;
  _9 = _8 >> 1;
  _10 = (unsigned int) _9;
  _11 = _10 & 1;
  if (_11 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _12 = SignalExtPtr->ComUpdateBitPositionInBit;
  _13 = _12 / 8;
  UpdateBitByte = (const uint32) _13;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.686_14 = Com_gDataMemPtr;
  _15 = IPduPtr->ComIPduValueRef;
  _16 = (long unsigned int) _15;
  _17 = UpdateBitByte + _16;
  _18 = Com_gDataMemPtr.686_14 + _17;
  _19 = *_18;
  _20 = (int) _19;
  _21 = SignalExtPtr->ComUpdateBitPositionInBit;
  _22 = (unsigned int) _21;
  _23 = _22 & 7;
  _24 = _20 >> _23;
  _25 = (unsigned char) _24;
  SignalUpdated = _25 & 1;
  # DEBUG BEGIN_STMT
  if (SignalUpdated == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _26 = SignalExtPtr->ComRxSignalExtFlags;
  _27 = _26 >> 2;
  _28 = (unsigned int) _27;
  _29 = _28 & 1;
  if (_29 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.687_30 = Com_gDataMemPtr;
  Com_gConfigPtr.688_31 = Com_gConfigPtr;
  _32 = Com_gConfigPtr.688_31->ComRxDMInvSignalGroupStatusQueueBase;
  _33 = (unsigned int) _32;
  _34 = SignalExtPtr->RxSigDMQueueRef;
  _35 = _34 / 4;
  _36 = (unsigned int) _35;
  _37 = _33 + _36;
  RxDMFlagPtr = Com_gDataMemPtr.687_30 + _37;
  # DEBUG BEGIN_STMT
  _38 = SignalExtPtr->RxSigDMQueueRef;
  _39 = (unsigned char) _38;
  _40 = _39 & 3;
  _41 = _40 * 2;
  RunningFlag = _41 + 1;
  # DEBUG BEGIN_STMT
  _42 = SignalExtPtr->RxSigDMQueueRef;
  _43 = (unsigned char) _42;
  _44 = _43 & 3;
  ToutFlag = _44 * 2;
  # DEBUG BEGIN_STMT
  TimeOutOffset = SignalExtPtr->ComRxTimeoutFactorValue;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _45 = *RxDMFlagPtr;
  _46 = (int) RunningFlag;
  _47 = 1 << _46;
  _48 = (unsigned char) _47;
  _49 = _45 & _48;
  if (_49 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _50 = *RxDMFlagPtr;
  _51 = (int) ToutFlag;
  _52 = 1 << _51;
  _53 = (unsigned char) _52;
  _54 = ~_53;
  _55 = _50 & _54;
  *RxDMFlagPtr = _55;
  # DEBUG BEGIN_STMT
  Com_EB_RxDMSignalGroupQueue (SignalGPtr, TimeOutOffset);
  goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ComRxPduId = SignalGPtr->ComIPduRef;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.689_56 = Com_gDataMemPtr;
  Com_gConfigPtr.690_57 = Com_gConfigPtr;
  _58 = Com_gConfigPtr.690_57->ComRxIPduStatusBase;
  _59 = (int) _58;
  _60 = (int) ComRxPduId;
  _61 = _59 + _60;
  _62 = (sizetype) _61;
  IPduFlagBytePtr = Com_gDataMemPtr.689_56 + _62;
  # DEBUG BEGIN_STMT
  _63 = *IPduFlagBytePtr;
  _64 = (unsigned int) _63;
  _65 = _64 & 16;
  if (_65 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _66 = *RxDMFlagPtr;
  _67 = (int) ToutFlag;
  _68 = 1 << _67;
  _69 = (unsigned char) _68;
  _70 = ~_69;
  _71 = _66 & _70;
  *RxDMFlagPtr = _71;
  # DEBUG BEGIN_STMT
  _72 = *RxDMFlagPtr;
  _73 = (int) RunningFlag;
  _74 = 1 << _73;
  _75 = (unsigned char) _74;
  _76 = _72 | _75;
  *RxDMFlagPtr = _76;
  # DEBUG BEGIN_STMT
  Com_EB_RxDMSignalGroupQueue (SignalGPtr, TimeOutOffset);

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.11804 = SignalUpdated;
  return D.11804;

}


Com_GetRxIPduBuffer (PduIdType ComRxPduId, struct PduInfoType * PduInfoPtr)
{
  const struct ComRxIPduType * IPduPtr;
  uint8 RetVal;
  uint8 D.11141;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_InitStatus.137_1 = Com_InitStatus;
  if (Com_InitStatus.137_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 254, 2);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (PduInfoPtr == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 254, 3);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.138_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.138_2->ComRxIPduArraySize;
  if (ComRxPduId >= _3)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 254, 1);
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.139_4 = Com_gConfigPtr;
  Com_gConfigPtr.140_5 = Com_gConfigPtr;
  _6 = Com_gConfigPtr.140_5->ComRxIPduRef;
  _7 = (unsigned int) ComRxPduId;
  _8 = _7 * 48;
  _9 = _6 + _8;
  IPduPtr = Com_gConfigPtr.139_4 + _9;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.141_10 = Com_gDataMemPtr;
  _11 = IPduPtr->ComIPduValueRef;
  _12 = (sizetype) _11;
  _13 = Com_gDataMemPtr.141_10 + _12;
  PduInfoPtr->SduDataPtr = _13;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.142_14 = Com_gDataMemPtr;
  Com_gConfigPtr.143_15 = Com_gConfigPtr;
  _16 = Com_gConfigPtr.143_15->ComRxIPduLengthBase;
  _17 = (sizetype) _16;
  _18 = Com_gDataMemPtr.142_14 + _17;
  _19 = (unsigned int) ComRxPduId;
  _20 = _19 * 2;
  _21 = _18 + _20;
  _22 = *_21;
  PduInfoPtr->SduLength = _22;
  # DEBUG BEGIN_STMT
  RetVal = 0;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.11141 = RetVal;
  return D.11141;

}


Com_EB_InitStartRxIPdu (ComIPduRefType RxPduId)
{
  uint8 * const IPduFlagBytePtr;
  const struct ComRxIPduType * IPduPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.513_1 = Com_gConfigPtr;
  Com_gConfigPtr.514_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.514_2->ComRxIPduRef;
  _4 = (unsigned int) RxPduId;
  _5 = _4 * 48;
  _6 = _3 + _5;
  IPduPtr = Com_gConfigPtr.513_1 + _6;
  # DEBUG BEGIN_STMT
  Com_EB_InitRxIPdu (RxPduId);
  # DEBUG BEGIN_STMT
  _7 = IPduPtr->ComIPduGroupMaskRef;
  if (_7 == 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.515_8 = Com_gDataMemPtr;
  Com_gConfigPtr.516_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.516_9->ComRxIPduStatusBase;
  _11 = (int) _10;
  _12 = (int) RxPduId;
  _13 = _11 + _12;
  _14 = (sizetype) _13;
  IPduFlagBytePtr = Com_gDataMemPtr.515_8 + _14;
  # DEBUG BEGIN_STMT
  TS_AtomicSetBit_8 (IPduFlagBytePtr, 0);
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxIPdu_EnableRxDM (IPduPtr, IPduFlagBytePtr);

  <bb 4> :
  return;

}


Com_EB_InitRxIPdu (ComIPduRefType RxPduId)
{
  const uint8 * const valPtr;
  const struct ComRxIPduType * IPduPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.328_1 = Com_gConfigPtr;
  Com_gConfigPtr.329_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.329_2->ComRxIPduRef;
  _4 = (unsigned int) RxPduId;
  _5 = _4 * 48;
  _6 = _3 + _5;
  IPduPtr = Com_gConfigPtr.328_1 + _6;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.330_7 = Com_gConfigPtr;
  _8 = IPduPtr->ComInitValueRef;
  valPtr = Com_gConfigPtr.330_7 + _8;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.331_9 = Com_gDataMemPtr;
  _10 = IPduPtr->ComIPduValueRef;
  _11 = (sizetype) _10;
  _12 = Com_gDataMemPtr.331_9 + _11;
  _13 = IPduPtr->ComIPduSizeMax;
  _14 = (long unsigned int) _13;
  TS_MemCpy32 (_12, valPtr, _14);
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.332_15 = Com_gDataMemPtr;
  Com_gConfigPtr.333_16 = Com_gConfigPtr;
  _17 = Com_gConfigPtr.333_16->ComRxIPduLengthBase;
  _18 = (sizetype) _17;
  _19 = Com_gDataMemPtr.332_15 + _18;
  _20 = (unsigned int) RxPduId;
  _21 = _20 * 2;
  _22 = _19 + _21;
  _23 = IPduPtr->ComIPduInitSize;
  *_22 = _23;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.334_24 = Com_gDataMemPtr;
  Com_gConfigPtr.335_25 = Com_gConfigPtr;
  _26 = Com_gConfigPtr.335_25->ComRxIPduStatusBase;
  _27 = (int) _26;
  _28 = (int) RxPduId;
  _29 = _27 + _28;
  _30 = (sizetype) _29;
  _31 = Com_gDataMemPtr.334_24 + _30;
  *_31 = 0;
  # DEBUG BEGIN_STMT
  Com_EB_InitRxSignalsWithFilter (IPduPtr);
  # DEBUG BEGIN_STMT
  _32 = IPduPtr->ComIPduSigGWFlagBit;
  if (_32 != 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.336_33 = Com_gDataMemPtr;
  Com_gConfigPtr.337_34 = Com_gConfigPtr;
  _35 = Com_gConfigPtr.337_34->ComSigGWRxPduFlagBase;
  _36 = (unsigned int) _35;
  _37 = IPduPtr->ComIPduSigGWFlagBit;
  _38 = _37 / 8;
  _39 = (unsigned int) _38;
  _40 = _36 + _39;
  _41 = Com_gDataMemPtr.336_33 + _40;
  _42 = IPduPtr->ComIPduSigGWFlagBit;
  _43 = (long unsigned int) _42;
  _44 = _43 & 7;
  TS_AtomicClearBit_8 (_41, _44);

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_EB_DisableSignalAndSignalGroupBasedDMFlag (IPduPtr, 1);
  return;

}


Com_EB_InitRxSignalsWithFilter (const struct ComRxIPduType * IPduPtr)
{
  const struct ComRxSignalType * SignalPtr;
  ComSignalRefType signalId;
  ComSignalRefType j;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  j = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.338_1 = Com_gConfigPtr;
  Com_gConfigPtr.339_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.339_2->ComRxIPduSignalListRef;
  _4 = (int) j;
  _5 = IPduPtr->ComIPduSignalRefFirst;
  _6 = (int) _5;
  _7 = _4 + _6;
  _8 = (unsigned int) _7;
  _9 = _8 * 2;
  _10 = _3 + _9;
  _11 = Com_gConfigPtr.338_1 + _10;
  signalId = *_11;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.340_12 = Com_gConfigPtr;
  Com_gConfigPtr.341_13 = Com_gConfigPtr;
  _14 = Com_gConfigPtr.341_13->ComRxSignalRef;
  _15 = (unsigned int) signalId;
  _16 = _15 * 20;
  _17 = _14 + _16;
  SignalPtr = Com_gConfigPtr.340_12 + _17;
  # DEBUG BEGIN_STMT
  _18 = &SignalPtr->ComSignalBase;
  Com_EB_SetBuffer (_18);
  # DEBUG BEGIN_STMT
  _19 = SignalPtr->ComSignalBase.ComFilterConf.ComFilterType;
  if (_19 == 7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _20 = SignalPtr->ComSignalBase.ComFilterConf.ComFilterRef;
  Com_ResetFilerOneEveryN (_20);

  <bb 5> :
  # DEBUG BEGIN_STMT
  j.342_21 = j;
  j = j.342_21 + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _22 = IPduPtr->ComIPduSignalWithBufferRefNum;
  if (j < _22)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}


Com_EB_HandleRxSignalGroups (const struct ComRxIPduType * IPduPtr, ComIPduRefType PduId)
{
  void (*<T608>) (void) fptr;
  const struct ComRxSignalExtType * const SignalExtPtr;
  const uint8 SignalUpdated;
  const struct ComRxSignalGroupType * const SignalGPtr;
  const ComSignalGroupRefType signalGId;
  const uint32 pduLength;
  ComSignalGroupRefType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.675_1 = Com_gDataMemPtr;
  Com_gConfigPtr.676_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.676_2->ComRxIPduLengthBase;
  _4 = (sizetype) _3;
  _5 = Com_gDataMemPtr.675_1 + _4;
  _6 = (unsigned int) PduId;
  _7 = _6 * 2;
  _8 = _5 + _7;
  _9 = *_8;
  pduLength = (const uint32) _9;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.677_10 = Com_gConfigPtr;
  Com_gConfigPtr.678_11 = Com_gConfigPtr;
  _12 = Com_gConfigPtr.678_11->ComRxIPduSignalGroupListRef;
  _13 = (int) i;
  _14 = IPduPtr->ComIPduSignalGroupRefFirst;
  _15 = (int) _14;
  _16 = _13 + _15;
  _17 = (unsigned int) _16;
  _18 = _17 * 2;
  _19 = _12 + _18;
  _20 = Com_gConfigPtr.677_10 + _19;
  signalGId = *_20;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.679_21 = Com_gConfigPtr;
  Com_gConfigPtr.680_22 = Com_gConfigPtr;
  _23 = Com_gConfigPtr.680_22->ComRxSignalGroupRef;
  _24 = (unsigned int) signalGId;
  _25 = _24 * 10;
  _26 = _23 + _25;
  SignalGPtr = Com_gConfigPtr.679_21 + _26;
  # DEBUG BEGIN_STMT
  SignalUpdated = Com_EB_CheckRxSignalGroup_Receive_UpdateBitAndDM (SignalGPtr, IPduPtr, pduLength);
  # DEBUG BEGIN_STMT
  if (SignalUpdated == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.681_27 = Com_gConfigPtr;
  Com_gConfigPtr.682_28 = Com_gConfigPtr;
  _29 = Com_gConfigPtr.682_28->ComRxSignalExtRef;
  _30 = SignalGPtr->ComSignalExtRef;
  _31 = (unsigned int) _30;
  _32 = _31 * 14;
  _33 = _29 + _32;
  SignalExtPtr = Com_gConfigPtr.681_27 + _33;
  # DEBUG BEGIN_STMT
  _34 = SignalExtPtr->ComNotification;
  if (_34 != 65535)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _35 = SignalExtPtr->ComNotification;
  _36 = (int) _35;
  fptr = Com_CbkRxAck_Array[_36];
  # DEBUG BEGIN_STMT
  fptr ();

  <bb 6> :
  # DEBUG BEGIN_STMT
  i.683_37 = i;
  i = i.683_37 + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _38 = IPduPtr->ComIPduSignalGroupRefNum;
  if (i < _38)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Com_EB_HandleRxSignalsWithBuffer (const struct ComRxIPduType * IPduPtr, ComIPduRefType PduId, uint8 pduRxDMRestat)
{
  void (*<T608>) (void) fptr;
  const struct ComSignalBaseType * const Com_EB_ReadPropPtr;
  const uint8 * const dataPtr;
  const struct ComRxSignalExtType * const SignalExtPtr;
  const uint8 SignalUpdated;
  const struct ComRxSignalType * const SignalPtr;
  const ComSignalRefType signalId;
  uint8 passFilter_MASKED_NEW_DIFFERS_MASKED_OLD;
  uint8 filter;
  const uint8 checkRequired;
  const uint32 pduLength;
  ComSignalRefType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.641_1 = Com_gDataMemPtr;
  Com_gConfigPtr.642_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.642_2->ComRxIPduLengthBase;
  _4 = (sizetype) _3;
  _5 = Com_gDataMemPtr.641_1 + _4;
  _6 = (unsigned int) PduId;
  _7 = _6 * 2;
  _8 = _5 + _7;
  _9 = *_8;
  pduLength = (const uint32) _9;
  # DEBUG BEGIN_STMT
  _10 = IPduPtr->ComIPduSizeMax;
  _11 = (long unsigned int) _10;
  _12 = pduLength != _11;
  checkRequired = (const uint8) _12;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 12>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  filter = 1;
  # DEBUG BEGIN_STMT
  passFilter_MASKED_NEW_DIFFERS_MASKED_OLD = pduRxDMRestat;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.643_13 = Com_gConfigPtr;
  Com_gConfigPtr.644_14 = Com_gConfigPtr;
  _15 = Com_gConfigPtr.644_14->ComRxIPduSignalListRef;
  _16 = (int) i;
  _17 = IPduPtr->ComIPduSignalRefFirst;
  _18 = (int) _17;
  _19 = _16 + _18;
  _20 = (unsigned int) _19;
  _21 = _20 * 2;
  _22 = _15 + _21;
  _23 = Com_gConfigPtr.643_13 + _22;
  signalId = *_23;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.645_24 = Com_gConfigPtr;
  Com_gConfigPtr.646_25 = Com_gConfigPtr;
  _26 = Com_gConfigPtr.646_25->ComRxSignalRef;
  _27 = (unsigned int) signalId;
  _28 = _27 * 20;
  _29 = _26 + _28;
  SignalPtr = Com_gConfigPtr.645_24 + _29;
  # DEBUG BEGIN_STMT
  SignalUpdated = Com_EB_CheckRxSignal_Receive_UpdateBitAndDM (SignalPtr, IPduPtr, &passFilter_MASKED_NEW_DIFFERS_MASKED_OLD, pduLength, checkRequired);
  # DEBUG BEGIN_STMT
  if (SignalUpdated == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.647_30 = Com_gConfigPtr;
  Com_gConfigPtr.648_31 = Com_gConfigPtr;
  _32 = Com_gConfigPtr.648_31->ComRxSignalExtRef;
  _33 = SignalPtr->ComSignalExtRef;
  _34 = (unsigned int) _33;
  _35 = _34 * 14;
  _36 = _32 + _35;
  SignalExtPtr = Com_gConfigPtr.647_30 + _36;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.649_37 = Com_gDataMemPtr;
  _38 = SignalPtr->ComSignalBase.ComBufferRef;
  _39 = (sizetype) _38;
  dataPtr = Com_gDataMemPtr.649_37 + _39;
  # DEBUG BEGIN_STMT
  Com_EB_ReadPropPtr = &SignalPtr->ComSignalBase;
  # DEBUG BEGIN_STMT
  _40 = &Com_EB_ReadPropPtr->ComFilterConf;
  filter = Com_EB_CalculateFilter (Com_EB_ReadPropPtr, dataPtr, _40);
  # DEBUG BEGIN_STMT
  passFilter_MASKED_NEW_DIFFERS_MASKED_OLD.650_41 = passFilter_MASKED_NEW_DIFFERS_MASKED_OLD;
  if (passFilter_MASKED_NEW_DIFFERS_MASKED_OLD.650_41 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _42 = SignalExtPtr->ComRxSignalExtFlags;
  _43 = _42 >> 3;
  _44 = (unsigned int) _43;
  _45 = _44 & 1;
  if (_45 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _46 = SignalPtr->ComSignalBase.ComFilterConf.ComFilterType;
  if (_46 == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  filter = 1;
  # DEBUG BEGIN_STMT
  _47 = &SignalPtr->ComSignalBase;
  Com_EB_SetBuffer (_47);

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (filter == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _48 = SignalExtPtr->ComNotification;
  if (_48 != 65535)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _49 = SignalExtPtr->ComNotification;
  _50 = (int) _49;
  fptr = Com_CbkRxAck_Array[_50];
  # DEBUG BEGIN_STMT
  fptr ();

  <bb 11> :
  passFilter_MASKED_NEW_DIFFERS_MASKED_OLD = {CLOBBER};
  # DEBUG BEGIN_STMT
  i.651_51 = i;
  i = i.651_51 + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  _52 = IPduPtr->ComIPduSignalWithBufferRefNum;
  if (i < _52)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  return;

}


Com_EB_CheckRxSignalGroup_Receive_UpdateBitAndDM (const struct ComRxSignalGroupType * SignalGPtr, const struct ComRxIPduType * IPduPtr, uint32 pduLength)
{
  uint8 SignalUpdated;
  uint8 D.11791;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalUpdated = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SignalUpdated = Com_EB_CheckRxSignalGoupUpdateBitAndDM (SignalGPtr, IPduPtr, pduLength);
  # DEBUG BEGIN_STMT
  D.11791 = SignalUpdated;
  return D.11791;

}


Com_EB_CheckRxSignal_Receive_UpdateBitAndDM (const struct ComRxSignalType * SignalPtr, const struct ComRxIPduType * IPduPtr, uint8 * passFilter_MASKED_NEW_DIFFERS_MASKED_OLD, uint32 pduLength, uint8 checkRequired)
{
  uint8 SignalUpdated;
  uint8 D.11768;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalUpdated = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SignalUpdated = Com_EB_CheckRxSignalUpdateBitAndDM (SignalPtr, IPduPtr, passFilter_MASKED_NEW_DIFFERS_MASKED_OLD, pduLength);
  # DEBUG BEGIN_STMT
  D.11768 = SignalUpdated;
  return D.11768;

}


Com_EB_HandleRxIPdu (Com_IpduGroupModeType mode, boolean toBeActivated, const struct ComRxIPduType * IPduPtr, boolean Initialize, ComIPduRefType IPduId)
{
  uint8 * const IPduFlagBytePtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.326_1 = Com_gDataMemPtr;
  Com_gConfigPtr.327_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.327_2->ComRxIPduStatusBase;
  _4 = (int) _3;
  _5 = (int) IPduId;
  _6 = _4 + _5;
  _7 = (sizetype) _6;
  IPduFlagBytePtr = Com_gDataMemPtr.326_1 + _7;
  # DEBUG BEGIN_STMT
  _8 = *IPduFlagBytePtr;
  _9 = (unsigned int) _8;
  _10 = _9 & 1;
  if (_10 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (toBeActivated == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _11 = (int) mode;
  switch (_11) <default: <L26> [INV], case 0: <L2> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxIPdu_Start (IPduId, Initialize, IPduFlagBytePtr);
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxIPdu_EnableRxDM (IPduPtr, IPduFlagBytePtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (toBeActivated == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _12 = (int) mode;
  switch (_12) <default: <L26> [INV], case 0: <L10> [INV], case 1: <L11> [INV]>

  <bb 8> :
<L10>:
  # DEBUG BEGIN_STMT
  TS_AtomicClearBit_8 (IPduFlagBytePtr, 0);
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxIPdu_DisableRxDM (IPduPtr, IPduFlagBytePtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 9> :
<L11>:
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxIPdu_DisableRxDM (IPduPtr, IPduFlagBytePtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _13 = (int) mode;
  switch (_13) <default: <L26> [INV], case 1: <L15> [INV]>

  <bb 11> :
<L15>:
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxIPdu_EnableRxDM (IPduPtr, IPduFlagBytePtr);
  # DEBUG BEGIN_STMT

  <bb 12> :
<L26>:
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_RxDMQueue (const struct ComRxIPduType * IPduPtr, Com_RxDMNextDueTimeType TimeOutOffset)
{
  Com_RxDMNextDueTimeType * const RxTimeoutQueueBase;
  Com_RxDMNextDueTimeType TimeOut;
  Com_RxDMNextDueTimeType globalTime;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.391_1 = Com_gDataMemPtr;
  Com_gConfigPtr.392_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.392_2->ComRxTimeoutQueueBase;
  _4 = (sizetype) _3;
  RxTimeoutQueueBase = Com_gDataMemPtr.391_1 + _4;
  # DEBUG BEGIN_STMT
  globalTime = Com_GlobalTime;
  # DEBUG BEGIN_STMT
  TimeOut = globalTime + TimeOutOffset;
  # DEBUG BEGIN_STMT
  _5 = IPduPtr->RxDMQueueRef;
  _6 = (unsigned int) _5;
  _7 = _6 * 2;
  _8 = RxTimeoutQueueBase + _7;
  *_8 = TimeOut;
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_HandleRxSignalsDMUBOnly (const struct ComRxIPduType * IPduPtr, ComIPduRefType PduId)
{
  uint8 passFilter_MASKED_NEW_DIFFERS_MASKED_OLD;
  const struct ComRxSignalType * const SignalPtr;
  const ComSignalRefType signalId;
  const uint8 checkRequired;
  const uint32 pduLength;
  ComSignalRefType loopStop;
  ComSignalRefType loopStart;
  ComSignalRefType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  loopStart = IPduPtr->ComIPduSignalRefFirst;
  # DEBUG BEGIN_STMT
  loopStop = IPduPtr->ComIPduSignalRefFirst;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.668_1 = Com_gDataMemPtr;
  Com_gConfigPtr.669_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.669_2->ComRxIPduLengthBase;
  _4 = (sizetype) _3;
  _5 = Com_gDataMemPtr.668_1 + _4;
  _6 = (unsigned int) PduId;
  _7 = _6 * 2;
  _8 = _5 + _7;
  _9 = *_8;
  pduLength = (const uint32) _9;
  # DEBUG BEGIN_STMT
  _10 = IPduPtr->ComIPduSizeMax;
  _11 = (long unsigned int) _10;
  _12 = pduLength != _11;
  checkRequired = (const uint8) _12;
  # DEBUG BEGIN_STMT
  _13 = IPduPtr->ComIPduSignalRefNum;
  loopStop = loopStop + _13;
  # DEBUG BEGIN_STMT
  _14 = IPduPtr->ComIPduSignalW_F_A_NotiRefNum;
  loopStart = loopStart + _14;
  # DEBUG BEGIN_STMT
  i = loopStart;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.670_15 = Com_gConfigPtr;
  Com_gConfigPtr.671_16 = Com_gConfigPtr;
  _17 = Com_gConfigPtr.671_16->ComRxIPduSignalListRef;
  _18 = (unsigned int) i;
  _19 = _18 * 2;
  _20 = _17 + _19;
  _21 = Com_gConfigPtr.670_15 + _20;
  signalId = *_21;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.672_22 = Com_gConfigPtr;
  Com_gConfigPtr.673_23 = Com_gConfigPtr;
  _24 = Com_gConfigPtr.673_23->ComRxSignalRef;
  _25 = (unsigned int) signalId;
  _26 = _25 * 20;
  _27 = _24 + _26;
  SignalPtr = Com_gConfigPtr.672_22 + _27;
  # DEBUG BEGIN_STMT
  passFilter_MASKED_NEW_DIFFERS_MASKED_OLD = 0;
  # DEBUG BEGIN_STMT
  Com_EB_CheckRxSignal_Receive_UpdateBitAndDM (SignalPtr, IPduPtr, &passFilter_MASKED_NEW_DIFFERS_MASKED_OLD, pduLength, checkRequired);
  passFilter_MASKED_NEW_DIFFERS_MASKED_OLD = {CLOBBER};
  # DEBUG BEGIN_STMT
  i.674_28 = i;
  i = i.674_28 + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (i < loopStop)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Com_EB_HandleRxSig_W_F_A_A_Noti (const struct ComRxIPduType * IPduPtr, ComIPduRefType PduId)
{
  void (*<T608>) (void) fptr;
  const struct ComRxSignalExtType * const SignalExtPtr;
  const uint8 SignalUpdated;
  uint8 passFilter_MASKED_NEW_DIFFERS_MASKED_OLD;
  const struct ComRxSignalType * const SignalPtr;
  const ComSignalRefType signalId;
  const uint8 checkRequired;
  const uint32 pduLength;
  ComSignalRefType loopStop;
  ComSignalRefType loopStart;
  ComSignalRefType i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.659_1 = Com_gDataMemPtr;
  Com_gConfigPtr.660_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.660_2->ComRxIPduLengthBase;
  _4 = (sizetype) _3;
  _5 = Com_gDataMemPtr.659_1 + _4;
  _6 = (unsigned int) PduId;
  _7 = _6 * 2;
  _8 = _5 + _7;
  _9 = *_8;
  pduLength = (const uint32) _9;
  # DEBUG BEGIN_STMT
  _10 = IPduPtr->ComIPduSizeMax;
  _11 = (long unsigned int) _10;
  _12 = pduLength != _11;
  checkRequired = (const uint8) _12;
  # DEBUG BEGIN_STMT
  loopStart = IPduPtr->ComIPduSignalWithBufferRefNum;
  # DEBUG BEGIN_STMT
  loopStop = IPduPtr->ComIPduSignalW_F_A_NotiRefNum;
  # DEBUG BEGIN_STMT
  i = loopStart;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.661_13 = Com_gConfigPtr;
  Com_gConfigPtr.662_14 = Com_gConfigPtr;
  _15 = Com_gConfigPtr.662_14->ComRxIPduSignalListRef;
  _16 = (int) i;
  _17 = IPduPtr->ComIPduSignalRefFirst;
  _18 = (int) _17;
  _19 = _16 + _18;
  _20 = (unsigned int) _19;
  _21 = _20 * 2;
  _22 = _15 + _21;
  _23 = Com_gConfigPtr.661_13 + _22;
  signalId = *_23;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.663_24 = Com_gConfigPtr;
  Com_gConfigPtr.664_25 = Com_gConfigPtr;
  _26 = Com_gConfigPtr.664_25->ComRxSignalRef;
  _27 = (unsigned int) signalId;
  _28 = _27 * 20;
  _29 = _26 + _28;
  SignalPtr = Com_gConfigPtr.663_24 + _29;
  # DEBUG BEGIN_STMT
  passFilter_MASKED_NEW_DIFFERS_MASKED_OLD = 0;
  # DEBUG BEGIN_STMT
  SignalUpdated = Com_EB_CheckRxSignal_Receive_UpdateBitAndDM (SignalPtr, IPduPtr, &passFilter_MASKED_NEW_DIFFERS_MASKED_OLD, pduLength, checkRequired);
  # DEBUG BEGIN_STMT
  if (SignalUpdated == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.665_30 = Com_gConfigPtr;
  Com_gConfigPtr.666_31 = Com_gConfigPtr;
  _32 = Com_gConfigPtr.666_31->ComRxSignalExtRef;
  _33 = SignalPtr->ComSignalExtRef;
  _34 = (unsigned int) _33;
  _35 = _34 * 14;
  _36 = _32 + _35;
  SignalExtPtr = Com_gConfigPtr.665_30 + _36;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _37 = SignalExtPtr->ComNotification;
  _38 = (int) _37;
  fptr = Com_CbkRxAck_Array[_38];
  # DEBUG BEGIN_STMT
  fptr ();

  <bb 5> :
  passFilter_MASKED_NEW_DIFFERS_MASKED_OLD = {CLOBBER};
  # DEBUG BEGIN_STMT
  i.667_39 = i;
  i = i.667_39 + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (i < loopStop)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}


Com_EB_HandleRxIPdu_DisableRxDM (const struct ComRxIPduType * IPduPtr, uint8 * IPduFlagBytePtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  TS_AtomicClearBit_8 (IPduFlagBytePtr, 4);
  # DEBUG BEGIN_STMT
  TS_AtomicClearBit_8 (IPduFlagBytePtr, 1);
  # DEBUG BEGIN_STMT
  Com_EB_DisableSignalAndSignalGroupBasedDMFlag (IPduPtr, 0);
  return;

}


Com_EB_HandleRxIPdu_EnableRxDM (const struct ComRxIPduType * IPduPtr, uint8 * IPduFlagBytePtr)
{
  const Com_RxDMNextDueTimeType TimeOutOffset;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TS_AtomicSetBit_8 (IPduFlagBytePtr, 4);
  # DEBUG BEGIN_STMT
  _1 = IPduPtr->ComRxIPduFlags;
  _2 = _1 >> 1;
  _3 = (unsigned int) _2;
  _4 = _3 & 1;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  TimeOutOffset = IPduPtr->ComRxFirstTimeoutFactorValue;
  # DEBUG BEGIN_STMT
  if (TimeOutOffset != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _5 = *IPduFlagBytePtr;
  _6 = (unsigned int) _5;
  _7 = _6 & 2;
  if (_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = *IPduFlagBytePtr;
  _9 = _8 | 2;
  *IPduFlagBytePtr = _9;
  # DEBUG BEGIN_STMT
  Com_EB_RxDMQueue (IPduPtr, TimeOutOffset);

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 7> :
  # DEBUG BEGIN_STMT
  Com_EB_EnableSignalBasedDMFlag (IPduPtr);
  # DEBUG BEGIN_STMT
  Com_EB_EnableSignalGroupBasedDMFlag (IPduPtr);
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_HandleRxIPdu_Start (ComIPduRefType IPduId, boolean Initialize, uint8 * IPduFlagBytePtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (Initialize == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_InitRxIPdu (IPduId);

  <bb 4> :
  # DEBUG BEGIN_STMT
  TS_AtomicSetBit_8 (IPduFlagBytePtr, 0);
  return;

}


Com_EB_NotifyReceivers (const struct ComRxIPduType * IPduPtr, ComIPduRefType PduId)
{
  uint8 pduRxDMRestat;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  pduRxDMRestat = Com_EB_HandlePduRxDM (IPduPtr);
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxSignalsWithBuffer (IPduPtr, PduId, pduRxDMRestat);
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxSig_W_F_A_A_Noti (IPduPtr, PduId);
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxSignalsDMUBOnly (IPduPtr, PduId);
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxSignalGroups (IPduPtr, PduId);
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_HandlePduRxDM (const struct ComRxIPduType * IPduPtr)
{
  const Com_RxDMNextDueTimeType TimeOutOffset;
  ptrdiff_t offset;
  const struct ComRxIPduType * firstCfgPtr;
  ComIPduRefType ComRxPduId;
  uint8 * IPduFlagBytePtr;
  uint8 restart;
  uint8 D.11754;

  <bb 2> :
  # DEBUG BEGIN_STMT
  restart = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.637_1 = Com_gConfigPtr;
  Com_gConfigPtr.638_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.638_2->ComRxIPduRef;
  firstCfgPtr = Com_gConfigPtr.637_1 + _3;
  # DEBUG BEGIN_STMT
  _4 = IPduPtr - firstCfgPtr;
  offset = _4 /[ex] 48;
  # DEBUG BEGIN_STMT
  ComRxPduId = (ComIPduRefType) offset;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.639_5 = Com_gDataMemPtr;
  Com_gConfigPtr.640_6 = Com_gConfigPtr;
  _7 = Com_gConfigPtr.640_6->ComRxIPduStatusBase;
  _8 = (int) _7;
  _9 = (int) ComRxPduId;
  _10 = _8 + _9;
  _11 = (sizetype) _10;
  IPduFlagBytePtr = Com_gDataMemPtr.639_5 + _11;
  # DEBUG BEGIN_STMT
  _12 = IPduPtr->ComRxIPduFlags;
  _13 = _12 >> 1;
  _14 = (unsigned int) _13;
  _15 = _14 & 1;
  if (_15 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  TimeOutOffset = IPduPtr->ComRxTimeoutFactorValue;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _16 = *IPduFlagBytePtr;
  _17 = (unsigned int) _16;
  _18 = _17 & 2;
  if (_18 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _19 = *IPduFlagBytePtr;
  _20 = _19 >> 2;
  restart = _20 & 1;
  # DEBUG BEGIN_STMT
  _21 = *IPduFlagBytePtr;
  _22 = _21 & 251;
  *IPduFlagBytePtr = _22;
  # DEBUG BEGIN_STMT
  Com_EB_RxDMQueue (IPduPtr, TimeOutOffset);
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _23 = *IPduFlagBytePtr;
  _24 = (unsigned int) _23;
  _25 = _24 & 16;
  if (_25 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _26 = *IPduFlagBytePtr;
  _27 = _26 >> 2;
  restart = _27 & 1;
  # DEBUG BEGIN_STMT
  _28 = *IPduFlagBytePtr;
  _29 = _28 & 251;
  *IPduFlagBytePtr = _29;
  # DEBUG BEGIN_STMT
  _30 = *IPduFlagBytePtr;
  _31 = _30 | 2;
  *IPduFlagBytePtr = _31;
  # DEBUG BEGIN_STMT
  Com_EB_RxDMQueue (IPduPtr, TimeOutOffset);

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.11754 = restart;
  return D.11754;

}


Com_EB_HandlePduGroupTx (const uint8 * ipduGroupVector, boolean Initialize)
{
  boolean activate;
  uint16 iPduGroupVectorByte;
  boolean toBeActivated;
  const ComIPduGroupMaskType * const MaskPtr;
  const struct ComTxIPduType * const IPduPtr;
  ComIPduRefType IPduId;
  const ComIPduRefType txPduCount;
  boolean iftmp.424;
  boolean iftmp.423;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.417_1 = Com_gConfigPtr;
  txPduCount = Com_gConfigPtr.417_1->ComTxIPduArraySize;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IPduId = 0;
  goto <bb 15>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.418_2 = Com_gConfigPtr;
  Com_gConfigPtr.419_3 = Com_gConfigPtr;
  _4 = Com_gConfigPtr.419_3->ComTxIPduRef;
  _5 = (unsigned int) IPduId;
  _6 = _5 * 64;
  _7 = _4 + _6;
  IPduPtr = Com_gConfigPtr.418_2 + _7;
  # DEBUG BEGIN_STMT
  _8 = IPduPtr->ComIPduGroupMaskRef;
  if (_8 != 65535)
    goto <bb 4>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.420_9 = Com_gConfigPtr;
  Com_gConfigPtr.421_10 = Com_gConfigPtr;
  _11 = Com_gConfigPtr.421_10->ComIPduGroupMaskRef;
  _12 = IPduPtr->ComIPduGroupMaskRef;
  _13 = (unsigned int) _12;
  _14 = _13 * 4;
  _15 = _11 + _14;
  MaskPtr = Com_gConfigPtr.420_9 + _15;
  # DEBUG BEGIN_STMT
  toBeActivated = 0;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.422_16 = Com_gConfigPtr;
  iPduGroupVectorByte = Com_gConfigPtr.422_16->ComTxIpduGroupVectorByteStart;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _17 = (sizetype) iPduGroupVectorByte;
  _18 = MaskPtr + _17;
  _19 = *_18;
  _20 = (sizetype) iPduGroupVectorByte;
  _21 = ipduGroupVector + _20;
  _22 = *_21;
  _23 = _19 & _22;
  if (_23 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.423 = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.423 = 0;

  <bb 8> :
  activate = iftmp.423;
  # DEBUG BEGIN_STMT
  if (toBeActivated != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (activate != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.424 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.424 = 0;

  <bb 12> :
  toBeActivated = iftmp.424;
  # DEBUG BEGIN_STMT
  iPduGroupVectorByte.425_24 = iPduGroupVectorByte;
  iPduGroupVectorByte = iPduGroupVectorByte.425_24 + 1;
  # DEBUG BEGIN_STMT
  if (iPduGroupVectorByte != 4)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Com_EB_HandleTxIPdu (toBeActivated, IPduPtr, Initialize, IPduId);

  <bb 14> :
  # DEBUG BEGIN_STMT
  IPduId.426_25 = IPduId;
  IPduId = IPduId.426_25 + 1;

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (IPduId < txPduCount)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_HandlePduGroupRx (Com_IpduGroupModeType mode, const uint8 * ipduGroupVector, boolean Initialize)
{
  uint16 iPduGroupVectorByte;
  boolean activate;
  boolean toBeActivated;
  const ComIPduGroupMaskType * const MaskPtr;
  const struct ComRxIPduType * const IPduPtr;
  ComIPduRefType IPduId;
  const ComIPduRefType rxPduCount;
  boolean iftmp.324;
  boolean iftmp.323;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.316_1 = Com_gConfigPtr;
  rxPduCount = Com_gConfigPtr.316_1->ComRxIPduArraySize;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IPduId = 0;
  goto <bb 15>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.317_2 = Com_gConfigPtr;
  Com_gConfigPtr.318_3 = Com_gConfigPtr;
  _4 = Com_gConfigPtr.318_3->ComRxIPduRef;
  _5 = (unsigned int) IPduId;
  _6 = _5 * 48;
  _7 = _4 + _6;
  IPduPtr = Com_gConfigPtr.317_2 + _7;
  # DEBUG BEGIN_STMT
  _8 = IPduPtr->ComIPduGroupMaskRef;
  if (_8 != 65535)
    goto <bb 4>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.319_9 = Com_gConfigPtr;
  Com_gConfigPtr.320_10 = Com_gConfigPtr;
  _11 = Com_gConfigPtr.320_10->ComIPduGroupMaskRef;
  _12 = IPduPtr->ComIPduGroupMaskRef;
  _13 = (unsigned int) _12;
  _14 = _13 * 4;
  _15 = _11 + _14;
  MaskPtr = Com_gConfigPtr.319_9 + _15;
  # DEBUG BEGIN_STMT
  toBeActivated = 0;
  # DEBUG BEGIN_STMT
  activate = 0;
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.321_16 = Com_gConfigPtr;
  iPduGroupVectorByte = Com_gConfigPtr.321_16->ComRxIpduGroupVectorByteEnd;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  iPduGroupVectorByte.322_17 = iPduGroupVectorByte;
  iPduGroupVectorByte = iPduGroupVectorByte.322_17 + 65535;
  # DEBUG BEGIN_STMT
  _18 = (sizetype) iPduGroupVectorByte;
  _19 = MaskPtr + _18;
  _20 = *_19;
  _21 = (sizetype) iPduGroupVectorByte;
  _22 = ipduGroupVector + _21;
  _23 = *_22;
  _24 = _20 & _23;
  if (_24 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.323 = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.323 = 0;

  <bb 8> :
  activate = iftmp.323;
  # DEBUG BEGIN_STMT
  if (toBeActivated != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (activate != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.324 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.324 = 0;

  <bb 12> :
  toBeActivated = iftmp.324;
  # DEBUG BEGIN_STMT
  if (iPduGroupVectorByte != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Com_EB_HandleRxIPdu (mode, toBeActivated, IPduPtr, Initialize, IPduId);

  <bb 14> :
  # DEBUG BEGIN_STMT
  IPduId.325_25 = IPduId;
  IPduId = IPduId.325_25 + 1;

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (IPduId < rxPduCount)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_DET (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 255, 3);
  # DEBUG BEGIN_STMT
  IntDataPtr->SendSigRetval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_A1_EL_DUB_DOC (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  const uint16 pos;
  const uint8 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint8 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  pos = Com_EB_WritePropPtr->ComSignalPositionInBit;
  # DEBUG BEGIN_STMT
  _1 = (sizetype) pos;
  _2 = dataPtr + _1;
  *_2 = Val;
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_BO_EL_DUB_DOC (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  const uint16 bit;
  const uint16 pos;
  const uint8 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint8 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  pos = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  bit = _2 & 7;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Val == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = (sizetype) pos;
  _4 = dataPtr + _3;
  _5 = (long unsigned int) bit;
  TS_AtomicClearBit_8 (_4, _5);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = (sizetype) pos;
  _7 = dataPtr + _6;
  _8 = (long unsigned int) bit;
  TS_AtomicSetBit_8 (_7, _8);

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_A1_DL_DUB_DOC (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  const uint16 pos;
  const uint8 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint8 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  pos = Com_EB_WritePropPtr->ComSignalPositionInBit;
  # DEBUG BEGIN_STMT
  _1 = (sizetype) pos;
  _2 = dataPtr + _1;
  *_2 = Val;
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_BO_DL_DUB_DOC (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  const uint16 bit;
  const uint16 pos;
  const uint8 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint8 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  pos = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  bit = _2 & 7;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Val == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = (sizetype) pos;
  _4 = dataPtr + _3;
  _5 = *_4;
  _6 = (int) bit;
  _7 = 1 << _6;
  _8 = (unsigned char) _7;
  _9 = ~_8;
  _10 = (sizetype) pos;
  _11 = dataPtr + _10;
  _12 = _5 & _9;
  *_11 = _12;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _13 = (sizetype) pos;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = (int) bit;
  _17 = 1 << _16;
  _18 = (unsigned char) _17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = _15 | _18;
  *_20 = _21;

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_AY_S0_EL_EUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _2 = _1 / 8;
  _3 = (sizetype) _2;
  _4 = dataPtr + _3;
  _5 = *_4;
  _6 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _7 = (unsigned int) _6;
  _8 = _7 & 7;
  _9 = 1 << _8;
  _10 = (unsigned char) _9;
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = _5 | _10;
  *_14 = _15;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _17 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _18 = _16 + _17;
  _19 = _18 - ii;
  pos = _19 + 65535;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _20 = (sizetype) pos;
  _21 = dataPtr + _20;
  _22 = *_21;
  _23 = (sizetype) ii;
  _24 = U8Ptr + _23;
  _25 = *_24;
  if (_22 != _25)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = (sizetype) ii;
  _27 = U8Ptr + _26;
  _28 = (sizetype) pos;
  _29 = dataPtr + _28;
  _30 = *_27;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii.41_31 = ii;
  ii = ii.41_31 + 1;
  # DEBUG BEGIN_STMT
  _32 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _32)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _33 = IntDataPtr->trigger;
  _34 = valueChanged | _33;
  IntDataPtr->trigger = _34;
  return;

}


Com_EB_Write_64_SX_EL_EUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_EOC_E2 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 65504;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_EUB_EOC_E2 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_EL_EUB_EOC_E2 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  return;

}


Com_EB_Write_32_SX_EL_EUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = (unsigned int) _16;
  _18 = _17 & 7;
  _19 = 1 << _18;
  _20 = (unsigned char) _19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = _21 / 8;
  _23 = (sizetype) _22;
  _24 = dataPtr + _23;
  _25 = _15 | _20;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = (sizetype) pos;
  _27 = dataPtr + _26;
  _28 = *_27;
  _29 = (sizetype) pos;
  _30 = dataPtr + _29;
  _31 = *_30;
  _32 = (unsigned char) mask;
  _33 = ~_32;
  _34 = _31 & _33;
  _35 = (unsigned char) mask;
  _36 = putvalue & _35;
  _37 = _34 | _36;
  if (_28 != _37)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = *_39;
  _41 = (unsigned char) mask;
  _42 = ~_41;
  _43 = _40 & _42;
  _44 = (unsigned char) mask;
  _45 = putvalue & _44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = _43 | _45;
  *_47 = _48;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _49 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _50 = (unsigned char) _49;
  tmp_val = _50 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.42_51 = (unsigned short) pos;
  _52 = pos.42_51 + 65535;
  pos = (sint16) _52;
  # DEBUG BEGIN_STMT
  _53 = (int) space;
  Val = Val >> _53;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _54 = (sizetype) pos;
  _55 = dataPtr + _54;
  _56 = *_55;
  _57 = (unsigned char) Val;
  if (_56 != _57)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _58 = (sizetype) pos;
  _59 = dataPtr + _58;
  _60 = (unsigned char) Val;
  *_59 = _60;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.43_61 = (unsigned char) ssize;
  _62 = ssize.43_61 + 248;
  ssize = (sint8) _62;
  # DEBUG BEGIN_STMT
  pos.44_63 = (unsigned short) pos;
  _64 = pos.44_63 + 65535;
  pos = (sint16) _64;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _65 = 8 - ssize_hlp;
  _66 = (int) _65;
  _67 = 255 >> _66;
  mask_u8 = (uint8) _67;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _68 = (sizetype) pos;
  _69 = dataPtr + _68;
  _70 = *_69;
  _71 = (sizetype) pos;
  _72 = dataPtr + _71;
  _73 = *_72;
  _74 = (unsigned char) mask;
  _75 = ~_74;
  _76 = _73 & _75;
  _77 = (unsigned char) Val;
  _78 = (unsigned char) mask;
  _79 = _77 & _78;
  _80 = _76 | _79;
  if (_70 != _80)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _81 = (sizetype) pos;
  _82 = dataPtr + _81;
  _83 = *_82;
  _84 = (unsigned char) mask;
  _85 = ~_84;
  _86 = _83 & _85;
  _87 = (unsigned char) Val;
  _88 = (unsigned char) mask;
  _89 = _87 & _88;
  _90 = (sizetype) pos;
  _91 = dataPtr + _90;
  _92 = _86 | _89;
  *_91 = _92;

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _93 = IntDataPtr->trigger;
  _94 = valueChanged | _93;
  IntDataPtr->trigger = _94;
  return;

}


Com_EB_Write_16_SX_EL_EUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _10 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _11 = _10 / 8;
  _12 = (sizetype) _11;
  _13 = dataPtr + _12;
  _14 = *_13;
  _15 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _16 = (unsigned int) _15;
  _17 = _16 & 7;
  _18 = 1 << _17;
  _19 = (unsigned char) _18;
  _20 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _21 = _20 / 8;
  _22 = (sizetype) _21;
  _23 = dataPtr + _22;
  _24 = _14 | _19;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = *_26;
  _28 = (sizetype) pos;
  _29 = dataPtr + _28;
  _30 = *_29;
  _31 = (unsigned char) mask;
  _32 = ~_31;
  _33 = _30 & _32;
  _34 = (unsigned char) Val;
  _35 = (unsigned char) mask;
  _36 = _34 & _35;
  _37 = _33 | _36;
  if (_27 != _37)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = *_39;
  _41 = (unsigned char) mask;
  _42 = ~_41;
  _43 = _40 & _42;
  _44 = (unsigned char) Val;
  _45 = (unsigned char) mask;
  _46 = _44 & _45;
  _47 = (sizetype) pos;
  _48 = dataPtr + _47;
  _49 = _43 | _46;
  *_48 = _49;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.45_50 = (unsigned short) pos;
  _51 = pos.45_50 + 65535;
  pos = (sint16) _51;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _52 = (sizetype) pos;
  _53 = dataPtr + _52;
  _54 = *_53;
  _55 = (sizetype) pos;
  _56 = dataPtr + _55;
  _57 = *_56;
  _58 = (unsigned char) mask;
  _59 = ~_58;
  _60 = _57 & _59;
  _61 = (unsigned char) Val;
  _62 = (unsigned char) mask;
  _63 = _61 & _62;
  _64 = _60 | _63;
  if (_54 != _64)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _65 = (sizetype) pos;
  _66 = dataPtr + _65;
  _67 = *_66;
  _68 = (unsigned char) mask;
  _69 = ~_68;
  _70 = _67 & _69;
  _71 = (unsigned char) Val;
  _72 = (unsigned char) mask;
  _73 = _71 & _72;
  _74 = (sizetype) pos;
  _75 = dataPtr + _74;
  _76 = _70 | _73;
  *_75 = _76;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _77 = IntDataPtr->trigger;
  _78 = valueChanged | _77;
  IntDataPtr->trigger = _78;
  return;

}


Com_EB_Write_08_SX_EL_EUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = _16 / 8;
  _18 = (sizetype) _17;
  _19 = dataPtr + _18;
  _20 = *_19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = (unsigned int) _21;
  _23 = _22 & 7;
  _24 = 1 << _23;
  _25 = (unsigned char) _24;
  _26 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _27 = _26 / 8;
  _28 = (sizetype) _27;
  _29 = dataPtr + _28;
  _30 = _20 | _25;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = *_32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = *_35;
  _37 = (unsigned char) mask;
  _38 = ~_37;
  _39 = _36 & _38;
  _40 = (unsigned char) Val;
  _41 = (unsigned char) mask;
  _42 = _40 & _41;
  _43 = _39 | _42;
  if (_33 != _43)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _44 = (sizetype) pos;
  _45 = dataPtr + _44;
  _46 = *_45;
  _47 = (unsigned char) mask;
  _48 = ~_47;
  _49 = _46 & _48;
  _50 = (unsigned char) Val;
  _51 = (unsigned char) mask;
  _52 = _50 & _51;
  _53 = (sizetype) pos;
  _54 = dataPtr + _53;
  _55 = _49 | _52;
  *_54 = _55;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.46_56 = (unsigned short) pos;
  _57 = pos.46_56 + 65535;
  pos = (sint16) _57;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _58 = (sizetype) pos;
  _59 = dataPtr + _58;
  _60 = *_59;
  _61 = (sizetype) pos;
  _62 = dataPtr + _61;
  _63 = *_62;
  _64 = (unsigned char) mask;
  _65 = ~_64;
  _66 = _63 & _65;
  _67 = (unsigned char) Val;
  _68 = (unsigned char) mask;
  _69 = _67 & _68;
  _70 = _66 | _69;
  if (_60 != _70)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _71 = (sizetype) pos;
  _72 = dataPtr + _71;
  _73 = *_72;
  _74 = (unsigned char) mask;
  _75 = ~_74;
  _76 = _73 & _75;
  _77 = (unsigned char) Val;
  _78 = (unsigned char) mask;
  _79 = _77 & _78;
  _80 = (sizetype) pos;
  _81 = dataPtr + _80;
  _82 = _76 | _79;
  *_81 = _82;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _83 = IntDataPtr->trigger;
  _84 = valueChanged | _83;
  IntDataPtr->trigger = _84;
  return;

}


Com_EB_Write_AY_S1_EL_EUB_EOC_E3 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 * DataPtr_Start;
  const uint8 * U8Ptr;
  uint32 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = (sizetype) _1;
  DataPtr_Start = dataPtr + _2;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _4 = _3 / 8;
  _5 = (sizetype) _4;
  _6 = dataPtr + _5;
  _7 = *_6;
  _8 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _9 = (unsigned int) _8;
  _10 = _9 & 7;
  _11 = 1 << _10;
  _12 = (unsigned char) _11;
  _13 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _14 = _13 / 8;
  _15 = (sizetype) _14;
  _16 = dataPtr + _15;
  _17 = _7 | _12;
  *_16 = _17;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _18 = DataPtr_Start + ii;
  _19 = *_18;
  _20 = U8Ptr + ii;
  _21 = *_20;
  if (_19 != _21)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _22 = U8Ptr + ii;
  _23 = DataPtr_Start + ii;
  _24 = *_22;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii = ii + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _25 = IntDataPtr->arraySize;
  _26 = (long unsigned int) _25;
  if (ii < _26)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _27 = IntDataPtr->trigger;
  _28 = valueChanged | _27;
  IntDataPtr->trigger = _28;
  return;

}


Com_EB_Write_AY_S0_EL_EUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _2 = _1 / 8;
  _3 = (sizetype) _2;
  _4 = dataPtr + _3;
  _5 = *_4;
  _6 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _7 = (unsigned int) _6;
  _8 = _7 & 7;
  _9 = 1 << _8;
  _10 = (unsigned char) _9;
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = _5 | _10;
  *_14 = _15;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  pos = ii + _16;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _17 = (sizetype) pos;
  _18 = dataPtr + _17;
  _19 = *_18;
  _20 = (sizetype) ii;
  _21 = U8Ptr + _20;
  _22 = *_21;
  if (_19 != _22)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = (sizetype) ii;
  _24 = U8Ptr + _23;
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = *_24;
  *_26 = _27;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii.47_28 = ii;
  ii = ii.47_28 + 1;
  # DEBUG BEGIN_STMT
  _29 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _29)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _30 = IntDataPtr->trigger;
  _31 = valueChanged | _30;
  IntDataPtr->trigger = _31;
  return;

}


Com_EB_Write_64_SX_EL_EUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_EOC_E1 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 32;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_EUB_EOC_E1 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_EL_EUB_EOC_E1 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  return;

}


Com_EB_Write_32_SX_EL_EUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = (unsigned int) _16;
  _18 = _17 & 7;
  _19 = 1 << _18;
  _20 = (unsigned char) _19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = _21 / 8;
  _23 = (sizetype) _22;
  _24 = dataPtr + _23;
  _25 = _15 | _20;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = (sizetype) pos;
  _27 = dataPtr + _26;
  _28 = *_27;
  _29 = (sizetype) pos;
  _30 = dataPtr + _29;
  _31 = *_30;
  _32 = (unsigned char) mask;
  _33 = ~_32;
  _34 = _31 & _33;
  _35 = (unsigned char) mask;
  _36 = putvalue & _35;
  _37 = _34 | _36;
  if (_28 != _37)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = *_39;
  _41 = (unsigned char) mask;
  _42 = ~_41;
  _43 = _40 & _42;
  _44 = (unsigned char) mask;
  _45 = putvalue & _44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = _43 | _45;
  *_47 = _48;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _49 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _50 = (unsigned char) _49;
  tmp_val = _50 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.48_51 = (unsigned short) pos;
  _52 = pos.48_51 + 1;
  pos = (sint16) _52;
  # DEBUG BEGIN_STMT
  _53 = (int) space;
  Val = Val >> _53;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _54 = (sizetype) pos;
  _55 = dataPtr + _54;
  _56 = *_55;
  _57 = (unsigned char) Val;
  if (_56 != _57)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _58 = (sizetype) pos;
  _59 = dataPtr + _58;
  _60 = (unsigned char) Val;
  *_59 = _60;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.49_61 = (unsigned char) ssize;
  _62 = ssize.49_61 + 248;
  ssize = (sint8) _62;
  # DEBUG BEGIN_STMT
  pos.50_63 = (unsigned short) pos;
  _64 = pos.50_63 + 1;
  pos = (sint16) _64;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _65 = 8 - ssize_hlp;
  _66 = (int) _65;
  _67 = 255 >> _66;
  mask_u8 = (uint8) _67;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _68 = (sizetype) pos;
  _69 = dataPtr + _68;
  _70 = *_69;
  _71 = (sizetype) pos;
  _72 = dataPtr + _71;
  _73 = *_72;
  _74 = (unsigned char) mask;
  _75 = ~_74;
  _76 = _73 & _75;
  _77 = (unsigned char) Val;
  _78 = (unsigned char) mask;
  _79 = _77 & _78;
  _80 = _76 | _79;
  if (_70 != _80)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _81 = (sizetype) pos;
  _82 = dataPtr + _81;
  _83 = *_82;
  _84 = (unsigned char) mask;
  _85 = ~_84;
  _86 = _83 & _85;
  _87 = (unsigned char) Val;
  _88 = (unsigned char) mask;
  _89 = _87 & _88;
  _90 = (sizetype) pos;
  _91 = dataPtr + _90;
  _92 = _86 | _89;
  *_91 = _92;

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _93 = IntDataPtr->trigger;
  _94 = valueChanged | _93;
  IntDataPtr->trigger = _94;
  return;

}


Com_EB_Write_16_SX_EL_EUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _10 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _11 = _10 / 8;
  _12 = (sizetype) _11;
  _13 = dataPtr + _12;
  _14 = *_13;
  _15 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _16 = (unsigned int) _15;
  _17 = _16 & 7;
  _18 = 1 << _17;
  _19 = (unsigned char) _18;
  _20 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _21 = _20 / 8;
  _22 = (sizetype) _21;
  _23 = dataPtr + _22;
  _24 = _14 | _19;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = *_26;
  _28 = (sizetype) pos;
  _29 = dataPtr + _28;
  _30 = *_29;
  _31 = (unsigned char) mask;
  _32 = ~_31;
  _33 = _30 & _32;
  _34 = (unsigned char) Val;
  _35 = (unsigned char) mask;
  _36 = _34 & _35;
  _37 = _33 | _36;
  if (_27 != _37)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = *_39;
  _41 = (unsigned char) mask;
  _42 = ~_41;
  _43 = _40 & _42;
  _44 = (unsigned char) Val;
  _45 = (unsigned char) mask;
  _46 = _44 & _45;
  _47 = (sizetype) pos;
  _48 = dataPtr + _47;
  _49 = _43 | _46;
  *_48 = _49;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.51_50 = (unsigned short) pos;
  _51 = pos.51_50 + 1;
  pos = (sint16) _51;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _52 = (sizetype) pos;
  _53 = dataPtr + _52;
  _54 = *_53;
  _55 = (sizetype) pos;
  _56 = dataPtr + _55;
  _57 = *_56;
  _58 = (unsigned char) mask;
  _59 = ~_58;
  _60 = _57 & _59;
  _61 = (unsigned char) Val;
  _62 = (unsigned char) mask;
  _63 = _61 & _62;
  _64 = _60 | _63;
  if (_54 != _64)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _65 = (sizetype) pos;
  _66 = dataPtr + _65;
  _67 = *_66;
  _68 = (unsigned char) mask;
  _69 = ~_68;
  _70 = _67 & _69;
  _71 = (unsigned char) Val;
  _72 = (unsigned char) mask;
  _73 = _71 & _72;
  _74 = (sizetype) pos;
  _75 = dataPtr + _74;
  _76 = _70 | _73;
  *_75 = _76;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _77 = IntDataPtr->trigger;
  _78 = valueChanged | _77;
  IntDataPtr->trigger = _78;
  return;

}


Com_EB_Write_08_SX_EL_EUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = _16 / 8;
  _18 = (sizetype) _17;
  _19 = dataPtr + _18;
  _20 = *_19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = (unsigned int) _21;
  _23 = _22 & 7;
  _24 = 1 << _23;
  _25 = (unsigned char) _24;
  _26 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _27 = _26 / 8;
  _28 = (sizetype) _27;
  _29 = dataPtr + _28;
  _30 = _20 | _25;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = *_32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = *_35;
  _37 = (unsigned char) mask;
  _38 = ~_37;
  _39 = _36 & _38;
  _40 = (unsigned char) Val;
  _41 = (unsigned char) mask;
  _42 = _40 & _41;
  _43 = _39 | _42;
  if (_33 != _43)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _44 = (sizetype) pos;
  _45 = dataPtr + _44;
  _46 = *_45;
  _47 = (unsigned char) mask;
  _48 = ~_47;
  _49 = _46 & _48;
  _50 = (unsigned char) Val;
  _51 = (unsigned char) mask;
  _52 = _50 & _51;
  _53 = (sizetype) pos;
  _54 = dataPtr + _53;
  _55 = _49 | _52;
  *_54 = _55;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.52_56 = (unsigned short) pos;
  _57 = pos.52_56 + 1;
  pos = (sint16) _57;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _58 = (sizetype) pos;
  _59 = dataPtr + _58;
  _60 = *_59;
  _61 = (sizetype) pos;
  _62 = dataPtr + _61;
  _63 = *_62;
  _64 = (unsigned char) mask;
  _65 = ~_64;
  _66 = _63 & _65;
  _67 = (unsigned char) Val;
  _68 = (unsigned char) mask;
  _69 = _67 & _68;
  _70 = _66 | _69;
  if (_60 != _70)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _71 = (sizetype) pos;
  _72 = dataPtr + _71;
  _73 = *_72;
  _74 = (unsigned char) mask;
  _75 = ~_74;
  _76 = _73 & _75;
  _77 = (unsigned char) Val;
  _78 = (unsigned char) mask;
  _79 = _77 & _78;
  _80 = (sizetype) pos;
  _81 = dataPtr + _80;
  _82 = _76 | _79;
  *_81 = _82;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _83 = IntDataPtr->trigger;
  _84 = valueChanged | _83;
  IntDataPtr->trigger = _84;
  return;

}


Com_EB_Write_AY_S0_EL_EUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _2 = _1 / 8;
  _3 = (sizetype) _2;
  _4 = dataPtr + _3;
  _5 = *_4;
  _6 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _7 = (unsigned int) _6;
  _8 = _7 & 7;
  _9 = 1 << _8;
  _10 = (unsigned char) _9;
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = _5 | _10;
  *_14 = _15;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _17 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _18 = _16 + _17;
  _19 = _18 - ii;
  pos = _19 + 65535;
  # DEBUG BEGIN_STMT
  _20 = (sizetype) ii;
  _21 = U8Ptr + _20;
  _22 = (sizetype) pos;
  _23 = dataPtr + _22;
  _24 = *_21;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  ii.53_25 = ii;
  ii = ii.53_25 + 1;
  # DEBUG BEGIN_STMT
  _26 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _26)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_64_SX_EL_EUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_DOC_E2 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 65504;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_EUB_DOC_E2 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_EL_EUB_DOC_E2 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_32_SX_EL_EUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = (unsigned int) _16;
  _18 = _17 & 7;
  _19 = 1 << _18;
  _20 = (unsigned char) _19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = _21 / 8;
  _23 = (sizetype) _22;
  _24 = dataPtr + _23;
  _25 = _15 | _20;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  _26 = (sizetype) pos;
  _27 = dataPtr + _26;
  _28 = *_27;
  _29 = (unsigned char) mask;
  _30 = ~_29;
  _31 = _28 & _30;
  _32 = (unsigned char) mask;
  _33 = putvalue & _32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = _31 | _33;
  *_35 = _36;
  # DEBUG BEGIN_STMT
  _37 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _38 = (unsigned char) _37;
  tmp_val = _38 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.54_39 = (unsigned short) pos;
  _40 = pos.54_39 + 65535;
  pos = (sint16) _40;
  # DEBUG BEGIN_STMT
  _41 = (int) space;
  Val = Val >> _41;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _42 = (sizetype) pos;
  _43 = dataPtr + _42;
  _44 = (unsigned char) Val;
  *_43 = _44;
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.55_45 = (unsigned char) ssize;
  _46 = ssize.55_45 + 248;
  ssize = (sint8) _46;
  # DEBUG BEGIN_STMT
  pos.56_47 = (unsigned short) pos;
  _48 = pos.56_47 + 65535;
  pos = (sint16) _48;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _49 = 8 - ssize_hlp;
  _50 = (int) _49;
  _51 = 255 >> _50;
  mask_u8 = (uint8) _51;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  _52 = (sizetype) pos;
  _53 = dataPtr + _52;
  _54 = *_53;
  _55 = (unsigned char) mask;
  _56 = ~_55;
  _57 = _54 & _56;
  _58 = (unsigned char) Val;
  _59 = (unsigned char) mask;
  _60 = _58 & _59;
  _61 = (sizetype) pos;
  _62 = dataPtr + _61;
  _63 = _57 | _60;
  *_62 = _63;

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_16_SX_EL_EUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _10 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _11 = _10 / 8;
  _12 = (sizetype) _11;
  _13 = dataPtr + _12;
  _14 = *_13;
  _15 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _16 = (unsigned int) _15;
  _17 = _16 & 7;
  _18 = 1 << _17;
  _19 = (unsigned char) _18;
  _20 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _21 = _20 / 8;
  _22 = (sizetype) _21;
  _23 = dataPtr + _22;
  _24 = _14 | _19;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = *_26;
  _28 = (unsigned char) mask;
  _29 = ~_28;
  _30 = _27 & _29;
  _31 = (unsigned char) Val;
  _32 = (unsigned char) mask;
  _33 = _31 & _32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = _30 | _33;
  *_35 = _36;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.57_37 = (unsigned short) pos;
  _38 = pos.57_37 + 65535;
  pos = (sint16) _38;
  # DEBUG BEGIN_STMT
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = *_40;
  _42 = (unsigned char) mask;
  _43 = ~_42;
  _44 = _41 & _43;
  _45 = (unsigned char) Val;
  _46 = (unsigned char) mask;
  _47 = _45 & _46;
  _48 = (sizetype) pos;
  _49 = dataPtr + _48;
  _50 = _44 | _47;
  *_49 = _50;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_08_SX_EL_EUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = _16 / 8;
  _18 = (sizetype) _17;
  _19 = dataPtr + _18;
  _20 = *_19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = (unsigned int) _21;
  _23 = _22 & 7;
  _24 = 1 << _23;
  _25 = (unsigned char) _24;
  _26 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _27 = _26 / 8;
  _28 = (sizetype) _27;
  _29 = dataPtr + _28;
  _30 = _20 | _25;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = *_32;
  _34 = (unsigned char) mask;
  _35 = ~_34;
  _36 = _33 & _35;
  _37 = (unsigned char) Val;
  _38 = (unsigned char) mask;
  _39 = _37 & _38;
  _40 = (sizetype) pos;
  _41 = dataPtr + _40;
  _42 = _36 | _39;
  *_41 = _42;
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.58_43 = (unsigned short) pos;
  _44 = pos.58_43 + 65535;
  pos = (sint16) _44;
  # DEBUG BEGIN_STMT
  _45 = (sizetype) pos;
  _46 = dataPtr + _45;
  _47 = *_46;
  _48 = (unsigned char) mask;
  _49 = ~_48;
  _50 = _47 & _49;
  _51 = (unsigned char) Val;
  _52 = (unsigned char) mask;
  _53 = _51 & _52;
  _54 = (sizetype) pos;
  _55 = dataPtr + _54;
  _56 = _50 | _53;
  *_55 = _56;

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_AY_S1_EL_EUB_DOC_E3 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 * DataPtr_Start;
  const uint8 * U8Ptr;
  uint32 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = (sizetype) _1;
  DataPtr_Start = dataPtr + _2;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _4 = _3 / 8;
  _5 = (sizetype) _4;
  _6 = dataPtr + _5;
  _7 = *_6;
  _8 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _9 = (unsigned int) _8;
  _10 = _9 & 7;
  _11 = 1 << _10;
  _12 = (unsigned char) _11;
  _13 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _14 = _13 / 8;
  _15 = (sizetype) _14;
  _16 = dataPtr + _15;
  _17 = _7 | _12;
  *_16 = _17;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _18 = U8Ptr + ii;
  _19 = DataPtr_Start + ii;
  _20 = *_18;
  *_19 = _20;
  # DEBUG BEGIN_STMT
  ii = ii + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _21 = IntDataPtr->arraySize;
  _22 = (long unsigned int) _21;
  if (ii < _22)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_AY_S0_EL_EUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _2 = _1 / 8;
  _3 = (sizetype) _2;
  _4 = dataPtr + _3;
  _5 = *_4;
  _6 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _7 = (unsigned int) _6;
  _8 = _7 & 7;
  _9 = 1 << _8;
  _10 = (unsigned char) _9;
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = _5 | _10;
  *_14 = _15;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  pos = ii + _16;
  # DEBUG BEGIN_STMT
  _17 = (sizetype) ii;
  _18 = U8Ptr + _17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = *_18;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  ii.59_22 = ii;
  ii = ii.59_22 + 1;
  # DEBUG BEGIN_STMT
  _23 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _23)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_64_SX_EL_EUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_DOC_E1 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 32;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_EUB_DOC_E1 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_EL_EUB_DOC_E1 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_32_SX_EL_EUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = (unsigned int) _16;
  _18 = _17 & 7;
  _19 = 1 << _18;
  _20 = (unsigned char) _19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = _21 / 8;
  _23 = (sizetype) _22;
  _24 = dataPtr + _23;
  _25 = _15 | _20;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  _26 = (sizetype) pos;
  _27 = dataPtr + _26;
  _28 = *_27;
  _29 = (unsigned char) mask;
  _30 = ~_29;
  _31 = _28 & _30;
  _32 = (unsigned char) mask;
  _33 = putvalue & _32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = _31 | _33;
  *_35 = _36;
  # DEBUG BEGIN_STMT
  _37 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _38 = (unsigned char) _37;
  tmp_val = _38 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.60_39 = (unsigned short) pos;
  _40 = pos.60_39 + 1;
  pos = (sint16) _40;
  # DEBUG BEGIN_STMT
  _41 = (int) space;
  Val = Val >> _41;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _42 = (sizetype) pos;
  _43 = dataPtr + _42;
  _44 = (unsigned char) Val;
  *_43 = _44;
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.61_45 = (unsigned char) ssize;
  _46 = ssize.61_45 + 248;
  ssize = (sint8) _46;
  # DEBUG BEGIN_STMT
  pos.62_47 = (unsigned short) pos;
  _48 = pos.62_47 + 1;
  pos = (sint16) _48;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _49 = 8 - ssize_hlp;
  _50 = (int) _49;
  _51 = 255 >> _50;
  mask_u8 = (uint8) _51;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  _52 = (sizetype) pos;
  _53 = dataPtr + _52;
  _54 = *_53;
  _55 = (unsigned char) mask;
  _56 = ~_55;
  _57 = _54 & _56;
  _58 = (unsigned char) Val;
  _59 = (unsigned char) mask;
  _60 = _58 & _59;
  _61 = (sizetype) pos;
  _62 = dataPtr + _61;
  _63 = _57 | _60;
  *_62 = _63;

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_16_SX_EL_EUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _10 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _11 = _10 / 8;
  _12 = (sizetype) _11;
  _13 = dataPtr + _12;
  _14 = *_13;
  _15 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _16 = (unsigned int) _15;
  _17 = _16 & 7;
  _18 = 1 << _17;
  _19 = (unsigned char) _18;
  _20 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _21 = _20 / 8;
  _22 = (sizetype) _21;
  _23 = dataPtr + _22;
  _24 = _14 | _19;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = *_26;
  _28 = (unsigned char) mask;
  _29 = ~_28;
  _30 = _27 & _29;
  _31 = (unsigned char) Val;
  _32 = (unsigned char) mask;
  _33 = _31 & _32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = _30 | _33;
  *_35 = _36;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.63_37 = (unsigned short) pos;
  _38 = pos.63_37 + 1;
  pos = (sint16) _38;
  # DEBUG BEGIN_STMT
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = *_40;
  _42 = (unsigned char) mask;
  _43 = ~_42;
  _44 = _41 & _43;
  _45 = (unsigned char) Val;
  _46 = (unsigned char) mask;
  _47 = _45 & _46;
  _48 = (sizetype) pos;
  _49 = dataPtr + _48;
  _50 = _44 | _47;
  *_49 = _50;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_08_SX_EL_EUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = _16 / 8;
  _18 = (sizetype) _17;
  _19 = dataPtr + _18;
  _20 = *_19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = (unsigned int) _21;
  _23 = _22 & 7;
  _24 = 1 << _23;
  _25 = (unsigned char) _24;
  _26 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _27 = _26 / 8;
  _28 = (sizetype) _27;
  _29 = dataPtr + _28;
  _30 = _20 | _25;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = *_32;
  _34 = (unsigned char) mask;
  _35 = ~_34;
  _36 = _33 & _35;
  _37 = (unsigned char) Val;
  _38 = (unsigned char) mask;
  _39 = _37 & _38;
  _40 = (sizetype) pos;
  _41 = dataPtr + _40;
  _42 = _36 | _39;
  *_41 = _42;
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.64_43 = (unsigned short) pos;
  _44 = pos.64_43 + 1;
  pos = (sint16) _44;
  # DEBUG BEGIN_STMT
  _45 = (sizetype) pos;
  _46 = dataPtr + _45;
  _47 = *_46;
  _48 = (unsigned char) mask;
  _49 = ~_48;
  _50 = _47 & _49;
  _51 = (unsigned char) Val;
  _52 = (unsigned char) mask;
  _53 = _51 & _52;
  _54 = (sizetype) pos;
  _55 = dataPtr + _54;
  _56 = _50 | _53;
  *_55 = _56;

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_AY_S0_EL_DUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _3 = _1 + _2;
  _4 = _3 - ii;
  pos = _4 + 65535;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (sizetype) pos;
  _6 = dataPtr + _5;
  _7 = *_6;
  _8 = (sizetype) ii;
  _9 = U8Ptr + _8;
  _10 = *_9;
  if (_7 != _10)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = (sizetype) ii;
  _12 = U8Ptr + _11;
  _13 = (sizetype) pos;
  _14 = dataPtr + _13;
  _15 = *_12;
  *_14 = _15;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii.65_16 = ii;
  ii = ii.65_16 + 1;
  # DEBUG BEGIN_STMT
  _17 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _17)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _18 = IntDataPtr->trigger;
  _19 = valueChanged | _18;
  IntDataPtr->trigger = _19;
  return;

}


Com_EB_Write_64_SX_EL_DUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_EOC_E2 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 65504;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_DUB_EOC_E2 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_EL_DUB_EOC_E2 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  return;

}


Com_EB_Write_32_SX_EL_DUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = (sizetype) pos;
  _12 = dataPtr + _11;
  _13 = *_12;
  _14 = (sizetype) pos;
  _15 = dataPtr + _14;
  _16 = *_15;
  _17 = (unsigned char) mask;
  _18 = ~_17;
  _19 = _16 & _18;
  _20 = (unsigned char) mask;
  _21 = putvalue & _20;
  _22 = _19 | _21;
  if (_13 != _22)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  _26 = (unsigned char) mask;
  _27 = ~_26;
  _28 = _25 & _27;
  _29 = (unsigned char) mask;
  _30 = putvalue & _29;
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = _28 | _30;
  *_32 = _33;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _34 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _35 = (unsigned char) _34;
  tmp_val = _35 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.66_36 = (unsigned short) pos;
  _37 = pos.66_36 + 65535;
  pos = (sint16) _37;
  # DEBUG BEGIN_STMT
  _38 = (int) space;
  Val = Val >> _38;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = *_40;
  _42 = (unsigned char) Val;
  if (_41 != _42)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _43 = (sizetype) pos;
  _44 = dataPtr + _43;
  _45 = (unsigned char) Val;
  *_44 = _45;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.67_46 = (unsigned char) ssize;
  _47 = ssize.67_46 + 248;
  ssize = (sint8) _47;
  # DEBUG BEGIN_STMT
  pos.68_48 = (unsigned short) pos;
  _49 = pos.68_48 + 65535;
  pos = (sint16) _49;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _50 = 8 - ssize_hlp;
  _51 = (int) _50;
  _52 = 255 >> _51;
  mask_u8 = (uint8) _52;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _53 = (sizetype) pos;
  _54 = dataPtr + _53;
  _55 = *_54;
  _56 = (sizetype) pos;
  _57 = dataPtr + _56;
  _58 = *_57;
  _59 = (unsigned char) mask;
  _60 = ~_59;
  _61 = _58 & _60;
  _62 = (unsigned char) Val;
  _63 = (unsigned char) mask;
  _64 = _62 & _63;
  _65 = _61 | _64;
  if (_55 != _65)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _66 = (sizetype) pos;
  _67 = dataPtr + _66;
  _68 = *_67;
  _69 = (unsigned char) mask;
  _70 = ~_69;
  _71 = _68 & _70;
  _72 = (unsigned char) Val;
  _73 = (unsigned char) mask;
  _74 = _72 & _73;
  _75 = (sizetype) pos;
  _76 = dataPtr + _75;
  _77 = _71 | _74;
  *_76 = _77;

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _78 = IntDataPtr->trigger;
  _79 = valueChanged | _78;
  IntDataPtr->trigger = _79;
  return;

}


Com_EB_Write_16_SX_EL_DUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = (sizetype) pos;
  _11 = dataPtr + _10;
  _12 = *_11;
  _13 = (sizetype) pos;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = (unsigned char) mask;
  _17 = ~_16;
  _18 = _15 & _17;
  _19 = (unsigned char) Val;
  _20 = (unsigned char) mask;
  _21 = _19 & _20;
  _22 = _18 | _21;
  if (_12 != _22)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  _26 = (unsigned char) mask;
  _27 = ~_26;
  _28 = _25 & _27;
  _29 = (unsigned char) Val;
  _30 = (unsigned char) mask;
  _31 = _29 & _30;
  _32 = (sizetype) pos;
  _33 = dataPtr + _32;
  _34 = _28 | _31;
  *_33 = _34;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.69_35 = (unsigned short) pos;
  _36 = pos.69_35 + 65535;
  pos = (sint16) _36;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _37 = (sizetype) pos;
  _38 = dataPtr + _37;
  _39 = *_38;
  _40 = (sizetype) pos;
  _41 = dataPtr + _40;
  _42 = *_41;
  _43 = (unsigned char) mask;
  _44 = ~_43;
  _45 = _42 & _44;
  _46 = (unsigned char) Val;
  _47 = (unsigned char) mask;
  _48 = _46 & _47;
  _49 = _45 | _48;
  if (_39 != _49)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _50 = (sizetype) pos;
  _51 = dataPtr + _50;
  _52 = *_51;
  _53 = (unsigned char) mask;
  _54 = ~_53;
  _55 = _52 & _54;
  _56 = (unsigned char) Val;
  _57 = (unsigned char) mask;
  _58 = _56 & _57;
  _59 = (sizetype) pos;
  _60 = dataPtr + _59;
  _61 = _55 | _58;
  *_60 = _61;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _62 = IntDataPtr->trigger;
  _63 = valueChanged | _62;
  IntDataPtr->trigger = _63;
  return;

}


Com_EB_Write_08_SX_EL_DUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = (sizetype) pos;
  _17 = dataPtr + _16;
  _18 = *_17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = *_20;
  _22 = (unsigned char) mask;
  _23 = ~_22;
  _24 = _21 & _23;
  _25 = (unsigned char) Val;
  _26 = (unsigned char) mask;
  _27 = _25 & _26;
  _28 = _24 | _27;
  if (_18 != _28)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _29 = (sizetype) pos;
  _30 = dataPtr + _29;
  _31 = *_30;
  _32 = (unsigned char) mask;
  _33 = ~_32;
  _34 = _31 & _33;
  _35 = (unsigned char) Val;
  _36 = (unsigned char) mask;
  _37 = _35 & _36;
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = _34 | _37;
  *_39 = _40;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.70_41 = (unsigned short) pos;
  _42 = pos.70_41 + 65535;
  pos = (sint16) _42;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _43 = (sizetype) pos;
  _44 = dataPtr + _43;
  _45 = *_44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = *_47;
  _49 = (unsigned char) mask;
  _50 = ~_49;
  _51 = _48 & _50;
  _52 = (unsigned char) Val;
  _53 = (unsigned char) mask;
  _54 = _52 & _53;
  _55 = _51 | _54;
  if (_45 != _55)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _56 = (sizetype) pos;
  _57 = dataPtr + _56;
  _58 = *_57;
  _59 = (unsigned char) mask;
  _60 = ~_59;
  _61 = _58 & _60;
  _62 = (unsigned char) Val;
  _63 = (unsigned char) mask;
  _64 = _62 & _63;
  _65 = (sizetype) pos;
  _66 = dataPtr + _65;
  _67 = _61 | _64;
  *_66 = _67;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _68 = IntDataPtr->trigger;
  _69 = valueChanged | _68;
  IntDataPtr->trigger = _69;
  return;

}


Com_EB_Write_AY_S1_EL_DUB_EOC_E3 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 * DataPtr_Start;
  const uint8 * U8Ptr;
  uint32 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = (sizetype) _1;
  DataPtr_Start = dataPtr + _2;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = DataPtr_Start + ii;
  _4 = *_3;
  _5 = U8Ptr + ii;
  _6 = *_5;
  if (_4 != _6)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _7 = U8Ptr + ii;
  _8 = DataPtr_Start + ii;
  _9 = *_7;
  *_8 = _9;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii = ii + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = IntDataPtr->arraySize;
  _11 = (long unsigned int) _10;
  if (ii < _11)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _12 = IntDataPtr->trigger;
  _13 = valueChanged | _12;
  IntDataPtr->trigger = _13;
  return;

}


Com_EB_Write_AY_S0_EL_DUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  pos = ii + _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = (sizetype) pos;
  _3 = dataPtr + _2;
  _4 = *_3;
  _5 = (sizetype) ii;
  _6 = U8Ptr + _5;
  _7 = *_6;
  if (_4 != _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _8 = (sizetype) ii;
  _9 = U8Ptr + _8;
  _10 = (sizetype) pos;
  _11 = dataPtr + _10;
  _12 = *_9;
  *_11 = _12;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii.71_13 = ii;
  ii = ii.71_13 + 1;
  # DEBUG BEGIN_STMT
  _14 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _14)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _15 = IntDataPtr->trigger;
  _16 = valueChanged | _15;
  IntDataPtr->trigger = _16;
  return;

}


Com_EB_Write_64_SX_EL_DUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_EOC_E1 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 32;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_DUB_EOC_E1 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_EL_DUB_EOC_E1 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  return;

}


Com_EB_Write_32_SX_EL_DUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = (sizetype) pos;
  _12 = dataPtr + _11;
  _13 = *_12;
  _14 = (sizetype) pos;
  _15 = dataPtr + _14;
  _16 = *_15;
  _17 = (unsigned char) mask;
  _18 = ~_17;
  _19 = _16 & _18;
  _20 = (unsigned char) mask;
  _21 = putvalue & _20;
  _22 = _19 | _21;
  if (_13 != _22)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  _26 = (unsigned char) mask;
  _27 = ~_26;
  _28 = _25 & _27;
  _29 = (unsigned char) mask;
  _30 = putvalue & _29;
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = _28 | _30;
  *_32 = _33;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _34 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _35 = (unsigned char) _34;
  tmp_val = _35 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.72_36 = (unsigned short) pos;
  _37 = pos.72_36 + 1;
  pos = (sint16) _37;
  # DEBUG BEGIN_STMT
  _38 = (int) space;
  Val = Val >> _38;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = *_40;
  _42 = (unsigned char) Val;
  if (_41 != _42)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _43 = (sizetype) pos;
  _44 = dataPtr + _43;
  _45 = (unsigned char) Val;
  *_44 = _45;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.73_46 = (unsigned char) ssize;
  _47 = ssize.73_46 + 248;
  ssize = (sint8) _47;
  # DEBUG BEGIN_STMT
  pos.74_48 = (unsigned short) pos;
  _49 = pos.74_48 + 1;
  pos = (sint16) _49;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _50 = 8 - ssize_hlp;
  _51 = (int) _50;
  _52 = 255 >> _51;
  mask_u8 = (uint8) _52;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _53 = (sizetype) pos;
  _54 = dataPtr + _53;
  _55 = *_54;
  _56 = (sizetype) pos;
  _57 = dataPtr + _56;
  _58 = *_57;
  _59 = (unsigned char) mask;
  _60 = ~_59;
  _61 = _58 & _60;
  _62 = (unsigned char) Val;
  _63 = (unsigned char) mask;
  _64 = _62 & _63;
  _65 = _61 | _64;
  if (_55 != _65)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _66 = (sizetype) pos;
  _67 = dataPtr + _66;
  _68 = *_67;
  _69 = (unsigned char) mask;
  _70 = ~_69;
  _71 = _68 & _70;
  _72 = (unsigned char) Val;
  _73 = (unsigned char) mask;
  _74 = _72 & _73;
  _75 = (sizetype) pos;
  _76 = dataPtr + _75;
  _77 = _71 | _74;
  *_76 = _77;

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _78 = IntDataPtr->trigger;
  _79 = valueChanged | _78;
  IntDataPtr->trigger = _79;
  return;

}


Com_EB_Write_16_SX_EL_DUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = (sizetype) pos;
  _11 = dataPtr + _10;
  _12 = *_11;
  _13 = (sizetype) pos;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = (unsigned char) mask;
  _17 = ~_16;
  _18 = _15 & _17;
  _19 = (unsigned char) Val;
  _20 = (unsigned char) mask;
  _21 = _19 & _20;
  _22 = _18 | _21;
  if (_12 != _22)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  _26 = (unsigned char) mask;
  _27 = ~_26;
  _28 = _25 & _27;
  _29 = (unsigned char) Val;
  _30 = (unsigned char) mask;
  _31 = _29 & _30;
  _32 = (sizetype) pos;
  _33 = dataPtr + _32;
  _34 = _28 | _31;
  *_33 = _34;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.75_35 = (unsigned short) pos;
  _36 = pos.75_35 + 1;
  pos = (sint16) _36;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _37 = (sizetype) pos;
  _38 = dataPtr + _37;
  _39 = *_38;
  _40 = (sizetype) pos;
  _41 = dataPtr + _40;
  _42 = *_41;
  _43 = (unsigned char) mask;
  _44 = ~_43;
  _45 = _42 & _44;
  _46 = (unsigned char) Val;
  _47 = (unsigned char) mask;
  _48 = _46 & _47;
  _49 = _45 | _48;
  if (_39 != _49)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _50 = (sizetype) pos;
  _51 = dataPtr + _50;
  _52 = *_51;
  _53 = (unsigned char) mask;
  _54 = ~_53;
  _55 = _52 & _54;
  _56 = (unsigned char) Val;
  _57 = (unsigned char) mask;
  _58 = _56 & _57;
  _59 = (sizetype) pos;
  _60 = dataPtr + _59;
  _61 = _55 | _58;
  *_60 = _61;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _62 = IntDataPtr->trigger;
  _63 = valueChanged | _62;
  IntDataPtr->trigger = _63;
  return;

}


Com_EB_Write_08_SX_EL_DUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = (sizetype) pos;
  _17 = dataPtr + _16;
  _18 = *_17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = *_20;
  _22 = (unsigned char) mask;
  _23 = ~_22;
  _24 = _21 & _23;
  _25 = (unsigned char) Val;
  _26 = (unsigned char) mask;
  _27 = _25 & _26;
  _28 = _24 | _27;
  if (_18 != _28)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _29 = (sizetype) pos;
  _30 = dataPtr + _29;
  _31 = *_30;
  _32 = (unsigned char) mask;
  _33 = ~_32;
  _34 = _31 & _33;
  _35 = (unsigned char) Val;
  _36 = (unsigned char) mask;
  _37 = _35 & _36;
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = _34 | _37;
  *_39 = _40;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.76_41 = (unsigned short) pos;
  _42 = pos.76_41 + 1;
  pos = (sint16) _42;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _43 = (sizetype) pos;
  _44 = dataPtr + _43;
  _45 = *_44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = *_47;
  _49 = (unsigned char) mask;
  _50 = ~_49;
  _51 = _48 & _50;
  _52 = (unsigned char) Val;
  _53 = (unsigned char) mask;
  _54 = _52 & _53;
  _55 = _51 | _54;
  if (_45 != _55)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _56 = (sizetype) pos;
  _57 = dataPtr + _56;
  _58 = *_57;
  _59 = (unsigned char) mask;
  _60 = ~_59;
  _61 = _58 & _60;
  _62 = (unsigned char) Val;
  _63 = (unsigned char) mask;
  _64 = _62 & _63;
  _65 = (sizetype) pos;
  _66 = dataPtr + _65;
  _67 = _61 | _64;
  *_66 = _67;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _68 = IntDataPtr->trigger;
  _69 = valueChanged | _68;
  IntDataPtr->trigger = _69;
  return;

}


Com_EB_Write_AY_S0_EL_DUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _3 = _1 + _2;
  _4 = _3 - ii;
  pos = _4 + 65535;
  # DEBUG BEGIN_STMT
  _5 = (sizetype) ii;
  _6 = U8Ptr + _5;
  _7 = (sizetype) pos;
  _8 = dataPtr + _7;
  _9 = *_6;
  *_8 = _9;
  # DEBUG BEGIN_STMT
  ii.77_10 = ii;
  ii = ii.77_10 + 1;
  # DEBUG BEGIN_STMT
  _11 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _11)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_64_SX_EL_DUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_DOC_E2 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 65504;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_DUB_DOC_E2 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_EL_DUB_DOC_E2 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_32_SX_EL_DUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _11 = (sizetype) pos;
  _12 = dataPtr + _11;
  _13 = *_12;
  _14 = (unsigned char) mask;
  _15 = ~_14;
  _16 = _13 & _15;
  _17 = (unsigned char) mask;
  _18 = putvalue & _17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = _16 | _18;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  _22 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _23 = (unsigned char) _22;
  tmp_val = _23 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.78_24 = (unsigned short) pos;
  _25 = pos.78_24 + 65535;
  pos = (sint16) _25;
  # DEBUG BEGIN_STMT
  _26 = (int) space;
  Val = Val >> _26;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _27 = (sizetype) pos;
  _28 = dataPtr + _27;
  _29 = (unsigned char) Val;
  *_28 = _29;
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.79_30 = (unsigned char) ssize;
  _31 = ssize.79_30 + 248;
  ssize = (sint8) _31;
  # DEBUG BEGIN_STMT
  pos.80_32 = (unsigned short) pos;
  _33 = pos.80_32 + 65535;
  pos = (sint16) _33;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _34 = 8 - ssize_hlp;
  _35 = (int) _34;
  _36 = 255 >> _35;
  mask_u8 = (uint8) _36;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  _37 = (sizetype) pos;
  _38 = dataPtr + _37;
  _39 = *_38;
  _40 = (unsigned char) mask;
  _41 = ~_40;
  _42 = _39 & _41;
  _43 = (unsigned char) Val;
  _44 = (unsigned char) mask;
  _45 = _43 & _44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = _42 | _45;
  *_47 = _48;

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_16_SX_EL_DUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _10 = (sizetype) pos;
  _11 = dataPtr + _10;
  _12 = *_11;
  _13 = (unsigned char) mask;
  _14 = ~_13;
  _15 = _12 & _14;
  _16 = (unsigned char) Val;
  _17 = (unsigned char) mask;
  _18 = _16 & _17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = _15 | _18;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.81_22 = (unsigned short) pos;
  _23 = pos.81_22 + 65535;
  pos = (sint16) _23;
  # DEBUG BEGIN_STMT
  _24 = (sizetype) pos;
  _25 = dataPtr + _24;
  _26 = *_25;
  _27 = (unsigned char) mask;
  _28 = ~_27;
  _29 = _26 & _28;
  _30 = (unsigned char) Val;
  _31 = (unsigned char) mask;
  _32 = _30 & _31;
  _33 = (sizetype) pos;
  _34 = dataPtr + _33;
  _35 = _29 | _32;
  *_34 = _35;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_08_SX_EL_DUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _16 = (sizetype) pos;
  _17 = dataPtr + _16;
  _18 = *_17;
  _19 = (unsigned char) mask;
  _20 = ~_19;
  _21 = _18 & _20;
  _22 = (unsigned char) Val;
  _23 = (unsigned char) mask;
  _24 = _22 & _23;
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = _21 | _24;
  *_26 = _27;
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.82_28 = (unsigned short) pos;
  _29 = pos.82_28 + 65535;
  pos = (sint16) _29;
  # DEBUG BEGIN_STMT
  _30 = (sizetype) pos;
  _31 = dataPtr + _30;
  _32 = *_31;
  _33 = (unsigned char) mask;
  _34 = ~_33;
  _35 = _32 & _34;
  _36 = (unsigned char) Val;
  _37 = (unsigned char) mask;
  _38 = _36 & _37;
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = _35 | _38;
  *_40 = _41;

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_AY_S1_EL_DUB_DOC_E3 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 * DataPtr_Start;
  const uint8 * U8Ptr;
  uint32 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = (sizetype) _1;
  DataPtr_Start = dataPtr + _2;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = U8Ptr + ii;
  _4 = DataPtr_Start + ii;
  _5 = *_3;
  *_4 = _5;
  # DEBUG BEGIN_STMT
  ii = ii + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = IntDataPtr->arraySize;
  _7 = (long unsigned int) _6;
  if (ii < _7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_AY_S0_EL_DUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  pos = ii + _1;
  # DEBUG BEGIN_STMT
  _2 = (sizetype) ii;
  _3 = U8Ptr + _2;
  _4 = (sizetype) pos;
  _5 = dataPtr + _4;
  _6 = *_3;
  *_5 = _6;
  # DEBUG BEGIN_STMT
  ii.83_7 = ii;
  ii = ii.83_7 + 1;
  # DEBUG BEGIN_STMT
  _8 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_64_SX_EL_DUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_DOC_E1 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 32;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_DUB_DOC_E1 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_EL_DUB_DOC_E1 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_32_SX_EL_DUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _11 = (sizetype) pos;
  _12 = dataPtr + _11;
  _13 = *_12;
  _14 = (unsigned char) mask;
  _15 = ~_14;
  _16 = _13 & _15;
  _17 = (unsigned char) mask;
  _18 = putvalue & _17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = _16 | _18;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  _22 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _23 = (unsigned char) _22;
  tmp_val = _23 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.84_24 = (unsigned short) pos;
  _25 = pos.84_24 + 1;
  pos = (sint16) _25;
  # DEBUG BEGIN_STMT
  _26 = (int) space;
  Val = Val >> _26;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _27 = (sizetype) pos;
  _28 = dataPtr + _27;
  _29 = (unsigned char) Val;
  *_28 = _29;
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.85_30 = (unsigned char) ssize;
  _31 = ssize.85_30 + 248;
  ssize = (sint8) _31;
  # DEBUG BEGIN_STMT
  pos.86_32 = (unsigned short) pos;
  _33 = pos.86_32 + 1;
  pos = (sint16) _33;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _34 = 8 - ssize_hlp;
  _35 = (int) _34;
  _36 = 255 >> _35;
  mask_u8 = (uint8) _36;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  _37 = (sizetype) pos;
  _38 = dataPtr + _37;
  _39 = *_38;
  _40 = (unsigned char) mask;
  _41 = ~_40;
  _42 = _39 & _41;
  _43 = (unsigned char) Val;
  _44 = (unsigned char) mask;
  _45 = _43 & _44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = _42 | _45;
  *_47 = _48;

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_16_SX_EL_DUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _10 = (sizetype) pos;
  _11 = dataPtr + _10;
  _12 = *_11;
  _13 = (unsigned char) mask;
  _14 = ~_13;
  _15 = _12 & _14;
  _16 = (unsigned char) Val;
  _17 = (unsigned char) mask;
  _18 = _16 & _17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = _15 | _18;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.87_22 = (unsigned short) pos;
  _23 = pos.87_22 + 1;
  pos = (sint16) _23;
  # DEBUG BEGIN_STMT
  _24 = (sizetype) pos;
  _25 = dataPtr + _24;
  _26 = *_25;
  _27 = (unsigned char) mask;
  _28 = ~_27;
  _29 = _26 & _28;
  _30 = (unsigned char) Val;
  _31 = (unsigned char) mask;
  _32 = _30 & _31;
  _33 = (sizetype) pos;
  _34 = dataPtr + _33;
  _35 = _29 | _32;
  *_34 = _35;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_08_SX_EL_DUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _16 = (sizetype) pos;
  _17 = dataPtr + _16;
  _18 = *_17;
  _19 = (unsigned char) mask;
  _20 = ~_19;
  _21 = _18 & _20;
  _22 = (unsigned char) Val;
  _23 = (unsigned char) mask;
  _24 = _22 & _23;
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = _21 | _24;
  *_26 = _27;
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.88_28 = (unsigned short) pos;
  _29 = pos.88_28 + 1;
  pos = (sint16) _29;
  # DEBUG BEGIN_STMT
  _30 = (sizetype) pos;
  _31 = dataPtr + _30;
  _32 = *_31;
  _33 = (unsigned char) mask;
  _34 = ~_33;
  _35 = _32 & _34;
  _36 = (unsigned char) Val;
  _37 = (unsigned char) mask;
  _38 = _36 & _37;
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = _35 | _38;
  *_40 = _41;

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_AY_S0_DL_EUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _2 = _1 / 8;
  _3 = (sizetype) _2;
  _4 = dataPtr + _3;
  _5 = *_4;
  _6 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _7 = (unsigned int) _6;
  _8 = _7 & 7;
  _9 = 1 << _8;
  _10 = (unsigned char) _9;
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = _5 | _10;
  *_14 = _15;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _17 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _18 = _16 + _17;
  _19 = _18 - ii;
  pos = _19 + 65535;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _20 = (sizetype) pos;
  _21 = dataPtr + _20;
  _22 = *_21;
  _23 = (sizetype) ii;
  _24 = U8Ptr + _23;
  _25 = *_24;
  if (_22 != _25)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = (sizetype) ii;
  _27 = U8Ptr + _26;
  _28 = (sizetype) pos;
  _29 = dataPtr + _28;
  _30 = *_27;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii.89_31 = ii;
  ii = ii.89_31 + 1;
  # DEBUG BEGIN_STMT
  _32 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _32)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _33 = IntDataPtr->trigger;
  _34 = valueChanged | _33;
  IntDataPtr->trigger = _34;
  return;

}


Com_EB_Write_64_SX_DL_EUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_EOC_E2 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 65504;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_EUB_EOC_E2 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_EOC_E2 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  return;

}


Com_EB_Write_32_SX_DL_EUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = (unsigned int) _16;
  _18 = _17 & 7;
  _19 = 1 << _18;
  _20 = (unsigned char) _19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = _21 / 8;
  _23 = (sizetype) _22;
  _24 = dataPtr + _23;
  _25 = _15 | _20;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = (sizetype) pos;
  _27 = dataPtr + _26;
  _28 = *_27;
  _29 = (sizetype) pos;
  _30 = dataPtr + _29;
  _31 = *_30;
  _32 = (unsigned char) mask;
  _33 = ~_32;
  _34 = _31 & _33;
  _35 = (unsigned char) mask;
  _36 = putvalue & _35;
  _37 = _34 | _36;
  if (_28 != _37)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = *_39;
  _41 = (unsigned char) mask;
  _42 = ~_41;
  _43 = _40 & _42;
  _44 = (unsigned char) mask;
  _45 = putvalue & _44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = _43 | _45;
  *_47 = _48;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _49 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _50 = (unsigned char) _49;
  tmp_val = _50 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.90_51 = (unsigned short) pos;
  _52 = pos.90_51 + 65535;
  pos = (sint16) _52;
  # DEBUG BEGIN_STMT
  _53 = (int) space;
  Val = Val >> _53;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _54 = (sizetype) pos;
  _55 = dataPtr + _54;
  _56 = *_55;
  _57 = (unsigned char) Val;
  if (_56 != _57)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _58 = (sizetype) pos;
  _59 = dataPtr + _58;
  _60 = (unsigned char) Val;
  *_59 = _60;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.91_61 = (unsigned char) ssize;
  _62 = ssize.91_61 + 248;
  ssize = (sint8) _62;
  # DEBUG BEGIN_STMT
  pos.92_63 = (unsigned short) pos;
  _64 = pos.92_63 + 65535;
  pos = (sint16) _64;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _65 = 8 - ssize_hlp;
  _66 = (int) _65;
  _67 = 255 >> _66;
  mask_u8 = (uint8) _67;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _68 = (sizetype) pos;
  _69 = dataPtr + _68;
  _70 = *_69;
  _71 = (sizetype) pos;
  _72 = dataPtr + _71;
  _73 = *_72;
  _74 = (unsigned char) mask;
  _75 = ~_74;
  _76 = _73 & _75;
  _77 = (unsigned char) Val;
  _78 = (unsigned char) mask;
  _79 = _77 & _78;
  _80 = _76 | _79;
  if (_70 != _80)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _81 = (sizetype) pos;
  _82 = dataPtr + _81;
  _83 = *_82;
  _84 = (unsigned char) mask;
  _85 = ~_84;
  _86 = _83 & _85;
  _87 = (unsigned char) Val;
  _88 = (unsigned char) mask;
  _89 = _87 & _88;
  _90 = (sizetype) pos;
  _91 = dataPtr + _90;
  _92 = _86 | _89;
  *_91 = _92;

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _93 = IntDataPtr->trigger;
  _94 = valueChanged | _93;
  IntDataPtr->trigger = _94;
  return;

}


Com_EB_Write_16_SX_DL_EUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  _10 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _11 = _10 / 8;
  _12 = (sizetype) _11;
  _13 = dataPtr + _12;
  _14 = *_13;
  _15 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _16 = (unsigned int) _15;
  _17 = _16 & 7;
  _18 = 1 << _17;
  _19 = (unsigned char) _18;
  _20 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _21 = _20 / 8;
  _22 = (sizetype) _21;
  _23 = dataPtr + _22;
  _24 = _14 | _19;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = *_26;
  _28 = (sizetype) pos;
  _29 = dataPtr + _28;
  _30 = *_29;
  _31 = (unsigned char) mask;
  _32 = ~_31;
  _33 = _30 & _32;
  _34 = (unsigned char) Val;
  _35 = (unsigned char) mask;
  _36 = _34 & _35;
  _37 = _33 | _36;
  if (_27 != _37)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = *_39;
  _41 = (unsigned char) mask;
  _42 = ~_41;
  _43 = _40 & _42;
  _44 = (unsigned char) Val;
  _45 = (unsigned char) mask;
  _46 = _44 & _45;
  _47 = (sizetype) pos;
  _48 = dataPtr + _47;
  _49 = _43 | _46;
  *_48 = _49;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.93_50 = (unsigned short) pos;
  _51 = pos.93_50 + 65535;
  pos = (sint16) _51;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _52 = (sizetype) pos;
  _53 = dataPtr + _52;
  _54 = *_53;
  _55 = (sizetype) pos;
  _56 = dataPtr + _55;
  _57 = *_56;
  _58 = (unsigned char) mask;
  _59 = ~_58;
  _60 = _57 & _59;
  _61 = (unsigned char) Val;
  _62 = (unsigned char) mask;
  _63 = _61 & _62;
  _64 = _60 | _63;
  if (_54 != _64)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _65 = (sizetype) pos;
  _66 = dataPtr + _65;
  _67 = *_66;
  _68 = (unsigned char) mask;
  _69 = ~_68;
  _70 = _67 & _69;
  _71 = (unsigned char) Val;
  _72 = (unsigned char) mask;
  _73 = _71 & _72;
  _74 = (sizetype) pos;
  _75 = dataPtr + _74;
  _76 = _70 | _73;
  *_75 = _76;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _77 = IntDataPtr->trigger;
  _78 = valueChanged | _77;
  IntDataPtr->trigger = _78;
  return;

}


Com_EB_Write_08_SX_DL_EUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = _16 / 8;
  _18 = (sizetype) _17;
  _19 = dataPtr + _18;
  _20 = *_19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = (unsigned int) _21;
  _23 = _22 & 7;
  _24 = 1 << _23;
  _25 = (unsigned char) _24;
  _26 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _27 = _26 / 8;
  _28 = (sizetype) _27;
  _29 = dataPtr + _28;
  _30 = _20 | _25;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = *_32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = *_35;
  _37 = (unsigned char) mask;
  _38 = ~_37;
  _39 = _36 & _38;
  _40 = (unsigned char) Val;
  _41 = (unsigned char) mask;
  _42 = _40 & _41;
  _43 = _39 | _42;
  if (_33 != _43)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _44 = (sizetype) pos;
  _45 = dataPtr + _44;
  _46 = *_45;
  _47 = (unsigned char) mask;
  _48 = ~_47;
  _49 = _46 & _48;
  _50 = (unsigned char) Val;
  _51 = (unsigned char) mask;
  _52 = _50 & _51;
  _53 = (sizetype) pos;
  _54 = dataPtr + _53;
  _55 = _49 | _52;
  *_54 = _55;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.94_56 = (unsigned short) pos;
  _57 = pos.94_56 + 65535;
  pos = (sint16) _57;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _58 = (sizetype) pos;
  _59 = dataPtr + _58;
  _60 = *_59;
  _61 = (sizetype) pos;
  _62 = dataPtr + _61;
  _63 = *_62;
  _64 = (unsigned char) mask;
  _65 = ~_64;
  _66 = _63 & _65;
  _67 = (unsigned char) Val;
  _68 = (unsigned char) mask;
  _69 = _67 & _68;
  _70 = _66 | _69;
  if (_60 != _70)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _71 = (sizetype) pos;
  _72 = dataPtr + _71;
  _73 = *_72;
  _74 = (unsigned char) mask;
  _75 = ~_74;
  _76 = _73 & _75;
  _77 = (unsigned char) Val;
  _78 = (unsigned char) mask;
  _79 = _77 & _78;
  _80 = (sizetype) pos;
  _81 = dataPtr + _80;
  _82 = _76 | _79;
  *_81 = _82;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _83 = IntDataPtr->trigger;
  _84 = valueChanged | _83;
  IntDataPtr->trigger = _84;
  return;

}


Com_EB_Write_AY_S1_DL_EUB_EOC_E3 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 * DataPtr_Start;
  const uint8 * U8Ptr;
  uint32 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = (sizetype) _1;
  DataPtr_Start = dataPtr + _2;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _4 = _3 / 8;
  _5 = (sizetype) _4;
  _6 = dataPtr + _5;
  _7 = *_6;
  _8 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _9 = (unsigned int) _8;
  _10 = _9 & 7;
  _11 = 1 << _10;
  _12 = (unsigned char) _11;
  _13 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _14 = _13 / 8;
  _15 = (sizetype) _14;
  _16 = dataPtr + _15;
  _17 = _7 | _12;
  *_16 = _17;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _18 = DataPtr_Start + ii;
  _19 = *_18;
  _20 = U8Ptr + ii;
  _21 = *_20;
  if (_19 != _21)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _22 = U8Ptr + ii;
  _23 = DataPtr_Start + ii;
  _24 = *_22;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii = ii + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _25 = IntDataPtr->arraySize;
  _26 = (long unsigned int) _25;
  if (ii < _26)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _27 = IntDataPtr->trigger;
  _28 = valueChanged | _27;
  IntDataPtr->trigger = _28;
  return;

}


Com_EB_Write_AY_S0_DL_EUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _2 = _1 / 8;
  _3 = (sizetype) _2;
  _4 = dataPtr + _3;
  _5 = *_4;
  _6 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _7 = (unsigned int) _6;
  _8 = _7 & 7;
  _9 = 1 << _8;
  _10 = (unsigned char) _9;
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = _5 | _10;
  *_14 = _15;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  pos = ii + _16;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _17 = (sizetype) pos;
  _18 = dataPtr + _17;
  _19 = *_18;
  _20 = (sizetype) ii;
  _21 = U8Ptr + _20;
  _22 = *_21;
  if (_19 != _22)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = (sizetype) ii;
  _24 = U8Ptr + _23;
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = *_24;
  *_26 = _27;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii.95_28 = ii;
  ii = ii.95_28 + 1;
  # DEBUG BEGIN_STMT
  _29 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _29)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _30 = IntDataPtr->trigger;
  _31 = valueChanged | _30;
  IntDataPtr->trigger = _31;
  return;

}


Com_EB_Write_64_SX_DL_EUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_EOC_E1 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 32;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_EUB_EOC_E1 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_EOC_E1 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  return;

}


Com_EB_Write_32_SX_DL_EUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = (unsigned int) _16;
  _18 = _17 & 7;
  _19 = 1 << _18;
  _20 = (unsigned char) _19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = _21 / 8;
  _23 = (sizetype) _22;
  _24 = dataPtr + _23;
  _25 = _15 | _20;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = (sizetype) pos;
  _27 = dataPtr + _26;
  _28 = *_27;
  _29 = (sizetype) pos;
  _30 = dataPtr + _29;
  _31 = *_30;
  _32 = (unsigned char) mask;
  _33 = ~_32;
  _34 = _31 & _33;
  _35 = (unsigned char) mask;
  _36 = putvalue & _35;
  _37 = _34 | _36;
  if (_28 != _37)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = *_39;
  _41 = (unsigned char) mask;
  _42 = ~_41;
  _43 = _40 & _42;
  _44 = (unsigned char) mask;
  _45 = putvalue & _44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = _43 | _45;
  *_47 = _48;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _49 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _50 = (unsigned char) _49;
  tmp_val = _50 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.96_51 = (unsigned short) pos;
  _52 = pos.96_51 + 1;
  pos = (sint16) _52;
  # DEBUG BEGIN_STMT
  _53 = (int) space;
  Val = Val >> _53;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _54 = (sizetype) pos;
  _55 = dataPtr + _54;
  _56 = *_55;
  _57 = (unsigned char) Val;
  if (_56 != _57)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _58 = (sizetype) pos;
  _59 = dataPtr + _58;
  _60 = (unsigned char) Val;
  *_59 = _60;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.97_61 = (unsigned char) ssize;
  _62 = ssize.97_61 + 248;
  ssize = (sint8) _62;
  # DEBUG BEGIN_STMT
  pos.98_63 = (unsigned short) pos;
  _64 = pos.98_63 + 1;
  pos = (sint16) _64;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _65 = 8 - ssize_hlp;
  _66 = (int) _65;
  _67 = 255 >> _66;
  mask_u8 = (uint8) _67;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _68 = (sizetype) pos;
  _69 = dataPtr + _68;
  _70 = *_69;
  _71 = (sizetype) pos;
  _72 = dataPtr + _71;
  _73 = *_72;
  _74 = (unsigned char) mask;
  _75 = ~_74;
  _76 = _73 & _75;
  _77 = (unsigned char) Val;
  _78 = (unsigned char) mask;
  _79 = _77 & _78;
  _80 = _76 | _79;
  if (_70 != _80)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _81 = (sizetype) pos;
  _82 = dataPtr + _81;
  _83 = *_82;
  _84 = (unsigned char) mask;
  _85 = ~_84;
  _86 = _83 & _85;
  _87 = (unsigned char) Val;
  _88 = (unsigned char) mask;
  _89 = _87 & _88;
  _90 = (sizetype) pos;
  _91 = dataPtr + _90;
  _92 = _86 | _89;
  *_91 = _92;

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _93 = IntDataPtr->trigger;
  _94 = valueChanged | _93;
  IntDataPtr->trigger = _94;
  return;

}


Com_EB_Write_16_SX_DL_EUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  _10 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _11 = _10 / 8;
  _12 = (sizetype) _11;
  _13 = dataPtr + _12;
  _14 = *_13;
  _15 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _16 = (unsigned int) _15;
  _17 = _16 & 7;
  _18 = 1 << _17;
  _19 = (unsigned char) _18;
  _20 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _21 = _20 / 8;
  _22 = (sizetype) _21;
  _23 = dataPtr + _22;
  _24 = _14 | _19;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = *_26;
  _28 = (sizetype) pos;
  _29 = dataPtr + _28;
  _30 = *_29;
  _31 = (unsigned char) mask;
  _32 = ~_31;
  _33 = _30 & _32;
  _34 = (unsigned char) Val;
  _35 = (unsigned char) mask;
  _36 = _34 & _35;
  _37 = _33 | _36;
  if (_27 != _37)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = *_39;
  _41 = (unsigned char) mask;
  _42 = ~_41;
  _43 = _40 & _42;
  _44 = (unsigned char) Val;
  _45 = (unsigned char) mask;
  _46 = _44 & _45;
  _47 = (sizetype) pos;
  _48 = dataPtr + _47;
  _49 = _43 | _46;
  *_48 = _49;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.99_50 = (unsigned short) pos;
  _51 = pos.99_50 + 1;
  pos = (sint16) _51;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _52 = (sizetype) pos;
  _53 = dataPtr + _52;
  _54 = *_53;
  _55 = (sizetype) pos;
  _56 = dataPtr + _55;
  _57 = *_56;
  _58 = (unsigned char) mask;
  _59 = ~_58;
  _60 = _57 & _59;
  _61 = (unsigned char) Val;
  _62 = (unsigned char) mask;
  _63 = _61 & _62;
  _64 = _60 | _63;
  if (_54 != _64)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _65 = (sizetype) pos;
  _66 = dataPtr + _65;
  _67 = *_66;
  _68 = (unsigned char) mask;
  _69 = ~_68;
  _70 = _67 & _69;
  _71 = (unsigned char) Val;
  _72 = (unsigned char) mask;
  _73 = _71 & _72;
  _74 = (sizetype) pos;
  _75 = dataPtr + _74;
  _76 = _70 | _73;
  *_75 = _76;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _77 = IntDataPtr->trigger;
  _78 = valueChanged | _77;
  IntDataPtr->trigger = _78;
  return;

}


Com_EB_Write_08_SX_DL_EUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = _16 / 8;
  _18 = (sizetype) _17;
  _19 = dataPtr + _18;
  _20 = *_19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = (unsigned int) _21;
  _23 = _22 & 7;
  _24 = 1 << _23;
  _25 = (unsigned char) _24;
  _26 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _27 = _26 / 8;
  _28 = (sizetype) _27;
  _29 = dataPtr + _28;
  _30 = _20 | _25;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = *_32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = *_35;
  _37 = (unsigned char) mask;
  _38 = ~_37;
  _39 = _36 & _38;
  _40 = (unsigned char) Val;
  _41 = (unsigned char) mask;
  _42 = _40 & _41;
  _43 = _39 | _42;
  if (_33 != _43)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _44 = (sizetype) pos;
  _45 = dataPtr + _44;
  _46 = *_45;
  _47 = (unsigned char) mask;
  _48 = ~_47;
  _49 = _46 & _48;
  _50 = (unsigned char) Val;
  _51 = (unsigned char) mask;
  _52 = _50 & _51;
  _53 = (sizetype) pos;
  _54 = dataPtr + _53;
  _55 = _49 | _52;
  *_54 = _55;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.100_56 = (unsigned short) pos;
  _57 = pos.100_56 + 1;
  pos = (sint16) _57;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _58 = (sizetype) pos;
  _59 = dataPtr + _58;
  _60 = *_59;
  _61 = (sizetype) pos;
  _62 = dataPtr + _61;
  _63 = *_62;
  _64 = (unsigned char) mask;
  _65 = ~_64;
  _66 = _63 & _65;
  _67 = (unsigned char) Val;
  _68 = (unsigned char) mask;
  _69 = _67 & _68;
  _70 = _66 | _69;
  if (_60 != _70)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _71 = (sizetype) pos;
  _72 = dataPtr + _71;
  _73 = *_72;
  _74 = (unsigned char) mask;
  _75 = ~_74;
  _76 = _73 & _75;
  _77 = (unsigned char) Val;
  _78 = (unsigned char) mask;
  _79 = _77 & _78;
  _80 = (sizetype) pos;
  _81 = dataPtr + _80;
  _82 = _76 | _79;
  *_81 = _82;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _83 = IntDataPtr->trigger;
  _84 = valueChanged | _83;
  IntDataPtr->trigger = _84;
  return;

}


Com_EB_Write_AY_S0_DL_EUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _2 = _1 / 8;
  _3 = (sizetype) _2;
  _4 = dataPtr + _3;
  _5 = *_4;
  _6 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _7 = (unsigned int) _6;
  _8 = _7 & 7;
  _9 = 1 << _8;
  _10 = (unsigned char) _9;
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = _5 | _10;
  *_14 = _15;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _17 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _18 = _16 + _17;
  _19 = _18 - ii;
  pos = _19 + 65535;
  # DEBUG BEGIN_STMT
  _20 = (sizetype) ii;
  _21 = U8Ptr + _20;
  _22 = (sizetype) pos;
  _23 = dataPtr + _22;
  _24 = *_21;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  ii.101_25 = ii;
  ii = ii.101_25 + 1;
  # DEBUG BEGIN_STMT
  _26 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _26)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_64_SX_DL_EUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_DOC_E2 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 65504;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_EUB_DOC_E2 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_DOC_E2 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  return;

}


Com_EB_Write_32_SX_DL_EUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = (unsigned int) _16;
  _18 = _17 & 7;
  _19 = 1 << _18;
  _20 = (unsigned char) _19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = _21 / 8;
  _23 = (sizetype) _22;
  _24 = dataPtr + _23;
  _25 = _15 | _20;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  _26 = (sizetype) pos;
  _27 = dataPtr + _26;
  _28 = *_27;
  _29 = (unsigned char) mask;
  _30 = ~_29;
  _31 = _28 & _30;
  _32 = (unsigned char) mask;
  _33 = putvalue & _32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = _31 | _33;
  *_35 = _36;
  # DEBUG BEGIN_STMT
  _37 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _38 = (unsigned char) _37;
  tmp_val = _38 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.102_39 = (unsigned short) pos;
  _40 = pos.102_39 + 65535;
  pos = (sint16) _40;
  # DEBUG BEGIN_STMT
  _41 = (int) space;
  Val = Val >> _41;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _42 = (sizetype) pos;
  _43 = dataPtr + _42;
  _44 = (unsigned char) Val;
  *_43 = _44;
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.103_45 = (unsigned char) ssize;
  _46 = ssize.103_45 + 248;
  ssize = (sint8) _46;
  # DEBUG BEGIN_STMT
  pos.104_47 = (unsigned short) pos;
  _48 = pos.104_47 + 65535;
  pos = (sint16) _48;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _49 = 8 - ssize_hlp;
  _50 = (int) _49;
  _51 = 255 >> _50;
  mask_u8 = (uint8) _51;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  _52 = (sizetype) pos;
  _53 = dataPtr + _52;
  _54 = *_53;
  _55 = (unsigned char) mask;
  _56 = ~_55;
  _57 = _54 & _56;
  _58 = (unsigned char) Val;
  _59 = (unsigned char) mask;
  _60 = _58 & _59;
  _61 = (sizetype) pos;
  _62 = dataPtr + _61;
  _63 = _57 | _60;
  *_62 = _63;

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_16_SX_DL_EUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  _10 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _11 = _10 / 8;
  _12 = (sizetype) _11;
  _13 = dataPtr + _12;
  _14 = *_13;
  _15 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _16 = (unsigned int) _15;
  _17 = _16 & 7;
  _18 = 1 << _17;
  _19 = (unsigned char) _18;
  _20 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _21 = _20 / 8;
  _22 = (sizetype) _21;
  _23 = dataPtr + _22;
  _24 = _14 | _19;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = *_26;
  _28 = (unsigned char) mask;
  _29 = ~_28;
  _30 = _27 & _29;
  _31 = (unsigned char) Val;
  _32 = (unsigned char) mask;
  _33 = _31 & _32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = _30 | _33;
  *_35 = _36;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.105_37 = (unsigned short) pos;
  _38 = pos.105_37 + 65535;
  pos = (sint16) _38;
  # DEBUG BEGIN_STMT
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = *_40;
  _42 = (unsigned char) mask;
  _43 = ~_42;
  _44 = _41 & _43;
  _45 = (unsigned char) Val;
  _46 = (unsigned char) mask;
  _47 = _45 & _46;
  _48 = (sizetype) pos;
  _49 = dataPtr + _48;
  _50 = _44 | _47;
  *_49 = _50;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_08_SX_DL_EUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = _16 / 8;
  _18 = (sizetype) _17;
  _19 = dataPtr + _18;
  _20 = *_19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = (unsigned int) _21;
  _23 = _22 & 7;
  _24 = 1 << _23;
  _25 = (unsigned char) _24;
  _26 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _27 = _26 / 8;
  _28 = (sizetype) _27;
  _29 = dataPtr + _28;
  _30 = _20 | _25;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = *_32;
  _34 = (unsigned char) mask;
  _35 = ~_34;
  _36 = _33 & _35;
  _37 = (unsigned char) Val;
  _38 = (unsigned char) mask;
  _39 = _37 & _38;
  _40 = (sizetype) pos;
  _41 = dataPtr + _40;
  _42 = _36 | _39;
  *_41 = _42;
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.106_43 = (unsigned short) pos;
  _44 = pos.106_43 + 65535;
  pos = (sint16) _44;
  # DEBUG BEGIN_STMT
  _45 = (sizetype) pos;
  _46 = dataPtr + _45;
  _47 = *_46;
  _48 = (unsigned char) mask;
  _49 = ~_48;
  _50 = _47 & _49;
  _51 = (unsigned char) Val;
  _52 = (unsigned char) mask;
  _53 = _51 & _52;
  _54 = (sizetype) pos;
  _55 = dataPtr + _54;
  _56 = _50 | _53;
  *_55 = _56;

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_AY_S1_DL_EUB_DOC_E3 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 * DataPtr_Start;
  const uint8 * U8Ptr;
  uint32 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = (sizetype) _1;
  DataPtr_Start = dataPtr + _2;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _4 = _3 / 8;
  _5 = (sizetype) _4;
  _6 = dataPtr + _5;
  _7 = *_6;
  _8 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _9 = (unsigned int) _8;
  _10 = _9 & 7;
  _11 = 1 << _10;
  _12 = (unsigned char) _11;
  _13 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _14 = _13 / 8;
  _15 = (sizetype) _14;
  _16 = dataPtr + _15;
  _17 = _7 | _12;
  *_16 = _17;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _18 = U8Ptr + ii;
  _19 = DataPtr_Start + ii;
  _20 = *_18;
  *_19 = _20;
  # DEBUG BEGIN_STMT
  ii = ii + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _21 = IntDataPtr->arraySize;
  _22 = (long unsigned int) _21;
  if (ii < _22)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Com_EB_Write_AY_S0_DL_EUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _2 = _1 / 8;
  _3 = (sizetype) _2;
  _4 = dataPtr + _3;
  _5 = *_4;
  _6 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _7 = (unsigned int) _6;
  _8 = _7 & 7;
  _9 = 1 << _8;
  _10 = (unsigned char) _9;
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = _5 | _10;
  *_14 = _15;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  pos = ii + _16;
  # DEBUG BEGIN_STMT
  _17 = (sizetype) ii;
  _18 = U8Ptr + _17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = *_18;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  ii.107_22 = ii;
  ii = ii.107_22 + 1;
  # DEBUG BEGIN_STMT
  _23 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _23)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_64_SX_DL_EUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_DOC_E1 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 32;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_EUB_DOC_E1 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_EUB_DOC_E1 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  return;

}


Com_EB_Write_32_SX_DL_EUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  _11 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _12 = _11 / 8;
  _13 = (sizetype) _12;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = (unsigned int) _16;
  _18 = _17 & 7;
  _19 = 1 << _18;
  _20 = (unsigned char) _19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = _21 / 8;
  _23 = (sizetype) _22;
  _24 = dataPtr + _23;
  _25 = _15 | _20;
  *_24 = _25;
  # DEBUG BEGIN_STMT
  _26 = (sizetype) pos;
  _27 = dataPtr + _26;
  _28 = *_27;
  _29 = (unsigned char) mask;
  _30 = ~_29;
  _31 = _28 & _30;
  _32 = (unsigned char) mask;
  _33 = putvalue & _32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = _31 | _33;
  *_35 = _36;
  # DEBUG BEGIN_STMT
  _37 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _38 = (unsigned char) _37;
  tmp_val = _38 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.108_39 = (unsigned short) pos;
  _40 = pos.108_39 + 1;
  pos = (sint16) _40;
  # DEBUG BEGIN_STMT
  _41 = (int) space;
  Val = Val >> _41;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _42 = (sizetype) pos;
  _43 = dataPtr + _42;
  _44 = (unsigned char) Val;
  *_43 = _44;
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.109_45 = (unsigned char) ssize;
  _46 = ssize.109_45 + 248;
  ssize = (sint8) _46;
  # DEBUG BEGIN_STMT
  pos.110_47 = (unsigned short) pos;
  _48 = pos.110_47 + 1;
  pos = (sint16) _48;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _49 = 8 - ssize_hlp;
  _50 = (int) _49;
  _51 = 255 >> _50;
  mask_u8 = (uint8) _51;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  _52 = (sizetype) pos;
  _53 = dataPtr + _52;
  _54 = *_53;
  _55 = (unsigned char) mask;
  _56 = ~_55;
  _57 = _54 & _56;
  _58 = (unsigned char) Val;
  _59 = (unsigned char) mask;
  _60 = _58 & _59;
  _61 = (sizetype) pos;
  _62 = dataPtr + _61;
  _63 = _57 | _60;
  *_62 = _63;

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_16_SX_DL_EUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  _10 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _11 = _10 / 8;
  _12 = (sizetype) _11;
  _13 = dataPtr + _12;
  _14 = *_13;
  _15 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _16 = (unsigned int) _15;
  _17 = _16 & 7;
  _18 = 1 << _17;
  _19 = (unsigned char) _18;
  _20 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _21 = _20 / 8;
  _22 = (sizetype) _21;
  _23 = dataPtr + _22;
  _24 = _14 | _19;
  *_23 = _24;
  # DEBUG BEGIN_STMT
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = *_26;
  _28 = (unsigned char) mask;
  _29 = ~_28;
  _30 = _27 & _29;
  _31 = (unsigned char) Val;
  _32 = (unsigned char) mask;
  _33 = _31 & _32;
  _34 = (sizetype) pos;
  _35 = dataPtr + _34;
  _36 = _30 | _33;
  *_35 = _36;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.111_37 = (unsigned short) pos;
  _38 = pos.111_37 + 1;
  pos = (sint16) _38;
  # DEBUG BEGIN_STMT
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = *_40;
  _42 = (unsigned char) mask;
  _43 = ~_42;
  _44 = _41 & _43;
  _45 = (unsigned char) Val;
  _46 = (unsigned char) mask;
  _47 = _45 & _46;
  _48 = (sizetype) pos;
  _49 = dataPtr + _48;
  _50 = _44 | _47;
  *_49 = _50;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_08_SX_DL_EUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  _16 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _17 = _16 / 8;
  _18 = (sizetype) _17;
  _19 = dataPtr + _18;
  _20 = *_19;
  _21 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _22 = (unsigned int) _21;
  _23 = _22 & 7;
  _24 = 1 << _23;
  _25 = (unsigned char) _24;
  _26 = Com_EB_WritePropPtr->ComUpdateBitPositionInBit;
  _27 = _26 / 8;
  _28 = (sizetype) _27;
  _29 = dataPtr + _28;
  _30 = _20 | _25;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = *_32;
  _34 = (unsigned char) mask;
  _35 = ~_34;
  _36 = _33 & _35;
  _37 = (unsigned char) Val;
  _38 = (unsigned char) mask;
  _39 = _37 & _38;
  _40 = (sizetype) pos;
  _41 = dataPtr + _40;
  _42 = _36 | _39;
  *_41 = _42;
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.112_43 = (unsigned short) pos;
  _44 = pos.112_43 + 1;
  pos = (sint16) _44;
  # DEBUG BEGIN_STMT
  _45 = (sizetype) pos;
  _46 = dataPtr + _45;
  _47 = *_46;
  _48 = (unsigned char) mask;
  _49 = ~_48;
  _50 = _47 & _49;
  _51 = (unsigned char) Val;
  _52 = (unsigned char) mask;
  _53 = _51 & _52;
  _54 = (sizetype) pos;
  _55 = dataPtr + _54;
  _56 = _50 | _53;
  *_55 = _56;

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_AY_S0_DL_DUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _3 = _1 + _2;
  _4 = _3 - ii;
  pos = _4 + 65535;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (sizetype) pos;
  _6 = dataPtr + _5;
  _7 = *_6;
  _8 = (sizetype) ii;
  _9 = U8Ptr + _8;
  _10 = *_9;
  if (_7 != _10)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = (sizetype) ii;
  _12 = U8Ptr + _11;
  _13 = (sizetype) pos;
  _14 = dataPtr + _13;
  _15 = *_12;
  *_14 = _15;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii.113_16 = ii;
  ii = ii.113_16 + 1;
  # DEBUG BEGIN_STMT
  _17 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _17)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _18 = IntDataPtr->trigger;
  _19 = valueChanged | _18;
  IntDataPtr->trigger = _19;
  return;

}


Com_EB_Write_64_SX_DL_DUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_EOC_E2 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 65504;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_DUB_EOC_E2 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_EOC_E2 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  return;

}


Com_EB_Write_32_SX_DL_DUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = (sizetype) pos;
  _12 = dataPtr + _11;
  _13 = *_12;
  _14 = (sizetype) pos;
  _15 = dataPtr + _14;
  _16 = *_15;
  _17 = (unsigned char) mask;
  _18 = ~_17;
  _19 = _16 & _18;
  _20 = (unsigned char) mask;
  _21 = putvalue & _20;
  _22 = _19 | _21;
  if (_13 != _22)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  _26 = (unsigned char) mask;
  _27 = ~_26;
  _28 = _25 & _27;
  _29 = (unsigned char) mask;
  _30 = putvalue & _29;
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = _28 | _30;
  *_32 = _33;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _34 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _35 = (unsigned char) _34;
  tmp_val = _35 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.114_36 = (unsigned short) pos;
  _37 = pos.114_36 + 65535;
  pos = (sint16) _37;
  # DEBUG BEGIN_STMT
  _38 = (int) space;
  Val = Val >> _38;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = *_40;
  _42 = (unsigned char) Val;
  if (_41 != _42)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _43 = (sizetype) pos;
  _44 = dataPtr + _43;
  _45 = (unsigned char) Val;
  *_44 = _45;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.115_46 = (unsigned char) ssize;
  _47 = ssize.115_46 + 248;
  ssize = (sint8) _47;
  # DEBUG BEGIN_STMT
  pos.116_48 = (unsigned short) pos;
  _49 = pos.116_48 + 65535;
  pos = (sint16) _49;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _50 = 8 - ssize_hlp;
  _51 = (int) _50;
  _52 = 255 >> _51;
  mask_u8 = (uint8) _52;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _53 = (sizetype) pos;
  _54 = dataPtr + _53;
  _55 = *_54;
  _56 = (sizetype) pos;
  _57 = dataPtr + _56;
  _58 = *_57;
  _59 = (unsigned char) mask;
  _60 = ~_59;
  _61 = _58 & _60;
  _62 = (unsigned char) Val;
  _63 = (unsigned char) mask;
  _64 = _62 & _63;
  _65 = _61 | _64;
  if (_55 != _65)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _66 = (sizetype) pos;
  _67 = dataPtr + _66;
  _68 = *_67;
  _69 = (unsigned char) mask;
  _70 = ~_69;
  _71 = _68 & _70;
  _72 = (unsigned char) Val;
  _73 = (unsigned char) mask;
  _74 = _72 & _73;
  _75 = (sizetype) pos;
  _76 = dataPtr + _75;
  _77 = _71 | _74;
  *_76 = _77;

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _78 = IntDataPtr->trigger;
  _79 = valueChanged | _78;
  IntDataPtr->trigger = _79;
  return;

}


Com_EB_Write_16_SX_DL_DUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = (sizetype) pos;
  _11 = dataPtr + _10;
  _12 = *_11;
  _13 = (sizetype) pos;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = (unsigned char) mask;
  _17 = ~_16;
  _18 = _15 & _17;
  _19 = (unsigned char) Val;
  _20 = (unsigned char) mask;
  _21 = _19 & _20;
  _22 = _18 | _21;
  if (_12 != _22)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  _26 = (unsigned char) mask;
  _27 = ~_26;
  _28 = _25 & _27;
  _29 = (unsigned char) Val;
  _30 = (unsigned char) mask;
  _31 = _29 & _30;
  _32 = (sizetype) pos;
  _33 = dataPtr + _32;
  _34 = _28 | _31;
  *_33 = _34;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.117_35 = (unsigned short) pos;
  _36 = pos.117_35 + 65535;
  pos = (sint16) _36;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _37 = (sizetype) pos;
  _38 = dataPtr + _37;
  _39 = *_38;
  _40 = (sizetype) pos;
  _41 = dataPtr + _40;
  _42 = *_41;
  _43 = (unsigned char) mask;
  _44 = ~_43;
  _45 = _42 & _44;
  _46 = (unsigned char) Val;
  _47 = (unsigned char) mask;
  _48 = _46 & _47;
  _49 = _45 | _48;
  if (_39 != _49)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _50 = (sizetype) pos;
  _51 = dataPtr + _50;
  _52 = *_51;
  _53 = (unsigned char) mask;
  _54 = ~_53;
  _55 = _52 & _54;
  _56 = (unsigned char) Val;
  _57 = (unsigned char) mask;
  _58 = _56 & _57;
  _59 = (sizetype) pos;
  _60 = dataPtr + _59;
  _61 = _55 | _58;
  *_60 = _61;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _62 = IntDataPtr->trigger;
  _63 = valueChanged | _62;
  IntDataPtr->trigger = _63;
  return;

}


Com_EB_Write_08_SX_DL_DUB_EOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = (sizetype) pos;
  _17 = dataPtr + _16;
  _18 = *_17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = *_20;
  _22 = (unsigned char) mask;
  _23 = ~_22;
  _24 = _21 & _23;
  _25 = (unsigned char) Val;
  _26 = (unsigned char) mask;
  _27 = _25 & _26;
  _28 = _24 | _27;
  if (_18 != _28)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _29 = (sizetype) pos;
  _30 = dataPtr + _29;
  _31 = *_30;
  _32 = (unsigned char) mask;
  _33 = ~_32;
  _34 = _31 & _33;
  _35 = (unsigned char) Val;
  _36 = (unsigned char) mask;
  _37 = _35 & _36;
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = _34 | _37;
  *_39 = _40;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.118_41 = (unsigned short) pos;
  _42 = pos.118_41 + 65535;
  pos = (sint16) _42;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _43 = (sizetype) pos;
  _44 = dataPtr + _43;
  _45 = *_44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = *_47;
  _49 = (unsigned char) mask;
  _50 = ~_49;
  _51 = _48 & _50;
  _52 = (unsigned char) Val;
  _53 = (unsigned char) mask;
  _54 = _52 & _53;
  _55 = _51 | _54;
  if (_45 != _55)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _56 = (sizetype) pos;
  _57 = dataPtr + _56;
  _58 = *_57;
  _59 = (unsigned char) mask;
  _60 = ~_59;
  _61 = _58 & _60;
  _62 = (unsigned char) Val;
  _63 = (unsigned char) mask;
  _64 = _62 & _63;
  _65 = (sizetype) pos;
  _66 = dataPtr + _65;
  _67 = _61 | _64;
  *_66 = _67;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _68 = IntDataPtr->trigger;
  _69 = valueChanged | _68;
  IntDataPtr->trigger = _69;
  return;

}


Com_EB_Write_AY_S1_DL_DUB_EOC_E3 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 * DataPtr_Start;
  const uint8 * U8Ptr;
  uint32 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = (sizetype) _1;
  DataPtr_Start = dataPtr + _2;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = DataPtr_Start + ii;
  _4 = *_3;
  _5 = U8Ptr + ii;
  _6 = *_5;
  if (_4 != _6)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _7 = U8Ptr + ii;
  _8 = DataPtr_Start + ii;
  _9 = *_7;
  *_8 = _9;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii = ii + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = IntDataPtr->arraySize;
  _11 = (long unsigned int) _10;
  if (ii < _11)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _12 = IntDataPtr->trigger;
  _13 = valueChanged | _12;
  IntDataPtr->trigger = _13;
  return;

}


Com_EB_Write_AY_S0_DL_DUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  pos = ii + _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = (sizetype) pos;
  _3 = dataPtr + _2;
  _4 = *_3;
  _5 = (sizetype) ii;
  _6 = U8Ptr + _5;
  _7 = *_6;
  if (_4 != _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _8 = (sizetype) ii;
  _9 = U8Ptr + _8;
  _10 = (sizetype) pos;
  _11 = dataPtr + _10;
  _12 = *_9;
  *_11 = _12;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ii.119_13 = ii;
  ii = ii.119_13 + 1;
  # DEBUG BEGIN_STMT
  _14 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _14)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _15 = IntDataPtr->trigger;
  _16 = valueChanged | _15;
  IntDataPtr->trigger = _16;
  return;

}


Com_EB_Write_64_SX_DL_DUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_EOC_E1 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 32;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_DUB_EOC_E1 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_EOC_E1 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  return;

}


Com_EB_Write_32_SX_DL_DUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = (sizetype) pos;
  _12 = dataPtr + _11;
  _13 = *_12;
  _14 = (sizetype) pos;
  _15 = dataPtr + _14;
  _16 = *_15;
  _17 = (unsigned char) mask;
  _18 = ~_17;
  _19 = _16 & _18;
  _20 = (unsigned char) mask;
  _21 = putvalue & _20;
  _22 = _19 | _21;
  if (_13 != _22)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  _26 = (unsigned char) mask;
  _27 = ~_26;
  _28 = _25 & _27;
  _29 = (unsigned char) mask;
  _30 = putvalue & _29;
  _31 = (sizetype) pos;
  _32 = dataPtr + _31;
  _33 = _28 | _30;
  *_32 = _33;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _34 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _35 = (unsigned char) _34;
  tmp_val = _35 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.120_36 = (unsigned short) pos;
  _37 = pos.120_36 + 1;
  pos = (sint16) _37;
  # DEBUG BEGIN_STMT
  _38 = (int) space;
  Val = Val >> _38;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = *_40;
  _42 = (unsigned char) Val;
  if (_41 != _42)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _43 = (sizetype) pos;
  _44 = dataPtr + _43;
  _45 = (unsigned char) Val;
  *_44 = _45;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.121_46 = (unsigned char) ssize;
  _47 = ssize.121_46 + 248;
  ssize = (sint8) _47;
  # DEBUG BEGIN_STMT
  pos.122_48 = (unsigned short) pos;
  _49 = pos.122_48 + 1;
  pos = (sint16) _49;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _50 = 8 - ssize_hlp;
  _51 = (int) _50;
  _52 = 255 >> _51;
  mask_u8 = (uint8) _52;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _53 = (sizetype) pos;
  _54 = dataPtr + _53;
  _55 = *_54;
  _56 = (sizetype) pos;
  _57 = dataPtr + _56;
  _58 = *_57;
  _59 = (unsigned char) mask;
  _60 = ~_59;
  _61 = _58 & _60;
  _62 = (unsigned char) Val;
  _63 = (unsigned char) mask;
  _64 = _62 & _63;
  _65 = _61 | _64;
  if (_55 != _65)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _66 = (sizetype) pos;
  _67 = dataPtr + _66;
  _68 = *_67;
  _69 = (unsigned char) mask;
  _70 = ~_69;
  _71 = _68 & _70;
  _72 = (unsigned char) Val;
  _73 = (unsigned char) mask;
  _74 = _72 & _73;
  _75 = (sizetype) pos;
  _76 = dataPtr + _75;
  _77 = _71 | _74;
  *_76 = _77;

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _78 = IntDataPtr->trigger;
  _79 = valueChanged | _78;
  IntDataPtr->trigger = _79;
  return;

}


Com_EB_Write_16_SX_DL_DUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _10 = (sizetype) pos;
  _11 = dataPtr + _10;
  _12 = *_11;
  _13 = (sizetype) pos;
  _14 = dataPtr + _13;
  _15 = *_14;
  _16 = (unsigned char) mask;
  _17 = ~_16;
  _18 = _15 & _17;
  _19 = (unsigned char) Val;
  _20 = (unsigned char) mask;
  _21 = _19 & _20;
  _22 = _18 | _21;
  if (_12 != _22)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  _26 = (unsigned char) mask;
  _27 = ~_26;
  _28 = _25 & _27;
  _29 = (unsigned char) Val;
  _30 = (unsigned char) mask;
  _31 = _29 & _30;
  _32 = (sizetype) pos;
  _33 = dataPtr + _32;
  _34 = _28 | _31;
  *_33 = _34;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.123_35 = (unsigned short) pos;
  _36 = pos.123_35 + 1;
  pos = (sint16) _36;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _37 = (sizetype) pos;
  _38 = dataPtr + _37;
  _39 = *_38;
  _40 = (sizetype) pos;
  _41 = dataPtr + _40;
  _42 = *_41;
  _43 = (unsigned char) mask;
  _44 = ~_43;
  _45 = _42 & _44;
  _46 = (unsigned char) Val;
  _47 = (unsigned char) mask;
  _48 = _46 & _47;
  _49 = _45 | _48;
  if (_39 != _49)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _50 = (sizetype) pos;
  _51 = dataPtr + _50;
  _52 = *_51;
  _53 = (unsigned char) mask;
  _54 = ~_53;
  _55 = _52 & _54;
  _56 = (unsigned char) Val;
  _57 = (unsigned char) mask;
  _58 = _56 & _57;
  _59 = (sizetype) pos;
  _60 = dataPtr + _59;
  _61 = _55 | _58;
  *_60 = _61;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _62 = IntDataPtr->trigger;
  _63 = valueChanged | _62;
  IntDataPtr->trigger = _63;
  return;

}


Com_EB_Write_08_SX_DL_DUB_EOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;
  uint8 valueChanged;

  <bb 2> :
  # DEBUG BEGIN_STMT
  valueChanged = 0;
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _16 = (sizetype) pos;
  _17 = dataPtr + _16;
  _18 = *_17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = *_20;
  _22 = (unsigned char) mask;
  _23 = ~_22;
  _24 = _21 & _23;
  _25 = (unsigned char) Val;
  _26 = (unsigned char) mask;
  _27 = _25 & _26;
  _28 = _24 | _27;
  if (_18 != _28)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _29 = (sizetype) pos;
  _30 = dataPtr + _29;
  _31 = *_30;
  _32 = (unsigned char) mask;
  _33 = ~_32;
  _34 = _31 & _33;
  _35 = (unsigned char) Val;
  _36 = (unsigned char) mask;
  _37 = _35 & _36;
  _38 = (sizetype) pos;
  _39 = dataPtr + _38;
  _40 = _34 | _37;
  *_39 = _40;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.124_41 = (unsigned short) pos;
  _42 = pos.124_41 + 1;
  pos = (sint16) _42;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _43 = (sizetype) pos;
  _44 = dataPtr + _43;
  _45 = *_44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = *_47;
  _49 = (unsigned char) mask;
  _50 = ~_49;
  _51 = _48 & _50;
  _52 = (unsigned char) Val;
  _53 = (unsigned char) mask;
  _54 = _52 & _53;
  _55 = _51 | _54;
  if (_45 != _55)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  valueChanged = 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _56 = (sizetype) pos;
  _57 = dataPtr + _56;
  _58 = *_57;
  _59 = (unsigned char) mask;
  _60 = ~_59;
  _61 = _58 & _60;
  _62 = (unsigned char) Val;
  _63 = (unsigned char) mask;
  _64 = _62 & _63;
  _65 = (sizetype) pos;
  _66 = dataPtr + _65;
  _67 = _61 | _64;
  *_66 = _67;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _68 = IntDataPtr->trigger;
  _69 = valueChanged | _68;
  IntDataPtr->trigger = _69;
  return;

}


Com_EB_Write_AY_S0_DL_DUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _3 = _1 + _2;
  _4 = _3 - ii;
  pos = _4 + 65535;
  # DEBUG BEGIN_STMT
  _5 = (sizetype) ii;
  _6 = U8Ptr + _5;
  _7 = (sizetype) pos;
  _8 = dataPtr + _7;
  _9 = *_6;
  *_8 = _9;
  # DEBUG BEGIN_STMT
  ii.125_10 = ii;
  ii = ii.125_10 + 1;
  # DEBUG BEGIN_STMT
  _11 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _11)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_64_SX_DL_DUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_DOC_E2 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 65504;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_DUB_DOC_E2 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_DOC_E2 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_32_SX_DL_DUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  _11 = (sizetype) pos;
  _12 = dataPtr + _11;
  _13 = *_12;
  _14 = (unsigned char) mask;
  _15 = ~_14;
  _16 = _13 & _15;
  _17 = (unsigned char) mask;
  _18 = putvalue & _17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = _16 | _18;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  _22 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _23 = (unsigned char) _22;
  tmp_val = _23 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.126_24 = (unsigned short) pos;
  _25 = pos.126_24 + 65535;
  pos = (sint16) _25;
  # DEBUG BEGIN_STMT
  _26 = (int) space;
  Val = Val >> _26;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _27 = (sizetype) pos;
  _28 = dataPtr + _27;
  _29 = (unsigned char) Val;
  *_28 = _29;
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.127_30 = (unsigned char) ssize;
  _31 = ssize.127_30 + 248;
  ssize = (sint8) _31;
  # DEBUG BEGIN_STMT
  pos.128_32 = (unsigned short) pos;
  _33 = pos.128_32 + 65535;
  pos = (sint16) _33;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _34 = 8 - ssize_hlp;
  _35 = (int) _34;
  _36 = 255 >> _35;
  mask_u8 = (uint8) _36;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  _37 = (sizetype) pos;
  _38 = dataPtr + _37;
  _39 = *_38;
  _40 = (unsigned char) mask;
  _41 = ~_40;
  _42 = _39 & _41;
  _43 = (unsigned char) Val;
  _44 = (unsigned char) mask;
  _45 = _43 & _44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = _42 | _45;
  *_47 = _48;

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_16_SX_DL_DUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  _10 = (sizetype) pos;
  _11 = dataPtr + _10;
  _12 = *_11;
  _13 = (unsigned char) mask;
  _14 = ~_13;
  _15 = _12 & _14;
  _16 = (unsigned char) Val;
  _17 = (unsigned char) mask;
  _18 = _16 & _17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = _15 | _18;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.129_22 = (unsigned short) pos;
  _23 = pos.129_22 + 65535;
  pos = (sint16) _23;
  # DEBUG BEGIN_STMT
  _24 = (sizetype) pos;
  _25 = dataPtr + _24;
  _26 = *_25;
  _27 = (unsigned char) mask;
  _28 = ~_27;
  _29 = _26 & _28;
  _30 = (unsigned char) Val;
  _31 = (unsigned char) mask;
  _32 = _30 & _31;
  _33 = (sizetype) pos;
  _34 = dataPtr + _33;
  _35 = _29 | _32;
  *_34 = _35;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_08_SX_DL_DUB_DOC_E2 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  _16 = (sizetype) pos;
  _17 = dataPtr + _16;
  _18 = *_17;
  _19 = (unsigned char) mask;
  _20 = ~_19;
  _21 = _18 & _20;
  _22 = (unsigned char) Val;
  _23 = (unsigned char) mask;
  _24 = _22 & _23;
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = _21 | _24;
  *_26 = _27;
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.130_28 = (unsigned short) pos;
  _29 = pos.130_28 + 65535;
  pos = (sint16) _29;
  # DEBUG BEGIN_STMT
  _30 = (sizetype) pos;
  _31 = dataPtr + _30;
  _32 = *_31;
  _33 = (unsigned char) mask;
  _34 = ~_33;
  _35 = _32 & _34;
  _36 = (unsigned char) Val;
  _37 = (unsigned char) mask;
  _38 = _36 & _37;
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = _35 | _38;
  *_40 = _41;

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_AY_S1_DL_DUB_DOC_E3 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 * DataPtr_Start;
  const uint8 * U8Ptr;
  uint32 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _2 = (sizetype) _1;
  DataPtr_Start = dataPtr + _2;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = U8Ptr + ii;
  _4 = DataPtr_Start + ii;
  _5 = *_3;
  *_4 = _5;
  # DEBUG BEGIN_STMT
  ii = ii + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = IntDataPtr->arraySize;
  _7 = (long unsigned int) _6;
  if (ii < _7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Com_EB_Write_AY_S0_DL_DUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint16 pos;
  const uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  pos = ii + _1;
  # DEBUG BEGIN_STMT
  _2 = (sizetype) ii;
  _3 = U8Ptr + _2;
  _4 = (sizetype) pos;
  _5 = dataPtr + _4;
  _6 = *_3;
  *_5 = _6;
  # DEBUG BEGIN_STMT
  ii.131_7 = ii;
  ii = ii.131_7 + 1;
  # DEBUG BEGIN_STMT
  _8 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (ii < _8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_64_SX_DL_DUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  struct ComTxSignalType Com_EB_WriteProp_loc;
  const struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc = *Com_EB_WritePropPtr;
  # DEBUG BEGIN_STMT
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _2 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_DOC_E1 (_2, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _4 = _3 + 65504;
  Com_EB_WriteProp_loc.ComSignalBase.ComBitSize = _4;
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _6 = _5 + 32;
  Com_EB_WriteProp_loc.ComSignalPositionInBit = _6;
  # DEBUG BEGIN_STMT
  _7 = &SignalDataPtr_loc->HiWord;
  Com_EB_Write_32_SX_DL_DUB_DOC_E1 (_7, dataPtr, &Com_EB_WriteProp_loc, IntDataPtr);
  Com_EB_WriteProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = &SignalDataPtr_loc->LoWord;
  Com_EB_Write_32_SX_DL_DUB_DOC_E1 (_8, dataPtr, Com_EB_WritePropPtr, IntDataPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_32_SX_DL_DUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  uint8 mask_u8;
  uint8 ssize_hlp;
  uint8 tmp_val;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  sint8 ssize;
  uint8 space;
  uint32 mask;
  uint8 putvalue;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Val = MEM[(const uint32 *)SignalDataPtr];
  # DEBUG BEGIN_STMT
  putvalue = (uint8) Val;
  # DEBUG BEGIN_STMT
  mask = 4294967295;
  # DEBUG BEGIN_STMT
  space = 8;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = space - col;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _5 = (unsigned int) _4;
  _6 = 32 - _5;
  mask = mask >> _6;
  # DEBUG BEGIN_STMT
  _7 = (int) col;
  mask = mask << _7;
  # DEBUG BEGIN_STMT
  _8 = (int) putvalue;
  _9 = (int) col;
  _10 = _8 << _9;
  putvalue = (uint8) _10;
  # DEBUG BEGIN_STMT
  _11 = (sizetype) pos;
  _12 = dataPtr + _11;
  _13 = *_12;
  _14 = (unsigned char) mask;
  _15 = ~_14;
  _16 = _13 & _15;
  _17 = (unsigned char) mask;
  _18 = putvalue & _17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = _16 | _18;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  _22 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _23 = (unsigned char) _22;
  tmp_val = _23 - space;
  # DEBUG BEGIN_STMT
  ssize = (sint8) tmp_val;
  # DEBUG BEGIN_STMT
  pos.132_24 = (unsigned short) pos;
  _25 = pos.132_24 + 1;
  pos = (sint16) _25;
  # DEBUG BEGIN_STMT
  _26 = (int) space;
  Val = Val >> _26;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _27 = (sizetype) pos;
  _28 = dataPtr + _27;
  _29 = (unsigned char) Val;
  *_28 = _29;
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  ssize.133_30 = (unsigned char) ssize;
  _31 = ssize.133_30 + 248;
  ssize = (sint8) _31;
  # DEBUG BEGIN_STMT
  pos.134_32 = (unsigned short) pos;
  _33 = pos.134_32 + 1;
  pos = (sint16) _33;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (ssize > 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ssize_hlp = (uint8) ssize;
  # DEBUG BEGIN_STMT
  _34 = 8 - ssize_hlp;
  _35 = (int) _34;
  _36 = 255 >> _35;
  mask_u8 = (uint8) _36;
  # DEBUG BEGIN_STMT
  mask = (uint32) mask_u8;
  # DEBUG BEGIN_STMT
  _37 = (sizetype) pos;
  _38 = dataPtr + _37;
  _39 = *_38;
  _40 = (unsigned char) mask;
  _41 = ~_40;
  _42 = _39 & _41;
  _43 = (unsigned char) Val;
  _44 = (unsigned char) mask;
  _45 = _43 & _44;
  _46 = (sizetype) pos;
  _47 = dataPtr + _46;
  _48 = _42 | _45;
  *_47 = _48;

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_16_SX_DL_DUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 mask;
  uint32 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint16 *)SignalDataPtr];
  Val = (uint32) _1;
  # DEBUG BEGIN_STMT
  mask = 65535;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _6 = (unsigned int) _5;
  _7 = 16 - _6;
  mask = mask >> _7;
  # DEBUG BEGIN_STMT
  _8 = (int) col;
  mask = mask << _8;
  # DEBUG BEGIN_STMT
  _9 = (int) col;
  Val = Val << _9;
  # DEBUG BEGIN_STMT
  _10 = (sizetype) pos;
  _11 = dataPtr + _10;
  _12 = *_11;
  _13 = (unsigned char) mask;
  _14 = ~_13;
  _15 = _12 & _14;
  _16 = (unsigned char) Val;
  _17 = (unsigned char) mask;
  _18 = _16 & _17;
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = _15 | _18;
  *_20 = _21;
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.135_22 = (unsigned short) pos;
  _23 = pos.135_22 + 1;
  pos = (sint16) _23;
  # DEBUG BEGIN_STMT
  _24 = (sizetype) pos;
  _25 = dataPtr + _24;
  _26 = *_25;
  _27 = (unsigned char) mask;
  _28 = ~_27;
  _29 = _26 & _28;
  _30 = (unsigned char) Val;
  _31 = (unsigned char) mask;
  _32 = _30 & _31;
  _33 = (sizetype) pos;
  _34 = dataPtr + _33;
  _35 = _29 | _32;
  *_34 = _35;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Write_08_SX_DL_DUB_DOC_E1 (const void * SignalDataPtr, uint8 * dataPtr, const struct ComTxSignalType * Com_EB_WritePropPtr, struct Com_EB_WriteIntDataType * IntDataPtr)
{
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint16 mask;
  uint16 Val;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = MEM[(const uint8 *)SignalDataPtr];
  Val = (uint16) _1;
  # DEBUG BEGIN_STMT
  mask = 255;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_WritePropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = (int) mask;
  _6 = Com_EB_WritePropPtr->ComSignalBase.ComBitSize;
  _7 = (unsigned int) _6;
  _8 = 8 - _7;
  _9 = _5 >> _8;
  mask = (uint16) _9;
  # DEBUG BEGIN_STMT
  _10 = (int) mask;
  _11 = (int) col;
  _12 = _10 << _11;
  mask = (uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = (int) Val;
  _14 = (int) col;
  _15 = _13 << _14;
  Val = (uint16) _15;
  # DEBUG BEGIN_STMT
  _16 = (sizetype) pos;
  _17 = dataPtr + _16;
  _18 = *_17;
  _19 = (unsigned char) mask;
  _20 = ~_19;
  _21 = _18 & _20;
  _22 = (unsigned char) Val;
  _23 = (unsigned char) mask;
  _24 = _22 & _23;
  _25 = (sizetype) pos;
  _26 = dataPtr + _25;
  _27 = _21 | _24;
  *_26 = _27;
  # DEBUG BEGIN_STMT
  if (mask > 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Val = Val >> 8;
  # DEBUG BEGIN_STMT
  mask = mask >> 8;
  # DEBUG BEGIN_STMT
  pos.136_28 = (unsigned short) pos;
  _29 = pos.136_28 + 1;
  pos = (sint16) _29;
  # DEBUG BEGIN_STMT
  _30 = (sizetype) pos;
  _31 = dataPtr + _30;
  _32 = *_31;
  _33 = (unsigned char) mask;
  _34 = ~_33;
  _35 = _32 & _34;
  _36 = (unsigned char) Val;
  _37 = (unsigned char) mask;
  _38 = _36 & _37;
  _39 = (sizetype) pos;
  _40 = dataPtr + _39;
  _41 = _35 | _38;
  *_40 = _41;

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_ZS (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 11, 1);
  # DEBUG BEGIN_STMT
  *retvalPtr = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_DET (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (50, 0, 255, 3);
  # DEBUG BEGIN_STMT
  *retvalPtr = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_A1_EL (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint16 pos;
  uint8 * SignalDataPtrU8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtrU8 = SignalDataPtr;
  # DEBUG BEGIN_STMT
  pos = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  # DEBUG BEGIN_STMT
  _1 = (sizetype) pos;
  _2 = dataPtr + _1;
  _3 = *_2;
  *SignalDataPtrU8 = _3;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_BO_EL (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 bit;
  const uint16 pos;
  boolean * SignalDataPtrBool;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtrBool = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  pos = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  bit = _3 & 7;
  # DEBUG BEGIN_STMT
  _4 = (sizetype) pos;
  _5 = dataPtr + _4;
  _6 = *_5;
  _7 = (int) bit;
  _8 = 1 << _7;
  _9 = (unsigned char) _8;
  _10 = _6 & _9;
  _11 = _10 != 0;
  _12 = (unsigned char) _11;
  *SignalDataPtrBool = _12;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_A1_DL (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint16 pos;
  uint8 * SignalDataPtrU8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtrU8 = SignalDataPtr;
  # DEBUG BEGIN_STMT
  pos = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  # DEBUG BEGIN_STMT
  _1 = (sizetype) pos;
  _2 = dataPtr + _1;
  _3 = *_2;
  *SignalDataPtrU8 = _3;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_BO_DL (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 bit;
  const uint16 pos;
  boolean * SignalDataPtrBool;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtrBool = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  pos = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  bit = _3 & 7;
  # DEBUG BEGIN_STMT
  _4 = (sizetype) pos;
  _5 = dataPtr + _4;
  _6 = *_5;
  _7 = (int) bit;
  _8 = 1 << _7;
  _9 = (unsigned char) _8;
  _10 = _6 & _9;
  _11 = _10 != 0;
  _12 = (unsigned char) _11;
  *SignalDataPtrBool = _12;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_32_EL_SignExt (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint32 sigExtMask;
  const boolean MSB;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint32 * SignalDataPtrU32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtrU32 = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 47;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, dataPtr, Com_EB_ReadPropPtr, retvalPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = *SignalDataPtrU32;
  _4 = Com_EB_ReadPropPtr->ComBitSize;
  _5 = (unsigned int) _4;
  _6 = _5 + 4294967295;
  _7 = _3 >> _6;
  MSB = (const boolean) _7;
  # DEBUG BEGIN_STMT
  if (MSB != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _8 = Com_EB_ReadPropPtr->ComBitSize;
  _9 = (unsigned int) _8;
  _10 = _9 + 4294967295;
  sigExtMask = 4294967295 << _10;
  # DEBUG BEGIN_STMT
  _11 = *SignalDataPtrU32;
  _12 = sigExtMask | _11;
  *SignalDataPtrU32 = _12;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_32_DL_SignExt (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint32 sigExtMask;
  const boolean MSB;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint32 * SignalDataPtrU32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtrU32 = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 39;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, dataPtr, Com_EB_ReadPropPtr, retvalPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = *SignalDataPtrU32;
  _4 = Com_EB_ReadPropPtr->ComBitSize;
  _5 = (unsigned int) _4;
  _6 = _5 + 4294967295;
  _7 = _3 >> _6;
  MSB = (const boolean) _7;
  # DEBUG BEGIN_STMT
  if (MSB != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _8 = Com_EB_ReadPropPtr->ComBitSize;
  _9 = (unsigned int) _8;
  _10 = _9 + 4294967295;
  sigExtMask = 4294967295 << _10;
  # DEBUG BEGIN_STMT
  _11 = *SignalDataPtrU32;
  _12 = sigExtMask | _11;
  *SignalDataPtrU32 = _12;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_16_EL_SignExt (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint16 sigExtMask;
  const boolean MSB;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint16 * SignalDataPtrU16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtrU16 = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 47;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, dataPtr, Com_EB_ReadPropPtr, retvalPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = *SignalDataPtrU16;
  _4 = (int) _3;
  _5 = Com_EB_ReadPropPtr->ComBitSize;
  _6 = (unsigned int) _5;
  _7 = _6 + 4294967295;
  _8 = _4 >> _7;
  MSB = (const boolean) _8;
  # DEBUG BEGIN_STMT
  if (MSB != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _9 = Com_EB_ReadPropPtr->ComBitSize;
  _10 = (unsigned int) _9;
  _11 = _10 + 4294967295;
  _12 = 65535 << _11;
  sigExtMask = (const uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = *SignalDataPtrU16;
  _14 = sigExtMask | _13;
  *SignalDataPtrU16 = _14;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_16_DL_SignExt (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint16 sigExtMask;
  const boolean MSB;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint16 * SignalDataPtrU16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtrU16 = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 39;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, dataPtr, Com_EB_ReadPropPtr, retvalPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = *SignalDataPtrU16;
  _4 = (int) _3;
  _5 = Com_EB_ReadPropPtr->ComBitSize;
  _6 = (unsigned int) _5;
  _7 = _6 + 4294967295;
  _8 = _4 >> _7;
  MSB = (const boolean) _8;
  # DEBUG BEGIN_STMT
  if (MSB != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _9 = Com_EB_ReadPropPtr->ComBitSize;
  _10 = (unsigned int) _9;
  _11 = _10 + 4294967295;
  _12 = 65535 << _11;
  sigExtMask = (const uint16) _12;
  # DEBUG BEGIN_STMT
  _13 = *SignalDataPtrU16;
  _14 = sigExtMask | _13;
  *SignalDataPtrU16 = _14;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_08_EL_SignExt (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 sigExtMask;
  const boolean MSB;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 * SignalDataPtrU8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtrU8 = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 47;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, dataPtr, Com_EB_ReadPropPtr, retvalPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = *SignalDataPtrU8;
  _4 = (int) _3;
  _5 = Com_EB_ReadPropPtr->ComBitSize;
  _6 = (unsigned int) _5;
  _7 = _6 + 4294967295;
  _8 = _4 >> _7;
  MSB = (const boolean) _8;
  # DEBUG BEGIN_STMT
  if (MSB != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _9 = Com_EB_ReadPropPtr->ComBitSize;
  _10 = (unsigned int) _9;
  _11 = _10 + 4294967295;
  _12 = 255 << _11;
  sigExtMask = (const uint8) _12;
  # DEBUG BEGIN_STMT
  _13 = *SignalDataPtrU8;
  _14 = sigExtMask | _13;
  *SignalDataPtrU8 = _14;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_08_DL_SignExt (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 sigExtMask;
  const boolean MSB;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 * SignalDataPtrU8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtrU8 = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 39;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (SignalDataPtr, dataPtr, Com_EB_ReadPropPtr, retvalPtr);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = *SignalDataPtrU8;
  _4 = (int) _3;
  _5 = Com_EB_ReadPropPtr->ComBitSize;
  _6 = (unsigned int) _5;
  _7 = _6 + 4294967295;
  _8 = _4 >> _7;
  MSB = (const boolean) _8;
  # DEBUG BEGIN_STMT
  if (MSB != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _9 = Com_EB_ReadPropPtr->ComBitSize;
  _10 = (unsigned int) _9;
  _11 = _10 + 4294967295;
  _12 = 255 << _11;
  sigExtMask = (const uint8) _12;
  # DEBUG BEGIN_STMT
  _13 = *SignalDataPtrU8;
  _14 = sigExtMask | _13;
  *SignalDataPtrU8 = _14;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_AY_EL_E3 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 * const valPtr;
  ComSignalDescBitType startbyte;

  <bb 2> :
  # DEBUG BEGIN_STMT
  startbyte = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  # DEBUG BEGIN_STMT
  _1 = (sizetype) startbyte;
  valPtr = dataPtr + _1;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComBitSize;
  _3 = (long unsigned int) _2;
  TS_MemCpy32 (SignalDataPtr, valPtr, _3);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_AY_DL_E3 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 * const valPtr;
  ComSignalDescBitType startbyte;

  <bb 2> :
  # DEBUG BEGIN_STMT
  startbyte = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  # DEBUG BEGIN_STMT
  _1 = (sizetype) startbyte;
  valPtr = dataPtr + _1;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComBitSize;
  _3 = (long unsigned int) _2;
  TS_MemCpy32 (SignalDataPtr, valPtr, _3);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_AY_EL_E2 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  uint16 pos;
  uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _2 = Com_EB_ReadPropPtr->ComBitSize;
  _3 = _1 + _2;
  _4 = _3 - ii;
  pos = _4 + 65535;
  # DEBUG BEGIN_STMT
  _5 = (sizetype) pos;
  _6 = dataPtr + _5;
  _7 = (sizetype) ii;
  _8 = U8Ptr + _7;
  _9 = *_6;
  *_8 = _9;
  # DEBUG BEGIN_STMT
  ii.1_10 = ii;
  ii = ii.1_10 + 1;
  # DEBUG BEGIN_STMT
  _11 = Com_EB_ReadPropPtr->ComBitSize;
  if (ii < _11)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_64_EL_E2 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  struct ComSignalBaseType Com_EB_ReadProp_loc;
  struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_ReadProp_loc = *Com_EB_ReadPropPtr;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComBitSize;
  _3 = _2 + 65504;
  Com_EB_ReadProp_loc.ComBitSize = _3;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _4 = &SignalDataPtr_loc->HiWord;
  Com_EB_Read_32_DL_E2 (_4, dataPtr, &Com_EB_ReadProp_loc, retvalPtr);
  # DEBUG BEGIN_STMT
  _5 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _6 = Com_EB_ReadPropPtr->ComBitSize;
  _7 = _5 + _6;
  _8 = _7 + 65504;
  Com_EB_ReadProp_loc.ComSignalPositionInBit = _8;
  # DEBUG BEGIN_STMT
  Com_EB_ReadProp_loc.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _9 = &SignalDataPtr_loc->LoWord;
  Com_EB_Read_32_DL_E2 (_9, dataPtr, &Com_EB_ReadProp_loc, retvalPtr);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  Com_EB_ReadProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _10 = &SignalDataPtr_loc->LoWord;
  Com_EB_Read_32_EL_E2 (_10, dataPtr, Com_EB_ReadPropPtr, retvalPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_32_EL_E2 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 tmp_val;
  const uint8 mask;
  const uint8 space;
  ComSignalBitSizeType size;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 value;
  uint32 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  value = 0;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  size = Com_EB_ReadPropPtr->ComBitSize;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (col != 7)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  space = col + 1;
  # DEBUG BEGIN_STMT
  _4 = (unsigned int) col;
  _5 = 7 - _4;
  _6 = 255 >> _5;
  mask = (const uint8) _6;
  # DEBUG BEGIN_STMT
  _7 = (sizetype) pos;
  _8 = dataPtr + _7;
  _9 = *_8;
  tmp_val = mask & _9;
  # DEBUG BEGIN_STMT
  value = (uint32) tmp_val;
  # DEBUG BEGIN_STMT
  _10 = (short unsigned int) space;
  if (size <= _10)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _11 = (int) space;
  _12 = (int) size;
  _13 = _11 - _12;
  value = value >> _13;
  # DEBUG BEGIN_STMT
  size = 0;
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  pos.2_14 = (unsigned short) pos;
  _15 = pos.2_14 + 1;
  pos = (sint16) _15;
  # DEBUG BEGIN_STMT
  _16 = (short unsigned int) space;
  size = size - _16;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  value = value << 8;
  # DEBUG BEGIN_STMT
  _17 = (sizetype) pos;
  _18 = dataPtr + _17;
  _19 = *_18;
  _20 = (long unsigned int) _19;
  value = value + _20;
  # DEBUG BEGIN_STMT
  size = size + 65528;
  # DEBUG BEGIN_STMT
  pos.3_21 = (unsigned short) pos;
  _22 = pos.3_21 + 1;
  pos = (sint16) _22;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (size > 7)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (size != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _23 = (int) size;
  value = value << _23;
  # DEBUG BEGIN_STMT
  _24 = (sizetype) pos;
  _25 = dataPtr + _24;
  _26 = *_25;
  _27 = (long unsigned int) _26;
  _28 = (unsigned int) size;
  _29 = 8 - _28;
  _30 = _27 >> _29;
  value = value + _30;

  <bb 10> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_16_EL_E2 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint16 mask;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 tmpval;
  sint8 ssize;
  uint8 bitsread;
  uint16 value;
  uint16 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  bitsread = 0;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComBitSize;
  ssize = (sint8) _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (col == 7)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  bitsread = 8;
  # DEBUG BEGIN_STMT
  _5 = (sizetype) pos;
  _6 = dataPtr + _5;
  _7 = *_6;
  tmpval = (uint32) _7;
  # DEBUG BEGIN_STMT
  ssize.4_8 = (unsigned char) ssize;
  _9 = ssize.4_8 + 248;
  ssize = (sint8) _9;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  ssize.5_10 = (unsigned char) ssize;
  _11 = ssize.5_10 + 248;
  ssize = (sint8) _11;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.6_12 = (unsigned short) pos;
  _13 = pos.6_12 + 1;
  pos = (sint16) _13;
  # DEBUG BEGIN_STMT
  _14 = (sizetype) pos;
  _15 = dataPtr + _14;
  _16 = *_15;
  _17 = (long unsigned int) _16;
  tmpval = tmpval | _17;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _18 = (int) bitsread;
  _19 = Com_EB_ReadPropPtr->ComBitSize;
  _20 = (int) _19;
  _21 = _18 - _20;
  _22 = tmpval >> _21;
  value = (uint16) _22;
  goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  tmpval = (uint32) _25;
  # DEBUG BEGIN_STMT
  ssize.7_26 = (unsigned char) ssize;
  _27 = ssize.7_26 - col;
  _28 = _27 + 255;
  ssize = (sint8) _28;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  ssize.8_29 = (unsigned char) ssize;
  _30 = ssize.8_29 + 248;
  ssize = (sint8) _30;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.9_31 = (unsigned short) pos;
  _32 = pos.9_31 + 1;
  pos = (sint16) _32;
  # DEBUG BEGIN_STMT
  _33 = (sizetype) pos;
  _34 = dataPtr + _33;
  _35 = *_34;
  _36 = (long unsigned int) _35;
  tmpval = tmpval | _36;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _37 = (unsigned int) col;
  _38 = (unsigned int) bitsread;
  _39 = _37 + _38;
  _40 = Com_EB_ReadPropPtr->ComBitSize;
  _41 = (unsigned char) _40;
  _42 = (unsigned int) _41;
  _43 = _39 - _42;
  _44 = _43 + 1;
  _45 = tmpval >> _44;
  value = (uint16) _45;

  <bb 11> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _46 = Com_EB_ReadPropPtr->ComBitSize;
  _47 = (unsigned int) _46;
  _48 = 16 - _47;
  _49 = 65535 >> _48;
  mask = (const uint16) _49;
  # DEBUG BEGIN_STMT
  value = value & mask;
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_08_EL_E2 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 mask;
  uint8 bitsread;
  const uint8 space;
  uint16 tmpval;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint8 value;
  uint8 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = col + 1;
  # DEBUG BEGIN_STMT
  bitsread = 0;
  # DEBUG BEGIN_STMT
  if (col == 7)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = (sizetype) pos;
  _5 = dataPtr + _4;
  _6 = *_5;
  tmpval = (uint16) _6;
  # DEBUG BEGIN_STMT
  _7 = (int) tmpval;
  _8 = Com_EB_ReadPropPtr->ComBitSize;
  _9 = (unsigned int) _8;
  _10 = 8 - _9;
  _11 = _7 >> _10;
  value = (uint8) _11;
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _12 = (short unsigned int) space;
  _13 = Com_EB_ReadPropPtr->ComBitSize;
  if (_12 < _13)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _14 = (sizetype) pos;
  _15 = dataPtr + _14;
  _16 = *_15;
  tmpval = (uint16) _16;
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.10_17 = (unsigned short) pos;
  _18 = pos.10_17 + 1;
  pos = (sint16) _18;
  # DEBUG BEGIN_STMT
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = *_20;
  _22 = (short unsigned int) _21;
  tmpval = tmpval | _22;
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  tmpval = (uint16) _25;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _26 = (int) tmpval;
  _27 = (unsigned int) col;
  _28 = (unsigned int) bitsread;
  _29 = _27 + _28;
  _30 = Com_EB_ReadPropPtr->ComBitSize;
  _31 = (unsigned char) _30;
  _32 = (unsigned int) _31;
  _33 = _29 - _32;
  _34 = _33 + 1;
  _35 = _26 >> _34;
  value = (uint8) _35;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _36 = Com_EB_ReadPropPtr->ComBitSize;
  _37 = (unsigned int) _36;
  _38 = 8 - _37;
  _39 = 255 >> _38;
  mask = (const uint8) _39;
  # DEBUG BEGIN_STMT
  value = value & mask;
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_AY_EL_E1 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  uint16 pos;
  uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  pos = ii + _1;
  # DEBUG BEGIN_STMT
  _2 = (sizetype) pos;
  _3 = dataPtr + _2;
  _4 = (sizetype) ii;
  _5 = U8Ptr + _4;
  _6 = *_3;
  *_5 = _6;
  # DEBUG BEGIN_STMT
  ii.11_7 = ii;
  ii = ii.11_7 + 1;
  # DEBUG BEGIN_STMT
  _8 = Com_EB_ReadPropPtr->ComBitSize;
  if (ii < _8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_64_EL_E1 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  struct ComSignalBaseType Com_EB_ReadProp_loc;
  struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_ReadProp_loc = *Com_EB_ReadPropPtr;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComBitSize;
  _3 = _2 + 65504;
  Com_EB_ReadProp_loc.ComBitSize = _3;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _4 = &SignalDataPtr_loc->HiWord;
  Com_EB_Read_32_DL_E1 (_4, dataPtr, &Com_EB_ReadProp_loc, retvalPtr);
  # DEBUG BEGIN_STMT
  _5 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _6 = Com_EB_ReadPropPtr->ComBitSize;
  _7 = _5 - _6;
  _8 = _7 + 32;
  Com_EB_ReadProp_loc.ComSignalPositionInBit = _8;
  # DEBUG BEGIN_STMT
  Com_EB_ReadProp_loc.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _9 = &SignalDataPtr_loc->LoWord;
  Com_EB_Read_32_DL_E1 (_9, dataPtr, &Com_EB_ReadProp_loc, retvalPtr);
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  Com_EB_ReadProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _10 = &SignalDataPtr_loc->LoWord;
  Com_EB_Read_32_EL_E1 (_10, dataPtr, Com_EB_ReadPropPtr, retvalPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_32_EL_E1 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 tmp_val;
  const uint8 mask;
  const uint8 space;
  ComSignalBitSizeType size;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 value;
  uint32 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  value = 0;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  size = Com_EB_ReadPropPtr->ComBitSize;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (col != 7)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  space = col + 1;
  # DEBUG BEGIN_STMT
  _4 = (unsigned int) col;
  _5 = 7 - _4;
  _6 = 255 >> _5;
  mask = (const uint8) _6;
  # DEBUG BEGIN_STMT
  _7 = (sizetype) pos;
  _8 = dataPtr + _7;
  _9 = *_8;
  tmp_val = mask & _9;
  # DEBUG BEGIN_STMT
  value = (uint32) tmp_val;
  # DEBUG BEGIN_STMT
  _10 = (short unsigned int) space;
  if (size <= _10)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _11 = (int) space;
  _12 = (int) size;
  _13 = _11 - _12;
  value = value >> _13;
  # DEBUG BEGIN_STMT
  size = 0;
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  pos.12_14 = (unsigned short) pos;
  _15 = pos.12_14 + 65535;
  pos = (sint16) _15;
  # DEBUG BEGIN_STMT
  _16 = (short unsigned int) space;
  size = size - _16;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  value = value << 8;
  # DEBUG BEGIN_STMT
  _17 = (sizetype) pos;
  _18 = dataPtr + _17;
  _19 = *_18;
  _20 = (long unsigned int) _19;
  value = value + _20;
  # DEBUG BEGIN_STMT
  size = size + 65528;
  # DEBUG BEGIN_STMT
  pos.13_21 = (unsigned short) pos;
  _22 = pos.13_21 + 65535;
  pos = (sint16) _22;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (size > 7)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (size != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _23 = (int) size;
  value = value << _23;
  # DEBUG BEGIN_STMT
  _24 = (sizetype) pos;
  _25 = dataPtr + _24;
  _26 = *_25;
  _27 = (long unsigned int) _26;
  _28 = (unsigned int) size;
  _29 = 8 - _28;
  _30 = _27 >> _29;
  value = value + _30;

  <bb 10> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_16_EL_E1 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint16 mask;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 tmpval;
  sint8 ssize;
  uint8 bitsread;
  uint16 value;
  uint16 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  bitsread = 0;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComBitSize;
  ssize = (sint8) _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  if (col == 7)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  bitsread = 8;
  # DEBUG BEGIN_STMT
  _5 = (sizetype) pos;
  _6 = dataPtr + _5;
  _7 = *_6;
  tmpval = (uint32) _7;
  # DEBUG BEGIN_STMT
  ssize.14_8 = (unsigned char) ssize;
  _9 = ssize.14_8 + 248;
  ssize = (sint8) _9;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  ssize.15_10 = (unsigned char) ssize;
  _11 = ssize.15_10 + 248;
  ssize = (sint8) _11;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.16_12 = (unsigned short) pos;
  _13 = pos.16_12 + 65535;
  pos = (sint16) _13;
  # DEBUG BEGIN_STMT
  _14 = (sizetype) pos;
  _15 = dataPtr + _14;
  _16 = *_15;
  _17 = (long unsigned int) _16;
  tmpval = tmpval | _17;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _18 = (int) bitsread;
  _19 = Com_EB_ReadPropPtr->ComBitSize;
  _20 = (int) _19;
  _21 = _18 - _20;
  _22 = tmpval >> _21;
  value = (uint16) _22;
  goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  tmpval = (uint32) _25;
  # DEBUG BEGIN_STMT
  ssize.17_26 = (unsigned char) ssize;
  _27 = ssize.17_26 - col;
  _28 = _27 + 255;
  ssize = (sint8) _28;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  ssize.18_29 = (unsigned char) ssize;
  _30 = ssize.18_29 + 248;
  ssize = (sint8) _30;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.19_31 = (unsigned short) pos;
  _32 = pos.19_31 + 65535;
  pos = (sint16) _32;
  # DEBUG BEGIN_STMT
  _33 = (sizetype) pos;
  _34 = dataPtr + _33;
  _35 = *_34;
  _36 = (long unsigned int) _35;
  tmpval = tmpval | _36;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _37 = (unsigned int) col;
  _38 = (unsigned int) bitsread;
  _39 = _37 + _38;
  _40 = Com_EB_ReadPropPtr->ComBitSize;
  _41 = (unsigned char) _40;
  _42 = (unsigned int) _41;
  _43 = _39 - _42;
  _44 = _43 + 1;
  _45 = tmpval >> _44;
  value = (uint16) _45;

  <bb 11> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _46 = Com_EB_ReadPropPtr->ComBitSize;
  _47 = (unsigned int) _46;
  _48 = 16 - _47;
  _49 = 65535 >> _48;
  mask = (const uint16) _49;
  # DEBUG BEGIN_STMT
  value = value & mask;
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_08_EL_E1 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 mask;
  uint8 bitsread;
  const uint8 space;
  uint16 tmpval;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint8 value;
  uint8 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = col + 1;
  # DEBUG BEGIN_STMT
  bitsread = 0;
  # DEBUG BEGIN_STMT
  if (col == 7)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = (sizetype) pos;
  _5 = dataPtr + _4;
  _6 = *_5;
  tmpval = (uint16) _6;
  # DEBUG BEGIN_STMT
  _7 = (int) tmpval;
  _8 = Com_EB_ReadPropPtr->ComBitSize;
  _9 = (unsigned int) _8;
  _10 = 8 - _9;
  _11 = _7 >> _10;
  value = (uint8) _11;
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _12 = (short unsigned int) space;
  _13 = Com_EB_ReadPropPtr->ComBitSize;
  if (_12 < _13)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  # DEBUG BEGIN_STMT
  _14 = (sizetype) pos;
  _15 = dataPtr + _14;
  _16 = *_15;
  tmpval = (uint16) _16;
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.20_17 = (unsigned short) pos;
  _18 = pos.20_17 + 65535;
  pos = (sint16) _18;
  # DEBUG BEGIN_STMT
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = *_20;
  _22 = (short unsigned int) _21;
  tmpval = tmpval | _22;
  # DEBUG BEGIN_STMT
  SchM_Exit_Com_SCHM_COM_EXCLUSIVE_AREA_0 ();
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  tmpval = (uint16) _25;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _26 = (int) tmpval;
  _27 = (unsigned int) col;
  _28 = (unsigned int) bitsread;
  _29 = _27 + _28;
  _30 = Com_EB_ReadPropPtr->ComBitSize;
  _31 = (unsigned char) _30;
  _32 = (unsigned int) _31;
  _33 = _29 - _32;
  _34 = _33 + 1;
  _35 = _26 >> _34;
  value = (uint8) _35;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _36 = Com_EB_ReadPropPtr->ComBitSize;
  _37 = (unsigned int) _36;
  _38 = 8 - _37;
  _39 = 255 >> _38;
  mask = (const uint8) _39;
  # DEBUG BEGIN_STMT
  value = value & mask;
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_AY_DL_E2 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  uint16 pos;
  uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _2 = Com_EB_ReadPropPtr->ComBitSize;
  _3 = _1 + _2;
  _4 = _3 - ii;
  pos = _4 + 65535;
  # DEBUG BEGIN_STMT
  _5 = (sizetype) pos;
  _6 = dataPtr + _5;
  _7 = (sizetype) ii;
  _8 = U8Ptr + _7;
  _9 = *_6;
  *_8 = _9;
  # DEBUG BEGIN_STMT
  ii.21_10 = ii;
  ii = ii.21_10 + 1;
  # DEBUG BEGIN_STMT
  _11 = Com_EB_ReadPropPtr->ComBitSize;
  if (ii < _11)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_64_DL_E2 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  struct ComSignalBaseType Com_EB_ReadProp_loc;
  struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_ReadProp_loc = *Com_EB_ReadPropPtr;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComBitSize;
  _3 = _2 + 65504;
  Com_EB_ReadProp_loc.ComBitSize = _3;
  # DEBUG BEGIN_STMT
  _4 = &SignalDataPtr_loc->HiWord;
  Com_EB_Read_32_DL_E2 (_4, dataPtr, &Com_EB_ReadProp_loc, retvalPtr);
  # DEBUG BEGIN_STMT
  _5 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _6 = Com_EB_ReadPropPtr->ComBitSize;
  _7 = _5 + _6;
  _8 = _7 + 65504;
  Com_EB_ReadProp_loc.ComSignalPositionInBit = _8;
  # DEBUG BEGIN_STMT
  Com_EB_ReadProp_loc.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _9 = &SignalDataPtr_loc->LoWord;
  Com_EB_Read_32_DL_E2 (_9, dataPtr, &Com_EB_ReadProp_loc, retvalPtr);
  Com_EB_ReadProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _10 = &SignalDataPtr_loc->LoWord;
  Com_EB_Read_32_DL_E2 (_10, dataPtr, Com_EB_ReadPropPtr, retvalPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_32_DL_E2 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 tmp_val;
  const uint8 mask;
  const uint8 space;
  ComSignalBitSizeType size;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 value;
  uint32 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  value = 0;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  size = Com_EB_ReadPropPtr->ComBitSize;
  # DEBUG BEGIN_STMT
  if (col != 7)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  space = col + 1;
  # DEBUG BEGIN_STMT
  _4 = (unsigned int) col;
  _5 = 7 - _4;
  _6 = 255 >> _5;
  mask = (const uint8) _6;
  # DEBUG BEGIN_STMT
  _7 = (sizetype) pos;
  _8 = dataPtr + _7;
  _9 = *_8;
  tmp_val = mask & _9;
  # DEBUG BEGIN_STMT
  value = (uint32) tmp_val;
  # DEBUG BEGIN_STMT
  _10 = (short unsigned int) space;
  if (size <= _10)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _11 = (int) space;
  _12 = (int) size;
  _13 = _11 - _12;
  value = value >> _13;
  # DEBUG BEGIN_STMT
  size = 0;
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  pos.22_14 = (unsigned short) pos;
  _15 = pos.22_14 + 1;
  pos = (sint16) _15;
  # DEBUG BEGIN_STMT
  _16 = (short unsigned int) space;
  size = size - _16;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  value = value << 8;
  # DEBUG BEGIN_STMT
  _17 = (sizetype) pos;
  _18 = dataPtr + _17;
  _19 = *_18;
  _20 = (long unsigned int) _19;
  value = value + _20;
  # DEBUG BEGIN_STMT
  size = size + 65528;
  # DEBUG BEGIN_STMT
  pos.23_21 = (unsigned short) pos;
  _22 = pos.23_21 + 1;
  pos = (sint16) _22;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (size > 7)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (size != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _23 = (int) size;
  value = value << _23;
  # DEBUG BEGIN_STMT
  _24 = (sizetype) pos;
  _25 = dataPtr + _24;
  _26 = *_25;
  _27 = (long unsigned int) _26;
  _28 = (unsigned int) size;
  _29 = 8 - _28;
  _30 = _27 >> _29;
  value = value + _30;

  <bb 10> :
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_16_DL_E2 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint16 mask;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 tmpval;
  sint8 ssize;
  uint8 bitsread;
  uint16 value;
  uint16 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  bitsread = 0;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComBitSize;
  ssize = (sint8) _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  if (col == 7)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  bitsread = 8;
  # DEBUG BEGIN_STMT
  _5 = (sizetype) pos;
  _6 = dataPtr + _5;
  _7 = *_6;
  tmpval = (uint32) _7;
  # DEBUG BEGIN_STMT
  ssize.24_8 = (unsigned char) ssize;
  _9 = ssize.24_8 + 248;
  ssize = (sint8) _9;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  ssize.25_10 = (unsigned char) ssize;
  _11 = ssize.25_10 + 248;
  ssize = (sint8) _11;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.26_12 = (unsigned short) pos;
  _13 = pos.26_12 + 1;
  pos = (sint16) _13;
  # DEBUG BEGIN_STMT
  _14 = (sizetype) pos;
  _15 = dataPtr + _14;
  _16 = *_15;
  _17 = (long unsigned int) _16;
  tmpval = tmpval | _17;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _18 = (int) bitsread;
  _19 = Com_EB_ReadPropPtr->ComBitSize;
  _20 = (int) _19;
  _21 = _18 - _20;
  _22 = tmpval >> _21;
  value = (uint16) _22;
  goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  tmpval = (uint32) _25;
  # DEBUG BEGIN_STMT
  ssize.27_26 = (unsigned char) ssize;
  _27 = ssize.27_26 - col;
  _28 = _27 + 255;
  ssize = (sint8) _28;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  ssize.28_29 = (unsigned char) ssize;
  _30 = ssize.28_29 + 248;
  ssize = (sint8) _30;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.29_31 = (unsigned short) pos;
  _32 = pos.29_31 + 1;
  pos = (sint16) _32;
  # DEBUG BEGIN_STMT
  _33 = (sizetype) pos;
  _34 = dataPtr + _33;
  _35 = *_34;
  _36 = (long unsigned int) _35;
  tmpval = tmpval | _36;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _37 = (unsigned int) col;
  _38 = (unsigned int) bitsread;
  _39 = _37 + _38;
  _40 = Com_EB_ReadPropPtr->ComBitSize;
  _41 = (unsigned char) _40;
  _42 = (unsigned int) _41;
  _43 = _39 - _42;
  _44 = _43 + 1;
  _45 = tmpval >> _44;
  value = (uint16) _45;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _46 = Com_EB_ReadPropPtr->ComBitSize;
  _47 = (unsigned int) _46;
  _48 = 16 - _47;
  _49 = 65535 >> _48;
  mask = (const uint16) _49;
  # DEBUG BEGIN_STMT
  value = value & mask;
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_08_DL_E2 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 mask;
  uint8 bitsread;
  const uint8 space;
  uint16 tmpval;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint8 value;
  uint8 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = col + 1;
  # DEBUG BEGIN_STMT
  bitsread = 0;
  # DEBUG BEGIN_STMT
  if (col == 7)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = (sizetype) pos;
  _5 = dataPtr + _4;
  _6 = *_5;
  tmpval = (uint16) _6;
  # DEBUG BEGIN_STMT
  _7 = (int) tmpval;
  _8 = Com_EB_ReadPropPtr->ComBitSize;
  _9 = (unsigned int) _8;
  _10 = 8 - _9;
  _11 = _7 >> _10;
  value = (uint8) _11;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _12 = (sizetype) pos;
  _13 = dataPtr + _12;
  _14 = *_13;
  tmpval = (uint16) _14;
  # DEBUG BEGIN_STMT
  _15 = (short unsigned int) space;
  _16 = Com_EB_ReadPropPtr->ComBitSize;
  if (_15 < _16)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.30_17 = (unsigned short) pos;
  _18 = pos.30_17 + 1;
  pos = (sint16) _18;
  # DEBUG BEGIN_STMT
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = *_20;
  _22 = (short unsigned int) _21;
  tmpval = tmpval | _22;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _23 = (int) tmpval;
  _24 = (unsigned int) col;
  _25 = (unsigned int) bitsread;
  _26 = _24 + _25;
  _27 = Com_EB_ReadPropPtr->ComBitSize;
  _28 = (unsigned char) _27;
  _29 = (unsigned int) _28;
  _30 = _26 - _29;
  _31 = _30 + 1;
  _32 = _23 >> _31;
  value = (uint8) _32;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _33 = Com_EB_ReadPropPtr->ComBitSize;
  _34 = (unsigned int) _33;
  _35 = 8 - _34;
  _36 = 255 >> _35;
  mask = (const uint8) _36;
  # DEBUG BEGIN_STMT
  value = value & mask;
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_AY_DL_E1 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  uint16 pos;
  uint8 * U8Ptr;
  uint16 ii;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ii = 0;
  # DEBUG BEGIN_STMT
  U8Ptr = SignalDataPtr;

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  pos = ii + _1;
  # DEBUG BEGIN_STMT
  _2 = (sizetype) pos;
  _3 = dataPtr + _2;
  _4 = (sizetype) ii;
  _5 = U8Ptr + _4;
  _6 = *_3;
  *_5 = _6;
  # DEBUG BEGIN_STMT
  ii.31_7 = ii;
  ii = ii.31_7 + 1;
  # DEBUG BEGIN_STMT
  _8 = Com_EB_ReadPropPtr->ComBitSize;
  if (ii < _8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_64_DL_E1 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  struct ComSignalBaseType Com_EB_ReadProp_loc;
  struct ComEmu64Type * SignalDataPtr_loc;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SignalDataPtr_loc = SignalDataPtr;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComBitSize;
  if (_1 > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Com_EB_ReadProp_loc = *Com_EB_ReadPropPtr;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComBitSize;
  _3 = _2 + 65504;
  Com_EB_ReadProp_loc.ComBitSize = _3;
  # DEBUG BEGIN_STMT
  _4 = &SignalDataPtr_loc->HiWord;
  Com_EB_Read_32_DL_E1 (_4, dataPtr, &Com_EB_ReadProp_loc, retvalPtr);
  # DEBUG BEGIN_STMT
  _5 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _6 = Com_EB_ReadPropPtr->ComBitSize;
  _7 = _5 - _6;
  _8 = _7 + 32;
  Com_EB_ReadProp_loc.ComSignalPositionInBit = _8;
  # DEBUG BEGIN_STMT
  Com_EB_ReadProp_loc.ComBitSize = 32;
  # DEBUG BEGIN_STMT
  _9 = &SignalDataPtr_loc->LoWord;
  Com_EB_Read_32_DL_E1 (_9, dataPtr, &Com_EB_ReadProp_loc, retvalPtr);
  Com_EB_ReadProp_loc = {CLOBBER};
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _10 = &SignalDataPtr_loc->LoWord;
  Com_EB_Read_32_DL_E1 (_10, dataPtr, Com_EB_ReadPropPtr, retvalPtr);

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_32_DL_E1 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 tmp_val;
  const uint8 mask;
  const uint8 space;
  ComSignalBitSizeType size;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 value;
  uint32 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  value = 0;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  size = Com_EB_ReadPropPtr->ComBitSize;
  # DEBUG BEGIN_STMT
  if (col != 7)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  space = col + 1;
  # DEBUG BEGIN_STMT
  _4 = (unsigned int) col;
  _5 = 7 - _4;
  _6 = 255 >> _5;
  mask = (const uint8) _6;
  # DEBUG BEGIN_STMT
  _7 = (sizetype) pos;
  _8 = dataPtr + _7;
  _9 = *_8;
  tmp_val = mask & _9;
  # DEBUG BEGIN_STMT
  value = (uint32) tmp_val;
  # DEBUG BEGIN_STMT
  _10 = (short unsigned int) space;
  if (size <= _10)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _11 = (int) space;
  _12 = (int) size;
  _13 = _11 - _12;
  value = value >> _13;
  # DEBUG BEGIN_STMT
  size = 0;
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  pos.32_14 = (unsigned short) pos;
  _15 = pos.32_14 + 65535;
  pos = (sint16) _15;
  # DEBUG BEGIN_STMT
  _16 = (short unsigned int) space;
  size = size - _16;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  value = value << 8;
  # DEBUG BEGIN_STMT
  _17 = (sizetype) pos;
  _18 = dataPtr + _17;
  _19 = *_18;
  _20 = (long unsigned int) _19;
  value = value + _20;
  # DEBUG BEGIN_STMT
  size = size + 65528;
  # DEBUG BEGIN_STMT
  pos.33_21 = (unsigned short) pos;
  _22 = pos.33_21 + 65535;
  pos = (sint16) _22;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (size > 7)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (size != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _23 = (int) size;
  value = value << _23;
  # DEBUG BEGIN_STMT
  _24 = (sizetype) pos;
  _25 = dataPtr + _24;
  _26 = *_25;
  _27 = (long unsigned int) _26;
  _28 = (unsigned int) size;
  _29 = 8 - _28;
  _30 = _27 >> _29;
  value = value + _30;

  <bb 10> :
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_16_DL_E1 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint16 mask;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint32 tmpval;
  sint8 ssize;
  uint8 bitsread;
  uint16 value;
  uint16 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  bitsread = 0;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComBitSize;
  ssize = (sint8) _1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _2 / 8;
  # DEBUG BEGIN_STMT
  _3 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _4 = (unsigned char) _3;
  col = _4 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  if (col == 7)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  bitsread = 8;
  # DEBUG BEGIN_STMT
  _5 = (sizetype) pos;
  _6 = dataPtr + _5;
  _7 = *_6;
  tmpval = (uint32) _7;
  # DEBUG BEGIN_STMT
  ssize.34_8 = (unsigned char) ssize;
  _9 = ssize.34_8 + 248;
  ssize = (sint8) _9;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  ssize.35_10 = (unsigned char) ssize;
  _11 = ssize.35_10 + 248;
  ssize = (sint8) _11;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.36_12 = (unsigned short) pos;
  _13 = pos.36_12 + 65535;
  pos = (sint16) _13;
  # DEBUG BEGIN_STMT
  _14 = (sizetype) pos;
  _15 = dataPtr + _14;
  _16 = *_15;
  _17 = (long unsigned int) _16;
  tmpval = tmpval | _17;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _18 = (int) bitsread;
  _19 = Com_EB_ReadPropPtr->ComBitSize;
  _20 = (int) _19;
  _21 = _18 - _20;
  _22 = tmpval >> _21;
  value = (uint16) _22;
  goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _23 = (sizetype) pos;
  _24 = dataPtr + _23;
  _25 = *_24;
  tmpval = (uint32) _25;
  # DEBUG BEGIN_STMT
  ssize.37_26 = (unsigned char) ssize;
  _27 = ssize.37_26 - col;
  _28 = _27 + 255;
  ssize = (sint8) _28;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  ssize.38_29 = (unsigned char) ssize;
  _30 = ssize.38_29 + 248;
  ssize = (sint8) _30;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.39_31 = (unsigned short) pos;
  _32 = pos.39_31 + 65535;
  pos = (sint16) _32;
  # DEBUG BEGIN_STMT
  _33 = (sizetype) pos;
  _34 = dataPtr + _33;
  _35 = *_34;
  _36 = (long unsigned int) _35;
  tmpval = tmpval | _36;

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ssize > 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _37 = (unsigned int) col;
  _38 = (unsigned int) bitsread;
  _39 = _37 + _38;
  _40 = Com_EB_ReadPropPtr->ComBitSize;
  _41 = (unsigned char) _40;
  _42 = (unsigned int) _41;
  _43 = _39 - _42;
  _44 = _43 + 1;
  _45 = tmpval >> _44;
  value = (uint16) _45;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _46 = Com_EB_ReadPropPtr->ComBitSize;
  _47 = (unsigned int) _46;
  _48 = 16 - _47;
  _49 = 65535 >> _48;
  mask = (const uint16) _49;
  # DEBUG BEGIN_STMT
  value = value & mask;
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_Read_08_DL_E1 (void * SignalDataPtr, const uint8 * dataPtr, const struct ComSignalBaseType * Com_EB_ReadPropPtr, uint8 * retvalPtr)
{
  const uint8 mask;
  uint8 bitsread;
  const uint8 space;
  uint16 tmpval;
  sint16 pos;
  uint8 col;
  ComSignalDescBitType row;
  uint8 value;
  uint8 * retPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retPtr = SignalDataPtr;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  row = _1 / 8;
  # DEBUG BEGIN_STMT
  _2 = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  _3 = (unsigned char) _2;
  col = _3 & 7;
  # DEBUG BEGIN_STMT
  pos = (sint16) row;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  space = col + 1;
  # DEBUG BEGIN_STMT
  bitsread = 0;
  # DEBUG BEGIN_STMT
  if (col == 7)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = (sizetype) pos;
  _5 = dataPtr + _4;
  _6 = *_5;
  tmpval = (uint16) _6;
  # DEBUG BEGIN_STMT
  _7 = (int) tmpval;
  _8 = Com_EB_ReadPropPtr->ComBitSize;
  _9 = (unsigned int) _8;
  _10 = 8 - _9;
  _11 = _7 >> _10;
  value = (uint8) _11;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _12 = (sizetype) pos;
  _13 = dataPtr + _12;
  _14 = *_13;
  tmpval = (uint16) _14;
  # DEBUG BEGIN_STMT
  _15 = (short unsigned int) space;
  _16 = Com_EB_ReadPropPtr->ComBitSize;
  if (_15 < _16)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  bitsread = bitsread + 8;
  # DEBUG BEGIN_STMT
  tmpval = tmpval << 8;
  # DEBUG BEGIN_STMT
  pos.40_17 = (unsigned short) pos;
  _18 = pos.40_17 + 65535;
  pos = (sint16) _18;
  # DEBUG BEGIN_STMT
  _19 = (sizetype) pos;
  _20 = dataPtr + _19;
  _21 = *_20;
  _22 = (short unsigned int) _21;
  tmpval = tmpval | _22;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _23 = (int) tmpval;
  _24 = (unsigned int) col;
  _25 = (unsigned int) bitsread;
  _26 = _24 + _25;
  _27 = Com_EB_ReadPropPtr->ComBitSize;
  _28 = (unsigned char) _27;
  _29 = (unsigned int) _28;
  _30 = _26 - _29;
  _31 = _30 + 1;
  _32 = _23 >> _31;
  value = (uint8) _32;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _33 = Com_EB_ReadPropPtr->ComBitSize;
  _34 = (unsigned int) _33;
  _35 = 8 - _34;
  _36 = 255 >> _35;
  mask = (const uint8) _36;
  # DEBUG BEGIN_STMT
  value = value & mask;
  # DEBUG BEGIN_STMT
  *retPtr = value;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Com_IsValidConfig (const void * ConfigPtr)
{
  const struct Com_ConfigType * const TmpCfgPtr;
  Std_ReturnType retval;
  Std_ReturnType D.10756;

  <bb 2> :
  # DEBUG BEGIN_STMT
  retval = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (ConfigPtr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  TmpCfgPtr = ConfigPtr;
  # DEBUG BEGIN_STMT
  _1 = TmpCfgPtr->ComPlatformSignature;
  _2 = TS_PlatformSigIsValid (_1);
  if (_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = TmpCfgPtr->ComCfgSignature;
  if (_3 == 1285855334)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = TmpCfgPtr->ComLcfgSignature;
  Com_LcfgSignature.0_5 = Com_LcfgSignature;
  if (_4 == Com_LcfgSignature.0_5)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = TmpCfgPtr->ComPublicInfoSignature;
  if (_6 == 698836561)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  retval = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.10756 = retval;
  return D.10756;

}


Com_EB_CbkTxPrepDummyCbk ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_TxDMDummyCbk ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Com_ResetFilerOneEveryN (ComFilterRefType ComFilterRef)
{
  ComFilterOneEveryNSizeType * occurrencebase;
  const struct ComFilterOneEveryNType * ComFilterOneEveryNPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Com_gConfigPtr.365_1 = Com_gConfigPtr;
  Com_gConfigPtr.366_2 = Com_gConfigPtr;
  _3 = Com_gConfigPtr.366_2->ComFilterOneEveryNRef;
  _4 = (unsigned int) ComFilterRef;
  _5 = _4 * 6;
  _6 = _3 + _5;
  ComFilterOneEveryNPtr = Com_gConfigPtr.365_1 + _6;
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.367_7 = Com_gDataMemPtr;
  Com_gConfigPtr.368_8 = Com_gConfigPtr;
  _9 = Com_gConfigPtr.368_8->ComFilterOneEveryNBase;
  _10 = (sizetype) _9;
  occurrencebase = Com_gDataMemPtr.367_7 + _10;
  # DEBUG BEGIN_STMT
  _11 = ComFilterOneEveryNPtr->ComFilterOccurrence;
  _12 = (unsigned int) _11;
  _13 = _12 * 2;
  _14 = occurrencebase + _13;
  *_14 = 0;
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_SetBuffer (const struct ComSignalBaseType * Com_EB_ReadPropPtr)
{
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  sint32 sint32Val;
  sint32 * const bufferBaseSint32;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  sint16 sint16Val;
  sint16 * const bufferBaseSint16;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  sint8 sint8Val;
  sint8 * const bufferBaseSint8;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  uint32 uint32Val;
  uint32 * const bufferBaseUint32;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  uint16 uint16Val;
  uint16 * const bufferBaseUint16;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  uint8 uint8Val;
  uint8 * const bufferBaseUint8;
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  boolean boolVal;
  uint8 * const bufferBaseBool;
  const ComSignalBufferRefType ValueRef;
  const Com_TS_SignalTypeType SignalType;
  const uint8 * const dataPtr;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.343_1 = Com_gDataMemPtr;
  _2 = Com_EB_ReadPropPtr->ComBufferRef;
  _3 = (sizetype) _2;
  dataPtr = Com_gDataMemPtr.343_1 + _3;
  # DEBUG BEGIN_STMT
  _4 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  _5 = _4 >> 7;
  _6 = (unsigned char) _5;
  SignalType = _6 & 15;
  # DEBUG BEGIN_STMT
  ValueRef = Com_EB_ReadPropPtr->ComFilterConf.ComFilterSignalValueRef;
  # DEBUG BEGIN_STMT
  _7 = (int) SignalType;
  switch (_7) <default: <L16> [INV], case 0: <L0> [INV], case 1: <L8> [INV], case 2: <L9> [INV], case 3: <L7> [INV], case 4: <L5> [INV], case 5: <L6> [INV], case 6: <L4> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.344_8 = Com_gDataMemPtr;
  Com_gConfigPtr.345_9 = Com_gConfigPtr;
  _10 = Com_gConfigPtr.345_9->ComBufferBaseBool;
  _11 = (sizetype) _10;
  bufferBaseBool = Com_gDataMemPtr.344_8 + _11;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _12 & 63;
  # DEBUG BEGIN_STMT
  _13 = (int) index;
  fptr = Com_ReadFuncs[_13].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&boolVal, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  boolVal.346_14 = boolVal;
  if (boolVal.346_14 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _15 = ValueRef / 8;
  _16 = (sizetype) _15;
  _17 = bufferBaseBool + _16;
  _18 = (long unsigned int) ValueRef;
  _19 = _18 & 7;
  TS_AtomicSetBit_8 (_17, _19);
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _20 = ValueRef / 8;
  _21 = (sizetype) _20;
  _22 = bufferBaseBool + _21;
  _23 = (long unsigned int) ValueRef;
  _24 = _23 & 7;
  TS_AtomicClearBit_8 (_22, _24);

  <bb 6> :
  boolVal = {CLOBBER};
  retval = {CLOBBER};
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.347_25 = Com_gDataMemPtr;
  Com_gConfigPtr.348_26 = Com_gConfigPtr;
  _27 = Com_gConfigPtr.348_26->ComBufferBaseUInt8;
  _28 = (sizetype) _27;
  bufferBaseUint8 = Com_gDataMemPtr.347_25 + _28;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _29 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _29 & 63;
  # DEBUG BEGIN_STMT
  _30 = (int) index;
  fptr = Com_ReadFuncs[_30].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&uint8Val, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _31 = (sizetype) ValueRef;
  _32 = bufferBaseUint8 + _31;
  uint8Val.349_33 = uint8Val;
  *_32 = uint8Val.349_33;
  uint8Val = {CLOBBER};
  retval = {CLOBBER};
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.350_34 = Com_gDataMemPtr;
  Com_gConfigPtr.351_35 = Com_gConfigPtr;
  _36 = Com_gConfigPtr.351_35->ComBufferBaseUInt16;
  _37 = (sizetype) _36;
  bufferBaseUint16 = Com_gDataMemPtr.350_34 + _37;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _38 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _38 & 63;
  # DEBUG BEGIN_STMT
  _39 = (int) index;
  fptr = Com_ReadFuncs[_39].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&uint16Val, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _40 = (unsigned int) ValueRef;
  _41 = _40 * 2;
  _42 = bufferBaseUint16 + _41;
  uint16Val.352_43 = uint16Val;
  *_42 = uint16Val.352_43;
  uint16Val = {CLOBBER};
  retval = {CLOBBER};
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.353_44 = Com_gDataMemPtr;
  Com_gConfigPtr.354_45 = Com_gConfigPtr;
  _46 = Com_gConfigPtr.354_45->ComBufferBaseUInt32;
  _47 = (sizetype) _46;
  bufferBaseUint32 = Com_gDataMemPtr.353_44 + _47;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _48 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _48 & 63;
  # DEBUG BEGIN_STMT
  _49 = (int) index;
  fptr = Com_ReadFuncs[_49].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&uint32Val, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _50 = (unsigned int) ValueRef;
  _51 = _50 * 4;
  _52 = bufferBaseUint32 + _51;
  uint32Val.355_53 = uint32Val;
  *_52 = uint32Val.355_53;
  uint32Val = {CLOBBER};
  retval = {CLOBBER};
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.356_54 = Com_gDataMemPtr;
  Com_gConfigPtr.357_55 = Com_gConfigPtr;
  _56 = Com_gConfigPtr.357_55->ComBufferBaseSInt8;
  _57 = (sizetype) _56;
  bufferBaseSint8 = Com_gDataMemPtr.356_54 + _57;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _58 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _58 & 63;
  # DEBUG BEGIN_STMT
  _59 = (int) index;
  fptr = Com_ReadFuncs[_59].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&sint8Val, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _60 = (sizetype) ValueRef;
  _61 = bufferBaseSint8 + _60;
  sint8Val.358_62 = sint8Val;
  *_61 = sint8Val.358_62;
  sint8Val = {CLOBBER};
  retval = {CLOBBER};
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.359_63 = Com_gDataMemPtr;
  Com_gConfigPtr.360_64 = Com_gConfigPtr;
  _65 = Com_gConfigPtr.360_64->ComBufferBaseSInt16;
  _66 = (sizetype) _65;
  bufferBaseSint16 = Com_gDataMemPtr.359_63 + _66;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _67 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _67 & 63;
  # DEBUG BEGIN_STMT
  _68 = (int) index;
  fptr = Com_ReadFuncs[_68].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&sint16Val, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _69 = (unsigned int) ValueRef;
  _70 = _69 * 2;
  _71 = bufferBaseSint16 + _70;
  sint16Val.361_72 = sint16Val;
  *_71 = sint16Val.361_72;
  sint16Val = {CLOBBER};
  retval = {CLOBBER};
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 12> :
<L9>:
  # DEBUG BEGIN_STMT
  Com_gDataMemPtr.362_73 = Com_gDataMemPtr;
  Com_gConfigPtr.363_74 = Com_gConfigPtr;
  _75 = Com_gConfigPtr.363_74->ComBufferBaseSInt32;
  _76 = (sizetype) _75;
  bufferBaseSint32 = Com_gDataMemPtr.362_73 + _76;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _77 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _77 & 63;
  # DEBUG BEGIN_STMT
  _78 = (int) index;
  fptr = Com_ReadFuncs[_78].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&sint32Val, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _79 = (unsigned int) ValueRef;
  _80 = _79 * 4;
  _81 = bufferBaseSint32 + _80;
  sint32Val.364_82 = sint32Val;
  *_81 = sint32Val.364_82;
  sint32Val = {CLOBBER};
  retval = {CLOBBER};
  # DEBUG BEGIN_STMT

  <bb 13> :
<L16>:
  # DEBUG BEGIN_STMT
  return;

}


Com_EB_CalculateFilter (const struct ComSignalBaseType * Com_EB_ReadPropPtr, const uint8 * dataPtr, const struct ComFilterConfType * ComFilterPropPtr)
{
  const Com_TS_SignalTypeType SignalType;
  boolean FilterResult;
  boolean D.11620;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FilterResult = 0;
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  _2 = _1 >> 7;
  _3 = (unsigned char) _2;
  SignalType = _3 & 15;
  # DEBUG BEGIN_STMT
  _4 = (int) SignalType;
  switch (_4) <default: <L12> [INV], case 0: <L0> [INV], case 1: <L5> [INV], case 2: <L6> [INV], case 3: <L4> [INV], case 4: <L2> [INV], case 5: <L3> [INV], case 6: <L1> [INV], case 9: <L8> [INV], case 10: <L7> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  FilterResult = Com_EB_CalculateFilter_Bool (Com_EB_ReadPropPtr, dataPtr, ComFilterPropPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  FilterResult = Com_EB_CalculateFilter_Uint8 (Com_EB_ReadPropPtr, dataPtr, ComFilterPropPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  FilterResult = Com_EB_CalculateFilter_Uint16 (Com_EB_ReadPropPtr, dataPtr, ComFilterPropPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  FilterResult = Com_EB_CalculateFilter_Uint32 (Com_EB_ReadPropPtr, dataPtr, ComFilterPropPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  FilterResult = Com_EB_CalculateFilter_Sint8 (Com_EB_ReadPropPtr, dataPtr, ComFilterPropPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  FilterResult = Com_EB_CalculateFilter_Sint16 (Com_EB_ReadPropPtr, dataPtr, ComFilterPropPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  FilterResult = Com_EB_CalculateFilter_Sint32 (Com_EB_ReadPropPtr, dataPtr, ComFilterPropPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  FilterResult = Com_EB_CalculateFilter_Sint64 (Com_EB_ReadPropPtr, dataPtr, ComFilterPropPtr);
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  FilterResult = Com_EB_CalculateFilter_Uint64 (Com_EB_ReadPropPtr, dataPtr, ComFilterPropPtr);
  # DEBUG BEGIN_STMT

  <bb 12> :
<L12>:
  # DEBUG BEGIN_STMT
  D.11620 = FilterResult;
  return D.11620;

}


Com_EB_CalculateFilter_Sint64 (const struct ComSignalBaseType * Com_EB_ReadPropPtr, const uint8 * dataPtr, const struct ComFilterConfType * ComFilterPropPtr)
{
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  struct ComEmu64Type value;
  boolean D.11644;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 63;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&value, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.11644 = Com_EB_FilterSint64 (ComFilterPropPtr, &value);
  value = {CLOBBER};
  retval = {CLOBBER};
  return D.11644;

}


Com_EB_CalculateFilter_Uint64 (const struct ComSignalBaseType * Com_EB_ReadPropPtr, const uint8 * dataPtr, const struct ComFilterConfType * ComFilterPropPtr)
{
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  struct ComEmu64Type value;
  boolean D.11647;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 63;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&value, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.11647 = Com_EB_FilterUint64 (ComFilterPropPtr, &value);
  value = {CLOBBER};
  retval = {CLOBBER};
  return D.11647;

}


Com_EB_CalculateFilter_Sint32 (const struct ComSignalBaseType * Com_EB_ReadPropPtr, const uint8 * dataPtr, const struct ComFilterConfType * ComFilterPropPtr)
{
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  sint32 value;
  boolean D.11641;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 63;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&value, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.11641 = Com_EB_FilterSint32 (ComFilterPropPtr, &value);
  value = {CLOBBER};
  retval = {CLOBBER};
  return D.11641;

}


Com_EB_CalculateFilter_Sint16 (const struct ComSignalBaseType * Com_EB_ReadPropPtr, const uint8 * dataPtr, const struct ComFilterConfType * ComFilterPropPtr)
{
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  sint16 value;
  boolean D.11638;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 63;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&value, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.11638 = Com_EB_FilterSint16 (ComFilterPropPtr, &value);
  value = {CLOBBER};
  retval = {CLOBBER};
  return D.11638;

}


Com_EB_CalculateFilter_Sint8 (const struct ComSignalBaseType * Com_EB_ReadPropPtr, const uint8 * dataPtr, const struct ComFilterConfType * ComFilterPropPtr)
{
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  sint8 value;
  boolean D.11635;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 63;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&value, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.11635 = Com_EB_FilterSint8 (ComFilterPropPtr, &value);
  value = {CLOBBER};
  retval = {CLOBBER};
  return D.11635;

}


Com_EB_CalculateFilter_Uint32 (const struct ComSignalBaseType * Com_EB_ReadPropPtr, const uint8 * dataPtr, const struct ComFilterConfType * ComFilterPropPtr)
{
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  uint32 value;
  boolean D.11632;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 63;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&value, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.11632 = Com_EB_FilterUint32 (ComFilterPropPtr, &value);
  value = {CLOBBER};
  retval = {CLOBBER};
  return D.11632;

}


Com_EB_CalculateFilter_Uint16 (const struct ComSignalBaseType * Com_EB_ReadPropPtr, const uint8 * dataPtr, const struct ComFilterConfType * ComFilterPropPtr)
{
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  uint16 value;
  boolean D.11629;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 63;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&value, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.11629 = Com_EB_FilterUint16 (ComFilterPropPtr, &value);
  value = {CLOBBER};
  retval = {CLOBBER};
  return D.11629;

}


Com_EB_CalculateFilter_Uint8 (const struct ComSignalBaseType * Com_EB_ReadPropPtr, const uint8 * dataPtr, const struct ComFilterConfType * ComFilterPropPtr)
{
  const uint16 index;
  void (*<T694>) (void *, const uint8 *, const struct ComSignalBaseType *, uint8 *) fptr;
  uint8 retval;
  uint8 value;
  boolean D.11626;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  retval = 128;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Com_EB_ReadPropPtr->ComRxSignalFlags;
  index = _1 & 63;
  # DEBUG BEGIN_STMT
  _2 = (int) index;
  fptr = Com_ReadFuncs[_2].Read;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  fptr (&value, dataPtr, Com_EB_ReadPropPtr, &retval);
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.11626 = Com_EB_FilterUint8 (ComFilterPropPtr, &value);
  value = {CLOBBER};
  retval = {CLOBBER};
  return D.11626;

}


Com_EB_CalculateFilter_Bool (const struct ComSignalBaseType * Com_EB_ReadPropPtr, const uint8 * dataPtr, const struct ComFilterConfType * ComFilterPropPtr)
{
  uint8 tmp_val;
  uint8 MSB;
  const ComSignalDescBitType ComSignalPosition;
  boolean D.11623;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ComSignalPosition = Com_EB_ReadPropPtr->ComSignalPositionInBit;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = ComSignalPosition / 8;
  _2 = (sizetype) _1;
  _3 = dataPtr + _2;
  _4 = *_3;
  tmp_val = _4;
  # DEBUG BEGIN_STMT
  tmp_val.578_5 = tmp_val;
  _6 = (int) tmp_val.578_5;
  _7 = (unsigned int) ComSignalPosition;
  _8 = _7 & 7;
  _9 = _6 >> _8;
  _10 = (unsigned char) _9;
  _11 = _10 & 1;
  MSB = _11;
  # DEBUG BEGIN_STMT
  D.11623 = Com_EB_FilterBoolean (ComFilterPropPtr, &MSB);
  MSB = {CLOBBER};
  tmp_val = {CLOBBER};
  return D.11623;

}


