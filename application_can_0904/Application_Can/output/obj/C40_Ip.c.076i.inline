IPA function summary for C40_Ip_GetSectorNumberFromAddress.part.0/108 inlinable
  global time:     6.300000
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:5.000000, time:4.300000,  nonconst if:(op0 changed)
  calls:

IPA function summary for C40_Ip_ClearLockProtect.part.0/104 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_GetLock.part.0/103 inlinable
  global time:     16.000000
  self size:       8
  global size:     8
  min size:       6
  self stack:      0
  global stack:    0
    size:2.000000, time:2.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_GetLockProtect/29 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size:11 stack: 0

IPA function summary for C40_Ip_SetLockProtect.part.0/102 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_CheckSelecBlock.part.0/93 inlinable
  global time:     5.320000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.320000,  executed if:(op0 != 268435456),  nonconst if:(op0 changed) && (op0 != 268435456)
  calls:

IPA function summary for C40_Ip_UTestCheckBreakpoint.part.0/92 inlinable
  global time:     12.000000
  self size:       13
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:10.000000, time:10.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_UTestCheckBusy.part.0/91 inlinable
  global time:     14.000000
  self size:       17
  global size:     17
  min size:       0
  self stack:      0
  global stack:    0
    size:14.000000, time:12.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_MainInterfaceHVJobStatus.part.0/90 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_SetSeedMisr.part.0/79 inlinable
  global time:     41.000000
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:5.000000, time:39.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_CheckReadCompareStatus.isra.0/78 inlinable
  global time:     9.330000
  self size:       14
  global size:     14
  min size:       0
  self stack:      0
  global stack:    0
    size:8.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.330000,  executed if:(op0 != 1)
  calls:

IPA function summary for C40_Ip_FlashAccessCalloutFinish/72 inlinable
  global time:     16.500000
  self size:       10
  global size:     10
  min size:       6
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:0.70 size: 3 time: 15

IPA function summary for C40_Ip_FlashAccessCalloutStart/71 inlinable
  global time:     16.500000
  self size:       10
  global size:     10
  min size:       6
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:0.70 size: 3 time: 15

IPA function summary for C40_Ip_SetAsyncMode/70 inlinable
  global time:     3.000000
  self size:       4
  global size:     4
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_GetFailedAddress/69 inlinable
  global time:     15.820000
  self size:       29
  global size:     29
  min size:       0
  self stack:      0
  global stack:    0
    size:26.000000, time:13.820000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_UserMarginReadCheck/68 inlinable
  global time:     30.523288
  self size:       61
  global size:     61
  min size:       26
  self stack:      0
  global stack:    0
    size:35.000000, time:8.243249
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.015173,  nonconst if:(op2 changed)
    size:3.000000, time:0.015021,  executed if:(op2 != 1)
    size:3.000000, time:0.007738,  executed if:(op2 == 1)
  calls:
    C40_Ip_SetSeedMisr/21 function not considered for inlining
      loop depth: 0 freq:0.01 size: 2 time: 11callee size: 6 stack: 0
    C40_Ip_UTestCheckBreakpoint/59 function not considered for inlining
      loop depth: 0 freq:0.01 size: 2 time: 11callee size:13 stack: 0
    C40_Ip_MainInterfaceWriteJobAddress/38 function not considered for inlining
      loop depth: 0 freq:0.06 size: 4 time: 13callee size: 4 stack: 0
    C40_Ip_UTestCheckBusy/58 function not considered for inlining
      loop depth: 0 freq:0.48 size: 2 time: 11callee size:14 stack: 0
    C40_Ip_CheckSelecBlock/61 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 5 stack: 0

IPA function summary for C40_Ip_ArrayIntegrityCheckResume/67 inlinable
  global time:     14.845167
  self size:       19
  global size:     19
  min size:       8
  self stack:      0
  global stack:    0
    size:12.000000, time:8.673760
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_ArrayIntegrityResumeBroken/66 function not considered for inlining
      loop depth: 0 freq:0.25 size: 2 time: 11callee size:12 stack: 0
    C40_Ip_ArrayIntegrityResumeSuppened/65 function not considered for inlining
      loop depth: 0 freq:0.13 size: 2 time: 11callee size:10 stack: 0

IPA function summary for C40_Ip_ArrayIntegrityResumeBroken/66 inlinable
  global time:     120.904578
  self size:       25
  global size:     25
  min size:       0
  self stack:      0
  global stack:    0
    size:22.000000, time:118.904578
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_ArrayIntegrityResumeSuppened/65 inlinable
  global time:     116.904578
  self size:       21
  global size:     21
  min size:       0
  self stack:      0
  global stack:    0
    size:18.000000, time:114.904578
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_ArrayIntegrityCheckSuspend/64 inlinable
  global time:     36.726145
  self size:       29
  global size:     29
  min size:       0
  self stack:      0
  global stack:    0
    size:26.000000, time:34.726145
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_CheckUserTestStatusExecution/63 inlinable
  global time:     62.747157
  self size:       34
  global size:     34
  min size:       0
  self stack:      0
  global stack:    0
    size:28.500000, time:56.062124
    size:4.500000, time:5.685033,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 288] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 288] changed)
  calls:

IPA function summary for C40_Ip_CheckUserTestStatus/62 inlinable
  global time:     13.635626
  self size:       25
  global size:     25
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.625000,  executed if:(op0 != 0B),  nonconst if:(op1 changed) && (op0 != 0B)
    size:1.000000, time:0.402917,  executed if:(op1 != 0B) && (op0 != 0B) && (not inlined)
    size:13.000000, time:5.875612,  executed if:(op1 != 0B) && (op0 != 0B)
  calls:
    C40_Ip_CheckUserTestStatusExecution/63 function not considered for inlining
      loop depth: 0 freq:0.13 size: 4 time: 13callee size:17 stack: 0 predicate: (op1 != 0B) && (op0 != 0B)

IPA function summary for C40_Ip_CheckSelecBlock/61 inlinable
  global time:     10.547200
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.320000,  executed if:(op0 != 4194304),  nonconst if:(op0 changed) && (op0 != 4194304)
  calls:
    C40_Ip_CheckSelecBlock.part.0/93 function not considered for inlining
      loop depth: 0 freq:0.44 size: 3 time: 12callee size: 3 stack: 0 predicate: (op0 != 5242880) && (op0 != 4194304)

IPA function summary for C40_Ip_ArrayIntegrityCheck/60 inlinable
  global time:     29.957965
  self size:       55
  global size:     55
  min size:       26
  self stack:      0
  global stack:    0
    size:29.000000, time:7.512626
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.027417,  nonconst if:(op1 changed)
    size:3.000000, time:0.027143,  executed if:(op1 != 1)
    size:3.000000, time:0.013983,  executed if:(op1 == 1)
  calls:
    C40_Ip_SetSeedMisr/21 function not considered for inlining
      loop depth: 0 freq:0.01 size: 2 time: 11callee size: 6 stack: 0
    C40_Ip_UTestCheckBreakpoint/59 function not considered for inlining
      loop depth: 0 freq:0.01 size: 2 time: 11callee size:13 stack: 0
    C40_Ip_MainInterfaceWriteJobAddress/38 function not considered for inlining
      loop depth: 0 freq:0.06 size: 4 time: 13callee size: 4 stack: 0
    C40_Ip_UTestCheckBusy/58 function not considered for inlining
      loop depth: 0 freq:0.48 size: 2 time: 11callee size:14 stack: 0
    C40_Ip_CheckSelecBlock/61 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 5 stack: 0

IPA function summary for C40_Ip_UTestCheckBreakpoint/59 inlinable
  global time:     12.665933
  self size:       26
  global size:     26
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:1.999800
    size:3.000000, time:1.999800,  executed if:(not inlined)
    size:6.000000, time:2.000000,  nonconst if:(op0 changed)
    size:10.000000, time:3.333000,  executed if:(op0 == 1)
  calls:
    C40_Ip_UTestCheckBreakpoint.part.0/92 function not considered for inlining
      loop depth: 0 freq:0.33 size: 1 time: 10callee size: 6 stack: 0 predicate: (op0 == 0)

IPA function summary for C40_Ip_UTestCheckBusy/58 inlinable
  global time:     39.476144
  self size:       29
  global size:     29
  min size:       4
  self stack:      0
  global stack:    0
    size:24.000000, time:34.726145
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_UTestCheckBusy.part.0/91 function not considered for inlining
      loop depth: 0 freq:0.25 size: 2 time: 11callee size: 8 stack: 0

IPA function summary for C40_Ip_GetBlockNumberFromAddress/57 inlinable
  global time:     11.513000
  self size:       15
  global size:     15
  min size:       6
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:9.000000, time:6.217500,  nonconst if:(op0 changed)
  calls:
    C40_Ip_GetCodeBlockNumber/56 function not considered for inlining
      loop depth: 0 freq:0.27 size: 3 time: 12callee size: 3 stack: 0

IPA function summary for C40_Ip_GetCodeBlockNumber/56 inlinable
  global time:     5.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 > 5242879),  nonconst if:(op0 changed) && (op0 > 5242879)
  calls:

IPA function summary for C40_Ip_GetSectorNumberFromAddress/55 inlinable
  global time:     11.175000
  self size:       13
  global size:     13
  min size:       6
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:7.000000, time:5.275000,  nonconst if:(op0 changed)
  calls:
    C40_Ip_GetSectorNumberFromAddress.part.0/108 function not considered for inlining
      loop depth: 0 freq:0.33 size: 3 time: 12callee size: 4 stack: 0

IPA function summary for C40_Ip_CheckLockDomainID_CheckRegister/54 inlinable
  global time:     13.140000
  self size:       33
  global size:     33
  min size:       0
  self stack:      0
  global stack:    0
    size:2.000000, time:2.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 > 15),  nonconst if:(op0 changed) && (op0 > 15)
    size:7.000000, time:1.980000,  executed if:(op0 != 272) && (op0 > 15),  nonconst if:(op0 changed) && (op0 != 272) && (op0 > 15)
    size:8.000000, time:1.320000,  executed if:(op0 != 272) && (op0 > 15)
    size:2.000000, time:0.330000,  executed if:(op0 != 272) && (op0 > 15) && (not inlined)
    size:2.000000, time:0.340000,  executed if:(op0 == 272) && (op0 > 15)
    size:1.000000, time:0.170000,  executed if:(op0 == 272) && (op0 > 15) && (not inlined)
    size:3.000000, time:1.500000,  executed if:(op0 <= 15)
    size:1.000000, time:0.500000,  executed if:(op0 <= 15) && (not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for C40_Ip_GetBaseAddressOfSector/53 inlinable
  global time:     9.000000
  self size:       18
  global size:     18
  min size:       0
  self stack:      4
  global stack:    4
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 > 15),  nonconst if:(op0 changed) && (op0 > 15)
    size:2.000000, time:0.500000,  executed if:(op0 > 271) && (op0 > 15),  nonconst if:(op0 changed) && (op0 > 271) && (op0 > 15)
    size:1.000000, time:0.165000,  executed if:(op0 != 272) && (op0 > 271) && (op0 > 15)
    size:1.000000, time:0.085000,  executed if:(op0 == 272) && (op0 > 271) && (op0 > 15)
    size:2.000000, time:0.500000,  executed if:(op0 <= 271) && (op0 > 15),  nonconst if:(op0 changed) && (op0 <= 271) && (op0 > 15)
    size:1.000000, time:0.250000,  executed if:(op0 <= 271) && (op0 > 15)
    size:2.000000, time:1.000000,  executed if:(op0 <= 15),  nonconst if:(op0 changed) && (op0 <= 15)
    size:1.000000, time:0.500000,  executed if:(op0 <= 15)
  calls:

IPA function summary for C40_Ip_CheckLockDomainID/52 inlinable
  global time:     21.770000
  self size:       28
  global size:     28
  min size:       0
  self stack:      8
  global stack:    8
    size:14.000000, time:9.500000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:4.000000, time:4.000000,  nonconst if:(op0 changed)
    size:3.000000, time:1.980000,  executed if:(op0 != 272)
  calls:
    C40_Ip_CheckLockDomainID_CheckRegister/54 function not considered for inlining
      loop depth: 0 freq:0.33 size: 4 time: 13callee size:16 stack: 0 predicate: (op0 <= 272)
       op1 is compile time invariant
       op2 is compile time invariant

IPA function summary for C40_Ip_GetSectorID/51 inlinable
  global time:     8.650000
  self size:       18
  global size:     18
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 > 15),  nonconst if:(op0 changed) && (op0 > 15)
    size:6.000000, time:1.650000,  executed if:(op0 != 272) && (op0 > 15),  nonconst if:(op0 changed) && (op0 != 272) && (op0 > 15)
    size:2.000000, time:0.330000,  executed if:(op0 != 272) && (op0 > 15)
    size:1.000000, time:0.170000,  executed if:(op0 == 272) && (op0 > 15)
    size:1.000000, time:0.500000,  executed if:(op0 <= 15)
  calls:

IPA function summary for C40_Ip_MainInterfaceHVJobStatus/50 inlinable
  global time:     11.500000
  self size:       9
  global size:     9
  min size:       4
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_MainInterfaceHVJobStatus.part.0/90 function not considered for inlining
      loop depth: 0 freq:0.50 size: 2 time: 11callee size: 3 stack: 0

IPA function summary for C40_Ip_MainInterfaceWriteStatus/49 inlinable
  global time:     22.818096
  self size:       25
  global size:     25
  min size:       14
  self stack:      0
  global stack:    0
    size:15.000000, time:7.947920
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_Compare/32 function not considered for inlining
      loop depth: 0 freq:0.13 size: 5 time: 14callee size: 8 stack: 0
    C40_Ip_MainInterfaceHVJobStatus/50 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0

IPA function summary for C40_Ip_MainInterfaceWrite/48 inlinable
  global time:     37.176339
  self size:       50
  global size:     50
  min size:       42
  self stack:      0
  global stack:    0
    size:24.000000, time:10.505329
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:0.404800,  nonconst if:(op0 changed)
  calls:
    C40_Ip_FlashAccessCalloutStart/71 function not considered for inlining
      loop depth: 0 freq:0.04 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_MainInterfaceFillDataBuff/46 function not considered for inlining
      loop depth: 0 freq:0.20 size: 4 time: 13callee size:30 stack: 4
    C40_Ip_ClearInterlockWrite/47 function not considered for inlining
      loop depth: 0 freq:0.02 size: 1 time: 10callee size: 7 stack: 0
    C40_Ip_MainInterfaceWriteJobAddress/38 function not considered for inlining
      loop depth: 0 freq:0.18 size: 4 time: 13callee size: 4 stack: 0
    C40_Ip_ClearAllErrorFlagsMainInterface/41 function not considered for inlining
      loop depth: 0 freq:0.18 size: 1 time: 10callee size: 3 stack: 0
    C40_Ip_Compare/32 function not considered for inlining
      loop depth: 0 freq:0.20 size: 5 time: 14callee size: 8 stack: 0
       op2 is compile time invariant
    C40_Ip_MainInterfaceWritePreCheck/45 function not considered for inlining
      loop depth: 0 freq:1.00 size: 5 time: 14callee size:15 stack: 0

IPA function summary for C40_Ip_ClearInterlockWrite/47 inlinable
  global time:     45.363637
  self size:       14
  global size:     14
  min size:       0
  self stack:      0
  global stack:    0
    size:11.000000, time:43.363637
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_MainInterfaceFillDataBuff/46 inlinable
  global time:     250.454546
  self size:       60
  global size:     60
  min size:       0
  self stack:      4
  global stack:    4
    size:54.000000, time:245.454546
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:3.000000, time:3.000000,  nonconst if:(op1 changed)
  calls:

IPA function summary for C40_Ip_MainInterfaceWritePreCheck/45 inlinable
  global time:     19.742658
  self size:       30
  global size:     30
  min size:       6
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:3.000000, time:3.000000,  nonconst if:(op0 changed)
    size:5.000000, time:2.000000,  nonconst if:(op1 changed)
    size:2.000000, time:0.250000,  executed if:(op1 <= 128),  nonconst if:(op1 changed) && (op1 <= 128)
    size:2.000000, time:0.125000,  executed if:(op1 != 0) && (op1 <= 128),  nonconst if:(op2 changed) && (op1 != 0) && (op1 <= 128)
    size:9.000000, time:0.258772,  executed if:(op2 != 0B) && (op1 != 0) && (op1 <= 128)
  calls:
    C40_Ip_GetLock/28 function not considered for inlining
      loop depth: 0 freq:0.01 size: 3 time: 12callee size: 4 stack: 0 predicate: (op2 != 0B) && (op1 != 0) && (op1 <= 128)
    C40_Ip_GetSectorNumberFromAddress/55 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 6 stack: 0

IPA function summary for C40_Ip_MainInterfaceSectorEraseStatus/44 inlinable
  global time:     22.550928
  self size:       23
  global size:     23
  min size:       10
  self stack:      0
  global stack:    0
    size:15.000000, time:7.947920
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_EraseVerify/36 function not considered for inlining
      loop depth: 0 freq:0.13 size: 3 time: 12callee size:12 stack: 1
       op1 is compile time invariant
    C40_Ip_MainInterfaceHVJobStatus/50 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0

IPA function summary for C40_Ip_MainInterfaceSectorErase/43 inlinable
  global time:     30.229093
  self size:       36
  global size:     36
  min size:       26
  self stack:      0
  global stack:    0
    size:20.000000, time:8.213648
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_FlashAccessCalloutStart/71 function not considered for inlining
      loop depth: 0 freq:0.07 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_ClearInterlockWrite/47 function not considered for inlining
      loop depth: 0 freq:0.02 size: 1 time: 10callee size: 7 stack: 0
    C40_Ip_MainInterfaceWriteJobAddress/38 function not considered for inlining
      loop depth: 0 freq:0.20 size: 4 time: 13callee size: 4 stack: 0
    C40_Ip_GetBaseAddressOfSector/53 function not considered for inlining
      loop depth: 0 freq:0.20 size: 3 time: 12callee size: 9 stack: 4
    C40_Ip_ClearAllErrorFlagsMainInterface/41 function not considered for inlining
      loop depth: 0 freq:0.20 size: 1 time: 10callee size: 3 stack: 0
    C40_Ip_MainInterfaceSectorErasePreCheck/42 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 8 stack: 0

IPA function summary for C40_Ip_MainInterfaceSectorErasePreCheck/42 inlinable
  global time:     8.201800
  self size:       17
  global size:     17
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:9.000000, time:2.957400,  executed if:(op0 <= 272)
  calls:
    C40_Ip_GetLock/28 function not considered for inlining
      loop depth: 0 freq:0.10 size: 3 time: 12callee size: 4 stack: 0 predicate: (op0 <= 272)

IPA function summary for C40_Ip_ClearAllErrorFlagsMainInterface/41 inlinable
  global time:     5.000000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_MainInterfaceAbort/40 inlinable
  global time:     44.363637
  self size:       13
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:10.000000, time:42.363637
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_InitMainInterface/39 inlinable
  global time:     29.000000
  self size:       12
  global size:     12
  min size:       6
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_ClearAllErrorFlagsMainInterface/41 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 3 stack: 0
    C40_Ip_MainInterfaceAbort/40 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0

IPA function summary for C40_Ip_MainInterfaceWriteJobAddress/38 inlinable
  global time:     47.454546
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:5.000000, time:45.454546
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_MainInterfaceWriteLogicalAddress/37 inlinable
  global time:     3.000000
  self size:       4
  global size:     4
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_EraseVerify/36 inlinable
  global time:     591.366090
  self size:       24
  global size:     24
  min size:       22
  self stack:      1
  global stack:    1
    size:10.000000, time:65.879294
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_CheckReadCompareStatus.isra.0/78 function not considered for inlining
      loop depth: 1 freq:9.35 size: 3 time: 12callee size: 7 stack: 0
    C40_Ip_FlashAccessCalloutFinish/72 function not considered for inlining
      loop depth: 1 freq:9.35 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_CompareBlank/35 function not considered for inlining
      loop depth: 1 freq:9.35 size: 5 time: 14callee size:11 stack: 0
       op2 is compile time invariant
    C40_Ip_FlashAccessCalloutStart/71 function not considered for inlining
      loop depth: 1 freq:9.35 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_ClearAllErrorFlagsMainInterface/41 function not considered for inlining
      loop depth: 1 freq:9.35 size: 1 time: 10callee size: 3 stack: 0

IPA function summary for C40_Ip_CompareBlank/35 inlinable
  global time:     12.300000
  self size:       22
  global size:     22
  min size:       0
  self stack:      0
  global stack:    0
    size:2.500000, time:1.612256
    size:3.500000, time:2.322451,  executed if:(not inlined)
    size:6.000000, time:5.475000,  nonconst if:(op0 changed)
    size:4.000000, time:1.825000,  nonconst if:(op1 changed)
    size:2.500000, time:0.450244,  executed if:(op1 > 1)
    size:0.500000, time:0.090049,  executed if:(op1 > 1) && (not inlined)
    size:2.500000, time:0.437500,  executed if:(op1 > 3)
    size:0.500000, time:0.087500,  executed if:(op1 > 3) && (not inlined)
  calls:

IPA function summary for C40_Ip_ProgramVerify/34 inlinable
  global time:     609.547908
  self size:       26
  global size:     26
  min size:       24
  self stack:      1
  global stack:    1
    size:11.000000, time:74.713134
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_CheckReadCompareStatus.isra.0/78 function not considered for inlining
      loop depth: 1 freq:9.35 size: 3 time: 12callee size: 7 stack: 0
    C40_Ip_FlashAccessCalloutFinish/72 function not considered for inlining
      loop depth: 1 freq:9.35 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_CompareData/33 function not considered for inlining
      loop depth: 1 freq:9.35 size: 6 time: 15callee size:13 stack: 0
       op3 is compile time invariant
    C40_Ip_FlashAccessCalloutStart/71 function not considered for inlining
      loop depth: 1 freq:9.35 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_ClearAllErrorFlagsMainInterface/41 function not considered for inlining
      loop depth: 1 freq:9.35 size: 1 time: 10callee size: 3 stack: 0

IPA function summary for C40_Ip_CompareData/33 inlinable
  global time:     14.300000
  self size:       26
  global size:     26
  min size:       0
  self stack:      0
  global stack:    0
    size:3.500000, time:2.257159
    size:3.500000, time:2.322451,  executed if:(not inlined)
    size:7.000000, time:6.475000,  nonconst if:(op0 changed || op1 changed)
    size:4.000000, time:1.825000,  nonconst if:(op2 changed)
    size:3.500000, time:0.630341,  executed if:(op2 > 1)
    size:0.500000, time:0.090049,  executed if:(op2 > 1) && (not inlined)
    size:3.500000, time:0.612500,  executed if:(op2 > 3)
    size:0.500000, time:0.087500,  executed if:(op2 > 3) && (not inlined)
  calls:

IPA function summary for C40_Ip_Compare/32 inlinable
  global time:     13.350000
  self size:       17
  global size:     17
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:0.500000,  executed if:(op1 != 0)
    size:2.000000, time:1.000000,  executed if:(op1 != 0),  nonconst if:(op2 changed) && (op1 != 0)
    size:1.000000, time:0.500000,  executed if:(op1 == 0)
  calls:
    C40_Ip_EraseVerify/36 function not considered for inlining
      loop depth: 0 freq:0.15 size: 3 time: 12callee size:12 stack: 1 predicate: (op2 == 0B) && (op1 != 0)
    C40_Ip_ProgramVerify/34 function not considered for inlining
      loop depth: 0 freq:0.35 size: 4 time: 13callee size:13 stack: 1 predicate: (op2 != 0B) && (op1 != 0)

IPA function summary for C40_Ip_ClearLockProtect/31 inlinable
  global time:     12.500000
  self size:       28
  global size:     28
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 > 15),  nonconst if:(op0 changed) && (op0 > 15)
    size:5.000000, time:1.650000,  executed if:(op0 != 272) && (op0 > 15),  nonconst if:(op0 changed) && (op0 != 272) && (op0 > 15)
    size:10.000000, time:1.650000,  executed if:(op0 != 272) && (op0 > 15)
    size:5.000000, time:2.500000,  executed if:(op0 <= 15)
  array index:(op0 changed)
  calls:
    C40_Ip_ClearLockProtect.part.0/104 function not considered for inlining
      loop depth: 0 freq:0.17 size: 1 time: 10callee size: 4 stack: 0 predicate: (op0 == 272) && (op0 > 15)

IPA function summary for C40_Ip_ClearLock/30 inlinable
  global time:     24.211266
  self size:       18
  global size:     18
  min size:       18
  self stack:      0
  global stack:    0
    size:6.000000, time:4.164404
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_ClearLockProtect/31 function not considered for inlining
      loop depth: 0 freq:0.05 size: 2 time: 11callee size:14 stack: 0
    C40_Ip_CheckLockDomainID/52 function not considered for inlining
      loop depth: 0 freq:0.42 size: 4 time: 13callee size:14 stack: 8
    C40_Ip_GetLock/28 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 4 stack: 0

IPA function summary for C40_Ip_GetLockProtect/29 inlinable
  global time:     23.650000
  self size:       23
  global size:     23
  min size:       6
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 > 15),  nonconst if:(op0 changed) && (op0 > 15)
    size:5.000000, time:1.650000,  executed if:(op0 != 272) && (op0 > 15),  nonconst if:(op0 changed) && (op0 != 272) && (op0 > 15)
    size:2.000000, time:0.330000,  executed if:(op0 != 272) && (op0 > 15)
    size:1.000000, time:0.170000,  executed if:(op0 == 272) && (op0 > 15)
    size:1.000000, time:0.500000,  executed if:(op0 <= 15)
  array index:(op0 changed)
  calls:
    C40_Ip_GetSectorID/51 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 9 stack: 0

IPA function summary for C40_Ip_GetLock/28 inlinable
  global time:     7.960000
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    C40_Ip_GetLock.part.0/103 function not considered for inlining
      loop depth: 0 freq:0.33 size: 3 time: 12callee size: 4 stack: 0 predicate: (op0 <= 272)

IPA function summary for C40_Ip_SetLockProtect/27 inlinable
  global time:     11.670000
  self size:       25
  global size:     25
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 > 15),  nonconst if:(op0 changed) && (op0 > 15)
    size:5.000000, time:1.650000,  executed if:(op0 != 272) && (op0 > 15),  nonconst if:(op0 changed) && (op0 != 272) && (op0 > 15)
    size:8.000000, time:1.320000,  executed if:(op0 != 272) && (op0 > 15)
    size:4.000000, time:2.000000,  executed if:(op0 <= 15)
  array index:(op0 changed)
  calls:
    C40_Ip_SetLockProtect.part.0/102 function not considered for inlining
      loop depth: 0 freq:0.17 size: 1 time: 10callee size: 3 stack: 0 predicate: (op0 == 272) && (op0 > 15)

IPA function summary for C40_Ip_SetLock/26 inlinable
  global time:     24.211266
  self size:       18
  global size:     18
  min size:       18
  self stack:      0
  global stack:    0
    size:6.000000, time:4.164404
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_SetLockProtect/27 function not considered for inlining
      loop depth: 0 freq:0.05 size: 2 time: 11callee size:12 stack: 0
    C40_Ip_CheckLockDomainID/52 function not considered for inlining
      loop depth: 0 freq:0.42 size: 4 time: 13callee size:14 stack: 8
    C40_Ip_GetLock/28 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 4 stack: 0

IPA function summary for C40_Ip_Read/25 inlinable
  global time:     209.949663
  self size:       33
  global size:     33
  min size:       22
  self stack:      0
  global stack:    0
    size:15.000000, time:26.564153
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op2 changed)
    size:2.000000, time:1.400000,  executed if:(op2 != 0B),  nonconst if:(op1 changed) && (op2 != 0B)
  calls:
    C40_Ip_CheckReadCompareStatus.isra.0/78 function not considered for inlining
      loop depth: 1 freq:3.18 size: 3 time: 12callee size: 7 stack: 0
       op0 is compile time invariant
    C40_Ip_FlashAccessCalloutFinish/72 function not considered for inlining
      loop depth: 1 freq:3.18 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_ReadData/22 function not considered for inlining
      loop depth: 1 freq:3.18 size: 5 time: 14callee size:10 stack: 0
    C40_Ip_FlashAccessCalloutStart/71 function not considered for inlining
      loop depth: 1 freq:3.18 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_ClearAllErrorFlagsMainInterface/41 function not considered for inlining
      loop depth: 1 freq:3.18 size: 1 time: 10callee size: 3 stack: 0

IPA function summary for C40_Ip_ReadData/22 inlinable
  global time:     12.300000
  self size:       20
  global size:     20
  min size:       0
  self stack:      0
  global stack:    0
    size:1.500000, time:0.967354
    size:3.500000, time:2.322451,  executed if:(not inlined)
    size:7.000000, time:6.475000,  nonconst if:(op1 changed || op0 changed)
    size:4.000000, time:1.825000,  nonconst if:(op2 changed)
    size:1.500000, time:0.270146,  executed if:(op2 > 1)
    size:0.500000, time:0.090049,  executed if:(op2 > 1) && (not inlined)
    size:1.500000, time:0.262500,  executed if:(op2 > 3)
    size:0.500000, time:0.087500,  executed if:(op2 > 3) && (not inlined)
  calls:

IPA function summary for C40_Ip_SetSeedMisr/21 inlinable
  global time:     41.300000
  self size:       13
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:5.500000, time:30.450000,  executed if:(op0 != 0B)
    size:0.500000, time:0.350000,  executed if:(op0 != 0B) && (not inlined),  nonconst if:(op0[ref offset: 288] changed) && (op0 != 0B) && (not inlined)
    size:0.500000, time:0.350000,  executed if:(op0 != 0B),  nonconst if:(op0[ref offset: 288] changed) && (op0 != 0B)
    size:0.500000, time:3.150000,  executed if:(op0 != 0B) && (not inlined)
  calls:
    C40_Ip_SetSeedMisr.part.0/79 function not considered for inlining
      loop depth: 0 freq:0.30 size: 1 time: 10callee size: 4 stack: 0 predicate: (op0 == 0B)

IPA function summary for C40_Ip_Abort/16 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_MainInterfaceAbort/40 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0

IPA function summary for C40_Ip_Block4PipeSelect/15 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_DataErrorSuppression/14 inlinable
  global time:     5.000000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_Init/13 inlinable
  global time:     34.000000
  self size:       8
  global size:     8
  min size:       8
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_InitMainInterface/39 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0
    C40_Ip_Block4PipeSelect/15 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 4 stack: 0
    C40_Ip_DataErrorSuppression/14 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 3 stack: 0


Flattening functions:
Overall time estimate: 2988.423252 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in C40_Ip_GetSectorNumberFromAddress.part.0/108.
Enqueueing calls in C40_Ip_ClearLockProtect.part.0/104.
Enqueueing calls in C40_Ip_GetLock.part.0/103.
Enqueueing calls in C40_Ip_SetLockProtect.part.0/102.
Enqueueing calls in C40_Ip_CheckSelecBlock.part.0/93.
Enqueueing calls in C40_Ip_UTestCheckBreakpoint.part.0/92.
Enqueueing calls in C40_Ip_UTestCheckBusy.part.0/91.
Enqueueing calls in C40_Ip_MainInterfaceHVJobStatus.part.0/90.
Enqueueing calls in C40_Ip_SetSeedMisr.part.0/79.
Enqueueing calls in C40_Ip_CheckReadCompareStatus.isra.0/78.
Enqueueing calls in C40_Ip_FlashAccessCalloutFinish/72.
Enqueueing calls in C40_Ip_FlashAccessCalloutStart/71.
Enqueueing calls in C40_Ip_SetAsyncMode/70.
Enqueueing calls in C40_Ip_GetFailedAddress/69.
Enqueueing calls in C40_Ip_UserMarginReadCheck/68.
Enqueueing calls in C40_Ip_ArrayIntegrityCheckResume/67.
Enqueueing calls in C40_Ip_ArrayIntegrityResumeBroken/66.
Enqueueing calls in C40_Ip_ArrayIntegrityResumeSuppened/65.
Enqueueing calls in C40_Ip_ArrayIntegrityCheckSuspend/64.
Enqueueing calls in C40_Ip_CheckUserTestStatusExecution/63.
Enqueueing calls in C40_Ip_CheckUserTestStatus/62.
Enqueueing calls in C40_Ip_CheckSelecBlock/61.
Enqueueing calls in C40_Ip_ArrayIntegrityCheck/60.
Enqueueing calls in C40_Ip_UTestCheckBreakpoint/59.
Enqueueing calls in C40_Ip_UTestCheckBusy/58.
Enqueueing calls in C40_Ip_GetBlockNumberFromAddress/57.
Enqueueing calls in C40_Ip_GetCodeBlockNumber/56.
Enqueueing calls in C40_Ip_GetSectorNumberFromAddress/55.
Enqueueing calls in C40_Ip_CheckLockDomainID_CheckRegister/54.
Enqueueing calls in C40_Ip_GetBaseAddressOfSector/53.
Enqueueing calls in C40_Ip_CheckLockDomainID/52.
Enqueueing calls in C40_Ip_GetSectorID/51.
Enqueueing calls in C40_Ip_MainInterfaceHVJobStatus/50.
Enqueueing calls in C40_Ip_MainInterfaceWriteStatus/49.
Enqueueing calls in C40_Ip_MainInterfaceWrite/48.
Enqueueing calls in C40_Ip_ClearInterlockWrite/47.
Enqueueing calls in C40_Ip_MainInterfaceFillDataBuff/46.
Enqueueing calls in C40_Ip_MainInterfaceWritePreCheck/45.
Enqueueing calls in C40_Ip_MainInterfaceSectorEraseStatus/44.
Enqueueing calls in C40_Ip_MainInterfaceSectorErase/43.
Enqueueing calls in C40_Ip_MainInterfaceSectorErasePreCheck/42.
Enqueueing calls in C40_Ip_ClearAllErrorFlagsMainInterface/41.
Enqueueing calls in C40_Ip_MainInterfaceAbort/40.
Enqueueing calls in C40_Ip_InitMainInterface/39.
Enqueueing calls in C40_Ip_MainInterfaceWriteJobAddress/38.
Enqueueing calls in C40_Ip_MainInterfaceWriteLogicalAddress/37.
Enqueueing calls in C40_Ip_EraseVerify/36.
Enqueueing calls in C40_Ip_CompareBlank/35.
Enqueueing calls in C40_Ip_ProgramVerify/34.
Enqueueing calls in C40_Ip_CompareData/33.
Enqueueing calls in C40_Ip_Compare/32.
Enqueueing calls in C40_Ip_ClearLockProtect/31.
Enqueueing calls in C40_Ip_ClearLock/30.
Enqueueing calls in C40_Ip_GetLockProtect/29.
Enqueueing calls in C40_Ip_GetLock/28.
Enqueueing calls in C40_Ip_SetLockProtect/27.
Enqueueing calls in C40_Ip_SetLock/26.
Enqueueing calls in C40_Ip_Read/25.
Enqueueing calls in C40_Ip_ReadData/22.
Enqueueing calls in C40_Ip_SetSeedMisr/21.
Enqueueing calls in C40_Ip_Abort/16.
Enqueueing calls in C40_Ip_Block4PipeSelect/15.
Enqueueing calls in C40_Ip_DataErrorSuppression/14.
Enqueueing calls in C40_Ip_Init/13.

Considering C40_Ip_CheckSelecBlock.part.0/93 with 7 size
 to be inlined into C40_Ip_CheckSelecBlock/61 in unknown:0
 Estimated badness is -2.217600, frequency 0.44.

Considering C40_Ip_CompareBlank/35 with 22 size
 to be inlined into C40_Ip_EraseVerify/36 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:1318
 Estimated badness is -1.282675, frequency 9.35.

Considering C40_Ip_MainInterfaceHVJobStatus.part.0/90 with 7 size
 to be inlined into C40_Ip_MainInterfaceHVJobStatus/50 in unknown:0
 Estimated badness is -1.181818, frequency 0.50.

Considering C40_Ip_CompareData/33 with 26 size
 to be inlined into C40_Ip_ProgramVerify/34 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:1228
 Estimated badness is -0.973748, frequency 9.35.

Considering C40_Ip_GetCodeBlockNumber/56 with 7 size
 to be inlined into C40_Ip_GetBlockNumberFromAddress/57 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:2233
 Estimated badness is -0.961188, frequency 0.27.

Considering C40_Ip_MainInterfaceSectorErasePreCheck/42 with 17 size
 to be inlined into C40_Ip_MainInterfaceSectorErase/43 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:1540
 Estimated badness is -0.866538, frequency 1.00.

Considering C40_Ip_GetSectorNumberFromAddress.part.0/108 with 8 size
 to be inlined into C40_Ip_GetSectorNumberFromAddress/55 in unknown:0
 Estimated badness is -0.606667, frequency 0.33.

Considering C40_Ip_InitMainInterface/39 with 12 size
 to be inlined into C40_Ip_Init/13 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:404
 Estimated badness is -0.495238, frequency 1.00.

Considering C40_Ip_ReadData/22 with 20 size
 to be inlined into C40_Ip_Read/25 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:762
 Estimated badness is -0.433406, frequency 3.18.

Considering C40_Ip_MainInterfaceWriteJobAddress/38 with 8 size
 to be inlined into C40_Ip_MainInterfaceSectorErase/43 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:1559
 Estimated badness is -0.328216, frequency 0.20.

Considering C40_Ip_MainInterfaceWritePreCheck/45 with 30 size
 to be inlined into C40_Ip_MainInterfaceWrite/48 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:1808
 Estimated badness is -0.323232, frequency 1.00.

Considering C40_Ip_MainInterfaceWriteJobAddress/38 with 8 size
 to be inlined into C40_Ip_MainInterfaceWrite/48 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:1827
 Estimated badness is -0.213485, frequency 0.18.

Considering C40_Ip_SetSeedMisr.part.0/79 with 8 size
 to be inlined into C40_Ip_SetSeedMisr/21 in unknown:0
 Estimated badness is -0.211765, frequency 0.30.

Considering C40_Ip_CheckSelecBlock/61 with 11 size
 to be inlined into C40_Ip_ArrayIntegrityCheck/60 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:2357
 Estimated badness is -0.186667, frequency 1.00.

Considering C40_Ip_CheckSelecBlock/61 with 11 size
 to be inlined into C40_Ip_UserMarginReadCheck/68 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:2728
 Estimated badness is -0.169697, frequency 1.00.

Considering C40_Ip_GetSectorID/51 with 18 size
 to be inlined into C40_Ip_GetLockProtect/29 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:991
 Estimated badness is -0.133333, frequency 1.00.

Considering C40_Ip_ArrayIntegrityResumeBroken/66 with 25 size
 to be inlined into C40_Ip_ArrayIntegrityCheckResume/67 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:2687
 Estimated badness is -0.132085, frequency 0.25.

Considering C40_Ip_ArrayIntegrityResumeSuppened/65 with 21 size
 to be inlined into C40_Ip_ArrayIntegrityCheckResume/67 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:2682
 Estimated badness is -0.097730, frequency 0.13.

Considering C40_Ip_SetLockProtect.part.0/102 with 7 size
 to be inlined into C40_Ip_SetLockProtect/27 in unknown:0
 Estimated badness is -0.097143, frequency 0.17.

Considering C40_Ip_MainInterfaceWriteJobAddress/38 with 8 size
 to be inlined into C40_Ip_ArrayIntegrityCheck/60 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:2391
 Estimated badness is -0.067624, frequency 0.06.

Considering C40_Ip_ClearLockProtect.part.0/104 with 8 size
 to be inlined into C40_Ip_ClearLockProtect/31 in unknown:0
 Estimated badness is -0.063750, frequency 0.17.

Considering C40_Ip_MainInterfaceWriteJobAddress/38 with 8 size
 to be inlined into C40_Ip_UserMarginReadCheck/68 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:2763
 Estimated badness is -0.061080, frequency 0.06.

Considering C40_Ip_GetBaseAddressOfSector/53 with 18 size
 to be inlined into C40_Ip_MainInterfaceSectorErase/43 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:1551
 Estimated badness is -0.019678, frequency 0.20.

Considering C40_Ip_GetLock.part.0/103 with 8 size
 to be inlined into C40_Ip_GetLock/28 in unknown:0
 Estimated badness is -0.014437, frequency 0.33.

Considering C40_Ip_ProgramVerify/34 with 42 size
 to be inlined into C40_Ip_Compare/32 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:1150
 Estimated badness is -0.011538, frequency 0.35.

Considering C40_Ip_CheckUserTestStatusExecution/63 with 34 size
 to be inlined into C40_Ip_CheckUserTestStatus/62 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:2511
 Estimated badness is -0.008180, frequency 0.13.

Considering C40_Ip_MainInterfaceFillDataBuff/46 with 60 size
 to be inlined into C40_Ip_MainInterfaceWrite/48 in D:/eb2/plugins/McalExt_TS_T40DxM1I0R0/MCAL_Delivery/eclipse/plugins/Fls_TS_T40D34M20I1R0/src/C40_Ip.c:1856
 Estimated badness is -0.002225, frequency 0.20.

Considering C40_Ip_UTestCheckBreakpoint.part.0/92 with 13 size
 to be inlined into C40_Ip_UTestCheckBreakpoint/59 in unknown:0
 Estimated badness is -0.000198, frequency 0.33.

Considering C40_Ip_UTestCheckBusy.part.0/91 with 17 size
 to be inlined into C40_Ip_UTestCheckBusy/58 in unknown:0
 Estimated badness is -0.000073, frequency 0.25.

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 1785.548809 weighted by profile: 0.000000

Why inlining failed?
--param max-inline-insns-auto limit reached       :        7 calls, 1.393863 freq, 0 count
call is unlikely and code size would grow         :       39 calls, 75.674489 freq, 0 count
IPA function summary for C40_Ip_CheckReadCompareStatus.isra.0/78 inlinable
  global time:     9.330000
  self size:       14
  global size:     14
  min size:       8
  self stack:      0
  global stack:    0
  estimated growth:7
    size:8.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.330000,  executed if:(op0 != 1)
  calls:

IPA function summary for C40_Ip_FlashAccessCalloutFinish/72 inlinable
  global time:     16.500000
  self size:       10
  global size:     10
  min size:       4
  self stack:      0
  global stack:    0
  estimated growth:8
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:0.70 size: 3 time: 15

IPA function summary for C40_Ip_FlashAccessCalloutStart/71 inlinable
  global time:     16.500000
  self size:       10
  global size:     10
  min size:       4
  self stack:      0
  global stack:    0
  estimated growth:20
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:0.70 size: 3 time: 15

IPA function summary for C40_Ip_SetAsyncMode/70 inlinable
  global time:     3.000000
  self size:       4
  global size:     4
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_GetFailedAddress/69 inlinable
  global time:     15.820000
  self size:       29
  global size:     29
  min size:       0
  self stack:      0
  global stack:    0
    size:26.000000, time:13.820000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_UserMarginReadCheck/68 inlinable
  global time:     25.337869
  self size:       61
  global size:     67
  min size:       58
  self stack:      0
  global stack:    0
    size:40.000000, time:11.112142
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:4.000000, time:4.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.015173,  nonconst if:(op2 changed)
    size:3.000000, time:0.015021,  executed if:(op2 != 1)
    size:3.000000, time:0.007738,  executed if:(op2 == 1)
    size:2.000000, time:1.320000,  executed if:(op0 != 4194304),  nonconst if:(op0 != 4194304) && (op0 changed)
    size:2.000000, time:0.871200,  executed if:(op0 != 5242880) && (op0 != 4194304),  nonconst if:(op0 != 5242880) && (op0 != 4194304) && (op0 changed)
    size:2.000000, time:0.574992,  executed if:(op0 != 268435456) && (op0 != 5242880) && (op0 != 4194304),  nonconst if:(op0 != 268435456) && (op0 != 5242880) && (op0 != 4194304) && (op0 changed)
  calls:
    C40_Ip_SetSeedMisr/21 call is unlikely and code size would grow
      loop depth: 0 freq:0.01 size: 2 time: 11callee size: 8 stack: 0
    C40_Ip_UTestCheckBreakpoint/59 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.01 size: 2 time: 11callee size:17 stack: 0
    C40_Ip_MainInterfaceWriteJobAddress/38 inlined
      loop depth: 0 freq:0.06 size: 4 time: 13callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    C40_Ip_UTestCheckBusy/58 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.48 size: 2 time: 11callee size:20 stack: 0
    C40_Ip_CheckSelecBlock/61 inlined
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      C40_Ip_CheckSelecBlock.part.0/93 inlined
        loop depth: 0 freq:0.44 size: 3 time: 12callee size: 3 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_ArrayIntegrityCheckResume/67 inlinable
  global time:     55.238370
  self size:       19
  global size:     55
  min size:       12
  self stack:      0
  global stack:    0
    size:52.000000, time:53.238370
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_ArrayIntegrityResumeBroken/66 inlined
      loop depth: 0 freq:0.25 size: 2 time: 11callee size:12 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    C40_Ip_ArrayIntegrityResumeSuppened/65 inlined
      loop depth: 0 freq:0.13 size: 2 time: 11callee size:10 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_ArrayIntegrityCheckSuspend/64 inlinable
  global time:     36.726145
  self size:       29
  global size:     29
  min size:       0
  self stack:      0
  global stack:    0
    size:26.000000, time:34.726145
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_CheckUserTestStatus/62 inlinable
  global time:     19.439764
  self size:       25
  global size:     50
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.625000,  executed if:(op0 != 0B),  nonconst if:(op1 changed) && (op0 != 0B)
    size:1.000000, time:0.402917,  executed if:(op1 != 0B) && (op0 != 0B) && (not inlined)
    size:42.000000, time:13.411847,  executed if:(op1 != 0B) && (op0 != 0B)
  calls:
    C40_Ip_CheckUserTestStatusExecution/63 inlined
      loop depth: 0 freq:0.13 size: 4 time: 13callee size:17 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_ArrayIntegrityCheck/60 inlinable
  global time:     24.772546
  self size:       55
  global size:     61
  min size:       58
  self stack:      0
  global stack:    0
    size:34.000000, time:10.381519
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:4.000000, time:4.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.027417,  nonconst if:(op1 changed)
    size:3.000000, time:0.027143,  executed if:(op1 != 1)
    size:3.000000, time:0.013983,  executed if:(op1 == 1)
    size:2.000000, time:1.320000,  executed if:(op0 != 4194304),  nonconst if:(op0 != 4194304) && (op0 changed)
    size:2.000000, time:0.871200,  executed if:(op0 != 5242880) && (op0 != 4194304),  nonconst if:(op0 != 5242880) && (op0 != 4194304) && (op0 changed)
    size:2.000000, time:0.574992,  executed if:(op0 != 268435456) && (op0 != 5242880) && (op0 != 4194304),  nonconst if:(op0 != 268435456) && (op0 != 5242880) && (op0 != 4194304) && (op0 changed)
  calls:
    C40_Ip_SetSeedMisr/21 call is unlikely and code size would grow
      loop depth: 0 freq:0.01 size: 2 time: 11callee size: 8 stack: 0
    C40_Ip_UTestCheckBreakpoint/59 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.01 size: 2 time: 11callee size:17 stack: 0
    C40_Ip_MainInterfaceWriteJobAddress/113 inlined
      loop depth: 0 freq:0.06 size: 4 time: 13callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    C40_Ip_UTestCheckBusy/58 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.48 size: 2 time: 11callee size:20 stack: 0
    C40_Ip_CheckSelecBlock/111 inlined
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      C40_Ip_CheckSelecBlock.part.0/112 inlined
        loop depth: 0 freq:0.44 size: 3 time: 12callee size: 3 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_UTestCheckBreakpoint/59 inlinable
  global time:     12.665933
  self size:       26
  global size:     35
  min size:       6
  self stack:      0
  global stack:    0
  estimated growth:16
    size:6.000000, time:1.999800
    size:3.000000, time:1.999800,  executed if:(not inlined)
    size:6.000000, time:2.000000,  nonconst if:(op0 changed)
    size:10.000000, time:3.333000,  executed if:(op0 == 1)
    size:10.000000, time:3.333333,  executed if:(op0 == 0)
  calls:
    C40_Ip_UTestCheckBreakpoint.part.0/92 inlined
      loop depth: 0 freq:0.33 size: 1 time: 10callee size: 6 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_UTestCheckBusy/58 inlinable
  global time:     39.726144
  self size:       29
  global size:     41
  min size:       38
  self stack:      0
  global stack:    0
  estimated growth:19
    size:38.000000, time:37.726144
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_UTestCheckBusy.part.0/91 inlined
      loop depth: 0 freq:0.25 size: 2 time: 11callee size: 8 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_GetBlockNumberFromAddress/57 inlinable
  global time:     9.041375
  self size:       15
  global size:     16
  min size:       6
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:11.000000, time:6.766750,  nonconst if:(op0 changed)
    size:2.000000, time:0.274625,  executed if:(op0 > 5242879),  nonconst if:(op0 > 5242879) && (op0 changed)
  calls:
    C40_Ip_GetCodeBlockNumber/56 inlined
      loop depth: 0 freq:0.27 size: 3 time: 12callee size: 3 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_GetSectorNumberFromAddress/55 inlinable
  global time:     8.672500
  self size:       13
  global size:     15
  min size:       0
  self stack:      0
  global stack:    0
  estimated growth:7
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:12.000000, time:6.672500,  nonconst if:(op0 changed)
  calls:
    C40_Ip_GetSectorNumberFromAddress.part.0/108 inlined
      loop depth: 0 freq:0.33 size: 3 time: 12callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_CheckLockDomainID_CheckRegister/54 inlinable
  global time:     13.140000
  self size:       33
  global size:     33
  min size:       2
  self stack:      0
  global stack:    0
  estimated growth:22
    size:2.000000, time:2.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 > 15),  nonconst if:(op0 changed) && (op0 > 15)
    size:7.000000, time:1.980000,  executed if:(op0 != 272) && (op0 > 15),  nonconst if:(op0 changed) && (op0 != 272) && (op0 > 15)
    size:8.000000, time:1.320000,  executed if:(op0 != 272) && (op0 > 15)
    size:2.000000, time:0.330000,  executed if:(op0 != 272) && (op0 > 15) && (not inlined)
    size:2.000000, time:0.340000,  executed if:(op0 == 272) && (op0 > 15)
    size:1.000000, time:0.170000,  executed if:(op0 == 272) && (op0 > 15) && (not inlined)
    size:3.000000, time:1.500000,  executed if:(op0 <= 15)
    size:1.000000, time:0.500000,  executed if:(op0 <= 15) && (not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for C40_Ip_CheckLockDomainID/52 inlinable
  global time:     21.770000
  self size:       28
  global size:     28
  min size:       14
  self stack:      8
  global stack:    8
  estimated growth:14
    size:14.000000, time:9.500000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:4.000000, time:4.000000,  nonconst if:(op0 changed)
    size:3.000000, time:1.980000,  executed if:(op0 != 272)
  calls:
    C40_Ip_CheckLockDomainID_CheckRegister/54 call is unlikely and code size would grow
      loop depth: 0 freq:0.33 size: 4 time: 13callee size:16 stack: 0 predicate: (op0 <= 272)
       op1 is compile time invariant
       op2 is compile time invariant

IPA function summary for C40_Ip_MainInterfaceHVJobStatus/50 inlinable
  global time:     8.000000
  self size:       9
  global size:     11
  min size:       8
  self stack:      0
  global stack:    0
  estimated growth:-1
    size:8.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_MainInterfaceHVJobStatus.part.0/90 inlined
      loop depth: 0 freq:0.50 size: 2 time: 11callee size: 3 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_MainInterfaceWriteStatus/49 inlinable
  global time:     22.818096
  self size:       25
  global size:     25
  min size:       14
  self stack:      0
  global stack:    0
    size:15.000000, time:7.947920
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_Compare/32 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.13 size: 5 time: 14callee size:26 stack: 1
    C40_Ip_MainInterfaceHVJobStatus/50 call is unlikely and code size would grow
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for C40_Ip_MainInterfaceWrite/48 inlinable
  global time:     94.464277
  self size:       50
  global size:     126
  min size:       132
  self stack:      0
  global stack:    4
    size:83.000000, time:68.433620
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:5.000000, time:3.404800,  nonconst if:(op0 changed)
    size:5.000000, time:2.000000,  nonconst if:(op1 changed)
    size:2.000000, time:0.250000,  executed if:(op1 <= 128),  nonconst if:(op1 <= 128) && (op1 changed)
    size:2.000000, time:0.125000,  executed if:(op1 != 0) && (op1 <= 128),  nonconst if:(op2 changed) && (op1 != 0) && (op1 <= 128)
    size:9.000000, time:0.258772,  executed if:(op2 != 0B) && (op1 != 0) && (op1 <= 128)
    size:3.000000, time:0.607200,  nonconst if:(op2 changed)
  calls:
    C40_Ip_FlashAccessCalloutStart/71 call is unlikely and code size would grow
      loop depth: 0 freq:0.04 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_MainInterfaceFillDataBuff/46 inlined
      loop depth: 0 freq:0.20 size: 4 time: 13callee size:30 stack: 4
      Stack frame offset 0, callee self size 4, callee size 4
    C40_Ip_ClearInterlockWrite/47 call is unlikely and code size would grow
      loop depth: 0 freq:0.02 size: 1 time: 10callee size: 7 stack: 0
    C40_Ip_MainInterfaceWriteJobAddress/110 inlined
      loop depth: 0 freq:0.18 size: 4 time: 13callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    C40_Ip_ClearAllErrorFlagsMainInterface/41 call is unlikely and code size would grow
      loop depth: 0 freq:0.18 size: 1 time: 10callee size: 3 stack: 0
    C40_Ip_Compare/32 call is unlikely and code size would grow
      loop depth: 0 freq:0.20 size: 5 time: 14callee size:26 stack: 1
       op2 is compile time invariant
    C40_Ip_MainInterfaceWritePreCheck/45 inlined
      loop depth: 0 freq:1.00 size: 5 time: 14callee size:15 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      C40_Ip_GetLock/28 call is unlikely and code size would grow
        loop depth: 0 freq:0.01 size: 3 time: 12callee size: 5 stack: 0 predicate: (op2 != 0B) && (op1 != 0) && (op1 <= 128)
      C40_Ip_GetSectorNumberFromAddress/55 call is unlikely and code size would grow
        loop depth: 0 freq:1.00 size: 3 time: 12callee size: 7 stack: 0

IPA function summary for C40_Ip_ClearInterlockWrite/47 inlinable
  global time:     45.363637
  self size:       14
  global size:     14
  min size:       11
  self stack:      0
  global stack:    0
  estimated growth:6
    size:11.000000, time:43.363637
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_MainInterfaceSectorEraseStatus/44 inlinable
  global time:     22.550928
  self size:       23
  global size:     23
  min size:       10
  self stack:      0
  global stack:    0
    size:15.000000, time:7.947920
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_EraseVerify/36 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.13 size: 3 time: 12callee size:18 stack: 1
       op1 is compile time invariant
    C40_Ip_MainInterfaceHVJobStatus/50 call is unlikely and code size would grow
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for C40_Ip_MainInterfaceSectorErase/43 inlinable
  global time:     29.987693
  self size:       36
  global size:     60
  min size:       64
  self stack:      0
  global stack:    4
    size:26.000000, time:17.616048
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:4.000000, time:2.404800,  nonconst if:(op0 changed)
    size:9.000000, time:2.957400,  executed if:(op0 <= 272)
    size:2.000000, time:0.202400,  executed if:(op0 > 15),  nonconst if:(op0 > 15) && (op0 changed)
    size:2.000000, time:0.101200,  executed if:(op0 > 271) && (op0 > 15),  nonconst if:(op0 > 271) && (op0 > 15) && (op0 changed)
    size:1.000000, time:0.033396,  executed if:(op0 != 272) && (op0 > 271) && (op0 > 15)
    size:1.000000, time:0.017204,  executed if:(op0 == 272) && (op0 > 271) && (op0 > 15)
    size:2.000000, time:0.101200,  executed if:(op0 <= 271) && (op0 > 15),  nonconst if:(op0 <= 271) && (op0 > 15) && (op0 changed)
    size:1.000000, time:0.050600,  executed if:(op0 <= 271) && (op0 > 15)
    size:2.000000, time:0.202400,  executed if:(op0 <= 15),  nonconst if:(op0 <= 15) && (op0 changed)
    size:1.000000, time:0.101200,  executed if:(op0 <= 15)
  calls:
    C40_Ip_FlashAccessCalloutStart/71 call is unlikely and code size would grow
      loop depth: 0 freq:0.07 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_ClearInterlockWrite/47 call is unlikely and code size would grow
      loop depth: 0 freq:0.02 size: 1 time: 10callee size: 7 stack: 0
    C40_Ip_MainInterfaceWriteJobAddress/109 inlined
      loop depth: 0 freq:0.20 size: 4 time: 13callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    C40_Ip_GetBaseAddressOfSector/53 inlined
      loop depth: 0 freq:0.20 size: 3 time: 12callee size: 9 stack: 4
      Stack frame offset 0, callee self size 4, callee size 4
    C40_Ip_ClearAllErrorFlagsMainInterface/41 call is unlikely and code size would grow
      loop depth: 0 freq:0.20 size: 1 time: 10callee size: 3 stack: 0
    C40_Ip_MainInterfaceSectorErasePreCheck/42 inlined
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 8 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      C40_Ip_GetLock/28 call is unlikely and code size would grow
        loop depth: 0 freq:0.10 size: 3 time: 12callee size: 5 stack: 0 predicate: (op0 <= 272)

IPA function summary for C40_Ip_ClearAllErrorFlagsMainInterface/41 inlinable
  global time:     5.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
  estimated growth:6
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_MainInterfaceAbort/40 inlinable
  global time:     44.363637
  self size:       13
  global size:     13
  min size:       10
  self stack:      0
  global stack:    0
  estimated growth:3
    size:10.000000, time:42.363637
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_MainInterfaceWriteLogicalAddress/37 inlinable
  global time:     3.000000
  self size:       4
  global size:     4
  min size:       0
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_EraseVerify/36 inlinable
  global time:     552.104580
  self size:       24
  global size:     37
  min size:       28
  self stack:      1
  global stack:    1
  estimated growth:12
    size:27.500000, time:157.489483
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_CheckReadCompareStatus.isra.0/78 call is unlikely and code size would grow
      loop depth: 1 freq:9.35 size: 3 time: 12callee size: 7 stack: 0
    C40_Ip_FlashAccessCalloutFinish/72 call is unlikely and code size would grow
      loop depth: 1 freq:9.35 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_CompareBlank/35 inlined
      loop depth: 1 freq:9.35 size: 5 time: 14callee size:11 stack: 0
      Stack frame offset 1, callee self size 0, callee size 0
    C40_Ip_FlashAccessCalloutStart/71 call is unlikely and code size would grow
      loop depth: 1 freq:9.35 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_ClearAllErrorFlagsMainInterface/41 call is unlikely and code size would grow
      loop depth: 1 freq:9.35 size: 1 time: 10callee size: 3 stack: 0

IPA function summary for C40_Ip_Compare/32 inlinable
  global time:     210.972032
  self size:       17
  global size:     52
  min size:       1
  self stack:      0
  global stack:    1
  estimated growth:12
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:0.500000,  executed if:(op1 != 0)
    size:2.000000, time:1.000000,  executed if:(op1 != 0),  nonconst if:(op2 changed) && (op1 != 0)
    size:1.000000, time:0.500000,  executed if:(op1 == 0)
    size:32.500000, time:64.756748,  executed if:(op2 != 0B) && (op1 != 0)
  calls:
    C40_Ip_EraseVerify/36 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.15 size: 3 time: 12callee size:18 stack: 1 predicate: (op2 == 0B) && (op1 != 0)
    C40_Ip_ProgramVerify/34 inlined
      loop depth: 0 freq:0.35 size: 4 time: 13callee size:21 stack: 1
      Stack frame offset 0, callee self size 1, callee size 1
      C40_Ip_CheckReadCompareStatus.isra.0/78 call is unlikely and code size would grow
        loop depth: 1 freq:3.27 size: 3 time: 12callee size: 7 stack: 0 predicate: (op2 != 0B) && (op1 != 0)
      C40_Ip_FlashAccessCalloutFinish/72 call is unlikely and code size would grow
        loop depth: 1 freq:3.27 size: 1 time: 10callee size: 5 stack: 0 predicate: (op2 != 0B) && (op1 != 0)
      C40_Ip_CompareData/33 inlined
        loop depth: 1 freq:3.27 size: 6 time: 15callee size:13 stack: 0
        Stack frame offset 1, callee self size 0, callee size 0
      C40_Ip_FlashAccessCalloutStart/71 call is unlikely and code size would grow
        loop depth: 1 freq:3.27 size: 1 time: 10callee size: 5 stack: 0 predicate: (op2 != 0B) && (op1 != 0)
      C40_Ip_ClearAllErrorFlagsMainInterface/41 call is unlikely and code size would grow
        loop depth: 1 freq:3.27 size: 1 time: 10callee size: 3 stack: 0 predicate: (op2 != 0B) && (op1 != 0)

IPA function summary for C40_Ip_ClearLockProtect/31 inlinable
  global time:     11.650000
  self size:       28
  global size:     32
  min size:       0
  self stack:      0
  global stack:    0
  estimated growth:23
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 > 15),  nonconst if:(op0 changed) && (op0 > 15)
    size:5.000000, time:1.650000,  executed if:(op0 != 272) && (op0 > 15),  nonconst if:(op0 changed) && (op0 != 272) && (op0 > 15)
    size:10.000000, time:1.650000,  executed if:(op0 != 272) && (op0 > 15)
    size:5.000000, time:2.500000,  executed if:(op0 <= 15)
    size:5.000000, time:0.850000,  executed if:(op0 == 272) && (op0 > 15)
  array index:(op0 changed)
  calls:
    C40_Ip_ClearLockProtect.part.0/104 inlined
      loop depth: 0 freq:0.17 size: 1 time: 10callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_ClearLock/30 inlinable
  global time:     24.211266
  self size:       18
  global size:     18
  min size:       18
  self stack:      0
  global stack:    0
    size:6.000000, time:4.164404
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_ClearLockProtect/31 call is unlikely and code size would grow
      loop depth: 0 freq:0.05 size: 2 time: 11callee size:16 stack: 0
    C40_Ip_CheckLockDomainID/52 call is unlikely and code size would grow
      loop depth: 0 freq:0.42 size: 4 time: 13callee size:14 stack: 8
    C40_Ip_GetLock/28 call is unlikely and code size would grow
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 5 stack: 0

IPA function summary for C40_Ip_GetLockProtect/29 inlinable
  global time:     18.300000
  self size:       23
  global size:     35
  min size:       5
  self stack:      0
  global stack:    0
  estimated growth:17
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:4.000000, time:4.000000,  nonconst if:(op0 changed)
    size:4.000000, time:2.000000,  executed if:(op0 > 15),  nonconst if:(op0 changed) && (op0 > 15)
    size:11.000000, time:3.300000,  executed if:(op0 != 272) && (op0 > 15),  nonconst if:(op0 changed) && (op0 != 272) && (op0 > 15)
    size:4.000000, time:0.660000,  executed if:(op0 != 272) && (op0 > 15)
    size:2.000000, time:0.340000,  executed if:(op0 == 272) && (op0 > 15)
    size:2.000000, time:1.000000,  executed if:(op0 <= 15)
  array index:(op0 changed)
  calls:
    C40_Ip_GetSectorID/51 inlined
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 9 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_GetLock/28 inlinable
  global time:     8.620000
  self size:       8
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
  estimated growth:8
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.660000,  executed if:(op0 <= 272)
  calls:
    C40_Ip_GetLock.part.0/103 inlined
      loop depth: 0 freq:0.33 size: 3 time: 12callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      C40_Ip_GetLockProtect/29 call is unlikely and code size would grow
        loop depth: 0 freq:0.33 size: 3 time: 12callee size:17 stack: 0 predicate: (op0 <= 272)

IPA function summary for C40_Ip_SetLockProtect/27 inlinable
  global time:     10.650000
  self size:       25
  global size:     28
  min size:       0
  self stack:      0
  global stack:    0
  estimated growth:20
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 > 15),  nonconst if:(op0 changed) && (op0 > 15)
    size:5.000000, time:1.650000,  executed if:(op0 != 272) && (op0 > 15),  nonconst if:(op0 changed) && (op0 != 272) && (op0 > 15)
    size:8.000000, time:1.320000,  executed if:(op0 != 272) && (op0 > 15)
    size:4.000000, time:2.000000,  executed if:(op0 <= 15)
    size:4.000000, time:0.680000,  executed if:(op0 == 272) && (op0 > 15)
  array index:(op0 changed)
  calls:
    C40_Ip_SetLockProtect.part.0/102 inlined
      loop depth: 0 freq:0.17 size: 1 time: 10callee size: 3 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_SetLock/26 inlinable
  global time:     24.211266
  self size:       18
  global size:     18
  min size:       18
  self stack:      0
  global stack:    0
    size:6.000000, time:4.164404
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_SetLockProtect/27 call is unlikely and code size would grow
      loop depth: 0 freq:0.05 size: 2 time: 11callee size:14 stack: 0
    C40_Ip_CheckLockDomainID/52 call is unlikely and code size would grow
      loop depth: 0 freq:0.42 size: 4 time: 13callee size:14 stack: 8
    C40_Ip_GetLock/28 call is unlikely and code size would grow
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 5 stack: 0

IPA function summary for C40_Ip_Read/25 inlinable
  global time:     196.600750
  self size:       33
  global size:     44
  min size:       34
  self stack:      0
  global stack:    0
    size:30.500000, time:57.711617
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op2 changed)
    size:2.000000, time:1.400000,  executed if:(op2 != 0B),  nonconst if:(op1 changed) && (op2 != 0B)
  calls:
    C40_Ip_CheckReadCompareStatus.isra.0/78 call is unlikely and code size would grow
      loop depth: 1 freq:3.18 size: 3 time: 12callee size: 7 stack: 0
       op0 is compile time invariant
    C40_Ip_FlashAccessCalloutFinish/72 call is unlikely and code size would grow
      loop depth: 1 freq:3.18 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_ReadData/22 inlined
      loop depth: 1 freq:3.18 size: 5 time: 14callee size:10 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    C40_Ip_FlashAccessCalloutStart/71 call is unlikely and code size would grow
      loop depth: 1 freq:3.18 size: 1 time: 10callee size: 5 stack: 0
    C40_Ip_ClearAllErrorFlagsMainInterface/41 call is unlikely and code size would grow
      loop depth: 1 freq:3.18 size: 1 time: 10callee size: 3 stack: 0

IPA function summary for C40_Ip_SetSeedMisr/21 inlinable
  global time:     50.000000
  self size:       13
  global size:     17
  min size:       0
  self stack:      0
  global stack:    0
  estimated growth:1
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:5.500000, time:30.450000,  executed if:(op0 != 0B)
    size:0.500000, time:0.350000,  executed if:(op0 != 0B) && (not inlined),  nonconst if:(op0[ref offset: 288] changed) && (op0 != 0B) && (not inlined)
    size:0.500000, time:0.350000,  executed if:(op0 != 0B),  nonconst if:(op0[ref offset: 288] changed) && (op0 != 0B)
    size:0.500000, time:3.150000,  executed if:(op0 != 0B) && (not inlined)
    size:5.000000, time:11.700000,  executed if:(op0 == 0B)
  calls:
    C40_Ip_SetSeedMisr.part.0/79 inlined
      loop depth: 0 freq:0.30 size: 1 time: 10callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for C40_Ip_Abort/16 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_MainInterfaceAbort/40 call is unlikely and code size would grow
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0

IPA function summary for C40_Ip_Block4PipeSelect/15 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       5
  self stack:      0
  global stack:    0
  estimated growth:4
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_DataErrorSuppression/14 inlinable
  global time:     5.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
  estimated growth:2
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for C40_Ip_Init/13 inlinable
  global time:     50.000000
  self size:       8
  global size:     15
  min size:       18
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    C40_Ip_InitMainInterface/39 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      C40_Ip_ClearAllErrorFlagsMainInterface/41 call is unlikely and code size would grow
        loop depth: 0 freq:1.00 size: 1 time: 10callee size: 3 stack: 0
      C40_Ip_MainInterfaceAbort/40 call is unlikely and code size would grow
        loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0
    C40_Ip_Block4PipeSelect/15 call is unlikely and code size would grow
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 4 stack: 0
    C40_Ip_DataErrorSuppression/14 call is unlikely and code size would grow
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 3 stack: 0

Symbol table:

C40_Ip_MainInterfaceWriteJobAddress/113 (C40_Ip_MainInterfaceWriteJobAddress) @0703b0e0
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 110
  References: 
  Referring: 
  Function C40_Ip_MainInterfaceWriteJobAddress/113 is inline copy in C40_Ip_ArrayIntegrityCheck/60
  Clone of C40_Ip_MainInterfaceWriteJobAddress/38
  Availability: local
  Function flags: count:67769897 (estimated locally) body local optimize_size
  Called by: C40_Ip_ArrayIntegrityCheck/60 (inlined) (67769897 (estimated locally),0.06 per call) 
  Calls: 
C40_Ip_CheckSelecBlock.part.0/112 (C40_Ip_CheckSelecBlock.part.0) @06e7ea80
  Type: function definition analyzed
  Visibility: artificial
  next sharing asm name: 93
  References: 
  Referring: 
  Function C40_Ip_CheckSelecBlock.part.0/112 is inline copy in C40_Ip_ArrayIntegrityCheck/60
  Clone of C40_Ip_CheckSelecBlock.part.0/93
  Availability: local
  Function flags: count:467721936 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: C40_Ip_CheckSelecBlock/111 (inlined) (467721936 (estimated locally),0.44 per call) 
  Calls: 
C40_Ip_CheckSelecBlock/111 (C40_Ip_CheckSelecBlock) @06e7e8c0
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 61
  References: 
  Referring: 
  Function C40_Ip_CheckSelecBlock/111 is inline copy in C40_Ip_ArrayIntegrityCheck/60
  Clone of C40_Ip_CheckSelecBlock/61
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_ArrayIntegrityCheck/60 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: C40_Ip_CheckSelecBlock.part.0/112 (inlined) (467721936 (estimated locally),0.44 per call) 
C40_Ip_MainInterfaceWriteJobAddress/110 (C40_Ip_MainInterfaceWriteJobAddress) @0680f0e0
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 109
  previous sharing asm name: 113
  References: 
  Referring: 
  Function C40_Ip_MainInterfaceWriteJobAddress/110 is inline copy in C40_Ip_MainInterfaceWrite/48
  Clone of C40_Ip_MainInterfaceWriteJobAddress/38
  Availability: local
  Function flags: count:194843768 (estimated locally) body local optimize_size
  Called by: C40_Ip_MainInterfaceWrite/48 (inlined) (194843768 (estimated locally),0.18 per call) 
  Calls: 
C40_Ip_MainInterfaceWriteJobAddress/109 (C40_Ip_MainInterfaceWriteJobAddress) @0680b460
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 38
  previous sharing asm name: 110
  References: 
  Referring: 
  Function C40_Ip_MainInterfaceWriteJobAddress/109 is inline copy in C40_Ip_MainInterfaceSectorErase/43
  Clone of C40_Ip_MainInterfaceWriteJobAddress/38
  Availability: local
  Function flags: count:217325345 (estimated locally) body local optimize_size
  Called by: C40_Ip_MainInterfaceSectorErase/43 (inlined) (217325345 (estimated locally),0.20 per call) 
  Calls: 
C40_Ip_GetSectorNumberFromAddress.part.0/108 (C40_Ip_GetSectorNumberFromAddress.part.0) @06e7e700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function C40_Ip_GetSectorNumberFromAddress.part.0/108 is inline copy in C40_Ip_GetSectorNumberFromAddress/55
  Availability: local
  Function flags: count:348966093 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: C40_Ip_GetSectorNumberFromAddress/55 (inlined) (348966093 (estimated locally),0.33 per call) 
  Calls: 
C40_Ip_ClearLockProtect.part.0/104 (C40_Ip_ClearLockProtect.part.0) @0703b620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: C40_Ip_u32BitPosition/5 (read)
  Referring: 
  Function C40_Ip_ClearLockProtect.part.0/104 is inline copy in C40_Ip_ClearLockProtect/31
  Availability: local
  Function flags: count:182536112 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: C40_Ip_ClearLockProtect/31 (inlined) (182536112 (estimated locally),0.17 per call) 
  Calls: 
C40_Ip_GetLock.part.0/103 (C40_Ip_GetLock.part.0) @0680bee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function C40_Ip_GetLock.part.0/103 is inline copy in C40_Ip_GetLock/28
  Availability: local
  Function flags: count:354334800 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: C40_Ip_GetLock/28 (inlined) (354334800 (estimated locally),0.33 per call) 
  Calls: C40_Ip_GetLockProtect/29 (354334800 (estimated locally),0.33 per call) 
C40_Ip_SetLockProtect.part.0/102 (C40_Ip_SetLockProtect.part.0) @0680b9a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: C40_Ip_u32BitPosition/5 (read)
  Referring: 
  Function C40_Ip_SetLockProtect.part.0/102 is inline copy in C40_Ip_SetLockProtect/27
  Availability: local
  Function flags: count:182536112 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: C40_Ip_SetLockProtect/27 (inlined) (182536112 (estimated locally),0.17 per call) 
  Calls: 
C40_Ip_CheckSelecBlock.part.0/93 (C40_Ip_CheckSelecBlock.part.0) @06f5ac40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  previous sharing asm name: 112
  References: 
  Referring: 
  Function C40_Ip_CheckSelecBlock.part.0/93 is inline copy in C40_Ip_UserMarginReadCheck/68
  Availability: local
  Function flags: count:467721936 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: C40_Ip_CheckSelecBlock/61 (inlined) (467721936 (estimated locally),0.44 per call) 
  Calls: 
C40_Ip_UTestCheckBreakpoint.part.0/92 (C40_Ip_UTestCheckBreakpoint.part.0) @06f57a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function C40_Ip_UTestCheckBreakpoint.part.0/92 is inline copy in C40_Ip_UTestCheckBreakpoint/59
  Availability: local
  Function flags: count:357913944 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: C40_Ip_UTestCheckBreakpoint/59 (inlined) (357913944 (estimated locally),0.33 per call) 
  Calls: 
C40_Ip_UTestCheckBusy.part.0/91 (C40_Ip_UTestCheckBusy.part.0) @0680b620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function C40_Ip_UTestCheckBusy.part.0/91 is inline copy in C40_Ip_UTestCheckBusy/58
  Availability: local
  Function flags: count:69202658 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: C40_Ip_UTestCheckBusy/58 (inlined) (69202658 (estimated locally),0.25 per call) 
  Calls: 
C40_Ip_MainInterfaceHVJobStatus.part.0/90 (C40_Ip_MainInterfaceHVJobStatus.part.0) @0680b7e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function C40_Ip_MainInterfaceHVJobStatus.part.0/90 is inline copy in C40_Ip_MainInterfaceHVJobStatus/50
  Availability: local
  Function flags: count:536870912 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: C40_Ip_MainInterfaceHVJobStatus/50 (inlined) (536870912 (estimated locally),0.50 per call) 
  Calls: 
C40_Ip_SetSeedMisr.part.0/79 (C40_Ip_SetSeedMisr.part.0) @06f5aee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function C40_Ip_SetSeedMisr.part.0/79 is inline copy in C40_Ip_SetSeedMisr/21
  Availability: local
  Function flags: count:46017506 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: C40_Ip_SetSeedMisr/21 (inlined) (46017506 (estimated locally),0.30 per call) 
  Calls: 
C40_Ip_CheckReadCompareStatus.isra.0/78 (C40_Ip_CheckReadCompareStatus.isra.0) @06ed81c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: C40_Ip_eReadStatus/7 (write)C40_Ip_eReadStatus/7 (write)
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_Read/25 (1073741824 (estimated locally),3.18 per call) C40_Ip_EraseVerify/36 (1073741824 (estimated locally),9.35 per call) C40_Ip_ProgramVerify/34 (3513060404 (estimated locally),3.27 per call) 
  Calls: 
C40_Ip_FlashAccessCalloutFinish/72 (C40_Ip_FlashAccessCalloutFinish) @06e7e1c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: C40_Ip_pConfigPtr/9 (read)
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_Read/25 (1073741824 (estimated locally),3.18 per call) C40_Ip_EraseVerify/36 (1073741824 (estimated locally),9.35 per call) C40_Ip_ProgramVerify/34 (3513060404 (estimated locally),3.27 per call) 
  Calls: 
   Indirect call(751619278 (estimated locally),0.70 per call) 
C40_Ip_FlashAccessCalloutStart/71 (C40_Ip_FlashAccessCalloutStart) @06e7e000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: C40_Ip_pConfigPtr/9 (read)
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_MainInterfaceWrite/48 (43986650 (estimated locally),0.04 per call) C40_Ip_MainInterfaceSectorErase/43 (73890617 (estimated locally),0.07 per call) C40_Ip_Read/25 (1073741824 (estimated locally),3.18 per call) C40_Ip_EraseVerify/36 (1073741824 (estimated locally),9.35 per call) C40_Ip_ProgramVerify/34 (3513060404 (estimated locally),3.27 per call) 
  Calls: 
   Indirect call(751619278 (estimated locally),0.70 per call) 
C40_Ip_SetAsyncMode/70 (C40_Ip_SetAsyncMode) @06e74e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_bAsync/10 (write)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
C40_Ip_GetFailedAddress/69 (C40_Ip_GetFailedAddress) @06e74c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_eOpStatus/8 (read)C40_Ip_u32LogicalAddressCheckFail/6 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741823 (estimated locally) body optimize_size
  Called by: 
  Calls: 
C40_Ip_UserMarginReadCheck/68 (C40_Ip_UserMarginReadCheck) @06e74a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_SetSeedMisr/21 (8145942 (estimated locally),0.01 per call) C40_Ip_UTestCheckBreakpoint/59 (8145942 (estimated locally),0.01 per call) C40_Ip_MainInterfaceWriteJobAddress/38 (inlined) (67769897 (estimated locally),0.06 per call) C40_Ip_UTestCheckBusy/58 (512926469 (estimated locally),0.48 per call) C40_Ip_CheckSelecBlock/61 (inlined) (1073741824 (estimated locally),1.00 per call) 
C40_Ip_ArrayIntegrityCheckResume/67 (C40_Ip_ArrayIntegrityCheckResume) @06e74700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_ArrayIntegrityResumeBroken/66 (inlined) (265921598 (estimated locally),0.25 per call) C40_Ip_ArrayIntegrityResumeSuppened/65 (inlined) (141261474 (estimated locally),0.13 per call) 
C40_Ip_ArrayIntegrityResumeBroken/66 (C40_Ip_ArrayIntegrityResumeBroken) @06e74540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_ArrayIntegrityResumeBroken/66 is inline copy in C40_Ip_ArrayIntegrityCheckResume/67
  Availability: local
  Function flags: count:265921598 (estimated locally) body local optimize_size
  Called by: C40_Ip_ArrayIntegrityCheckResume/67 (inlined) (265921598 (estimated locally),0.25 per call) 
  Calls: 
C40_Ip_ArrayIntegrityResumeSuppened/65 (C40_Ip_ArrayIntegrityResumeSuppened) @06e74380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_ArrayIntegrityResumeSuppened/65 is inline copy in C40_Ip_ArrayIntegrityCheckResume/67
  Availability: local
  Function flags: count:141261474 (estimated locally) body local optimize_size
  Called by: C40_Ip_ArrayIntegrityCheckResume/67 (inlined) (141261474 (estimated locally),0.13 per call) 
  Calls: 
C40_Ip_ArrayIntegrityCheckSuspend/64 (C40_Ip_ArrayIntegrityCheckSuspend) @06e741c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:276810640 (estimated locally) body optimize_size
  Called by: 
  Calls: 
C40_Ip_CheckUserTestStatusExecution/63 (C40_Ip_CheckUserTestStatusExecution) @06e74000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_CheckUserTestStatusExecution/63 is inline copy in C40_Ip_CheckUserTestStatus/62
  Availability: local
  Function flags: count:143063407 (estimated locally) body local optimize_size
  Called by: C40_Ip_CheckUserTestStatus/62 (inlined) (143063407 (estimated locally),0.13 per call) 
  Calls: 
C40_Ip_CheckUserTestStatus/62 (C40_Ip_CheckUserTestStatus) @06e69e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_CheckUserTestStatusExecution/63 (inlined) (143063407 (estimated locally),0.13 per call) 
C40_Ip_CheckSelecBlock/61 (C40_Ip_CheckSelecBlock) @06e69a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 111
  References: 
  Referring: 
  Function C40_Ip_CheckSelecBlock/61 is inline copy in C40_Ip_UserMarginReadCheck/68
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_UserMarginReadCheck/68 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: C40_Ip_CheckSelecBlock.part.0/93 (inlined) (467721936 (estimated locally),0.44 per call) 
C40_Ip_ArrayIntegrityCheck/60 (C40_Ip_ArrayIntegrityCheck) @06e698c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_SetSeedMisr/21 (14719622 (estimated locally),0.01 per call) C40_Ip_UTestCheckBreakpoint/59 (14719622 (estimated locally),0.01 per call) C40_Ip_MainInterfaceWriteJobAddress/113 (inlined) (67769897 (estimated locally),0.06 per call) C40_Ip_UTestCheckBusy/58 (512926469 (estimated locally),0.48 per call) C40_Ip_CheckSelecBlock/111 (inlined) (1073741824 (estimated locally),1.00 per call) 
C40_Ip_UTestCheckBreakpoint/59 (C40_Ip_UTestCheckBreakpoint) @06e69540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_UserMarginReadCheck/68 (8145942 (estimated locally),0.01 per call) C40_Ip_ArrayIntegrityCheck/60 (14719622 (estimated locally),0.01 per call) 
  Calls: C40_Ip_UTestCheckBreakpoint.part.0/92 (inlined) (357913944 (estimated locally),0.33 per call) 
C40_Ip_UTestCheckBusy/58 (C40_Ip_UTestCheckBusy) @06e69380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:276810640 (estimated locally) body local optimize_size
  Called by: C40_Ip_UserMarginReadCheck/68 (512926469 (estimated locally),0.48 per call) C40_Ip_ArrayIntegrityCheck/60 (512926469 (estimated locally),0.48 per call) 
  Calls: C40_Ip_UTestCheckBusy.part.0/91 (inlined) (69202658 (estimated locally),0.25 per call) 
C40_Ip_GetBlockNumberFromAddress/57 (C40_Ip_GetBlockNumberFromAddress) @06e691c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_GetCodeBlockNumber/56 (inlined) (294876349 (estimated locally),0.27 per call) 
C40_Ip_GetCodeBlockNumber/56 (C40_Ip_GetCodeBlockNumber) @06e69000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_GetCodeBlockNumber/56 is inline copy in C40_Ip_GetBlockNumberFromAddress/57
  Availability: local
  Function flags: count:294876349 (estimated locally) body local optimize_size
  Called by: C40_Ip_GetBlockNumberFromAddress/57 (inlined) (294876349 (estimated locally),0.27 per call) 
  Calls: 
C40_Ip_GetSectorNumberFromAddress/55 (C40_Ip_GetSectorNumberFromAddress) @06e61e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: C40_Ip_MainInterfaceWritePreCheck/45 (1073741824 (estimated locally),1.00 per call) 
  Calls: C40_Ip_GetSectorNumberFromAddress.part.0/108 (inlined) (348966093 (estimated locally),0.33 per call) 
C40_Ip_CheckLockDomainID_CheckRegister/54 (C40_Ip_CheckLockDomainID_CheckRegister) @06e61c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_u32SectorId/4 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: C40_Ip_CheckLockDomainID/52 (354334802 (estimated locally),0.33 per call) 
  Calls: 
C40_Ip_GetBaseAddressOfSector/53 (C40_Ip_GetBaseAddressOfSector) @06e618c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_GetBaseAddressOfSector/53 is inline copy in C40_Ip_MainInterfaceSectorErase/43
  Availability: local
  Function flags: count:217325345 (estimated locally) body local optimize_size
  Called by: C40_Ip_MainInterfaceSectorErase/43 (inlined) (217325345 (estimated locally),0.20 per call) 
  Calls: 
C40_Ip_CheckLockDomainID/52 (C40_Ip_CheckLockDomainID) @06e61700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: C40_Ip_u32SectorId/4 (read)C40_Ip_u32BitPosition/5 (read)
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_ClearLock/30 (453335945 (estimated locally),0.42 per call) C40_Ip_SetLock/26 (453335945 (estimated locally),0.42 per call) 
  Calls: C40_Ip_CheckLockDomainID_CheckRegister/54 (354334802 (estimated locally),0.33 per call) 
C40_Ip_GetSectorID/51 (C40_Ip_GetSectorID) @06e61540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: C40_Ip_u32SectorId/4 (write)C40_Ip_u32SectorId/4 (write)C40_Ip_u32SectorId/4 (write)C40_Ip_u32SectorId/4 (write)C40_Ip_u32SectorId/4 (read)
  Referring: 
  Function C40_Ip_GetSectorID/51 is inline copy in C40_Ip_GetLockProtect/29
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_GetLockProtect/29 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
C40_Ip_MainInterfaceHVJobStatus/50 (C40_Ip_MainInterfaceHVJobStatus) @06e61380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_MainInterfaceWriteStatus/49 (1073741824 (estimated locally),1.00 per call) C40_Ip_MainInterfaceSectorEraseStatus/44 (1073741824 (estimated locally),1.00 per call) 
  Calls: C40_Ip_MainInterfaceHVJobStatus.part.0/90 (inlined) (536870912 (estimated locally),0.50 per call) 
C40_Ip_MainInterfaceWriteStatus/49 (C40_Ip_MainInterfaceWriteStatus) @06e611c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_u32ProgrammedAddress/0 (read)C40_Ip_u32ProgrammedLength/1 (read)C40_Ip_pProgrammedData/2 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_Compare/32 (143434728 (estimated locally),0.13 per call) C40_Ip_MainInterfaceHVJobStatus/50 (1073741824 (estimated locally),1.00 per call) 
C40_Ip_MainInterfaceWrite/48 (C40_Ip_MainInterfaceWrite) @06e61000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_u32LogicalAddressCheckFail/6 (write)C40_Ip_eOpStatus/8 (write)C40_Ip_u32ProgrammedAddress/0 (write)C40_Ip_u32ProgrammedLength/1 (write)C40_Ip_pProgrammedData/2 (write)C40_Ip_bAsync/10 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_FlashAccessCalloutStart/71 (43986650 (estimated locally),0.04 per call) C40_Ip_MainInterfaceFillDataBuff/46 (inlined) (217325345 (estimated locally),0.20 per call) C40_Ip_ClearInterlockWrite/47 (23420221 (estimated locally),0.02 per call) C40_Ip_MainInterfaceWriteJobAddress/110 (inlined) (194843768 (estimated locally),0.18 per call) C40_Ip_ClearAllErrorFlagsMainInterface/41 (194843768 (estimated locally),0.18 per call) C40_Ip_Compare/32 (217325345 (estimated locally),0.20 per call) C40_Ip_MainInterfaceWritePreCheck/45 (inlined) (1073741824 (estimated locally),1.00 per call) 
C40_Ip_ClearInterlockWrite/47 (C40_Ip_ClearInterlockWrite) @06e2de00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:118111600 (estimated locally) body local optimize_size
  Called by: C40_Ip_MainInterfaceWrite/48 (23420221 (estimated locally),0.02 per call) C40_Ip_MainInterfaceSectorErase/43 (26122506 (estimated locally),0.02 per call) 
  Calls: 
C40_Ip_MainInterfaceFillDataBuff/46 (C40_Ip_MainInterfaceFillDataBuff) @06e2dc40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_MainInterfaceFillDataBuff/46 is inline copy in C40_Ip_MainInterfaceWrite/48
  Availability: local
  Function flags: count:217325345 (estimated locally) body local optimize_size
  Called by: C40_Ip_MainInterfaceWrite/48 (inlined) (217325345 (estimated locally),0.20 per call) 
  Calls: 
C40_Ip_MainInterfaceWritePreCheck/45 (C40_Ip_MainInterfaceWritePreCheck) @06e2da80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_MainInterfaceWritePreCheck/45 is inline copy in C40_Ip_MainInterfaceWrite/48
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_MainInterfaceWrite/48 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: C40_Ip_GetLock/28 (9742865 (estimated locally),0.01 per call) C40_Ip_GetSectorNumberFromAddress/55 (1073741824 (estimated locally),1.00 per call) 
C40_Ip_MainInterfaceSectorEraseStatus/44 (C40_Ip_MainInterfaceSectorEraseStatus) @06e2d8c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_u32ErasedSectorAddress/3 (read)C40_Ip_eReadStatus/7 (write)C40_Ip_eReadStatus/7 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_EraseVerify/36 (143434728 (estimated locally),0.13 per call) C40_Ip_MainInterfaceHVJobStatus/50 (1073741824 (estimated locally),1.00 per call) 
C40_Ip_MainInterfaceSectorErase/43 (C40_Ip_MainInterfaceSectorErase) @06e2d700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_u32ErasedSectorAddress/3 (write)C40_Ip_bAsync/10 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_FlashAccessCalloutStart/71 (73890617 (estimated locally),0.07 per call) C40_Ip_ClearInterlockWrite/47 (26122506 (estimated locally),0.02 per call) C40_Ip_MainInterfaceWriteJobAddress/109 (inlined) (217325345 (estimated locally),0.20 per call) C40_Ip_GetBaseAddressOfSector/53 (inlined) (217325345 (estimated locally),0.20 per call) C40_Ip_ClearAllErrorFlagsMainInterface/41 (217325345 (estimated locally),0.20 per call) C40_Ip_MainInterfaceSectorErasePreCheck/42 (inlined) (1073741824 (estimated locally),1.00 per call) 
C40_Ip_MainInterfaceSectorErasePreCheck/42 (C40_Ip_MainInterfaceSectorErasePreCheck) @06e2d460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_MainInterfaceSectorErasePreCheck/42 is inline copy in C40_Ip_MainInterfaceSectorErase/43
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_MainInterfaceSectorErase/43 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: C40_Ip_GetLock/28 (111347027 (estimated locally),0.10 per call) 
C40_Ip_ClearAllErrorFlagsMainInterface/41 (C40_Ip_ClearAllErrorFlagsMainInterface) @06e2d2a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_MainInterfaceWrite/48 (194843768 (estimated locally),0.18 per call) C40_Ip_MainInterfaceSectorErase/43 (217325345 (estimated locally),0.20 per call) C40_Ip_Read/25 (1073741824 (estimated locally),3.18 per call) C40_Ip_EraseVerify/36 (1073741824 (estimated locally),9.35 per call) C40_Ip_ProgramVerify/34 (3513060404 (estimated locally),3.27 per call) C40_Ip_InitMainInterface/39 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
C40_Ip_MainInterfaceAbort/40 (C40_Ip_MainInterfaceAbort) @06e2d0e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:118111600 (estimated locally) body local optimize_size
  Called by: C40_Ip_Abort/16 (1073741824 (estimated locally),1.00 per call) C40_Ip_InitMainInterface/39 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
C40_Ip_InitMainInterface/39 (C40_Ip_InitMainInterface) @06e25ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_InitMainInterface/39 is inline copy in C40_Ip_Init/13
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_Init/13 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: C40_Ip_ClearAllErrorFlagsMainInterface/41 (1073741824 (estimated locally),1.00 per call) C40_Ip_MainInterfaceAbort/40 (1073741824 (estimated locally),1.00 per call) 
C40_Ip_MainInterfaceWriteJobAddress/38 (C40_Ip_MainInterfaceWriteJobAddress) @06e25d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 109
  References: 
  Referring: 
  Function C40_Ip_MainInterfaceWriteJobAddress/38 is inline copy in C40_Ip_UserMarginReadCheck/68
  Availability: local
  Function flags: count:67769897 (estimated locally) body local optimize_size
  Called by: C40_Ip_UserMarginReadCheck/68 (inlined) (67769897 (estimated locally),0.06 per call) 
  Calls: 
C40_Ip_MainInterfaceWriteLogicalAddress/37 (C40_Ip_MainInterfaceWriteLogicalAddress) @06e25b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
C40_Ip_EraseVerify/36 (C40_Ip_EraseVerify) @06e259a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: C40_Ip_eReadStatus/7 (write)
  Referring: 
  Availability: local
  Function flags: count:114863532 (estimated locally) body local optimize_size
  Called by: C40_Ip_MainInterfaceSectorEraseStatus/44 (143434728 (estimated locally),0.13 per call) C40_Ip_Compare/32 (161061273 (estimated locally),0.15 per call) 
  Calls: C40_Ip_CheckReadCompareStatus.isra.0/78 (1073741824 (estimated locally),9.35 per call) C40_Ip_FlashAccessCalloutFinish/72 (1073741824 (estimated locally),9.35 per call) C40_Ip_CompareBlank/35 (inlined) (1073741824 (estimated locally),9.35 per call) C40_Ip_FlashAccessCalloutStart/71 (1073741824 (estimated locally),9.35 per call) C40_Ip_ClearAllErrorFlagsMainInterface/41 (1073741824 (estimated locally),9.35 per call) 
C40_Ip_CompareBlank/35 (C40_Ip_CompareBlank) @06e257e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_CompareBlank/35 is inline copy in C40_Ip_EraseVerify/36
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_EraseVerify/36 (inlined) (1073741824 (estimated locally),9.35 per call) 
  Calls: 
C40_Ip_ProgramVerify/34 (C40_Ip_ProgramVerify) @06e25620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: C40_Ip_eReadStatus/7 (write)
  Referring: 
  Function C40_Ip_ProgramVerify/34 is inline copy in C40_Ip_Compare/32
  Availability: local
  Function flags: count:375809638 (estimated locally) body local optimize_size
  Called by: C40_Ip_Compare/32 (inlined) (375809638 (estimated locally),0.35 per call) 
  Calls: C40_Ip_CheckReadCompareStatus.isra.0/78 (3513060404 (estimated locally),3.27 per call) C40_Ip_FlashAccessCalloutFinish/72 (3513060404 (estimated locally),3.27 per call) C40_Ip_CompareData/33 (inlined) (3513060404 (estimated locally),3.27 per call) C40_Ip_FlashAccessCalloutStart/71 (3513060404 (estimated locally),3.27 per call) C40_Ip_ClearAllErrorFlagsMainInterface/41 (3513060404 (estimated locally),3.27 per call) 
C40_Ip_CompareData/33 (C40_Ip_CompareData) @06e25460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_CompareData/33 is inline copy in C40_Ip_Compare/32
  Availability: local
  Function flags: count:3513060404 (estimated locally) body local optimize_size
  Called by: C40_Ip_ProgramVerify/34 (inlined) (3513060404 (estimated locally),3.27 per call) 
  Calls: 
C40_Ip_Compare/32 (C40_Ip_Compare) @06e252a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_eReadStatus/7 (write)C40_Ip_eReadStatus/7 (write)C40_Ip_eReadStatus/7 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741823 (estimated locally) body optimize_size
  Called by: C40_Ip_MainInterfaceWrite/48 (217325345 (estimated locally),0.20 per call) C40_Ip_MainInterfaceWriteStatus/49 (143434728 (estimated locally),0.13 per call) 
  Calls: C40_Ip_EraseVerify/36 (161061273 (estimated locally),0.15 per call) C40_Ip_ProgramVerify/34 (inlined) (375809638 (estimated locally),0.35 per call) 
C40_Ip_ClearLockProtect/31 (C40_Ip_ClearLockProtect) @06e250e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_u32BitPosition/5 (read)C40_Ip_u32BitPosition/5 (read)C40_Ip_u32BitPosition/5 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: C40_Ip_ClearLock/30 (54490981 (estimated locally),0.05 per call) 
  Calls: C40_Ip_ClearLockProtect.part.0/104 (inlined) (182536112 (estimated locally),0.17 per call) 
C40_Ip_ClearLock/30 (C40_Ip_ClearLock) @0680fee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741823 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_ClearLockProtect/31 (54490981 (estimated locally),0.05 per call) C40_Ip_CheckLockDomainID/52 (453335945 (estimated locally),0.42 per call) C40_Ip_GetLock/28 (1073741823 (estimated locally),1.00 per call) 
C40_Ip_GetLockProtect/29 (C40_Ip_GetLockProtect) @0680fc40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_u32SectorId/4 (write)C40_Ip_u32BitPosition/5 (write)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: C40_Ip_GetLock.part.0/103 (354334800 (estimated locally),0.33 per call) 
  Calls: C40_Ip_GetSectorID/51 (inlined) (1073741824 (estimated locally),1.00 per call) 
C40_Ip_GetLock/28 (C40_Ip_GetLock) @0680fa80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: C40_Ip_MainInterfaceWritePreCheck/45 (9742865 (estimated locally),0.01 per call) C40_Ip_ClearLock/30 (1073741823 (estimated locally),1.00 per call) C40_Ip_SetLock/26 (1073741823 (estimated locally),1.00 per call) C40_Ip_MainInterfaceSectorErasePreCheck/42 (111347027 (estimated locally),0.10 per call) 
  Calls: C40_Ip_GetLock.part.0/103 (inlined) (354334800 (estimated locally),0.33 per call) 
C40_Ip_SetLockProtect/27 (C40_Ip_SetLockProtect) @0680f7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_u32BitPosition/5 (read)C40_Ip_u32BitPosition/5 (read)C40_Ip_u32BitPosition/5 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: C40_Ip_SetLock/26 (54490981 (estimated locally),0.05 per call) 
  Calls: C40_Ip_SetLockProtect.part.0/102 (inlined) (182536112 (estimated locally),0.17 per call) 
C40_Ip_SetLock/26 (C40_Ip_SetLock) @0680f620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741823 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_SetLockProtect/27 (54490981 (estimated locally),0.05 per call) C40_Ip_CheckLockDomainID/52 (453335945 (estimated locally),0.42 per call) C40_Ip_GetLock/28 (1073741823 (estimated locally),1.00 per call) 
C40_Ip_Read/25 (C40_Ip_Read) @0680f380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_eReadStatus/7 (write)C40_Ip_eReadStatus/7 (write)C40_Ip_eReadStatus/7 (write)C40_Ip_eReadStatus/7 (read)
  Referring: 
  Availability: available
  Function flags: count:337833917 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_CheckReadCompareStatus.isra.0/78 (1073741824 (estimated locally),3.18 per call) C40_Ip_FlashAccessCalloutFinish/72 (1073741824 (estimated locally),3.18 per call) C40_Ip_ReadData/22 (inlined) (1073741824 (estimated locally),3.18 per call) C40_Ip_FlashAccessCalloutStart/71 (1073741824 (estimated locally),3.18 per call) C40_Ip_ClearAllErrorFlagsMainInterface/41 (1073741824 (estimated locally),3.18 per call) 
C40_Ip_ReadData/22 (C40_Ip_ReadData) @0680bd20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function C40_Ip_ReadData/22 is inline copy in C40_Ip_Read/25
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: C40_Ip_Read/25 (inlined) (1073741824 (estimated locally),3.18 per call) 
  Calls: 
C40_Ip_SetSeedMisr/21 (C40_Ip_SetSeedMisr) @0680bb60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:153391689 (estimated locally) body local optimize_size
  Called by: C40_Ip_UserMarginReadCheck/68 (8145942 (estimated locally),0.01 per call) C40_Ip_ArrayIntegrityCheck/60 (14719622 (estimated locally),0.01 per call) 
  Calls: C40_Ip_SetSeedMisr.part.0/79 (inlined) (46017506 (estimated locally),0.30 per call) 
C40_Ip_Abort/16 (C40_Ip_Abort) @0680b2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_MainInterfaceAbort/40 (1073741824 (estimated locally),1.00 per call) 
C40_Ip_Block4PipeSelect/15 (C40_Ip_Block4PipeSelect) @0680b0e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: C40_Ip_Init/13 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
C40_Ip_DataErrorSuppression/14 (C40_Ip_DataErrorSuppression) @06808e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: C40_Ip_Init/13 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
C40_Ip_Init/13 (C40_Ip_Init) @06808c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: C40_Ip_pConfigPtr/9 (write)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: C40_Ip_InitMainInterface/39 (inlined) (1073741824 (estimated locally),1.00 per call) C40_Ip_Block4PipeSelect/15 (1073741824 (estimated locally),1.00 per call) C40_Ip_DataErrorSuppression/14 (1073741824 (estimated locally),1.00 per call) 
C40_Ip_pFlashBaseAddress/11 (C40_Ip_pFlashBaseAddress) @06de0630
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
C40_Ip_bAsync/10 (C40_Ip_bAsync) @06de05e8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: C40_Ip_MainInterfaceSectorErase/43 (read)C40_Ip_MainInterfaceWrite/48 (read)C40_Ip_SetAsyncMode/70 (write)
  Availability: available
  Varpool flags: initialized
C40_Ip_pConfigPtr/9 (C40_Ip_pConfigPtr) @06de05a0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: C40_Ip_FlashAccessCalloutStart/71 (read)C40_Ip_FlashAccessCalloutFinish/72 (read)C40_Ip_Init/13 (write)
  Availability: available
  Varpool flags:
C40_Ip_eOpStatus/8 (C40_Ip_eOpStatus) @06de0558
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: C40_Ip_MainInterfaceWrite/48 (write)C40_Ip_GetFailedAddress/69 (read)
  Availability: available
  Varpool flags:
C40_Ip_eReadStatus/7 (C40_Ip_eReadStatus) @06de0510
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: C40_Ip_MainInterfaceSectorEraseStatus/44 (read)C40_Ip_CheckReadCompareStatus.isra.0/78 (write)C40_Ip_EraseVerify/36 (write)C40_Ip_Read/25 (write)C40_Ip_ProgramVerify/34 (write)C40_Ip_Read/25 (read)C40_Ip_CheckReadCompareStatus.isra.0/78 (write)C40_Ip_Read/25 (write)C40_Ip_MainInterfaceSectorEraseStatus/44 (write)C40_Ip_Read/25 (write)C40_Ip_Compare/32 (write)C40_Ip_Compare/32 (write)C40_Ip_Compare/32 (read)
  Availability: available
  Varpool flags: initialized
C40_Ip_u32LogicalAddressCheckFail/6 (C40_Ip_u32LogicalAddressCheckFail) @06de04c8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: C40_Ip_MainInterfaceWrite/48 (write)C40_Ip_GetFailedAddress/69 (read)
  Availability: available
  Varpool flags:
C40_Ip_u32BitPosition/5 (C40_Ip_u32BitPosition) @06de0480
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: C40_Ip_GetLockProtect/29 (write)C40_Ip_ClearLockProtect/31 (read)C40_Ip_SetLockProtect.part.0/102 (read)C40_Ip_SetLockProtect/27 (read)C40_Ip_SetLockProtect/27 (read)C40_Ip_SetLockProtect/27 (read)C40_Ip_ClearLockProtect.part.0/104 (read)C40_Ip_ClearLockProtect/31 (read)C40_Ip_ClearLockProtect/31 (read)C40_Ip_CheckLockDomainID/52 (read)
  Availability: available
  Varpool flags:
C40_Ip_u32SectorId/4 (C40_Ip_u32SectorId) @06de0438
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: C40_Ip_GetLockProtect/29 (write)C40_Ip_GetSectorID/51 (write)C40_Ip_CheckLockDomainID_CheckRegister/54 (read)C40_Ip_GetSectorID/51 (read)C40_Ip_GetSectorID/51 (write)C40_Ip_GetSectorID/51 (write)C40_Ip_GetSectorID/51 (write)C40_Ip_CheckLockDomainID/52 (read)
  Availability: available
  Varpool flags:
C40_Ip_u32ErasedSectorAddress/3 (C40_Ip_u32ErasedSectorAddress) @06de03f0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: C40_Ip_MainInterfaceSectorErase/43 (write)C40_Ip_MainInterfaceSectorEraseStatus/44 (read)
  Availability: available
  Varpool flags:
C40_Ip_pProgrammedData/2 (C40_Ip_pProgrammedData) @06de03a8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: C40_Ip_MainInterfaceWriteStatus/49 (read)C40_Ip_MainInterfaceWrite/48 (write)
  Availability: available
  Varpool flags:
C40_Ip_u32ProgrammedLength/1 (C40_Ip_u32ProgrammedLength) @06de0360
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: C40_Ip_MainInterfaceWriteStatus/49 (read)C40_Ip_MainInterfaceWrite/48 (write)
  Availability: available
  Varpool flags:
C40_Ip_u32ProgrammedAddress/0 (C40_Ip_u32ProgrammedAddress) @06de0318
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: C40_Ip_MainInterfaceWriteStatus/49 (read)C40_Ip_MainInterfaceWrite/48 (write)
  Availability: available
  Varpool flags:

;; Function C40_Ip_MainInterfaceAbort (C40_Ip_MainInterfaceAbort, funcdef_no=27, decl_uid=8249, cgraph_uid=28, symbol_order=40)

C40_Ip_MainInterfaceAbort ()
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _2 = _1 & 4294967294;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct FLASH_Type *)1076805632B].MCRS;
  _4 = _3 & 32768;
  if (_4 == 0)
    goto <bb 5>; [89.00%]
  else
    goto <bb 4>; [11.00%]

  <bb 5> [local count: 955630223]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _6 = _5 & 4294966991;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _6;
  # DEBUG BEGIN_STMT
  return 23205;

}



;; Function C40_Ip_ClearAllErrorFlagsMainInterface (C40_Ip_ClearAllErrorFlagsMainInterface, funcdef_no=28, decl_uid=8245, cgraph_uid=29, symbol_order=41)

C40_Ip_ClearAllErrorFlagsMainInterface ()
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct FLASH_Type *)1076805632B].MCRS;
  _2 = _1 & 4078108672;
  MEM[(struct FLASH_Type *)1076805632B].MCRS ={v} _2;
  return;

}



;; Function C40_Ip_ClearInterlockWrite (C40_Ip_ClearInterlockWrite, funcdef_no=34, decl_uid=8259, cgraph_uid=35, symbol_order=47)

C40_Ip_ClearInterlockWrite ()
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].DATA[0] ={v} 0;
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _2 = _1 | 256;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _2;
  # DEBUG BEGIN_STMT

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _4 = _3 & 256;
  if (_4 == 0)
    goto <bb 5>; [89.00%]
  else
    goto <bb 4>; [11.00%]

  <bb 5> [local count: 955630223]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _6 = _5 & 4294967039;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _6;
  return;

}



;; Function C40_Ip_FlashAccessCalloutStart (C40_Ip_FlashAccessCalloutStart, funcdef_no=58, decl_uid=8276, cgraph_uid=59, symbol_order=71)

C40_Ip_FlashAccessCalloutStart ()
{
  const struct C40_ConfigType * C40_Ip_pConfigPtr.1_1;
  void (*<T4c8>) (void) _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  C40_Ip_pConfigPtr.1_1 = C40_Ip_pConfigPtr;
  _2 = C40_Ip_pConfigPtr.1_1->startFlashAccessNotifPtr;
  if (_2 != 0B)
    goto <bb 3>; [70.00%]
  else
    goto <bb 4>; [30.00%]

  <bb 3> [local count: 751619278]:
  # DEBUG BEGIN_STMT
  _2 ();

  <bb 4> [local count: 1073741824]:
  return;

}



;; Function C40_Ip_FlashAccessCalloutFinish (C40_Ip_FlashAccessCalloutFinish, funcdef_no=59, decl_uid=8278, cgraph_uid=60, symbol_order=72)

C40_Ip_FlashAccessCalloutFinish ()
{
  const struct C40_ConfigType * C40_Ip_pConfigPtr.8_1;
  void (*<T4c8>) (void) _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  C40_Ip_pConfigPtr.8_1 = C40_Ip_pConfigPtr;
  _2 = C40_Ip_pConfigPtr.8_1->finishedFlashAccessNotifPtr;
  if (_2 != 0B)
    goto <bb 3>; [70.00%]
  else
    goto <bb 4>; [30.00%]

  <bb 3> [local count: 751619278]:
  # DEBUG BEGIN_STMT
  _2 ();

  <bb 4> [local count: 1073741824]:
  return;

}



;; Function C40_Ip_CheckReadCompareStatus.isra.0 (C40_Ip_CheckReadCompareStatus.isra.0, funcdef_no=65, decl_uid=9235, cgraph_uid=66, symbol_order=78)

C40_Ip_CheckReadCompareStatus.isra.0 (boolean CompareResult)
{
  C40_Ip_StatusType Status;
  uint32 ErrorFlags;
  long unsigned int _1;
  long unsigned int _3;
  long unsigned int _4;

  <bb 7> [local count: 1073741824]:
  # DEBUG ReadAddress s=> ReadAddress

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Status => 10212
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct FLASH_Type *)1076805632B].MCRS;
  ErrorFlags_2 = _1 & 856686592;
  # DEBUG ErrorFlags => ErrorFlags_2
  # DEBUG BEGIN_STMT
  if (ErrorFlags_2 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct FLASH_Type *)1076805632B].MCRS;
  _4 = ErrorFlags_2 & _3;
  MEM[(struct FLASH_Type *)1076805632B].MCRS ={v} _4;
  # DEBUG BEGIN_STMT
  C40_Ip_eReadStatus = 10212;
  goto <bb 6>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (CompareResult_5(D) != 1)
    goto <bb 5>; [66.00%]
  else
    goto <bb 6>; [34.00%]

  <bb 5> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  C40_Ip_eReadStatus = 13260;

  <bb 6> [local count: 1073741824]:
  # Status_6 = PHI <10212(3), 23205(4), 10212(5)>
  # DEBUG Status => Status_6
  # DEBUG BEGIN_STMT
  return Status_6;

}



;; Function C40_Ip_EraseVerify (C40_Ip_EraseVerify, funcdef_no=23, decl_uid=8202, cgraph_uid=24, symbol_order=36)


Symbols to be put in SSA form
{ D.9197 D.9443 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 18
Number of blocks to update: 17 ( 94%)


Merging blocks 3 and 10
Removing basic block 8
Merging blocks 17 and 9
No longer having address taken: CompareResult

Symbols to be put in SSA form
{ D.8445 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 15
Number of blocks to update: 14 ( 93%)


;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;;
;; Loop 1
;;  header 3, latch 11
;;  depth 1, outer 0
;;  nodes: 3 11 10 5 8 9 6 7 4
;; 2 succs { 3 }
;; 3 succs { 4 6 }
;; 4 succs { 5 6 }
;; 5 succs { 10 }
;; 6 succs { 7 9 }
;; 7 succs { 8 9 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 12 11 }
;; 11 succs { 3 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 1 }
C40_Ip_EraseVerify (uint32 Address, uint32 Size)
{
  uint32 ReadSize;
  uint32 D.9443;
  boolean CompareResult;
  C40_Ip_StatusType Status;
  uint32 ReadSize;
  uint32 SizeLeft;
  uint32 ReadAddress;
  unsigned char CompareResult.27_1;
  long unsigned int _22;
  uint32 * Address.5_23;
  long unsigned int _24;
  _Bool _25;
  unsigned char _26;
  long unsigned int _27;
  uint16 * Address.6_28;
  short unsigned int _29;
  _Bool _30;
  unsigned char _31;
  uint8 * Address.7_32;
  unsigned char _33;
  _Bool _34;
  unsigned char _35;

  <bb 2> [local count: 114863530]:
  # DEBUG BEGIN_STMT
  # DEBUG ReadAddress => Address_7(D)
  # DEBUG BEGIN_STMT
  # DEBUG SizeLeft => Size_8(D)

  <bb 3> [local count: 1073741824]:
  # ReadAddress_2 = PHI <Address_7(D)(2), ReadAddress_17(11)>
  # SizeLeft_3 = PHI <Size_8(D)(2), SizeLeft_18(11)>
  # DEBUG ReadSize => NULL
  # DEBUG SizeLeft => SizeLeft_3
  # DEBUG ReadAddress => ReadAddress_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#4 => ReadAddress_2
  # DEBUG INLINE_ENTRY C40_Ip_ClearPreviousRead
  # DEBUG ReadAddress => D#4
  # DEBUG BEGIN_STMT
  # DEBUG Status => 23205
  # DEBUG BEGIN_STMT
  C40_Ip_ClearAllErrorFlagsMainInterface ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Status => 23205
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C40_Ip_FlashAccessCalloutStart ();
  # DEBUG BEGIN_STMT
  # DEBUG ReadAddress => ReadAddress_2
  # DEBUG SizeLeft => SizeLeft_3
  # DEBUG CompareResult => &CompareResult
  # DEBUG INLINE_ENTRY C40_Ip_CompareBlank
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _22 = ReadAddress_2 & 3;
  if (_22 == 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 4> [local count: 536870913]:
  if (SizeLeft_3 > 3)
    goto <bb 5>; [35.00%]
  else
    goto <bb 6>; [65.00%]

  <bb 5> [local count: 187904819]:
  # DEBUG BEGIN_STMT
  # DEBUG ReadSize => 4
  # DEBUG BEGIN_STMT
  # DEBUG Address => ReadAddress_2
  # DEBUG INLINE_ENTRY C40_Ip_ReadData32
  # DEBUG BEGIN_STMT
  Address.5_23 = (uint32 *) ReadAddress_2;
  _24 = *Address.5_23;
  # DEBUG Address => NULL
  _25 = _24 == 4294967295;
  _26 = (unsigned char) _25;
  CompareResult_43 = _26;
  # DEBUG CompareResult => CompareResult_43
  goto <bb 10>; [100.00%]

  <bb 6> [local count: 885837007]:
  # DEBUG BEGIN_STMT
  _27 = ReadAddress_2 & 1;
  if (_27 == 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 7> [local count: 442918503]:
  if (SizeLeft_3 > 1)
    goto <bb 8>; [43.66%]
  else
    goto <bb 9>; [56.34%]

  <bb 8> [local count: 193378218]:
  # DEBUG BEGIN_STMT
  # DEBUG ReadSize => 2
  # DEBUG BEGIN_STMT
  # DEBUG Address => ReadAddress_2
  # DEBUG INLINE_ENTRY C40_Ip_ReadData16
  # DEBUG BEGIN_STMT
  Address.6_28 = (uint16 *) ReadAddress_2;
  _29 = *Address.6_28;
  # DEBUG Address => NULL
  _30 = _29 == 65535;
  _31 = (unsigned char) _30;
  CompareResult_44 = _31;
  # DEBUG CompareResult => CompareResult_44
  goto <bb 10>; [100.00%]

  <bb 9> [local count: 692458788]:
  # DEBUG BEGIN_STMT
  # DEBUG ReadSize => 1
  # DEBUG BEGIN_STMT
  # DEBUG Address => ReadAddress_2
  # DEBUG INLINE_ENTRY C40_Ip_ReadData8
  # DEBUG BEGIN_STMT
  Address.7_32 = (uint8 *) ReadAddress_2;
  _33 = *Address.7_32;
  # DEBUG Address => NULL
  _34 = _33 == 255;
  _35 = (unsigned char) _34;
  CompareResult_45 = _35;
  # DEBUG CompareResult => CompareResult_45

  <bb 10> [local count: 1073741824]:
  # ReadSize_36 = PHI <4(5), 2(8), 1(9)>
  # CompareResult_42 = PHI <CompareResult_43(5), CompareResult_44(8), CompareResult_45(9)>
  # DEBUG CompareResult => CompareResult_42
  # DEBUG ReadSize => ReadSize_36
  # DEBUG BEGIN_STMT
  _41 = ReadSize_36;
  # DEBUG ReadAddress => NULL
  # DEBUG SizeLeft => NULL
  # DEBUG CompareResult => NULL
  # DEBUG ReadSize => NULL
  ReadSize_13 = _41;
  # DEBUG ReadSize => ReadSize_13
  # DEBUG BEGIN_STMT
  C40_Ip_FlashAccessCalloutFinish ();
  # DEBUG BEGIN_STMT
  CompareResult.27_1 = CompareResult_42;
  # DEBUG D#1 => ReadAddress_2
  Status_16 = C40_Ip_CheckReadCompareStatus.isra.0 (CompareResult.27_1);
  # DEBUG Status => Status_16
  # DEBUG ReadSize => ReadSize_13
  # DEBUG BEGIN_STMT
  if (Status_16 != 23205)
    goto <bb 12>; [5.50%]
  else
    goto <bb 11>; [94.50%]

  <bb 11> [local count: 1014686024]:
  # DEBUG BEGIN_STMT
  ReadAddress_17 = ReadAddress_2 + ReadSize_13;
  # DEBUG ReadAddress => ReadAddress_17
  # DEBUG BEGIN_STMT
  SizeLeft_18 = SizeLeft_3 - ReadSize_13;
  # DEBUG SizeLeft => SizeLeft_18
  # DEBUG BEGIN_STMT
  if (SizeLeft_18 != 0)
    goto <bb 3>; [94.50%]
  else
    goto <bb 12>; [5.50%]

  <bb 12> [local count: 114863532]:
  # SizeLeft_4 = PHI <SizeLeft_3(10), SizeLeft_18(11)>
  # DEBUG SizeLeft => SizeLeft_4
  # DEBUG BEGIN_STMT
  if (SizeLeft_4 == 0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 13> [local count: 57431766]:
  # DEBUG BEGIN_STMT
  C40_Ip_eReadStatus = 23205;

  <bb 14> [local count: 114863532]:
  # DEBUG D#13 => {CLOBBER}
  # DEBUG CompareResult => D#13
  return;

}



;; Function C40_Ip_SetSeedMisr (C40_Ip_SetSeedMisr, funcdef_no=8, decl_uid=8239, cgraph_uid=9, symbol_order=21)


Symbols to be put in SSA form
{ D.9173 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 16
Number of blocks to update: 15 ( 94%)


Removing basic block 3
Removing basic block 8
Removing basic block 9
Removing basic block 10
Removing basic block 11
Merging blocks 14 and 15
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 3
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;;
;; Loop 1
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;; 2 succs { 4 7 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 9 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 9 }
;; 9 succs { 1 }
C40_Ip_SetSeedMisr (const struct C40_Ip_MisrType * MisrSeedValues)
{
  uint8 Counter;
  uint8 Counter;
  int _1;
  long unsigned int _3;
  long unsigned int _5;
  int _14;

  <bb 2> [local count: 153391689]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (MisrSeedValues_8(D) == 0B)
    goto <bb 4>; [30.00%]
  else
    goto <bb 7>; [70.00%]

  <bb 3> [local count: 414157560]:
  # DEBUG BEGIN_STMT
  _14 = (int) Counter_13;
  MEM[(struct FLASH_Type *)1076805632B].UM[_14] ={v} 0;
  # DEBUG BEGIN_STMT
  Counter_15 = Counter_13 + 1;
  # DEBUG Counter => Counter_15

  <bb 4> [local count: 460175067]:
  # Counter_13 = PHI <0(2), Counter_15(3)>
  # DEBUG D#2 => NULL
  # DEBUG D#3 => NULL
  # DEBUG MisrSeedValues => NULL
  # DEBUG Counter => Counter_13
  # DEBUG BEGIN_STMT
  if (Counter_13 != 9)
    goto <bb 3>; [90.00%]
  else
    goto <bb 5>; [10.00%]

  <bb 5> [local count: 46017507]:
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].UM9 ={v} 0;
  goto <bb 9>; [100.00%]

  <bb 6> [local count: 966367642]:
  # DEBUG BEGIN_STMT
  _1 = (int) Counter_6;
  _3 = MisrSeedValues_8(D)->arrMISRValue[_1];
  MEM[(struct FLASH_Type *)1076805632B].UM[_1] ={v} _3;
  # DEBUG BEGIN_STMT
  Counter_12 = Counter_6 + 1;
  # DEBUG Counter => Counter_12

  <bb 7> [local count: 1073741824]:
  # Counter_6 = PHI <Counter_12(6), 0(2)>
  # DEBUG Counter => Counter_6
  # DEBUG BEGIN_STMT
  if (Counter_6 != 9)
    goto <bb 6>; [90.00%]
  else
    goto <bb 8>; [10.00%]

  <bb 8> [local count: 107374182]:
  # DEBUG BEGIN_STMT
  _5 = MisrSeedValues_8(D)->arrMISRValue[9];
  MEM[(struct FLASH_Type *)1076805632B].UM9 ={v} _5;

  <bb 9> [local count: 153391689]:
  # DEBUG Counter => NULL
  # DEBUG MisrSeedValues => NULL
  return;

}



;; Function C40_Ip_MainInterfaceHVJobStatus (C40_Ip_MainInterfaceHVJobStatus, funcdef_no=37, decl_uid=8251, cgraph_uid=38, symbol_order=50)


Symbols to be put in SSA form
{ D.9184 D.9468 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)


Removing basic block 3
Removing basic block 6
Merging blocks 9 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 6 3 }
;; 3 succs { 5 4 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 1 }
C40_Ip_MainInterfaceHVJobStatus ()
{
  uint32 ErrorFlags;
  C40_Ip_StatusType ReturnCode;
  C40_Ip_StatusType D.9468;
  C40_Ip_StatusType ReturnCode;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _8;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 ={v} MEM[(struct FLASH_Type *)1076805632B].MCRS;
  _3 = _2 & 32768;
  if (_3 == 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG INLINE_ENTRY C40_Ip_MainInterfaceHVJobStatus
  # DEBUG BEGIN_STMT
  _8 ={v} MEM[(struct FLASH_Type *)1076805632B].MCRS;
  ErrorFlags_9 = _8 & 212992;
  # DEBUG ErrorFlags => ErrorFlags_9
  # DEBUG BEGIN_STMT
  if (ErrorFlags_9 == 16384)
    goto <bb 5>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 4> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 10212

  <bb 5> [local count: 536870913]:
  # ReturnCode_10 = PHI <23205(3), 10212(4)>
  # DEBUG ReturnCode => ReturnCode_10
  # DEBUG BEGIN_STMT
  _11 = ReturnCode_10;
  # DEBUG ReturnCode => NULL
  # DEBUG ErrorFlags => NULL
  ReturnCode_7 = _11;

  <bb 6> [local count: 1073741824]:
  # ReturnCode_5 = PHI <59202(2), ReturnCode_7(5)>
  # DEBUG ReturnCode => ReturnCode_5
  # DEBUG BEGIN_STMT
  return ReturnCode_5;

}



;; Function C40_Ip_UTestCheckBusy (C40_Ip_UTestCheckBusy, funcdef_no=45, decl_uid=8213, cgraph_uid=46, symbol_order=58)


Symbols to be put in SSA form
{ D.9188 D.9473 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 16
Number of blocks to update: 15 ( 94%)


Removing basic block 8
Removing basic block 11
Merging blocks 15 and 10
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 7
;; 2 succs { 3 12 }
;; 3 succs { 4 12 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 5 8 }
;; 8 succs { 10 9 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 1 }
C40_Ip_UTestCheckBusy ()
{
  C40_Ip_StatusType ReturnCode;
  C40_Ip_StatusType D.9473;
  C40_Ip_StatusType ReturnCode;
  uint32 WaitCounter;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;

  <bb 2> [local count: 276810640]:
  # DEBUG BEGIN_STMT
  # DEBUG WaitCounter => 450
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _2 = _1 & 2;
  if (_2 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 3> [local count: 138405320]:
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _4 = _3 & 512;
  if (_4 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 4> [local count: 69202660]:
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct FLASH_Type *)1076805632B].MCRS;
  _6 = _5 & 4077912064;
  MEM[(struct FLASH_Type *)1076805632B].MCRS ={v} _6;
  # DEBUG BEGIN_STMT
  _7 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _8 = _7 & 4294966783;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _8;
  # DEBUG BEGIN_STMT
  _9 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _10 = _9 & 4294967293;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _10;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 1004539164]:
  # DEBUG BEGIN_STMT
  WaitCounter_21 = WaitCounter_13 + 4294967295;
  # DEBUG WaitCounter => WaitCounter_21

  <bb 6> [local count: 1073741824]:
  # WaitCounter_13 = PHI <450(4), WaitCounter_21(5)>
  # DEBUG WaitCounter => WaitCounter_13
  # DEBUG BEGIN_STMT
  _11 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _12 = _11 & 1;
  if (_12 == 0)
    goto <bb 7>; [94.50%]
  else
    goto <bb 8>; [5.50%]

  <bb 7> [local count: 1014686024]:
  if (WaitCounter_13 != 0)
    goto <bb 5>; [99.00%]
  else
    goto <bb 8>; [1.00%]

  <bb 8> [local count: 69202661]:
  # DEBUG INLINE_ENTRY C40_Ip_UTestCheckBusy
  # DEBUG BEGIN_STMT
  _23 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _24 = _23 | 4;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _24;
  # DEBUG BEGIN_STMT
  _25 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _26 = _25 | 2147483648;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _26;
  # DEBUG BEGIN_STMT
  _27 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _28 = _27 & 512;
  if (_28 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 9> [local count: 34601330]:
  _29 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _30 = _29 & 1;
  if (_30 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [local count: 51901996]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 10212

  <bb 11> [local count: 69202661]:
  # ReturnCode_31 = PHI <23205(9), 10212(10)>
  # DEBUG ReturnCode => ReturnCode_31
  # DEBUG BEGIN_STMT
  _34 = ReturnCode_31;
  # DEBUG WaitCounter => NULL
  # DEBUG ReturnCode => NULL
  ReturnCode_22 = _34;

  <bb 12> [local count: 276810641]:
  # ReturnCode_14 = PHI <23205(2), ReturnCode_22(11), 59202(3)>
  # DEBUG ReturnCode => ReturnCode_14
  # DEBUG BEGIN_STMT
  return ReturnCode_14;

}



;; Function C40_Ip_UTestCheckBreakpoint (C40_Ip_UTestCheckBreakpoint, funcdef_no=46, decl_uid=8215, cgraph_uid=47, symbol_order=59)


Symbols to be put in SSA form
{ D.9189 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 11
Number of blocks to update: 10 ( 91%)


Removing basic block 3
Removing basic block 7
Removing basic block 8
Merging blocks 9 and 10
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 5 3 4 }
;; 3 succs { 6 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }
C40_Ip_UTestCheckBreakpoint (C40_Ip_FlashBreakPointsType BreakPoints)
{
  uint32 Temp;
  uint32 Temp;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  switch (BreakPoints_11(D)) <default: <L2> [33.33%], case 0: <L4> [33.33%], case 1: <L1> [33.33%]>

  <bb 3> [local count: 357878150]:
<L4>:
  # DEBUG D#5 => BreakPoints_11(D)
  # DEBUG INLINE_ENTRY C40_Ip_UTestCheckBreakpoint
  # DEBUG D#6 => D#5
  # DEBUG BreakPoints => D#6
  # DEBUG BEGIN_STMT
  Temp_21 ={v} MEM[(struct FLASH_Type *)1076805632B].MCRS;
  # DEBUG Temp => Temp_21
  # DEBUG BEGIN_STMT
  Temp_22 = Temp_21 & 216858623;
  # DEBUG Temp => Temp_22
  # DEBUG BEGIN_STMT
  Temp_23 = Temp_22 | 3221225472;
  # DEBUG Temp => Temp_23
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].MCRS ={v} Temp_23;
  # DEBUG BEGIN_STMT
  _24 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _25 = _24 | 256;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _25;
  # DEBUG BEGIN_STMT
  _26 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _27 = _26 & 3221225471;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _27;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 4> [local count: 357878150]:
<L1>:
  # DEBUG BEGIN_STMT
  Temp_13 ={v} MEM[(struct FLASH_Type *)1076805632B].MCRS;
  # DEBUG Temp => Temp_13
  # DEBUG BEGIN_STMT
  Temp_14 = Temp_13 & 216858623;
  # DEBUG Temp => Temp_14
  # DEBUG BEGIN_STMT
  Temp_15 = Temp_14 | 3221225472;
  # DEBUG Temp => Temp_15
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].MCRS ={v} Temp_15;
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _4 = _3 | 256;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _4;
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _6 = _5 | 1073741824;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _6;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 357878150]:
<L2>:
  # DEBUG BEGIN_STMT
  _7 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _8 = _7 & 4294967039;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _8;
  # DEBUG BEGIN_STMT
  _9 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _10 = _9 & 3221225471;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _10;
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073634451]:
  # DEBUG Temp => NULL
  # DEBUG BreakPoints => NULL
  return;

}



;; Function C40_Ip_DataErrorSuppression (C40_Ip_DataErrorSuppression, funcdef_no=1, decl_uid=8241, cgraph_uid=2, symbol_order=14)

C40_Ip_DataErrorSuppression ()
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCR4;
  _2 = _1 & 4294967294;
  MEM[(struct PFLASH_Type *)1076264960B].PFCR4 ={v} _2;
  return;

}



;; Function C40_Ip_Block4PipeSelect (C40_Ip_Block4PipeSelect, funcdef_no=2, decl_uid=8243, cgraph_uid=3, symbol_order=15)

C40_Ip_Block4PipeSelect ()
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCR4;
  _2 = _1 & 4294967281;
  MEM[(struct PFLASH_Type *)1076264960B].PFCR4 ={v} _2;
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCR4;
  MEM[(struct PFLASH_Type *)1076264960B].PFCR4 ={v} _3;
  return;

}



;; Function C40_Ip_Init (C40_Ip_Init, funcdef_no=0, decl_uid=8120, cgraph_uid=1, symbol_order=13)


Symbols to be put in SSA form
{ D.9205 D.9497 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)


Merging blocks 2 and 4
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
C40_Ip_Init (const struct C40_ConfigType * InitConfig)
{
  C40_Ip_StatusType ReturnCode;
  C40_Ip_StatusType D.9497;
  C40_Ip_StatusType ReturnCode;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 10212
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C40_Ip_DataErrorSuppression ();
  # DEBUG BEGIN_STMT
  C40_Ip_Block4PipeSelect ();
  # DEBUG BEGIN_STMT
  # DEBUG INLINE_ENTRY C40_Ip_InitMainInterface
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 10212
  # DEBUG BEGIN_STMT
  ReturnCode_8 = C40_Ip_MainInterfaceAbort ();
  # DEBUG ReturnCode => ReturnCode_8
  # DEBUG BEGIN_STMT
  _9 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _10 = _9 & 4294963199;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _10;
  # DEBUG BEGIN_STMT
  _11 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _12 = _11 & 4294934527;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _12;
  # DEBUG BEGIN_STMT
  C40_Ip_ClearAllErrorFlagsMainInterface ();
  # DEBUG BEGIN_STMT
  _17 = ReturnCode_8;
  # DEBUG ReturnCode => NULL
  ReturnCode_5 = _17;
  # DEBUG ReturnCode => ReturnCode_5
  # DEBUG BEGIN_STMT
  C40_Ip_pConfigPtr = InitConfig_6(D);
  # DEBUG BEGIN_STMT
  return ReturnCode_5;

}



;; Function C40_Ip_Abort (C40_Ip_Abort, funcdef_no=3, decl_uid=8122, cgraph_uid=4, symbol_order=16)

C40_Ip_Abort ()
{
  C40_Ip_StatusType ReturnCode;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 10212
  # DEBUG BEGIN_STMT
  ReturnCode_3 = C40_Ip_MainInterfaceAbort ();
  # DEBUG ReturnCode => ReturnCode_3
  # DEBUG BEGIN_STMT
  return ReturnCode_3;

}



;; Function C40_Ip_Read (C40_Ip_Read, funcdef_no=12, decl_uid=8126, cgraph_uid=13, symbol_order=25)


Symbols to be put in SSA form
{ D.9207 D.9511 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 22
Number of blocks to update: 21 ( 95%)


Merging blocks 7 and 14
Removing basic block 12
Merging blocks 21 and 13
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
;;
;; Loop 1
;;  header 7, latch 15
;;  depth 1, outer 0
;;  nodes: 7 15 14 9 12 13 10 11 8
;; 2 succs { 5 3 }
;; 3 succs { 5 4 }
;; 4 succs { 5 }
;; 5 succs { 6 18 }
;; 6 succs { 7 }
;; 7 succs { 8 10 }
;; 8 succs { 9 10 }
;; 9 succs { 14 }
;; 10 succs { 11 13 }
;; 11 succs { 12 13 }
;; 12 succs { 14 }
;; 13 succs { 14 }
;; 14 succs { 16 15 }
;; 15 succs { 7 16 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 1 }
C40_Ip_Read (uint32 LogicalAddress, uint32 Length, uint8 * DestAddressPtr)
{
  uint32 ReadSize;
  uint32 DesAddress;
  uint32 CombinedAddress;
  uint32 D.9511;
  C40_Ip_StatusType Status;
  C40_Ip_StatusType Status;
  uint32 ReadSize;
  uint32 SizeLeft;
  uint8 * DesAddressPtr;
  uint32 ReadAddress;
  C40_Ip_StatusType _25;
  long unsigned int _29;
  uint32 * Address.5_30;
  long unsigned int _31;
  long unsigned int _32;
  uint16 * Address.6_33;
  short unsigned int _34;
  uint8 * Address.7_35;
  unsigned char _36;

  <bb 2> [local count: 337833911]:
  # DEBUG BEGIN_STMT
  # DEBUG ReadAddress => LogicalAddress_7(D)
  # DEBUG BEGIN_STMT
  # DEBUG DesAddressPtr => DestAddressPtr_8(D)
  # DEBUG BEGIN_STMT
  # DEBUG SizeLeft => Length_9(D)
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Length => Length_9(D)
  # DEBUG DestAddressPtr => DestAddressPtr_8(D)
  # DEBUG INLINE_ENTRY C40_Ip_ReadCheckInputParams
  # DEBUG BEGIN_STMT
  # DEBUG Status => 11700
  # DEBUG BEGIN_STMT
  if (DestAddressPtr_8(D) == 0B)
    goto <bb 5>; [30.00%]
  else
    goto <bb 3>; [70.00%]

  <bb 3> [local count: 236483738]:
  # DEBUG BEGIN_STMT
  if (Length_9(D) == 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 4> [local count: 118241869]:
  # DEBUG BEGIN_STMT
  # DEBUG Status => 23205

  <bb 5> [local count: 337833911]:
  # Status_11 = PHI <11700(2), 11700(3), 23205(4)>
  # DEBUG Status => Status_11
  # DEBUG BEGIN_STMT
  # DEBUG Length => NULL
  # DEBUG DestAddressPtr => NULL
  # DEBUG Status => NULL
  C40_Ip_eReadStatus = Status_11;
  # DEBUG BEGIN_STMT
  if (Status_11 == 23205)
    goto <bb 6>; [34.00%]
  else
    goto <bb 18>; [66.00%]

  <bb 6> [local count: 114863530]:
  # DEBUG BEGIN_STMT
  C40_Ip_eReadStatus = 59202;

  <bb 7> [local count: 1073741823]:
  # ReadAddress_1 = PHI <LogicalAddress_7(D)(6), ReadAddress_21(15)>
  # DesAddressPtr_2 = PHI <DestAddressPtr_8(D)(6), DesAddressPtr_22(15)>
  # SizeLeft_3 = PHI <Length_9(D)(6), SizeLeft_23(15)>
  # DEBUG ReadSize => NULL
  # DEBUG SizeLeft => SizeLeft_3
  # DEBUG DesAddressPtr => DesAddressPtr_2
  # DEBUG ReadAddress => ReadAddress_1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#4 => ReadAddress_1
  # DEBUG INLINE_ENTRY C40_Ip_ClearPreviousRead
  # DEBUG ReadAddress => D#4
  # DEBUG BEGIN_STMT
  # DEBUG Status => 23205
  # DEBUG BEGIN_STMT
  C40_Ip_ClearAllErrorFlagsMainInterface ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Status => 23205
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C40_Ip_FlashAccessCalloutStart ();
  # DEBUG BEGIN_STMT
  # DEBUG ReadAddress => ReadAddress_1
  # DEBUG DesAddressPtr => DesAddressPtr_2
  # DEBUG SizeLeft => SizeLeft_3
  # DEBUG INLINE_ENTRY C40_Ip_ReadData
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DesAddress_27 = (uint32) DesAddressPtr_2;
  # DEBUG DesAddress => DesAddress_27
  # DEBUG BEGIN_STMT
  CombinedAddress_28 = ReadAddress_1 | DesAddress_27;
  # DEBUG CombinedAddress => CombinedAddress_28
  # DEBUG BEGIN_STMT
  _29 = CombinedAddress_28 & 3;
  if (_29 == 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 8> [local count: 536870911]:
  if (SizeLeft_3 > 3)
    goto <bb 9>; [35.00%]
  else
    goto <bb 10>; [65.00%]

  <bb 9> [local count: 187904819]:
  # DEBUG BEGIN_STMT
  # DEBUG ReadSize => 4
  # DEBUG BEGIN_STMT
  # DEBUG Address => ReadAddress_1
  # DEBUG INLINE_ENTRY C40_Ip_ReadData32
  # DEBUG BEGIN_STMT
  Address.5_30 = (uint32 *) ReadAddress_1;
  _31 = *Address.5_30;
  # DEBUG Address => NULL
  MEM[(uint32 *)DesAddressPtr_2] = _31;
  goto <bb 14>; [100.00%]

  <bb 10> [local count: 885837005]:
  # DEBUG BEGIN_STMT
  _32 = CombinedAddress_28 & 1;
  if (_32 == 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 11> [local count: 442918502]:
  if (SizeLeft_3 > 1)
    goto <bb 12>; [43.66%]
  else
    goto <bb 13>; [56.34%]

  <bb 12> [local count: 193378218]:
  # DEBUG BEGIN_STMT
  # DEBUG ReadSize => 2
  # DEBUG BEGIN_STMT
  # DEBUG Address => ReadAddress_1
  # DEBUG INLINE_ENTRY C40_Ip_ReadData16
  # DEBUG BEGIN_STMT
  Address.6_33 = (uint16 *) ReadAddress_1;
  _34 = *Address.6_33;
  # DEBUG Address => NULL
  MEM[(uint16 *)DesAddressPtr_2] = _34;
  goto <bb 14>; [100.00%]

  <bb 13> [local count: 692458788]:
  # DEBUG BEGIN_STMT
  # DEBUG ReadSize => 1
  # DEBUG BEGIN_STMT
  # DEBUG Address => ReadAddress_1
  # DEBUG INLINE_ENTRY C40_Ip_ReadData8
  # DEBUG BEGIN_STMT
  Address.7_35 = (uint8 *) ReadAddress_1;
  _36 = *Address.7_35;
  # DEBUG Address => NULL
  *DesAddressPtr_2 = _36;

  <bb 14> [local count: 1073741824]:
  # ReadSize_37 = PHI <4(9), 2(12), 1(13)>
  # DEBUG ReadSize => ReadSize_37
  # DEBUG BEGIN_STMT
  _42 = ReadSize_37;
  # DEBUG ReadAddress => NULL
  # DEBUG DesAddressPtr => NULL
  # DEBUG SizeLeft => NULL
  # DEBUG CombinedAddress => NULL
  # DEBUG DesAddress => NULL
  # DEBUG ReadSize => NULL
  ReadSize_17 = _42;
  # DEBUG ReadSize => ReadSize_17
  # DEBUG BEGIN_STMT
  C40_Ip_FlashAccessCalloutFinish ();
  # DEBUG BEGIN_STMT
  # DEBUG D#1 => ReadAddress_1
  Status_20 = C40_Ip_CheckReadCompareStatus.isra.0 (1);
  # DEBUG Status => Status_20
  # DEBUG ReadSize => ReadSize_17
  # DEBUG BEGIN_STMT
  if (Status_20 != 23205)
    goto <bb 16>; [5.50%]
  else
    goto <bb 15>; [94.50%]

  <bb 15> [local count: 1014686024]:
  # DEBUG BEGIN_STMT
  ReadAddress_21 = ReadAddress_1 + ReadSize_17;
  # DEBUG ReadAddress => ReadAddress_21
  # DEBUG BEGIN_STMT
  DesAddressPtr_22 = DesAddressPtr_2 + ReadSize_17;
  # DEBUG DesAddressPtr => DesAddressPtr_22
  # DEBUG BEGIN_STMT
  SizeLeft_23 = SizeLeft_3 - ReadSize_17;
  # DEBUG SizeLeft => SizeLeft_23
  # DEBUG BEGIN_STMT
  if (SizeLeft_23 != 0)
    goto <bb 7>; [94.50%]
  else
    goto <bb 16>; [5.50%]

  <bb 16> [local count: 114863532]:
  # SizeLeft_4 = PHI <SizeLeft_3(14), SizeLeft_23(15)>
  # DEBUG SizeLeft => SizeLeft_4
  # DEBUG BEGIN_STMT
  if (SizeLeft_4 == 0)
    goto <bb 17>; [50.00%]
  else
    goto <bb 18>; [50.00%]

  <bb 17> [local count: 57431766]:
  # DEBUG BEGIN_STMT
  C40_Ip_eReadStatus = 23205;

  <bb 18> [local count: 337833913]:
  # DEBUG BEGIN_STMT
  _25 = C40_Ip_eReadStatus;
  return _25;

}



;; Function C40_Ip_SetLockProtect (C40_Ip_SetLockProtect, funcdef_no=14, decl_uid=8272, cgraph_uid=15, symbol_order=27)


Symbols to be put in SSA form
{ D.9208 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 14
Number of blocks to update: 13 ( 93%)


Removing basic block 5
Removing basic block 10
Removing basic block 11
Merging blocks 12 and 13
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;; 2 succs { 3 4 }
;; 3 succs { 9 }
;; 4 succs { 5 6 }
;; 5 succs { 9 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 1 }
C40_Ip_SetLockProtect (C40_Ip_VirtualSectorsType VirtualSector)
{
  uint32 SectorPosition;
  uint32 BlockCount;
  uint32 SectorIndex;
  long unsigned int _1;
  long unsigned int C40_Ip_u32BitPosition.16_2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int C40_Ip_u32BitPosition.18_5;
  long unsigned int _6;
  long unsigned int _8;
  long unsigned int C40_Ip_u32BitPosition.19_9;
  long unsigned int _11;
  long unsigned int _20;
  long unsigned int C40_Ip_u32BitPosition.17_21;
  long unsigned int _22;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (VirtualSector_12(D) <= 15)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SPELOCK[2];
  C40_Ip_u32BitPosition.16_2 = C40_Ip_u32BitPosition;
  _3 = _1 | C40_Ip_u32BitPosition.16_2;
  MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SPELOCK[2] ={v} _3;
  goto <bb 9>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (VirtualSector_12(D) == 272)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 182536110]:
  # DEBUG D#8 => VirtualSector_12(D)
  # DEBUG INLINE_ENTRY C40_Ip_SetLockProtect
  # DEBUG D#9 => D#8
  # DEBUG VirtualSector => D#9
  # DEBUG BEGIN_STMT
  _20 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLKU_SPELOCK[0];
  C40_Ip_u32BitPosition.17_21 = C40_Ip_u32BitPosition;
  _22 = _20 | C40_Ip_u32BitPosition.17_21;
  MEM[(struct PFLASH_Type *)1076264960B].PFCBLKU_SPELOCK[0] ={v} _22;
  goto <bb 9>; [100.00%]

  <bb 6> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  SectorIndex_13 = VirtualSector_12(D) + 4294967280;
  # DEBUG SectorIndex => SectorIndex_13
  # DEBUG BEGIN_STMT
  BlockCount_14 = SectorIndex_13 >> 7;
  # DEBUG BlockCount => BlockCount_14
  # DEBUG BEGIN_STMT
  SectorPosition_15 = SectorIndex_13 & 127;
  # DEBUG SectorPosition => SectorPosition_15
  # DEBUG BEGIN_STMT
  if (SectorPosition_15 <= 95)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  _4 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SSPELOCK[BlockCount_14];
  C40_Ip_u32BitPosition.18_5 = C40_Ip_u32BitPosition;
  _6 = _4 | C40_Ip_u32BitPosition.18_5;
  MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SSPELOCK[BlockCount_14] ={v} _6;
  goto <bb 9>; [100.00%]

  <bb 8> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  _8 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SPELOCK[BlockCount_14];
  C40_Ip_u32BitPosition.19_9 = C40_Ip_u32BitPosition;
  _11 = _8 | C40_Ip_u32BitPosition.19_9;
  MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SPELOCK[BlockCount_14] ={v} _11;

  <bb 9> [local count: 1073741824]:
  # DEBUG SectorIndex => NULL
  # DEBUG BlockCount => NULL
  # DEBUG SectorPosition => NULL
  # DEBUG VirtualSector => NULL
  return;

}



;; Function C40_Ip_GetLockProtect (C40_Ip_GetLockProtect, funcdef_no=16, decl_uid=8270, cgraph_uid=17, symbol_order=29)


Symbols to be put in SSA form
{ D.9209 D.9523 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 19
Number of blocks to update: 18 ( 95%)


Merging blocks 2 and 11
Merging blocks 18 and 10
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
;; 2 succs { 3 4 }
;; 3 succs { 9 }
;; 4 succs { 5 6 }
;; 5 succs { 9 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 16 }
;; 11 succs { 12 13 }
;; 12 succs { 16 }
;; 13 succs { 14 15 }
;; 14 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 1 }
C40_Ip_GetLockProtect (C40_Ip_VirtualSectorsType VirtualSector)
{
  uint32 SectorIndex;
  uint32 SectorPosition;
  uint32 D.9523;
  uint32 CheckRegister;
  uint32 SectorPosition;
  uint32 BlockCount;
  uint32 SectorIndex;
  long unsigned int _1;
  long unsigned int _2;
  uint32 _16;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG VirtualSector => VirtualSector_5(D)
  # DEBUG INLINE_ENTRY C40_Ip_GetSectorID
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (VirtualSector_5(D) <= 15)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  C40_Ip_u32SectorId = VirtualSector_5(D);
  goto <bb 9>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (VirtualSector_5(D) == 272)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 182536110]:
  # DEBUG BEGIN_STMT
  C40_Ip_u32SectorId = 0;
  goto <bb 9>; [100.00%]

  <bb 6> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  SectorIndex_17 = VirtualSector_5(D) + 4294967280;
  # DEBUG SectorIndex => SectorIndex_17
  # DEBUG BEGIN_STMT
  SectorPosition_18 = SectorIndex_17 & 127;
  # DEBUG SectorPosition => SectorPosition_18
  # DEBUG BEGIN_STMT
  if (SectorPosition_18 <= 95)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  _19 = SectorPosition_18 >> 3;
  C40_Ip_u32SectorId = _19;
  goto <bb 9>; [100.00%]

  <bb 8> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  _20 = SectorPosition_18 + 4294967200;
  C40_Ip_u32SectorId = _20;

  <bb 9> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _21 = C40_Ip_u32SectorId;
  _27 = _21;
  # DEBUG VirtualSector => NULL
  # DEBUG SectorPosition => NULL
  # DEBUG SectorIndex => NULL
  _1 = _27;
  C40_Ip_u32SectorId = _1;
  # DEBUG BEGIN_STMT
  _2 = 1 << _1;
  C40_Ip_u32BitPosition = _2;
  # DEBUG BEGIN_STMT
  if (VirtualSector_5(D) <= 15)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  CheckRegister_15 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SPELOCK[2];
  # DEBUG CheckRegister => CheckRegister_15
  goto <bb 16>; [100.00%]

  <bb 11> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (VirtualSector_5(D) == 272)
    goto <bb 12>; [34.00%]
  else
    goto <bb 13>; [66.00%]

  <bb 12> [local count: 182536110]:
  # DEBUG BEGIN_STMT
  CheckRegister_14 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLKU_SPELOCK[0];
  # DEBUG CheckRegister => CheckRegister_14
  goto <bb 16>; [100.00%]

  <bb 13> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  SectorIndex_9 = VirtualSector_5(D) + 4294967280;
  # DEBUG SectorIndex => SectorIndex_9
  # DEBUG BEGIN_STMT
  BlockCount_10 = SectorIndex_9 >> 7;
  # DEBUG BlockCount => BlockCount_10
  # DEBUG BEGIN_STMT
  SectorPosition_11 = SectorIndex_9 & 127;
  # DEBUG SectorPosition => SectorPosition_11
  # DEBUG BEGIN_STMT
  if (SectorPosition_11 <= 95)
    goto <bb 14>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 14> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  CheckRegister_13 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SSPELOCK[BlockCount_10];
  # DEBUG CheckRegister => CheckRegister_13
  goto <bb 16>; [100.00%]

  <bb 15> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  CheckRegister_12 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SPELOCK[BlockCount_10];
  # DEBUG CheckRegister => CheckRegister_12

  <bb 16> [local count: 1073741824]:
  # CheckRegister_3 = PHI <CheckRegister_15(10), CheckRegister_14(12), CheckRegister_13(14), CheckRegister_12(15)>
  # DEBUG CheckRegister => CheckRegister_3
  # DEBUG BEGIN_STMT
  _16 = _2 & CheckRegister_3;
  return _16;

}



;; Function C40_Ip_GetLock (C40_Ip_GetLock, funcdef_no=15, decl_uid=8135, cgraph_uid=16, symbol_order=28)


Symbols to be put in SSA form
{ D.9210 D.9529 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)


Removing basic block 3
Removing basic block 6
Merging blocks 9 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 6 3 }
;; 3 succs { 5 4 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 1 }
C40_Ip_GetLock (C40_Ip_VirtualSectorsType VirtualSector)
{
  uint32 CheckRegister;
  C40_Ip_StatusType ReturnCode;
  C40_Ip_StatusType D.9529;
  C40_Ip_StatusType ReturnCode;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (VirtualSector_2(D) > 272)
    goto <bb 6>; [67.00%]
  else
    goto <bb 3>; [33.00%]

  <bb 3> [local count: 354334802]:
  # DEBUG VirtualSector => VirtualSector_2(D)
  # DEBUG INLINE_ENTRY C40_Ip_GetLock
  # DEBUG BEGIN_STMT
  CheckRegister_7 = C40_Ip_GetLockProtect (VirtualSector_2(D));
  # DEBUG CheckRegister => CheckRegister_7
  # DEBUG BEGIN_STMT
  if (CheckRegister_7 == 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 4> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 59576

  <bb 5> [local count: 354334802]:
  # ReturnCode_8 = PHI <64034(3), 59576(4)>
  # DEBUG ReturnCode => ReturnCode_8
  # DEBUG BEGIN_STMT
  _10 = ReturnCode_8;
  # DEBUG VirtualSector => NULL
  # DEBUG ReturnCode => NULL
  # DEBUG CheckRegister => NULL
  ReturnCode_6 = _10;

  <bb 6> [local count: 1073741824]:
  # ReturnCode_1 = PHI <10212(2), ReturnCode_6(5)>
  # DEBUG ReturnCode => ReturnCode_1
  # DEBUG BEGIN_STMT
  return ReturnCode_1;

}



;; Function C40_Ip_ClearLockProtect (C40_Ip_ClearLockProtect, funcdef_no=18, decl_uid=8274, cgraph_uid=19, symbol_order=31)


Symbols to be put in SSA form
{ D.9212 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 14
Number of blocks to update: 13 ( 93%)


Removing basic block 5
Removing basic block 10
Removing basic block 11
Merging blocks 12 and 13
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;; 2 succs { 3 4 }
;; 3 succs { 9 }
;; 4 succs { 5 6 }
;; 5 succs { 9 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 1 }
C40_Ip_ClearLockProtect (C40_Ip_VirtualSectorsType VirtualSector)
{
  uint32 SectorPosition;
  uint32 BlockCount;
  uint32 SectorIndex;
  long unsigned int _1;
  long unsigned int C40_Ip_u32BitPosition.22_2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int C40_Ip_u32BitPosition.24_6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _10;
  long unsigned int C40_Ip_u32BitPosition.25_11;
  long unsigned int _12;
  long unsigned int _14;
  long unsigned int _23;
  long unsigned int C40_Ip_u32BitPosition.23_24;
  long unsigned int _25;
  long unsigned int _26;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (VirtualSector_15(D) <= 15)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SPELOCK[2];
  C40_Ip_u32BitPosition.22_2 = C40_Ip_u32BitPosition;
  _3 = ~C40_Ip_u32BitPosition.22_2;
  _4 = _1 & _3;
  MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SPELOCK[2] ={v} _4;
  goto <bb 9>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (VirtualSector_15(D) == 272)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 182536110]:
  # DEBUG D#10 => VirtualSector_15(D)
  # DEBUG INLINE_ENTRY C40_Ip_ClearLockProtect
  # DEBUG D#11 => D#10
  # DEBUG VirtualSector => D#11
  # DEBUG BEGIN_STMT
  _23 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLKU_SPELOCK[0];
  C40_Ip_u32BitPosition.23_24 = C40_Ip_u32BitPosition;
  _25 = ~C40_Ip_u32BitPosition.23_24;
  _26 = _23 & _25;
  MEM[(struct PFLASH_Type *)1076264960B].PFCBLKU_SPELOCK[0] ={v} _26;
  goto <bb 9>; [100.00%]

  <bb 6> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  SectorIndex_16 = VirtualSector_15(D) + 4294967280;
  # DEBUG SectorIndex => SectorIndex_16
  # DEBUG BEGIN_STMT
  BlockCount_17 = SectorIndex_16 >> 7;
  # DEBUG BlockCount => BlockCount_17
  # DEBUG BEGIN_STMT
  SectorPosition_18 = SectorIndex_16 & 127;
  # DEBUG SectorPosition => SectorPosition_18
  # DEBUG BEGIN_STMT
  if (SectorPosition_18 <= 95)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SSPELOCK[BlockCount_17];
  C40_Ip_u32BitPosition.24_6 = C40_Ip_u32BitPosition;
  _7 = ~C40_Ip_u32BitPosition.24_6;
  _8 = _5 & _7;
  MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SSPELOCK[BlockCount_17] ={v} _8;
  goto <bb 9>; [100.00%]

  <bb 8> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  _10 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SPELOCK[BlockCount_17];
  C40_Ip_u32BitPosition.25_11 = C40_Ip_u32BitPosition;
  _12 = ~C40_Ip_u32BitPosition.25_11;
  _14 = _10 & _12;
  MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SPELOCK[BlockCount_17] ={v} _14;

  <bb 9> [local count: 1073741824]:
  # DEBUG SectorIndex => NULL
  # DEBUG BlockCount => NULL
  # DEBUG SectorPosition => NULL
  # DEBUG VirtualSector => NULL
  return;

}



;; Function C40_Ip_Compare (C40_Ip_Compare, funcdef_no=19, decl_uid=8130, cgraph_uid=20, symbol_order=32)


Symbols to be put in SSA form
{ D.9213 D.9561 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 25
Number of blocks to update: 24 ( 96%)


Removing basic block 5
Removing basic block 8
Merging blocks 10 and 17
Removing basic block 12
Merging blocks 24 and 16
No longer having address taken: CompareResult

Symbols to be put in SSA form
{ D.9546 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 20
Number of blocks to update: 19 ( 95%)


;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
;;
;; Loop 1
;;  header 6, latch 14
;;  depth 1, outer 0
;;  nodes: 6 14 13 8 11 12 9 10 7
;; 2 succs { 3 4 }
;; 3 succs { 19 }
;; 4 succs { 5 18 }
;; 5 succs { 6 }
;; 6 succs { 7 9 }
;; 7 succs { 8 9 }
;; 8 succs { 13 }
;; 9 succs { 10 12 }
;; 10 succs { 11 12 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 15 14 }
;; 14 succs { 6 15 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 19 }
;; 18 succs { 19 }
;; 19 succs { 1 }
C40_Ip_Compare (uint32 LogicalAddress, uint32 Length, const uint8 * SourceAddressPtr)
{
  uint32 ReadSize;
  uint32 CombinedAddress;
  uint32 D.9561;
  uint32 ReadAddress;
  uint32 DataAddress;
  uint32 SizeLeft;
  uint32 ReadSize;
  C40_Ip_StatusType Status;
  boolean CompareResult;
  C40_Ip_StatusType _10;
  unsigned char CompareResult.26_16;
  long unsigned int _23;
  uint32 * Address.5_24;
  long unsigned int _25;
  uint32 * Address.5_26;
  long unsigned int _27;
  _Bool _28;
  unsigned char _29;
  long unsigned int _30;
  uint16 * Address.6_31;
  short unsigned int _32;
  uint16 * Address.6_33;
  short unsigned int _34;
  _Bool _35;
  unsigned char _36;
  uint8 * Address.7_37;
  unsigned char _38;
  uint8 * Address.7_39;
  unsigned char _40;
  _Bool _41;
  unsigned char _42;

  <bb 2> [local count: 328181514]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Length_4(D) == 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 164090757]:
  # DEBUG BEGIN_STMT
  C40_Ip_eReadStatus = 11700;
  goto <bb 19>; [100.00%]

  <bb 4> [local count: 164090757]:
  # DEBUG BEGIN_STMT
  C40_Ip_eReadStatus = 59202;
  # DEBUG BEGIN_STMT
  if (SourceAddressPtr_6(D) != 0B)
    goto <bb 5>; [70.00%]
  else
    goto <bb 18>; [30.00%]

  <bb 5> [local count: 114863530]:
  # DEBUG BEGIN_STMT
  # DEBUG Address => LogicalAddress_3(D)
  # DEBUG Data => SourceAddressPtr_6(D)
  # DEBUG Size => Length_4(D)
  # DEBUG INLINE_ENTRY C40_Ip_ProgramVerify
  # DEBUG BEGIN_STMT
  # DEBUG ReadAddress => LogicalAddress_3(D)
  # DEBUG BEGIN_STMT
  DataAddress_11 = (uint32) SourceAddressPtr_6(D);
  # DEBUG DataAddress => DataAddress_11
  # DEBUG BEGIN_STMT
  # DEBUG SizeLeft => Length_4(D)

  <bb 6> [local count: 1073741824]:
  # ReadAddress_12 = PHI <LogicalAddress_3(D)(5), ReadAddress_18(14)>
  # DataAddress_13 = PHI <DataAddress_11(5), DataAddress_19(14)>
  # SizeLeft_14 = PHI <Length_4(D)(5), SizeLeft_20(14)>
  # DEBUG ReadSize => NULL
  # DEBUG SizeLeft => SizeLeft_14
  # DEBUG DataAddress => DataAddress_13
  # DEBUG ReadAddress => ReadAddress_12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#4 => ReadAddress_12
  # DEBUG INLINE_ENTRY C40_Ip_ClearPreviousRead
  # DEBUG ReadAddress => D#4
  # DEBUG BEGIN_STMT
  # DEBUG Status => 23205
  # DEBUG BEGIN_STMT
  C40_Ip_ClearAllErrorFlagsMainInterface ();
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Status => 23205
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C40_Ip_FlashAccessCalloutStart ();
  # DEBUG BEGIN_STMT
  # DEBUG ReadAddress => ReadAddress_12
  # DEBUG DataAddress => DataAddress_13
  # DEBUG SizeLeft => SizeLeft_14
  # DEBUG CompareResult => &CompareResult
  # DEBUG INLINE_ENTRY C40_Ip_CompareData
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CombinedAddress_22 = ReadAddress_12 | DataAddress_13;
  # DEBUG CombinedAddress => CombinedAddress_22
  # DEBUG BEGIN_STMT
  _23 = CombinedAddress_22 & 3;
  if (_23 == 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 7> [local count: 536870913]:
  if (SizeLeft_14 > 3)
    goto <bb 8>; [35.00%]
  else
    goto <bb 9>; [65.00%]

  <bb 8> [local count: 187904819]:
  # DEBUG BEGIN_STMT
  # DEBUG ReadSize => 4
  # DEBUG BEGIN_STMT
  # DEBUG Address => ReadAddress_12
  # DEBUG INLINE_ENTRY C40_Ip_ReadData32
  # DEBUG BEGIN_STMT
  Address.5_24 = (uint32 *) ReadAddress_12;
  _25 = *Address.5_24;
  # DEBUG Address => NULL
  # DEBUG Address => DataAddress_13
  # DEBUG INLINE_ENTRY C40_Ip_ReadData32
  # DEBUG BEGIN_STMT
  Address.5_26 = (uint32 *) DataAddress_13;
  _27 = *Address.5_26;
  # DEBUG Address => NULL
  _28 = _25 == _27;
  _29 = (unsigned char) _28;
  CompareResult_58 = _29;
  # DEBUG CompareResult => CompareResult_58
  goto <bb 13>; [100.00%]

  <bb 9> [local count: 885837005]:
  # DEBUG BEGIN_STMT
  _30 = CombinedAddress_22 & 1;
  if (_30 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 10> [local count: 442918502]:
  if (SizeLeft_14 > 1)
    goto <bb 11>; [43.66%]
  else
    goto <bb 12>; [56.34%]

  <bb 11> [local count: 193378218]:
  # DEBUG BEGIN_STMT
  # DEBUG ReadSize => 2
  # DEBUG BEGIN_STMT
  # DEBUG Address => ReadAddress_12
  # DEBUG INLINE_ENTRY C40_Ip_ReadData16
  # DEBUG BEGIN_STMT
  Address.6_31 = (uint16 *) ReadAddress_12;
  _32 = *Address.6_31;
  # DEBUG Address => NULL
  # DEBUG Address => DataAddress_13
  # DEBUG INLINE_ENTRY C40_Ip_ReadData16
  # DEBUG BEGIN_STMT
  Address.6_33 = (uint16 *) DataAddress_13;
  _34 = *Address.6_33;
  # DEBUG Address => NULL
  _35 = _32 == _34;
  _36 = (unsigned char) _35;
  CompareResult_59 = _36;
  # DEBUG CompareResult => CompareResult_59
  goto <bb 13>; [100.00%]

  <bb 12> [local count: 692458787]:
  # DEBUG BEGIN_STMT
  # DEBUG ReadSize => 1
  # DEBUG BEGIN_STMT
  # DEBUG Address => ReadAddress_12
  # DEBUG INLINE_ENTRY C40_Ip_ReadData8
  # DEBUG BEGIN_STMT
  Address.7_37 = (uint8 *) ReadAddress_12;
  _38 = *Address.7_37;
  # DEBUG Address => NULL
  # DEBUG Address => DataAddress_13
  # DEBUG INLINE_ENTRY C40_Ip_ReadData8
  # DEBUG BEGIN_STMT
  Address.7_39 = (uint8 *) DataAddress_13;
  _40 = *Address.7_39;
  # DEBUG Address => NULL
  _41 = _38 == _40;
  _42 = (unsigned char) _41;
  CompareResult_60 = _42;
  # DEBUG CompareResult => CompareResult_60

  <bb 13> [local count: 1073741824]:
  # ReadSize_43 = PHI <4(8), 2(11), 1(12)>
  # CompareResult_57 = PHI <CompareResult_58(8), CompareResult_59(11), CompareResult_60(12)>
  # DEBUG CompareResult => CompareResult_57
  # DEBUG ReadSize => ReadSize_43
  # DEBUG BEGIN_STMT
  _52 = ReadSize_43;
  # DEBUG ReadAddress => NULL
  # DEBUG DataAddress => NULL
  # DEBUG SizeLeft => NULL
  # DEBUG CompareResult => NULL
  # DEBUG CombinedAddress => NULL
  # DEBUG ReadSize => NULL
  ReadSize_15 = _52;
  # DEBUG ReadSize => ReadSize_15
  # DEBUG BEGIN_STMT
  C40_Ip_FlashAccessCalloutFinish ();
  # DEBUG BEGIN_STMT
  CompareResult.26_16 = CompareResult_57;
  # DEBUG D#1 => ReadAddress_12
  Status_17 = C40_Ip_CheckReadCompareStatus.isra.0 (CompareResult.26_16);
  # DEBUG Status => Status_17
  # DEBUG ReadSize => ReadSize_15
  # DEBUG BEGIN_STMT
  if (Status_17 != 23205)
    goto <bb 15>; [5.50%]
  else
    goto <bb 14>; [94.50%]

  <bb 14> [local count: 1014686025]:
  # DEBUG BEGIN_STMT
  ReadAddress_18 = ReadAddress_12 + ReadSize_15;
  # DEBUG ReadAddress => ReadAddress_18
  # DEBUG BEGIN_STMT
  DataAddress_19 = DataAddress_13 + ReadSize_15;
  # DEBUG DataAddress => DataAddress_19
  # DEBUG BEGIN_STMT
  SizeLeft_20 = SizeLeft_14 - ReadSize_15;
  # DEBUG SizeLeft => SizeLeft_20
  # DEBUG BEGIN_STMT
  if (SizeLeft_20 != 0)
    goto <bb 6>; [94.50%]
  else
    goto <bb 15>; [5.50%]

  <bb 15> [local count: 114863532]:
  # SizeLeft_21 = PHI <SizeLeft_14(13), SizeLeft_20(14)>
  # DEBUG SizeLeft => SizeLeft_21
  # DEBUG BEGIN_STMT
  if (SizeLeft_21 == 0)
    goto <bb 16>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 16> [local count: 57431766]:
  # DEBUG BEGIN_STMT
  C40_Ip_eReadStatus = 23205;

  <bb 17> [local count: 114863532]:
  # DEBUG D#16 => {CLOBBER}
  # DEBUG CompareResult => D#16
  goto <bb 19>; [100.00%]

  <bb 18> [local count: 49227227]:
  # DEBUG BEGIN_STMT
  C40_Ip_EraseVerify (LogicalAddress_3(D), Length_4(D));

  <bb 19> [local count: 328181516]:
  # DEBUG Address => NULL
  # DEBUG Data => NULL
  # DEBUG Size => NULL
  # DEBUG CompareResult => NULL
  # DEBUG Status => NULL
  # DEBUG ReadSize => NULL
  # DEBUG SizeLeft => NULL
  # DEBUG DataAddress => NULL
  # DEBUG ReadAddress => NULL
  # DEBUG BEGIN_STMT
  _10 = C40_Ip_eReadStatus;
  return _10;

}



;; Function C40_Ip_MainInterfaceWriteLogicalAddress (C40_Ip_MainInterfaceWriteLogicalAddress, funcdef_no=24, decl_uid=8264, cgraph_uid=25, symbol_order=37)

C40_Ip_MainInterfaceWriteLogicalAddress (uint32 Address)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  MEM[(struct PFLASH_Type *)1076264960B].PFCPGM_PEADR_L ={v} Address_2(D);
  return;

}



;; Function C40_Ip_MainInterfaceSectorErase (C40_Ip_MainInterfaceSectorErase, funcdef_no=30, decl_uid=8145, cgraph_uid=31, symbol_order=43)


Symbols to be put in SSA form
{ D.9216 D.9568 D.9574 D.9577 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 30
Number of blocks to update: 29 ( 97%)


Merging blocks 2 and 10
Merging blocks 3 and 22
Merging blocks 15 and 9
Removing basic block 17
Removing basic block 19
Merging blocks 20 and 16
Merging blocks 29 and 21
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
;;
;; Loop 1
;;  header 16, latch 16
;;  depth 1, outer 0
;;  nodes: 16
;; 2 succs { 7 3 }
;; 3 succs { 7 4 }
;; 4 succs { 7 5 }
;; 5 succs { 7 6 }
;; 6 succs { 7 }
;; 7 succs { 8 19 }
;; 8 succs { 9 10 }
;; 9 succs { 15 }
;; 10 succs { 11 12 }
;; 11 succs { 15 }
;; 12 succs { 13 14 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 16 }
;; 16 succs { 16 17 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 20 22 }
;; 20 succs { 21 22 }
;; 21 succs { 22 }
;; 22 succs { 1 }
C40_Ip_MainInterfaceSectorErase (C40_Ip_VirtualSectorsType VirtualSector, uint8 DomainIdValue)
{
  volatile uint32 BaseAddressofSector;
  uint32 D.9577;
  uint8 ActualDomainIDs;
  C40_Ip_StatusType D.9574;
  C40_Ip_StatusType ReturnCode;
  C40_Ip_StatusType D.9568;
  uint32 LogicalAddress;
  C40_Ip_StatusType ReturnCode;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char C40_Ip_bAsync.28_5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  signed int _31;
  <unnamed type> _32;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;

  <bb 2> [local count: 583555337]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG VirtualSector => VirtualSector_12(D)
  # DEBUG INLINE_ENTRY C40_Ip_MainInterfaceSectorErasePreCheck
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (VirtualSector_12(D) > 272)
    goto <bb 7>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 291777668]:
  # DEBUG BEGIN_STMT
  _28 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _29 = _28 & 272;
  if (_29 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 4> [local count: 145888834]:
  # DEBUG BEGIN_STMT
  _30 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _31 = (signed int) _30;
  if (_31 < 0)
    goto <bb 7>; [58.52%]
  else
    goto <bb 5>; [41.48%]

  <bb 5> [local count: 60514688]:
  # DEBUG BEGIN_STMT
  _32 = C40_Ip_GetLock (VirtualSector_12(D));
  if (_32 != 64034)
    goto <bb 7>; [66.00%]
  else
    goto <bb 6>; [34.00%]

  <bb 6> [local count: 20574994]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205

  <bb 7> [local count: 583555337]:
  # ReturnCode_33 = PHI <11700(2), 10212(3), 10212(4), 10212(5), 23205(6)>
  # DEBUG ReturnCode => ReturnCode_33
  # DEBUG BEGIN_STMT
  _46 = ReturnCode_33;
  # DEBUG VirtualSector => NULL
  # DEBUG ReturnCode => NULL
  ReturnCode_14 = _46;
  # DEBUG ReturnCode => ReturnCode_14
  # DEBUG BEGIN_STMT
  if (ReturnCode_14 == 23205)
    goto <bb 8>; [20.24%]
  else
    goto <bb 19>; [79.76%]

  <bb 8> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C40_Ip_ClearAllErrorFlagsMainInterface ();
  # DEBUG BEGIN_STMT
  # DEBUG VirtualSectors => VirtualSector_12(D)
  # DEBUG INLINE_ENTRY C40_Ip_GetBaseAddressOfSector
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (VirtualSector_12(D) <= 15)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  _37 = VirtualSector_12(D) + 32768;
  _38 = _37 * 8192;
  BaseAddressofSector ={v} _38;
  goto <bb 15>; [100.00%]

  <bb 10> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  if (VirtualSector_12(D) <= 271)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [local count: 29527900]:
  # DEBUG BEGIN_STMT
  _39 = VirtualSector_12(D) + 496;
  _40 = _39 * 8192;
  BaseAddressofSector ={v} _40;
  goto <bb 15>; [100.00%]

  <bb 12> [local count: 29527900]:
  # DEBUG BEGIN_STMT
  if (VirtualSector_12(D) == 272)
    goto <bb 13>; [34.00%]
  else
    goto <bb 14>; [66.00%]

  <bb 13> [local count: 10039486]:
  # DEBUG BEGIN_STMT
  BaseAddressofSector ={v} 452984832;
  goto <bb 15>; [100.00%]

  <bb 14> [local count: 19488414]:
  # DEBUG BEGIN_STMT
  BaseAddressofSector ={v} 4294967295;

  <bb 15> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _41 ={v} BaseAddressofSector;
  _51 = _41;
  # DEBUG VirtualSectors => NULL
  # DEBUG BaseAddressofSector => NULL
  LogicalAddress_17 = _51;
  # DEBUG LogicalAddress => LogicalAddress_17
  # DEBUG BEGIN_STMT
  C40_Ip_u32ErasedSectorAddress = LogicalAddress_17;
  # DEBUG BEGIN_STMT
  # DEBUG PhysicalAddress => LogicalAddress_17
  # DEBUG DomainIdValue => DomainIdValue_19(D)
  # DEBUG INLINE_ENTRY C40_Ip_MainInterfaceWriteJobAddress

  <bb 16> [local count: 1073741824]:
  # DEBUG ReturnCode => NULL
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Address => LogicalAddress_17
  # DEBUG INLINE_ENTRY C40_Ip_MainInterfaceWriteLogicalAddress
  # DEBUG BEGIN_STMT
  MEM[(struct PFLASH_Type *)1076264960B].PFCPGM_PEADR_L ={v} LogicalAddress_17;
  # DEBUG Address => NULL
  # DEBUG BEGIN_STMT
  _34 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _35 = _34 >> 16;
  ActualDomainIDs_36 = (uint8) _35;
  # DEBUG ActualDomainIDs => ActualDomainIDs_36
  # DEBUG BEGIN_STMT
  if (DomainIdValue_19(D) != ActualDomainIDs_36)
    goto <bb 16>; [89.00%]
  else
    goto <bb 17>; [11.00%]

  <bb 17> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _53 = 23205;
  # DEBUG PhysicalAddress => NULL
  # DEBUG DomainIdValue => NULL
  # DEBUG ActualDomainIDs => NULL
  ReturnCode_21 = _53;
  # DEBUG ReturnCode => ReturnCode_21
  # DEBUG BEGIN_STMT
  if (ReturnCode_21 == 11220)
    goto <bb 18>; [12.02%]
  else
    goto <bb 19>; [87.98%]

  <bb 18> [local count: 14197014]:
  # DEBUG BEGIN_STMT
  C40_Ip_ClearInterlockWrite ();

  <bb 19> [local count: 583555338]:
  # ReturnCode_8 = PHI <ReturnCode_14(7), ReturnCode_21(17), 11220(18)>
  # DEBUG ReturnCode => ReturnCode_8
  # DEBUG BEGIN_STMT
  if (ReturnCode_8 == 23205)
    goto <bb 20>; [34.00%]
  else
    goto <bb 22>; [66.00%]

  <bb 20> [local count: 198408815]:
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].DATA[0] ={v} 4294967295;
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _2 = _1 | 16;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _2;
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _4 = _3 & 4294967263;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _4;
  # DEBUG BEGIN_STMT
  C40_Ip_bAsync.28_5 = C40_Ip_bAsync;
  if (C40_Ip_bAsync.28_5 == 1)
    goto <bb 21>; [20.24%]
  else
    goto <bb 22>; [79.76%]

  <bb 21> [local count: 40157944]:
  # DEBUG BEGIN_STMT
  C40_Ip_FlashAccessCalloutStart ();
  # DEBUG BEGIN_STMT
  _6 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _7 = _6 | 1;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _7;

  <bb 22> [local count: 583555339]:
  # DEBUG BEGIN_STMT
  return ReturnCode_8;

}



;; Function C40_Ip_MainInterfaceSectorEraseStatus (C40_Ip_MainInterfaceSectorEraseStatus, funcdef_no=31, decl_uid=8147, cgraph_uid=32, symbol_order=44)

C40_Ip_MainInterfaceSectorEraseStatus ()
{
  C40_Ip_StatusType ReturnCode;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int C40_Ip_u32ErasedSectorAddress.29_5;
  <unnamed type> _13;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReturnCode_10 = C40_Ip_MainInterfaceHVJobStatus ();
  # DEBUG ReturnCode => ReturnCode_10
  # DEBUG BEGIN_STMT
  if (ReturnCode_10 != 59202)
    goto <bb 3>; [66.00%]
  else
    goto <bb 6>; [34.00%]

  <bb 3> [local count: 708669605]:
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _2 = _1 & 4294967294;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _2;
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _4 = _3 & 4294967279;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _4;
  # DEBUG BEGIN_STMT
  if (ReturnCode_10 == 23205)
    goto <bb 4>; [20.24%]
  else
    goto <bb 6>; [79.76%]

  <bb 4> [local count: 143434728]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C40_Ip_u32ErasedSectorAddress.29_5 = C40_Ip_u32ErasedSectorAddress;
  # DEBUG LogicalAddress => C40_Ip_u32ErasedSectorAddress.29_5
  # DEBUG Length => 8192
  # DEBUG SourceAddressPtr => 0B
  # DEBUG INLINE_ENTRY C40_Ip_Compare
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C40_Ip_eReadStatus = 59202;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C40_Ip_EraseVerify (C40_Ip_u32ErasedSectorAddress.29_5, 8192);
  # DEBUG BEGIN_STMT
  _13 = C40_Ip_eReadStatus;
  # DEBUG LogicalAddress => NULL
  # DEBUG Length => NULL
  # DEBUG SourceAddressPtr => NULL
  # DEBUG ReturnCode => _13
  # DEBUG BEGIN_STMT
  if (_13 != 23205)
    goto <bb 5>; [51.11%]
  else
    goto <bb 6>; [48.89%]

  <bb 5> [local count: 73309489]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 11892

  <bb 6> [local count: 1073741824]:
  # ReturnCode_6 = PHI <ReturnCode_10(2), ReturnCode_10(3), _13(4), 11892(5)>
  # DEBUG ReturnCode => ReturnCode_6
  # DEBUG BEGIN_STMT
  return ReturnCode_6;

}



;; Function C40_Ip_MainInterfaceWriteStatus (C40_Ip_MainInterfaceWriteStatus, funcdef_no=36, decl_uid=8154, cgraph_uid=37, symbol_order=49)

C40_Ip_MainInterfaceWriteStatus ()
{
  C40_Ip_StatusType ReturnCode;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int C40_Ip_u32ProgrammedAddress.40_5;
  long unsigned int C40_Ip_u32ProgrammedLength.41_6;
  const uint8 * C40_Ip_pProgrammedData.42_7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReturnCode_12 = C40_Ip_MainInterfaceHVJobStatus ();
  # DEBUG ReturnCode => ReturnCode_12
  # DEBUG BEGIN_STMT
  if (ReturnCode_12 != 59202)
    goto <bb 3>; [66.00%]
  else
    goto <bb 6>; [34.00%]

  <bb 3> [local count: 708669605]:
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _2 = _1 & 4294967294;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _2;
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _4 = _3 & 4294967039;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _4;
  # DEBUG BEGIN_STMT
  if (ReturnCode_12 == 23205)
    goto <bb 4>; [20.24%]
  else
    goto <bb 6>; [79.76%]

  <bb 4> [local count: 143434728]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C40_Ip_u32ProgrammedAddress.40_5 = C40_Ip_u32ProgrammedAddress;
  C40_Ip_u32ProgrammedLength.41_6 = C40_Ip_u32ProgrammedLength;
  C40_Ip_pProgrammedData.42_7 = C40_Ip_pProgrammedData;
  ReturnCode_16 = C40_Ip_Compare (C40_Ip_u32ProgrammedAddress.40_5, C40_Ip_u32ProgrammedLength.41_6, C40_Ip_pProgrammedData.42_7);
  # DEBUG ReturnCode => ReturnCode_16
  # DEBUG BEGIN_STMT
  if (ReturnCode_16 != 23205)
    goto <bb 5>; [51.11%]
  else
    goto <bb 6>; [48.89%]

  <bb 5> [local count: 73309489]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 13260

  <bb 6> [local count: 1073741824]:
  # ReturnCode_8 = PHI <ReturnCode_12(2), ReturnCode_12(3), ReturnCode_16(4), 13260(5)>
  # DEBUG ReturnCode => ReturnCode_8
  # DEBUG BEGIN_STMT
  return ReturnCode_8;

}



;; Function C40_Ip_CheckLockDomainID_CheckRegister (C40_Ip_CheckLockDomainID_CheckRegister, funcdef_no=41, decl_uid=8235, cgraph_uid=42, symbol_order=54)

C40_Ip_CheckLockDomainID_CheckRegister (C40_Ip_VirtualSectorsType VirtualSector, uint32 * CheckRegister, uint32 * TempLockMasterRegister)
{
  uint32 SectorStep;
  uint32 DomainStep;
  uint32 SectorPosition;
  uint32 BlockCount;
  uint32 SectorIndex;
  long unsigned int C40_Ip_u32SectorId.43_1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C40_Ip_u32SectorId.43_1 = C40_Ip_u32SectorId;
  SectorStep_13 = C40_Ip_u32SectorId.43_1 & 4294967292;
  # DEBUG SectorStep => SectorStep_13
  # DEBUG BEGIN_STMT
  if (VirtualSector_14(D) <= 15)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _2 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SETSLOCK[2];
  *CheckRegister_18(D) = _2;
  # DEBUG BEGIN_STMT
  _3 = SectorStep_13 + 1076265984;
  *TempLockMasterRegister_21(D) = _3;
  goto <bb 9>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  if (VirtualSector_14(D) == 272)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 182536110]:
  # DEBUG BEGIN_STMT
  _4 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLKU_SETSLOCK[0];
  *CheckRegister_18(D) = _4;
  # DEBUG BEGIN_STMT
  *TempLockMasterRegister_21(D) = 1076266112;
  goto <bb 9>; [100.00%]

  <bb 6> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  SectorIndex_15 = VirtualSector_14(D) + 4294967280;
  # DEBUG SectorIndex => SectorIndex_15
  # DEBUG BEGIN_STMT
  BlockCount_16 = SectorIndex_15 >> 7;
  # DEBUG BlockCount => BlockCount_16
  # DEBUG BEGIN_STMT
  SectorPosition_17 = SectorIndex_15 & 127;
  # DEBUG SectorPosition => SectorPosition_17
  # DEBUG BEGIN_STMT
  if (SectorPosition_17 <= 95)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SSETSLOCK[BlockCount_16];
  *CheckRegister_18(D) = _5;
  # DEBUG BEGIN_STMT
  DomainStep_24 = BlockCount_16 << 4;
  # DEBUG DomainStep => DomainStep_24
  # DEBUG BEGIN_STMT
  _6 = SectorStep_13 + DomainStep_24;
  _7 = _6 + 1076266116;
  *TempLockMasterRegister_21(D) = _7;
  goto <bb 9>; [100.00%]

  <bb 8> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  _8 ={v} MEM[(struct PFLASH_Type *)1076264960B].PFCBLK_SETSLOCK[BlockCount_16];
  *CheckRegister_18(D) = _8;
  # DEBUG BEGIN_STMT
  DomainStep_20 = BlockCount_16 << 5;
  # DEBUG DomainStep => DomainStep_20
  # DEBUG BEGIN_STMT
  _9 = SectorStep_13 + DomainStep_20;
  _10 = _9 + 1076265920;
  *TempLockMasterRegister_21(D) = _10;

  <bb 9> [local count: 1073741824]:
  return;

}



;; Function C40_Ip_CheckLockDomainID (C40_Ip_CheckLockDomainID, funcdef_no=39, decl_uid=8231, cgraph_uid=40, symbol_order=52)

C40_Ip_CheckLockDomainID (C40_Ip_VirtualSectorsType VirtualSector, uint8 DomainIdValue)
{
  uint32 CheckRegister;
  uint32 ShiftValue;
  uint32 TempLockMasterRegister;
  uint8 LockDomainIDValue;
  C40_Ip_StatusType ReturnCode;
  long unsigned int C40_Ip_u32SectorId.10_1;
  long unsigned int _2;
  long unsigned int CheckRegister.11_3;
  long unsigned int C40_Ip_u32BitPosition.12_4;
  long unsigned int _5;
  long unsigned int TempLockMasterRegister.13_6;
  volatile uint32 * TempLockMasterRegister.15_7;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205
  # DEBUG BEGIN_STMT
  # DEBUG LockDomainIDValue => 0
  # DEBUG BEGIN_STMT
  TempLockMasterRegister = 0;
  # DEBUG BEGIN_STMT
  # DEBUG ShiftValue => 0
  # DEBUG BEGIN_STMT
  CheckRegister = 0;
  # DEBUG BEGIN_STMT
  if (VirtualSector_16(D) != 272)
    goto <bb 3>; [66.00%]
  else
    goto <bb 4>; [34.00%]

  <bb 3> [local count: 708669605]:
  # DEBUG BEGIN_STMT
  C40_Ip_u32SectorId.10_1 = C40_Ip_u32SectorId;
  _2 = C40_Ip_u32SectorId.10_1 & 3;
  ShiftValue_17 = _2 * 8;
  # DEBUG ShiftValue => ShiftValue_17

  <bb 4> [local count: 1073741824]:
  # ShiftValue_11 = PHI <0(2), ShiftValue_17(3)>
  # DEBUG ShiftValue => ShiftValue_11
  # DEBUG BEGIN_STMT
  if (VirtualSector_16(D) <= 272)
    goto <bb 5>; [33.00%]
  else
    goto <bb 6>; [67.00%]

  <bb 5> [local count: 354334802]:
  # DEBUG BEGIN_STMT
  C40_Ip_CheckLockDomainID_CheckRegister (VirtualSector_16(D), &CheckRegister, &TempLockMasterRegister);

  <bb 6> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  CheckRegister.11_3 = CheckRegister;
  C40_Ip_u32BitPosition.12_4 = C40_Ip_u32BitPosition;
  _5 = CheckRegister.11_3 & C40_Ip_u32BitPosition.12_4;
  if (_5 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 7> [local count: 536870913]:
  TempLockMasterRegister.13_6 = TempLockMasterRegister;
  if (TempLockMasterRegister.13_6 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 8> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  TempLockMasterRegister.15_7 = (volatile uint32 *) TempLockMasterRegister.13_6;
  _8 ={v} *TempLockMasterRegister.15_7;
  _9 = _8 >> ShiftValue_11;
  LockDomainIDValue_19 = (uint8) _9;
  # DEBUG LockDomainIDValue => LockDomainIDValue_19
  # DEBUG BEGIN_STMT
  if (LockDomainIDValue_19 != DomainIdValue_20(D))
    goto <bb 9>; [66.00%]
  else
    goto <bb 10>; [34.00%]

  <bb 9> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 10212

  <bb 10> [local count: 1073741824]:
  # ReturnCode_10 = PHI <23205(6), 23205(7), 10212(9), 23205(8)>
  # DEBUG ReturnCode => ReturnCode_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TempLockMasterRegister ={v} {CLOBBER};
  CheckRegister ={v} {CLOBBER};
  return ReturnCode_10;

}



;; Function C40_Ip_SetLock (C40_Ip_SetLock, funcdef_no=13, decl_uid=8133, cgraph_uid=14, symbol_order=26)

C40_Ip_SetLock (C40_Ip_VirtualSectorsType VirtualSector, uint8 DomainIdValue)
{
  C40_Ip_StatusType ReturnCode;

  <bb 2> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReturnCode_6 = C40_Ip_GetLock (VirtualSector_4(D));
  # DEBUG ReturnCode => ReturnCode_6
  # DEBUG BEGIN_STMT
  if (ReturnCode_6 == 10212)
    goto <bb 6>; [34.00%]
  else
    goto <bb 3>; [66.00%]

  <bb 3> [local count: 708669604]:
  # DEBUG BEGIN_STMT
  if (ReturnCode_6 == 59576)
    goto <bb 6>; [36.03%]
  else
    goto <bb 4>; [63.97%]

  <bb 4> [local count: 453335945]:
  # DEBUG BEGIN_STMT
  ReturnCode_9 = C40_Ip_CheckLockDomainID (VirtualSector_4(D), DomainIdValue_7(D));
  # DEBUG ReturnCode => ReturnCode_9
  # DEBUG BEGIN_STMT
  if (ReturnCode_9 == 23205)
    goto <bb 5>; [12.02%]
  else
    goto <bb 6>; [87.98%]

  <bb 5> [local count: 54490981]:
  # DEBUG BEGIN_STMT
  C40_Ip_SetLockProtect (VirtualSector_4(D));

  <bb 6> [local count: 1073741824]:
  # ReturnCode_1 = PHI <ReturnCode_6(2), 23205(3), ReturnCode_9(4), 23205(5)>
  # DEBUG ReturnCode => ReturnCode_1
  # DEBUG BEGIN_STMT
  return ReturnCode_1;

}



;; Function C40_Ip_ClearLock (C40_Ip_ClearLock, funcdef_no=17, decl_uid=8138, cgraph_uid=18, symbol_order=30)

C40_Ip_ClearLock (C40_Ip_VirtualSectorsType VirtualSector, uint8 DomainIdValue)
{
  C40_Ip_StatusType ReturnCode;

  <bb 2> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReturnCode_6 = C40_Ip_GetLock (VirtualSector_4(D));
  # DEBUG ReturnCode => ReturnCode_6
  # DEBUG BEGIN_STMT
  if (ReturnCode_6 == 10212)
    goto <bb 6>; [34.00%]
  else
    goto <bb 3>; [66.00%]

  <bb 3> [local count: 708669604]:
  # DEBUG BEGIN_STMT
  if (ReturnCode_6 == 64034)
    goto <bb 6>; [36.03%]
  else
    goto <bb 4>; [63.97%]

  <bb 4> [local count: 453335945]:
  # DEBUG BEGIN_STMT
  ReturnCode_9 = C40_Ip_CheckLockDomainID (VirtualSector_4(D), DomainIdValue_7(D));
  # DEBUG ReturnCode => ReturnCode_9
  # DEBUG BEGIN_STMT
  if (ReturnCode_9 == 23205)
    goto <bb 5>; [12.02%]
  else
    goto <bb 6>; [87.98%]

  <bb 5> [local count: 54490981]:
  # DEBUG BEGIN_STMT
  C40_Ip_ClearLockProtect (VirtualSector_4(D));

  <bb 6> [local count: 1073741824]:
  # ReturnCode_1 = PHI <ReturnCode_6(2), 23205(3), ReturnCode_9(4), 23205(5)>
  # DEBUG ReturnCode => ReturnCode_1
  # DEBUG BEGIN_STMT
  return ReturnCode_1;

}



;; Function C40_Ip_GetSectorNumberFromAddress (C40_Ip_GetSectorNumberFromAddress, funcdef_no=42, decl_uid=8140, cgraph_uid=43, symbol_order=55)


Symbols to be put in SSA form
{ D.9595 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 12
Number of blocks to update: 11 ( 92%)


Removing basic block 5
Removing basic block 8
Merging blocks 11 and 7
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 8 3 }
;; 3 succs { 4 5 }
;; 4 succs { 8 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 1 }
C40_Ip_GetSectorNumberFromAddress (uint32 TargetAddress)
{
  C40_Ip_VirtualSectorsType VirtualSectors;
  C40_Ip_VirtualSectorsType D.9595;
  C40_Ip_VirtualSectorsType VirtualSectors;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = TargetAddress_6(D) + 3841982464;
  if (_1 <= 8191)
    goto <bb 8>; [35.00%]
  else
    goto <bb 3>; [65.00%]

  <bb 3> [local count: 697932186]:
  # DEBUG BEGIN_STMT
  _2 = TargetAddress_6(D) + 4026531840;
  if (_2 <= 131071)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 4> [local count: 348966093]:
  # DEBUG BEGIN_STMT
  VirtualSectors_7 = _2 >> 13;
  # DEBUG VirtualSectors => VirtualSectors_7
  goto <bb 8>; [100.00%]

  <bb 5> [local count: 348966093]:
  # DEBUG TargetAddress => TargetAddress_6(D)
  # DEBUG INLINE_ENTRY C40_Ip_GetSectorNumberFromAddress
  # DEBUG BEGIN_STMT
  _8 = TargetAddress_6(D) + 4290772992;
  if (_8 <= 2097151)
    goto <bb 6>; [65.00%]
  else
    goto <bb 7>; [35.00%]

  <bb 6> [local count: 226827960]:
  # DEBUG BEGIN_STMT
  _9 = _8 >> 13;
  VirtualSectors_10 = _9 + 16;
  # DEBUG VirtualSectors => VirtualSectors_10

  <bb 7> [local count: 348966093]:
  # VirtualSectors_11 = PHI <273(5), VirtualSectors_10(6)>
  # DEBUG VirtualSectors => VirtualSectors_11
  # DEBUG BEGIN_STMT
  _12 = VirtualSectors_11;
  # DEBUG TargetAddress => NULL
  # DEBUG VirtualSectors => NULL
  VirtualSectors_3 = _12;

  <bb 8> [local count: 1073741824]:
  # VirtualSectors_4 = PHI <272(2), VirtualSectors_7(4), VirtualSectors_3(7)>
  # DEBUG VirtualSectors => VirtualSectors_4
  # DEBUG BEGIN_STMT
  return VirtualSectors_4;

}



;; Function C40_Ip_MainInterfaceWrite (C40_Ip_MainInterfaceWrite, funcdef_no=35, decl_uid=8152, cgraph_uid=36, symbol_order=48)


Symbols to be put in SSA form
{ D.9225 D.9603 D.9609 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 37
Number of blocks to update: 35 ( 95%)


Merging blocks 2 and 13
Merging blocks 6 and 24
Merging blocks 9 and 29
Merging blocks 22 and 12
Removing basic block 26
Merging blocks 27 and 23
Removing basic block 30
Removing basic block 32
Removing basic block 33
Removing basic block 35
Merging blocks 36 and 28
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
;;
;; Loop 2
;;  header 20, latch 20
;;  depth 1, outer 0
;;  nodes: 20
;;
;; Loop 3
;;  header 21, latch 21
;;  depth 1, outer 0
;;  nodes: 21
;;
;; Loop 1
;;  header 15, latch 15
;;  depth 1, outer 0
;;  nodes: 15
;; 2 succs { 11 3 }
;; 3 succs { 11 4 }
;; 4 succs { 11 5 }
;; 5 succs { 11 6 }
;; 6 succs { 11 7 }
;; 7 succs { 11 8 }
;; 8 succs { 11 9 }
;; 9 succs { 11 10 }
;; 10 succs { 11 }
;; 11 succs { 12 13 }
;; 12 succs { 18 13 }
;; 13 succs { 14 18 }
;; 14 succs { 15 }
;; 15 succs { 15 16 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 19 24 }
;; 19 succs { 20 21 }
;; 20 succs { 20 22 }
;; 21 succs { 21 22 }
;; 22 succs { 23 24 }
;; 23 succs { 24 }
;; 24 succs { 1 }
C40_Ip_MainInterfaceWrite (uint32 LogicalAddress, uint32 Length, const uint8 * SourceAddressPtr, uint8 DomainIdValue)
{
  const uint32 * DataPtr32;
  const uint8 * DataPtr8;
  uint32 DataIndex;
  uint32 SizeLeft;
  volatile uint32 DataTemp32;
  uint8 ActualDomainIDs;
  C40_Ip_StatusType D.9609;
  C40_Ip_StatusType ReturnCode;
  C40_Ip_VirtualSectorsType VirtualSector;
  C40_Ip_StatusType D.9603;
  uint32 LocationWriteDataRegs;
  C40_Ip_StatusType ReturnCode;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char C40_Ip_bAsync.30_4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  signed int _41;
  <unnamed type> _42;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int DataPtr.31_47;
  long unsigned int _48;
  long unsigned int _50;
  long unsigned int _52;
  long unsigned int _53;
  unsigned char _59;
  long unsigned int _60;
  unsigned char _61;
  long unsigned int _62;
  long unsigned int _63;
  long unsigned int DataTemp32.32_64;
  long unsigned int _65;
  unsigned char _66;
  long unsigned int _67;
  long unsigned int _68;
  long unsigned int DataTemp32.33_69;
  long unsigned int _70;
  unsigned char _71;
  long unsigned int _72;
  long unsigned int _73;
  long unsigned int DataTemp32.34_74;
  long unsigned int _75;
  long unsigned int DataTemp32.35_76;
  unsigned char _78;
  long unsigned int _79;
  unsigned char _80;
  long unsigned int _81;
  long unsigned int _82;
  long unsigned int DataTemp32.36_83;
  long unsigned int _84;
  unsigned char _85;
  long unsigned int _86;
  long unsigned int _87;
  long unsigned int DataTemp32.37_88;
  long unsigned int _89;
  unsigned char _90;
  long unsigned int _91;
  long unsigned int _92;
  long unsigned int DataTemp32.38_93;
  long unsigned int _94;
  long unsigned int _95;
  long unsigned int DataTemp32.39_96;

  <bb 2> [local count: 650887458]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  C40_Ip_u32LogicalAddressCheckFail = LogicalAddress_13(D);
  # DEBUG BEGIN_STMT
  C40_Ip_eOpStatus = 17;
  # DEBUG BEGIN_STMT
  # DEBUG LogicalAddress => LogicalAddress_13(D)
  # DEBUG Length => Length_16(D)
  # DEBUG SourceAddressPtr => SourceAddressPtr_17(D)
  # DEBUG INLINE_ENTRY C40_Ip_MainInterfaceWritePreCheck
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  VirtualSector_35 = C40_Ip_GetSectorNumberFromAddress (LogicalAddress_13(D));
  # DEBUG VirtualSector => VirtualSector_35
  # DEBUG BEGIN_STMT
  _36 = LogicalAddress_13(D) & 7;
  if (_36 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 325443729]:
  _37 = Length_16(D) & 7;
  if (_37 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 4> [local count: 162721864]:
  if (Length_16(D) > 128)
    goto <bb 11>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 81360932]:
  if (Length_16(D) == 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 6> [local count: 40680466]:
  if (SourceAddressPtr_17(D) == 0B)
    goto <bb 11>; [30.00%]
  else
    goto <bb 7>; [70.00%]

  <bb 7> [local count: 28476326]:
  # DEBUG BEGIN_STMT
  _38 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _39 = _38 & 272;
  if (_39 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 14238163]:
  # DEBUG BEGIN_STMT
  _40 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _41 = (signed int) _40;
  if (_41 < 0)
    goto <bb 11>; [58.52%]
  else
    goto <bb 9>; [41.48%]

  <bb 9> [local count: 5905990]:
  # DEBUG BEGIN_STMT
  _42 = C40_Ip_GetLock (VirtualSector_35);
  if (_42 != 64034)
    goto <bb 11>; [66.00%]
  else
    goto <bb 10>; [34.00%]

  <bb 10> [local count: 2008037]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205

  <bb 11> [local count: 650887458]:
  # ReturnCode_43 = PHI <11700(2), 11700(3), 11700(4), 11700(5), 11700(6), 10212(7), 10212(8), 10212(9), 23205(10)>
  # DEBUG ReturnCode => ReturnCode_43
  # DEBUG BEGIN_STMT
  _107 = ReturnCode_43;
  # DEBUG LogicalAddress => NULL
  # DEBUG Length => NULL
  # DEBUG SourceAddressPtr => NULL
  # DEBUG VirtualSector => NULL
  # DEBUG ReturnCode => NULL
  ReturnCode_19 = _107;
  # DEBUG ReturnCode => ReturnCode_19
  # DEBUG BEGIN_STMT
  if (ReturnCode_19 == 23205)
    goto <bb 12>; [20.24%]
  else
    goto <bb 13>; [79.76%]

  <bb 12> [local count: 131739621]:
  # DEBUG BEGIN_STMT
  ReturnCode_21 = C40_Ip_Compare (LogicalAddress_13(D), Length_16(D), 0B);
  # DEBUG ReturnCode => ReturnCode_21
  # DEBUG BEGIN_STMT
  if (ReturnCode_21 != 23205)
    goto <bb 18>; [51.11%]
  else
    goto <bb 13>; [48.89%]

  <bb 13> [local count: 583555338]:
  # ReturnCode_7 = PHI <ReturnCode_19(11), ReturnCode_21(12)>
  # DEBUG ReturnCode => ReturnCode_7
  # DEBUG BEGIN_STMT
  if (ReturnCode_7 == 23205)
    goto <bb 14>; [20.24%]
  else
    goto <bb 18>; [79.76%]

  <bb 14> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  C40_Ip_ClearAllErrorFlagsMainInterface ();
  # DEBUG BEGIN_STMT
  # DEBUG PhysicalAddress => LogicalAddress_13(D)
  # DEBUG DomainIdValue => DomainIdValue_23(D)
  # DEBUG INLINE_ENTRY C40_Ip_MainInterfaceWriteJobAddress
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205

  <bb 15> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Address => LogicalAddress_13(D)
  # DEBUG INLINE_ENTRY C40_Ip_MainInterfaceWriteLogicalAddress
  # DEBUG BEGIN_STMT
  MEM[(struct PFLASH_Type *)1076264960B].PFCPGM_PEADR_L ={v} LogicalAddress_13(D);
  # DEBUG Address => NULL
  # DEBUG BEGIN_STMT
  _44 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _45 = _44 >> 16;
  ActualDomainIDs_46 = (uint8) _45;
  # DEBUG ActualDomainIDs => ActualDomainIDs_46
  # DEBUG BEGIN_STMT
  if (DomainIdValue_23(D) != ActualDomainIDs_46)
    goto <bb 15>; [89.00%]
  else
    goto <bb 16>; [11.00%]

  <bb 16> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  _109 = 23205;
  # DEBUG PhysicalAddress => NULL
  # DEBUG DomainIdValue => NULL
  # DEBUG ActualDomainIDs => NULL
  ReturnCode_25 = _109;
  # DEBUG ReturnCode => ReturnCode_25
  # DEBUG BEGIN_STMT
  if (ReturnCode_25 == 11220)
    goto <bb 17>; [12.02%]
  else
    goto <bb 18>; [87.98%]

  <bb 17> [local count: 14197014]:
  # DEBUG BEGIN_STMT
  C40_Ip_ClearInterlockWrite ();

  <bb 18> [local count: 650887458]:
  # ReturnCode_8 = PHI <ReturnCode_7(13), ReturnCode_25(16), 11220(17), 11892(12)>
  # DEBUG ReturnCode => ReturnCode_8
  # DEBUG BEGIN_STMT
  if (ReturnCode_8 == 23205)
    goto <bb 19>; [20.24%]
  else
    goto <bb 24>; [79.76%]

  <bb 19> [local count: 131739621]:
  # DEBUG BEGIN_STMT
  C40_Ip_u32ProgrammedAddress = LogicalAddress_13(D);
  # DEBUG BEGIN_STMT
  C40_Ip_u32ProgrammedLength = Length_16(D);
  # DEBUG BEGIN_STMT
  C40_Ip_pProgrammedData = SourceAddressPtr_17(D);
  # DEBUG BEGIN_STMT
  _1 = LogicalAddress_13(D) >> 2;
  LocationWriteDataRegs_30 = _1 & 31;
  # DEBUG LocationWriteDataRegs => LocationWriteDataRegs_30
  # DEBUG BEGIN_STMT
  # DEBUG LocationWriteDataRegs => LocationWriteDataRegs_30
  # DEBUG DataPtr => SourceAddressPtr_17(D)
  # DEBUG Size => Length_16(D)
  # DEBUG INLINE_ENTRY C40_Ip_MainInterfaceFillDataBuff
  # DEBUG BEGIN_STMT
  # DEBUG DataPtr32 => SourceAddressPtr_17(D)
  # DEBUG BEGIN_STMT
  # DEBUG DataPtr8 => SourceAddressPtr_17(D)
  # DEBUG BEGIN_STMT
  # DEBUG DataIndex => LocationWriteDataRegs_30
  # DEBUG BEGIN_STMT
  # DEBUG SizeLeft => Length_16(D)
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DataPtr.31_47 = (long unsigned int) SourceAddressPtr_17(D);
  _48 = DataPtr.31_47 & 3;
  if (_48 == 0)
    goto <bb 20>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 20> [local count: 598816464]:
  # DataPtr32_49 = PHI <SourceAddressPtr_17(D)(19), DataPtr32_54(20)>
  # DataIndex_51 = PHI <LocationWriteDataRegs_30(19), DataIndex_55(20)>
  # SizeLeft_56 = PHI <Length_16(D)(19), SizeLeft_57(20)>
  # DEBUG SizeLeft => SizeLeft_56
  # DEBUG DataIndex => DataIndex_51
  # DEBUG DataPtr32 => DataPtr32_49
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _50 = *DataPtr32_49;
  MEM[(struct FLASH_Type *)1076805632B].DATA[DataIndex_51] ={v} _50;
  # DEBUG BEGIN_STMT
  _52 = DataIndex_51 + 1;
  _53 = MEM[(const uint32 *)DataPtr32_49 + 4B];
  MEM[(struct FLASH_Type *)1076805632B].DATA[_52] ={v} _53;
  # DEBUG BEGIN_STMT
  DataPtr32_54 = DataPtr32_49 + 8;
  # DEBUG DataPtr32 => DataPtr32_54
  # DEBUG BEGIN_STMT
  DataIndex_55 = DataIndex_51 + 2;
  # DEBUG DataIndex => DataIndex_55
  # DEBUG BEGIN_STMT
  SizeLeft_57 = SizeLeft_56 + 4294967288;
  # DEBUG SizeLeft => SizeLeft_57
  # DEBUG BEGIN_STMT
  if (SizeLeft_57 != 0)
    goto <bb 20>; [89.00%]
  else
    goto <bb 22>; [11.00%]

  <bb 21> [local count: 598816464]:
  # DataPtr8_58 = PHI <SourceAddressPtr_17(D)(19), DataPtr8_97(21)>
  # DataIndex_77 = PHI <LocationWriteDataRegs_30(19), DataIndex_98(21)>
  # SizeLeft_99 = PHI <Length_16(D)(19), SizeLeft_100(21)>
  # DEBUG SizeLeft => SizeLeft_99
  # DEBUG DataIndex => DataIndex_77
  # DEBUG DataPtr8 => DataPtr8_58
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _59 = *DataPtr8_58;
  _60 = (long unsigned int) _59;
  DataTemp32 ={v} _60;
  # DEBUG BEGIN_STMT
  _61 = MEM[(const uint8 *)DataPtr8_58 + 1B];
  _62 = (long unsigned int) _61;
  _63 = _62 << 8;
  DataTemp32.32_64 ={v} DataTemp32;
  _65 = _63 | DataTemp32.32_64;
  DataTemp32 ={v} _65;
  # DEBUG BEGIN_STMT
  _66 = MEM[(const uint8 *)DataPtr8_58 + 2B];
  _67 = (long unsigned int) _66;
  _68 = _67 << 16;
  DataTemp32.33_69 ={v} DataTemp32;
  _70 = _68 | DataTemp32.33_69;
  DataTemp32 ={v} _70;
  # DEBUG BEGIN_STMT
  _71 = MEM[(const uint8 *)DataPtr8_58 + 3B];
  _72 = (long unsigned int) _71;
  _73 = _72 << 24;
  DataTemp32.34_74 ={v} DataTemp32;
  _75 = _73 | DataTemp32.34_74;
  DataTemp32 ={v} _75;
  # DEBUG BEGIN_STMT
  DataTemp32.35_76 ={v} DataTemp32;
  MEM[(struct FLASH_Type *)1076805632B].DATA[DataIndex_77] ={v} DataTemp32.35_76;
  # DEBUG BEGIN_STMT
  _78 = MEM[(const uint8 *)DataPtr8_58 + 4B];
  _79 = (long unsigned int) _78;
  DataTemp32 ={v} _79;
  # DEBUG BEGIN_STMT
  _80 = MEM[(const uint8 *)DataPtr8_58 + 5B];
  _81 = (long unsigned int) _80;
  _82 = _81 << 8;
  DataTemp32.36_83 ={v} DataTemp32;
  _84 = _82 | DataTemp32.36_83;
  DataTemp32 ={v} _84;
  # DEBUG BEGIN_STMT
  _85 = MEM[(const uint8 *)DataPtr8_58 + 6B];
  _86 = (long unsigned int) _85;
  _87 = _86 << 16;
  DataTemp32.37_88 ={v} DataTemp32;
  _89 = _87 | DataTemp32.37_88;
  DataTemp32 ={v} _89;
  # DEBUG BEGIN_STMT
  _90 = MEM[(const uint8 *)DataPtr8_58 + 7B];
  _91 = (long unsigned int) _90;
  _92 = _91 << 24;
  DataTemp32.38_93 ={v} DataTemp32;
  _94 = _92 | DataTemp32.38_93;
  DataTemp32 ={v} _94;
  # DEBUG BEGIN_STMT
  _95 = DataIndex_77 + 1;
  DataTemp32.39_96 ={v} DataTemp32;
  MEM[(struct FLASH_Type *)1076805632B].DATA[_95] ={v} DataTemp32.39_96;
  # DEBUG BEGIN_STMT
  DataPtr8_97 = DataPtr8_58 + 8;
  # DEBUG DataPtr8 => DataPtr8_97
  # DEBUG BEGIN_STMT
  DataIndex_98 = DataIndex_77 + 2;
  # DEBUG DataIndex => DataIndex_98
  # DEBUG BEGIN_STMT
  SizeLeft_100 = SizeLeft_99 + 4294967288;
  # DEBUG SizeLeft => SizeLeft_100
  # DEBUG BEGIN_STMT
  if (SizeLeft_100 != 0)
    goto <bb 21>; [89.00%]
  else
    goto <bb 22>; [11.00%]

  <bb 22> [local count: 131739622]:
  # DEBUG LocationWriteDataRegs => NULL
  # DEBUG DataPtr => NULL
  # DEBUG Size => NULL
  # DEBUG DataTemp32 => NULL
  # DEBUG SizeLeft => NULL
  # DEBUG DataIndex => NULL
  # DEBUG DataPtr8 => NULL
  # DEBUG DataPtr32 => NULL
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _3 = _2 | 256;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _3;
  # DEBUG BEGIN_STMT
  C40_Ip_bAsync.30_4 = C40_Ip_bAsync;
  if (C40_Ip_bAsync.30_4 == 1)
    goto <bb 23>; [20.24%]
  else
    goto <bb 24>; [79.76%]

  <bb 23> [local count: 26664099]:
  # DEBUG BEGIN_STMT
  C40_Ip_FlashAccessCalloutStart ();
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _6 = _5 | 1;
  MEM[(struct FLASH_Type *)1076805632B].MCR ={v} _6;

  <bb 24> [local count: 650887459]:
  # DEBUG BEGIN_STMT
  return ReturnCode_8;

}



;; Function C40_Ip_GetBlockNumberFromAddress (C40_Ip_GetBlockNumberFromAddress, funcdef_no=44, decl_uid=8142, cgraph_uid=45, symbol_order=57)


Symbols to be put in SSA form
{ D.9645 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 12
Number of blocks to update: 11 ( 92%)


Removing basic block 5
Merging blocks 11 and 7
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;; 2 succs { 9 3 }
;; 3 succs { 9 4 }
;; 4 succs { 5 9 }
;; 5 succs { 8 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 1 }
C40_Ip_GetBlockNumberFromAddress (uint32 TargetAddress)
{
  C40_Ip_FlashBlocksNumberType BlockNumber;
  C40_Ip_FlashBlocksNumberType D.9645;
  C40_Ip_FlashBlocksNumberType BlockNumber;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = TargetAddress_5(D) + 3841982464;
  if (_1 <= 8191)
    goto <bb 9>; [35.00%]
  else
    goto <bb 3>; [65.00%]

  <bb 3> [local count: 697932186]:
  # DEBUG BEGIN_STMT
  _2 = TargetAddress_5(D) + 4026531840;
  if (_2 <= 131071)
    goto <bb 9>; [35.00%]
  else
    goto <bb 4>; [65.00%]

  <bb 4> [local count: 453655921]:
  # DEBUG BEGIN_STMT
  _3 = TargetAddress_5(D) + 4290772992;
  if (_3 <= 2097151)
    goto <bb 5>; [65.00%]
  else
    goto <bb 9>; [35.00%]

  <bb 5> [local count: 294876349]:
  # DEBUG BEGIN_STMT
  # DEBUG TargetAddress => TargetAddress_5(D)
  # DEBUG INLINE_ENTRY C40_Ip_GetCodeBlockNumber
  # DEBUG BEGIN_STMT
  # DEBUG BlockNumber => 255
  # DEBUG BEGIN_STMT
  if (TargetAddress_5(D) <= 5242879)
    goto <bb 8>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 6> [local count: 147438174]:
  # DEBUG BEGIN_STMT
  if (TargetAddress_5(D) <= 6291455)
    goto <bb 7>; [65.00%]
  else
    goto <bb 8>; [35.00%]

  <bb 7> [local count: 95834813]:
  # DEBUG BEGIN_STMT
  # DEBUG BlockNumber => 1

  <bb 8> [local count: 294876349]:
  # BlockNumber_8 = PHI <0(5), 255(6), 1(7)>
  # DEBUG BlockNumber => BlockNumber_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _9 = BlockNumber_8;
  # DEBUG TargetAddress => NULL
  # DEBUG BlockNumber => NULL
  BlockNumber_7 = _9;
  # DEBUG BlockNumber => BlockNumber_7

  <bb 9> [local count: 1073741824]:
  # BlockNumber_4 = PHI <5(2), 4(3), BlockNumber_7(8), 255(4)>
  # DEBUG BlockNumber => BlockNumber_4
  # DEBUG BEGIN_STMT
  return BlockNumber_4;

}



;; Function C40_Ip_ArrayIntegrityCheck (C40_Ip_ArrayIntegrityCheck, funcdef_no=47, decl_uid=8163, cgraph_uid=48, symbol_order=60)


Symbols to be put in SSA form
{ D.9227 D.9650 D.9653 D.9659 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 33
Number of blocks to update: 31 ( 94%)


Merging blocks 2 and 18
Removing basic block 6
Removing basic block 20
Merging blocks 21 and 17
Removing basic block 23
Merging blocks 27 and 22
Removing basic block 29
Removing basic block 31
Merging blocks 32 and 28
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
;;
;; Loop 1
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 20
;;
;; Loop 2
;;  header 11, latch 11
;;  depth 1, outer 0
;;  nodes: 11
;; 2 succs { 8 3 }
;; 3 succs { 8 4 }
;; 4 succs { 7 5 }
;; 5 succs { 7 6 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 22 9 }
;; 9 succs { 10 22 }
;; 10 succs { 22 11 }
;; 11 succs { 11 12 }
;; 12 succs { 13 17 }
;; 13 succs { 14 15 }
;; 14 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 22 }
;; 17 succs { 19 }
;; 18 succs { 19 }
;; 19 succs { 20 21 }
;; 20 succs { 18 21 }
;; 21 succs { 22 }
;; 22 succs { 1 }
C40_Ip_ArrayIntegrityCheck (uint32 SelectBlock, C40_Ip_ArrayIntegritySequenceType AddressSequence, C40_Ip_FlashBreakPointsType BreakPoints, const struct C40_Ip_MisrType * MisrSeedValues, uint8 DomainIdValue)
{
  uint8 ActualDomainIDs;
  C40_Ip_StatusType D.9659;
  boolean ReturnCode;
  boolean D.9653;
  boolean ReturnCode;
  boolean D.9650;
  uint32 WaitCounter;
  C40_Ip_StatusType ReturnCode;
  unsigned char _1;
  long unsigned int _2;
  signed int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _47;
  long unsigned int _48;

  <bb 2> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG WaitCounter => 450
  # DEBUG BEGIN_STMT
  # DEBUG SelectBlock => SelectBlock_23(D)
  # DEBUG INLINE_ENTRY C40_Ip_CheckSelecBlock
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 1
  # DEBUG BEGIN_STMT
  if (SelectBlock_23(D) == 4194304)
    goto <bb 8>; [34.00%]
  else
    goto <bb 3>; [66.00%]

  <bb 3> [local count: 708669604]:
  if (SelectBlock_23(D) == 5242880)
    goto <bb 8>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 4> [local count: 467721938]:
  # DEBUG SelectBlock => SelectBlock_23(D)
  # DEBUG INLINE_ENTRY C40_Ip_CheckSelecBlock
  if (SelectBlock_23(D) == 268435456)
    goto <bb 7>; [34.00%]
  else
    goto <bb 5>; [66.00%]

  <bb 5> [local count: 308696479]:
  if (SelectBlock_23(D) == 452984832)
    goto <bb 7>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 6> [local count: 203739676]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 0

  <bb 7> [local count: 467721938]:
  # ReturnCode_46 = PHI <1(4), 1(5), 0(6)>
  # DEBUG ReturnCode => ReturnCode_46
  # DEBUG BEGIN_STMT
  _51 = ReturnCode_46;
  # DEBUG SelectBlock => NULL
  # DEBUG ReturnCode => NULL
  ReturnCode_44 = _51;

  <bb 8> [local count: 1073741824]:
  # ReturnCode_45 = PHI <1(2), 1(3), ReturnCode_44(7)>
  # DEBUG ReturnCode => ReturnCode_45
  # DEBUG BEGIN_STMT
  _52 = ReturnCode_45;
  # DEBUG SelectBlock => NULL
  # DEBUG ReturnCode => NULL
  _1 = _52;
  if (_1 == 0)
    goto <bb 22>; [52.23%]
  else
    goto <bb 9>; [47.77%]

  <bb 9> [local count: 512926469]:
  # DEBUG BEGIN_STMT
  ReturnCode_25 = C40_Ip_UTestCheckBusy ();
  # DEBUG ReturnCode => ReturnCode_25
  # DEBUG BEGIN_STMT
  if (ReturnCode_25 == 23205)
    goto <bb 10>; [34.00%]
  else
    goto <bb 22>; [66.00%]

  <bb 10> [local count: 174395000]:
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} 4193884569;
  # DEBUG BEGIN_STMT
  _2 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _3 = (signed int) _2;
  if (_3 >= 0)
    goto <bb 22>; [61.14%]
  else
    goto <bb 11>; [38.86%]

  <bb 11> [local count: 616089975]:
  # DEBUG PhysicalAddress => NULL
  # DEBUG DomainIdValue => NULL
  # DEBUG ReturnCode => NULL
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Address => SelectBlock_23(D)
  # DEBUG INLINE_ENTRY C40_Ip_MainInterfaceWriteLogicalAddress
  # DEBUG BEGIN_STMT
  MEM[(struct PFLASH_Type *)1076264960B].PFCPGM_PEADR_L ={v} SelectBlock_23(D);
  # DEBUG Address => NULL
  # DEBUG BEGIN_STMT
  _47 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _48 = _47 >> 16;
  ActualDomainIDs_49 = (uint8) _48;
  # DEBUG ActualDomainIDs => ActualDomainIDs_49
  # DEBUG BEGIN_STMT
  if (DomainIdValue_27(D) != ActualDomainIDs_49)
    goto <bb 11>; [89.00%]
  else
    goto <bb 12>; [11.00%]

  <bb 12> [local count: 67769897]:
  # DEBUG BEGIN_STMT
  _54 = 23205;
  # DEBUG PhysicalAddress => NULL
  # DEBUG DomainIdValue => NULL
  # DEBUG ActualDomainIDs => NULL
  ReturnCode_29 = _54;
  # DEBUG ReturnCode => ReturnCode_29
  # DEBUG BEGIN_STMT
  if (ReturnCode_29 == 23205)
    goto <bb 13>; [21.72%]
  else
    goto <bb 17>; [78.28%]

  <bb 13> [local count: 14719622]:
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].DATA[0] ={v} 4294967295;
  # DEBUG BEGIN_STMT
  if (AddressSequence_36(D) == 1)
    goto <bb 14>; [34.00%]
  else
    goto <bb 15>; [66.00%]

  <bb 14> [local count: 5004671]:
  # DEBUG BEGIN_STMT
  _4 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _5 = _4 | 4;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _5;
  goto <bb 16>; [100.00%]

  <bb 15> [local count: 9714950]:
  # DEBUG BEGIN_STMT
  _6 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _7 = _6 & 4294967291;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _7;

  <bb 16> [local count: 14719622]:
  # DEBUG BEGIN_STMT
  C40_Ip_UTestCheckBreakpoint (BreakPoints_39(D));
  # DEBUG BEGIN_STMT
  C40_Ip_SetSeedMisr (MisrSeedValues_41(D));
  # DEBUG BEGIN_STMT
  _8 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _9 = _8 | 2;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _9;
  goto <bb 22>; [100.00%]

  <bb 17> [local count: 53050275]:
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].DATA[0] ={v} 4294967295;
  # DEBUG BEGIN_STMT
  _10 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _11 = _10 | 2;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _11;
  # DEBUG BEGIN_STMT
  _12 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _13 = _12 & 4294967293;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _13;
  # DEBUG BEGIN_STMT
  goto <bb 19>; [100.00%]

  <bb 18> [local count: 770072703]:
  # DEBUG BEGIN_STMT
  WaitCounter_33 = WaitCounter_19 + 4294967295;
  # DEBUG WaitCounter => WaitCounter_33

  <bb 19> [local count: 823122978]:
  # WaitCounter_19 = PHI <450(17), WaitCounter_33(18)>
  # DEBUG WaitCounter => WaitCounter_19
  # DEBUG BEGIN_STMT
  _14 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _15 = _14 & 1;
  if (_15 == 0)
    goto <bb 20>; [94.50%]
  else
    goto <bb 21>; [5.50%]

  <bb 20> [local count: 777851215]:
  if (WaitCounter_19 != 0)
    goto <bb 18>; [99.00%]
  else
    goto <bb 21>; [1.00%]

  <bb 21> [local count: 53050276]:
  # DEBUG BEGIN_STMT
  _16 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _17 = _16 & 2147483647;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _17;

  <bb 22> [local count: 1073741824]:
  # ReturnCode_18 = PHI <ReturnCode_25(9), 10212(10), 23205(16), ReturnCode_29(21), 11700(8)>
  # DEBUG ReturnCode => ReturnCode_18
  # DEBUG BEGIN_STMT
  return ReturnCode_18;

}



;; Function C40_Ip_CheckUserTestStatus (C40_Ip_CheckUserTestStatus, funcdef_no=49, decl_uid=8157, cgraph_uid=50, symbol_order=62)


Symbols to be put in SSA form
{ D.9228 D.9667 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 23
Number of blocks to update: 22 ( 96%)


Removing basic block 8
Merging blocks 22 and 10
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
;;
;; Loop 1
;;  header 11, latch 10
;;  depth 1, outer 0
;;  nodes: 11 10 9
;; 2 succs { 20 3 }
;; 3 succs { 20 4 }
;; 4 succs { 5 20 }
;; 5 succs { 6 20 }
;; 6 succs { 7 8 }
;; 7 succs { 20 }
;; 8 succs { 11 }
;; 9 succs { 12 10 }
;; 10 succs { 11 }
;; 11 succs { 9 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 18 }
;; 15 succs { 17 16 }
;; 16 succs { 17 }
;; 17 succs { 19 }
;; 18 succs { 19 }
;; 19 succs { 20 }
;; 20 succs { 1 }
C40_Ip_CheckUserTestStatus (const struct C40_Ip_MisrType * MisrExpectedValues, C40_Ip_UtestStateType * TestResult)
{
  C40_Ip_StatusType ReturnCode;
  uint32 Temp;
  uint8 Index;
  C40_Ip_StatusType D.9667;
  C40_Ip_StatusType ReturnCode;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  int _17;
  long unsigned int _19;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  <unnamed type> iftmp.48_28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _34;

  <bb 2> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (MisrExpectedValues_9(D) == 0B)
    goto <bb 20>; [18.75%]
  else
    goto <bb 3>; [81.25%]

  <bb 3> [local count: 872415231]:
  if (TestResult_10(D) == 0B)
    goto <bb 20>; [18.75%]
  else
    goto <bb 4>; [81.25%]

  <bb 4> [local count: 708837376]:
  # DEBUG BEGIN_STMT
  *TestResult_10(D) = 0;
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _2 = _1 & 2;
  if (_2 != 0)
    goto <bb 5>; [65.00%]
  else
    goto <bb 20>; [35.00%]

  <bb 5> [local count: 460744294]:
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _4 = _3 & 1;
  if (_4 != 0)
    goto <bb 6>; [65.00%]
  else
    goto <bb 20>; [35.00%]

  <bb 6> [local count: 299483791]:
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _6 = _5 & 64;
  if (_6 != 0)
    goto <bb 7>; [52.23%]
  else
    goto <bb 8>; [47.77%]

  <bb 7> [local count: 156420384]:
  # DEBUG BEGIN_STMT
  *TestResult_10(D) = 23;
  goto <bb 20>; [100.00%]

  <bb 8> [local count: 143063407]:
  # DEBUG BEGIN_STMT
  # DEBUG MisrExpectedValues => MisrExpectedValues_9(D)
  # DEBUG OpStatus => TestResult_10(D)
  # DEBUG INLINE_ENTRY C40_Ip_CheckUserTestStatusExecution
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205
  # DEBUG BEGIN_STMT
  *TestResult_10(D) = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Index => 0
  goto <bb 11>; [100.00%]

  <bb 9> [local count: 861251284]:
  # DEBUG BEGIN_STMT
  _17 = (int) Index_16;
  Temp_18 = MisrExpectedValues_9(D)->arrMISRValue[_17];
  # DEBUG Temp => Temp_18
  # DEBUG BEGIN_STMT
  _19 ={v} MEM[(struct FLASH_Type *)1076805632B].UM[_17];
  if (Temp_18 != _19)
    goto <bb 12>; [5.50%]
  else
    goto <bb 10>; [94.50%]

  <bb 10> [local count: 813882463]:
  # DEBUG BEGIN_STMT
  Index_20 = Index_16 + 1;
  # DEBUG Index => Index_20

  <bb 11> [local count: 956945871]:
  # Index_16 = PHI <0(8), Index_20(10)>
  # DEBUG Index => Index_16
  # DEBUG BEGIN_STMT
  if (Index_16 != 9)
    goto <bb 9>; [90.00%]
  else
    goto <bb 12>; [10.00%]

  <bb 12> [local count: 143063408]:
  # ReturnCode_36 = PHI <10212(9), 23205(11)>
  # DEBUG ReturnCode => ReturnCode_36
  # DEBUG BEGIN_STMT
  _21 ={v} MEM[(struct FLASH_Type *)1076805632B].UM9;
  _22 = _21 & 1;
  _23 = MisrExpectedValues_9(D)->arrMISRValue[9];
  if (_22 != _23)
    goto <bb 13>; [66.00%]
  else
    goto <bb 14>; [34.00%]

  <bb 13> [local count: 94421849]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 10212

  <bb 14> [local count: 143063408]:
  # ReturnCode_37 = PHI <ReturnCode_36(12), 10212(13)>
  # DEBUG ReturnCode => ReturnCode_37
  # DEBUG BEGIN_STMT
  _24 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _25 = _24 & 512;
  if (_25 != 0)
    goto <bb 15>; [35.00%]
  else
    goto <bb 18>; [65.00%]

  <bb 15> [local count: 50072193]:
  # DEBUG BEGIN_STMT
  _26 ={v} MEM[(struct FLASH_Type *)1076805632B].MCRS;
  _27 = _26 & 1073741824;
  if (_27 != 0)
    goto <bb 17>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 16> [local count: 25036096]:

  <bb 17> [local count: 50072193]:
  # iftmp.48_28 = PHI <48(15), 49(16)>
  *TestResult_10(D) = iftmp.48_28;
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 10212
  goto <bb 19>; [100.00%]

  <bb 18> [local count: 92991215]:
  # DEBUG BEGIN_STMT
  _29 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _30 = _29 & 4294967259;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _30;
  # DEBUG BEGIN_STMT
  _31 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _32 = _31 & 4294967293;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _32;
  # DEBUG BEGIN_STMT
  _33 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _34 = _33 & 2147483647;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _34;

  <bb 19> [local count: 143063408]:
  # ReturnCode_35 = PHI <10212(17), ReturnCode_37(18)>
  # DEBUG ReturnCode => ReturnCode_35
  # DEBUG BEGIN_STMT
  _44 = ReturnCode_35;
  # DEBUG MisrExpectedValues => NULL
  # DEBUG OpStatus => NULL
  # DEBUG Index => NULL
  # DEBUG Temp => NULL
  # DEBUG ReturnCode => NULL
  ReturnCode_14 = _44;
  # DEBUG ReturnCode => ReturnCode_14

  <bb 20> [local count: 1073741824]:
  # ReturnCode_7 = PHI <11700(3), 59202(5), 11220(4), ReturnCode_14(19), 23205(7), 11700(2)>
  # DEBUG ReturnCode => ReturnCode_7
  # DEBUG BEGIN_STMT
  return ReturnCode_7;

}



;; Function C40_Ip_ArrayIntegrityCheckSuspend (C40_Ip_ArrayIntegrityCheckSuspend, funcdef_no=51, decl_uid=8165, cgraph_uid=52, symbol_order=64)

C40_Ip_ArrayIntegrityCheckSuspend ()
{
  uint32 WaitCounter;
  C40_Ip_StatusType ReturnCode;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;

  <bb 2> [local count: 276810640]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205
  # DEBUG BEGIN_STMT
  # DEBUG WaitCounter => 450
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _2 = _1 & 2;
  if (_2 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 3> [local count: 138405320]:
  _3 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _4 = _3 & 65;
  if (_4 == 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 4> [local count: 69202660]:
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _6 = _5 | 64;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _6;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 1004539164]:
  # DEBUG BEGIN_STMT
  WaitCounter_18 = WaitCounter_14 + 4294967295;
  # DEBUG WaitCounter => WaitCounter_18

  <bb 6> [local count: 1073741824]:
  # WaitCounter_14 = PHI <450(4), WaitCounter_18(5)>
  # DEBUG WaitCounter => WaitCounter_14
  # DEBUG BEGIN_STMT
  _7 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _8 = _7 & 1;
  if (_8 == 0)
    goto <bb 7>; [94.50%]
  else
    goto <bb 8>; [5.50%]

  <bb 7> [local count: 1014686024]:
  if (WaitCounter_14 != 0)
    goto <bb 5>; [99.00%]
  else
    goto <bb 8>; [1.00%]

  <bb 8> [local count: 69202661]:
  # DEBUG BEGIN_STMT
  _9 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _10 = _9 & 64;
  if (_10 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 9> [local count: 34601330]:
  _11 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _12 = _11 & 1;
  if (_12 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [local count: 51901996]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 10212

  <bb 11> [local count: 276810641]:
  # ReturnCode_13 = PHI <10212(10), 10212(3), 23205(9), 10212(2)>
  # DEBUG ReturnCode => ReturnCode_13
  # DEBUG BEGIN_STMT
  return ReturnCode_13;

}



;; Function C40_Ip_ArrayIntegrityCheckResume (C40_Ip_ArrayIntegrityCheckResume, funcdef_no=54, decl_uid=8167, cgraph_uid=55, symbol_order=67)


Symbols to be put in SSA form
{ D.9230 D.9693 D.9697 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 26
Number of blocks to update: 25 ( 96%)


Removing basic block 4
Removing basic block 6
Merging blocks 16 and 8
Merging blocks 25 and 17
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 7
;;
;; Loop 2
;;  header 15, latch 14
;;  depth 1, outer 0
;;  nodes: 15 14 16
;; 2 succs { 3 21 }
;; 3 succs { 4 12 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 5 8 }
;; 8 succs { 10 9 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 21 }
;; 12 succs { 13 21 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 16 17 }
;; 16 succs { 14 17 }
;; 17 succs { 19 18 }
;; 18 succs { 19 20 }
;; 19 succs { 20 }
;; 20 succs { 21 }
;; 21 succs { 1 }
C40_Ip_ArrayIntegrityCheckResume ()
{
  C40_Ip_StatusType ReturnCode;
  uint32 WaitCounter;
  uint32 Temp;
  C40_Ip_StatusType D.9697;
  C40_Ip_StatusType ReturnCode;
  uint32 WaitCounter;
  C40_Ip_StatusType D.9693;
  C40_Ip_StatusType ReturnCode;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;

  <bb 2> [local count: 279427436]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _2 = _1 & 2;
  if (_2 != 0)
    goto <bb 3>; [65.00%]
  else
    goto <bb 21>; [35.00%]

  <bb 3> [local count: 181627833]:
  # DEBUG BEGIN_STMT
  _3 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _4 = _3 & 65;
  if (_4 == 65)
    goto <bb 4>; [20.24%]
  else
    goto <bb 12>; [79.76%]

  <bb 4> [local count: 36761473]:
  # DEBUG BEGIN_STMT
  # DEBUG INLINE_ENTRY C40_Ip_ArrayIntegrityResumeSuppened
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205
  # DEBUG BEGIN_STMT
  # DEBUG WaitCounter => 450
  # DEBUG BEGIN_STMT
  _14 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _15 = _14 & 4294967231;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _15;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 533626017]:
  # DEBUG BEGIN_STMT
  WaitCounter_17 = WaitCounter_16 + 4294967295;
  # DEBUG WaitCounter => WaitCounter_17

  <bb 6> [local count: 570387492]:
  # WaitCounter_16 = PHI <450(4), WaitCounter_17(5)>
  # DEBUG WaitCounter => WaitCounter_16
  # DEBUG BEGIN_STMT
  _18 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _19 = _18 & 1;
  if (_19 != 0)
    goto <bb 7>; [94.50%]
  else
    goto <bb 8>; [5.50%]

  <bb 7> [local count: 539016180]:
  if (WaitCounter_16 != 0)
    goto <bb 5>; [99.00%]
  else
    goto <bb 8>; [1.00%]

  <bb 8> [local count: 36761474]:
  # DEBUG BEGIN_STMT
  _20 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _21 = _20 & 64;
  if (_21 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 9> [local count: 18380737]:
  _22 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _23 = _22 & 1;
  if (_23 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [local count: 27571105]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 10212

  <bb 11> [local count: 36761474]:
  # ReturnCode_24 = PHI <23205(9), 10212(10)>
  # DEBUG ReturnCode => ReturnCode_24
  # DEBUG BEGIN_STMT
  _43 = ReturnCode_24;
  # DEBUG WaitCounter => NULL
  # DEBUG ReturnCode => NULL
  ReturnCode_13 = _43;
  # DEBUG ReturnCode => ReturnCode_13
  goto <bb 21>; [100.00%]

  <bb 12> [local count: 144866360]:
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _6 = _5 & 512;
  if (_6 != 0)
    goto <bb 13>; [47.77%]
  else
    goto <bb 21>; [52.23%]

  <bb 13> [local count: 69202660]:
  # DEBUG BEGIN_STMT
  # DEBUG INLINE_ENTRY C40_Ip_ArrayIntegrityResumeBroken
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205
  # DEBUG BEGIN_STMT
  # DEBUG WaitCounter => 450
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Temp_25 ={v} MEM[(struct FLASH_Type *)1076805632B].MCRS;
  # DEBUG Temp => Temp_25
  # DEBUG BEGIN_STMT
  Temp_26 = Temp_25 & 216858623;
  # DEBUG Temp => Temp_26
  # DEBUG BEGIN_STMT
  Temp_27 = Temp_26 | 3221225472;
  # DEBUG Temp => Temp_27
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].MCRS ={v} Temp_27;
  # DEBUG BEGIN_STMT
  _28 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _29 = _28 & 4294966783;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _29;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [100.00%]

  <bb 14> [local count: 1004539164]:
  # DEBUG BEGIN_STMT
  WaitCounter_31 = WaitCounter_30 + 4294967295;
  # DEBUG WaitCounter => WaitCounter_31

  <bb 15> [local count: 1073741824]:
  # WaitCounter_30 = PHI <450(13), WaitCounter_31(14)>
  # DEBUG WaitCounter => WaitCounter_30
  # DEBUG BEGIN_STMT
  _32 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _33 = _32 & 1;
  if (_33 != 0)
    goto <bb 16>; [94.50%]
  else
    goto <bb 17>; [5.50%]

  <bb 16> [local count: 1014686024]:
  if (WaitCounter_30 != 0)
    goto <bb 14>; [99.00%]
  else
    goto <bb 17>; [1.00%]

  <bb 17> [local count: 69202661]:
  # DEBUG BEGIN_STMT
  _34 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _35 = _34 & 512;
  if (_35 != 0)
    goto <bb 19>; [50.00%]
  else
    goto <bb 18>; [50.00%]

  <bb 18> [local count: 34601330]:
  _36 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _37 = _36 & 1;
  if (_37 != 0)
    goto <bb 19>; [50.00%]
  else
    goto <bb 20>; [50.00%]

  <bb 19> [local count: 51901995]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 10212

  <bb 20> [local count: 69202661]:
  # ReturnCode_38 = PHI <23205(18), 10212(19)>
  # DEBUG ReturnCode => ReturnCode_38
  # DEBUG BEGIN_STMT
  _41 = ReturnCode_38;
  # DEBUG Temp => NULL
  # DEBUG WaitCounter => NULL
  # DEBUG ReturnCode => NULL
  ReturnCode_11 = _41;
  # DEBUG ReturnCode => ReturnCode_11

  <bb 21> [local count: 279427437]:
  # ReturnCode_7 = PHI <23205(12), 10212(2), ReturnCode_13(11), ReturnCode_11(20)>
  # DEBUG ReturnCode => ReturnCode_7
  # DEBUG BEGIN_STMT
  return ReturnCode_7;

}



;; Function C40_Ip_UserMarginReadCheck (C40_Ip_UserMarginReadCheck, funcdef_no=55, decl_uid=8173, cgraph_uid=56, symbol_order=68)


Symbols to be put in SSA form
{ D.9231 D.9722 D.9725 D.9731 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 33
Number of blocks to update: 31 ( 94%)


Merging blocks 2 and 18
Removing basic block 6
Removing basic block 20
Merging blocks 21 and 17
Removing basic block 23
Merging blocks 27 and 22
Removing basic block 29
Removing basic block 31
Merging blocks 32 and 28
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
;;
;; Loop 1
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 20
;;
;; Loop 2
;;  header 11, latch 11
;;  depth 1, outer 0
;;  nodes: 11
;; 2 succs { 8 3 }
;; 3 succs { 8 4 }
;; 4 succs { 7 5 }
;; 5 succs { 7 6 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 22 9 }
;; 9 succs { 10 22 }
;; 10 succs { 22 11 }
;; 11 succs { 11 12 }
;; 12 succs { 13 17 }
;; 13 succs { 14 15 }
;; 14 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 22 }
;; 17 succs { 19 }
;; 18 succs { 19 }
;; 19 succs { 20 21 }
;; 20 succs { 18 21 }
;; 21 succs { 22 }
;; 22 succs { 1 }
C40_Ip_UserMarginReadCheck (uint32 SelectBlock, C40_Ip_FlashBreakPointsType BreakPoints, C40_Ip_MarginOptionType MarginLevel, const struct C40_Ip_MisrType * MisrSeedValues, uint8 DomainIdValue)
{
  uint8 ActualDomainIDs;
  C40_Ip_StatusType D.9731;
  boolean ReturnCode;
  boolean D.9725;
  boolean ReturnCode;
  boolean D.9722;
  uint32 WaitCounter;
  C40_Ip_StatusType ReturnCode;
  unsigned char _1;
  long unsigned int _2;
  signed int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _53;
  long unsigned int _54;

  <bb 2> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 23205
  # DEBUG BEGIN_STMT
  # DEBUG WaitCounter => 450
  # DEBUG BEGIN_STMT
  # DEBUG SelectBlock => SelectBlock_27(D)
  # DEBUG INLINE_ENTRY C40_Ip_CheckSelecBlock
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 1
  # DEBUG BEGIN_STMT
  if (SelectBlock_27(D) == 4194304)
    goto <bb 8>; [34.00%]
  else
    goto <bb 3>; [66.00%]

  <bb 3> [local count: 708669604]:
  if (SelectBlock_27(D) == 5242880)
    goto <bb 8>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 4> [local count: 467721938]:
  # DEBUG SelectBlock => SelectBlock_27(D)
  # DEBUG INLINE_ENTRY C40_Ip_CheckSelecBlock
  if (SelectBlock_27(D) == 268435456)
    goto <bb 7>; [34.00%]
  else
    goto <bb 5>; [66.00%]

  <bb 5> [local count: 308696479]:
  if (SelectBlock_27(D) == 452984832)
    goto <bb 7>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 6> [local count: 203739676]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnCode => 0

  <bb 7> [local count: 467721938]:
  # ReturnCode_52 = PHI <1(4), 1(5), 0(6)>
  # DEBUG ReturnCode => ReturnCode_52
  # DEBUG BEGIN_STMT
  _57 = ReturnCode_52;
  # DEBUG SelectBlock => NULL
  # DEBUG ReturnCode => NULL
  ReturnCode_50 = _57;

  <bb 8> [local count: 1073741824]:
  # ReturnCode_51 = PHI <1(2), 1(3), ReturnCode_50(7)>
  # DEBUG ReturnCode => ReturnCode_51
  # DEBUG BEGIN_STMT
  _58 = ReturnCode_51;
  # DEBUG SelectBlock => NULL
  # DEBUG ReturnCode => NULL
  _1 = _58;
  if (_1 == 0)
    goto <bb 22>; [52.23%]
  else
    goto <bb 9>; [47.77%]

  <bb 9> [local count: 512926469]:
  # DEBUG BEGIN_STMT
  ReturnCode_29 = C40_Ip_UTestCheckBusy ();
  # DEBUG ReturnCode => ReturnCode_29
  # DEBUG BEGIN_STMT
  if (ReturnCode_29 == 23205)
    goto <bb 10>; [34.00%]
  else
    goto <bb 22>; [66.00%]

  <bb 10> [local count: 174395000]:
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} 4193884569;
  # DEBUG BEGIN_STMT
  _2 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _3 = (signed int) _2;
  if (_3 >= 0)
    goto <bb 22>; [61.14%]
  else
    goto <bb 11>; [38.86%]

  <bb 11> [local count: 616089975]:
  # DEBUG PhysicalAddress => NULL
  # DEBUG DomainIdValue => NULL
  # DEBUG ReturnCode => NULL
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Address => SelectBlock_27(D)
  # DEBUG INLINE_ENTRY C40_Ip_MainInterfaceWriteLogicalAddress
  # DEBUG BEGIN_STMT
  MEM[(struct PFLASH_Type *)1076264960B].PFCPGM_PEADR_L ={v} SelectBlock_27(D);
  # DEBUG Address => NULL
  # DEBUG BEGIN_STMT
  _53 ={v} MEM[(struct FLASH_Type *)1076805632B].MCR;
  _54 = _53 >> 16;
  ActualDomainIDs_55 = (uint8) _54;
  # DEBUG ActualDomainIDs => ActualDomainIDs_55
  # DEBUG BEGIN_STMT
  if (DomainIdValue_31(D) != ActualDomainIDs_55)
    goto <bb 11>; [89.00%]
  else
    goto <bb 12>; [11.00%]

  <bb 12> [local count: 67769897]:
  # DEBUG BEGIN_STMT
  _60 = 23205;
  # DEBUG PhysicalAddress => NULL
  # DEBUG DomainIdValue => NULL
  # DEBUG ActualDomainIDs => NULL
  ReturnCode_33 = _60;
  # DEBUG ReturnCode => ReturnCode_33
  # DEBUG BEGIN_STMT
  if (ReturnCode_33 == 23205)
    goto <bb 13>; [12.02%]
  else
    goto <bb 17>; [87.98%]

  <bb 13> [local count: 8145942]:
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].DATA[0] ={v} 4294967295;
  # DEBUG BEGIN_STMT
  _4 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _5 = _4 | 4;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _5;
  # DEBUG BEGIN_STMT
  C40_Ip_UTestCheckBreakpoint (BreakPoints_41(D));
  # DEBUG BEGIN_STMT
  _6 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _7 = _6 | 32;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _7;
  # DEBUG BEGIN_STMT
  if (MarginLevel_44(D) == 1)
    goto <bb 14>; [34.00%]
  else
    goto <bb 15>; [66.00%]

  <bb 14> [local count: 2769620]:
  # DEBUG BEGIN_STMT
  _8 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _9 = _8 | 16;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _9;
  goto <bb 16>; [100.00%]

  <bb 15> [local count: 5376321]:
  # DEBUG BEGIN_STMT
  _10 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _11 = _10 & 4294967279;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _11;

  <bb 16> [local count: 8145942]:
  # DEBUG BEGIN_STMT
  C40_Ip_SetSeedMisr (MisrSeedValues_47(D));
  # DEBUG BEGIN_STMT
  _12 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _13 = _12 | 2;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _13;
  goto <bb 22>; [100.00%]

  <bb 17> [local count: 59623955]:
  # DEBUG BEGIN_STMT
  MEM[(struct FLASH_Type *)1076805632B].DATA[0] ={v} 4294967295;
  # DEBUG BEGIN_STMT
  _14 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _15 = _14 | 2;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _15;
  # DEBUG BEGIN_STMT
  _16 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _17 = _16 & 4294967293;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _17;
  # DEBUG BEGIN_STMT
  goto <bb 19>; [100.00%]

  <bb 18> [local count: 865495608]:
  # DEBUG BEGIN_STMT
  WaitCounter_37 = WaitCounter_23 + 4294967295;
  # DEBUG WaitCounter => WaitCounter_37

  <bb 19> [local count: 925119565]:
  # WaitCounter_23 = PHI <450(17), WaitCounter_37(18)>
  # DEBUG WaitCounter => WaitCounter_23
  # DEBUG BEGIN_STMT
  _18 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _19 = _18 & 1;
  if (_19 == 0)
    goto <bb 20>; [94.50%]
  else
    goto <bb 21>; [5.50%]

  <bb 20> [local count: 874237988]:
  if (WaitCounter_23 != 0)
    goto <bb 18>; [99.00%]
  else
    goto <bb 21>; [1.00%]

  <bb 21> [local count: 59623956]:
  # DEBUG BEGIN_STMT
  _20 ={v} MEM[(struct FLASH_Type *)1076805632B].UT0;
  _21 = _20 & 2147483647;
  MEM[(struct FLASH_Type *)1076805632B].UT0 ={v} _21;

  <bb 22> [local count: 1073741824]:
  # ReturnCode_22 = PHI <ReturnCode_29(9), 10212(10), 23205(16), ReturnCode_33(21), 11700(8)>
  # DEBUG ReturnCode => ReturnCode_22
  # DEBUG BEGIN_STMT
  return ReturnCode_22;

}



;; Function C40_Ip_GetFailedAddress (C40_Ip_GetFailedAddress, funcdef_no=56, decl_uid=8175, cgraph_uid=57, symbol_order=69)

C40_Ip_GetFailedAddress ()
{
  uint32 TempADR;
  uint32 Temp;
  uint32 AddrOffset;
  uint32 CheckRegionBlockError;
  uint32 Addr;
  long unsigned int _1;
  <unnamed type> C40_Ip_eOpStatus.49_2;
  long unsigned int C40_Ip_u32LogicalAddressCheckFail.50_3;
  long unsigned int _4;

  <bb 2> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  # DEBUG Addr => 4294967295
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TempADR_8 ={v} MEM[(struct FLASH_Type *)1076805632B].ADR;
  # DEBUG TempADR => TempADR_8
  # DEBUG BEGIN_STMT
  _1 = TempADR_8 >> 1;
  AddrOffset_9 = _1 & 262143;
  # DEBUG AddrOffset => AddrOffset_9
  # DEBUG BEGIN_STMT
  C40_Ip_eOpStatus.49_2 = C40_Ip_eOpStatus;
  if (C40_Ip_eOpStatus.49_2 == 17)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072220]:
  # DEBUG BEGIN_STMT
  C40_Ip_u32LogicalAddressCheckFail.50_3 = C40_Ip_u32LogicalAddressCheckFail;
  Temp_11 = C40_Ip_u32LogicalAddressCheckFail.50_3 & 127;
  # DEBUG Temp => Temp_11
  # DEBUG BEGIN_STMT
  _4 = AddrOffset_9 << 3;
  AddrOffset_12 = _4 + Temp_11;
  # DEBUG AddrOffset => AddrOffset_12
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 708669604]:
  # DEBUG BEGIN_STMT
  AddrOffset_10 = AddrOffset_9 << 3;
  # DEBUG AddrOffset => AddrOffset_10

  <bb 5> [local count: 1073741823]:
  # AddrOffset_6 = PHI <AddrOffset_12(3), AddrOffset_10(4)>
  # DEBUG AddrOffset => AddrOffset_6
  # DEBUG BEGIN_STMT
  CheckRegionBlockError_13 = TempADR_8 & 20447232;
  # DEBUG CheckRegionBlockError => CheckRegionBlockError_13
  # DEBUG BEGIN_STMT
  switch (CheckRegionBlockError_13) <default: <L10> [20.00%], case 524288: <L3> [20.00%], case 1048576: <L4> [20.00%], case 2097152: <L5> [20.00%], case 16777216: <L6> [20.00%]>

  <bb 6> [local count: 214748364]:
<L3>:
  # DEBUG BEGIN_STMT
  Addr_17 = AddrOffset_6 + 4194304;
  # DEBUG Addr => Addr_17
  # DEBUG BEGIN_STMT
  goto <bb 10>; [100.00%]

  <bb 7> [local count: 214748364]:
<L4>:
  # DEBUG BEGIN_STMT
  Addr_16 = AddrOffset_6 + 5242880;
  # DEBUG Addr => Addr_16
  # DEBUG BEGIN_STMT
  goto <bb 10>; [100.00%]

  <bb 8> [local count: 214748364]:
<L5>:
  # DEBUG BEGIN_STMT
  Addr_15 = AddrOffset_6 + 268435456;
  # DEBUG Addr => Addr_15
  # DEBUG BEGIN_STMT
  goto <bb 10>; [100.00%]

  <bb 9> [local count: 214748364]:
<L6>:
  # DEBUG BEGIN_STMT
  Addr_14 = AddrOffset_6 + 452984832;
  # DEBUG Addr => Addr_14
  # DEBUG BEGIN_STMT

  <bb 10> [local count: 1073741824]:
  # Addr_5 = PHI <Addr_17(6), Addr_16(7), Addr_15(8), Addr_14(9), 4294967295(5)>
<L10>:
  # DEBUG Addr => Addr_5
  # DEBUG BEGIN_STMT
  return Addr_5;

}



;; Function C40_Ip_SetAsyncMode (C40_Ip_SetAsyncMode, funcdef_no=57, decl_uid=8177, cgraph_uid=58, symbol_order=70)

C40_Ip_SetAsyncMode (const boolean Async)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  C40_Ip_bAsync = Async_2(D);
  return;

}


