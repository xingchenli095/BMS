EcuM_ComMWakeupIndication (EcuM_WakeupSourceType ComMevents)
{
  Std_ReturnType RetVal;
  ComM_InitStatusType Status;
  uint8_least wks;
  unsigned char Status.60_1;
  long unsigned int _2;
  unsigned char _3;
  int _4;
  unsigned char _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  wks_11 = 0;
  # DEBUG wks => wks_11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RetVal_12 = 1;
  # DEBUG RetVal => RetVal_12
  # DEBUG BEGIN_STMT
  RetVal_15 = ComM_GetStatus (&Status);
  # DEBUG RetVal => RetVal_15
  # DEBUG BEGIN_STMT
  if (RetVal_15 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  Status.60_1 = Status;
  if (Status.60_1 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = ComMevents_6 & 1;
  if (_2 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _3 = EcuM_WksMapping[wks_7];
  _4 = (int) _3;
  _5 = EcuM_WksConfigList[_4].ComMCh;
  ComM_EcuM_WakeUpIndication (_5);

  <bb 6> :
  # DEBUG BEGIN_STMT
  ComMevents_18 = ComMevents_6 >> 1;
  # DEBUG ComMevents => ComMevents_18
  # DEBUG BEGIN_STMT
  wks_19 = wks_7 + 1;
  # DEBUG wks => wks_19

  <bb 7> :
  # ComMevents_6 = PHI <ComMevents_16(D)(3), ComMevents_18(6)>
  # wks_7 = PHI <wks_11(3), wks_19(6)>
  # DEBUG wks => wks_7
  # DEBUG ComMevents => ComMevents_6
  # DEBUG BEGIN_STMT
  if (ComMevents_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  Status ={v} {CLOBBER};
  return;

}


EcuM_WksIndicateStatus_NONE ()
{
  struct EcuM_CoreContextType * CoreInstance;
  EcuM_WakeupSourceType wksNone;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CoreInstance_4 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_4
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  wksNone_6 = CoreInstance_4->WakeupIndication.None;
  # DEBUG wksNone => wksNone_6
  # DEBUG BEGIN_STMT
  CoreInstance_4->WakeupIndication.None = 0;
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  if (wksNone_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  BswM_EcuM_CurrentWakeup (wksNone_6, 0);

  <bb 4> :
  return;

}


EcuM_WksIndicateStatus_EXPIRED ()
{
  struct EcuM_CoreContextType * CoreInstance;
  EcuM_WakeupSourceType wksExpired;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CoreInstance_3 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_3
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  wksExpired_5 = CoreInstance_3->WakeupIndication.Expired;
  # DEBUG wksExpired => wksExpired_5
  # DEBUG BEGIN_STMT
  CoreInstance_3->WakeupIndication.Expired = 0;
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  BswM_EcuM_CurrentWakeup (wksExpired_5, 3);
  return;

}


EcuM_WksIndicateStatus_VALIDATED ()
{
  struct EcuM_CoreContextType * CoreInstance;
  EcuM_WakeupSourceType wksValidated;
  long unsigned int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CoreInstance_5 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_5
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  wksValidated_7 = CoreInstance_5->WakeupIndication.Validated;
  # DEBUG wksValidated => wksValidated_7
  # DEBUG BEGIN_STMT
  CoreInstance_5->WakeupIndication.Validated = 0;
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  if (wksValidated_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  BswM_EcuM_CurrentWakeup (wksValidated_7, 2);
  # DEBUG BEGIN_STMT
  _1 = wksValidated_7 & 32;
  EcuM_ComMWakeupIndication (_1);

  <bb 4> :
  return;

}


EcuM_WksIndicateStatus_PENDING ()
{
  struct EcuM_CoreContextType * CoreInstance;
  EcuM_WakeupSourceType wksPending;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CoreInstance_4 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_4
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  wksPending_6 = CoreInstance_4->WakeupIndication.Pending;
  # DEBUG wksPending => wksPending_6
  # DEBUG BEGIN_STMT
  CoreInstance_4->WakeupIndication.Pending = 0;
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  if (wksPending_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  BswM_EcuM_CurrentWakeup (wksPending_6, 1);

  <bb 4> :
  return;

}


EcuM_WksIndicateStatus_DISABLED ()
{
  struct EcuM_CoreContextType * CoreInstance;
  EcuM_WakeupSourceType wksDisabled;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CoreInstance_4 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_4
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  wksDisabled_6 = CoreInstance_4->WakeupIndication.Disabled;
  # DEBUG wksDisabled => wksDisabled_6
  # DEBUG BEGIN_STMT
  CoreInstance_4->WakeupIndication.Disabled = 0;
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  if (wksDisabled_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  BswM_EcuM_CurrentWakeup (wksDisabled_6, 4);

  <bb 4> :
  return;

}


EcuM_SwitchWakeupStatus (EcuM_WakeupSourceType sources, EcuM_WakeupStatusType status, struct EcuM_CoreContextType * CoreInstance)
{
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;
  long unsigned int _52;
  long unsigned int _53;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _56;
  long unsigned int _57;
  long unsigned int _58;
  long unsigned int _59;
  long unsigned int _60;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) status_62(D);
  switch (_1) <default: <L8> [INV], case 0: <L2> [INV], case 1: <L3> [INV], case 2: <L4> [INV], case 3: <L5> [INV], case 4: <L1> [INV], case 6: <L0> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _2 = CoreInstance_64(D)->WakeupStatus.Disabled;
  _3 = ~sources_65(D);
  _4 = _2 & _3;
  CoreInstance_64(D)->WakeupStatus.Disabled = _4;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _5 = CoreInstance_64(D)->WakeupIndication.Disabled;
  _6 = sources_65(D) | _5;
  CoreInstance_64(D)->WakeupIndication.Disabled = _6;
  # DEBUG BEGIN_STMT
  _7 = CoreInstance_64(D)->WakeupStatus.Disabled;
  _8 = sources_65(D) | _7;
  CoreInstance_64(D)->WakeupStatus.Disabled = _8;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _9 = CoreInstance_64(D)->WakeupIndication.None;
  _10 = sources_65(D) | _9;
  CoreInstance_64(D)->WakeupIndication.None = _10;
  # DEBUG BEGIN_STMT
  _11 = CoreInstance_64(D)->WakeupStatus.None;
  _12 = sources_65(D) | _11;
  CoreInstance_64(D)->WakeupStatus.None = _12;
  # DEBUG BEGIN_STMT
  _13 = CoreInstance_64(D)->WakeupStatus.Expired;
  _14 = ~sources_65(D);
  _15 = _13 & _14;
  CoreInstance_64(D)->WakeupStatus.Expired = _15;
  # DEBUG BEGIN_STMT
  _16 = CoreInstance_64(D)->WakeupStatus.Pending;
  _17 = ~sources_65(D);
  _18 = _16 & _17;
  CoreInstance_64(D)->WakeupStatus.Pending = _18;
  # DEBUG BEGIN_STMT
  _19 = CoreInstance_64(D)->WakeupStatus.Validated;
  _20 = ~sources_65(D);
  _21 = _19 & _20;
  CoreInstance_64(D)->WakeupStatus.Validated = _21;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _22 = CoreInstance_64(D)->WakeupIndication.Pending;
  _23 = sources_65(D) | _22;
  CoreInstance_64(D)->WakeupIndication.Pending = _23;
  # DEBUG BEGIN_STMT
  _24 = CoreInstance_64(D)->WakeupStatus.Pending;
  _25 = sources_65(D) | _24;
  CoreInstance_64(D)->WakeupStatus.Pending = _25;
  # DEBUG BEGIN_STMT
  _26 = CoreInstance_64(D)->WakeupStatus.Expired;
  _27 = ~sources_65(D);
  _28 = _26 & _27;
  CoreInstance_64(D)->WakeupStatus.Expired = _28;
  # DEBUG BEGIN_STMT
  _29 = CoreInstance_64(D)->WakeupStatus.None;
  _30 = ~sources_65(D);
  _31 = _29 & _30;
  CoreInstance_64(D)->WakeupStatus.None = _31;
  # DEBUG BEGIN_STMT
  _32 = CoreInstance_64(D)->WakeupStatus.Validated;
  _33 = ~sources_65(D);
  _34 = _32 & _33;
  CoreInstance_64(D)->WakeupStatus.Validated = _34;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _35 = CoreInstance_64(D)->WakeupIndication.Validated;
  _36 = sources_65(D) | _35;
  CoreInstance_64(D)->WakeupIndication.Validated = _36;
  # DEBUG BEGIN_STMT
  _37 = CoreInstance_64(D)->WakeupStatus.Validated;
  _38 = sources_65(D) | _37;
  CoreInstance_64(D)->WakeupStatus.Validated = _38;
  # DEBUG BEGIN_STMT
  _39 = CoreInstance_64(D)->WakeupStatus.Expired;
  _40 = ~sources_65(D);
  _41 = _39 & _40;
  CoreInstance_64(D)->WakeupStatus.Expired = _41;
  # DEBUG BEGIN_STMT
  _42 = CoreInstance_64(D)->WakeupStatus.None;
  _43 = ~sources_65(D);
  _44 = _42 & _43;
  CoreInstance_64(D)->WakeupStatus.None = _44;
  # DEBUG BEGIN_STMT
  _45 = CoreInstance_64(D)->WakeupStatus.Pending;
  _46 = ~sources_65(D);
  _47 = _45 & _46;
  CoreInstance_64(D)->WakeupStatus.Pending = _47;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  _48 = CoreInstance_64(D)->WakeupIndication.Expired;
  _49 = sources_65(D) | _48;
  CoreInstance_64(D)->WakeupIndication.Expired = _49;
  # DEBUG BEGIN_STMT
  _50 = CoreInstance_64(D)->WakeupStatus.Expired;
  _51 = sources_65(D) | _50;
  CoreInstance_64(D)->WakeupStatus.Expired = _51;
  # DEBUG BEGIN_STMT
  _52 = CoreInstance_64(D)->WakeupStatus.None;
  _53 = ~sources_65(D);
  _54 = _52 & _53;
  CoreInstance_64(D)->WakeupStatus.None = _54;
  # DEBUG BEGIN_STMT
  _55 = CoreInstance_64(D)->WakeupStatus.Pending;
  _56 = ~sources_65(D);
  _57 = _55 & _56;
  CoreInstance_64(D)->WakeupStatus.Pending = _57;
  # DEBUG BEGIN_STMT
  _58 = CoreInstance_64(D)->WakeupStatus.Validated;
  _59 = ~sources_65(D);
  _60 = _58 & _59;
  CoreInstance_64(D)->WakeupStatus.Validated = _60;
  # DEBUG BEGIN_STMT

  <bb 9> :
<L8>:
  return;

}


EcuM_WakeupRestart ()
{
  EcuM_WakeupSourceType wksDisable;
  struct EcuM_CoreContextType * CoreInstance;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CoreInstance_9 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_9
  # DEBUG BEGIN_STMT
  Mcu_SetMode (0);
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_9->WakeupStatus.Pending;
  if (_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _2 = CoreInstance_9->WakeupStatus.Validated;
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = CoreInstance_9->WakeupStatus.Pending;
  _4 = CoreInstance_9->WakeupStatus.Validated;
  wksDisable_11 = _3 | _4;
  # DEBUG wksDisable => wksDisable_11
  # DEBUG BEGIN_STMT
  EcuM_DisableWakeupSources (wksDisable_11);
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  EcuM_SwitchWakeupStatus (wksDisable_11, 4, CoreInstance_9);
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();

  <bb 5> :
  # DEBUG BEGIN_STMT
  CoreInstance_9->State = 34;
  # DEBUG BEGIN_STMT
  _5 = CoreInstance_9->State;
  BswM_EcuM_CurrentState (_5);
  # DEBUG BEGIN_STMT
  OS_UserReleaseResource (0);
  return;

}


EcuM_GoSleep ()
{
  EcuM_WakeupSourceType wksCleared;
  EcuM_WakeupSourceType wksSleepMode;
  struct EcuM_CoreContextType * CoreInstance;
  unsigned char _1;
  int _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char EcuM_ShutdownTarget.17_8;
  unsigned char _9;
  unsigned char EcuM_ResetMode.18_10;
  unsigned char _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CoreInstance_14 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_14
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_14->SleepMode;
  _2 = (int) _1;
  wksSleepMode_15 = EcuM_SleepModeConfigList[_2].wakeupSource;
  # DEBUG wksSleepMode => wksSleepMode_15
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  CoreInstance_14->State = 73;
  # DEBUG BEGIN_STMT
  _3 = CoreInstance_14->State;
  BswM_EcuM_CurrentState (_3);
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  _4 = CoreInstance_14->WakeupStatus.Pending;
  _5 = CoreInstance_14->WakeupStatus.Validated;
  _6 = _4 | _5;
  _7 = ~_6;
  wksCleared_19 = wksSleepMode_15 & _7;
  # DEBUG wksCleared => wksCleared_19
  # DEBUG BEGIN_STMT
  EcuM_SwitchWakeupStatus (wksCleared_19, 0, CoreInstance_14);
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  EcuM_WksIndicateStatus_NONE ();
  # DEBUG BEGIN_STMT
  EcuM_EnableWakeupSources (wksSleepMode_15);
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  EcuM_SwitchWakeupStatus (wksSleepMode_15, 6, CoreInstance_14);
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  OS_UserGetResource (0);
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget.17_8 = EcuM_ShutdownTarget;
  EcuM_LastShutdownTarget = EcuM_ShutdownTarget.17_8;
  # DEBUG BEGIN_STMT
  _9 = CoreInstance_14->SleepMode;
  EcuM_LastSleepMode = _9;
  # DEBUG BEGIN_STMT
  EcuM_ResetMode.18_10 = EcuM_ResetMode;
  EcuM_LastResetMode = EcuM_ResetMode.18_10;
  # DEBUG BEGIN_STMT
  CoreInstance_14->State = 80;
  # DEBUG BEGIN_STMT
  _11 = CoreInstance_14->State;
  BswM_EcuM_CurrentState (_11);
  return;

}


EcuM_WksIndicateStatus ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  EcuM_WksIndicateStatus_NONE ();
  # DEBUG BEGIN_STMT
  EcuM_WksIndicateStatus_PENDING ();
  # DEBUG BEGIN_STMT
  EcuM_WksIndicateStatus_VALIDATED ();
  # DEBUG BEGIN_STMT
  EcuM_WksIndicateStatus_DISABLED ();
  return;

}


EcuM_IsValidConfig (const void * voidConfigPtr)
{
  const struct EcuM_ConfigType * ConfigPtr;
  Std_ReturnType result;
  long unsigned int _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int EcuM_LcfgSignature.65_5;
  long unsigned int _6;
  Std_ReturnType _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_8 = 1;
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  ConfigPtr_10 = voidConfigPtr_9(D);
  # DEBUG ConfigPtr => ConfigPtr_10
  # DEBUG BEGIN_STMT
  _1 = ConfigPtr_10->PlatformSignature;
  _2 = TS_PlatformSigIsValid (_1);
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = ConfigPtr_10->CfgSignature;
  if (_3 == 29041840)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _4 = ConfigPtr_10->LcfgSignature;
  EcuM_LcfgSignature.65_5 = EcuM_LcfgSignature;
  if (_4 == EcuM_LcfgSignature.65_5)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = ConfigPtr_10->PublicInfoSignature;
  if (_6 == 1985306092)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_13 = 0;
  # DEBUG result => result_13

  <bb 7> :
  # result_7 = PHI <result_8(2), result_8(3), result_8(4), result_8(5), result_13(6)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  _14 = result_7;
  return _14;

}


EcuM_ValidateWakeupEvent (EcuM_WakeupSourceType sources)
{
  const EcuM_ASR40_StateType state;
  struct EcuM_CoreContextType * CoreInstance;
  long unsigned int _1;
  long unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CoreInstance_11 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_11
  # DEBUG BEGIN_STMT
  state_12 = CoreInstance_11->State;
  # DEBUG state => state_12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (state_12 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 20, 16);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = sources_13(D) & 63;
  if (_1 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 20, 23);
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = CoreInstance_11->WakeupStatus.Pending;
  sources_14 = sources_13(D) & _2;
  # DEBUG sources => sources_14
  # DEBUG BEGIN_STMT
  _3 = (unsigned int) state_12;
  _4 = _3 & 240;
  if (_4 == 48)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  sources_15 = sources_14 & 32;
  # DEBUG sources => sources_15

  <bb 8> :
  # sources_7 = PHI <sources_14(6), sources_15(7)>
  # DEBUG sources => sources_7
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  EcuM_SwitchWakeupStatus (sources_7, 2, CoreInstance_11);
  # DEBUG BEGIN_STMT
  _5 = CoreInstance_11->WakeupStatus.Stopped;
  _6 = sources_7 | _5;
  CoreInstance_11->WakeupStatus.Stopped = _6;
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  return;

}


EcuM_SetWakeupEvent (EcuM_WakeupSourceType sources)
{
  uint16 maxTimeout;
  EcuM_WakeupSourceType wksPendingNew;
  uint8_least wks;
  struct EcuM_CoreContextType * CoreInstance;
  unsigned char _1;
  long unsigned int _2;
  unsigned char _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  unsigned char _11;
  int _12;
  short unsigned int _13;
  unsigned char _14;
  int _15;
  short unsigned int _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CoreInstance_25 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_25
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_25->State;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 12, 16);
  goto <bb 15>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = sources_26(D) & 63;
  if (_2 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 12, 23);
  goto <bb 15>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  wksPendingNew_27 = 0;
  # DEBUG wksPendingNew => wksPendingNew_27
  # DEBUG BEGIN_STMT
  maxTimeout_28 = 0;
  # DEBUG maxTimeout => maxTimeout_28
  # DEBUG BEGIN_STMT
  _3 = CoreInstance_25->SleepMode;
  _4 = (int) _3;
  _5 = EcuM_SleepModeConfigList[_4].wakeupSource;
  sources_29 = sources_26(D) & _5;
  # DEBUG sources => sources_29
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  _6 = CoreInstance_25->WakeupStatus.Pending;
  _7 = _6 | 63;
  _8 = ~_7;
  wksPendingNew_31 = sources_29 & _8;
  # DEBUG wksPendingNew => wksPendingNew_31
  # DEBUG BEGIN_STMT
  EcuM_SwitchWakeupStatus (wksPendingNew_31, 1, CoreInstance_25);
  # DEBUG BEGIN_STMT
  _9 = sources_29 & 63;
  EcuM_SwitchWakeupStatus (_9, 2, CoreInstance_25);
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  wks_35 = 0;
  # DEBUG wks => wks_35
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = wksPendingNew_18 & 1;
  if (_10 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _11 = EcuM_WksMapping[wks_17];
  _12 = (int) _11;
  _13 = EcuM_WksValTimeout[_12];
  if (maxTimeout_20 < _13)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _14 = EcuM_WksMapping[wks_17];
  _15 = (int) _14;
  maxTimeout_39 = EcuM_WksValTimeout[_15];
  # DEBUG maxTimeout => maxTimeout_39

  <bb 10> :
  # maxTimeout_19 = PHI <maxTimeout_20(7), maxTimeout_20(8), maxTimeout_39(9)>
  # DEBUG maxTimeout => maxTimeout_19
  # DEBUG BEGIN_STMT
  wksPendingNew_40 = wksPendingNew_18 >> 1;
  # DEBUG wksPendingNew => wksPendingNew_40
  # DEBUG BEGIN_STMT
  wks_41 = wks_17 + 1;
  # DEBUG wks => wks_41

  <bb 11> :
  # wks_17 = PHI <wks_35(6), wks_41(10)>
  # wksPendingNew_18 = PHI <wksPendingNew_31(6), wksPendingNew_40(10)>
  # maxTimeout_20 = PHI <maxTimeout_28(6), maxTimeout_19(10)>
  # DEBUG maxTimeout => maxTimeout_20
  # DEBUG wksPendingNew => wksPendingNew_18
  # DEBUG wks => wks_17
  # DEBUG BEGIN_STMT
  if (wksPendingNew_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  _16 = CoreInstance_25->ValidationCounter;
  if (maxTimeout_20 > _16)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  CoreInstance_25->ValidationCounter = maxTimeout_20;

  <bb 14> :
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();

  <bb 15> :
  # DEBUG BEGIN_STMT
  return;

}


EcuM_ReportRamCheckResult ()
{
  unsigned char EcuM_RamCheckStatus.61_1;
  short unsigned int EcuM_DemErrRamChkFailed.62_2;
  unsigned char EcuM_RamCheckStatus.64_3;
  Dem_EventStatusType iftmp.63_4;
  Dem_EventStatusType iftmp.63_7;
  Dem_EventStatusType iftmp.63_8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EcuM_RamCheckStatus.61_1 = EcuM_RamCheckStatus;
  if (EcuM_RamCheckStatus.61_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  EcuM_DemErrRamChkFailed.62_2 = EcuM_DemErrRamChkFailed;
  EcuM_RamCheckStatus.64_3 = EcuM_RamCheckStatus;
  if (EcuM_RamCheckStatus.64_3 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.63_8 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.63_7 = 0;

  <bb 6> :
  # iftmp.63_4 = PHI <iftmp.63_8(4), iftmp.63_7(5)>
  Dem_ReportErrorStatus (EcuM_DemErrRamChkFailed.62_2, iftmp.63_4);
  # DEBUG BEGIN_STMT
  EcuM_RamCheckStatus = 0;

  <bb 7> :
  return;

}


EcuM_MainFunction ()
{
  struct EcuM_CoreContextType * CoreInstance;
  uint16 wksValCounter;
  EcuM_WakeupSourceType wksStopped;
  EcuM_WakeupSourceType wksStarted;
  EcuM_WakeupSourceType wksValidated;
  EcuM_WakeupSourceType wksPending;
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char _8;
  unsigned char _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  short unsigned int _14;
  short unsigned int _15;
  short unsigned int _16;
  short unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;

  <bb 2> :
  # DEBUG BEGIN_STMT
  wksPending_32 = 0;
  # DEBUG wksPending => wksPending_32
  # DEBUG BEGIN_STMT
  wksValidated_33 = 0;
  # DEBUG wksValidated => wksValidated_33
  # DEBUG BEGIN_STMT
  wksStarted_34 = 0;
  # DEBUG wksStarted => wksStarted_34
  # DEBUG BEGIN_STMT
  wksStopped_35 = 0;
  # DEBUG wksStopped => wksStopped_35
  # DEBUG BEGIN_STMT
  wksValCounter_36 = 0;
  # DEBUG wksValCounter => wksValCounter_36
  # DEBUG BEGIN_STMT
  CoreInstance_39 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_39
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_39->State;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 24, 16);
  goto <bb 18>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = CoreInstance_39->State;
  _3 = _2 + 239;
  if (_3 > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  _4 = CoreInstance_39->WakeupStatus.Started;
  _5 = CoreInstance_39->WakeupStatus.Stopped;
  _6 = ~_5;
  _7 = _4 & _6;
  CoreInstance_39->WakeupStatus.Started = _7;
  # DEBUG BEGIN_STMT
  CoreInstance_39->WakeupStatus.Stopped = 0;
  # DEBUG BEGIN_STMT
  wksPending_43 = CoreInstance_39->WakeupStatus.Pending;
  # DEBUG wksPending => wksPending_43
  # DEBUG BEGIN_STMT
  wksValidated_44 = CoreInstance_39->WakeupStatus.Validated;
  # DEBUG wksValidated => wksValidated_44
  # DEBUG BEGIN_STMT
  wksStarted_45 = CoreInstance_39->WakeupStatus.Started;
  # DEBUG wksStarted => wksStarted_45
  # DEBUG BEGIN_STMT
  wksValCounter_46 = CoreInstance_39->ValidationCounter;
  # DEBUG wksValCounter => wksValCounter_46
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  _8 = CoreInstance_39->State;
  if (_8 == 34)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (wksValidated_44 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  CoreInstance_39->State = 48;
  # DEBUG BEGIN_STMT
  _9 = CoreInstance_39->State;
  BswM_EcuM_CurrentState (_9);

  <bb 8> :
  # DEBUG BEGIN_STMT
  EcuM_WksIndicateStatus ();
  # DEBUG BEGIN_STMT
  if (wksPending_43 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (wksValCounter_46 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  EcuM_SwitchWakeupStatus (wksPending_43, 3, CoreInstance_39);
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  EcuM_StopWakeupSources (wksPending_43);
  # DEBUG BEGIN_STMT
  wksStopped_55 = wksPending_43;
  # DEBUG wksStopped => wksStopped_55
  # DEBUG BEGIN_STMT
  wksPending_56 = 0;
  # DEBUG wksPending => wksPending_56
  # DEBUG BEGIN_STMT
  EcuM_WksIndicateStatus_EXPIRED ();

  <bb 11> :
  # wksPending_23 = PHI <wksPending_43(8), wksPending_43(9), wksPending_56(10)>
  # wksStopped_25 = PHI <wksStopped_35(8), wksStopped_35(9), wksStopped_55(10)>
  # DEBUG wksStopped => wksStopped_25
  # DEBUG wksPending => wksPending_23
  # DEBUG BEGIN_STMT
  _10 = ~wksStarted_45;
  _11 = wksPending_23 & _10;
  if (_11 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _12 = ~wksStarted_45;
  _13 = wksPending_23 & _12;
  EcuM_StartWakeupSources (_13);
  # DEBUG BEGIN_STMT
  wksStarted_59 = wksPending_23;
  # DEBUG wksStarted => wksStarted_59

  <bb 13> :
  # wksStarted_24 = PHI <wksStarted_45(11), wksStarted_59(12)>
  # DEBUG wksStarted => wksStarted_24
  # DEBUG BEGIN_STMT
  if (wksPending_23 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  EcuM_CheckValidation (wksPending_23);

  <bb 15> :
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  _14 = CoreInstance_39->ValidationCounter;
  if (_14 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _15 = CoreInstance_39->ValidationCounter;
  _16 = _15;
  _17 = _16 + 65535;
  CoreInstance_39->ValidationCounter = _17;

  <bb 17> :
  # DEBUG BEGIN_STMT
  _18 = CoreInstance_39->WakeupStatus.Started;
  _19 = wksStarted_24 | _18;
  CoreInstance_39->WakeupStatus.Started = _19;
  # DEBUG BEGIN_STMT
  _20 = CoreInstance_39->WakeupStatus.Started;
  _21 = ~wksStopped_25;
  _22 = _20 & _21;
  CoreInstance_39->WakeupStatus.Started = _22;
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  EcuM_ReportRamCheckResult ();

  <bb 18> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


EcuM_GetExpiredWakeupEvents ()
{
  struct EcuM_CoreContextType * CoreInstance;
  EcuM_WakeupSourceType ret;
  unsigned char _1;
  EcuM_WakeupSourceType _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_4 = 0;
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  CoreInstance_7 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_7->State;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 25, 16);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  ret_9 = CoreInstance_7->WakeupStatus.Expired;
  # DEBUG ret => ret_9
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();

  <bb 5> :
  # ret_2 = PHI <ret_4(3), ret_9(4)>
  # DEBUG ret => ret_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = ret_2;
  return _12;

}


EcuM_GetValidatedWakeupEvents ()
{
  struct EcuM_CoreContextType * CoreInstance;
  EcuM_WakeupSourceType ret;
  unsigned char _1;
  EcuM_WakeupSourceType _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_4 = 0;
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  CoreInstance_7 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_7->State;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 21, 16);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  ret_9 = CoreInstance_7->WakeupStatus.Validated;
  # DEBUG ret => ret_9
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();

  <bb 5> :
  # ret_2 = PHI <ret_4(3), ret_9(4)>
  # DEBUG ret => ret_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = ret_2;
  return _12;

}


EcuM_ClearWakeupEvent (EcuM_WakeupSourceType sources)
{
  struct EcuM_CoreContextType * CoreInstance;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CoreInstance_7 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_7->State;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 22, 16);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  EcuM_SwitchWakeupStatus (sources_9(D), 0, CoreInstance_7);
  # DEBUG BEGIN_STMT
  _2 = CoreInstance_7->WakeupStatus.Stopped;
  _3 = sources_9(D) | _2;
  CoreInstance_7->WakeupStatus.Stopped = _3;
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


EcuM_GetPendingWakeupEvents ()
{
  struct EcuM_CoreContextType * CoreInstance;
  EcuM_WakeupSourceType ret;
  unsigned char _1;
  EcuM_WakeupSourceType _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_4 = 0;
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  CoreInstance_7 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_7->State;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 13, 16);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  ret_9 = CoreInstance_7->WakeupStatus.Pending;
  # DEBUG ret => ret_9
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();

  <bb 5> :
  # ret_2 = PHI <ret_4(3), ret_9(4)>
  # DEBUG ret => ret_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = ret_2;
  return _12;

}


EcuM_ASR40_GetNextRecentShutdown (EcuM_ASR40_StateType * target, uint8 * mode, EcuM_ASR40_ShutdownCauseType * cause, uint32 * time)
{
  Std_ReturnType ret;
  struct EcuM_CoreContextType * _1;
  unsigned char _2;
  unsigned char EcuM_NextShutdownInfoIdx.51_3;
  unsigned char EcuM_NextShutdownInfoIdx.52_4;
  unsigned char EcuM_NextShutdownInfoIdx.53_5;
  unsigned char _6;
  unsigned char EcuM_NextShutdownInfoIdx.54_7;
  unsigned char EcuM_ShutdownInfoStartIdx.55_8;
  unsigned char EcuM_NextShutdownInfoIdx.56_9;
  int _10;
  unsigned char _11;
  unsigned char EcuM_NextShutdownInfoIdx.57_12;
  int _13;
  unsigned char _14;
  unsigned char EcuM_NextShutdownInfoIdx.58_15;
  int _16;
  unsigned char _17;
  unsigned char EcuM_NextShutdownInfoIdx.59_18;
  int _19;
  long unsigned int _20;
  Std_ReturnType _44;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_24 = 1;
  # DEBUG ret => ret_24
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = EcuM_GetMasterCoreInstance ();
  _2 = _1->State;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 30, 16);
  goto <bb 15>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.51_3 = EcuM_NextShutdownInfoIdx;
  if (EcuM_NextShutdownInfoIdx.51_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.52_4 = EcuM_NextShutdownInfoIdx;
  EcuM_NextShutdownInfoIdx.53_5 = EcuM_NextShutdownInfoIdx.52_4;
  _6 = EcuM_NextShutdownInfoIdx.53_5 + 255;
  EcuM_NextShutdownInfoIdx = _6;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.54_7 = EcuM_NextShutdownInfoIdx;
  EcuM_ShutdownInfoStartIdx.55_8 = EcuM_ShutdownInfoStartIdx;
  if (EcuM_NextShutdownInfoIdx.54_7 != EcuM_ShutdownInfoStartIdx.55_8)
    goto <bb 8>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (target_31(D) == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (mode_32(D) == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (cause_33(D) == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (time_34(D) == 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 30, 18);
  goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.56_9 = EcuM_NextShutdownInfoIdx;
  _10 = (int) EcuM_NextShutdownInfoIdx.56_9;
  _11 = EcuM_ShutdownInfo[_10].target;
  *target_31(D) = _11;
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.57_12 = EcuM_NextShutdownInfoIdx;
  _13 = (int) EcuM_NextShutdownInfoIdx.57_12;
  _14 = EcuM_ShutdownInfo[_13].mode;
  *mode_32(D) = _14;
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.58_15 = EcuM_NextShutdownInfoIdx;
  _16 = (int) EcuM_NextShutdownInfoIdx.58_15;
  _17 = EcuM_ShutdownInfo[_16].cause;
  *cause_33(D) = _17;
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.59_18 = EcuM_NextShutdownInfoIdx;
  _19 = (int) EcuM_NextShutdownInfoIdx.59_18;
  _20 = EcuM_ShutdownInfo[_19].sdTime;
  *time_34(D) = _20;
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  ret_40 = 0;
  # DEBUG ret => ret_40
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();

  <bb 15> :
  # ret_21 = PHI <ret_24(3), ret_40(13), ret_24(14), ret_24(12)>
  # DEBUG ret => ret_21
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _44 = ret_21;
  return _44;

}


EcuM_ASR40_GetMostRecentShutdown (EcuM_ASR40_StateType * target, uint8 * mode, EcuM_ASR40_ShutdownCauseType * cause, uint32 * time)
{
  Std_ReturnType ret;
  struct EcuM_CoreContextType * _1;
  unsigned char _2;
  unsigned char EcuM_ShutdownInfoCurrentIdx.41_3;
  unsigned char EcuM_NextShutdownInfoIdx.42_4;
  unsigned char EcuM_ShutdownInfoStartIdx.43_5;
  unsigned char EcuM_NextShutdownInfoIdx.44_6;
  unsigned char EcuM_NextShutdownInfoIdx.45_7;
  unsigned char EcuM_NextShutdownInfoIdx.46_8;
  unsigned char _9;
  unsigned char EcuM_NextShutdownInfoIdx.47_10;
  int _11;
  unsigned char _12;
  unsigned char EcuM_NextShutdownInfoIdx.48_13;
  int _14;
  unsigned char _15;
  unsigned char EcuM_NextShutdownInfoIdx.49_16;
  int _17;
  unsigned char _18;
  unsigned char EcuM_NextShutdownInfoIdx.50_19;
  int _20;
  long unsigned int _21;
  Std_ReturnType _46;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_27 = 1;
  # DEBUG ret => ret_27
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = EcuM_GetMasterCoreInstance ();
  _2 = _1->State;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 29, 16);
  goto <bb 15>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (target_30(D) == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (mode_31(D) == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (cause_32(D) == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (time_33(D) == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 29, 18);
  goto <bb 15>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoCurrentIdx.41_3 = EcuM_ShutdownInfoCurrentIdx;
  EcuM_NextShutdownInfoIdx = EcuM_ShutdownInfoCurrentIdx.41_3;
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.42_4 = EcuM_NextShutdownInfoIdx;
  EcuM_ShutdownInfoStartIdx.43_5 = EcuM_ShutdownInfoStartIdx;
  if (EcuM_NextShutdownInfoIdx.42_4 != EcuM_ShutdownInfoStartIdx.43_5)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.44_6 = EcuM_NextShutdownInfoIdx;
  if (EcuM_NextShutdownInfoIdx.44_6 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.45_7 = EcuM_NextShutdownInfoIdx;
  EcuM_NextShutdownInfoIdx.46_8 = EcuM_NextShutdownInfoIdx.45_7;
  _9 = EcuM_NextShutdownInfoIdx.46_8 + 255;
  EcuM_NextShutdownInfoIdx = _9;

  <bb 13> :
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.47_10 = EcuM_NextShutdownInfoIdx;
  _11 = (int) EcuM_NextShutdownInfoIdx.47_10;
  _12 = EcuM_ShutdownInfo[_11].target;
  *target_30(D) = _12;
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.48_13 = EcuM_NextShutdownInfoIdx;
  _14 = (int) EcuM_NextShutdownInfoIdx.48_13;
  _15 = EcuM_ShutdownInfo[_14].mode;
  *mode_31(D) = _15;
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.49_16 = EcuM_NextShutdownInfoIdx;
  _17 = (int) EcuM_NextShutdownInfoIdx.49_16;
  _18 = EcuM_ShutdownInfo[_17].cause;
  *cause_32(D) = _18;
  # DEBUG BEGIN_STMT
  EcuM_NextShutdownInfoIdx.50_19 = EcuM_NextShutdownInfoIdx;
  _20 = (int) EcuM_NextShutdownInfoIdx.50_19;
  _21 = EcuM_ShutdownInfo[_20].sdTime;
  *time_33(D) = _21;
  # DEBUG BEGIN_STMT
  ret_42 = 0;
  # DEBUG ret => ret_42

  <bb 14> :
  # ret_22 = PHI <ret_27(9), ret_42(13)>
  # DEBUG ret => ret_22
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();

  <bb 15> :
  # ret_23 = PHI <ret_27(3), ret_27(8), ret_22(14)>
  # DEBUG ret => ret_23
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _46 = ret_23;
  return _46;

}


EcuM_ASR40_GetShutdownCause (EcuM_ASR40_ShutdownCauseType * shutdownCause)
{
  Std_ReturnType ret;
  struct EcuM_CoreContextType * _1;
  unsigned char _2;
  unsigned char EcuM_ShutdownCause.40_3;
  Std_ReturnType _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_6 = 1;
  # DEBUG ret => ret_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = EcuM_GetMasterCoreInstance ();
  _2 = _1->State;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 28, 16);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (shutdownCause_9(D) != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownCause.40_3 = EcuM_ShutdownCause;
  *shutdownCause_9(D) = EcuM_ShutdownCause.40_3;
  # DEBUG BEGIN_STMT
  ret_12 = 0;
  # DEBUG ret => ret_12
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 28, 18);

  <bb 7> :
  # ret_4 = PHI <ret_6(3), ret_12(5), ret_6(6)>
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _14 = ret_4;
  return _14;

}


EcuM_ASR40_SelectShutdownCause (EcuM_ASR40_ShutdownCauseType target)
{
  uint8_least idx;
  boolean detOk;
  Std_ReturnType ret;
  unsigned char _1;
  struct EcuM_CoreContextType * _2;
  unsigned char _3;
  Std_ReturnType _23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_9 = 1;
  # DEBUG ret => ret_9
  # DEBUG BEGIN_STMT
  detOk_10 = 1;
  # DEBUG detOk => detOk_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  idx_11 = 0;
  # DEBUG idx => idx_11
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = EcuM_ValidShutdownCause[idx_6];
  if (target_13(D) == _1)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  idx_14 = idx_6 + 1;
  # DEBUG idx => idx_14

  <bb 5> :
  # idx_6 = PHI <idx_11(2), idx_14(4)>
  # DEBUG idx => idx_6
  # DEBUG BEGIN_STMT
  if (idx_6 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = EcuM_GetMasterCoreInstance ();
  _3 = _2->State;
  if (_3 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  detOk_18 = 0;
  # DEBUG detOk => detOk_18
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 27, 16);
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (idx_6 > 3)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  detOk_16 = 0;
  # DEBUG detOk => detOk_16
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 27, 19);

  <bb 10> :
  # detOk_5 = PHI <detOk_18(7), detOk_10(8), detOk_16(9)>
  # DEBUG detOk => detOk_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (detOk_5 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  ret_21 = 0;
  # DEBUG ret => ret_21
  # DEBUG BEGIN_STMT
  EcuM_ShutdownCause = target_13(D);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  ret_20 = 1;
  # DEBUG ret => ret_20

  <bb 13> :
  # ret_4 = PHI <ret_21(11), ret_20(12)>
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _23 = ret_4;
  return _23;

}


EcuM_ASR40_GetLastShutdownTarget (EcuM_ASR40_StateType * shutdownTarget, uint8 * sleepMode)
{
  Std_ReturnType ret;
  struct EcuM_CoreContextType * _1;
  unsigned char _2;
  unsigned char EcuM_LastShutdownTarget.35_3;
  unsigned char EcuM_LastShutdownTarget.36_4;
  unsigned char EcuM_LastSleepMode.37_5;
  unsigned char EcuM_LastShutdownTarget.38_6;
  unsigned char EcuM_LastResetMode.39_7;
  Std_ReturnType _26;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_12 = 1;
  # DEBUG ret => ret_12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = EcuM_GetMasterCoreInstance ();
  _2 = _1->State;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 8, 16);
  # DEBUG BEGIN_STMT
  ret_25 = 1;
  # DEBUG ret => ret_25
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (shutdownTarget_15(D) != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  EcuM_LastShutdownTarget.35_3 = EcuM_LastShutdownTarget;
  *shutdownTarget_15(D) = EcuM_LastShutdownTarget.35_3;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 8, 18);

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (sleepMode_18(D) != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  EcuM_LastShutdownTarget.36_4 = EcuM_LastShutdownTarget;
  if (EcuM_LastShutdownTarget.36_4 == 80)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  EcuM_LastSleepMode.37_5 = EcuM_LastSleepMode;
  *sleepMode_18(D) = EcuM_LastSleepMode.37_5;
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  EcuM_LastShutdownTarget.38_6 = EcuM_LastShutdownTarget;
  if (EcuM_LastShutdownTarget.38_6 == 144)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  EcuM_LastResetMode.39_7 = EcuM_LastResetMode;
  *sleepMode_18(D) = EcuM_LastResetMode.39_7;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 8, 18);

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (shutdownTarget_15(D) != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  if (sleepMode_18(D) != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  ret_22 = 0;
  # DEBUG ret => ret_22
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  ret_23 = 1;
  # DEBUG ret => ret_23

  <bb 17> :
  # ret_8 = PHI <ret_25(3), ret_22(15), ret_23(16)>
  # DEBUG ret => ret_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = ret_8;
  return _26;

}


EcuM_ASR40_GetShutdownTarget (EcuM_ASR40_StateType * shutdownTarget, uint8 * sleepMode)
{
  Std_ReturnType ret;
  struct EcuM_CoreContextType * _1;
  unsigned char _2;
  unsigned char EcuM_ShutdownTarget.31_3;
  unsigned char EcuM_ShutdownTarget.32_4;
  struct EcuM_CoreContextType * _5;
  unsigned char _6;
  unsigned char EcuM_ShutdownTarget.33_7;
  unsigned char EcuM_ResetMode.34_8;
  Std_ReturnType _28;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_13 = 1;
  # DEBUG ret => ret_13
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = EcuM_GetMasterCoreInstance ();
  _2 = _1->State;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 9, 16);
  # DEBUG BEGIN_STMT
  ret_27 = 1;
  # DEBUG ret => ret_27
  goto <bb 17>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (shutdownTarget_16(D) != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget.31_3 = EcuM_ShutdownTarget;
  *shutdownTarget_16(D) = EcuM_ShutdownTarget.31_3;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 9, 18);

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (sleepMode_19(D) != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget.32_4 = EcuM_ShutdownTarget;
  if (EcuM_ShutdownTarget.32_4 == 80)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _5 = EcuM_GetMasterCoreInstance ();
  _6 = _5->SleepMode;
  *sleepMode_19(D) = _6;
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget.33_7 = EcuM_ShutdownTarget;
  if (EcuM_ShutdownTarget.33_7 == 144)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  EcuM_ResetMode.34_8 = EcuM_ResetMode;
  *sleepMode_19(D) = EcuM_ResetMode.34_8;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 9, 18);

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (sleepMode_19(D) != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  if (shutdownTarget_16(D) != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  ret_24 = 0;
  # DEBUG ret => ret_24
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  ret_25 = 1;
  # DEBUG ret => ret_25

  <bb 17> :
  # ret_9 = PHI <ret_27(3), ret_24(15), ret_25(16)>
  # DEBUG ret => ret_9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _28 = ret_9;
  return _28;

}


EcuM_ASR40_SelectShutdownTarget (EcuM_ASR40_StateType target, uint8 mode)
{
  Std_ReturnType ret;
  Std_ReturnType _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_1 = 1;
  # DEBUG ret => ret_1
  # DEBUG BEGIN_STMT
  ret_6 = EcuM_SelectShutdownTargetSequence (target_3(D), mode_4(D));
  # DEBUG ret => ret_6
  # DEBUG BEGIN_STMT
  _7 = ret_6;
  return _7;

}


EcuM_SelectShutdownTargetSequence (EcuM_ASR40_StateType target, uint8 mode)
{
  Std_ReturnType ret;
  struct EcuM_CoreContextType * _1;
  unsigned char _2;
  struct EcuM_CoreContextType * _3;
  Std_ReturnType _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_7 = 1;
  # DEBUG ret => ret_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = EcuM_GetMasterCoreInstance ();
  _2 = _1->State;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 6, 16);
  goto <bb 18>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (target_10(D) != 80)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  if (target_10(D) != 144)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (target_10(D) != 128)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 6, 22);
  goto <bb 18>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (target_10(D) == 80)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (mode_12(D) != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 6, 19);
  goto <bb 18>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  EcuM_EnterExclusiveArea ();
  # DEBUG BEGIN_STMT
  if (target_10(D) == 80)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget = target_10(D);
  # DEBUG BEGIN_STMT
  _3 = EcuM_GetCoreInstance ();
  _3->SleepMode = mode_12(D);
  goto <bb 17>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (target_10(D) == 144)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget = target_10(D);
  # DEBUG BEGIN_STMT
  EcuM_ResetMode = mode_12(D);
  goto <bb 17>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (target_10(D) == 128)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget = target_10(D);

  <bb 17> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  EcuM_ExitExclusiveArea ();
  # DEBUG BEGIN_STMT
  ret_22 = 0;
  # DEBUG ret => ret_22

  <bb 18> :
  # ret_4 = PHI <ret_7(3), ret_7(7), ret_7(10), ret_22(17)>
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _24 = ret_4;
  return _24;

}


EcuM_Shutdown ()
{
  struct EcuM_CoreContextType * _1;
  unsigned char _2;
  unsigned char EcuM_ShutdownTarget.28_3;
  unsigned char EcuM_ShutdownTarget.29_4;
  unsigned char EcuM_ResetMode.30_5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = EcuM_GetMasterCoreInstance ();
  _2 = _1->State;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 2, 16);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EcuM_OnGoOffTwo ();
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget.28_3 = EcuM_ShutdownTarget;
  EcuM_LastShutdownTarget = EcuM_ShutdownTarget.28_3;
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget.29_4 = EcuM_ShutdownTarget;
  if (EcuM_ShutdownTarget.29_4 == 144)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  EcuM_ResetMode.30_5 = EcuM_ResetMode;
  EcuM_AL_Reset (EcuM_ResetMode.30_5);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  EcuM_AL_SwitchOff ();

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


EcuM_StartupTwo ()
{
  struct EcuM_CoreContextType * CoreInstance;
  unsigned char _1;
  unsigned char _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CoreInstance_6 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_6->State;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 26, 16);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  CoreInstance_6->State = 18;
  # DEBUG BEGIN_STMT
  EcuM_SchM_Init ();
  # DEBUG BEGIN_STMT
  BswM_Init (0B);
  # DEBUG BEGIN_STMT
  CoreInstance_6->State = 48;
  # DEBUG BEGIN_STMT
  _2 = CoreInstance_6->State;
  BswM_EcuM_CurrentState (_2);

  <bb 5> :
  # DEBUG BEGIN_STMT
  return;

}


EcuM_Init ()
{
  struct EcuM_CoreContextType * CoreInstance;
  const struct EcuM_ConfigType * _1;
  const struct EcuM_ConfigType * EcuM_ConfigPtr.19_2;
  const struct EcuM_ConfigType * EcuM_ConfigPtr.20_3;
  unsigned char _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CoreInstance_8 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  *CoreInstance_8 = EcuM_InitialContext;
  # DEBUG BEGIN_STMT
  CoreInstance_8->State = 17;
  # DEBUG BEGIN_STMT
  EcuM_AL_DriverInitZero ();
  # DEBUG BEGIN_STMT
  _1 = EcuM_DeterminePbConfiguration ();
  EcuM_ConfigPtr = _1;
  # DEBUG BEGIN_STMT
  EcuM_ConfigPtr.19_2 = EcuM_ConfigPtr;
  if (EcuM_ConfigPtr.19_2 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 1, 18);
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EcuM_ConfigPtr.20_3 = EcuM_ConfigPtr;
  _4 = EcuM_IsValidConfig (EcuM_ConfigPtr.20_3);
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 1, 27);
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  EcuM_Init_SingleCore ();

  <bb 7> :
  # DEBUG BEGIN_STMT
  return;

}


EcuM_Init_SingleCore ()
{
  const struct EcuM_ConfigType * EcuM_ConfigPtr.21_1;
  unsigned char _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EcuM_StartPreOS ();
  # DEBUG BEGIN_STMT
  EcuM_ConfigPtr.21_1 = EcuM_ConfigPtr;
  _2 = EcuM_ConfigPtr.21_1->DefaultAppMode;
  OS_UserStartOs (_2);
  return;

}


EcuM_StartPreOS ()
{
  const struct EcuM_ConfigType * EcuM_ConfigPtr.22_1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EcuM_AL_SetProgrammableInterrupts ();
  # DEBUG BEGIN_STMT
  EcuM_ConfigPtr.22_1 = EcuM_ConfigPtr;
  EcuM_AL_DriverInitOne (EcuM_ConfigPtr.22_1);
  # DEBUG BEGIN_STMT
  EcuM_BootTarget[0] = 0;
  # DEBUG BEGIN_STMT
  EcuM_BootTarget[1] = 0;
  # DEBUG BEGIN_STMT
  EcuM_SearchResetReason ();
  # DEBUG BEGIN_STMT
  EcuM_SetSleepOrResetMode ();
  return;

}


EcuM_SearchResetReason ()
{
  const struct EcuM_WksConfigType * wksPtr;
  boolean reasonFound;
  Mcu_ResetType mcuResetReason;
  uint8_least wks;
  <unnamed type> _1;
  <unnamed type> _2;
  unsigned char _3;
  int _4;
  long unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  reasonFound_11 = 0;
  # DEBUG reasonFound => reasonFound_11
  # DEBUG BEGIN_STMT
  mcuResetReason_14 = Mcu_GetResetReason ();
  # DEBUG mcuResetReason => mcuResetReason_14
  # DEBUG BEGIN_STMT
  wks_15 = 0;
  # DEBUG wks => wks_15
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  wksPtr_16 = &EcuM_WksConfigList[wks_6];
  # DEBUG wksPtr => wksPtr_16
  # DEBUG BEGIN_STMT
  _1 = wksPtr_16->ResetReason;
  if (_1 != 27)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _2 = wksPtr_16->ResetReason;
  if (mcuResetReason_14 == _2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _3 = wksPtr_16->WksId;
  _4 = (int) _3;
  _5 = 1 << _4;
  EcuM_SetWakeupEvent (_5);
  # DEBUG BEGIN_STMT
  reasonFound_18 = 1;
  # DEBUG reasonFound => reasonFound_18

  <bb 6> :
  # reasonFound_7 = PHI <reasonFound_8(3), reasonFound_8(4), reasonFound_18(5)>
  # DEBUG reasonFound => reasonFound_7
  # DEBUG BEGIN_STMT
  wks_19 = wks_6 + 1;
  # DEBUG wks => wks_19

  <bb 7> :
  # wks_6 = PHI <wks_15(2), wks_19(6)>
  # reasonFound_8 = PHI <reasonFound_11(2), reasonFound_7(6)>
  # DEBUG reasonFound => reasonFound_8
  # DEBUG wks => wks_6
  # DEBUG BEGIN_STMT
  if (wks_6 <= 5)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  if (reasonFound_8 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


EcuM_SetSleepOrResetMode ()
{
  const struct EcuM_ConfigType * EcuM_ConfigPtr.23_1;
  unsigned char _2;
  unsigned char EcuM_ShutdownTarget.24_3;
  const struct EcuM_ConfigType * EcuM_ConfigPtr.25_4;
  struct EcuM_CoreContextType * _5;
  unsigned char _6;
  unsigned char EcuM_ShutdownTarget.26_7;
  const struct EcuM_ConfigType * EcuM_ConfigPtr.27_8;
  unsigned char _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  EcuM_ConfigPtr.23_1 = EcuM_ConfigPtr;
  _2 = EcuM_ConfigPtr.23_1->DefaultShutdownTarget;
  EcuM_ShutdownTarget = _2;
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget.24_3 = EcuM_ShutdownTarget;
  if (EcuM_ShutdownTarget.24_3 == 80)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  EcuM_ConfigPtr.25_4 = EcuM_ConfigPtr;
  _5 = EcuM_GetCoreInstance ();
  _6 = EcuM_ConfigPtr.25_4->DefaultMode;
  _5->SleepMode = _6;
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget.26_7 = EcuM_ShutdownTarget;
  if (EcuM_ShutdownTarget.26_7 == 144)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  EcuM_ConfigPtr.27_8 = EcuM_ConfigPtr;
  _9 = EcuM_ConfigPtr.27_8->DefaultMode;
  EcuM_ResetMode = _9;

  <bb 6> :
  # DEBUG BEGIN_STMT
  return;

}


EcuM_GoPoll ()
{
  Std_ReturnType ret;
  struct EcuM_CoreContextType * CoreInstance;
  unsigned char _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  long unsigned int _5;
  unsigned char _6;
  int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  Std_ReturnType _26;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CoreInstance_17 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_17
  # DEBUG BEGIN_STMT
  ret_18 = 1;
  # DEBUG ret => ret_18
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_17->State;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 33, 16);
  goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EcuM_GoSleep ();
  # DEBUG BEGIN_STMT
  _2 = CoreInstance_17->SleepMode;
  _3 = (int) _2;
  _4 = EcuM_SleepModeConfigList[_3].mcuMode;
  _5 = (long unsigned int) _4;
  Mcu_SetMode (_5);
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  EcuM_SleepActivity ();
  # DEBUG BEGIN_STMT
  _6 = CoreInstance_17->SleepMode;
  _7 = (int) _6;
  _8 = EcuM_SleepModeConfigList[_7].wakeupSource;
  _9 = _8 & 63;
  EcuM_CheckWakeup (_9);

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = CoreInstance_17->WakeupStatus.Pending;
  if (_10 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _11 = CoreInstance_17->WakeupStatus.Validated;
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  EcuM_WakeupRestart ();
  # DEBUG BEGIN_STMT
  ret_24 = 0;
  # DEBUG ret => ret_24

  <bb 9> :
  # ret_12 = PHI <ret_18(3), ret_24(8)>
  # DEBUG ret => ret_12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = ret_12;
  return _26;

}


EcuM_HaltSequence ()
{
  struct EcuM_CoreContextType * CoreInstance;
  long unsigned int _1;
  long unsigned int _2;
  unsigned char _3;
  int _4;
  unsigned char _5;
  long unsigned int _6;
  unsigned char _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  CoreInstance_12 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_12
  # DEBUG BEGIN_STMT
  EcuM_PreHalt ();
  # DEBUG BEGIN_STMT
  EcuM_GenerateRamHash ();
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_12->WakeupStatus.Pending;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = CoreInstance_12->WakeupStatus.Validated;
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 = CoreInstance_12->SleepMode;
  _4 = (int) _3;
  _5 = EcuM_SleepModeConfigList[_4].mcuMode;
  _6 = (long unsigned int) _5;
  Mcu_SetMode (_6);

  <bb 5> :
  # DEBUG BEGIN_STMT
  EcuM_PostHalt ();
  # DEBUG BEGIN_STMT
  _7 = EcuM_CheckRamHash ();
  if (_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  EcuM_RamCheckStatus = 2;
  # DEBUG BEGIN_STMT
  EcuM_ErrorHook (2);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EcuM_RamCheckStatus = 1;

  <bb 8> :
  return;

}


EcuM_GoHalt ()
{
  Std_ReturnType ret;
  struct EcuM_CoreContextType * _1;
  unsigned char _2;
  Std_ReturnType _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_4 = 1;
  # DEBUG ret => ret_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = EcuM_GetCoreInstance ();
  _2 = _1->State;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 32, 16);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EcuM_GoSleep ();
  # DEBUG BEGIN_STMT
  EcuM_HaltSequence ();
  # DEBUG BEGIN_STMT
  EcuM_WakeupRestart ();

  <bb 5> :
  # DEBUG BEGIN_STMT
  ret_11 = 0;
  # DEBUG ret => ret_11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 = ret_11;
  return _12;

}


EcuM_GoDownMaster ()
{
  struct EcuM_CoreContextType * CoreInstance;
  Std_ReturnType ret;
  long unsigned int _1;
  long unsigned int _2;
  unsigned char EcuM_ShutdownInfoCurrentIdx.0_3;
  int _4;
  unsigned char EcuM_ShutdownTarget.1_5;
  unsigned char EcuM_ShutdownTarget.2_6;
  unsigned char EcuM_ShutdownInfoCurrentIdx.3_7;
  int _8;
  unsigned char EcuM_ResetMode.4_9;
  unsigned char EcuM_ShutdownInfoCurrentIdx.5_10;
  int _11;
  unsigned char EcuM_ShutdownInfoCurrentIdx.6_12;
  int _13;
  unsigned char EcuM_ShutdownCause.7_14;
  unsigned char EcuM_ShutdownInfoCurrentIdx.8_15;
  int _16;
  unsigned char EcuM_ShutdownInfoCurrentIdx.9_17;
  unsigned char EcuM_ShutdownInfoCurrentIdx.10_18;
  unsigned char _19;
  unsigned char EcuM_ShutdownInfoCurrentIdx.11_20;
  unsigned char EcuM_ShutdownInfoCurrentIdx.12_21;
  unsigned char EcuM_ShutdownInfoStartIdx.13_22;
  unsigned char EcuM_ShutdownInfoStartIdx.14_23;
  unsigned char EcuM_ShutdownInfoStartIdx.15_24;
  unsigned char _25;
  unsigned char EcuM_ShutdownInfoStartIdx.16_26;
  struct EcuM_CoreContextType * _27;
  Std_ReturnType _52;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_32 = 0;
  # DEBUG ret => ret_32
  # DEBUG BEGIN_STMT
  CoreInstance_35 = EcuM_GetCoreInstance ();
  # DEBUG CoreInstance => CoreInstance_35
  # DEBUG BEGIN_STMT
  EcuM_OnGoOffOne ();
  # DEBUG BEGIN_STMT
  BswM_Deinit ();
  # DEBUG BEGIN_STMT
  EcuM_SchM_Deinit ();
  # DEBUG BEGIN_STMT
  _1 = CoreInstance_35->WakeupStatus.Pending;
  if (_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _2 = CoreInstance_35->WakeupStatus.Validated;
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget = 144;

  <bb 5> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoCurrentIdx.0_3 = EcuM_ShutdownInfoCurrentIdx;
  _4 = (int) EcuM_ShutdownInfoCurrentIdx.0_3;
  EcuM_ShutdownTarget.1_5 = EcuM_ShutdownTarget;
  EcuM_ShutdownInfo[_4].target = EcuM_ShutdownTarget.1_5;
  # DEBUG BEGIN_STMT
  EcuM_ShutdownTarget.2_6 = EcuM_ShutdownTarget;
  if (EcuM_ShutdownTarget.2_6 == 144)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoCurrentIdx.3_7 = EcuM_ShutdownInfoCurrentIdx;
  _8 = (int) EcuM_ShutdownInfoCurrentIdx.3_7;
  EcuM_ResetMode.4_9 = EcuM_ResetMode;
  EcuM_ShutdownInfo[_8].mode = EcuM_ResetMode.4_9;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoCurrentIdx.5_10 = EcuM_ShutdownInfoCurrentIdx;
  _11 = (int) EcuM_ShutdownInfoCurrentIdx.5_10;
  EcuM_ShutdownInfo[_11].mode = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoCurrentIdx.6_12 = EcuM_ShutdownInfoCurrentIdx;
  _13 = (int) EcuM_ShutdownInfoCurrentIdx.6_12;
  EcuM_ShutdownCause.7_14 = EcuM_ShutdownCause;
  EcuM_ShutdownInfo[_13].cause = EcuM_ShutdownCause.7_14;
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoCurrentIdx.8_15 = EcuM_ShutdownInfoCurrentIdx;
  _16 = (int) EcuM_ShutdownInfoCurrentIdx.8_15;
  EcuM_ShutdownInfo[_16].sdTime = 0;
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoCurrentIdx.9_17 = EcuM_ShutdownInfoCurrentIdx;
  EcuM_ShutdownInfoCurrentIdx.10_18 = EcuM_ShutdownInfoCurrentIdx.9_17;
  _19 = EcuM_ShutdownInfoCurrentIdx.10_18 + 1;
  EcuM_ShutdownInfoCurrentIdx = _19;
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoCurrentIdx.11_20 = EcuM_ShutdownInfoCurrentIdx;
  if (EcuM_ShutdownInfoCurrentIdx.11_20 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoCurrentIdx = 0;

  <bb 10> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoCurrentIdx.12_21 = EcuM_ShutdownInfoCurrentIdx;
  EcuM_ShutdownInfoStartIdx.13_22 = EcuM_ShutdownInfoStartIdx;
  if (EcuM_ShutdownInfoCurrentIdx.12_21 == EcuM_ShutdownInfoStartIdx.13_22)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoStartIdx.14_23 = EcuM_ShutdownInfoStartIdx;
  EcuM_ShutdownInfoStartIdx.15_24 = EcuM_ShutdownInfoStartIdx.14_23;
  _25 = EcuM_ShutdownInfoStartIdx.15_24 + 1;
  EcuM_ShutdownInfoStartIdx = _25;
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoStartIdx.16_26 = EcuM_ShutdownInfoStartIdx;
  if (EcuM_ShutdownInfoStartIdx.16_26 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  EcuM_ShutdownInfoStartIdx = 0;

  <bb 13> :
  # DEBUG BEGIN_STMT
  _27 = EcuM_GetMasterCoreInstance ();
  _27->State = 128;
  # DEBUG BEGIN_STMT
  OS_UserShutdownOs (0);
  # DEBUG BEGIN_STMT
  _52 = ret_32;
  return _52;

}


EcuM_GoDown (uint16 caller)
{
  Std_ReturnType ret;
  struct EcuM_CoreContextType * _1;
  unsigned char _2;
  Std_ReturnType _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret_5 = 0;
  # DEBUG ret => ret_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = EcuM_GetCoreInstance ();
  _2 = _1->State;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Det_ASR40_ReportError (10, 0, 31, 16);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ret_9 = EcuM_GoDownMaster ();
  # DEBUG ret => ret_9

  <bb 5> :
  # ret_3 = PHI <ret_5(3), ret_9(4)>
  # DEBUG ret => ret_3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _11 = ret_3;
  return _11;

}


